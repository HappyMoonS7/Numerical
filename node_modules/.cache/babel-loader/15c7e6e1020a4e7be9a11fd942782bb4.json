{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Linear Algebra/Jordan.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nconst InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar A = [],\n    B = [],\n    matrixA = [],\n    matrixB = [],\n    output = [];\n\nclass Jordan extends Component {\n  constructor() {\n    super();\n    this.state = {\n      row: 0,\n      column: 0,\n      showDimentionForm: true,\n      showMatrixForm: false,\n      showOutputCard: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.jordan = this.jordan.bind(this);\n  }\n\n  jordan(n) {\n    this.initMatrix();\n\n    if (A[0][0] === 0) {\n      //pivoting\n      var tempRow = JSON.parse(JSON.stringify(A[0]));\n      var tempColumn = B[0];\n      A[0] = A[1];\n      A[1] = tempRow;\n      B[0] = B[1];\n      B[1] = tempColumn;\n    } //Forward eliminate\n\n\n    for (var k = 0; k < n; k++) {\n      for (var i = k + 1; i < n; i++) {\n        var factor = A[i][k] / A[k][k];\n\n        for (var j = k; j < n; j++) {\n          A[i][j] = A[i][j] - factor * A[k][j];\n        }\n\n        B[i] = B[i] - factor * B[k];\n      }\n    } //Backward Substitution\n\n\n    for (k = n - 1; k >= 0; k--) {\n      for (i = k; i >= 0; i--) {\n        if (i === k) {\n          //Identity matrix\n          factor = 1 / A[i][k];\n\n          for (j = 0; j < n; j++) {\n            A[i][j] = A[i][j] * factor;\n          }\n\n          B[i] = B[i] * factor;\n        } else {\n          factor = A[i][k] / A[k][k];\n\n          for (j = 0; j < n; j++) {\n            A[i][j] = A[i][j] - factor * A[k][j];\n          }\n\n          B[i] = B[i] - factor * B[k];\n        }\n      }\n    }\n\n    for (i = 0; i < n; i++) {\n      output.push(B[i]);\n      output.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this));\n    }\n\n    this.setState({\n      showOutputCard: true\n    });\n  }\n\n  createMatrix(row, column) {\n    for (var i = 1; i <= row; i++) {\n      for (var j = 1; j <= column; j++) {\n        matrixA.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"#06d9a0\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"a\" + i + \"\" + j,\n          placeholder: \"a\" + i + \"\" + j\n        }, \"a\" + i + \"\" + j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 30\n        }, this));\n      }\n\n      matrixA.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 26\n      }, this));\n      matrixB.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"18%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"b\" + i,\n        placeholder: \"b\" + i\n      }, \"b\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 26\n      }, this));\n    }\n\n    this.setState({\n      showDimentionForm: false,\n      showMatrixForm: true\n    });\n  }\n\n  initMatrix() {\n    for (var i = 0; i < this.state.row; i++) {\n      A[i] = [];\n\n      for (var j = 0; j < this.state.column; j++) {\n        A[i][j] = parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value);\n      }\n\n      B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    let _this$state = this.state,\n        row = _this$state.row,\n        column = _this$state.column;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#FFFF\",\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        children: \"Gauss-Jordan Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            bordered: true,\n            style: {\n              width: 400,\n              background: \"gray\",\n              borderRadius: \"15px\",\n              color: \"#FFFFFFFF\"\n            },\n            onChange: this.handleChange,\n            children: [this.state.showDimentionForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Row\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"row\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Column\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"column\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 52\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"dimention_button\",\n                onClick: () => this.createMatrix(row, column),\n                style: {\n                  background: \"#4caf50\",\n                  color: \"white\",\n                  fontSize: \"20px\"\n                },\n                children: [\"Submit\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 47\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 33\n            }, this), this.state.showMatrixForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Matrix [A]\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 56\n              }, this), matrixA, /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Vector [B]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 51\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }, this), matrixB, /*#__PURE__*/_jsxDEV(Button, {\n                id: \"matrix_button\",\n                style: {\n                  background: \"blue\",\n                  color: \"white\",\n                  fontSize: \"20px\"\n                },\n                onClick: () => this.jordan(row),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(Card, {\n            title: \"Output\",\n            bordered: true,\n            style: {\n              width: 400,\n              background: \"#3d683d\",\n              color: \"#FFFFFFFF\",\n              float: \"left\"\n            },\n            onChange: this.handleChange,\n            id: \"answerCard\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: \"24px\",\n                fontWeight: \"bold\"\n              },\n              children: output\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Jordan;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Linear Algebra/Jordan.js"],"names":["React","Component","Card","Input","Button","InputStyle","background","color","fontWeight","fontSize","A","B","matrixA","matrixB","output","Jordan","constructor","state","row","column","showDimentionForm","showMatrixForm","showOutputCard","handleChange","bind","jordan","n","initMatrix","tempRow","JSON","parse","stringify","tempColumn","k","i","factor","j","push","setState","createMatrix","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","parseFloat","document","getElementById","value","event","target","name","render","padding","borderRadius","float"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Input, Button } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\n\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], output = []\nclass Jordan extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.jordan = this.jordan.bind(this);\n\n    }\n\n    jordan(n) {\n        this.initMatrix();\n        if (A[0][0] === 0) { //pivoting\n            var tempRow = JSON.parse(JSON.stringify(A[0]));\n            var tempColumn = B[0];\n            A[0] = A[1];\n            A[1] = tempRow;\n            B[0] = B[1];\n            B[1] = tempColumn;\n        }\n        //Forward eliminate\n        for (var k = 0; k < n; k++) {\n            for (var i = k + 1; i < n; i++) {\n                var factor = A[i][k] / A[k][k];\n                for (var j = k; j < n; j++) {\n                    A[i][j] = A[i][j] - factor * A[k][j];\n                }\n                B[i] = B[i] - factor * B[k];\n\n            }\n        }\n        //Backward Substitution\n        for (k = n - 1; k >= 0; k--) {\n            for (i = k; i >= 0; i--) {\n\n                if (i === k) {//Identity matrix\n                    factor = 1 / A[i][k];\n\n                    for (j = 0; j < n; j++) {\n                        A[i][j] = A[i][j] * factor;\n                    }\n                    B[i] = B[i] * factor;\n\n\n                }\n                else {\n                    factor = A[i][k] / A[k][k];\n                    for (j = 0; j < n; j++) {\n                        A[i][j] = A[i][j] - factor * A[k][j];\n                    }\n                    B[i] = B[i] - factor * B[k];\n                }\n            }\n        }\n        for (i = 0; i < n; i++) {\n            output.push(B[i]);\n            output.push(<br />)\n        }\n        this.setState({\n            showOutputCard: true\n        });\n\n\n    }\n    createMatrix(row, column) {\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\",\n                    backgroundColor: \"#06d9a0\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"white\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={\"a\" + i + \"\" + j} />)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={\"b\" + i} />)\n\n\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n    }\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        let { row, column } = this.state;\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Gauss-Jordan Method</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ width: 400, background: \"gray\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" style={InputStyle}></Input>\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" style={InputStyle}></Input>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createMatrix(row, column)\n                                    }\n                                        style={{ background: \"#4caf50\", color: \"white\", fontSize: \"20px\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2>Matrix [A]</h2><br />{matrixA}\n                                    <h2>Vector [B]<br /></h2>{matrixB}\n                                    \n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"blue\", color: \"white\", fontSize: \"20px\" }}\n                                        onClick={() => this.jordan(row)}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n\n                        </Card>\n\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ width: 400, background: \"#3d683d\", color: \"#FFFFFFFF\", float: \"left\" }}\n                                onChange={this.handleChange} id=\"answerCard\">\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{output}</p>\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Jordan;\n\n\n\n"]},"metadata":{},"sourceType":"module"}