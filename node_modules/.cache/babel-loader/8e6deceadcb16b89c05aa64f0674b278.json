{"ast":null,"code":"import _defineProperty from \"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Desktop/Numerical-method/src/Calculate/Interpolation/Newton.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar columns = [{\n  title: \"No.\",\n  dataIndex: \"no\",\n  key: \"no\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Y\",\n  dataIndex: \"y\",\n  key: \"y\"\n}];\nvar x, y, tableTag, interpolatePoint, tempTag, fx;\n\nvar Newton = /*#__PURE__*/function (_Component) {\n  _inherits(Newton, _Component);\n\n  var _super = _createSuper(Newton);\n\n  function Newton() {\n    var _this;\n\n    _classCallCheck(this, Newton);\n\n    _this = _super.call(this);\n    x = [];\n    y = [];\n    interpolatePoint = [];\n    tempTag = [];\n    tableTag = [];\n    _this.state = {\n      nPoints: 0,\n      X: 0,\n      interpolatePoint: 0,\n      showInputForm: true,\n      showTableInput: false,\n      showOutputCard: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.newton_difference = _this.newton_difference.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Newton, [{\n    key: \"createTableInput\",\n    value: function createTableInput(n) {\n      for (var i = 1; i <= n; i++) {\n        x.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"100%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"x\" + i,\n          placeholder: \"x\" + i\n        }, \"x\" + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 20\n        }, this));\n        y.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"100%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"y\" + i,\n          placeholder: \"y\" + i\n        }, \"y\" + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 20\n        }, this));\n        tableTag.push({\n          no: i,\n          x: x[i - 1],\n          y: y[i - 1]\n        });\n      }\n\n      this.setState({\n        showInputForm: false,\n        showTableInput: true\n      });\n    }\n  }, {\n    key: \"createInterpolatePointInput\",\n    value: function createInterpolatePointInput() {\n      for (var i = 1; i <= this.state.interpolatePoint; i++) {\n        tempTag.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"14%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"p\" + i,\n          placeholder: \"p\" + i\n        }, \"p\" + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 26\n        }, this));\n      }\n    }\n  }, {\n    key: \"initialValue\",\n    value: function initialValue() {\n      x = [];\n      y = [];\n\n      for (var i = 1; i <= this.state.nPoints; i++) {\n        x[i] = parseFloat(document.getElementById(\"x\" + i).value);\n        y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n      }\n\n      for (i = 1; i <= this.state.interpolatePoint; i++) {\n        interpolatePoint[i] = parseInt(document.getElementById(\"p\" + i).value);\n      }\n    }\n  }, {\n    key: \"C\",\n    value: function C(n) {\n      if (n === 1) {\n        return 0;\n      } else {\n        return (y[interpolatePoint[n]] - y[interpolatePoint[n - 1]]) / (x[interpolatePoint[n]] - x[interpolatePoint[n - 1]]) - this.C(n - 1);\n      }\n    }\n  }, {\n    key: \"findX\",\n    value: function findX(n, X) {\n      if (n < 1) {\n        return 1;\n      } else {\n        console.log(X + \" - \" + x[interpolatePoint[n]]);\n        return (X - x[interpolatePoint[n]]) * this.findX(n - 1, X);\n      }\n    }\n  }, {\n    key: \"newton_difference\",\n    value: function newton_difference(n, X) {\n      this.initialValue();\n      fx = y[1];\n\n      if (n === 2) {\n        //if linear interpolate\n        fx += (y[interpolatePoint[2]] - y[interpolatePoint[1]]) / (x[interpolatePoint[2]] - x[interpolatePoint[1]]) * (X - x[interpolatePoint[1]]);\n      } else {\n        for (var i = 2; i <= n; i++) {\n          fx += this.C(i) / (x[interpolatePoint[i]] - x[interpolatePoint[1]]) * this.findX(i - 1, X);\n        }\n      }\n\n      this.setState({\n        showOutputCard: true\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: \"black\",\n            fontWeight: \"bold\"\n          },\n          children: \"Newton's Divided Differences Interpolation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              bordered: true,\n              style: {\n                background: \"gray\",\n                borderRadius: \"15px\",\n                color: \"#FFFFFFFF\"\n              },\n              onChange: this.handleChange,\n              children: [this.state.showTableInput && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Table, {\n                  columns: columns,\n                  dataSource: tableTag,\n                  pagination: false,\n                  bordered: true,\n                  bodyStyle: {\n                    fontWeight: \"bold\",\n                    fontSize: \"18px\",\n                    color: \"white\",\n                    overflowY: \"scroll\",\n                    minWidth: 120,\n                    maxHeight: 300\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: [\"interpolatePoint \", parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\" : parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" : \"(Polynomial)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 43\n                }, this), tempTag, /*#__PURE__*/_jsxDEV(Button, {\n                  id: \"matrix_button\",\n                  style: {\n                    background: \"blue\",\n                    color: \"white\"\n                  },\n                  onClick: function onClick() {\n                    return _this2.newton_difference(parseInt(_this2.state.interpolatePoint), parseFloat(_this2.state.X));\n                  },\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 33\n              }, this), this.state.showInputForm && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Number of points(n)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  size: \"large\",\n                  name: \"nPoints\",\n                  style: InputStyle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 65\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"X\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  size: \"large\",\n                  name: \"X\",\n                  style: InputStyle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 47\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"interpolatePoint\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  size: \"large\",\n                  name: \"interpolatePoint\",\n                  style: InputStyle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 62\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  id: \"dimention_button\",\n                  onClick: function onClick() {\n                    _this2.createTableInput(parseInt(_this2.state.nPoints));\n\n                    _this2.createInterpolatePointInput();\n                  },\n                  style: {\n                    background: \"#4caf50\",\n                    color: \"white\"\n                  },\n                  children: [\"Submit\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 47\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Output\",\n              bordered: true,\n              style: {\n                border: \"2px solid black\",\n                background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\",\n                color: \"white\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  fontSize: \"24px\",\n                  fontWeight: \"bold\"\n                },\n                children: fx\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Newton;\n}(Component);\n\nexport default Newton;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Numerical-method/src/Calculate/Interpolation/Newton.js"],"names":["React","Component","Card","Input","Button","Table","InputStyle","background","color","fontWeight","fontSize","columns","title","dataIndex","key","x","y","tableTag","interpolatePoint","tempTag","fx","Newton","state","nPoints","X","showInputForm","showTableInput","showOutputCard","handleChange","bind","newton_difference","n","i","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","no","setState","parseFloat","document","getElementById","value","parseInt","C","console","log","findX","initialValue","event","target","name","padding","borderRadius","overflowY","minWidth","maxHeight","createTableInput","createInterpolatePointInput","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag, interpolatePoint, tempTag, fx\n\nclass Newton extends Component {\n\n    constructor() {\n        super();\n        x = []\n        y = []\n        interpolatePoint = []\n        tempTag = []\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            X: 0,\n            interpolatePoint: 0,\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.newton_difference = this.newton_difference.bind(this);\n\n    }\n    createTableInput(n) {\n        for (var i = 1; i <= n; i++) {\n            x.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={\"x\" + i} />);\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={\"y\" + i} />);\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1]\n            });\n        }\n\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true,\n        })\n    }\n    createInterpolatePointInput() {\n        for (var i = 1; i <= this.state.interpolatePoint; i++) {\n            tempTag.push(<Input style={{\n                width: \"14%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"p\" + i} key={\"p\" + i} placeholder={\"p\" + i} />)\n        }\n    }\n    initialValue() {\n        x = []\n        y = []\n        for (var i = 1; i <= this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById(\"x\" + i).value);\n            y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n        }\n        for (i = 1; i <= this.state.interpolatePoint; i++) {\n            interpolatePoint[i] = parseInt(document.getElementById(\"p\" + i).value);\n        }\n    }\n    C(n) {\n        if (n === 1) {\n            return 0\n        }\n        else {\n            return ((y[interpolatePoint[n]] - y[interpolatePoint[n - 1]]) / (x[interpolatePoint[n]] - x[interpolatePoint[n - 1]])) - this.C(n - 1)\n        }\n\n    }\n    findX(n, X) {\n        if (n < 1) {\n            return 1\n        }\n        else {\n            console.log(X + \" - \" + x[interpolatePoint[n]])\n            return (X - x[interpolatePoint[n]]) * this.findX(n - 1, X)\n        }\n    }\n    newton_difference(n, X) {\n        this.initialValue()\n        fx = y[1]\n        if (n === 2) { //if linear interpolate\n            fx += ((y[interpolatePoint[2]] - y[interpolatePoint[1]]) / (x[interpolatePoint[2]] - x[interpolatePoint[1]])) * (X - x[interpolatePoint[1]])\n        }\n        else {\n            for (var i = 2; i <= n; i++) {\n                fx += (this.C(i) / (x[interpolatePoint[i]] - x[interpolatePoint[1]])) * this.findX(i - 1, X)\n            }\n        }\n\n        this.setState({\n            showOutputCard: true\n        })\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        return (\n            <div style={{ padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Newton's Divided Differences Interpolation</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"gray\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}></Table>\n                                    <br /><h2>interpolatePoint {parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\" :\n                                        parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" :\n                                            \"(Polynomial)\"}</h2>{tempTag}\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"blue\", color: \"white\" }}\n                                        onClick={() => this.newton_difference(parseInt(this.state.interpolatePoint), parseFloat(this.state.X))}>\n                                        Submit\n                                </Button>\n                                </div>}\n\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" style={InputStyle}></Input>\n                                    <h2>X</h2><Input size=\"large\" name=\"X\" style={InputStyle}></Input>\n                                    <h2>interpolatePoint</h2><Input size=\"large\" name=\"interpolatePoint\" style={InputStyle}></Input>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => {\n                                            this.createTableInput(parseInt(this.state.nPoints));\n                                            this.createInterpolatePointInput()\n                                        }\n                                    }\n                                        style={{ background: \"#4caf50\", color: \"white\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ border: \"2px solid black\", background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\", color: \"white\" }}\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{fx}</p>\n\n                            </Card>\n                        }\n                    </div>\n\n                </div>\n\n\n            </div>\n        );\n    }\n}\nexport default Newton;\n\n\n\n"]},"metadata":{},"sourceType":"module"}