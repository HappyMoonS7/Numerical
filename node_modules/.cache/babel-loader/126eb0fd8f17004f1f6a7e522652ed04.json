{"ast":null,"code":"var _slicedToArray = require(\"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createClass = require(\"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\n// Generated by CoffeeScript 2.5.1\n(function () {\n  /* arg =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  z\n   General description\n  -------------------\n  Returns the angle of complex z.\n   */\n\n  /*\n   Argument (angle) of complex z\n     z    arg(z)\n    -    ------\n     a    0\n     -a    -pi      See note 3 below\n     (-1)^a    a pi\n     exp(a + i b)  b\n     a b    arg(a) + arg(b)\n     a + i b    arctan(b/a)\n   Result by quadrant\n     z    arg(z)\n    -    ------\n     1 + i    1/4 pi\n     1 - i    -1/4 pi\n     -1 + i    3/4 pi\n     -1 - i    -3/4 pi\n   Notes\n     1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n     2. Symbols in z are assumed to be positive and real.\n     3. Negative direction adds -pi to angle.\n        Example: z = (-1)^(1/3), abs(z) = 1/3 pi, abs(-z) = -2/3 pi\n     4. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n       arg(numerator(z)) - arg(denominator(z))\n        must be used to get the correct answer. Now the operation is\n       automatic.\n  */\n\n  /*\n   Returns the coefficient of the imaginary part of complex z\n     z    imag(z)\n    -    -------\n     a + i b    b\n     exp(i a)  sin(a)\n  */\n\n  /* Power function\n     Input:    push  Base\n         push  Exponent\n     Output:    Result on stack\n  */\n\n  /*\n  Convert complex z to rectangular form\n     Input:    push  z\n     Output:    Result on stack\n  */\n\n  /* det =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  m\n   General description\n  -------------------\n  Returns the determinant of matrix m.\n  Uses Gaussian elimination for numerical matrices.\n   Example:\n     det(((1,2),(3,4)))\n    > -2\n   */\n\n  /* adj =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  m\n   General description\n  -------------------\n  Returns the adjunct of matrix m. The inverse of m is equal to adj(m) divided by det(m).\n   */\n\n  /*\n   Guesses a rational for each float in the passed expression\n  */\n\n  /* arccos =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the inverse cosine of x.\n   */\n\n  /* arccosh =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the inverse hyperbolic cosine of x.\n   */\n\n  /* arcsin =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the inverse sine of x.\n   */\n\n  /* arcsinh =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the inverse hyperbolic sine of x.\n   */\n\n  /* arctan =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the inverse tangent of x.\n   */\n\n  /* arctanh =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the inverse hyperbolic tangent of x.\n   */\n\n  /* besselj =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x,n\n   General description\n  -------------------\n   Returns a solution to the Bessel differential equation (Bessel function of first kind).\n   Recurrence relation:\n     besselj(x,n) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n-2)\n     besselj(x,1/2) = sqrt(2/pi/x) sin(x)\n     besselj(x,-1/2) = sqrt(2/pi/x) cos(x)\n   For negative n, reorder the recurrence relation as:\n     besselj(x,n-2) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n)\n   Substitute n+2 for n to obtain\n     besselj(x,n) = (2/x) (n+1) besselj(x,n+1) - besselj(x,n+2)\n   Examples:\n     besselj(x,3/2) = (1/x) besselj(x,1/2) - besselj(x,-1/2)\n     besselj(x,-3/2) = -(1/x) besselj(x,-1/2) - besselj(x,1/2)\n   */\n\n  /* bessely =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x,n\n   General description\n  -------------------\n   Bessel function of second kind.\n   */\n\n  /* ceiling =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n   Returns the smallest integer not less than x.\n   */\n\n  /* check =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  p\n   General description\n  -------------------\n  Returns whether the predicate p is true/false or unknown:\n  0 if false, 1 if true or remains unevaluated if unknown.\n  Note that if \"check\" is passed an assignment, it turns it into a test,\n  i.e. check(a = b) is turned into check(a==b) \n  so \"a\" is not assigned anything.\n  Like in many programming languages, \"check\" also gives truthyness/falsyness\n  for numeric values. In which case, \"true\" is returned for non-zero values.\n  Potential improvements: \"check\" can't evaluate strings yet.\n   */\n\n  /* choose =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  n,k\n   General description\n  -------------------\n   Returns the number of combinations of n items taken k at a time.\n   For example, the number of five card hands is choose(52,5)\n   ```\n                            n!\n        choose(n,k) = -------------\n                       k! (n - k)!\n  ```\n  */\n\n  /* circexp =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n   Returns expression x with circular and hyperbolic functions converted to exponential forms. Sometimes this will simplify an expression.\n   */\n\n  /* clear =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n   Completely wipes a variable from the environment (while doing x = quote(x) just unassigns it).\n   */\n\n  /* clearall =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   General description\n  -------------------\n   Completely wipes all variables from the environment.\n   */\n\n  /* cofactor =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  m,i,j\n   General description\n  -------------------\n  Cofactor of a matrix component.\n  Let c be the cofactor matrix of matrix m, i.e. tranpose(c) = adj(m).\n  This function returns c[i,j].\n   */\n\n  /* conj =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  z\n   General description\n  -------------------\n  Returns the complex conjugate of z.\n   */\n\n  /* contract =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  a,i,j\n   General description\n  -------------------\n  Contract across tensor indices i.e. returns \"a\" summed over indices i and j.\n  If i and j are omitted then 1 and 2 are used.\n  contract(m) is equivalent to the trace of matrix m.\n   */\n\n  /* cosh =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the hyperbolic cosine of x\n   ```\n              exp(x) + exp(-x)\n    cosh(x) = ----------------\n                     2\n  ```\n   */\n\n  /* deg =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  p,x\n   General description\n  -------------------\n  Returns the degree of polynomial p(x).\n   */\n\n  /* denominator =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the denominator of expression x.\n   */\n\n  /* dim =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  m,n\n   General description\n  -------------------\n  Returns the cardinality of the nth index of tensor \"m\".\n   */\n\n  /* do =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  a,b,...\n   General description\n  -------------------\n  Evaluates each argument from left to right. Returns the result of the last argument.\n   */\n\n  /* eigenval =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  m\n   General description\n  -------------------\n  Compute eigenvalues of m. See \"eigen\" for more info.\n   */\n\n  /* eigenvec =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  m\n   General description\n  -------------------\n  Compute eigenvectors of m. See \"eigen\" for more info.\n   */\n\n  /* erf =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Authors\n  -------\n  philippe.billet@noos.fr\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Error function erf(x).\n  erf(-x)=erf(x)\n   */\n\n  /*\n  Remove terms that involve a given symbol or expression. For example...\n     filter(x^2 + x + 1, x)    =>  1\n     filter(x^2 + x + 1, x^2)  =>  x + 1\n  */\n\n  /* dot =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  a,b,...\n   General description\n  -------------------\n   The inner (or dot) operator gives products of vectors,\n  matrices, and tensors.\n   Note that for Algebrite, the elements of a vector/matrix\n  can only be scalars. This allows for example to flesh out\n  matrix multiplication using the usual multiplication.\n  So for example block-representations are not allowed.\n   There is an aweful lot of confusion between sw packages on\n  what dot and inner do.\n   First off, the \"dot\" operator is different from the\n  mathematical notion of dot product, which can be\n  slightly confusing.\n   The mathematical notion of dot product is here:\n    http://mathworld.wolfram.com/DotProduct.html\n   However, \"dot\" does that and a bunch of other things,\n  i.e. in Algebrite\n  dot/inner does what the dot of Mathematica does, i.e.:\n   scalar product of vectors:\n     inner((a, b, c), (x, y, z))\n    > a x + b y + c z\n   products of matrices and vectors:\n     inner(((a, b), (c,d)), (x, y))\n    > (a x + b y,c x + d y)\n     inner((x, y), ((a, b), (c,d)))\n    > (a x + c y,b x + d y)\n     inner((x, y), ((a, b), (c,d)), (r, s))\n    > a r x + b s x + c r y + d s y\n   matrix product:\n     inner(((a,b),(c,d)),((r,s),(t,u)))\n    > ((a r + b t,a s + b u),(c r + d t,c s + d u))\n   the \"dot/inner\" operator is associative and\n  distributive but not commutative.\n   In Mathematica, Inner is a generalisation of Dot where\n  the user can specify the multiplication and the addition\n  operators.\n  But here in Algebrite they do the same thing.\n    https://reference.wolfram.com/language/ref/Dot.html\n   https://reference.wolfram.com/language/ref/Inner.html\n    http://uk.mathworks.com/help/matlab/ref/dot.html\n   http://uk.mathworks.com/help/matlab/ref/mtimes.html\n   */\n\n  /*\n   Laguerre function\n   Example\n     laguerre(x,3)\n   Result\n        1   3    3   2\n    - --- x  + --- x  - 3 x + 1\n       6        2\n   The computation uses the following recurrence relation.\n     L(x,0,k) = 1\n     L(x,1,k) = -x + k + 1\n     n*L(x,n,k) = (2*(n-1)+1-x+k)*L(x,n-1,k) - (n-1+k)*L(x,n-2,k)\n   In the \"for\" loop i = n-1 so the recurrence relation becomes\n     (i+1)*L(x,n,k) = (2*i+1-x+k)*L(x,n-1,k) - (i+k)*L(x,n-2,k)\n  */\n\n  /*\n   Return the leading coefficient of a polynomial.\n   Example\n     leading(5x^2+x+1,x)\n   Result\n     5\n   The result is undefined if P is not a polynomial.\n  */\n\n  /*\n   Legendre function\n   Example\n     legendre(x,3,0)\n   Result\n      5   3    3\n    --- x  - --- x\n     2        2\n   The computation uses the following recurrence relation.\n     P(x,0) = 1\n     P(x,1) = x\n     n*P(x,n) = (2*(n-1)+1)*x*P(x,n-1) - (n-1)*P(x,n-2)\n   In the \"for\" loop we have i = n-1 so the recurrence relation becomes\n     (i+1)*P(x,n) = (2*i+1)*x*P(x,n-1) - i*P(x,n-2)\n   For m > 0\n     P(x,n,m) = (-1)^m * (1-x^2)^(m/2) * d^m/dx^m P(x,n)\n  */\n\n  /*\n  Convert complex z to polar form\n     Input:    push  z\n     Output:    Result on stack\n     polar(z) = abs(z) * exp(i * arg(z))\n  */\n\n  /*\n   Returns the real part of complex z\n     z    real(z)\n    -    -------\n     a + i b    a\n     exp(i a)  cos(a)\n  */\n\n  /*\n  Taylor expansion of a function\n     push(F)\n    push(X)\n    push(N)\n    push(A)\n    taylor()\n  */\n\n  /*\n  // up to 100 blocks of 100,000 atoms\n   #define M 100\n  #define N 100000\n   U *mem[M]\n  int mcount\n   U *free_list\n  int free_count\n   U *\n  alloc(void)\n  {\n    U *p\n    if (free_count == 0) {\n      if (mcount == 0)\n        alloc_mem()\n      else {\n        gc()\n        if (free_count < N * mcount / 2)\n          alloc_mem()\n      }\n      if (free_count == 0)\n        stop(\"atom space exhausted\")\n    }\n    p = free_list\n    free_list = free_list->u.cons.cdr\n    free_count--\n    return p\n  }\n   */\n\n  /*\n   Compare adjacent terms in s[] and combine if possible.\n     Returns the number of terms remaining in s[].\n     n  number of terms in s[] initially\n  */\n\n  /* cross =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n   Parameters\n  ----------\n  u,v\n   General description\n  -------------------\n  Returns the cross product of vectors u and v.\n   */\n\n  /* curl =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n   Parameters\n  ----------\n  u\n   General description\n  -------------------\n  Returns the curl of vector u.\n   */\n\n  /*\n    Clear all patterns\n  */\n\n  /*\n  if 0\n    * left brace\n     for (i = 0; i < h; i++) {\n      if (yindex == YMAX)\n        break\n      chartab[yindex].c = '|'\n      chartab[yindex].x = x - 2\n      chartab[yindex].y = y + i\n      yindex++\n    }\n    * right brace\n     emit_x++\n     for (i = 0; i < h; i++) {\n      if (yindex == YMAX)\n        break\n      chartab[yindex].c = '|'\n      chartab[yindex].x = emit_x\n      chartab[yindex].y = y + i\n      yindex++\n    }\n     emit_x++\n   endif\n   */\n\n  /*\n   For example...\n     push(F)\n    push(X)\n    filter()\n    F = pop()\n  */\n\n  /*\n   Symbolic addition\n     Terms in a sum are combined if they are identical modulo rational\n    coefficients.\n     For example, A + 2A becomes 3A.\n     However, the sum A + sqrt(2) A is not modified.\n     Combining terms can lead to second-order effects.\n     For example, consider the case of\n       1/sqrt(2) A + 3/sqrt(2) A + sqrt(2) A\n     The first two terms are combined to yield 2 sqrt(2) A.\n     This result can now be combined with the third term to yield\n       3 sqrt(2) A\n  */\n\n  /*\n   Table of integrals\n   The symbol f is just a dummy symbol for creating a list f(A,B,C,C,...) where\n     A  is the template expression\n     B  is the result expression\n     C  is an optional list of conditional expressions\n  */\n\n  /*\n   Partition a term\n     Input stack:\n       term (factor or product of factors)\n       free variable\n     Output stack:\n       constant expression\n       variable expression\n  */\n\n  /*\n    Substitute new expr for old expr in expr.\n     Input:  push  expr\n       push  old expr\n       push  new expr\n     Output:  Result on stack\n  */\n  var $,\n      ABS,\n      ADD,\n      ADJ,\n      AND,\n      APPROXRATIO,\n      ARCCOS,\n      ARCCOSH,\n      ARCSIN,\n      ARCSINH,\n      ARCTAN,\n      ARCTANH,\n      ARG,\n      ASSUME_REAL_VARIABLES,\n      ATOMIZE,\n      AUTOEXPAND,\n      BAKE,\n      BESSELJ,\n      BESSELY,\n      BINDING,\n      BINOMIAL,\n      BINOM_check_args,\n      BUF,\n      C1,\n      C2,\n      C3,\n      C4,\n      C5,\n      C6,\n      CEILING,\n      CHECK,\n      CHOOSE,\n      CIRCEXP,\n      CLEAR,\n      CLEARALL,\n      CLEARPATTERNS,\n      CLOCK,\n      COEFF,\n      COFACTOR,\n      CONDENSE,\n      CONJ,\n      CONS,\n      CONTRACT,\n      COS,\n      COSH,\n      Condense,\n      DEBUG,\n      DEBUG_ABS,\n      DEBUG_ARG,\n      DEBUG_CLOCKFORM,\n      DEBUG_IMAG,\n      DEBUG_IS,\n      DEBUG_MULTIPLY,\n      DEBUG_POWER,\n      DEBUG_RATIONALIZE,\n      DEBUG_RECT,\n      DEBUG_SIMPLIFY,\n      DECOMP,\n      DEFINT,\n      DEGREE,\n      DENOMINATOR,\n      DERIVATIVE,\n      DET,\n      DET_check_arg,\n      DIM,\n      DIRAC,\n      DIVISORS,\n      DO,\n      DOT,\n      DOUBLE,\n      DRAW,\n      DRAWX,\n      DSOLVE,\n      E,\n      EIGEN,\n      EIGENVAL,\n      EIGENVEC,\n      EIG_N,\n      EIG_check_arg,\n      EIG_yydd,\n      EIG_yyqq,\n      ERF,\n      ERFC,\n      EVAL,\n      EXP,\n      EXPAND,\n      EXPCOS,\n      EXPSIN,\n      Eval,\n      Eval_Eval,\n      Eval_abs,\n      Eval_add,\n      Eval_adj,\n      Eval_and,\n      Eval_approxratio,\n      Eval_arccos,\n      Eval_arccosh,\n      Eval_arcsin,\n      Eval_arcsinh,\n      Eval_arctan,\n      Eval_arctanh,\n      Eval_arg,\n      Eval_besselj,\n      Eval_bessely,\n      Eval_binding,\n      Eval_binomial,\n      Eval_ceiling,\n      Eval_check,\n      Eval_choose,\n      Eval_circexp,\n      Eval_clear,\n      Eval_clearall,\n      Eval_clearpatterns,\n      Eval_clock,\n      Eval_coeff,\n      Eval_cofactor,\n      Eval_condense,\n      Eval_conj,\n      Eval_cons,\n      Eval_contract,\n      Eval_cos,\n      Eval_cosh,\n      Eval_decomp,\n      Eval_defint,\n      Eval_degree,\n      Eval_denominator,\n      Eval_derivative,\n      Eval_det,\n      Eval_dim,\n      Eval_dirac,\n      Eval_divisors,\n      Eval_do,\n      Eval_dsolve,\n      Eval_eigen,\n      Eval_eigenval,\n      Eval_eigenvec,\n      Eval_erf,\n      Eval_erfc,\n      Eval_exp,\n      Eval_expand,\n      Eval_expcos,\n      Eval_expsin,\n      Eval_factor,\n      Eval_factorial,\n      Eval_factorpoly,\n      Eval_filter,\n      Eval_float,\n      Eval_floor,\n      Eval_for,\n      Eval_function_reference,\n      Eval_gamma,\n      Eval_gcd,\n      Eval_hermite,\n      Eval_hilbert,\n      Eval_imag,\n      Eval_index,\n      _Eval_inner,\n      Eval_integral,\n      Eval_inv,\n      Eval_invg,\n      Eval_isinteger,\n      Eval_isprime,\n      Eval_laguerre,\n      Eval_lcm,\n      Eval_leading,\n      Eval_legendre,\n      Eval_log,\n      Eval_lookup,\n      Eval_mod,\n      Eval_multiply,\n      Eval_noexpand,\n      Eval_not,\n      Eval_nroots,\n      Eval_number,\n      Eval_numerator,\n      Eval_operator,\n      Eval_or,\n      Eval_outer,\n      Eval_pattern,\n      Eval_patternsinfo,\n      Eval_polar,\n      Eval_power,\n      Eval_predicate,\n      Eval_prime,\n      Eval_print,\n      Eval_print2dascii,\n      Eval_printcomputer,\n      Eval_printhuman,\n      Eval_printlatex,\n      Eval_printlist,\n      Eval_product,\n      Eval_quote,\n      Eval_quotient,\n      Eval_rank,\n      Eval_rationalize,\n      Eval_real,\n      Eval_rect,\n      Eval_roots,\n      Eval_round,\n      Eval_setq,\n      Eval_sgn,\n      Eval_shape,\n      Eval_silentpattern,\n      Eval_simfac,\n      Eval_simplify,\n      Eval_sin,\n      Eval_sinh,\n      Eval_sqrt,\n      Eval_stop,\n      Eval_subst,\n      Eval_sum,\n      Eval_sym,\n      Eval_symbolsinfo,\n      Eval_tan,\n      Eval_tanh,\n      Eval_taylor,\n      Eval_tensor,\n      Eval_test,\n      Eval_testeq,\n      Eval_testge,\n      Eval_testgt,\n      Eval_testle,\n      Eval_testlt,\n      Eval_transpose,\n      Eval_unit,\n      Eval_user_function,\n      Eval_zero,\n      Evalpoly,\n      FACTOR,\n      FACTORIAL,\n      FACTORPOLY,\n      FILTER,\n      FLOATF,\n      FLOOR,\n      FOR,\n      FORCE_FIXED_PRINTOUT,\n      FUNCTION,\n      _Find,\n      GAMMA,\n      GCD,\n      HERMITE,\n      HILBERT,\n      IMAG,\n      INDEX,\n      INNER,\n      INTEGRAL,\n      INV,\n      INVG,\n      INV_check_arg,\n      INV_decomp,\n      ISINTEGER,\n      ISPRIME,\n      LAGUERRE,\n      LAST,\n      LAST_2DASCII_PRINT,\n      LAST_FULL_PRINT,\n      LAST_LATEX_PRINT,\n      LAST_LIST_PRINT,\n      LAST_PLAIN_PRINT,\n      LAST_PRINT,\n      LCM,\n      LEADING,\n      LEGENDRE,\n      LOG,\n      LOOKUP,\n      M,\n      MAXDIM,\n      MAXPRIMETAB,\n      MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES,\n      MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE,\n      MAX_FIXED_PRINTOUT_DIGITS,\n      MAX_PROGRAM_SIZE,\n      MEQUAL,\n      METAA,\n      METAB,\n      METAX,\n      MLENGTH,\n      MOD,\n      MSIGN,\n      MULTIPLY,\n      MZERO,\n      N,\n      NIL,\n      NOT,\n      NROOTS,\n      NROOTS_ABS,\n      NROOTS_DELTA,\n      NROOTS_EPSILON,\n      NROOTS_RANDOM,\n      NROOTS_YMAX,\n      NROOTS_divpoly,\n      NSYM,\n      NUM,\n      NUMBER,\n      NUMERATOR,\n      OPERATOR,\n      OR,\n      OUTER,\n      PATTERN,\n      PATTERNSINFO,\n      PI,\n      POLAR,\n      POWER,\n      PRIME,\n      PRINT,\n      PRINT2DASCII,\n      PRINTFULL,\n      PRINTLATEX,\n      PRINTLIST,\n      PRINTMODE_2DASCII,\n      PRINTMODE_COMPUTER,\n      PRINTMODE_HUMAN,\n      PRINTMODE_LATEX,\n      PRINTMODE_LIST,\n      PRINTOUTRESULT,\n      PRINTPLAIN,\n      PRINT_LEAVE_E_ALONE,\n      PRINT_LEAVE_X_ALONE,\n      PRODUCT,\n      QUOTE,\n      QUOTIENT,\n      RANK,\n      RATIONALIZE,\n      REAL,\n      ROOTS,\n      ROUND,\n      SECRETX,\n      SELFTEST,\n      SETQ,\n      SGN,\n      SHAPE,\n      SILENTPATTERN,\n      SIMPLIFY,\n      SIN,\n      SINH,\n      SPACE_BETWEEN_COLUMNS,\n      SPACE_BETWEEN_ROWS,\n      SQRT,\n      STOP,\n      STR,\n      SUBST,\n      SUM,\n      SYM,\n      SYMBOLSINFO,\n      SYMBOL_A,\n      SYMBOL_A_UNDERSCORE,\n      SYMBOL_B,\n      SYMBOL_B_UNDERSCORE,\n      SYMBOL_C,\n      SYMBOL_D,\n      SYMBOL_I,\n      SYMBOL_IDENTITY_MATRIX,\n      SYMBOL_J,\n      SYMBOL_N,\n      SYMBOL_R,\n      SYMBOL_S,\n      SYMBOL_T,\n      SYMBOL_X,\n      SYMBOL_X_UNDERSCORE,\n      SYMBOL_Y,\n      SYMBOL_Z,\n      TAN,\n      TANH,\n      TAYLOR,\n      TENSOR,\n      TEST,\n      TESTEQ,\n      TESTGE,\n      TESTGT,\n      TESTLE,\n      TESTLT,\n      TIMING_DEBUGS,\n      TOS,\n      TRACE,\n      TRANSPOSE,\n      T_DOUBLE,\n      T_EQ,\n      T_FUNCTION,\n      T_GTEQ,\n      T_INTEGER,\n      T_LTEQ,\n      T_NEQ,\n      T_NEWLINE,\n      T_QUOTASSIGN,\n      T_STRING,\n      T_SYMBOL,\n      U,\n      UNIT,\n      USR_SYMBOLS,\n      VERSION,\n      YMAX,\n      YYE,\n      YYRECT,\n      ZERO,\n      __emit_char,\n      __emit_str,\n      __factor_add,\n      __factorial,\n      __is_negative,\n      __is_radical_number,\n      __lcm,\n      __legendre,\n      __legendre2,\n      __legendre3,\n      __normalize_radical_factors,\n      __rationalize_tensor,\n      _print,\n      abs,\n      absValFloat,\n      _absval,\n      absval_tensor,\n      add,\n      addSymbolLeftOfAssignment,\n      addSymbolRightOfAssignment,\n      add_all,\n      add_factor_to_accumulator,\n      add_numbers,\n      add_terms,\n      addf,\n      adj,\n      alloc_tensor,\n      allocatedId,\n      any_denominators,\n      approxAll,\n      approxLogs,\n      approxLogsOfRationals,\n      approxOneRatioOnly,\n      approxRadicals,\n      approxRadicalsOfRationals,\n      approxRationalsOfLogs,\n      approxRationalsOfPowersOfE,\n      approxRationalsOfPowersOfPI,\n      approxRationalsOfRadicals,\n      approxSineOfRationalMultiplesOfPI,\n      approxSineOfRationals,\n      approxTrigonometric,\n      approx_just_an_integer,\n      approx_logarithmsOfRationals,\n      approx_nothingUseful,\n      approx_radicalOfRatio,\n      approx_ratioOfRadical,\n      approx_rationalOfE,\n      approx_rationalOfPi,\n      approx_rationalsOfLogarithms,\n      approx_sine_of_pi_times_rational,\n      approx_sine_of_rational,\n      _approxratioRecursive,\n      arccos,\n      arccosh,\n      arcsin,\n      arcsinh,\n      _arctan,\n      arctanh,\n      areunivarpolysfactoredorexpandedform,\n      arg,\n      arglist,\n      assignmentFound,\n      avoidCalculatingPowersIntoArctans,\n      _bake,\n      bake_poly,\n      bake_poly_term,\n      besselj,\n      bessely,\n      bigInt,\n      bignum_factorial,\n      bignum_float,\n      bignum_power_number,\n      bignum_scan_float,\n      bignum_scan_integer,\n      bignum_truncate,\n      binding,\n      binomial,\n      buffer,\n      build_tensor,\n      caaddr,\n      caadr,\n      caar,\n      cadaddr,\n      cadadr,\n      cadar,\n      caddaddr,\n      caddadr,\n      caddar,\n      caddddr,\n      cadddr,\n      caddr,\n      cadr,\n      called_from_Algebra_block,\n      car,\n      cdaddr,\n      cdadr,\n      cdar,\n      cddaddr,\n      cddar,\n      cdddaddr,\n      cddddr,\n      cdddr,\n      cddr,\n      cdr,\n      ceiling,\n      chainOfUserSymbolsNotFunctionsBeingEvaluated,\n      charTabIndex,\n      chartab,\n      checkFloatHasWorkedOutCompletely,\n      check_esc_flag,\n      check_stack,\n      check_tensor_dimensions,\n      choose,\n      choose_check_args,\n      _circexp,\n      clearAlgebraEnvironment,\n      clearRenamedVariablesToAvoidBindingToExternalScope,\n      clear_symbols,\n      clear_term,\n      clearall,\n      clockform,\n      cmpGlyphs,\n      cmp_args,\n      _cmp_expr,\n      cmp_terms,\n      cmp_terms_count,\n      codeGen,\n      coeff,\n      cofactor,\n      collectLatexStringFromReturnValue,\n      _collectUserSymbols,\n      combine_factors,\n      combine_gammas,\n      combine_terms,\n      compareState,\n      compare_numbers,\n      compare_rationals,\n      compare_tensors,\n      compatible,\n      computeDependenciesFromAlgebra,\n      computeResultsAndJavaScriptFromAlgebra,\n      compute_fa,\n      conjugate,\n      cons,\n      consCount,\n      contract,\n      convert_bignum_to_double,\n      convert_rational_to_double,\n      copy_tensor,\n      cosine,\n      cosine_of_angle,\n      cosine_of_angle_sum,\n      _count,\n      _countOccurrencesOfSymbol,\n      count_denominators,\n      counter,\n      countsize,\n      d_scalar_scalar,\n      d_scalar_scalar_1,\n      d_scalar_tensor,\n      d_tensor_scalar,\n      d_tensor_tensor,\n      dabs,\n      darccos,\n      darccosh,\n      darcsin,\n      darcsinh,\n      darctan,\n      darctanh,\n      dbesselj0,\n      dbesseljn,\n      dbessely0,\n      dbesselyn,\n      dcos,\n      dcosh,\n      dd,\n      _decomp,\n      decomp_product,\n      decomp_sum,\n      defineSomeHandyConstants,\n      define_user_function,\n      defn,\n      defn_str,\n      degree,\n      _denominator,\n      derf,\n      derfc,\n      derivative,\n      derivative_of_integral,\n      det,\n      determinant,\n      detg,\n      dfunction,\n      dhermite,\n      dirac,\n      display,\n      display_flag,\n      displaychar,\n      divide,\n      divide_numbers,\n      divisors,\n      divisors_onstack,\n      divpoly,\n      dlog,\n      do_clearPatterns,\n      do_clearall,\n      do_simplify_nested_radicals,\n      dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication,\n      dotprod_unicode,\n      doubleToReasonableString,\n      dpow,\n      dpower,\n      dproduct,\n      draw_flag,\n      draw_stop_return,\n      dsgn,\n      dsin,\n      dsinh,\n      dsum,\n      dtan,\n      dtanh,\n      dupl,\n      eigen,\n      elelmIndex,\n      elem,\n      emit_denominator,\n      emit_denominators,\n      emit_expr,\n      emit_factor,\n      emit_factorial_function,\n      emit_flat_tensor,\n      emit_fraction,\n      emit_function,\n      emit_index_function,\n      emit_multiply,\n      emit_number,\n      emit_numerators,\n      emit_numerical_fraction,\n      emit_power,\n      emit_string,\n      emit_subexpr,\n      emit_symbol,\n      emit_tensor,\n      _emit_tensor_inner,\n      emit_term,\n      emit_top_expr,\n      emit_unsigned_expr,\n      emit_x,\n      equal,\n      equaln,\n      equalq,\n      erfc,\n      errorMessage,\n      esc_flag,\n      evaluatingAsFloats,\n      evaluatingPolar,\n      exec,\n      _expand,\n      expand_get_A,\n      expand_get_AF,\n      expand_get_B,\n      expand_get_C,\n      expand_get_CF,\n      expand_tensor,\n      expanding,\n      expcos,\n      exponential,\n      expr_level,\n      expsin,\n      f1,\n      f10,\n      f2,\n      f3,\n      f4,\n      f5,\n      f9,\n      f_equals_a,\n      factor,\n      factor_a,\n      factor_again,\n      factor_b,\n      factor_number,\n      factor_small_number,\n      factor_term,\n      factorial,\n      factorpoly,\n      factors,\n      fill_buf,\n      filter,\n      filter_main,\n      filter_sum,\n      filter_tensor,\n      findDependenciesInScript,\n      _findPossibleClockForm,\n      _findPossibleExponentialForm,\n      findroot,\n      fixup_fraction,\n      fixup_power,\n      flag,\n      floatToRatioRoutine,\n      fmt_index,\n      fmt_level,\n      fmt_x,\n      frame,\n      freeze,\n      functionInvokationsScanningStack,\n      gamma,\n      gamma_of_sum,\n      gammaf,\n      gcd,\n      gcd_main,\n      gcd_numbers,\n      gcd_polys,\n      gcd_powers_with_same_base,\n      gcd_product_product,\n      gcd_product_sum,\n      gcd_sum,\n      gcd_sum_product,\n      gcd_sum_sum,\n      _gen,\n      getSimpleRoots,\n      getStateHash,\n      get_binding,\n      get_factor_from_complex_root,\n      get_factor_from_real_root,\n      _get_innerprod_factors,\n      get_next_token,\n      get_printname,\n      get_size,\n      get_token,\n      getdisplaystr,\n      glyph,\n      gp,\n      guess,\n      hasImaginaryCoeff,\n      hasNegativeRationalExponent,\n      hash_addition,\n      hash_function,\n      hash_multiplication,\n      hash_power,\n      hashcode_values,\n      hashed_itab,\n      hermite,\n      hilbert,\n      i1,\n      imag,\n      imaginaryunit,\n      index_function,\n      init,\n      initNRoots,\n      inited,\n      _inner,\n      inner_f,\n      input_str,\n      integral,\n      integral_of_form,\n      integral_of_product,\n      integral_of_sum,\n      _inv,\n      inverse,\n      invert_number,\n      invg,\n      isNumberOneOverSomething,\n      isNumericAtom,\n      _isNumericAtomOrTensor,\n      isSimpleRoot,\n      isSmall,\n      isSymbolLeftOfAssignment,\n      isSymbolReclaimable,\n      isZeroAtom,\n      isZeroAtomOrTensor,\n      isZeroLikeOrNonZeroLikeOrUndetermined,\n      isZeroTensor,\n      is_denominator,\n      is_factor,\n      is_small_integer,\n      is_square_matrix,\n      is_usr_symbol,\n      isadd,\n      isalnumorunderscore,\n      isalpha,\n      isalphaOrUnderscore,\n      iscomplexnumber,\n      iscomplexnumberdouble,\n      iscons,\n      isdenominator,\n      isdigit,\n      isdouble,\n      iseveninteger,\n      isfactor,\n      isfactorial,\n      _isfloating,\n      isfraction,\n      isidentitymatrix,\n      isimaginarynumber,\n      isimaginarynumberdouble,\n      isimaginaryunit,\n      isinnerordot,\n      isinteger,\n      isintegerfactor,\n      isintegerorintegerfloat,\n      isinv,\n      iskeyword,\n      isminusone,\n      isminusoneoversqrttwo,\n      isminusoneovertwo,\n      isminussqrtthreeovertwo,\n      ismultiply,\n      isnegative,\n      isnegativenumber,\n      isnegativeterm,\n      isnonnegativeinteger,\n      isnpi,\n      isone,\n      isoneover,\n      isoneoversqrttwo,\n      isoneovertwo,\n      isplusone,\n      isplustwo,\n      ispolyexpandedform,\n      ispolyexpandedform_expr,\n      ispolyexpandedform_factor,\n      ispolyexpandedform_term,\n      ispolyfactoredorexpandedform,\n      ispolyfactoredorexpandedform_factor,\n      ispolyfactoredorexpandedform_power,\n      isposint,\n      ispositivenumber,\n      ispower,\n      isquarterturn,\n      isrational,\n      isspace,\n      issqrtthree,\n      issqrtthreeovertwo,\n      isstr,\n      issymbol,\n      _issymbolic,\n      istensor,\n      istranspose,\n      isunderscore,\n      isunivarpolyfactoredorexpandedform,\n      itab,\n      italu_hashcode,\n      j1,\n      laguerre,\n      laguerre2,\n      lastFoundSymbol,\n      latexErrorSign,\n      lcm,\n      leading,\n      legendre,\n      length,\n      lessp,\n      level,\n      list,\n      listLength,\n      logarithm,\n      logbuf,\n      lookupsTotal,\n      lu_decomp,\n      madd,\n      makePositive,\n      makeSignSameAs,\n      make_hashed_itab,\n      mask,\n      mcmp,\n      mcmpint,\n      mdiv,\n      mdivrem,\n      meta_mode,\n      mgcd,\n      mini_solve,\n      mint,\n      mmod,\n      mmul,\n      mod,\n      monic,\n      move,\n      moveTos,\n      mp_clr_bit,\n      mp_denominator,\n      mp_numerator,\n      mp_set_bit,\n      mpow,\n      mprime,\n      mroot,\n      mshiftright,\n      msub,\n      mtotal,\n      _multinomial_sum,\n      multiply,\n      multiply_all,\n      multiply_all_noexpand,\n      multiply_consecutive_constants,\n      multiply_denominators,\n      multiply_denominators_factor,\n      multiply_denominators_term,\n      multiply_noexpand,\n      multiply_numbers,\n      n_factor_number,\n      negate,\n      negate_expand,\n      negate_noexpand,\n      negate_number,\n      new_integer,\n      new_string,\n      newline_flag,\n      nil_symbols,\n      normaliseDots,\n      normalisedCoeff,\n      normalize_angle,\n      nroots_a,\n      nroots_b,\n      nroots_c,\n      nroots_df,\n      nroots_dx,\n      nroots_fa,\n      nroots_fb,\n      nroots_x,\n      nroots_y,\n      nterms,\n      nthCadr,\n      _numerator,\n      numericRootOfPolynomial,\n      o,\n      one,\n      oneElement,\n      one_as_double,\n      out_buf,\n      out_count,\n      out_of_memory,\n      outer,\n      p0,\n      p1,\n      p2,\n      p3,\n      p4,\n      p5,\n      p6,\n      p7,\n      p8,\n      p9,\n      parse,\n      parse_internal,\n      parse_p1,\n      parse_p2,\n      parse_time_simplifications,\n      partition,\n      patternHasBeenFound,\n      patternsinfo,\n      performing_roots,\n      polar,\n      _polarRectAMinusOneBase,\n      _polyform,\n      pop,\n      pop_double,\n      pop_frame,\n      pop_integer,\n      power,\n      power_str,\n      power_sum,\n      power_tensor,\n      predefinedSymbolsInGlobalScope_doNotTrackInDependencies,\n      prime,\n      primetab,\n      print2dascii,\n      printMode,\n      print_ABS_latex,\n      print_ARCCOS_codegen,\n      print_ARCSIN_codegen,\n      print_ARCTAN_codegen,\n      print_BINOMIAL_latex,\n      print_COS_codegen,\n      print_DEFINT_latex,\n      print_DOT_codegen,\n      print_DOT_latex,\n      print_DO_codegen,\n      print_FOR_codegen,\n      print_INV_codegen,\n      print_INV_latex,\n      print_PRODUCT_codegen,\n      print_PRODUCT_latex,\n      print_SETQ_codegen,\n      print_SIN_codegen,\n      print_SQRT_latex,\n      print_SUM_codegen,\n      print_SUM_latex,\n      print_TAN_codegen,\n      print_TESTEQ_latex,\n      print_TESTGE_latex,\n      print_TESTGT_latex,\n      print_TESTLE_latex,\n      print_TESTLT_latex,\n      print_TEST_codegen,\n      print_TEST_latex,\n      print_TRANSPOSE_codegen,\n      print_TRANSPOSE_latex,\n      print_UNIT_codegen,\n      print_a_over_b,\n      print_base,\n      print_base_of_denom,\n      print_char,\n      print_denom,\n      print_double,\n      print_expo_of_denom,\n      print_exponent,\n      print_expr,\n      _print_factor,\n      print_factorial_function,\n      print_glyphs,\n      print_index_function,\n      _print_list,\n      print_multiply_sign,\n      print_number,\n      _print_power,\n      print_str,\n      print_subexpr,\n      print_tensor,\n      _print_tensor_inner3,\n      _print_tensor_inner_latex,\n      print_tensor_latex,\n      print_term,\n      printchar,\n      printchar_nowrap,\n      printline,\n      program_buf,\n      promote_tensor,\n      push,\n      pushTryNotToDuplicate,\n      push_cars,\n      push_double,\n      push_factor,\n      push_frame,\n      push_identity_matrix,\n      push_integer,\n      push_rational,\n      push_symbol,\n      push_term_factors,\n      push_terms,\n      push_zero_matrix,\n      qadd,\n      qdiv,\n      qmul,\n      qpow,\n      qpowf,\n      quickfactor,\n      quickpower,\n      rational,\n      rationalize,\n      rationalize_coefficients,\n      real,\n      reciprocate,\n      _rect,\n      recursionLevelNestedRadicalsRemoval,\n      _recursiveDependencies,\n      ref,\n      ref1,\n      rememberPrint,\n      remove_negative_exponents,\n      reset_after_error,\n      restore,\n      restoreMetaBindings,\n      _rewrite_args,\n      rewrite_args_tensor,\n      roots,\n      roots2,\n      roots3,\n      run,\n      runUserDefinedSimplifications,\n      save,\n      saveMetaBindings,\n      scalar_times_tensor,\n      scan,\n      scan_error,\n      scan_expression,\n      scan_factor,\n      scan_function_call_with_function_name,\n      scan_function_call_without_function_name,\n      scan_index,\n      scan_meta,\n      scan_power,\n      scan_relation,\n      scan_stmt,\n      scan_str,\n      scan_string,\n      scan_subexpr,\n      scan_symbol,\n      scan_tensor,\n      scan_term,\n      scanned,\n      scanningParameters,\n      setM,\n      setSignTo,\n      set_binding,\n      set_component,\n      setq_indexed,\n      sfac_product,\n      sfac_product_f,\n      sgn,\n      shape,\n      show_power_debug,\n      sign,\n      sign_of_term,\n      simfac,\n      simfac_term,\n      simpleComplexityMeasure,\n      simplify,\n      simplifyForCodeGeneration,\n      simplify_1_in_products,\n      simplify_main,\n      simplify_nested_radicals,\n      simplify_polar,\n      simplify_polarRect,\n      simplify_rational_expressions,\n      simplify_rectToClock,\n      simplify_tensor,\n      simplify_trig,\n      _simplifyfactorials,\n      sine,\n      sine_of_angle,\n      sine_of_angle_sum,\n      skipRootVariableToBeSolved,\n      sort_stack,\n      square,\n      ssqrt,\n      stack,\n      stackAddsCount,\n      std_symbol,\n      step,\n      step2,\n      stop,\n      strcmp,\n      stringsEmittedByUserPrintouts,\n      subf,\n      _subst,\n      subtract,\n      subtract_numbers,\n      swap,\n      symbol,\n      symbolsDependencies,\n      symbolsHavingReassignments,\n      symbolsInExpressionsWithoutAssignments,\n      symbolsLeftOfAssignment,\n      symbolsRightOfAssignment,\n      symbolsinfo,\n      symnum,\n      symtab,\n      _take_care_of_nested_radicals,\n      tangent,\n      taylor,\n      tensor,\n      tensor_plus_tensor,\n      tensor_times_scalar,\n      testApprox,\n      test_flag,\n      text_metric,\n      theRandom,\n      token,\n      token_buf,\n      token_str,\n      top,\n      top_level_eval,\n      tos,\n      _transform,\n      _transpose,\n      transpose_unicode,\n      trigmode,\n      trivial_divide,\n      try_kth_prime,\n      turnErrorMessageToLatex,\n      ucmp,\n      unfreeze,\n      unique,\n      _unique_f,\n      update_token_buf,\n      userSimplificationsInListForm,\n      userSimplificationsInStringForm,\n      usr_symbol,\n      verbosing,\n      version,\n      will_be_displayed_as_fraction,\n      ybinomial,\n      ycosh,\n      ydirac,\n      yerf,\n      yerfc,\n      yfloor,\n      yindex,\n      yround,\n      ysinh,\n      yyarg,\n      yybesselj,\n      yybessely,\n      yyceiling,\n      yycondense,\n      yycontract,\n      yycosh,\n      _yydegree,\n      yydetg,\n      yydivpoly,\n      yyerf,\n      yyerfc,\n      yyexpand,\n      yyfactorpoly,\n      _yyfloat,\n      yyfloor,\n      yyhermite,\n      yyhermite2,\n      yyinvg,\n      yylcm,\n      yylog,\n      yymultiply,\n      yyouter,\n      yypower,\n      yyrationalize,\n      yyround,\n      yysgn,\n      yysimfac,\n      yysinh,\n      yytangent,\n      zero,\n      zzfloat,\n      hasProp = {}.hasOwnProperty;\n\n  bigInt = require('big-integer'); // also change the version in the package.json file\n\n  version = \"1.4.0\";\n  SELFTEST = 1; // size of the symbol table\n\n  NSYM = 1000;\n  DEBUG = false;\n  PRINTOUTRESULT = false; // printing-related constants\n\n  PRINTMODE_LATEX = \"PRINTMODE_LATEX\";\n  PRINTMODE_2DASCII = \"PRINTMODE_2DASCII\";\n  PRINTMODE_COMPUTER = \"PRINTMODE_COMPUTER\";\n  PRINTMODE_HUMAN = \"PRINTMODE_HUMAN\";\n  PRINTMODE_LIST = \"PRINTMODE_LIST\"; // when the user uses the generic \"print\" statement\n  // this setting kicks-in.\n\n  printMode = PRINTMODE_COMPUTER;\n  dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication = true;\n  recursionLevelNestedRadicalsRemoval = 0;\n  do_simplify_nested_radicals = true;\n  avoidCalculatingPowersIntoArctans = true;\n\n  rational = function () {\n    // Symbolic expressions are built by connecting U structs.\n    // For example, (a b + c) is built like this:\n    //           _______      _______                                _______\n    //          |CONS   |--->|CONS   |----------------------------->|CONS   |\n    //          |       |    |       |                              |       |\n    //          |_______|    |_______|                              |_______|\n    //              |            |                                      |\n    //           ___v___      ___v___      _______      _______      ___v___\n    //          |ADD    |    |CONS   |--->|CONS   |--->|CONS   |    |SYM c  |\n    //          |       |    |       |    |       |    |       |    |       |\n    //          |_______|    |_______|    |_______|    |_______|    |_______|\n    //                           |            |            |\n    //                        ___v___      ___v___      ___v___\n    //                       |MUL    |    |SYM a  |    |SYM b  |\n    //                       |       |    |       |    |       |\n    //                       |_______|    |_______|    |_______|\n    var rational = /*#__PURE__*/_createClass(function rational() {\n      \"use strict\";\n\n      _classCallCheck(this, rational);\n    });\n\n    ;\n    rational.prototype.a = null; // a bigInteger\n\n    rational.prototype.b = null; // a bigInteger\n\n    return rational;\n  }.call(this);\n\n  U = function () {\n    var U = /*#__PURE__*/function () {\n      \"use strict\";\n\n      function U() {\n        _classCallCheck(this, U);\n\n        this.cons = {};\n        this.cons.car = null;\n        this.cons.cdr = null;\n        this.q = new rational();\n      }\n\n      _createClass(U, [{\n        key: \"toString\",\n        value: function toString() {\n          return print_expr(this);\n        }\n      }, {\n        key: \"toLatexString\",\n        value: function toLatexString() {\n          return collectLatexStringFromReturnValue(this);\n        }\n      }]);\n\n      return U;\n    }();\n\n    ;\n    U.prototype.cons = null; // will have a car and cdr\n\n    U.prototype.printname = \"\";\n    U.prototype.str = \"\";\n    U.prototype.tensor = null; // rational number a over b\n\n    U.prototype.q = null; // will point to a rational\n\n    U.prototype.d = 0.0; // a double\n\n    U.prototype.k = 0;\n    U.prototype.tag = 0;\n    return U;\n  }.call(this);\n\n  errorMessage = \"\"; // the following enum is for struct U, member k\n\n  CONS = 0;\n  NUM = 1;\n  DOUBLE = 2;\n  STR = 3;\n  TENSOR = 4;\n  SYM = 5; // the following enum is for indexing the symbol table\n  // standard functions first, then nil, then everything else\n\n  counter = 0;\n  ABS = counter++;\n  ADD = counter++;\n  ADJ = counter++;\n  AND = counter++;\n  APPROXRATIO = counter++;\n  ARCCOS = counter++;\n  ARCCOSH = counter++;\n  ARCSIN = counter++;\n  ARCSINH = counter++;\n  ARCTAN = counter++;\n  ARCTANH = counter++;\n  ARG = counter++;\n  ATOMIZE = counter++;\n  BESSELJ = counter++;\n  BESSELY = counter++;\n  BINDING = counter++;\n  BINOMIAL = counter++;\n  CEILING = counter++;\n  CHECK = counter++;\n  CHOOSE = counter++;\n  CIRCEXP = counter++;\n  CLEAR = counter++;\n  CLEARALL = counter++;\n  CLEARPATTERNS = counter++;\n  CLOCK = counter++;\n  COEFF = counter++;\n  COFACTOR = counter++;\n  CONDENSE = counter++;\n  CONJ = counter++;\n  CONTRACT = counter++;\n  COS = counter++;\n  COSH = counter++;\n  DECOMP = counter++;\n  DEFINT = counter++;\n  DEGREE = counter++;\n  DENOMINATOR = counter++;\n  DERIVATIVE = counter++;\n  DET = counter++;\n  DIM = counter++;\n  DIRAC = counter++;\n  DIVISORS = counter++;\n  DO = counter++;\n  DOT = counter++;\n  DRAW = counter++;\n  DSOLVE = counter++;\n  EIGEN = counter++;\n  EIGENVAL = counter++;\n  EIGENVEC = counter++;\n  ERF = counter++;\n  ERFC = counter++;\n  EVAL = counter++;\n  EXP = counter++;\n  EXPAND = counter++;\n  EXPCOS = counter++;\n  EXPSIN = counter++;\n  FACTOR = counter++;\n  FACTORIAL = counter++;\n  FACTORPOLY = counter++;\n  FILTER = counter++;\n  FLOATF = counter++;\n  FLOOR = counter++;\n  FOR = counter++;\n  FUNCTION = counter++;\n  GAMMA = counter++;\n  GCD = counter++;\n  HERMITE = counter++;\n  HILBERT = counter++;\n  IMAG = counter++;\n  INDEX = counter++;\n  INNER = counter++;\n  INTEGRAL = counter++;\n  INV = counter++;\n  INVG = counter++;\n  ISINTEGER = counter++;\n  ISPRIME = counter++;\n  LAGUERRE = counter++; //  LAPLACE = counter++\n\n  LCM = counter++;\n  LEADING = counter++;\n  LEGENDRE = counter++;\n  LOG = counter++;\n  LOOKUP = counter++;\n  MOD = counter++;\n  MULTIPLY = counter++;\n  NOT = counter++;\n  NROOTS = counter++;\n  NUMBER = counter++;\n  NUMERATOR = counter++;\n  OPERATOR = counter++;\n  OR = counter++;\n  OUTER = counter++;\n  PATTERN = counter++;\n  PATTERNSINFO = counter++;\n  POLAR = counter++;\n  POWER = counter++;\n  PRIME = counter++;\n  PRINT_LEAVE_E_ALONE = counter++;\n  PRINT_LEAVE_X_ALONE = counter++;\n  PRINT = counter++;\n  PRINT2DASCII = counter++;\n  PRINTFULL = counter++;\n  PRINTLATEX = counter++;\n  PRINTLIST = counter++;\n  PRINTPLAIN = counter++;\n  PRODUCT = counter++;\n  QUOTE = counter++;\n  QUOTIENT = counter++;\n  RANK = counter++;\n  RATIONALIZE = counter++;\n  REAL = counter++;\n  ROUND = counter++;\n  YYRECT = counter++;\n  ROOTS = counter++;\n  SETQ = counter++;\n  SGN = counter++;\n  SILENTPATTERN = counter++;\n  SIMPLIFY = counter++;\n  SIN = counter++;\n  SINH = counter++;\n  SHAPE = counter++;\n  SQRT = counter++;\n  STOP = counter++;\n  SUBST = counter++;\n  SUM = counter++;\n  SYMBOLSINFO = counter++;\n  TAN = counter++;\n  TANH = counter++;\n  TAYLOR = counter++;\n  TEST = counter++;\n  TESTEQ = counter++;\n  TESTGE = counter++;\n  TESTGT = counter++;\n  TESTLE = counter++;\n  TESTLT = counter++;\n  TRANSPOSE = counter++;\n  UNIT = counter++;\n  ZERO = counter++; // ALL THE SYMBOLS ABOVE NIL ARE KEYWORDS,\n  // WHICH MEANS THAT USER CANNOT REDEFINE THEM\n\n  NIL = counter++; // nil goes here, after standard functions\n\n  LAST = counter++;\n  LAST_PRINT = counter++;\n  LAST_2DASCII_PRINT = counter++;\n  LAST_FULL_PRINT = counter++;\n  LAST_LATEX_PRINT = counter++;\n  LAST_LIST_PRINT = counter++;\n  LAST_PLAIN_PRINT = counter++;\n  AUTOEXPAND = counter++;\n  BAKE = counter++;\n  ASSUME_REAL_VARIABLES = counter++;\n  TRACE = counter++;\n  FORCE_FIXED_PRINTOUT = counter++;\n  MAX_FIXED_PRINTOUT_DIGITS = counter++;\n  YYE = counter++;\n  DRAWX = counter++; // special purpose internal symbols\n\n  METAA = counter++;\n  METAB = counter++;\n  METAX = counter++;\n  SECRETX = counter++;\n  VERSION = counter++;\n  PI = counter++;\n  SYMBOL_A = counter++;\n  SYMBOL_B = counter++;\n  SYMBOL_C = counter++;\n  SYMBOL_D = counter++;\n  SYMBOL_I = counter++;\n  SYMBOL_J = counter++;\n  SYMBOL_N = counter++;\n  SYMBOL_R = counter++;\n  SYMBOL_S = counter++;\n  SYMBOL_T = counter++;\n  SYMBOL_X = counter++;\n  SYMBOL_Y = counter++;\n  SYMBOL_Z = counter++;\n  SYMBOL_IDENTITY_MATRIX = counter++;\n  SYMBOL_A_UNDERSCORE = counter++;\n  SYMBOL_B_UNDERSCORE = counter++;\n  SYMBOL_X_UNDERSCORE = counter++;\n  C1 = counter++;\n  C2 = counter++;\n  C3 = counter++;\n  C4 = counter++;\n  C5 = counter++;\n  C6 = counter++;\n  USR_SYMBOLS = counter++; // this must be last\n\n  E = YYE; // TOS cannot be arbitrarily large because the OS seg faults on deep recursion.\n  // For example, a circular evaluation like x=x+1 can cause a seg fault.\n  // At this setting (100,000) the evaluation stack overruns before seg fault.\n\n  TOS = 100000;\n  BUF = 10000;\n  MAX_PROGRAM_SIZE = 100001;\n  MAXPRIMETAB = 10000;\n  MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES = 5;\n  MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE = 10; //define _USE_MATH_DEFINES // for MS C++\n\n  MAXDIM = 24; // needed for the mechanism to\n  // find all dependencies between variables\n  // in a script\n\n  symbolsDependencies = {};\n  symbolsHavingReassignments = [];\n  symbolsInExpressionsWithoutAssignments = [];\n  patternHasBeenFound = false;\n  predefinedSymbolsInGlobalScope_doNotTrackInDependencies = [\"rationalize\", \"abs\", \"e\", \"i\", \"pi\", \"sin\", \"ceiling\", \"cos\", \"roots\", \"integral\", \"derivative\", \"defint\", \"sqrt\", \"eig\", \"cov\", \"deig\", \"dcov\", \"float\", \"floor\", \"product\", \"root\", \"round\", \"sum\", \"test\", \"unit\"]; // you can do some little simplifications\n  // at parse time, such as calculating away\n  // immediately simple operations on\n  // constants, removing 1s from products\n  // etc.\n\n  parse_time_simplifications = true;\n  chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n  stringsEmittedByUserPrintouts = \"\"; // flag use to potentially switch on/off some quirks \"deep\"\n  // in the code due to call from Algebra block.\n  // Currently not used.\n\n  called_from_Algebra_block = false;\n\n  tensor = function () {\n    var tensor = /*#__PURE__*/_createClass(function tensor() {\n      \"use strict\";\n\n      _classCallCheck(this, tensor);\n\n      this.dim = function () {\n        var o, ref, results;\n        results = [];\n\n        for (o = 0, ref = MAXDIM; 0 <= ref ? o <= ref : o >= ref; 0 <= ref ? o++ : o--) {\n          results.push(0);\n        }\n\n        return results;\n      }();\n\n      this.elem = [];\n    });\n\n    ;\n    tensor.prototype.ndim = 0; // number of dimensions\n\n    tensor.prototype.dim = null; // dimension length, for each dimension\n\n    tensor.prototype.nelem = 0; // total number of elements\n\n    tensor.prototype.elem = null; // an array containing all the data\n\n    return tensor;\n  }.call(this);\n\n  display = function () {\n    var display = /*#__PURE__*/_createClass(function display() {\n      \"use strict\";\n\n      _classCallCheck(this, display);\n    });\n\n    ;\n    display.prototype.h = 0;\n    display.prototype.w = 0;\n    display.prototype.n = 0;\n    display.prototype.a = []; // will contain an array of c,x,y (color,x,y)\n\n    return display;\n  }.call(this);\n\n  text_metric = function () {\n    var text_metric = /*#__PURE__*/_createClass(function text_metric() {\n      \"use strict\";\n\n      _classCallCheck(this, text_metric);\n    });\n\n    ;\n    text_metric.prototype.ascent = 0;\n    text_metric.prototype.descent = 0;\n    text_metric.prototype.width = 0;\n    return text_metric;\n  }.call(this);\n\n  tos = 0; // top of stack\n\n  expanding = 0;\n  evaluatingAsFloats = 0;\n  evaluatingPolar = 0;\n  fmt_x = 0;\n  fmt_index = 0;\n  fmt_level = 0;\n  verbosing = 0;\n\n  primetab = function () {\n    var ceil, i, j, primes;\n    primes = [2];\n    i = 3;\n\n    while (primes.length < MAXPRIMETAB) {\n      j = 0;\n      ceil = Math.sqrt(i);\n\n      while (j < primes.length && primes[j] <= ceil) {\n        if (i % primes[j] === 0) {\n          j = -1;\n          break;\n        }\n\n        j++;\n      }\n\n      if (j !== -1) {\n        primes.push(i);\n      }\n\n      i += 2;\n    }\n\n    primes[MAXPRIMETAB] = 0;\n    return primes;\n  }();\n\n  esc_flag = 0;\n  draw_flag = 0;\n  mtotal = 0;\n  trigmode = 0;\n  logbuf = \"\";\n  program_buf = \"\"; // will contain the variable names\n\n  symtab = []; // will contain the contents of the variable\n  // in the corresponding position in symtab array\n\n  binding = [];\n  isSymbolReclaimable = [];\n  arglist = []; // will contain U\n\n  stack = []; // will contain *U\n\n  frame = 0;\n  p0 = null; // will contain U\n\n  p1 = null; // will contain U\n\n  p2 = null; // will contain U\n\n  p3 = null; // will contain U\n\n  p4 = null; // will contain U\n\n  p5 = null; // will contain U\n\n  p6 = null; // will contain U\n\n  p7 = null; // will contain U\n\n  p8 = null; // will contain U\n\n  p9 = null; // will contain U\n\n  zero = null; // will contain U\n\n  one = null; // will contain U\n\n  one_as_double = null;\n  imaginaryunit = null; // will contain U\n\n  out_buf = \"\";\n  out_count = 0;\n  test_flag = 0;\n  codeGen = false;\n  draw_stop_return = null; // extern jmp_buf ?????\n\n  userSimplificationsInListForm = [];\n  userSimplificationsInStringForm = [];\n  transpose_unicode = 7488;\n  dotprod_unicode = 183;\n\n  symbol = function symbol(x) {\n    return symtab[x];\n  };\n\n  iscons = function iscons(p) {\n    return p.k === CONS;\n  };\n\n  isrational = function isrational(p) {\n    return p.k === NUM;\n  };\n\n  isdouble = function isdouble(p) {\n    return p.k === DOUBLE;\n  };\n\n  isNumericAtom = function isNumericAtom(p) {\n    return isrational(p) || isdouble(p);\n  };\n\n  isstr = function isstr(p) {\n    return p.k === STR;\n  };\n\n  istensor = function istensor(p) {\n    if (p == null) {\n      debugger;\n    } else {\n      return p.k === TENSOR;\n    }\n  }; // because of recursion, we consider a scalar to be\n  // a tensor, so a numeric scalar will return true\n\n\n  _isNumericAtomOrTensor = function isNumericAtomOrTensor(p) {\n    var a, i, n, o, ref;\n\n    if (isNumericAtom(p) || p === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      return 1;\n    }\n\n    if (!istensor(p) && !isNumericAtom(p)) {\n      //console.log \"p not an atom nor a tensor: \" + p\n      return 0;\n    }\n\n    n = p.tensor.nelem;\n    a = p.tensor.elem;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!_isNumericAtomOrTensor(a[i])) {\n        //console.log \"non-numeric element: \" + a[i]\n        return 0;\n      }\n    }\n\n    return 1;\n  };\n\n  issymbol = function issymbol(p) {\n    return p.k === SYM;\n  };\n\n  iskeyword = function iskeyword(p) {\n    return issymbol(p) && symnum(p) < NIL;\n  };\n\n  car = function car(p) {\n    if (iscons(p)) {\n      return p.cons.car;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  cdr = function cdr(p) {\n    if (iscons(p)) {\n      return p.cons.cdr;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  caar = function caar(p) {\n    return car(car(p));\n  };\n\n  cadr = function cadr(p) {\n    return car(cdr(p));\n  };\n\n  cdar = function cdar(p) {\n    return cdr(car(p));\n  };\n\n  cddr = function cddr(p) {\n    return cdr(cdr(p));\n  };\n\n  caadr = function caadr(p) {\n    return car(car(cdr(p)));\n  };\n\n  caddr = function caddr(p) {\n    return car(cdr(cdr(p)));\n  };\n\n  cadar = function cadar(p) {\n    return car(cdr(car(p)));\n  };\n\n  cdadr = function cdadr(p) {\n    return cdr(car(cdr(p)));\n  };\n\n  cddar = function cddar(p) {\n    return cdr(cdr(car(p)));\n  };\n\n  cdddr = function cdddr(p) {\n    return cdr(cdr(cdr(p)));\n  };\n\n  caaddr = function caaddr(p) {\n    return car(car(cdr(cdr(p))));\n  };\n\n  cadadr = function cadadr(p) {\n    return car(cdr(car(cdr(p))));\n  };\n\n  caddar = function caddar(p) {\n    return car(cdr(cdr(car(p))));\n  };\n\n  cdaddr = function cdaddr(p) {\n    return cdr(car(cdr(cdr(p))));\n  };\n\n  cadddr = function cadddr(p) {\n    return car(cdr(cdr(cdr(p))));\n  };\n\n  cddddr = function cddddr(p) {\n    return cdr(cdr(cdr(cdr(p))));\n  };\n\n  caddddr = function caddddr(p) {\n    return car(cdr(cdr(cdr(cdr(p)))));\n  };\n\n  cadaddr = function cadaddr(p) {\n    return car(cdr(car(cdr(cdr(p)))));\n  };\n\n  cddaddr = function cddaddr(p) {\n    return cdr(cdr(car(cdr(cdr(p)))));\n  };\n\n  caddadr = function caddadr(p) {\n    return car(cdr(cdr(car(cdr(p)))));\n  };\n\n  cdddaddr = function cdddaddr(p) {\n    return cdr(cdr(cdr(car(cdr(cdr(p))))));\n  };\n\n  caddaddr = function caddaddr(p) {\n    return car(cdr(cdr(car(cdr(cdr(p))))));\n  }; // not used yet\n\n\n  listLength = function listLength(p) {\n    var startCount;\n    startCount = -1;\n\n    while (iscons(p)) {\n      p = cdr(p);\n      startCount++;\n    }\n\n    return startCount;\n  }; // not used yet\n\n\n  nthCadr = function nthCadr(p, n) {\n    var startCount;\n    startCount = 0;\n\n    while (startCount <= n) {\n      p = cdr(p);\n      startCount++;\n    }\n\n    return car(p);\n  };\n\n  isadd = function isadd(p) {\n    return car(p) === symbol(ADD);\n  };\n\n  ismultiply = function ismultiply(p) {\n    return car(p) === symbol(MULTIPLY);\n  };\n\n  ispower = function ispower(p) {\n    return car(p) === symbol(POWER);\n  };\n\n  isfactorial = function isfactorial(p) {\n    return car(p) === symbol(FACTORIAL);\n  };\n\n  isinnerordot = function isinnerordot(p) {\n    return car(p) === symbol(INNER) || car(p) === symbol(DOT);\n  };\n\n  istranspose = function istranspose(p) {\n    return car(p) === symbol(TRANSPOSE);\n  };\n\n  isinv = function isinv(p) {\n    return car(p) === symbol(INV);\n  }; // TODO this is a bit of a shallow check, we should\n  // check when we are passed an actual tensor and possibly\n  // cache the test result.\n\n\n  isidentitymatrix = function isidentitymatrix(p) {\n    return p === symbol(SYMBOL_IDENTITY_MATRIX);\n  };\n\n  MSIGN = function MSIGN(p) {\n    if (p.isPositive()) {\n      return 1;\n    } else if (p.isZero()) {\n      return 0;\n    } else {\n      return -1;\n    }\n  };\n\n  MLENGTH = function MLENGTH(p) {\n    return p.toString().length;\n  };\n\n  MZERO = function MZERO(p) {\n    return p.isZero();\n  };\n\n  MEQUAL = function MEQUAL(p, n) {\n    if (p == null) {\n      debugger;\n    }\n\n    return p.equals(n);\n  };\n\n  reset_after_error = function reset_after_error() {\n    moveTos(0);\n    esc_flag = 0;\n    draw_flag = 0;\n    frame = TOS;\n    evaluatingAsFloats = 0;\n    return evaluatingPolar = 0;\n  };\n\n  $ = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n  $.version = version;\n  $.isadd = isadd;\n  $.ismultiply = ismultiply;\n  $.ispower = ispower;\n  $.isfactorial = isfactorial;\n  $.car = car;\n  $.cdr = cdr;\n  $.caar = caar;\n  $.cadr = cadr;\n  $.cdar = cdar;\n  $.cddr = cddr;\n  $.caadr = caadr;\n  $.caddr = caddr;\n  $.cadar = cadar;\n  $.cdadr = cdadr;\n  $.cddar = cddar;\n  $.cdddr = cdddr;\n  $.caaddr = caaddr;\n  $.cadadr = cadadr;\n  $.caddar = caddar;\n  $.cdaddr = cdaddr;\n  $.cadddr = cadddr;\n  $.cddddr = cddddr;\n  $.caddddr = caddddr;\n  $.cadaddr = cadaddr;\n  $.cddaddr = cddaddr;\n  $.caddadr = caddadr;\n  $.cdddaddr = cdddaddr;\n  $.caddaddr = caddaddr;\n  $.symbol = symbol;\n  $.iscons = iscons;\n  $.isrational = isrational;\n  $.isdouble = isdouble;\n  $.isNumericAtom = isNumericAtom;\n  $.isstr = isstr;\n  $.istensor = istensor;\n  $.issymbol = issymbol;\n  $.iskeyword = iskeyword;\n  $.CONS = CONS;\n  $.NUM = NUM;\n  $.DOUBLE = DOUBLE;\n  $.STR = STR;\n  $.TENSOR = TENSOR;\n  $.SYM = SYM; //(docs are generated from top-level comments, keep an eye on the formatting!)\n\n  /* abs =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the absolute value of a real number, the magnitude of a complex number, or the vector length.\n   */\n\n  /*\n   Absolute value of a number,or magnitude of complex z, or norm of a vector\n     z    abs(z)\n    -    ------\n     a    a\n     -a    a\n     (-1)^a    1\n     exp(a + i b)  exp(a)\n     a b    abs(a) abs(b)\n     a + i b    sqrt(a^2 + b^2)\n   Notes\n     1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n     2. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n       abs(numerator(z)) / abs(denominator(z))\n        must be used to get the correct answer. Now the operation is\n       automatic.\n  */\n\n  DEBUG_ABS = false;\n\n  Eval_abs = function Eval_abs() {\n    push(cadr(p1));\n    Eval();\n    return abs();\n  };\n\n  absValFloat = function absValFloat() {\n    Eval();\n\n    _absval();\n\n    Eval();\n    return zzfloat();\n  }; // zzfloat of an abs doesn't necessarily result in a double\n  // , for example if there are variables. But\n  // in many of the tests there should be indeed\n  // a float, these two lines come handy to highlight\n  // when that doesn't happen for those tests.\n  //if !isdouble(stack[tos-1])\n  //  stop(\"absValFloat should return a double and instead got: \" + stack[tos-1])\n\n\n  abs = function abs() {\n    var theArgument;\n    theArgument = top();\n\n    if (DEBUG_ABS) {\n      console.trace(\">>>>  ABS of \" + theArgument);\n    }\n\n    _numerator();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABS numerator \" + stack[tos - 1]);\n    }\n\n    _absval();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL numerator: \" + stack[tos - 1]);\n    }\n\n    push(theArgument);\n\n    _denominator();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABS denominator: \" + stack[tos - 1]);\n    }\n\n    _absval();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL denominator: \" + stack[tos - 1]);\n    }\n\n    divide();\n\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL divided: \" + stack[tos - 1]);\n    }\n\n    if (DEBUG_ABS) {\n      return console.log(\"<<<<<<<  ABS\");\n    }\n  };\n\n  _absval = function absval() {\n    var anyFactorsYet, input;\n    save();\n    p1 = pop();\n    input = p1;\n\n    if (DEBUG_ABS) {\n      console.log(\"ABS of \" + p1);\n    } // handle all the \"number\" cases first -----------------------------------------\n\n\n    if (isZeroAtomOrTensor(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just zero\");\n      }\n\n      push(zero);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (isnegativenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a negative\");\n      }\n\n      push(p1);\n      negate();\n      restore();\n      return;\n    }\n\n    if (ispositivenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a positive\");\n      }\n\n      push(p1);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (p1 === symbol(PI)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" of PI\");\n      }\n\n      push(p1);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    } // ??? should there be a shortcut case here for the imaginary unit?\n    // now handle decomposition cases ----------------------------------------------\n    // we catch the \"add\", \"power\", \"multiply\" cases first,\n    // before falling back to the\n    // negative/positive cases because there are some\n    // simplification thay we might be able to do.\n    // Note that for this routine to give a correct result, this\n    // must be a sum where a complex number appears.\n    // If we apply this to \"a+b\", we get an incorrect result.\n\n\n    if (car(p1) === symbol(ADD) && (_findPossibleClockForm(p1) || _findPossibleExponentialForm(p1) || _Find(p1, imaginaryunit))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a sum\");\n      }\n\n      if (DEBUG_ABS) {\n        console.log(\"abs of a sum\");\n      } // sum\n\n\n      push(p1);\n\n      _rect(); // convert polar terms, if any\n\n\n      p1 = pop();\n      push(p1);\n      real();\n      push_integer(2);\n      power();\n      push(p1);\n      imag();\n      push_integer(2);\n      power();\n      add();\n      push_rational(1, 2);\n      power();\n      simplify_trig();\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is -1 to any power\");\n      } // -1 to any power\n\n\n      if (evaluatingAsFloats) {\n        if (DEBUG_ABS) {\n          console.log(\" abs: numeric, so result is 1.0\");\n        }\n\n        push_double(1.0);\n      } else {\n        if (DEBUG_ABS) {\n          console.log(\" abs: symbolic, so result is 1\");\n        }\n\n        push_integer(1);\n      }\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    } // abs(a^b) is equal to abs(a)^b IF b is positive\n\n\n    if (car(p1) === symbol(POWER) && ispositivenumber(caddr(p1))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is something to the power of a positive number\");\n      }\n\n      push(cadr(p1));\n      abs();\n      push(caddr(p1));\n      power();\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    } // abs(e^something)\n\n\n    if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is an exponential\");\n      } // exponential\n\n\n      push(caddr(p1));\n      real();\n      exponential();\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a product\");\n      } // product\n\n\n      anyFactorsYet = false;\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n\n        _absval();\n\n        if (anyFactorsYet) {\n          multiply();\n        }\n\n        anyFactorsYet = true;\n        p1 = cdr(p1);\n      }\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(ABS)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is abs of a abs\");\n      } // abs of a abs\n\n\n      push_symbol(ABS);\n      push(cadr(p1));\n      list(2);\n\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n\n      restore();\n      return;\n    }\n    /*\n     * Evaluation via zzfloat()\n     * ...while this is in theory a powerful mechanism, I've commented it\n     * out because I've refined this method enough to not need this.\n     * Evaling via zzfloat() is in principle more problematic because it could\n     * require further evaluations which could end up in further \"abs\" which\n     * would end up in infinite loops. Better not use it if not necessary.\n      * we look directly at the float evaluation of the argument\n     * to see if we end up with a number, which would mean that there\n     * is no imaginary component and we can just return the input\n     * (or its negation) as the result.\n    push p1\n    zzfloat()\n    floatEvaluation = pop()\n     if (isnegativenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a negative\"\n      push(p1)\n      negate()\n      restore()\n      return\n     if (ispositivenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a positive\"\n      push(p1)\n      if DEBUG_ABS then console.log \" --> ABS of \" + input + \" : \" + stack[tos-1]\n      restore()\n      return\n     */\n\n\n    if (istensor(p1)) {\n      absval_tensor();\n      restore();\n      return;\n    }\n\n    if (isnegativeterm(p1) || car(p1) === symbol(ADD) && isnegativeterm(cadr(p1))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n\n    if (DEBUG_ABS) {\n      console.log(\" abs: \" + p1 + \" is nothing decomposable\");\n    }\n\n    push_symbol(ABS);\n    push(p1);\n    list(2);\n\n    if (DEBUG_ABS) {\n      console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n    }\n\n    return restore();\n  }; // also called the \"norm\" of a vector\n\n\n  absval_tensor = function absval_tensor() {\n    if (p1.tensor.ndim !== 1) {\n      stop(\"abs(tensor) with tensor rank > 1\");\n    }\n\n    push(p1);\n    push(p1);\n    conjugate();\n\n    _inner();\n\n    push_rational(1, 2);\n    power();\n    simplify();\n    return Eval();\n  };\n\n  flag = 0;\n\n  Eval_add = function Eval_add() {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p2 = pop();\n      push_terms(p2);\n      p1 = cdr(p1);\n    }\n\n    return add_terms(tos - h);\n  }; // Add n terms, returns one expression on the stack.\n\n\n  stackAddsCount = 0;\n\n  add_terms = function add_terms(n) {\n    var h, i, i1, j1, o, ref, ref1, results, s, subsetOfStack;\n    stackAddsCount++;\n    i = 0;\n    h = tos - n;\n    s = h; // ensure no infinite loop, use \"for\"\n\n    if (DEBUG) {\n      console.log(\"stack before adding terms #\" + stackAddsCount);\n    } //if stackAddsCount == 137\n    //  debugger\n\n\n    if (DEBUG) {\n      for (i = o = 0, ref = tos; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        console.log(_print_list(stack[i]));\n      }\n    }\n\n    for (i = i1 = 0; i1 < 10; i = ++i1) {\n      if (n < 2) {\n        break;\n      }\n\n      flag = 0; //qsort(s, n, sizeof (U *), cmp_terms)\n\n      subsetOfStack = stack.slice(h, h + n);\n      subsetOfStack.sort(cmp_terms);\n      stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n\n      if (flag === 0) {\n        break;\n      }\n\n      n = combine_terms(h, n);\n    }\n\n    moveTos(h + n);\n\n    switch (n) {\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n\n        break;\n\n      case 1:\n        break;\n\n      default:\n        list(n);\n        p1 = pop();\n        push_symbol(ADD);\n        push(p1);\n        cons();\n    }\n\n    if (DEBUG) {\n      console.log(\"stack after adding terms #\" + stackAddsCount);\n    } //if stackAddsCount == 5\n    //  debugger\n\n\n    if (DEBUG) {\n      results = [];\n\n      for (i = j1 = 0, ref1 = tos; 0 <= ref1 ? j1 < ref1 : j1 > ref1; i = 0 <= ref1 ? ++j1 : --j1) {\n        results.push(console.log(_print_list(stack[i])));\n      }\n\n      return results;\n    }\n  }; // Compare terms for order, clobbers p1 and p2.\n\n\n  cmp_terms_count = 0;\n\n  cmp_terms = function cmp_terms(p1, p2) {\n    var i, o, ref, t;\n    cmp_terms_count++; //if cmp_terms_count == 52\n    //  debugger\n\n    i = 0; // numbers can be combined\n\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      flag = 1; //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 0\"\n\n      return 0;\n    } // congruent tensors can be combined\n\n\n    if (istensor(p1) && istensor(p2)) {\n      if (p1.tensor.ndim < p2.tensor.ndim) {\n        //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns -1\"\n        return -1;\n      }\n\n      if (p1.tensor.ndim > p2.tensor.ndim) {\n        //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 1\"\n        return 1;\n      }\n\n      for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n          //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns -1\"\n          return -1;\n        }\n\n        if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n          //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 1\"\n          return 1;\n        }\n      }\n\n      flag = 1; //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 0\"\n\n      return 0;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      if (isNumericAtom(car(p1))) {\n        p1 = cdr(p1);\n\n        if (cdr(p1) === symbol(NIL)) {\n          p1 = car(p1);\n        }\n      }\n    }\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n\n      if (isNumericAtom(car(p2))) {\n        p2 = cdr(p2);\n\n        if (cdr(p2) === symbol(NIL)) {\n          p2 = car(p2);\n        }\n      }\n    }\n\n    t = _cmp_expr(p1, p2);\n\n    if (t === 0) {\n      flag = 1;\n    } //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns \" + t\n\n\n    return t;\n  };\n\n  combine_terms = function combine_terms(s, n) {\n    var i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t; //debugger\n    // I had to turn the coffeescript for loop into\n    // a more mundane while loop because the i\n    // variable was changed from within the body,\n    // which is something that is not supposed to\n    // happen in the coffeescript 'vector' form.\n    // Also this means I had to add a 'i++' jus before\n    // the end of the body and before the \"continue\"s\n\n    i = 0;\n\n    while (i < n - 1) {\n      check_esc_flag();\n      p3 = stack[s + i];\n      p4 = stack[s + i + 1];\n\n      if (istensor(p3) && istensor(p4)) {\n        push(p3);\n        push(p4);\n        tensor_plus_tensor();\n        p1 = pop();\n\n        if (p1 !== symbol(NIL)) {\n          stack[s + i] = p1;\n\n          for (j = o = ref = i + 1, ref1 = n - 1; ref <= ref1 ? o < ref1 : o > ref1; j = ref <= ref1 ? ++o : --o) {\n            stack[s + j] = stack[s + j + 1];\n          }\n\n          n--;\n          i--;\n        }\n\n        i++;\n        continue;\n      }\n\n      if (istensor(p3) || istensor(p4)) {\n        i++;\n        continue;\n      }\n\n      if (isNumericAtom(p3) && isNumericAtom(p4)) {\n        push(p3);\n        push(p4);\n        add_numbers();\n        p1 = pop();\n\n        if (isZeroAtomOrTensor(p1)) {\n          for (j = i1 = ref2 = i, ref3 = n - 2; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; j = ref2 <= ref3 ? ++i1 : --i1) {\n            stack[s + j] = stack[s + j + 2];\n          }\n\n          n -= 2;\n        } else {\n          stack[s + i] = p1;\n\n          for (j = j1 = ref4 = i + 1, ref5 = n - 1; ref4 <= ref5 ? j1 < ref5 : j1 > ref5; j = ref4 <= ref5 ? ++j1 : --j1) {\n            stack[s + j] = stack[s + j + 1];\n          }\n\n          n--;\n        }\n\n        i--;\n        i++;\n        continue;\n      }\n\n      if (isNumericAtom(p3) || isNumericAtom(p4)) {\n        i++;\n        continue;\n      }\n\n      if (evaluatingAsFloats) {\n        p1 = one_as_double;\n        p2 = one_as_double;\n      } else {\n        p1 = one;\n        p2 = one;\n      }\n\n      t = 0;\n\n      if (car(p3) === symbol(MULTIPLY)) {\n        p3 = cdr(p3);\n        t = 1;\n\n        if (isNumericAtom(car(p3))) {\n          p1 = car(p3);\n          p3 = cdr(p3);\n\n          if (cdr(p3) === symbol(NIL)) {\n            p3 = car(p3);\n            t = 0;\n          }\n        }\n      }\n\n      if (car(p4) === symbol(MULTIPLY)) {\n        p4 = cdr(p4);\n\n        if (isNumericAtom(car(p4))) {\n          p2 = car(p4);\n          p4 = cdr(p4);\n\n          if (cdr(p4) === symbol(NIL)) {\n            p4 = car(p4);\n          }\n        }\n      }\n\n      if (!equal(p3, p4)) {\n        i++;\n        continue;\n      }\n\n      push(p1);\n      push(p2);\n      add_numbers();\n      p1 = pop();\n\n      if (isZeroAtomOrTensor(p1)) {\n        for (j = l1 = ref6 = i, ref7 = n - 2; ref6 <= ref7 ? l1 < ref7 : l1 > ref7; j = ref6 <= ref7 ? ++l1 : --l1) {\n          stack[s + j] = stack[s + j + 2];\n        }\n\n        n -= 2;\n        i--;\n        i++;\n        continue;\n      }\n\n      push(p1);\n\n      if (t) {\n        push(symbol(MULTIPLY));\n        push(p3);\n        cons();\n      } else {\n        push(p3);\n      }\n\n      multiply();\n      stack[s + i] = pop();\n\n      for (j = m1 = ref8 = i + 1, ref9 = n - 1; ref8 <= ref9 ? m1 < ref9 : m1 > ref9; j = ref8 <= ref9 ? ++m1 : --m1) {\n        stack[s + j] = stack[s + j + 1];\n      }\n\n      n--;\n      i--; // this i++ is to match the while\n\n      i++;\n    }\n\n    return n;\n  };\n\n  push_terms = function push_terms(p) {\n    var results;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else if (!isZeroAtom(p)) {\n      return push(p);\n    }\n  }; // add two expressions\n\n\n  add = function add() {\n    var h;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push_terms(p1);\n    push_terms(p2);\n    add_terms(tos - h);\n    return restore();\n  };\n\n  add_all = function add_all(k) {\n    var h, i, o, ref, s;\n    i = 0;\n    save();\n    s = tos - k;\n    h = tos;\n\n    for (i = o = 0, ref = k; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push_terms(stack[s + i]);\n    }\n\n    add_terms(tos - h);\n    p1 = pop();\n    moveTos(tos - k);\n    push(p1);\n    return restore();\n  };\n\n  subtract = function subtract() {\n    negate();\n    return add();\n  };\n\n  Eval_adj = function Eval_adj() {\n    push(cadr(p1));\n    Eval();\n    return adj();\n  };\n\n  adj = function adj() {\n    var doNothing, i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p1 = pop();\n\n    if (istensor(p1) && p1.tensor.ndim === 2 && p1.tensor.dim[0] === p1.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"adj: square matrix expected\");\n    }\n\n    n = p1.tensor.dim[0];\n    p2 = alloc_tensor(n * n);\n    p2.tensor.ndim = 2;\n    p2.tensor.dim[0] = n;\n    p2.tensor.dim[1] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        cofactor(p1, n, i, j);\n        p2.tensor.elem[n * j + i] = pop(); // transpose\n      }\n    }\n\n    push(p2);\n    return restore();\n  };\n\n  Eval_approxratio = function Eval_approxratio() {\n    var theArgument;\n    theArgument = cadr(p1);\n    push(theArgument);\n    return _approxratioRecursive();\n  };\n\n  _approxratioRecursive = function approxratioRecursive() {\n    var i, i1, o, ref, ref1;\n    i = 0;\n    save();\n    p1 = pop();\n\n    if (istensor(p1)) {\n      p4 = alloc_tensor(p1.tensor.nelem);\n      p4.tensor.ndim = p1.tensor.ndim;\n\n      for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        p4.tensor.dim[i] = p1.tensor.dim[i];\n      }\n\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n\n        _approxratioRecursive();\n\n        p4.tensor.elem[i] = pop();\n        check_tensor_dimensions(p4);\n      }\n\n      push(p4);\n    } else if (p1.k === DOUBLE) {\n      push(p1);\n      approxOneRatioOnly();\n    } else if (iscons(p1)) {\n      push(car(p1));\n\n      _approxratioRecursive();\n\n      push(cdr(p1));\n\n      _approxratioRecursive();\n\n      cons();\n    } else {\n      push(p1);\n    }\n\n    return restore();\n  };\n\n  approxOneRatioOnly = function approxOneRatioOnly() {\n    var numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot, supposedlyTheFloat, theFloat, theRatio;\n    zzfloat();\n    supposedlyTheFloat = pop();\n\n    if (supposedlyTheFloat.k === DOUBLE) {\n      theFloat = supposedlyTheFloat.d;\n      splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n      if (splitBeforeAndAfterDot.length === 2) {\n        numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n        precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n        theRatio = floatToRatioRoutine(theFloat, precision);\n        push_rational(theRatio[0], theRatio[1]);\n      } else {\n        push_integer(theFloat);\n      }\n\n      return;\n    } // we didn't manage, just leave unexpressed\n\n\n    push_symbol(APPROXRATIO);\n    push(theArgument);\n    return list(2);\n  }; // original routine by John Kennedy, see\n  // https://web.archive.org/web/20111027100847/http://homepage.smc.edu/kennedy_john/DEC2FRAC.PDF\n  // courtesy of Michael Borcherds\n  // who ported this to JavaScript under MIT licence\n  // also see\n  // https://github.com/geogebra/geogebra/blob/master/common/src/main/java/org/geogebra/common/kernel/algos/AlgoFractionText.java\n  // potential other ways to do this:\n  //   https://rosettacode.org/wiki/Convert_decimal_number_to_rational\n  //   http://www.homeschoolmath.net/teaching/rational_numbers.php\n  //   http://stackoverflow.com/questions/95727/how-to-convert-floats-to-human-readable-fractions\n\n\n  floatToRatioRoutine = function floatToRatioRoutine(decimal, AccuracyFactor) {\n    var DecimalSign, FractionDenominator, FractionNumerator, PreviousDenominator, ScratchValue, Z, ret;\n    FractionNumerator = void 0;\n    FractionDenominator = void 0;\n    DecimalSign = void 0;\n    Z = void 0;\n    PreviousDenominator = void 0;\n    ScratchValue = void 0;\n    ret = [0, 0];\n\n    if (isNaN(decimal)) {\n      return ret;\n    } // return 0/0 \n\n\n    if (decimal === 2e308) {\n      ret[0] = 1;\n      ret[1] = 0; // 1/0\n\n      return ret;\n    }\n\n    if (decimal === -2e308) {\n      ret[0] = -1;\n      ret[1] = 0; // -1/0\n\n      return ret;\n    }\n\n    if (decimal < 0.0) {\n      DecimalSign = -1.0;\n    } else {\n      DecimalSign = 1.0;\n    }\n\n    decimal = Math.abs(decimal);\n\n    if (Math.abs(decimal - Math.floor(decimal)) < AccuracyFactor) {\n      // handles exact integers including 0 \n      FractionNumerator = decimal * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n\n    if (decimal < 1.0e-19) {\n      // X = 0 already taken care of \n      FractionNumerator = DecimalSign;\n      FractionDenominator = 9999999999999999999.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n\n    if (decimal > 1.0e19) {\n      FractionNumerator = 9999999999999999999.0 * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n\n    Z = decimal;\n    PreviousDenominator = 0.0;\n    FractionDenominator = 1.0;\n\n    while (true) {\n      Z = 1.0 / (Z - Math.floor(Z));\n      ScratchValue = FractionDenominator;\n      FractionDenominator = FractionDenominator * Math.floor(Z) + PreviousDenominator;\n      PreviousDenominator = ScratchValue;\n      FractionNumerator = Math.floor(decimal * FractionDenominator + 0.5); // Rounding Function\n\n      if (!(Math.abs(decimal - FractionNumerator / FractionDenominator) > AccuracyFactor && Z !== Math.floor(Z))) {\n        break;\n      }\n    }\n\n    FractionNumerator = DecimalSign * FractionNumerator;\n    ret[0] = FractionNumerator;\n    ret[1] = FractionDenominator;\n    return ret;\n  };\n\n  approx_just_an_integer = 0;\n  approx_sine_of_rational = 1;\n  approx_sine_of_pi_times_rational = 2;\n  approx_rationalOfPi = 3;\n  approx_radicalOfRatio = 4;\n  approx_nothingUseful = 5;\n  approx_ratioOfRadical = 6;\n  approx_rationalOfE = 7;\n  approx_logarithmsOfRationals = 8;\n  approx_rationalsOfLogarithms = 9;\n\n  approxRationalsOfRadicals = function approxRationalsOfRadicals(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision); // simple radicals.\n\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n\n      for (j = i1 = 1; i1 <= 10; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.sqrt(i) / j; //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sqrt( \" + i + \" ) / \" + j; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_ratioOfRadical, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRadicalsOfRationals = function approxRadicalsOfRationals(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, len1, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, ref1, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision); // simple radicals.\n\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [1, 2, 3, 5, 6, 7, 8, 10]; // this one catches things like Math.sqrt(3/4), but\n    // things like Math.sqrt(1/2) are caught by the paragraph\n    // above (and in a better form)\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [1, 2, 3, 5, 6, 7, 8, 10];\n\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1]; //console.log  \"i,j: \" + i + \",\" + j\n\n        hypothesis = Math.sqrt(i / j); //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (sqrt( \" + i + \" / \" + j + \" )\"; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_radicalOfRatio, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRadicals = function approxRadicals(theFloat) {\n    var approxRadicalsOfRationalsResult, approxRationalsOfRadicalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision); // simple radicals.\n    // we always prefer a rational of a radical of an integer\n    // to a radical of a rational. Radicals of rationals generate\n    // radicals at the denominator which we'd rather avoid\n\n    approxRationalsOfRadicalsResult = approxRationalsOfRadicals(theFloat);\n\n    if (approxRationalsOfRadicalsResult != null) {\n      return approxRationalsOfRadicalsResult;\n    }\n\n    approxRadicalsOfRationalsResult = approxRadicalsOfRationals(theFloat);\n\n    if (approxRadicalsOfRationalsResult != null) {\n      return approxRadicalsOfRationalsResult;\n    }\n\n    return null;\n  };\n\n  approxLogs = function approxLogs(theFloat) {\n    var approxLogsOfRationalsResult, approxRationalsOfLogsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision); // we always prefer a rational of a log to a log of\n    // a rational\n\n    approxRationalsOfLogsResult = approxRationalsOfLogs(theFloat);\n\n    if (approxRationalsOfLogsResult != null) {\n      return approxRationalsOfLogsResult;\n    }\n\n    approxLogsOfRationalsResult = approxLogsOfRationals(theFloat);\n\n    if (approxLogsOfRationalsResult != null) {\n      return approxLogsOfRationalsResult;\n    }\n\n    return null;\n  };\n\n  approxRationalsOfLogs = function approxRationalsOfLogs(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE; // simple rationals of logs\n\n    for (i = o = 2; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.log(i) / j; //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n        // it does happen that due to roundings \n        // a \"higher multiple\" is picked, which is obviously\n        // unintended.\n        // E.g. 1 * log(1 / 3 ) doesn't match log( 3 ) BUT\n        // it matches -5 * log( 3 ) / 5\n        // so we avoid any case where the multiplier is a multiple\n        // of the divisor.\n\n\n        if (likelyMultiplier !== 1 && Math.abs(Math.floor(likelyMultiplier / j)) === Math.abs(likelyMultiplier / j)) {\n          continue;\n        }\n\n        if (error < 2.2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" ) / \" + j; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_rationalsOfLogarithms, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxLogsOfRationals = function approxLogsOfRationals(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE; // simple logs of rationals\n\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.log(i / j); //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n\n\n        if (error < 1.96 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" / \" + j + \" )\"; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_logarithmsOfRationals, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfE = function approxRationalsOfPowersOfE(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE; // simple rationals of a few powers of e\n\n    for (i = o = 1; o <= 2; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.pow(Math.E, i) / j; //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (e ^ \" + i + \" ) / \" + j; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_rationalOfE, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfPI = function approxRationalsOfPowersOfPI(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null; // here we do somethng a little special: since\n    // the powers of pi can get quite big, there might\n    // be multiple hypothesis where more of the\n    // magnitude is shifted to the multiplier, and some\n    // where more of the magnitude is shifted towards the\n    // exponent of pi. So we prefer the hypotheses with the\n    // lower multiplier since it's likely to insert more\n    // information.\n\n    minimumComplexity = Number.MAX_VALUE; // simple rationals of a few powers of PI\n\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.pow(Math.PI, i) / j; //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (pi ^ \" + i + \" ) / \" + j + \" )\"; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_rationalOfPi, likelyMultiplier, i, j];\n          }\n        }\n      }\n    } //console.log \"approxRationalsOfPowersOfPI returning: \" + bestResultSoFar\n\n\n    return bestResultSoFar;\n  };\n\n  approxTrigonometric = function approxTrigonometric(theFloat) {\n    var approxSineOfRationalMultiplesOfPIResult, approxSineOfRationalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision); // we always prefer a sin of a rational without the PI\n\n    approxSineOfRationalsResult = approxSineOfRationals(theFloat);\n\n    if (approxSineOfRationalsResult != null) {\n      return approxSineOfRationalsResult;\n    }\n\n    approxSineOfRationalMultiplesOfPIResult = approxSineOfRationalMultiplesOfPI(theFloat);\n\n    if (approxSineOfRationalMultiplesOfPIResult != null) {\n      return approxSineOfRationalMultiplesOfPIResult;\n    }\n\n    return null;\n  };\n\n  approxSineOfRationals = function approxSineOfRationals(theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE; // we only check very simple rationals because they begin to get tricky\n    // quickly, also they collide often with the \"rational of pi\" hypothesis.\n    // For example sin(11) is veeery close to 1 (-0.99999020655)\n    // (see: http://mathworld.wolfram.com/AlmostInteger.html )\n    // we stop at rationals that mention up to 10\n\n    for (i = o = 1; o <= 4; i = ++o) {\n      for (j = i1 = 1; i1 <= 4; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        fraction = i / j;\n        hypothesis = Math.sin(fraction); //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n\n\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" )\"; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_sine_of_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxSineOfRationalMultiplesOfPI = function approxSineOfRationalMultiplesOfPI(theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE; // check rational multiples of pi\n\n    for (i = o = 1; o <= 13; i = ++o) {\n      for (j = i1 = 1; i1 <= 13; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        fraction = i / j;\n        hypothesis = Math.sin(Math.PI * fraction); //console.log  \"hypothesis: \" + hypothesis\n\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio); //console.log  \"ratio: \" + ratio\n\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        } //console.log  \"error: \" + error\n        // magic number 23 comes from the case sin(pi/10)\n\n\n        if (error < 23 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" * pi )\"; //console.log result + \" error: \" + error\n\n            bestResultSoFar = [result, approx_sine_of_pi_times_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n\n    return bestResultSoFar;\n  };\n\n  approxAll = function approxAll(theFloat) {\n    var LOG_EXPLANATIONS, approxLogsResult, approxRadicalsResult, approxRationalsOfPowersOfEResult, approxRationalsOfPowersOfPIResult, approxTrigonometricResult, bestApproxSoFar, constantsSum, constantsSumMin, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n\n    console.log(\"precision: \" + precision);\n    constantsSumMin = Number.MAX_VALUE;\n    constantsSum = 0;\n    bestApproxSoFar = null;\n    LOG_EXPLANATIONS = true;\n    approxRadicalsResult = approxRadicals(theFloat);\n\n    if (approxRadicalsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRadicalsResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRadicalsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxLogsResult = approxLogs(theFloat);\n\n    if (approxLogsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxLogsResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxLogsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxRationalsOfPowersOfEResult = approxRationalsOfPowersOfE(theFloat);\n\n    if (approxRationalsOfPowersOfEResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfEResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfEResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxRationalsOfPowersOfPIResult = approxRationalsOfPowersOfPI(theFloat);\n\n    if (approxRationalsOfPowersOfPIResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfPIResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfPIResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    approxTrigonometricResult = approxTrigonometric(theFloat);\n\n    if (approxTrigonometricResult != null) {\n      constantsSum = simpleComplexityMeasure(approxTrigonometricResult);\n\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxTrigonometricResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n\n    return bestApproxSoFar;\n  };\n\n  simpleComplexityMeasure = function simpleComplexityMeasure(aResult, b, c) {\n    var theSum;\n    theSum = null;\n\n    if (aResult instanceof Array) {\n      // we want PI and E to somewhat increase the\n      // complexity of the expression, so basically they count\n      // more than any integer lower than 3, i.e. we consider\n      // 1,2,3 to be more fundamental than PI or E.\n      switch (aResult[1]) {\n        case approx_sine_of_pi_times_rational:\n          theSum = 4;\n          break;\n        // exponents of PI and E need to be penalised as well\n        // otherwise they come to explain any big number\n        // so we count them just as much as the multiplier\n\n        case approx_rationalOfPi:\n          theSum = Math.pow(4, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n\n        case approx_rationalOfE:\n          theSum = Math.pow(3, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n\n        default:\n          theSum = 0;\n      }\n\n      theSum += Math.abs(aResult[2]) * (Math.abs(aResult[3]) + Math.abs(aResult[4]));\n    } else {\n      theSum += Math.abs(aResult) * (Math.abs(b) + Math.abs(c));\n    } // heavily discount unit constants\n\n\n    if (aResult[2] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n\n    if (aResult[3] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n\n    if (aResult[4] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n\n    if (theSum < 0) {\n      theSum = 0;\n    }\n\n    return theSum;\n  };\n\n  testApprox = function testApprox() {\n    var error, fraction, i, i1, i2, i3, j, j1, j2, j3, k3, l1, l2, l3, len, len1, len2, len3, len4, len5, len6, len7, m1, m2, m3, n1, n2, o, o1, o2, originalValue, q1, q2, r1, r2, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, returned, returnedFraction, returnedValue, s1, s2, t1, t2, u1, u2, v1, v2, value, x1, x2, z1, z2;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [2, 3, 5, 6, 7, 8, 10];\n\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1];\n\n        if (i === j) {\n          continue; // this is just 1\n        }\n\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.sqrt(i) / j;\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    ref2 = [2, 3, 5, 6, 7, 8, 10];\n\n    for (j1 = 0, len2 = ref2.length; j1 < len2; j1++) {\n      i = ref2[j1];\n      ref3 = [2, 3, 5, 6, 7, 8, 10];\n\n      for (l1 = 0, len3 = ref3.length; l1 < len3; l1++) {\n        j = ref3[l1];\n\n        if (i === j) {\n          continue; // this is just 1\n        }\n\n        console.log(\"testapproxRadicals testing with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.sqrt(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    ref4 = [2, 3, 5, 6, 7, 8, 10];\n\n    for (m1 = 0, len4 = ref4.length; m1 < len4; m1++) {\n      i = ref4[m1];\n      ref5 = [2, 3, 5, 6, 7, 8, 10];\n\n      for (n1 = 0, len5 = ref5.length; n1 < len5; n1++) {\n        j = ref5[n1];\n\n        if (i === j) {\n          continue; // this is just 1\n        }\n\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.sqrt(i / j);\n        returned = approxRadicals(value);\n\n        if (returned != null) {\n          returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n\n          if (returned[1] === approx_radicalOfRatio && Math.abs(value - returnedValue) > 1e-15) {\n            console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n          }\n        }\n      }\n    }\n\n    ref6 = [1, 2, 3, 5, 6, 7, 8, 10];\n\n    for (o1 = 0, len6 = ref6.length; o1 < len6; o1++) {\n      i = ref6[o1];\n      ref7 = [1, 2, 3, 5, 6, 7, 8, 10];\n\n      for (q1 = 0, len7 = ref7.length; q1 < len7; q1++) {\n        j = ref7[q1];\n\n        if (i === 1 && j === 1) {\n          continue;\n        }\n\n        console.log(\"testapproxRadicals testing with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sqrt(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n\n        if (returned[1] === approx_radicalOfRatio && Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = r1 = 1; r1 <= 5; i = ++r1) {\n      for (j = s1 = 1; s1 <= 5; j = ++s1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.log(i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = t1 = 1; t1 <= 5; i = ++t1) {\n      for (j = u1 = 1; u1 <= 5; j = ++u1) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.log(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = v1 = 1; v1 <= 5; i = ++v1) {\n      for (j = x1 = 1; x1 <= 5; j = ++x1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.log(i / j);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = z1 = 1; z1 <= 5; i = ++z1) {\n      for (j = i2 = 1; i2 <= 5; j = ++i2) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.log(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = j2 = 1; j2 <= 2; i = ++j2) {\n      for (j = l2 = 1; l2 <= 12; j = ++l2) {\n        console.log(\"testApproxAll testing: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.E, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = m2 = 1; m2 <= 2; i = ++m2) {\n      for (j = n2 = 1; n2 <= 12; j = ++n2) {\n        console.log(\"approxRationalsOfPowersOfE testing with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.E, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfE(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfE with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = o2 = 1; o2 <= 2; i = ++o2) {\n      for (j = q2 = 1; q2 <= 12; j = ++q2) {\n        console.log(\"testApproxAll testing: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.PI, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = r2 = 1; r2 <= 2; i = ++r2) {\n      for (j = s2 = 1; s2 <= 12; j = ++s2) {\n        console.log(\"approxRationalsOfPowersOfPI testing with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.PI, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfPI(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfPI with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = t2 = 1; t2 <= 4; i = ++t2) {\n      for (j = u2 = 1; u2 <= 4; j = ++u2) {\n        console.log(\"testApproxAll testing: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        value = Math.sin(fraction);\n        returned = approxAll(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    } // 5 digits create no problem\n\n\n    for (i = v2 = 1; v2 <= 4; i = ++v2) {\n      for (j = x2 = 1; x2 <= 4; j = ++x2) {\n        console.log(\"testApproxAll testing with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(5);\n        returned = approxAll(value);\n\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    } // 4 digits create two collisions\n\n\n    for (i = z2 = 1; z2 <= 4; i = ++z2) {\n      for (j = i3 = 1; i3 <= 4; j = ++i3) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n\n    value = 0;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0\");\n    }\n\n    value = 0.0;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0\");\n    }\n\n    value = 0.00;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.00\");\n    }\n\n    value = 0.000;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.000\");\n    }\n\n    value = 0.0000;\n\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0000\");\n    }\n\n    value = 1;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1\");\n    }\n\n    value = 1.0;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0\");\n    }\n\n    value = 1.00;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00\");\n    }\n\n    value = 1.000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.000\");\n    }\n\n    value = 1.0000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n\n    value = 1.00000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00000\");\n    }\n\n    value = Math.sqrt(2);\n\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2)\");\n    }\n\n    value = 1.41;\n\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: 1.41\");\n    } // if we narrow down to a particular family then we can get\n    // an OK guess even with few digits, expecially for really \"famous\" numbers\n\n\n    value = 1.4;\n\n    if (approxRadicals(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail approxRadicals: 1.4\");\n    }\n\n    value = 0.6;\n\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.6\");\n    }\n\n    value = 0.69;\n\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.69\");\n    }\n\n    value = 0.7;\n\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.7\");\n    }\n\n    value = 1.09;\n\n    if (approxLogs(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxLogs: 1.09\");\n    }\n\n    value = 1.09;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.09\");\n    }\n\n    value = 1.098;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.098\");\n    }\n\n    value = 1.1;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.1\");\n    }\n\n    value = 1.11;\n\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.11\");\n    }\n\n    value = Math.sqrt(3);\n\n    if (approxAll(value)[0] !== \"1 * sqrt( 3 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(3)\");\n    }\n\n    value = 1.0000;\n\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n\n    value = 3.141592;\n\n    if (approxAll(value)[0] !== \"1 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 3.141592\");\n    }\n\n    value = 31.41592;\n\n    if (approxAll(value)[0] !== \"10 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31.41592\");\n    }\n\n    value = 314.1592;\n\n    if (approxAll(value)[0] !== \"100 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 314.1592\");\n    }\n\n    value = 31415926.53589793;\n\n    if (approxAll(value)[0] !== \"10000000 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31415926.53589793\");\n    }\n\n    value = Math.sqrt(2);\n\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/4 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(2)\");\n    }\n\n    value = Math.sqrt(3);\n\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/3 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(3)\");\n    }\n\n    value = (Math.sqrt(6) - Math.sqrt(2)) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) - Math.sqrt(2))/4\");\n    }\n\n    value = Math.sqrt(2 - Math.sqrt(2)) / 2;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/8 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 - Math.sqrt(2))/2\");\n    }\n\n    value = (Math.sqrt(6) + Math.sqrt(2)) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) + Math.sqrt(2))/4\");\n    }\n\n    value = Math.sqrt(2 + Math.sqrt(3)) / 2;\n\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 + Math.sqrt(3))/2\");\n    }\n\n    value = (Math.sqrt(5) - 1) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/10 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(5) - 1)/4\");\n    }\n\n    value = Math.sqrt(10 - 2 * Math.sqrt(5)) / 4;\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/5 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(10 - 2*Math.sqrt(5))/4\");\n    } // this has a radical form but it's too long to write\n\n\n    value = Math.sin(Math.PI / 7);\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/7 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/7)\");\n    } // this has a radical form but it's too long to write\n\n\n    value = Math.sin(Math.PI / 9);\n\n    if (approxAll(value)[0] !== \"1 * sin( 1/9 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/9)\");\n    }\n\n    value = 1836.15267;\n\n    if (approxRationalsOfPowersOfPI(value)[0] !== \"6 * (pi ^ 5 ) / 1 )\") {\n      console.log(\"fail approxRationalsOfPowersOfPI: 1836.15267\");\n    }\n\n    for (i = j3 = 1; j3 <= 13; i = ++j3) {\n      for (j = k3 = 1; k3 <= 13; j = ++k3) {\n        console.log(\"approxTrigonometric testing: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        value = Math.sin(Math.PI * fraction); // we specifically search for sines of rational multiples of PI\n        // because too many of them would be picked up as simple\n        // rationals.\n\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail approxTrigonometric: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned);\n        }\n      }\n    }\n\n    for (i = l3 = 1; l3 <= 13; i = ++l3) {\n      for (j = m3 = 1; m3 <= 13; j = ++m3) {\n        // with four digits, there are two collisions with the\n        // \"simple fraction\" argument hypotesis, which we prefer since\n        // it's a simpler expression, so let's skip those\n        // two tests\n        if (i === 5 && j === 11 || i === 6 && j === 11) {\n          continue;\n        }\n\n        console.log(\"approxTrigonometric testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        originalValue = Math.sin(Math.PI * fraction);\n        value = originalValue.toFixed(4); // we specifically search for sines of rational multiples of PI\n        // because too many of them would be picked up as simple\n        // rationals.\n\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n\n        if (error > 1e-14) {\n          console.log(\"fail approxTrigonometric with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n\n    return console.log(\"testApprox done\");\n  };\n\n  $.approxRadicals = approxRadicals;\n  $.approxRationalsOfLogs = approxRationalsOfLogs;\n  $.approxAll = approxAll;\n  $.testApprox = testApprox;\n\n  Eval_arccos = function Eval_arccos() {\n    push(cadr(p1));\n    Eval();\n    return arccos();\n  };\n\n  arccos = function arccos() {\n    var d, errno, n;\n    n = 0;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.acos(p1.d);\n\n      if (errno) {\n        stop(\"arccos function argument is not in the interval [-1,1]\");\n      }\n\n      push_double(d);\n      restore();\n      return;\n    } // if p1 == 1/sqrt(2) then return 1/4*pi (45 degrees)\n    // second if catches the other way of saying it, sqrt(2)/2\n\n\n    if (isoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 4.0);\n      } else {\n        push_rational(1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    } // if p1 == -1/sqrt(2) then return 3/4*pi (135 degrees)\n    // second if catches the other way of saying it, -sqrt(2)/2\n\n\n    if (isminusoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI * 3.0 / 4.0);\n      } else {\n        push_rational(3, 4);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    } // if p1 == sqrt(3)/2 then return 1/6*pi (30 degrees)\n\n\n    if (issqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 6.0);\n      } else {\n        push_rational(1, 6);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    } // if p1 == -sqrt(3)/2 then return 5/6*pi (150 degrees)\n\n\n    if (isminussqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(5.0 * Math.PI / 6.0);\n      } else {\n        push_rational(5, 6);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    }\n\n    if (!isrational(p1)) {\n      push_symbol(ARCCOS);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push_symbol(PI);\n        }\n\n        break;\n\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI * 2.0 / 3.0);\n        } else {\n          push_rational(2, 3);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 3.0);\n        } else {\n          push_rational(1, 3);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n\n        break;\n\n      default:\n        push_symbol(ARCCOS);\n        push(p1);\n        list(2);\n    }\n\n    return restore();\n  };\n\n  Eval_arccosh = function Eval_arccosh() {\n    push(cadr(p1));\n    Eval();\n    return arccosh();\n  };\n\n  arccosh = function arccosh() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(COSH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = p1.d;\n\n      if (d < 1.0) {\n        stop(\"arccosh function argument is less than 1.0\");\n      }\n\n      d = Math.log(d + Math.sqrt(d * d - 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isplusone(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    push_symbol(ARCCOSH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  Eval_arcsin = function Eval_arcsin() {\n    push(cadr(p1));\n    Eval();\n    return arcsin();\n  };\n\n  arcsin = function arcsin() {\n    var d, errno, n;\n    n = 0;\n    d = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.asin(p1.d);\n\n      if (errno) {\n        stop(\"arcsin function argument is not in the interval [-1,1]\");\n      }\n\n      push_double(d);\n      restore();\n      return;\n    } // if p1 == 1/sqrt(2) then return 1/4*pi (45 degrees)\n    // second if catches the other way of saying it, sqrt(2)/2\n\n\n    if (isoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      push_rational(1, 4);\n      push_symbol(PI);\n      multiply();\n      restore();\n      return;\n    } // if p1 == -1/sqrt(2) then return -1/4*pi (-45 degrees)\n    // second if catches the other way of saying it, -sqrt(2)/2\n\n\n    if (isminusoneoversqrttwo(p1) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(-Math.PI / 4.0);\n      } else {\n        push_rational(-1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    } // if p1 == sqrt(3)/2 then return 1/3*pi (60 degrees)\n\n\n    if (issqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 3.0);\n      } else {\n        push_rational(1, 3);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    } // if p1 == -sqrt(3)/2 then return -1/3*pi (-60 degrees)\n\n\n    if (isminussqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(-Math.PI / 3.0);\n      } else {\n        push_rational(-1, 3);\n        push_symbol(PI);\n        multiply();\n      }\n\n      restore();\n      return;\n    }\n\n    if (!isrational(p1)) {\n      push_symbol(ARCSIN);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 2.0);\n        } else {\n          push_rational(-1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 6.0);\n        } else {\n          push_rational(-1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n\n        break;\n\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 6.0);\n        } else {\n          push_rational(1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n\n        break;\n\n      default:\n        push_symbol(ARCSIN);\n        push(p1);\n        list(2);\n    }\n\n    return restore();\n  };\n\n  Eval_arcsinh = function Eval_arcsinh() {\n    push(cadr(p1));\n    Eval();\n    return arcsinh();\n  };\n\n  arcsinh = function arcsinh() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(SINH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = p1.d;\n      d = Math.log(d + Math.sqrt(d * d + 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    push_symbol(ARCSINH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  Eval_arctan = function Eval_arctan() {\n    push(cadr(p1));\n    Eval();\n    return _arctan();\n  };\n\n  _arctan = function arctan() {\n    var d, errno;\n    d = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(TAN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.atan(p1.d);\n\n      if (errno) {\n        stop(\"arctan function error\");\n      }\n\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n\n      _arctan();\n\n      negate();\n      restore();\n      return;\n    } // arctan(sin(a) / cos(a)) ?\n\n\n    if (_Find(p1, symbol(SIN)) && _Find(p1, symbol(COS))) {\n      push(p1);\n\n      _numerator();\n\n      p2 = pop();\n      push(p1);\n\n      _denominator();\n\n      p3 = pop();\n\n      if (car(p2) === symbol(SIN) && car(p3) === symbol(COS) && equal(cadr(p2), cadr(p3))) {\n        push(cadr(p2));\n        restore();\n        return;\n      }\n    } // arctan(1/sqrt(3)) -> pi/6\n    // second if catches the other way of saying it, sqrt(3)/3\n\n\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), -1, 2) || car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 3) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 3) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2)) {\n      push_rational(1, 6);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      multiply();\n      restore();\n      return;\n    } // arctan(1) -> pi/4\n\n\n    if (equaln(p1, 1)) {\n      push_rational(1, 4);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      multiply();\n      restore();\n      return;\n    } // arctan(sqrt(3)) -> pi/3\n\n\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), 1, 2)) {\n      push_rational(1, 3);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      multiply();\n      restore();\n      return;\n    }\n\n    push_symbol(ARCTAN);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  Eval_arctanh = function Eval_arctanh() {\n    push(cadr(p1));\n    Eval();\n    return arctanh();\n  };\n\n  arctanh = function arctanh() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(TANH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = p1.d;\n\n      if (d < -1.0 || d > 1.0) {\n        stop(\"arctanh function argument is not in the interval [-1,1]\");\n      }\n\n      d = Math.log((1.0 + d) / (1.0 - d)) / 2.0;\n      push_double(d);\n      restore();\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    push_symbol(ARCTANH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  DEBUG_ARG = false;\n\n  Eval_arg = function Eval_arg() {\n    push(cadr(p1));\n    Eval();\n    return arg();\n  };\n\n  arg = function arg() {\n    save();\n    p1 = pop();\n    push(p1);\n\n    _numerator();\n\n    yyarg();\n    push(p1);\n\n    _denominator();\n\n    yyarg();\n    subtract();\n    return restore();\n  }; //define RE p2\n  //define IM p3\n\n\n  yyarg = function yyarg() {\n    save();\n    p1 = pop(); // case of plain number\n\n    if (ispositivenumber(p1) || p1 === symbol(PI)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(0);\n      } else {\n        push_integer(0);\n      }\n    } else if (isnegativenumber(p1)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      negate(); // you'd think that something like\n      // arg(a) is always 0 when a is real but no,\n      // arg(a) is pi when a is negative so we have\n      // to leave unexpressed\n    } else if (issymbol(p1)) {\n      push_symbol(ARG);\n      push(p1);\n      list(2);\n    } else if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      // -1 to a power\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      // exponential\n      push(caddr(p1));\n      imag(); // arg(a^(1/2)) is always equal to 1/2 * arg(a)\n      // this can obviously be made more generic TODO\n    } else if (car(p1) === symbol(POWER) && isoneovertwo(caddr(p1))) {\n      if (DEBUG_ARG) {\n        console.log(\"arg of a sqrt: \" + p1);\n      }\n\n      if (DEBUG_ARG) {\n        debugger;\n      }\n\n      push(cadr(p1));\n      arg();\n\n      if (DEBUG_ARG) {\n        console.log(\" = 1/2 * \" + stack[tos - 1]);\n      }\n\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      // product of factors\n      push_integer(0);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        arg();\n        add();\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(ADD)) {\n      // sum of terms\n      push(p1);\n\n      _rect();\n\n      p1 = pop();\n      push(p1);\n      real();\n      p2 = pop();\n      push(p1);\n      imag();\n      p3 = pop();\n\n      if (isZeroAtomOrTensor(p2)) {\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push(symbol(PI));\n        }\n\n        if (isnegative(p3)) {\n          negate();\n        }\n      } else {\n        push(p3);\n        push(p2);\n        divide();\n\n        _arctan();\n\n        if (isnegative(p2)) {\n          if (evaluatingAsFloats) {\n            push_double(Math.PI);\n          } else {\n            push_symbol(PI);\n          }\n\n          if (isnegative(p3)) {\n            subtract(); // quadrant 1 -> 3\n          } else {\n            add(); // quadrant 4 -> 2\n          }\n        }\n      }\n    } else {\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        // if we assume all passed values are real\n        push_integer(0);\n      } else {\n        // if we don't assume all passed values are real, all\n        // we con do is to leave unexpressed\n        push_symbol(ARG);\n        push(p1);\n        list(2);\n      }\n    }\n\n    return restore();\n  }; // pretty print\n\n\n  _bake = function bake() {\n    var h, s, t, x, y, z;\n    h = 0;\n    s = 0;\n    t = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    expanding++;\n    save();\n    p1 = pop();\n    s = ispolyexpandedform(p1, symbol(SYMBOL_S));\n    t = ispolyexpandedform(p1, symbol(SYMBOL_T));\n    x = ispolyexpandedform(p1, symbol(SYMBOL_X));\n    y = ispolyexpandedform(p1, symbol(SYMBOL_Y));\n    z = ispolyexpandedform(p1, symbol(SYMBOL_Z));\n\n    if (s === 1 && t === 0 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_S);\n      bake_poly();\n    } else if (s === 0 && t === 1 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_T);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 1 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_X);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 1 && z === 0) {\n      p2 = symbol(SYMBOL_Y);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 0 && z === 1) {\n      p2 = symbol(SYMBOL_Z);\n      bake_poly(); // don't bake the contents of some constructs such as \"for\"\n      // because we don't want to evaluate the body of\n      // such constructs \"statically\", i.e. without fully running\n      // the loops.\n    } else if (iscons(p1) && car(p1) !== symbol(FOR)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n\n        _bake();\n\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n\n    restore();\n    return expanding--;\n  };\n\n  _polyform = function polyform() {\n    var h;\n    h = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (ispolyexpandedform(p1, p2)) {\n      bake_poly();\n    } else if (iscons(p1)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n\n        _polyform();\n\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n\n    return restore();\n  };\n\n  bake_poly = function bake_poly() {\n    var a, h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0; //U **a\n\n    a = tos;\n    k = coeff(p2, p1);\n    h = tos;\n\n    for (i = o = ref = k - 1; o >= 0; i = o += -1) {\n      p1 = stack[a + i];\n      bake_poly_term(i);\n    }\n\n    n = tos - h;\n\n    if (n > 1) {\n      list(n);\n      push(symbol(ADD));\n      swap();\n      cons();\n    }\n\n    p1 = pop();\n    moveTos(tos - k);\n    return push(p1);\n  }; // p1 points to coefficient of p2 ^ k\n  // k is an int\n\n\n  bake_poly_term = function bake_poly_term(k) {\n    var h, n;\n    h = 0;\n    n = 0;\n\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    } // constant term?\n\n\n    if (k === 0) {\n      if (car(p1) === symbol(ADD)) {\n        p1 = cdr(p1);\n\n        while (iscons(p1)) {\n          push(car(p1));\n          p1 = cdr(p1);\n        }\n      } else {\n        push(p1);\n      }\n\n      return;\n    }\n\n    h = tos; // coefficient\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else if (!equaln(p1, 1)) {\n      push(p1);\n    } // x ^ k\n\n\n    if (k === 1) {\n      push(p2);\n    } else {\n      push(symbol(POWER));\n      push(p2);\n      push_integer(k);\n      list(3);\n    }\n\n    n = tos - h;\n\n    if (n > 1) {\n      list(n);\n      push(symbol(MULTIPLY));\n      swap();\n      return cons();\n    }\n  };\n\n  Eval_besselj = function Eval_besselj() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return besselj();\n  };\n\n  besselj = function besselj() {\n    save();\n    yybesselj();\n    return restore();\n  }; //define X p1\n  //define N p2\n  //define SGN p3\n\n\n  yybesselj = function yybesselj() {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer(); // numerical result\n\n    if (isdouble(p1) && !isNaN(n)) {\n      d = jn(n, p1.d);\n      push_double(d);\n      return;\n    } // bessej(0,0) = 1\n\n\n    if (isZeroAtomOrTensor(p1) && isZeroAtomOrTensor(p2)) {\n      push_integer(1);\n      return;\n    } // besselj(0,n) = 0\n\n\n    if (isZeroAtomOrTensor(p1) && !isNaN(n)) {\n      push_integer(0);\n      return;\n    } // half arguments\n\n\n    if (p2.k === NUM && MEQUAL(p2.q.b, 2)) {\n      // n = 1/2\n      if (MEQUAL(p2.q.a, 1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        sine();\n        multiply();\n        return;\n      } // n = -1/2\n\n\n      if (MEQUAL(p2.q.a, -1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        cosine();\n        multiply();\n        return;\n      } // besselj(x,n) = (2/x) (n-sgn(n)) besselj(x,n-sgn(n)) - besselj(x,n-2*sgn(n))\n\n\n      push_integer(MSIGN(p2.q.a));\n      p3 = pop();\n      push_integer(2);\n      push(p1);\n      divide();\n      push(p2);\n      push(p3);\n      subtract();\n      multiply();\n      push(p1);\n      push(p2);\n      push(p3);\n      subtract();\n      besselj();\n      multiply();\n      push(p1);\n      push(p2);\n      push_integer(2);\n      push(p3);\n      multiply();\n      subtract();\n      besselj();\n      subtract();\n      return;\n    } //if 0 # test cases needed\n\n\n    if (isnegativeterm(p1)) {\n      push(p1);\n      negate();\n      push(p2);\n      power();\n      push(p1);\n      push(p2);\n      negate();\n      power();\n      multiply();\n      push_symbol(BESSELJ);\n      push(p1);\n      negate();\n      push(p2);\n      list(3);\n      multiply();\n      return;\n    }\n\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELJ);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    } //endif\n\n\n    push(symbol(BESSELJ));\n    push(p1);\n    push(p2);\n    return list(3);\n  };\n\n  Eval_bessely = function Eval_bessely() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return bessely();\n  };\n\n  bessely = function bessely() {\n    save();\n    yybessely();\n    return restore();\n  }; //define X p1\n  //define N p2\n\n\n  yybessely = function yybessely() {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (isdouble(p1) && !isNaN(n)) {\n      d = yn(n, p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELY);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    }\n\n    push_symbol(BESSELY);\n    push(p1);\n    push(p2);\n    list(3);\n  }; //double convert_rational_to_double(U *)\n  //double convert_bignum_to_double(unsigned int *)\n  //int ge(unsigned int *, unsigned int *, int)\n\n\n  mint = function mint(a) {\n    return bigInt(a);\n  };\n\n  isSmall = function isSmall(a) {\n    return a.geq(Number.MIN_SAFE_INTEGER) && a.leq(Number.MAX_SAFE_INTEGER);\n  }; // b is +1 or -1, a is a bigint\n\n\n  setSignTo = function setSignTo(a, b) {\n    if (a.isPositive()) {\n      if (b < 0) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      // a is negative\n      if (b > 0) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n\n    return a;\n  };\n\n  makeSignSameAs = function makeSignSameAs(a, b) {\n    if (a.isPositive()) {\n      if (b.isNegative()) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      // a is negative\n      if (b.isPositive()) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n\n    return a;\n  };\n\n  makePositive = function makePositive(a) {\n    if (a.isNegative()) {\n      return a.multiply(bigInt(-1));\n    }\n\n    return a;\n  }; // n is an int\n\n  /*\n  mtotal = 0\n  MP_MIN_SIZE = 2\n  MP_MAX_FREE  = 1000\n   mnew = (n) ->\n    if (n < MP_MIN_SIZE)\n      n = MP_MIN_SIZE\n    if (n == MP_MIN_SIZE && mfreecount)\n      p = free_stack[--mfreecount]\n    else\n      p = [] #(unsigned int *) malloc((n + 3) * sizeof (int))\n      #if (p == 0)\n   *  stop(\"malloc failure\")\n    p[0] = n\n    mtotal += n\n    return p[3]\n   */\n  // p is the index of array of ints\n  // !!! array wasn't passed here\n\n  /*\n  free_stack = []\n   mfree = (array, p) ->\n    p -= 3\n    mtotal -= array[p]\n    if (array[p] == MP_MIN_SIZE && mfreecount < MP_MAX_FREE)\n      free_stack[mfreecount++] = p\n    else\n      free(p)\n  */\n  // convert int to bignum\n  // n is an int\n\n  /*\n  mint = (n) ->\n    p = mnew(1)\n    if (n < 0)\n   * !!! this is FU\n   * MSIGN(p) = -1\n      fu = true\n    else\n   * !!! this is FU\n      #MSIGN(p) = 1\n      fu = true\n   * !!! this is FU\n    #MLENGTH(p) = 1\n    p[0] = Math.abs(n)\n    return p\n   */\n  // copy bignum\n  // a is an array of ints\n\n  /*\n  mcopy = (a) ->\n    #unsigned int *b\n     b = mnew(MLENGTH(a))\n    * !!! fu\n    #MSIGN(b) = MSIGN(a)\n    #MLENGTH(b) = MLENGTH(a)\n     for i in [0...MLENGTH(a)]\n      b[i] = a[i]\n     return b\n   */\n\n  /*\n   * \n   * ge not invoked from anywhere - is you need ge\n   * just use the bigNum's ge implementation\n   * leaving it here just in case I decide to backport to C\n   *\n   * a >= b ?\n   * and and b arrays of ints, len is an int\n  ge = (a, b, len) ->\n    i = 0\n    for i in [0...len]\n      if (a[i] == b[i])\n        continue\n      else\n        break\n    if (a[i] >= b[i])\n      return 1\n    else\n      return 0\n   */\n\n\n  add_numbers = function add_numbers() {\n    var a, b, theResult;\n    a = 1.0;\n    b = 1.0; //if DEBUG then console.log(\"add_numbers adding numbers: \" + print_list(stack[tos - 1]) + \" and \" + print_list(stack[tos - 2]))\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qadd();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    theResult = a + b;\n    push_double(theResult);\n    return restore();\n  };\n\n  subtract_numbers = function subtract_numbers() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qsub();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    push_double(a - b);\n    return restore();\n  };\n\n  multiply_numbers = function multiply_numbers() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qmul();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    push_double(a * b);\n    return restore();\n  };\n\n  divide_numbers = function divide_numbers() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qdiv();\n      return;\n    }\n\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"divide by zero\");\n    }\n\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n\n    push_double(a / b);\n    return restore();\n  };\n\n  invert_number = function invert_number() {\n    var a, b; //unsigned int *a, *b\n\n    save();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p1)) {\n      stop(\"divide by zero\");\n    }\n\n    if (isdouble(p1)) {\n      push_double(1 / p1.d);\n      restore();\n      return;\n    }\n\n    a = bigInt(p1.q.a);\n    b = bigInt(p1.q.b);\n    b = makeSignSameAs(b, a);\n    a = setSignTo(a, 1);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = b;\n    p1.q.b = a;\n    push(p1);\n    return restore();\n  }; // a and b are Us\n\n\n  compare_rationals = function compare_rationals(a, b) {\n    var ab, ba, t;\n    t = 0; //unsigned int *ab, *ba\n\n    ab = mmul(a.q.a, b.q.b);\n    ba = mmul(a.q.b, b.q.a);\n    t = mcmp(ab, ba);\n    return t;\n  }; // a and b are Us\n\n\n  compare_numbers = function compare_numbers(a, b) {\n    var x, y;\n    x = 0.0;\n    y = 0.0;\n\n    if (isrational(a) && isrational(b)) {\n      return compare_rationals(a, b);\n    }\n\n    if (isdouble(a)) {\n      x = a.d;\n    } else {\n      x = convert_rational_to_double(a);\n    }\n\n    if (isdouble(b)) {\n      y = b.d;\n    } else {\n      y = convert_rational_to_double(b);\n    }\n\n    if (x < y) {\n      return -1;\n    }\n\n    if (x > y) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  negate_number = function negate_number() {\n    save();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    switch (p1.k) {\n      case NUM:\n        p2 = new U();\n        p2.k = NUM;\n        p2.q.a = bigInt(p1.q.a.multiply(bigInt.minusOne));\n        p2.q.b = bigInt(p1.q.b);\n        push(p2);\n        break;\n\n      case DOUBLE:\n        push_double(-p1.d);\n        break;\n\n      default:\n        stop(\"bug caught in mp_negate_number\");\n    }\n\n    return restore();\n  };\n\n  bignum_truncate = function bignum_truncate() {\n    var a; //unsigned int *a\n\n    save();\n    p1 = pop();\n    a = mdiv(p1.q.a, p1.q.b);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  mp_numerator = function mp_numerator() {\n    save();\n    p1 = pop();\n\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.a);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  };\n\n  mp_denominator = function mp_denominator() {\n    save();\n    p1 = pop();\n\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.b);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  }; // expo is an integer\n\n\n  bignum_power_number = function bignum_power_number(expo) {\n    var a, b, t; //unsigned int *a, *b, *t\n\n    save();\n    p1 = pop();\n    a = mpow(p1.q.a, Math.abs(expo));\n    b = mpow(p1.q.b, Math.abs(expo));\n\n    if (expo < 0) {\n      // swap a and b\n      t = a;\n      a = b;\n      b = t;\n      a = makeSignSameAs(a, b);\n      b = setSignTo(b, 1);\n    }\n\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = b;\n    push(p1);\n    return restore();\n  }; // p an array of ints\n\n\n  convert_bignum_to_double = function convert_bignum_to_double(p) {\n    return p.toJSNumber();\n  }; // p is a U\n\n\n  convert_rational_to_double = function convert_rational_to_double(p) {\n    var quotientAndRemainder, result;\n\n    if (p.q == null) {\n      debugger;\n    }\n\n    quotientAndRemainder = p.q.a.divmod(p.q.b);\n    result = quotientAndRemainder.quotient + quotientAndRemainder.remainder / p.q.b.toJSNumber();\n    return result;\n  }; // n an integer\n\n\n  new_integer = function new_integer(n) {\n    var theNewInteger;\n    theNewInteger = new U();\n    theNewInteger.k = NUM;\n    theNewInteger.q.a = bigInt(n);\n    theNewInteger.q.b = bigInt(1);\n    return theNewInteger;\n  }; // n an integer\n\n\n  push_integer = function push_integer(n) {\n    if (DEBUG) {\n      console.log(\"pushing integer \" + n);\n    }\n\n    return push(new_integer(n));\n  }; // d a double\n\n\n  push_double = function push_double(d) {\n    save();\n    p1 = new U();\n    p1.k = DOUBLE;\n    p1.d = d;\n    push(p1);\n    return restore();\n  }; // a,b parts of a rational\n\n\n  push_rational = function push_rational(a, b) {\n    /*\n    save()\n    p1 = new U()\n    p1.k = NUM\n    p1.q.a = bigInt(a)\n    p1.q.b = bigInt(b)\n    ## FIXME -- normalize ##\n    push(p1)\n    restore()\n     */\n    var p;\n    p = new U();\n    p.k = NUM;\n    p.q.a = bigInt(a);\n    p.q.b = bigInt(b);\n    return push(p);\n  };\n\n  pop_integer = function pop_integer() {\n    var n;\n    n = 0 / 0;\n    save();\n    p1 = pop();\n\n    switch (p1.k) {\n      case NUM:\n        if (isinteger(p1) && isSmall(p1.q.a)) {\n          n = p1.q.a.toJSNumber();\n        }\n\n        break;\n\n      case DOUBLE:\n        if (DEBUG) {\n          console.log(\"popping integer but double is found\");\n        }\n\n        if (Math.floor(p1.d) === p1.d) {\n          if (DEBUG) {\n            console.log(\"...altough it's an integer\");\n          }\n\n          n = p1.d;\n        }\n\n    }\n\n    restore();\n    return n;\n  }; // p is a U, flag is an int\n\n\n  print_double = function print_double(p, flag) {\n    var accumulator, buf;\n    accumulator = \"\";\n    buf = doubleToReasonableString(p.d);\n\n    if (flag === 1 && buf === '-') {\n      accumulator += print_str(buf + 1);\n    } else {\n      accumulator += print_str(buf);\n    }\n\n    return accumulator;\n  }; // s is a string\n\n\n  bignum_scan_integer = function bignum_scan_integer(s) {\n    var a, scounter, sign_; //unsigned int *a\n    //char sign\n\n    save();\n    scounter = 0;\n    sign_ = s[scounter];\n\n    if (sign_ === '+' || sign_ === '-') {\n      scounter++;\n    } // !!!! some mess in here, added an argument\n\n\n    a = bigInt(s.substring(scounter));\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n\n    if (sign_ === '-') {\n      negate();\n    }\n\n    return restore();\n  }; // s a string\n\n\n  bignum_scan_float = function bignum_scan_float(s) {\n    return push_double(parseFloat(s));\n  }; // gives the capability of printing the unsigned\n  // value. This is handy because printing of the sign\n  // might be taken care of \"upstream\"\n  // e.g. when printing a base elevated to a negative exponent\n  // prints the inverse of the base powered to the unsigned\n  // exponent.\n  // p is a U\n\n\n  print_number = function print_number(p, signed) {\n    var aAsString, accumulator, buf, denominatorString;\n    accumulator = \"\";\n    denominatorString = \"\";\n    buf = \"\";\n\n    switch (p.k) {\n      case NUM:\n        aAsString = p.q.a.toString();\n\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n\n        if (printMode === PRINTMODE_LATEX && isfraction(p)) {\n          aAsString = \"\\\\frac{\" + aAsString + \"}{\";\n        }\n\n        accumulator += aAsString;\n\n        if (isfraction(p)) {\n          if (printMode !== PRINTMODE_LATEX) {\n            accumulator += \"/\";\n          }\n\n          denominatorString = p.q.b.toString();\n\n          if (printMode === PRINTMODE_LATEX) {\n            denominatorString += \"}\";\n          }\n\n          accumulator += denominatorString;\n        }\n\n        break;\n\n      case DOUBLE:\n        aAsString = doubleToReasonableString(p.d);\n\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n\n        accumulator += aAsString;\n    }\n\n    return accumulator;\n  };\n\n  gcd_numbers = function gcd_numbers() {\n    save();\n    p2 = pop();\n    p1 = pop(); //  if (!isinteger(p1) || !isinteger(p2))\n    //    stop(\"integer args expected for gcd\")\n\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mgcd(p1.q.a, p2.q.a);\n    p3.q.b = mgcd(p1.q.b, p2.q.b);\n    p3.q.a = setSignTo(p3.q.a, 1);\n    push(p3);\n    return restore();\n  };\n\n  pop_double = function pop_double() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n\n    switch (p1.k) {\n      case NUM:\n        d = convert_rational_to_double(p1);\n        break;\n\n      case DOUBLE:\n        d = p1.d;\n        break;\n\n      default:\n        d = 0.0;\n    }\n\n    restore();\n    return d;\n  };\n\n  bignum_float = function bignum_float() {\n    var d;\n    d = 0.0;\n    d = convert_rational_to_double(pop());\n    return push_double(d);\n  }; //static unsigned int *__factorial(int)\n  // n is an int\n\n\n  bignum_factorial = function bignum_factorial(n) {\n    save();\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = __factorial(n);\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  }; // n is an int\n\n\n  __factorial = function __factorial(n) {\n    var a, b, i, o, ref, t;\n    i = 0; //unsigned int *a, *b, *t\n\n    if (n === 0 || n === 1) {\n      a = bigInt(1);\n      return a;\n    }\n\n    a = bigInt(2);\n    b = bigInt(0);\n\n    if (3 <= n) {\n      for (i = o = 3, ref = n; 3 <= ref ? o <= ref : o >= ref; i = 3 <= ref ? ++o : --o) {\n        b = bigInt(i);\n        t = mmul(a, b);\n        a = t;\n      }\n    }\n\n    return a;\n  };\n\n  mask = [0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020, 0x00000040, 0x00000080, 0x00000100, 0x00000200, 0x00000400, 0x00000800, 0x00001000, 0x00002000, 0x00004000, 0x00008000, 0x00010000, 0x00020000, 0x00040000, 0x00080000, 0x00100000, 0x00200000, 0x00400000, 0x00800000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000]; // unsigned int *x, unsigned int k\n\n  mp_set_bit = function mp_set_bit(x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] |= mask[k % 32];\n  }; // unsigned int *x, unsigned int k\n\n\n  mp_clr_bit = function mp_clr_bit(x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] &= ~mask[k % 32];\n  }; // unsigned int *a\n\n\n  mshiftright = function mshiftright(a) {\n    return a = a.shiftRight();\n  }; //  Binomial coefficient\n  //  Input:    tos-2    n\n  //      tos-1    k\n  //  Output:    Binomial coefficient on stack\n  //  binomial(n, k) = n! / k! / (n - k)!\n  //  The binomial coefficient vanishes for k < 0 or k > n. (A=B, p. 19)\n\n\n  Eval_binomial = function Eval_binomial() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return binomial();\n  };\n\n  binomial = function binomial() {\n    save();\n    ybinomial();\n    return restore();\n  }; //define N p1\n  //define K p2\n\n\n  ybinomial = function ybinomial() {\n    p2 = pop();\n    p1 = pop();\n\n    if (BINOM_check_args() === 0) {\n      push(zero);\n      return;\n    }\n\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    return divide();\n  };\n\n  BINOM_check_args = function BINOM_check_args() {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  Eval_ceiling = function Eval_ceiling() {\n    push(cadr(p1));\n    Eval();\n    return ceiling();\n  };\n\n  ceiling = function ceiling() {\n    save();\n    yyceiling();\n    return restore();\n  };\n\n  yyceiling = function yyceiling() {\n    var d, doNothing;\n    d = 0.0;\n    p1 = pop();\n\n    if (!isNumericAtom(p1)) {\n      push_symbol(CEILING);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.ceil(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n\n    if (isnegativenumber(p1)) {\n      return doNothing = 1;\n    } else {\n      push_integer(1);\n      return add();\n    }\n  };\n\n  Eval_choose = function Eval_choose() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return choose();\n  }; // Result vanishes for k < 0 or k > n. (A=B, p. 19)\n  //define N p1\n  //define K p2\n\n\n  choose = function choose() {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (choose_check_args() === 0) {\n      push_integer(0);\n      restore();\n      return;\n    }\n\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    divide();\n    return restore();\n  };\n\n  choose_check_args = function choose_check_args() {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  Eval_circexp = function Eval_circexp() {\n    push(cadr(p1));\n    Eval();\n\n    _circexp(); // normalize\n\n\n    return Eval();\n  };\n\n  _circexp = function circexp() {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      expcos();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      expsin();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(TAN)) {\n      p1 = cadr(p1);\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      exponential();\n      p2 = pop();\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      negate();\n      exponential();\n      p3 = pop();\n      push(p3);\n      push(p2);\n      subtract();\n      push(imaginaryunit);\n      multiply();\n      push(p2);\n      push(p3);\n      add();\n      divide();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(COSH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      add();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(SINH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      subtract();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(TANH)) {\n      p1 = cadr(p1);\n      push(p1);\n      push_integer(2);\n      multiply();\n      exponential();\n      p1 = pop();\n      push(p1);\n      push_integer(1);\n      subtract();\n      push(p1);\n      push_integer(1);\n      add();\n      divide();\n      restore();\n      return;\n    }\n\n    if (iscons(p1)) {\n      h = tos;\n\n      while (iscons(p1)) {\n        push(car(p1));\n\n        _circexp();\n\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      restore();\n      return;\n    }\n\n    if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n\n      for (i = o = 0, ref = p1.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n\n        _circexp();\n\n        p1.tensor.elem[i] = pop();\n      }\n\n      push(p1);\n      restore();\n      return;\n    }\n\n    push(p1);\n    return restore();\n  };\n\n  Eval_clearall = function Eval_clearall() {\n    do_clearall();\n    return push(symbol(NIL));\n  };\n\n  do_clearall = function do_clearall() {\n    if (test_flag === 0) {\n      clear_term();\n    }\n\n    do_clearPatterns();\n    clear_symbols();\n    defn();\n    return codeGen = false;\n  }; // clearall from application GUI code\n\n\n  clearall = function clearall() {\n    return run(\"clearall\");\n  }; // this transformation is done in run.coffee, see there\n  // for more info.\n\n\n  clearRenamedVariablesToAvoidBindingToExternalScope = function clearRenamedVariablesToAvoidBindingToExternalScope() {\n    var i, o, ref, results;\n    results = [];\n\n    for (i = o = 0, ref = symtab.length; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (symtab[i].printname.indexOf(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\") !== -1) {\n        // just clear it\n        symtab[i].k = SYM;\n        symtab[i].printname = \"\";\n        binding[i] = symtab[i];\n        results.push(isSymbolReclaimable[i] = true);\n      } else {\n        results.push(void 0);\n      }\n    }\n\n    return results;\n  };\n\n  Eval_clear = function Eval_clear() {\n    var indexFound, variableToBeCleared;\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      variableToBeCleared = car(p2); //console.log variableToBeCleared + \"\"\n\n      if (variableToBeCleared.k !== SYM) {\n        stop(\"symbol error\");\n      } //console.log \"getting binding of \" + p.toString()\n      //if p.toString() == \"aaa\"\n      //  debugger\n\n\n      indexFound = symtab.indexOf(variableToBeCleared);\n      symtab[indexFound].k = SYM;\n      symtab[indexFound].printname = \"\";\n      binding[indexFound] = symtab[indexFound];\n      isSymbolReclaimable[indexFound] = true;\n      p2 = cdr(p2);\n    }\n\n    return push(symbol(NIL));\n  };\n  /*\n   Convert complex z to clock form\n     Input:    push  z\n     Output:    Result on stack\n     clock(z) = abs(z) * (-1) ^ (arg(z) / pi)\n     For example, clock(exp(i pi/3)) gives the result (-1)^(1/3)\n  */\n  // P.S. I couldn't find independent definition/aknowledgment\n  // of the naming \"clock form\" anywhere on the web, seems like a\n  // naming specific to eigenmath.\n  // Clock form is another way to express a complex number, and\n  // it has three advantages\n  //   1) it's uniform with how for example\n  //      i is expressed i.e. (-1)^(1/2)\n  //   2) it's very compact\n  //   3) it's a straighforward notation for roots of 1 and -1\n\n\n  DEBUG_CLOCKFORM = false;\n\n  Eval_clock = function Eval_clock() {\n    push(cadr(p1));\n    Eval();\n    return clockform();\n  };\n\n  clockform = function clockform() {\n    save(); //if 1\n\n    p1 = pop();\n    push(p1);\n    abs();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: abs of \" + p1 + \" : \" + stack[tos - 1]);\n    } // pushing the expression (-1)^... but note\n    // that we can't use \"power\", as \"power\" evaluates\n    // clock forms into rectangular form (see \"-1 ^ rational\"\n    // section in power)\n\n\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p1);\n    arg();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: arg of \" + p1 + \" : \" + stack[tos - 1]);\n    }\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push(symbol(PI));\n    }\n\n    divide();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: divide : \" + stack[tos - 1]);\n    }\n\n    list(3);\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: power : \" + stack[tos - 1]);\n    }\n\n    multiply();\n\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: multiply : \" + stack[tos - 1]);\n    } //else\n\n    /*\n    p1 = pop()\n    push(p1)\n    abs()\n    push(symbol(E))\n    push(p1)\n    arg()\n    push(imaginaryunit)\n    multiply()\n    power()\n    multiply()\n    */\n    //endif\n\n\n    return restore();\n  };\n  /* coeff =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  p,x,n\n   General description\n  -------------------\n  Returns the coefficient of x^n in polynomial p. The x argument can be omitted for polynomials in x.\n   */\n  //define P p1\n  //define X p2\n  //define N p3\n\n\n  Eval_coeff = function Eval_coeff() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n\n    if (p3 === symbol(NIL)) {\n      // p3 is N  # only 2 args?\n      p3 = p2;\n      p2 = symbol(SYMBOL_X); // p2 is X\n    }\n\n    push(p1);\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2);\n    return filter();\n  }; //-----------------------------------------------------------------------------\n  //  Put polynomial coefficients on the stack\n  //  Input:  as per params\n  //  Output:    Returns number of coefficients on stack\n  //      tos-n    Coefficient of x^0\n  //      tos-1    Coefficient of x^(n-1)\n  //-----------------------------------------------------------------------------\n\n\n  coeff = function coeff(variable, polynomial) {\n    var coeffsCount, constant, polynomialWithoutConstant, prev_expanding;\n\n    if (DEBUG) {\n      console.log(\"coeff: \" + variable + \" \" + polynomial);\n    } // works like this:\n    //   1) find the constant (by just evaluating the pol setting the variable to zero)\n    //   2) set aside the found constant: it's one of the coefficients to return\n    //   3) take the polynomial and remove the constant\n    //   4) divide that by variable, lowering the degree by one\n    //   5) go back to 1) until degree is zero\n\n\n    coeffsCount = 0;\n\n    while (true) {\n      push(polynomial);\n      push(variable);\n      push(zero);\n\n      _subst();\n\n      Eval();\n      constant = pop(); // this will be a coefficient that will be returned\n\n      push(constant);\n      coeffsCount++;\n      push(polynomial);\n      push(constant);\n      subtract();\n      polynomialWithoutConstant = pop();\n\n      if (equal(polynomialWithoutConstant, zero)) {\n        if (DEBUG) {\n          console.log(\"coeff: result: \" + coeffsCount);\n        }\n\n        return coeffsCount;\n      }\n\n      push(polynomialWithoutConstant);\n      push(variable);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding; //console.log(\"just divided: \" + stack[tos-1].toString())\n      // this is now the new polynomial with degree decreased by 1\n\n      polynomial = pop();\n    }\n  };\n\n  Eval_cofactor = function Eval_cofactor() {\n    var doNothing, i, j, n;\n    i = 0;\n    j = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n\n    if (istensor(p2) && p2.tensor.ndim === 2 && p2.tensor.dim[0] === p2.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"cofactor: 1st arg: square matrix expected\");\n    }\n\n    n = p2.tensor.dim[0];\n    push(caddr(p1));\n    Eval();\n    i = pop_integer();\n\n    if (i < 1 || i > n) {\n      stop(\"cofactor: 2nd arg: row index expected\");\n    }\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (j < 1 || j > n) {\n      stop(\"cofactor: 3rd arg: column index expected\");\n    }\n\n    return cofactor(p2, n, i - 1, j - 1);\n  };\n\n  cofactor = function cofactor(p, n, row, col) {\n    var i, i1, j, o, ref, ref1;\n    i = 0;\n    j = 0;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i !== row && j !== col) {\n          push(p.tensor.elem[n * i + j]);\n        }\n      }\n    }\n\n    determinant(n - 1);\n\n    if ((row + col) % 2) {\n      return negate();\n    }\n  }; // Condense an expression by factoring common terms.\n\n\n  Eval_condense = function Eval_condense() {\n    push(cadr(p1));\n    Eval();\n    return Condense();\n  };\n\n  Condense = function Condense() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    save();\n    yycondense();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yycondense = function yycondense() {\n    //expanding = 0\n    p1 = pop();\n\n    if (car(p1) !== symbol(ADD)) {\n      push(p1);\n      return;\n    } // get gcd of all terms\n\n\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n\n    while (iscons(p3)) {\n      push(car(p3));\n\n      if (DEBUG) {\n        console.log(\"calculating gcd between: \" + stack[tos - 1] + \" and \" + stack[tos - 2]);\n      }\n\n      gcd();\n\n      if (DEBUG) {\n        console.log(\"partial gcd: \" + stack[tos - 1]);\n      }\n\n      p3 = cdr(p3);\n    }\n\n    if (DEBUG) {\n      console.log(\"condense: this is the gcd of all the terms: \" + stack[tos - 1]);\n    } // divide each term by gcd\n\n\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3)); //multiply()\n\n      multiply_noexpand();\n      add();\n      p3 = cdr(p3);\n    } // We multiplied above w/o expanding so some factors cancelled.\n    // Now we expand which normalizes the result and, in some cases,\n    // simplifies it too (see test case H).\n\n\n    yyexpand(); // multiply result by gcd\n\n    push(p2);\n    return divide();\n  };\n\n  Eval_conj = function Eval_conj() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    push(p1);\n\n    if (!_Find(p1, imaginaryunit)) {\n      // example: (-1)^(1/3)\n      polar();\n      conjugate();\n      return clockform();\n    } else {\n      return conjugate();\n    }\n  }; // careful is you pass this one an expression with\n  // i (instead of (-1)^(1/2)) then this doesn't work!\n\n\n  conjugate = function conjugate() {\n    push(imaginaryunit);\n    push(imaginaryunit);\n    negate();\n\n    _subst();\n\n    return Eval();\n  }; // Cons two things on the stack.\n\n\n  consCount = 0;\n\n  cons = function cons() {\n    var p;\n    consCount++;\n\n    if (DEBUG) {\n      console.log(\"cons tos: \" + tos + \" # \" + consCount);\n    } //if consCount == 444\n    //  debugger\n    // auto var ok, no opportunity for garbage collection after p = alloc()\n\n\n    p = new U();\n    p.k = CONS;\n    p.cons.cdr = pop();\n\n    if (p === p.cons.cdr) {\n      debugger;\n      console.log(\"something wrong p == its cdr\");\n    }\n\n    p.cons.car = pop();\n    /*\n    console.log \"cons new cdr.k = \" + p.cons.cdr.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.cdr\n    console.log \"cons new car.k = \" + p.cons.car.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.car\n    */\n\n    return push(p);\n  };\n\n  Eval_contract = function Eval_contract() {\n    push(cadr(p1));\n    Eval();\n\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n\n    return contract();\n  };\n\n  contract = function contract() {\n    save();\n    yycontract();\n    return restore();\n  };\n\n  yycontract = function yycontract() {\n    var a, ai, an, b, h, i, i1, j, j1, k, l, l1, m, m1, n, n1, ndim, nelem, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    ndim = 0;\n    nelem = 0;\n    ai = [];\n    an = [];\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"contract: tensor expected, 1st arg is not a tensor\");\n      }\n\n      push(zero);\n      return;\n    }\n\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n    ndim = p1.tensor.ndim;\n\n    if (l < 1 || l > ndim || m < 1 || m > ndim || l === m || p1.tensor.dim[l - 1] !== p1.tensor.dim[m - 1]) {\n      stop(\"contract: index out of range\");\n    }\n\n    l--;\n    m--;\n    n = p1.tensor.dim[l]; // nelem is the number of elements in \"b\"\n\n    nelem = 1;\n\n    for (i = o = 0, ref = ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (i !== l && i !== m) {\n        nelem *= p1.tensor.dim[i];\n      }\n    } //console.log \"nelem:\" + nelem\n\n\n    p2 = alloc_tensor(nelem); //console.log \"p2:\" + p2\n\n    p2.tensor.ndim = ndim - 2;\n    j = 0;\n\n    for (i = i1 = 0, ref1 = ndim; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      if (i !== l && i !== m) {\n        p2.tensor.dim[j++] = p1.tensor.dim[i];\n      }\n    }\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem; //console.log \"a: \" + a\n    //console.log \"b: \" + b\n\n    for (i = j1 = 0, ref2 = ndim; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    }\n\n    for (i = l1 = 0, ref3 = nelem; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      push(zero);\n\n      for (j = m1 = 0, ref4 = n; 0 <= ref4 ? m1 < ref4 : m1 > ref4; j = 0 <= ref4 ? ++m1 : --m1) {\n        ai[l] = j;\n        ai[m] = j;\n        h = 0;\n\n        for (k = n1 = 0, ref5 = ndim; 0 <= ref5 ? n1 < ref5 : n1 > ref5; k = 0 <= ref5 ? ++n1 : --n1) {\n          h = h * an[k] + ai[k];\n        }\n\n        push(a[h]); //console.log \"a[h]: \" + a[h]\n\n        add();\n      } //console.log \"tos: \" + stack[tos-1]\n\n\n      b[i] = pop(); //console.log \"b[i]: \" + b[i]\n\n      for (j = o1 = ref6 = ndim - 1; ref6 <= 0 ? o1 <= 0 : o1 >= 0; j = ref6 <= 0 ? ++o1 : --o1) {\n        if (j === l || j === m) {\n          continue;\n        }\n\n        if (++ai[j] < an[j]) {\n          break;\n        }\n\n        ai[j] = 0;\n      }\n    }\n\n    if (nelem === 1) {\n      return push(b[0]);\n    } else {\n      return push(p2);\n    }\n  }; //console.log \"returning: \" + stack[tos-1]\n\n  /* cos =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  x\n   General description\n  -------------------\n  Returns the cosine of x.\n   */\n\n\n  Eval_cos = function Eval_cos() {\n    push(cadr(p1));\n    Eval();\n    return cosine();\n  };\n\n  cosine = function cosine() {\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      cosine_of_angle_sum();\n    } else {\n      cosine_of_angle();\n    }\n\n    return restore();\n  }; // Use angle sum formula for special angles.\n  //define A p3\n  //define B p4\n\n\n  cosine_of_angle_sum = function cosine_of_angle_sum() {\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      p4 = car(p2);\n\n      if (isnpi(p4)) {\n        // p4 is B\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        cosine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        sine();\n        push(p4);\n        sine();\n        multiply();\n        subtract();\n        return;\n      }\n\n      p2 = cdr(p2);\n    }\n\n    return cosine_of_angle();\n  };\n\n  cosine_of_angle = function cosine_of_angle() {\n    var d, n;\n\n    if (car(p1) === symbol(ARCCOS)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.cos(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    } // cosine function is symmetric, cos(-x) = cos(x)\n\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      p1 = pop();\n    } // cos(arctan(x)) = 1 / sqrt(1 + x^2)\n    // see p. 173 of the CRC Handbook of Mathematical Sciences\n\n\n    if (car(p1) === symbol(ARCTAN)) {\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      return;\n    } // multiply by 180/pi to go from radians to degrees.\n    // we go from radians to degrees because it's much\n    // easier to calculate symbolic results of most (not all) \"classic\"\n    // angles (e.g. 30,45,60...) if we calculate the degrees\n    // and the we do a switch on that.\n    // Alternatively, we could look at the fraction of pi\n    // (e.g. 60 degrees is 1/3 pi) but that's more\n    // convoluted as we'd need to look at both numerator and\n    // denominator.\n\n\n    push(p1);\n    push_integer(180);\n    multiply();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    divide();\n    n = pop_integer(); // most \"good\" (i.e. compact) trigonometric results\n    // happen for a round number of degrees. There are some exceptions\n    // though, e.g. 22.5 degrees, which we don't capture here.\n\n    if (n < 0 || isNaN(n)) {\n      push(symbol(COS));\n      push(p1);\n      list(2);\n      return;\n    }\n\n    switch (n % 360) {\n      case 90:\n      case 270:\n        return push_integer(0);\n\n      case 60:\n      case 300:\n        return push_rational(1, 2);\n\n      case 120:\n      case 240:\n        return push_rational(-1, 2);\n\n      case 45:\n      case 315:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 135:\n      case 225:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 30:\n      case 330:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 150:\n      case 210:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 0:\n        return push_integer(1);\n\n      case 180:\n        return push_integer(-1);\n\n      default:\n        push(symbol(COS));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  Eval_cosh = function Eval_cosh() {\n    push(cadr(p1));\n    Eval();\n    return ycosh();\n  };\n\n  ycosh = function ycosh() {\n    save();\n    yycosh();\n    return restore();\n  };\n\n  yycosh = function yycosh() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCCOSH)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.cosh(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n\n    push_symbol(COSH);\n    push(p1);\n    return list(2);\n  }; // this function extract parts subtrees from a tree.\n  // It is used in two\n  // places that have to do with pattern matching.\n  // One is for integrals, where an expression or its\n  // subparts are matched against cases in an\n  // integrals table.\n  // Another one is for applyging tranformation patterns\n  // defined via PATTERN, again patterns are applied to\n  // either the whole expression or any of its parts.\n  // unclear to me at the moment\n  // why this is exposed as something that can\n  // be evalled. Never called.\n\n\n  Eval_decomp = function Eval_decomp() {\n    var h;\n    save();\n    console.log(\"Eval_decomp is being called!!!!!!!!!!!!!!!!!!!!\");\n    h = tos;\n    push(symbol(NIL));\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n\n    _decomp(false);\n\n    list(tos - h);\n    return restore();\n  };\n\n  pushTryNotToDuplicate = function pushTryNotToDuplicate(toBePushed) {\n    if (tos > 0) {\n      if (DEBUG) {\n        console.log(\"comparing \" + toBePushed + \" to: \" + stack[tos - 1]);\n      }\n\n      if (equal(toBePushed, stack[tos - 1])) {\n        if (DEBUG) {\n          console.log(\"skipping \" + toBePushed + \" because it's already on stack \");\n        }\n\n        return;\n      }\n    }\n\n    return push(toBePushed);\n  }; // returns constant expressions on the stack\n\n\n  _decomp = function decomp(generalTransform) {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (DEBUG) {\n      console.log(\"DECOMPOSING \" + p1);\n    } // is the entire expression constant?\n\n\n    if (generalTransform) {\n      if (!iscons(p1)) {\n        if (DEBUG) {\n          console.log(\" ground thing: \" + p1);\n        }\n\n        pushTryNotToDuplicate(p1);\n        restore();\n        return;\n      }\n    } else {\n      if (_Find(p1, p2) === 0) {\n        if (DEBUG) {\n          console.log(\" entire expression is constant\");\n        }\n\n        pushTryNotToDuplicate(p1); //push(p1);  # may need later for pushing both +a, -a\n        //negate()\n\n        restore();\n        return;\n      }\n    } // sum?\n\n\n    if (isadd(p1)) {\n      decomp_sum(generalTransform);\n      restore();\n      return;\n    } // product?\n\n\n    if (ismultiply(p1)) {\n      decomp_product(generalTransform);\n      restore();\n      return;\n    } // naive decomp if not sum or product\n\n\n    if (DEBUG) {\n      console.log(\" naive decomp\");\n    }\n\n    p3 = cdr(p1);\n\n    if (DEBUG) {\n      console.log(\"startig p3: \" + p3);\n    }\n\n    while (iscons(p3)) {\n      // for a general transformations,\n      // we want to match any part of the tree so\n      // we need to push the subtree as well\n      // as recurse to its parts\n      if (generalTransform) {\n        push(car(p3));\n      }\n\n      if (DEBUG) {\n        console.log(\"recursive decomposition\");\n      }\n\n      push(car(p3));\n\n      if (DEBUG) {\n        console.log(\"car(p3): \" + car(p3));\n      }\n\n      push(p2);\n\n      if (DEBUG) {\n        console.log(\"p2: \" + p2);\n      }\n\n      _decomp(generalTransform);\n\n      p3 = cdr(p3);\n    }\n\n    return restore();\n  };\n\n  decomp_sum = function decomp_sum(generalTransform) {\n    var h;\n\n    if (DEBUG) {\n      console.log(\" decomposing the sum \");\n    }\n\n    h = 0; // decomp terms involving x\n\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (_Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n\n        _decomp(generalTransform);\n      }\n\n      p3 = cdr(p3);\n    } // add together all constant terms\n\n\n    h = tos;\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (_Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n\n      p3 = cdr(p3);\n    }\n\n    if (tos - h) {\n      add_all(tos - h);\n      p3 = pop();\n      pushTryNotToDuplicate(p3);\n      push(p3);\n      return negate(); // need both +a, -a for some integrals\n    }\n  };\n\n  decomp_product = function decomp_product(generalTransform) {\n    var h;\n\n    if (DEBUG) {\n      console.log(\" decomposing the product \");\n    }\n\n    h = 0; // decomp factors involving x\n\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (_Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n\n        _decomp(generalTransform);\n      }\n\n      p3 = cdr(p3);\n    } // multiply together all constant factors\n\n\n    h = tos;\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      if (_Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n\n      p3 = cdr(p3);\n    }\n\n    if (tos - h) {\n      return multiply_all(tos - h);\n    }\n  }; //p3 = pop();  # may need later for pushing both +a, -a\n  //push(p3)\n  //push(p3)\n  //negate()\n  // Store a function definition\n  // Example:\n  //      f(x,y)=x^y\n  // For this definition, p1 points to the following structure.\n  //     p1\n  //      |\n  //   ___v__    ______                        ______ \n  //  |CONS  |->|CONS  |--------------------->|CONS  |\n  //  |______|  |______|                      |______|\n  //      |         |                             |\n  //   ___v__    ___v__    ______    ______    ___v__    ______    ______\n  //  |SETQ  |  |CONS  |->|CONS  |->|CONS  |  |CONS  |->|CONS  |->|CONS  |\n  //  |______|  |______|  |______|  |______|  |______|  |______|  |______|\n  //                |         |         |         |         |         |\n  //             ___v__    ___v__    ___v__    ___v__    ___v__    ___v__\n  //            |SYM f |  |SYM x |  |SYM y |  |POWER |  |SYM x |  |SYM y |\n  //            |______|  |______|  |______|  |______|  |______|  |______|\n  // the result (in f) is a FUNCTION node\n  // that contains both the body and the argument list.\n  // We have\n  //  caadr(p1) points to the function name i.e. f\n  //  cdadr(p1) points to the arguments i.e. the list (x y)\n  //  caddr(p1) points to the function body i.e. (power x y)\n  //define F p3 # F points to the function name\n  //define A p4 # A points to the argument list\n  //define B p5 # B points to the function body\n\n\n  define_user_function = function define_user_function() {\n    p3 = caadr(p1);\n    p4 = cdadr(p1);\n    p5 = caddr(p1);\n\n    if (!issymbol(p3)) {\n      // p3 is F\n      stop(\"function name?\");\n    } // evaluate function body (maybe)\n\n\n    if (car(p5) === symbol(EVAL)) {\n      // p5 is B\n      push(cadr(p5));\n      Eval();\n      p5 = pop(); // p5 is B\n    } // note how, unless explicitly forced by an eval,\n    // (handled by the if just above)\n    // we don't eval/simplify\n    // the body.\n    // Why? because it's the easiest way\n    // to solve scope problems i.e.\n    //   x = 0\n    //   f(x) = x + 1\n    //   f(4) # would reply 1\n    // which would need to otherwise\n    // be solved by some scope device\n    // somehow\n\n\n    push_symbol(FUNCTION);\n    push(p5);\n    push(p4);\n    list(3);\n    p5 = pop();\n    set_binding(p3, p5);\n    return push_symbol(NIL);\n  };\n\n  Eval_function_reference = function Eval_function_reference() {\n    return push(p1);\n  };\n  /* defint =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  f,x,a,b[,y,c,d...]\n   General description\n  -------------------\n  Returns the definite integral of f with respect to x evaluated from \"a\" to b.\n  The argument list can be extended for multiple integrals (or \"iterated\n  integrals\"), for example a double integral (which can represent for\n  example a volume under a surface), or a triple integral, etc. For\n  example, defint(f,x,a,b,y,c,d).\n   */\n  //define F p2\n  //define X p3\n  //define A p4\n  //define B p5\n\n\n  Eval_defint = function Eval_defint() {\n    push(cadr(p1));\n    Eval();\n    p2 = pop(); // p2 is F\n\n    p1 = cddr(p1); // defint can handle multiple\n    // integrals, so we loop over the\n    // multiple integrals here\n\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p3 = pop(); // p3 is X\n\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p4 = pop(); // p4 is A\n\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p5 = pop(); // p5 is B\n      // obtain the primitive of F against the\n      // specified variable X\n      // note that the primitive changes over\n      // the calculation of the multiple\n      // integrals.\n\n      push(p2);\n      push(p3);\n      integral();\n      p2 = pop(); // contains the antiderivative of F\n      // evaluate the integral in A\n\n      push(p2);\n      push(p3);\n      push(p5);\n\n      _subst();\n\n      Eval(); // evaluate the integral in B\n\n      push(p2);\n      push(p3);\n      push(p4);\n\n      _subst();\n\n      Eval(); // integral between B and A is the\n      // subtraction. Note that this could\n      // be a number but also a function.\n      // and we might have to integrate this\n      // number/function again doing the while\n      // loop again if this is a multiple\n      // integral.\n\n      subtract();\n      p2 = pop();\n    }\n\n    return push(p2);\n  };\n\n  Eval_degree = function Eval_degree() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n\n    return degree();\n  }; //-----------------------------------------------------------------------------\n  //  Find the degree of a polynomial\n  //  Input:    tos-2    p(x)\n  //      tos-1    x\n  //  Output:    Result on stack\n  //  Note: Finds the largest numerical power of x. Does not check for\n  //  weirdness in p(x).\n  //-----------------------------------------------------------------------------\n  //define POLY p1\n  //define X p2\n  //define DEGREE p3\n\n\n  degree = function degree() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    p3 = zero;\n\n    _yydegree(p1);\n\n    push(p3);\n    return restore();\n  };\n\n  _yydegree = function yydegree(p) {\n    var results;\n\n    if (equal(p, p2)) {\n      if (isZeroAtomOrTensor(p3)) {\n        return p3 = one;\n      }\n    } else if (car(p) === symbol(POWER)) {\n      if (equal(cadr(p), p2) && isNumericAtom(caddr(p)) && lessp(p3, caddr(p))) {\n        return p3 = caddr(p);\n      }\n    } else if (iscons(p)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        _yydegree(car(p));\n\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    }\n  };\n\n  Eval_denominator = function Eval_denominator() {\n    push(cadr(p1));\n    Eval();\n    return _denominator();\n  };\n\n  _denominator = function denominator() {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop(); //console.trace \"denominator of: \" + theArgument\n\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument);\n      rationalize();\n      theArgument = pop();\n    }\n\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument);\n\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n\n        _denominator();\n\n        theArgument = cdr(theArgument);\n      }\n\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_denominator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      push(theArgument);\n      return reciprocate();\n    } else {\n      return push(one);\n    }\n  }; // derivative\n  //define F p3\n  //define X p4\n  //define N p5\n\n\n  Eval_derivative = function Eval_derivative() {\n    var doNothing, i, i1, n, o, ref, ref1; // evaluate 1st arg to get function F\n\n    i = 0;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval(); // evaluate 2nd arg and then...\n    // example  result of 2nd arg  what to do\n    // d(f)    nil      guess X, N = nil\n    // d(f,2)  2      guess X, N = 2\n    // d(f,x)  x      X = x, N = nil\n    // d(f,x,2)  x      X = x, N = 2\n    // d(f,x,y)  x      X = x, N = y\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n\n    while (1) {\n      // p5 (N) might be a symbol instead of a number\n      if (isNumericAtom(p5)) {\n        // p5 is N\n        push(p5);\n        n = pop_integer();\n\n        if (isNaN(n)) {\n          stop(\"nth derivative: check n\");\n        }\n      } else {\n        n = 1;\n      }\n\n      push(p3);\n\n      if (n >= 0) {\n        for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          derivative();\n        }\n      } else {\n        n = -n;\n\n        for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          integral();\n        }\n      }\n\n      p3 = pop();\n\n      if (p5 === symbol(NIL)) {\n        // p5 is N\n        break;\n      } // otherwise...\n      // N    arg1    what to do\n      // number  nil    break\n      // number  number    N = arg1, continue\n      // number  symbol    X = arg1, N = arg2, continue\n      // symbol  nil    X = N, N = nil, continue\n      // symbol  number    X = N, N = arg1, continue\n      // symbol  symbol    X = N, N = arg1, continue\n\n\n      if (isNumericAtom(p5)) {\n        // p5 is N\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n\n        if (p5 === symbol(NIL)) {\n          // p5 is N\n          break; // arglist exhausted\n        }\n\n        if (isNumericAtom(p5)) {\n          // p5 is N\n          doNothing = 1; // N = arg1\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop(); // p5 is N  # N = arg2\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop(); // p5 is N  # N = arg1\n      }\n    }\n\n    return push(p3); // p3 is F # final result\n  };\n\n  derivative = function derivative() {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isNumericAtom(p2)) {\n      stop(\"undefined function\");\n    }\n\n    if (istensor(p1)) {\n      if (istensor(p2)) {\n        d_tensor_tensor();\n      } else {\n        d_tensor_scalar();\n      }\n    } else {\n      if (istensor(p2)) {\n        d_scalar_tensor();\n      } else {\n        d_scalar_scalar();\n      }\n    }\n\n    return restore();\n  };\n\n  d_scalar_scalar = function d_scalar_scalar() {\n    if (issymbol(p2)) {\n      return d_scalar_scalar_1();\n    } else {\n      // Example: d(sin(cos(x)),cos(x))\n      // Replace cos(x) <- X, find derivative, then do X <- cos(x)\n      push(p1);\n      push(p2);\n      push(symbol(SECRETX));\n\n      _subst();\n\n      push(symbol(SECRETX));\n      derivative();\n      push(symbol(SECRETX));\n      push(p2);\n      return _subst(); // cos(X) -> cos(cos(x))\n    }\n  };\n\n  d_scalar_scalar_1 = function d_scalar_scalar_1() {\n    // d(x,x)?\n    if (equal(p1, p2)) {\n      push(one);\n      return;\n    }\n\n    if (!iscons(p1)) {\n      push(zero);\n      return;\n    }\n\n    if (isadd(p1)) {\n      dsum();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      dproduct();\n      return;\n    }\n\n    if (car(p1) === symbol(POWER)) {\n      dpower();\n      return;\n    }\n\n    if (car(p1) === symbol(DERIVATIVE)) {\n      dd();\n      return;\n    }\n\n    if (car(p1) === symbol(LOG)) {\n      dlog();\n      return;\n    }\n\n    if (car(p1) === symbol(SIN)) {\n      dsin();\n      return;\n    }\n\n    if (car(p1) === symbol(COS)) {\n      dcos();\n      return;\n    }\n\n    if (car(p1) === symbol(TAN)) {\n      dtan();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCSIN)) {\n      darcsin();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCCOS)) {\n      darccos();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCTAN)) {\n      darctan();\n      return;\n    }\n\n    if (car(p1) === symbol(SINH)) {\n      dsinh();\n      return;\n    }\n\n    if (car(p1) === symbol(COSH)) {\n      dcosh();\n      return;\n    }\n\n    if (car(p1) === symbol(TANH)) {\n      dtanh();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCSINH)) {\n      darcsinh();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCCOSH)) {\n      darccosh();\n      return;\n    }\n\n    if (car(p1) === symbol(ARCTANH)) {\n      darctanh();\n      return;\n    }\n\n    if (car(p1) === symbol(ABS)) {\n      dabs();\n      return;\n    }\n\n    if (car(p1) === symbol(SGN)) {\n      dsgn();\n      return;\n    }\n\n    if (car(p1) === symbol(HERMITE)) {\n      dhermite();\n      return;\n    }\n\n    if (car(p1) === symbol(ERF)) {\n      derf();\n      return;\n    }\n\n    if (car(p1) === symbol(ERFC)) {\n      derfc();\n      return;\n    }\n\n    if (car(p1) === symbol(BESSELJ)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbesselj0();\n      } else {\n        dbesseljn();\n      }\n\n      return;\n    }\n\n    if (car(p1) === symbol(BESSELY)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbessely0();\n      } else {\n        dbesselyn();\n      }\n\n      return;\n    }\n\n    if (car(p1) === symbol(INTEGRAL) && caddr(p1) === p2) {\n      derivative_of_integral();\n      return;\n    }\n\n    return dfunction();\n  };\n\n  dsum = function dsum() {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      derivative();\n      p1 = cdr(p1);\n    }\n\n    return add_all(tos - h);\n  };\n\n  dproduct = function dproduct() {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = length(p1) - 1;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p3 = cdr(p1);\n\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push(car(p3));\n\n        if (i === j) {\n          push(p2);\n          derivative();\n        }\n\n        p3 = cdr(p3);\n      }\n\n      multiply_all(n);\n    }\n\n    return add_all(n);\n  }; //-----------------------------------------------------------------------------\n  //       v\n  //  y = u\n  //  log y = v log u\n  //  1 dy   v du           dv\n  //  - -- = - -- + (log u) --\n  //  y dx   u dx           dx\n  //  dy    v  v du           dv\n  //  -- = u  (- -- + (log u) --)\n  //  dx       u dx           dx\n  //-----------------------------------------------------------------------------\n\n\n  dpower = function dpower() {\n    push(caddr(p1));\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    push(cadr(p1));\n    logarithm();\n    push(caddr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    add();\n    push(p1);\n    return multiply();\n  };\n\n  dlog = function dlog() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    return divide();\n  }; //  derivative of derivative\n  //  example: d(d(f(x,y),y),x)\n  //  p1 = d(f(x,y),y)\n  //  p2 = x\n  //  cadr(p1) = f(x,y)\n  //  caddr(p1) = y\n\n\n  dd = function dd() {\n    // d(f(x,y),x)\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    p3 = pop();\n\n    if (car(p3) === symbol(DERIVATIVE)) {\n      // sort dx terms\n      push_symbol(DERIVATIVE);\n      push_symbol(DERIVATIVE);\n      push(cadr(p3));\n\n      if (lessp(caddr(p3), caddr(p1))) {\n        push(caddr(p3));\n        list(3);\n        push(caddr(p1));\n      } else {\n        push(caddr(p1));\n        list(3);\n        push(caddr(p3));\n      }\n\n      return list(3);\n    } else {\n      push(p3);\n      push(caddr(p1));\n      return derivative();\n    }\n  }; // derivative of a generic function\n\n\n  dfunction = function dfunction() {\n    p3 = cdr(p1);\n\n    if (p3 === symbol(NIL) || _Find(p3, p2)) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(zero);\n    }\n  };\n\n  dsin = function dsin() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    return multiply();\n  };\n\n  dcos = function dcos() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sine();\n    multiply();\n    return negate();\n  };\n\n  dtan = function dtan() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsin = function darcsin() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccos = function darccos() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    multiply();\n    return negate();\n  }; //        Without simplify  With simplify\n  //  d(arctan(y/x),x)  -y/(x^2*(y^2/x^2+1))  -y/(x^2+y^2)\n  //  d(arctan(y/x),y)  1/(x*(y^2/x^2+1))  x/(x^2+y^2)\n\n\n  darctan = function darctan() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    add();\n    inverse();\n    multiply();\n    return simplify();\n  };\n\n  dsinh = function dsinh() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    return multiply();\n  };\n\n  dcosh = function dcosh() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ysinh();\n    return multiply();\n  };\n\n  dtanh = function dtanh() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsinh = function darcsinh() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccosh = function darccosh() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darctanh = function darctanh() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    inverse();\n    return multiply();\n  };\n\n  dabs = function dabs() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sgn();\n    return multiply();\n  };\n\n  dsgn = function dsgn() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    dirac();\n    multiply();\n    push_integer(2);\n    return multiply();\n  };\n\n  dhermite = function dhermite() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(2);\n    push(caddr(p1));\n    multiply();\n    multiply();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    hermite();\n    return multiply();\n  };\n\n  derf = function derf() {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  derfc = function derfc() {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(-2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  dbesselj0 = function dbesselj0() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesseljn = function dbesseljn() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    besselj();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    besselj();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  dbessely0 = function dbessely0() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesselyn = function dbesselyn() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    bessely();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    bessely();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  derivative_of_integral = function derivative_of_integral() {\n    return push(cadr(p1));\n  };\n\n  DET_check_arg = function DET_check_arg() {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  det = function det() {\n    var a, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0; //U **a\n\n    save();\n    p1 = pop();\n\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    n = p1.tensor.nelem;\n    a = p1.tensor.elem;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isNumericAtom(a[i])) {\n        break;\n      }\n    }\n\n    if (i === n) {\n      yydetg();\n    } else {\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n      }\n\n      determinant(p1.tensor.dim[0]);\n    }\n\n    return restore();\n  }; // determinant of n * n matrix elements on the stack\n\n\n  determinant = function determinant(n) {\n    var a, breakFromOutherWhile, h, i, i1, j, k, o, q, ref, ref1, s, sign_, t;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    q = 0;\n    s = 0;\n    sign_ = 0;\n    t = 0;\n    a = []; //int *a, *c, *d\n\n    h = tos - n * n; //a = (int *) malloc(3 * n * sizeof (int))\n    //if (a == NULL)\n    //  out_of_memory()\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      a[i] = i;\n      a[i + n] = 0;\n      a[i + n + n] = 1;\n    }\n\n    sign_ = 1;\n    push(zero);\n\n    while (1) {\n      if (sign_ === 1) {\n        push_integer(1);\n      } else {\n        push_integer(-1);\n      }\n\n      for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        k = n * a[i] + i;\n        push(stack[h + k]);\n        multiply(); // FIXME -- problem here\n      }\n\n      add(); // next permutation (Knuth's algorithm P)\n\n      j = n - 1;\n      s = 0;\n      breakFromOutherWhile = false;\n\n      while (1) {\n        q = a[n + j] + a[n + n + j];\n\n        if (q < 0) {\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n\n        if (q === j + 1) {\n          if (j === 0) {\n            breakFromOutherWhile = true;\n            break;\n          }\n\n          s++;\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n\n        break;\n      }\n\n      if (breakFromOutherWhile) {\n        break;\n      }\n\n      t = a[j - a[n + j] + s];\n      a[j - a[n + j] + s] = a[j - q + s];\n      a[j - q + s] = t;\n      a[n + j] = q;\n      sign_ = -sign_;\n    }\n\n    stack[h] = stack[tos - 1];\n    return moveTos(h + 1);\n  }; //-----------------------------------------------------------------------------\n  //  Input:    Matrix on stack\n  //  Output:    Determinant on stack\n  //  Note:\n  //  Uses Gaussian elimination which is faster for numerical matrices.\n  //  Gaussian Elimination works by walking down the diagonal and clearing\n  //  out the columns below it.\n  //-----------------------------------------------------------------------------\n\n\n  detg = function detg() {\n    save();\n    p1 = pop();\n\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    yydetg();\n    return restore();\n  };\n\n  yydetg = function yydetg() {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n\n    for (i = o = 0, ref = n * n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p1.tensor.elem[i]);\n    }\n\n    lu_decomp(n);\n    moveTos(tos - n * n);\n    return push(p1);\n  }; //-----------------------------------------------------------------------------\n  //  Input:    n * n matrix elements on stack\n  //  Output:    p1  determinant\n  //      p2  mangled\n  //      upper diagonal matrix on stack\n  //-----------------------------------------------------------------------------\n\n\n  M = function M(h, n, i, j) {\n    return stack[h + n * i + j];\n  };\n\n  setM = function setM(h, n, i, j, value) {\n    return stack[h + n * i + j] = value;\n  };\n\n  lu_decomp = function lu_decomp(n) {\n    var d, h, i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;\n    d = 0;\n    h = 0;\n    i = 0;\n    j = 0;\n    h = tos - n * n;\n    p1 = one;\n\n    for (d = o = 0, ref = n - 1; 0 <= ref ? o < ref : o > ref; d = 0 <= ref ? ++o : --o) {\n      // diagonal element zero?\n      if (equal(M(h, n, d, d), zero)) {\n        // find a new row\n        for (i = i1 = ref1 = d + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(M(h, n, i, d), zero)) {\n            break;\n          }\n        }\n\n        if (i === n) {\n          p1 = zero;\n          break;\n        } // exchange rows\n\n\n        for (j = j1 = ref3 = d, ref4 = n; ref3 <= ref4 ? j1 < ref4 : j1 > ref4; j = ref3 <= ref4 ? ++j1 : --j1) {\n          p2 = M(h, n, d, j);\n          setM(h, n, d, j, M(h, n, i, j));\n          setM(h, n, i, j, p2);\n        } // negate det\n\n\n        push(p1);\n        negate();\n        p1 = pop();\n      } // update det\n\n\n      push(p1);\n      push(M(h, n, d, d));\n      multiply();\n      p1 = pop(); // update lower diagonal matrix\n\n      for (i = l1 = ref5 = d + 1, ref6 = n; ref5 <= ref6 ? l1 < ref6 : l1 > ref6; i = ref5 <= ref6 ? ++l1 : --l1) {\n        // multiplier\n        push(M(h, n, i, d));\n        push(M(h, n, d, d));\n        divide();\n        negate();\n        p2 = pop(); // update one row\n\n        setM(h, n, i, d, zero);\n\n        for (j = m1 = ref7 = d + 1, ref8 = n; ref7 <= ref8 ? m1 < ref8 : m1 > ref8; j = ref7 <= ref8 ? ++m1 : --m1) {\n          push(M(h, n, d, j));\n          push(p2);\n          multiply();\n          push(M(h, n, i, j));\n          add();\n          setM(h, n, i, j, pop());\n        }\n      }\n    } // last diagonal element\n\n\n    push(p1);\n    push(M(h, n, n - 1, n - 1));\n    multiply();\n    return p1 = pop();\n  }; //-----------------------------------------------------------------------------\n  //  Author : philippe.billet@noos.fr\n  //  Dirac function dirac(x)\n  //  dirac(-x)=dirac(x)\n  //  dirac(b-a)=dirac(a-b)\n  //-----------------------------------------------------------------------------\n\n\n  Eval_dirac = function Eval_dirac() {\n    push(cadr(p1));\n    Eval();\n    return dirac();\n  };\n\n  dirac = function dirac() {\n    save();\n    ydirac();\n    return restore();\n  }; //define p1 p1\n\n\n  ydirac = function ydirac() {\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      if (p1.d === 0) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n\n    if (isrational(p1)) {\n      if (MZERO(mmul(p1.q.a, p1.q.b))) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n\n    if (car(p1) === symbol(POWER)) {\n      push_symbol(DIRAC);\n      push(cadr(p1));\n      list(2);\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      push_symbol(DIRAC);\n      push(p1);\n      negate();\n      list(2);\n      return;\n    }\n\n    if (isnegativeterm(p1) || car(p1) === symbol(ADD) && isnegativeterm(cadr(p1))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n\n    push_symbol(DIRAC);\n    push(p1);\n    return list(2);\n  }; //-----------------------------------------------------------------------------\n  //  Generate all divisors of a term\n  //  Input:    Term on stack (factor * factor * ...)\n  //  Output:    Divisors on stack\n  //-----------------------------------------------------------------------------\n\n\n  divisors = function divisors() {\n    var h, i, n, o, ref, subsetOfStack;\n    i = 0;\n    h = 0;\n    n = 0;\n    save();\n    h = tos - 1;\n    divisors_onstack();\n    n = tos - h; //qsort(stack + h, n, sizeof (U *), __cmp)\n\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(_cmp_expr);\n    stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(h);\n    push(p1);\n    return restore();\n  };\n\n  divisors_onstack = function divisors_onstack() {\n    var h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    h = tos; // push all of the term's factors\n\n    if (isNumericAtom(p1)) {\n      push(p1);\n      factor_small_number();\n    } else if (car(p1) === symbol(ADD)) {\n      push(p1);\n\n      __factor_add(); //printf(\">>>\\n\")\n      //for (i = h; i < tos; i++)\n      //print(stdout, stack[i])\n      //printf(\"<<<\\n\")\n\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      if (isNumericAtom(car(p1))) {\n        push(car(p1));\n        factor_small_number();\n        p1 = cdr(p1);\n      }\n\n      while (iscons(p1)) {\n        p2 = car(p1);\n\n        if (car(p2) === symbol(POWER)) {\n          push(cadr(p2));\n          push(caddr(p2));\n        } else {\n          push(p2);\n          push(one);\n        }\n\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(POWER)) {\n      push(cadr(p1));\n      push(caddr(p1));\n    } else {\n      push(p1);\n      push(one);\n    }\n\n    k = tos; // contruct divisors by recursive descent\n\n    push(one);\n\n    _gen(h, k); // move\n\n\n    n = tos - k;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      stack[h + i] = stack[k + i];\n    }\n\n    moveTos(h + n);\n    return restore();\n  }; //-----------------------------------------------------------------------------\n  //  Generate divisors\n  //  Input:    Base-exponent pairs on stack\n  //      h  first pair\n  //      k  just past last pair\n  //  Output:    Divisors on stack\n  //  For example, factor list 2 2 3 1 results in 6 divisors,\n  //    1\n  //    3\n  //    2\n  //    6\n  //    4\n  //    12\n  //-----------------------------------------------------------------------------\n  //define ACCUM p1\n  //define BASE p2\n  //define EXPO p3\n\n\n  _gen = function gen(h, k) {\n    var expo, i, o, ref;\n    expo = 0;\n    i = 0;\n    save();\n    p1 = pop();\n\n    if (h === k) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    p2 = stack[h + 0];\n    p3 = stack[h + 1];\n    push(p3);\n    expo = pop_integer();\n\n    if (!isNaN(expo)) {\n      for (i = o = 0, ref = Math.abs(expo); 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n        push(p1);\n        push(p2);\n        push_integer(sign(expo) * i);\n        power();\n        multiply();\n\n        _gen(h + 2, k);\n      }\n    }\n\n    return restore();\n  }; //-----------------------------------------------------------------------------\n  //  Factor ADD expression\n  //  Input:    Expression on stack\n  //  Output:    Factors on stack\n  //  Each factor consists of two expressions, the factor itself followed\n  //  by the exponent.\n  //-----------------------------------------------------------------------------\n\n\n  __factor_add = function __factor_add() {\n    save();\n    p1 = pop(); // get gcd of all terms\n\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    } // check gcd\n\n\n    p2 = pop();\n\n    if (isplusone(p2)) {\n      push(p1);\n      push(one);\n      restore();\n      return;\n    } // push factored gcd\n\n\n    if (isNumericAtom(p2)) {\n      push(p2);\n      factor_small_number();\n    } else if (car(p2) === symbol(MULTIPLY)) {\n      p3 = cdr(p2);\n\n      if (isNumericAtom(car(p3))) {\n        push(car(p3));\n        factor_small_number();\n      } else {\n        push(car(p3));\n        push(one);\n      }\n\n      p3 = cdr(p3);\n\n      while (iscons(p3)) {\n        push(car(p3));\n        push(one);\n        p3 = cdr(p3);\n      }\n    } else {\n      push(p2);\n      push(one);\n    } // divide each term by gcd\n\n\n    push(p2);\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3));\n      multiply();\n      add();\n      p3 = cdr(p3);\n    }\n\n    push(one);\n    return restore();\n  }; // power function for double precision floating point\n\n\n  dpow = function dpow() {\n    var a, b, base, expo, result, theta;\n    a = 0.0;\n    b = 0.0;\n    base = 0.0;\n    expo = 0.0;\n    result = 0.0;\n    theta = 0.0;\n    expo = pop_double();\n    base = pop_double(); // divide by zero?\n\n    if (base === 0.0 && expo < 0.0) {\n      stop(\"divide by zero\");\n    } // nonnegative base or integer power?\n\n\n    if (base >= 0.0 || expo % 1.0 === 0.0) {\n      result = Math.pow(base, expo);\n      push_double(result);\n      return;\n    }\n\n    result = Math.pow(Math.abs(base), expo);\n    theta = Math.PI * expo; // this ensures the real part is 0.0 instead of a tiny fraction\n\n    if (expo % 0.5 === 0.0) {\n      a = 0.0;\n      b = Math.sin(theta);\n    } else {\n      a = Math.cos(theta);\n      b = Math.sin(theta);\n    }\n\n    push_double(a * result);\n    push_double(b * result);\n    push(imaginaryunit);\n    multiply();\n    return add();\n  };\n  /* eigen =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  m\n   General description\n  -------------------\n  Compute eigenvalues and eigenvectors. Matrix m must be both numerical and symmetric.\n  The eigenval function returns a matrix with the eigenvalues along the diagonal.\n  The eigenvec function returns a matrix with the eigenvectors arranged as row vectors.\n  The eigen function does not return anything but stores the eigenvalue matrix in D\n  and the eigenvector matrix in Q.\n   Input:    stack[tos - 1]    symmetric matrix\n   Output:    D      diagnonal matrix\n        Q      eigenvector matrix\n   D and Q have the property that\n     A == dot(transpose(Q),D,Q)\n   where A is the original matrix.\n   The eigenvalues are on the diagonal of D.\n  The eigenvectors are row vectors in Q.\n   The eigenvalue relation:\n     A X = lambda X\n   can be checked as follows:\n     lambda = D[1,1]\n    X = Q[1]\n    dot(A,X) - lambda X\n   Example 1. Check the relation AX = lambda X where lambda is an eigenvalue and X is the associated eigenvector.\n   Enter:\n        A = hilbert(3)\n        eigen(A)\n        lambda = D[1,1]\n        X = Q[1]\n        dot(A,X) - lambda X\n   Result:\n        -1.16435e-14\n        -6.46705e-15\n        -4.55191e-15\n   Example 2: Check the relation A = QTDQ.\n   Enter:\n     A - dot(transpose(Q),D,Q)\n   Result: \n     6.27365e-12    -1.58236e-11   1.81902e-11\n     -1.58236e-11   -1.95365e-11   2.56514e-12\n     1.81902e-11    2.56514e-12    1.32627e-11\n   */\n  //define D(i, j) yydd[EIG_N * (i) + (j)]\n  //define Q(i, j) yyqq[EIG_N * (i) + (j)]\n\n\n  EIG_N = 0;\n  EIG_yydd = [];\n  EIG_yyqq = [];\n\n  Eval_eigen = function Eval_eigen() {\n    if (EIG_check_arg() === 0) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n\n    eigen(EIGEN);\n    p1 = usr_symbol(\"D\");\n    set_binding(p1, p2);\n    p1 = usr_symbol(\"Q\");\n    set_binding(p1, p3);\n    return push(symbol(NIL));\n  };\n\n  Eval_eigenval = function Eval_eigenval() {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVAL);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    eigen(EIGENVAL);\n    return push(p2);\n  };\n\n  Eval_eigenvec = function Eval_eigenvec() {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVEC);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    eigen(EIGENVEC);\n    return push(p3);\n  };\n\n  EIG_check_arg = function EIG_check_arg() {\n    var i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    push(cadr(p1));\n    Eval();\n\n    _yyfloat();\n\n    Eval();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      return 0;\n    }\n\n    if (p1.tensor.ndim !== 2 || p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n\n    EIG_N = p1.tensor.dim[0];\n\n    for (i = o = 0, ref = EIG_N; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (!isdouble(p1.tensor.elem[EIG_N * i + j])) {\n          stop(\"eigen: matrix is not numerical\");\n        }\n      }\n    }\n\n    for (i = j1 = 0, ref2 = EIG_N - 1; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; ref3 <= ref4 ? l1 < ref4 : l1 > ref4; j = ref3 <= ref4 ? ++l1 : --l1) {\n        if (Math.abs(p1.tensor.elem[EIG_N * i + j].d - p1.tensor.elem[EIG_N * j + i].d) > 1e-10) {\n          stop(\"eigen: matrix is not symmetrical\");\n        }\n      }\n    }\n\n    return 1;\n  }; //-----------------------------------------------------------------------------\n  //  Input:    p1    matrix\n  //  Output:    p2    eigenvalues\n  //      p3    eigenvectors\n  //-----------------------------------------------------------------------------\n\n\n  eigen = function eigen(op) {\n    var i, i1, j, j1, l1, m1, n1, o, o1, q1, r1, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s1;\n    i = 0;\n    j = 0; // malloc working vars\n    //EIG_yydd = (double *) malloc(n * n * sizeof (double))\n\n    for (i = o = 0, ref = EIG_N * EIG_N; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      EIG_yydd[i] = 0.0;\n    } //if (EIG_yydd == NULL)\n    //  stop(\"malloc failure\")\n    //EIG_yyqq = (double *) malloc(n * n * sizeof (double))\n\n\n    for (i = i1 = 0, ref1 = EIG_N * EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      EIG_yyqq[i] = 0.0;\n    } //if (EIG_yyqq == NULL)\n    //  stop(\"malloc failure\")\n    // initialize D\n\n\n    for (i = j1 = 0, ref2 = EIG_N; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      EIG_yydd[EIG_N * i + i] = p1.tensor.elem[EIG_N * i + i].d;\n\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; ref3 <= ref4 ? l1 < ref4 : l1 > ref4; j = ref3 <= ref4 ? ++l1 : --l1) {\n        EIG_yydd[EIG_N * i + j] = p1.tensor.elem[EIG_N * i + j].d;\n        EIG_yydd[EIG_N * j + i] = p1.tensor.elem[EIG_N * i + j].d;\n      }\n    } // initialize Q\n\n\n    for (i = m1 = 0, ref5 = EIG_N; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n      EIG_yyqq[EIG_N * i + i] = 1.0;\n\n      for (j = n1 = ref6 = i + 1, ref7 = EIG_N; ref6 <= ref7 ? n1 < ref7 : n1 > ref7; j = ref6 <= ref7 ? ++n1 : --n1) {\n        EIG_yyqq[EIG_N * i + j] = 0.0;\n        EIG_yyqq[EIG_N * j + i] = 0.0;\n      }\n    } // step up to 100 times\n\n\n    for (i = o1 = 0; o1 < 100; i = ++o1) {\n      if (step() === 0) {\n        break;\n      }\n    }\n\n    if (i === 100) {\n      printstr(\"\\nnote: eigen did not converge\\n\");\n    } // p2 = D\n\n\n    if (op === EIGEN || op === EIGENVAL) {\n      push(p1);\n      copy_tensor();\n      p2 = pop();\n\n      for (i = q1 = 0, ref8 = EIG_N; 0 <= ref8 ? q1 < ref8 : q1 > ref8; i = 0 <= ref8 ? ++q1 : --q1) {\n        for (j = r1 = 0, ref9 = EIG_N; 0 <= ref9 ? r1 < ref9 : r1 > ref9; j = 0 <= ref9 ? ++r1 : --r1) {\n          push_double(EIG_yydd[EIG_N * i + j]);\n          p2.tensor.elem[EIG_N * i + j] = pop();\n        }\n      }\n    } // p3 = Q\n\n\n    if (op === EIGEN || op === EIGENVEC) {\n      push(p1);\n      copy_tensor();\n      p3 = pop();\n      results = [];\n\n      for (i = s1 = 0, ref10 = EIG_N; 0 <= ref10 ? s1 < ref10 : s1 > ref10; i = 0 <= ref10 ? ++s1 : --s1) {\n        results.push(function () {\n          var ref11, results1, t1;\n          results1 = [];\n\n          for (j = t1 = 0, ref11 = EIG_N; 0 <= ref11 ? t1 < ref11 : t1 > ref11; j = 0 <= ref11 ? ++t1 : --t1) {\n            push_double(EIG_yyqq[EIG_N * i + j]);\n            results1.push(p3.tensor.elem[EIG_N * i + j] = pop());\n          }\n\n          return results1;\n        }());\n      }\n\n      return results;\n    }\n  }; // free working vars\n  //-----------------------------------------------------------------------------\n  //  Example: p = 1, q = 3\n  //    c  0  s  0\n  //    0  1  0  0\n  //  G =\n  //    -s  0  c  0\n  //    0  0  0  1\n  //  The effect of multiplying G times A is...\n  //  row 1 of A    = c (row 1 of A ) + s (row 3 of A )\n  //            n+1                n                 n\n  //  row 3 of A    = c (row 3 of A ) - s (row 1 of A )\n  //            n+1                n                 n\n  //  In terms of components the overall effect is...\n  //  row 1 = c row 1 + s row 3\n  //    A[1,1] = c A[1,1] + s A[3,1]\n  //    A[1,2] = c A[1,2] + s A[3,2]\n  //    A[1,3] = c A[1,3] + s A[3,3]\n  //    A[1,4] = c A[1,4] + s A[3,4]\n  //  row 3 = c row 3 - s row 1\n  //    A[3,1] = c A[3,1] - s A[1,1]\n  //    A[3,2] = c A[3,2] - s A[1,2]\n  //    A[3,3] = c A[3,3] - s A[1,3]\n  //    A[3,4] = c A[3,4] - s A[1,4]\n  //                                     T\n  //  The effect of multiplying A times G  is...\n  //  col 1 of A    = c (col 1 of A ) + s (col 3 of A )\n  //            n+1                n                 n\n  //  col 3 of A    = c (col 3 of A ) - s (col 1 of A )\n  //            n+1                n                 n\n  //  In terms of components the overall effect is...\n  //  col 1 = c col 1 + s col 3\n  //    A[1,1] = c A[1,1] + s A[1,3]\n  //    A[2,1] = c A[2,1] + s A[2,3]\n  //    A[3,1] = c A[3,1] + s A[3,3]\n  //    A[4,1] = c A[4,1] + s A[4,3]\n  //  col 3 = c col 3 - s col 1\n  //    A[1,3] = c A[1,3] - s A[1,1]\n  //    A[2,3] = c A[2,3] - s A[2,1]\n  //    A[3,3] = c A[3,3] - s A[3,1]\n  //    A[4,3] = c A[4,3] - s A[4,1]\n  //  What we want to do is just compute the upper triangle of A since we\n  //  know the lower triangle is identical.\n  //  In other words, we just want to update components A[i,j] where i < j.\n  //-----------------------------------------------------------------------------\n  //  Example: p = 2, q = 5\n  //        p      q\n  //      j=1  j=2  j=3  j=4  j=5  j=6\n  //    i=1  .  A[1,2]  .  .  A[1,5]  .\n  //  p  i=2  A[2,1]  A[2,2]  A[2,3]  A[2,4]  A[2,5]  A[2,6]\n  //    i=3  .  A[3,2]  .  .  A[3,5]  .\n  //    i=4  .  A[4,2]  .  .  A[4,5]  .\n  //  q  i=5  A[5,1]  A[5,2]  A[5,3]  A[5,4]  A[5,5]  A[5,6]\n  //    i=6  .  A[6,2]  .  .  A[6,5]  .\n  //-----------------------------------------------------------------------------\n  //  This is what B = GA does:\n  //  row 2 = c row 2 + s row 5\n  //    B[2,1] = c * A[2,1] + s * A[5,1]\n  //    B[2,2] = c * A[2,2] + s * A[5,2]\n  //    B[2,3] = c * A[2,3] + s * A[5,3]\n  //    B[2,4] = c * A[2,4] + s * A[5,4]\n  //    B[2,5] = c * A[2,5] + s * A[5,5]\n  //    B[2,6] = c * A[2,6] + s * A[5,6]\n  //  row 5 = c row 5 - s row 2\n  //    B[5,1] = c * A[5,1] + s * A[2,1]\n  //    B[5,2] = c * A[5,2] + s * A[2,2]\n  //    B[5,3] = c * A[5,3] + s * A[2,3]\n  //    B[5,4] = c * A[5,4] + s * A[2,4]\n  //    B[5,5] = c * A[5,5] + s * A[2,5]\n  //    B[5,6] = c * A[5,6] + s * A[2,6]\n  //                 T\n  //  This is what BG  does:\n  //  col 2 = c col 2 + s col 5\n  //    B[1,2] = c * A[1,2] + s * A[1,5]\n  //    B[2,2] = c * A[2,2] + s * A[2,5]\n  //    B[3,2] = c * A[3,2] + s * A[3,5]\n  //    B[4,2] = c * A[4,2] + s * A[4,5]\n  //    B[5,2] = c * A[5,2] + s * A[5,5]\n  //    B[6,2] = c * A[6,2] + s * A[6,5]\n  //  col 5 = c col 5 - s col 2\n  //    B[1,5] = c * A[1,5] - s * A[1,2]\n  //    B[2,5] = c * A[2,5] - s * A[2,2]\n  //    B[3,5] = c * A[3,5] - s * A[3,2]\n  //    B[4,5] = c * A[4,5] - s * A[4,2]\n  //    B[5,5] = c * A[5,5] - s * A[5,2]\n  //    B[6,5] = c * A[6,5] - s * A[6,2]\n  //-----------------------------------------------------------------------------\n  //  Step 1: Just do upper triangle (i < j), B[2,5] = 0\n  //    B[1,2] = c * A[1,2] + s * A[1,5]\n  //    B[2,3] = c * A[2,3] + s * A[5,3]\n  //    B[2,4] = c * A[2,4] + s * A[5,4]\n  //    B[2,6] = c * A[2,6] + s * A[5,6]\n  //    B[1,5] = c * A[1,5] - s * A[1,2]\n  //    B[3,5] = c * A[3,5] - s * A[3,2]\n  //    B[4,5] = c * A[4,5] - s * A[4,2]\n  //    B[5,6] = c * A[5,6] + s * A[2,6]\n  //-----------------------------------------------------------------------------\n  //  Step 2: Transpose where i > j since A[i,j] == A[j,i]\n  //    B[1,2] = c * A[1,2] + s * A[1,5]\n  //    B[2,3] = c * A[2,3] + s * A[3,5]\n  //    B[2,4] = c * A[2,4] + s * A[4,5]\n  //    B[2,6] = c * A[2,6] + s * A[5,6]\n  //    B[1,5] = c * A[1,5] - s * A[1,2]\n  //    B[3,5] = c * A[3,5] - s * A[2,3]\n  //    B[4,5] = c * A[4,5] - s * A[2,4]\n  //    B[5,6] = c * A[5,6] + s * A[2,6]\n  //-----------------------------------------------------------------------------\n  //  Step 3: Same as above except reorder\n  //  k < p    (k = 1)\n  //    A[1,2] = c * A[1,2] + s * A[1,5]\n  //    A[1,5] = c * A[1,5] - s * A[1,2]\n  //  p < k < q  (k = 3..4)\n  //    A[2,3] = c * A[2,3] + s * A[3,5]\n  //    A[3,5] = c * A[3,5] - s * A[2,3]\n  //    A[2,4] = c * A[2,4] + s * A[4,5]\n  //    A[4,5] = c * A[4,5] - s * A[2,4]\n  //  q < k    (k = 6)\n  //    A[2,6] = c * A[2,6] + s * A[5,6]\n  //    A[5,6] = c * A[5,6] - s * A[2,6]\n  //-----------------------------------------------------------------------------\n\n\n  step = function step() {\n    var count, i, i1, j, o, ref, ref1, ref2;\n    i = 0;\n    j = 0;\n    count = 0; // for each upper triangle \"off-diagonal\" component do step2\n\n    for (i = o = 0, ref = EIG_N - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = ref1 = i + 1, ref2 = EIG_N; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (EIG_yydd[EIG_N * i + j] !== 0.0) {\n          step2(i, j);\n          count++;\n        }\n      }\n    }\n\n    return count;\n  };\n\n  step2 = function step2(p, q) {\n    var c, cc, i1, j1, k, o, ref, ref1, ref2, s, ss, t, theta;\n    k = 0;\n    t = 0.0;\n    theta = 0.0;\n    c = 0.0;\n    cc = 0.0;\n    s = 0.0;\n    ss = 0.0; // compute c and s\n    // from Numerical Recipes (except they have a_qq - a_pp)\n\n    theta = 0.5 * (EIG_yydd[EIG_N * p + p] - EIG_yydd[EIG_N * q + q]) / EIG_yydd[EIG_N * p + q];\n    t = 1.0 / (Math.abs(theta) + Math.sqrt(theta * theta + 1.0));\n\n    if (theta < 0.0) {\n      t = -t;\n    }\n\n    c = 1.0 / Math.sqrt(t * t + 1.0);\n    s = t * c; // D = GD\n    // which means \"add rows\"\n\n    for (k = o = 0, ref = EIG_N; 0 <= ref ? o < ref : o > ref; k = 0 <= ref ? ++o : --o) {\n      cc = EIG_yydd[EIG_N * p + k];\n      ss = EIG_yydd[EIG_N * q + k];\n      EIG_yydd[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yydd[EIG_N * q + k] = c * ss - s * cc;\n    } // D = D transpose(G)\n    // which means \"add columns\"\n\n\n    for (k = i1 = 0, ref1 = EIG_N; 0 <= ref1 ? i1 < ref1 : i1 > ref1; k = 0 <= ref1 ? ++i1 : --i1) {\n      cc = EIG_yydd[EIG_N * k + p];\n      ss = EIG_yydd[EIG_N * k + q];\n      EIG_yydd[EIG_N * k + p] = c * cc + s * ss;\n      EIG_yydd[EIG_N * k + q] = c * ss - s * cc;\n    } // Q = GQ\n    // which means \"add rows\"\n\n\n    for (k = j1 = 0, ref2 = EIG_N; 0 <= ref2 ? j1 < ref2 : j1 > ref2; k = 0 <= ref2 ? ++j1 : --j1) {\n      cc = EIG_yyqq[EIG_N * p + k];\n      ss = EIG_yyqq[EIG_N * q + k];\n      EIG_yyqq[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yyqq[EIG_N * q + k] = c * ss - s * cc;\n    }\n\n    EIG_yydd[EIG_N * p + q] = 0.0;\n    return EIG_yydd[EIG_N * q + p] = 0.0;\n  };\n\n  Eval_erf = function Eval_erf() {\n    push(cadr(p1));\n    Eval();\n    return yerf();\n  };\n\n  yerf = function yerf() {\n    save();\n    yyerf();\n    return restore();\n  };\n\n  yyerf = function yyerf() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      d = 1.0 - erfc(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      push_symbol(ERF);\n      push(p1);\n      negate();\n      list(2);\n      negate();\n      return;\n    }\n\n    push_symbol(ERF);\n    push(p1);\n    list(2);\n  }; //-----------------------------------------------------------------------------\n  //  Author : philippe.billet@noos.fr\n  //  erfc(x)\n  //  GW  Added erfc() from Numerical Recipes in C\n  //-----------------------------------------------------------------------------\n\n\n  Eval_erfc = function Eval_erfc() {\n    push(cadr(p1));\n    Eval();\n    return yerfc();\n  };\n\n  yerfc = function yerfc() {\n    save();\n    yyerfc();\n    return restore();\n  };\n\n  yyerfc = function yyerfc() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      d = erfc(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n\n    push_symbol(ERFC);\n    push(p1);\n    list(2);\n  }; // from Numerical Recipes in C\n\n\n  erfc = function erfc(x) {\n    var ans, t, z;\n\n    if (x === 0) {\n      return 1.0;\n    }\n\n    t = 0.0;\n    z = 0.0;\n    ans = 0.0;\n    z = Math.abs(x);\n    t = 1.0 / (1.0 + 0.5 * z);\n    ans = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n\n    if (x >= 0.0) {\n      return ans;\n    } else {\n      return 2.0 - ans;\n    }\n  }; // Evaluate an expression, for example...\n  //  push(p1)\n  //  Eval()\n  //  p2 = pop()\n\n\n  Eval = function Eval() {\n    var willEvaluateAsFloats;\n    check_esc_flag();\n    save();\n    p1 = pop();\n\n    if (p1 == null) {\n      debugger;\n    }\n\n    if (!evaluatingAsFloats && _isfloating(p1)) {\n      willEvaluateAsFloats = true;\n      evaluatingAsFloats++;\n    }\n\n    switch (p1.k) {\n      case CONS:\n        Eval_cons();\n        break;\n\n      case NUM:\n        if (evaluatingAsFloats) {\n          push_double(convert_rational_to_double(p1));\n        } else {\n          push(p1);\n        }\n\n        break;\n\n      case DOUBLE:\n      case STR:\n        push(p1);\n        break;\n\n      case TENSOR:\n        Eval_tensor();\n        break;\n\n      case SYM:\n        Eval_sym();\n        break;\n\n      default:\n        stop(\"atom?\");\n    }\n\n    if (willEvaluateAsFloats) {\n      evaluatingAsFloats--;\n    }\n\n    return restore();\n  };\n\n  Eval_sym = function Eval_sym() {\n    var cycleString, i, o, positionIfSymbolAlreadyBeingEvaluated, ref, ref1; // note that function calls are not processed here\n    // because, since they have an argument (at least an empty one)\n    // they are actually CONs, which is a branch of the\n    // switch before the one that calls this function\n    // bare keyword?\n    // If it's a keyword, then we don't look\n    // at the binding array, because keywords\n    // are not redefinable. \n\n    if (iskeyword(p1)) {\n      push(p1);\n      push(symbol(LAST));\n      list(2);\n      Eval();\n      return;\n    } else if (p1 === symbol(PI) && evaluatingAsFloats) {\n      push_double(Math.PI);\n      return;\n    } // Evaluate symbol's binding\n\n\n    p2 = get_binding(p1);\n\n    if (DEBUG) {\n      console.log(\"looked up: \" + p1 + \" which contains: \" + p2);\n    }\n\n    push(p2); // differently from standard Lisp,\n    // here the evaluation is not\n    // one-step only, rather it keeps evaluating\n    // \"all the way\" until a symbol is\n    // defined as itself.\n    // Uncomment these two lines to get Lisp\n    // behaviour (and break most tests)\n\n    if (p1 !== p2) {\n      // detect recursive lookup of symbols, which would otherwise\n      // cause a stack overflow.\n      // Note that recursive functions will still work because\n      // as mentioned at the top, this method doesn't look\n      // up and evaluate function calls.\n      positionIfSymbolAlreadyBeingEvaluated = chainOfUserSymbolsNotFunctionsBeingEvaluated.indexOf(p1);\n\n      if (positionIfSymbolAlreadyBeingEvaluated !== -1) {\n        cycleString = \"\";\n\n        for (i = o = ref = positionIfSymbolAlreadyBeingEvaluated, ref1 = chainOfUserSymbolsNotFunctionsBeingEvaluated.length; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n          cycleString += chainOfUserSymbolsNotFunctionsBeingEvaluated[i].printname + \" -> \";\n        }\n\n        cycleString += p1.printname;\n        stop(\"recursive evaluation of symbols: \" + cycleString);\n        return;\n      }\n\n      chainOfUserSymbolsNotFunctionsBeingEvaluated.push(p1);\n      Eval();\n      return chainOfUserSymbolsNotFunctionsBeingEvaluated.pop();\n    }\n  };\n\n  Eval_cons = function Eval_cons() {\n    var cons_head;\n    cons_head = car(p1); // normally the cons_head is a symbol,\n    // but sometimes in the case of\n    // functions we don't have a symbol,\n    // we have to evaluate something to get to the\n    // symbol. For example if a function is inside\n    // a tensor, then we need to evaluate an index\n    // access first to get to the function.\n    // In those cases, we find an EVAL here,\n    // so we proceed to EVAL\n\n    if (car(cons_head) === symbol(EVAL)) {\n      Eval_user_function();\n      return;\n    }\n\n    if (!issymbol(cons_head)) {\n      stop(\"cons?\");\n    }\n\n    switch (symnum(cons_head)) {\n      case ABS:\n        return Eval_abs();\n\n      case ADD:\n        return Eval_add();\n\n      case ADJ:\n        return Eval_adj();\n\n      case AND:\n        return Eval_and();\n\n      case ARCCOS:\n        return Eval_arccos();\n\n      case ARCCOSH:\n        return Eval_arccosh();\n\n      case ARCSIN:\n        return Eval_arcsin();\n\n      case ARCSINH:\n        return Eval_arcsinh();\n\n      case ARCTAN:\n        return Eval_arctan();\n\n      case ARCTANH:\n        return Eval_arctanh();\n\n      case ARG:\n        return Eval_arg();\n\n      case ATOMIZE:\n        return Eval_atomize();\n\n      case BESSELJ:\n        return Eval_besselj();\n\n      case BESSELY:\n        return Eval_bessely();\n\n      case BINDING:\n        return Eval_binding();\n\n      case BINOMIAL:\n        return Eval_binomial();\n\n      case CEILING:\n        return Eval_ceiling();\n\n      case CHECK:\n        return Eval_check();\n\n      case CHOOSE:\n        return Eval_choose();\n\n      case CIRCEXP:\n        return Eval_circexp();\n\n      case CLEAR:\n        return Eval_clear();\n\n      case CLEARALL:\n        return Eval_clearall();\n\n      case CLEARPATTERNS:\n        return Eval_clearpatterns();\n\n      case CLOCK:\n        return Eval_clock();\n\n      case COEFF:\n        return Eval_coeff();\n\n      case COFACTOR:\n        return Eval_cofactor();\n\n      case CONDENSE:\n        return Eval_condense();\n\n      case CONJ:\n        return Eval_conj();\n\n      case CONTRACT:\n        return Eval_contract();\n\n      case COS:\n        return Eval_cos();\n\n      case COSH:\n        return Eval_cosh();\n\n      case DECOMP:\n        return Eval_decomp();\n\n      case DEGREE:\n        return Eval_degree();\n\n      case DEFINT:\n        return Eval_defint();\n\n      case DENOMINATOR:\n        return Eval_denominator();\n\n      case DERIVATIVE:\n        return Eval_derivative();\n\n      case DET:\n        return Eval_det();\n\n      case DIM:\n        return Eval_dim();\n\n      case DIRAC:\n        return Eval_dirac();\n\n      case DIVISORS:\n        return Eval_divisors();\n\n      case DO:\n        return Eval_do();\n\n      case DOT:\n        return _Eval_inner();\n\n      case DRAW:\n        return Eval_draw();\n\n      case DSOLVE:\n        return Eval_dsolve();\n\n      case EIGEN:\n        return Eval_eigen();\n\n      case EIGENVAL:\n        return Eval_eigenval();\n\n      case EIGENVEC:\n        return Eval_eigenvec();\n\n      case ERF:\n        return Eval_erf();\n\n      case ERFC:\n        return Eval_erfc();\n\n      case EVAL:\n        return Eval_Eval();\n\n      case EXP:\n        return Eval_exp();\n\n      case EXPAND:\n        return Eval_expand();\n\n      case EXPCOS:\n        return Eval_expcos();\n\n      case EXPSIN:\n        return Eval_expsin();\n\n      case FACTOR:\n        return Eval_factor();\n\n      case FACTORIAL:\n        return Eval_factorial();\n\n      case FACTORPOLY:\n        return Eval_factorpoly();\n\n      case FILTER:\n        return Eval_filter();\n\n      case FLOATF:\n        return Eval_float();\n\n      case APPROXRATIO:\n        return Eval_approxratio();\n\n      case FLOOR:\n        return Eval_floor();\n\n      case FOR:\n        return Eval_for();\n      // this is invoked only when we\n      // evaluate a function that is NOT being called\n      // e.g. when f is a function as we do\n      //  g = f\n\n      case FUNCTION:\n        return Eval_function_reference();\n\n      case GAMMA:\n        return Eval_gamma();\n\n      case GCD:\n        return Eval_gcd();\n\n      case HERMITE:\n        return Eval_hermite();\n\n      case HILBERT:\n        return Eval_hilbert();\n\n      case IMAG:\n        return Eval_imag();\n\n      case INDEX:\n        return Eval_index();\n\n      case INNER:\n        return _Eval_inner();\n\n      case INTEGRAL:\n        return Eval_integral();\n\n      case INV:\n        return Eval_inv();\n\n      case INVG:\n        return Eval_invg();\n\n      case ISINTEGER:\n        return Eval_isinteger();\n\n      case ISPRIME:\n        return Eval_isprime();\n\n      case LAGUERRE:\n        return Eval_laguerre();\n      //  when LAPLACE then Eval_laplace()\n\n      case LCM:\n        return Eval_lcm();\n\n      case LEADING:\n        return Eval_leading();\n\n      case LEGENDRE:\n        return Eval_legendre();\n\n      case LOG:\n        return Eval_log();\n\n      case LOOKUP:\n        return Eval_lookup();\n\n      case MOD:\n        return Eval_mod();\n\n      case MULTIPLY:\n        return Eval_multiply();\n\n      case NOT:\n        return Eval_not();\n\n      case NROOTS:\n        return Eval_nroots();\n\n      case NUMBER:\n        return Eval_number();\n\n      case NUMERATOR:\n        return Eval_numerator();\n\n      case OPERATOR:\n        return Eval_operator();\n\n      case OR:\n        return Eval_or();\n\n      case OUTER:\n        return Eval_outer();\n\n      case PATTERN:\n        return Eval_pattern();\n\n      case PATTERNSINFO:\n        return Eval_patternsinfo();\n\n      case POLAR:\n        return Eval_polar();\n\n      case POWER:\n        return Eval_power();\n\n      case PRIME:\n        return Eval_prime();\n\n      case PRINT:\n        return Eval_print();\n\n      case PRINT2DASCII:\n        return Eval_print2dascii();\n\n      case PRINTFULL:\n        return Eval_printcomputer();\n\n      case PRINTLATEX:\n        return Eval_printlatex();\n\n      case PRINTLIST:\n        return Eval_printlist();\n\n      case PRINTPLAIN:\n        return Eval_printhuman();\n\n      case PRODUCT:\n        return Eval_product();\n\n      case QUOTE:\n        return Eval_quote();\n\n      case QUOTIENT:\n        return Eval_quotient();\n\n      case RANK:\n        return Eval_rank();\n\n      case RATIONALIZE:\n        return Eval_rationalize();\n\n      case REAL:\n        return Eval_real();\n\n      case ROUND:\n        return Eval_round();\n\n      case YYRECT:\n        return Eval_rect();\n\n      case ROOTS:\n        return Eval_roots();\n\n      case SETQ:\n        return Eval_setq();\n\n      case SGN:\n        return Eval_sgn();\n\n      case SILENTPATTERN:\n        return Eval_silentpattern();\n\n      case SIMPLIFY:\n        return Eval_simplify();\n\n      case SIN:\n        return Eval_sin();\n\n      case SINH:\n        return Eval_sinh();\n\n      case SHAPE:\n        return Eval_shape();\n\n      case SQRT:\n        return Eval_sqrt();\n\n      case STOP:\n        return Eval_stop();\n\n      case SUBST:\n        return Eval_subst();\n\n      case SUM:\n        return Eval_sum();\n\n      case SYMBOLSINFO:\n        return Eval_symbolsinfo();\n\n      case TAN:\n        return Eval_tan();\n\n      case TANH:\n        return Eval_tanh();\n\n      case TAYLOR:\n        return Eval_taylor();\n\n      case TEST:\n        return Eval_test();\n\n      case TESTEQ:\n        return Eval_testeq();\n\n      case TESTGE:\n        return Eval_testge();\n\n      case TESTGT:\n        return Eval_testgt();\n\n      case TESTLE:\n        return Eval_testle();\n\n      case TESTLT:\n        return Eval_testlt();\n\n      case TRANSPOSE:\n        return Eval_transpose();\n\n      case UNIT:\n        return Eval_unit();\n\n      case ZERO:\n        return Eval_zero();\n\n      default:\n        return Eval_user_function();\n    }\n  };\n\n  Eval_binding = function Eval_binding() {\n    return push(get_binding(cadr(p1)));\n  };\n\n  Eval_check = function Eval_check() {\n    var checkResult; // check the argument\n\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n\n    if (checkResult == null) {\n      // returned null: unknown result\n      // leave the whole check unevalled\n      return push(p1);\n    } else {\n      // returned 1 or 0\n      return push_integer(checkResult);\n    }\n  };\n\n  Eval_det = function Eval_det() {\n    push(cadr(p1));\n    Eval();\n    return det();\n  };\n\n  Eval_dim = function Eval_dim() {\n    var n; //int n\n\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n\n    if (iscons(cddr(p1))) {\n      push(caddr(p1));\n      Eval();\n      n = pop_integer();\n    } else {\n      n = 1;\n    }\n\n    if (!istensor(p2)) {\n      return push_integer(1); // dim of scalar is 1\n    } else if (n < 1 || n > p2.tensor.ndim) {\n      return push(p1);\n    } else {\n      return push_integer(p2.tensor.dim[n - 1]);\n    }\n  };\n\n  Eval_divisors = function Eval_divisors() {\n    push(cadr(p1));\n    Eval();\n    return divisors();\n  };\n\n  Eval_do = function Eval_do() {\n    var results;\n    push(car(p1));\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      pop();\n      push(car(p1));\n      Eval();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  Eval_dsolve = function Eval_dsolve() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    return dsolve();\n  }; // for example, Eval(f,x,2)\n\n\n  Eval_Eval = function Eval_Eval() {\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      push(cadr(p1));\n      Eval();\n\n      _subst();\n\n      p1 = cddr(p1);\n    }\n\n    return Eval();\n  }; // exp evaluation: it replaces itself with\n  // a POWER(E,something) node and evals that one\n\n\n  Eval_exp = function Eval_exp() {\n    push(cadr(p1));\n    Eval();\n    return exponential();\n  };\n\n  Eval_factorial = function Eval_factorial() {\n    push(cadr(p1));\n    Eval();\n    return factorial();\n  };\n\n  Eval_factorpoly = function Eval_factorpoly() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    factorpoly();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factorpoly();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  Eval_hermite = function Eval_hermite() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return hermite();\n  };\n\n  Eval_hilbert = function Eval_hilbert() {\n    push(cadr(p1));\n    Eval();\n    return hilbert();\n  };\n\n  Eval_index = function Eval_index() {\n    var h, orig, theTensor;\n    h = tos;\n    orig = p1; // look into the head of the list,\n    // when evaluated it should be a tensor\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    theTensor = stack[tos - 1];\n\n    if (isNumericAtom(theTensor)) {\n      stop(\"trying to access a scalar as a tensor\");\n    }\n\n    if (!istensor(theTensor)) {\n      // the tensor is not allocated yet, so\n      // leaving the expression unevalled\n      moveTos(h);\n      push(orig);\n      return;\n    } // we examined the head of the list which\n    // was the tensor, now look into\n    // the indexes\n\n\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n\n      if (!isintegerorintegerfloat(stack[tos - 1])) {\n        // index with something other than\n        // an integer\n        moveTos(h);\n        push(orig);\n        return;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    return index_function(tos - h);\n  };\n\n  Eval_inv = function Eval_inv() {\n    push(cadr(p1));\n    Eval();\n    return _inv();\n  };\n\n  Eval_invg = function Eval_invg() {\n    push(cadr(p1));\n    Eval();\n    return invg();\n  };\n\n  Eval_isinteger = function Eval_isinteger() {\n    var n;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (isrational(p1)) {\n      if (isinteger(p1)) {\n        push(one);\n      } else {\n        push(zero);\n      }\n\n      return;\n    }\n\n    if (isdouble(p1)) {\n      n = Math.floor(p1.d);\n\n      if (n === p1.d) {\n        push(one);\n      } else {\n        push(zero);\n      }\n\n      return;\n    }\n\n    push_symbol(ISINTEGER);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_number = function Eval_number() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1.k === NUM || p1.k === DOUBLE) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_operator = function Eval_operator() {\n    var h;\n    h = tos;\n    push_symbol(OPERATOR);\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p1 = cdr(p1);\n    }\n\n    return list(tos - h);\n  }; // quote definition\n\n\n  Eval_quote = function Eval_quote() {\n    return push(cadr(p1));\n  }; // rank definition\n\n\n  Eval_rank = function Eval_rank() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (istensor(p1)) {\n      return push_integer(p1.tensor.ndim);\n    } else {\n      return push(zero);\n    }\n  }; // Evaluates the right side and assigns the\n  // result of the evaluation to the left side.\n  // It's called setq because it stands for \"set quoted\" from Lisp,\n  // see:\n  //   http://stackoverflow.com/questions/869529/difference-between-set-setq-and-setf-in-common-lisp\n  // Note that this also takes case of assigning to a tensor\n  // element, which is something that setq wouldn't do\n  // in list, see comments further down below.\n  // Example:\n  //   f = x\n  //   // f evaluates to x, so x is assigned to g really\n  //   // rather than actually f being assigned to g\n  //   g = f\n  //   f = y\n  //   g\n  //   > x\n\n\n  Eval_setq = function Eval_setq() {\n    // case of tensor\n    if (caadr(p1) === symbol(INDEX)) {\n      setq_indexed();\n      return;\n    } // case of function definition\n\n\n    if (iscons(cadr(p1))) {\n      define_user_function();\n      return;\n    }\n\n    if (!issymbol(cadr(p1))) {\n      stop(\"symbol assignment: error in symbol\");\n    }\n\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    set_binding(cadr(p1), p2); // An assignment returns nothing.\n    // This is unlike most programming languages\n    // where an assignment does return the\n    // assigned value.\n    // TODO Could be changed.\n\n    return push(symbol(NIL));\n  }; // Here \"setq\" is a misnomer because\n  // setq wouldn't work in Lisp to set array elements\n  // since setq stands for \"set quoted\" and you wouldn't\n  // quote an array element access.\n  // You'd rather use setf, which is a macro that can\n  // assign a value to anything.\n  //   (setf (aref YourArray 2) \"blue\")\n  // see\n  //   http://stackoverflow.com/questions/18062016/common-lisp-how-to-set-an-element-in-a-2d-array\n  //-----------------------------------------------------------------------------\n  //  Example: a[1] = b\n  //  p1  *-------*-----------------------*\n  //    |  |      |\n  //    setq  *-------*-------*  b\n  //      |  |  |\n  //      index  a  1\n  //  cadadr(p1) -> a\n  //-----------------------------------------------------------------------------\n\n\n  setq_indexed = function setq_indexed() {\n    var h;\n    p4 = cadadr(p1);\n\n    if (!issymbol(p4)) {\n      // this is likely to happen when one tries to\n      // do assignments like these\n      //   1[2] = 3\n      // or\n      //   f(x)[1] = 2\n      // or\n      //   [[1,2],[3,4]][5] = 6\n      // In other words, one can only do\n      // a straight assignment like\n      //   existingMatrix[index] = something\n      stop(\"indexed assignment: expected a symbol name\");\n    }\n\n    h = tos;\n    push(caddr(p1));\n    Eval();\n    p2 = cdadr(p1);\n\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      p2 = cdr(p2);\n    }\n\n    set_component(tos - h);\n    p3 = pop();\n    set_binding(p4, p3);\n    return push(symbol(NIL));\n  };\n\n  Eval_sqrt = function Eval_sqrt() {\n    push(cadr(p1));\n    Eval();\n    push_rational(1, 2);\n    return power();\n  };\n\n  Eval_stop = function Eval_stop() {\n    return stop(\"user stop\");\n  };\n\n  Eval_subst = function Eval_subst() {\n    push(cadddr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadr(p1));\n    Eval();\n\n    _subst();\n\n    return Eval(); // normalize\n  }; // always returns a matrix with rank 2\n  // i.e. two dimensions,\n  // the passed parameter is the size\n\n\n  Eval_unit = function Eval_unit() {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      push(p1);\n      return;\n    }\n\n    if (n < 1) {\n      push(p1);\n      return;\n    }\n\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[n * i + i] = one;\n    }\n\n    check_tensor_dimensions(p1);\n    return push(p1);\n  };\n\n  Eval_noexpand = function Eval_noexpand() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    Eval();\n    return expanding = prev_expanding;\n  }; // like Eval() except \"=\" (assignment) is treated\n  // as \"==\" (equality test)\n  // This is because\n  //  * this allows users to be lazy and just\n  //    use \"=\" instead of \"==\" as per more common\n  //    mathematical notation\n  //  * in many places we don't expect an assignment\n  //    e.g. we don't expect to test the zero-ness\n  //    of an assignment or the truth value of\n  //    an assignment\n  // Note that these are questionable assumptions\n  // as for example in most programming languages one\n  // can indeed test the value of an assignment (the\n  // value is just the evaluation of the right side)\n\n\n  Eval_predicate = function Eval_predicate() {\n    save();\n    p1 = top();\n\n    if (car(p1) === symbol(SETQ)) {\n      // replace the assignment in the\n      // head with an equality test\n      pop();\n      push_symbol(TESTEQ);\n      push(cadr(p1));\n      push(caddr(p1));\n      list(3);\n    }\n\n    Eval();\n    return restore();\n  }; // Partial fraction expansion\n  // Example\n  //      expand(1/(x^3+x^2),x)\n  //        1      1       1\n  //      ---- - --- + -------\n  //        2     x     x + 1\n  //       x\n\n\n  Eval_expand = function Eval_expand() {\n    // 1st arg\n    push(cadr(p1));\n    Eval(); // 2nd arg\n\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    return _expand();\n  }; //define A p2\n  //define B p3\n  //define C p4\n  //define F p5\n  //define P p6\n  //define Q p7\n  //define T p8\n  //define X p9\n\n\n  _expand = function expand() {\n    var prev_expanding;\n    save();\n    p9 = pop();\n    p5 = pop();\n\n    if (istensor(p5)) {\n      expand_tensor();\n      restore();\n      return;\n    } // if sum of terms then sum over the expansion of each term\n\n\n    if (car(p5) === symbol(ADD)) {\n      push_integer(0);\n      p1 = cdr(p5);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p9);\n\n        _expand();\n\n        add();\n        p1 = cdr(p1);\n      }\n\n      restore();\n      return;\n    } // B = numerator\n\n\n    push(p5);\n\n    _numerator();\n\n    p3 = pop(); // A = denominator\n\n    push(p5);\n\n    _denominator();\n\n    p2 = pop();\n    remove_negative_exponents(); // Q = quotient\n\n    push(p3);\n    push(p2);\n    push(p9); // if the denominator is one then always bail out\n    // also bail out if the denominator is not one but\n    // it's not anything recognizable as a polynomial.\n\n    if (isone(p3) || isone(p2)) {\n      if (!ispolyexpandedform(p2, p9) || isone(p2)) {\n        pop();\n        pop();\n        pop();\n        push(p5); // p5 is the original input, leave unchanged\n\n        restore();\n        return;\n      }\n    }\n\n    divpoly();\n    p7 = pop(); // remainder B = B - A * Q\n\n    push(p3);\n    push(p2);\n    push(p7);\n    multiply();\n    subtract();\n    p3 = pop(); // if the remainder is zero then we're done\n\n    if (isZeroAtomOrTensor(p3)) {\n      push(p7);\n      restore();\n      return;\n    } // A = factor(A)\n    //console.log(\"expand - to be factored: \" + p2)\n\n\n    push(p2);\n    push(p9);\n    factorpoly();\n    p2 = pop(); //console.log(\"expand - factored to: \" + p2)\n\n    expand_get_C();\n    expand_get_B();\n    expand_get_A();\n\n    if (istensor(p4)) {\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n\n      _inv();\n\n      expanding = prev_expanding;\n      push(p3);\n\n      _inner();\n\n      push(p2);\n\n      _inner();\n    } else {\n      push(p3);\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p2);\n      multiply();\n    }\n\n    push(p7);\n    add();\n    return restore();\n  };\n\n  expand_tensor = function expand_tensor() {\n    var i, o, ref;\n    i = 0;\n    push(p5);\n    copy_tensor();\n    p5 = pop();\n\n    for (i = o = 0, ref = p5.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p5.tensor.elem[i]);\n      push(p9);\n\n      _expand();\n\n      p5.tensor.elem[i] = pop();\n    }\n\n    return push(p5);\n  };\n\n  remove_negative_exponents = function remove_negative_exponents() {\n    var h, i, j, k, n, o, ref;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    n = 0;\n    h = tos;\n    factors(p2);\n    factors(p3);\n    n = tos - h; // find the smallest exponent\n\n    j = 0;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p1 = stack[h + i];\n\n      if (car(p1) !== symbol(POWER)) {\n        continue;\n      }\n\n      if (cadr(p1) !== p9) {\n        continue;\n      }\n\n      push(caddr(p1));\n      k = pop_integer();\n\n      if (isNaN(k)) {\n        continue;\n      }\n\n      if (k < j) {\n        j = k;\n      }\n    }\n\n    moveTos(h);\n\n    if (j === 0) {\n      return;\n    } // A = A / X^j\n\n\n    push(p2);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    p2 = pop(); // B = B / X^j\n\n    push(p3);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    return p3 = pop();\n  }; // Returns the expansion coefficient matrix C.\n  // Example:\n  //       B         1\n  //      --- = -----------\n  //       A      2 \n  //             x (x + 1)\n  // We have\n  //       B     Y1     Y2      Y3\n  //      --- = ---- + ---- + -------\n  //       A      2     x      x + 1\n  //             x\n  // Our task is to solve for the unknowns Y1, Y2, and Y3.\n  // Multiplying both sides by A yields\n  //           AY1     AY2      AY3\n  //      B = ----- + ----- + -------\n  //            2      x       x + 1\n  //           x\n  // Let\n  //            A               A                 A\n  //      W1 = ----       W2 = ---        W3 = -------\n  //             2              x               x + 1\n  //            x\n  // Then the coefficient matrix C is\n  //              coeff(W1,x,0)   coeff(W2,x,0)   coeff(W3,x,0)\n  //       C =    coeff(W1,x,1)   coeff(W2,x,1)   coeff(W3,x,1)\n  //              coeff(W1,x,2)   coeff(W2,x,2)   coeff(W3,x,2)\n  // It follows that\n  //       coeff(B,x,0)     Y1\n  //       coeff(B,x,1) = C Y2\n  //       coeff(B,x,2) =   Y3\n  // Hence\n  //       Y1       coeff(B,x,0)\n  //             -1\n  //       Y2 = C   coeff(B,x,1)\n  //       Y3       coeff(B,x,2)\n\n\n  expand_get_C = function expand_get_C() {\n    var a, h, i, i1, j, n, o, prev_expanding, ref, ref1;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0; //U **a\n\n    h = tos;\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p1 = cdr(p2);\n\n      while (iscons(p1)) {\n        p5 = car(p1);\n        expand_get_CF();\n        p1 = cdr(p1);\n      }\n    } else {\n      p5 = p2;\n      expand_get_CF();\n    }\n\n    n = tos - h;\n\n    if (n === 1) {\n      p4 = pop();\n      return;\n    }\n\n    p4 = alloc_tensor(n * n);\n    p4.tensor.ndim = 2;\n    p4.tensor.dim[0] = n;\n    p4.tensor.dim[1] = n;\n    a = h;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push(stack[a + j]);\n        push(p9);\n        push_integer(i);\n        power();\n        prev_expanding = expanding;\n        expanding = 1;\n        divide();\n        expanding = prev_expanding;\n        push(p9);\n        filter();\n        p4.tensor.elem[n * i + j] = pop();\n      }\n    }\n\n    return moveTos(tos - n);\n  }; // The following table shows the push order for simple roots, repeated roots,\n  // and inrreducible factors.\n  //  Factor F        Push 1st        Push 2nd         Push 3rd      Push 4th\n  //                   A\n  //  x               ---\n  //                   x\n  //   2               A               A\n  //  x               ----            ---\n  //                    2              x\n  //                   x\n  //                     A\n  //  x + 1           -------\n  //                   x + 1\n  //         2            A              A\n  //  (x + 1)         ----------      -------\n  //                          2        x + 1\n  //                   (x + 1)\n  //   2                   A               Ax\n  //  x  + x + 1      ------------    ------------\n  //                    2               2\n  //                   x  + x + 1      x  + x + 1\n  //    2         2          A              Ax              A             Ax\n  //  (x  + x + 1)    --------------- ---------------  ------------  ------------\n  //                     2         2     2         2     2             2\n  //                   (x  + x + 1)    (x  + x + 1)     x  + x + 1    x  + x + 1\n  // For T = A/F and F = P^N we have\n  //      Factor F          Push 1st    Push 2nd    Push 3rd    Push 4th\n  //      x                 T\n  //       2\n  //      x                 T           TP\n  //      x + 1             T\n  //             2\n  //      (x + 1)           T           TP\n  //       2\n  //      x  + x + 1        T           TX\n  //        2         2\n  //      (x  + x + 1)      T           TX          TP          TPX\n  // Hence we want to push in the order\n  //      T * (P ^ i) * (X ^ j)\n  // for all i, j such that\n  //      i = 0, 1, ..., N - 1\n  //      j = 0, 1, ..., deg(P) - 1\n  // where index j runs first.\n\n\n  expand_get_CF = function expand_get_CF() {\n    var d, i, j, n, o, prev_expanding, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n\n    if (!_Find(p5, p9)) {\n      return;\n    }\n\n    prev_expanding = expanding;\n    expanding = 1;\n    trivial_divide();\n    expanding = prev_expanding;\n\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p6 = cadr(p5);\n    } else {\n      n = 1;\n      p6 = p5;\n    }\n\n    push(p6);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      results.push(function () {\n        var i1, ref1, results1;\n        results1 = [];\n\n        for (j = i1 = 0, ref1 = d; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p8);\n          push(p6);\n          push_integer(i);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          expanding = prev_expanding;\n          push(p9);\n          push_integer(j);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          results1.push(expanding = prev_expanding);\n        }\n\n        return results1;\n      }());\n    }\n\n    return results;\n  }; // Returns T = A/F where F is a factor of A.\n\n\n  trivial_divide = function trivial_divide() {\n    var h;\n    h = 0;\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      h = tos;\n      p0 = cdr(p2);\n\n      while (iscons(p0)) {\n        if (!equal(car(p0), p5)) {\n          push(car(p0));\n          Eval(); // force expansion of (x+1)^2, f.e.\n        }\n\n        p0 = cdr(p0);\n      }\n\n      multiply_all(tos - h);\n    } else {\n      push_integer(1);\n    }\n\n    return p8 = pop();\n  }; // Returns the expansion coefficient vector B.\n\n\n  expand_get_B = function expand_get_B() {\n    var i, n, o, prev_expanding, ref;\n    i = 0;\n    n = 0;\n\n    if (!istensor(p4)) {\n      return;\n    }\n\n    n = p4.tensor.dim[0];\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(p3);\n      push(p9);\n      push_integer(i);\n      power();\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p9);\n      filter();\n      p8.tensor.elem[i] = pop();\n    }\n\n    return p3 = p8;\n  }; // Returns the expansion fractions in A.\n\n\n  expand_get_A = function expand_get_A() {\n    var h, i, n, o, ref;\n    h = 0;\n    i = 0;\n    n = 0;\n\n    if (!istensor(p4)) {\n      push(p2);\n      reciprocate();\n      p2 = pop();\n      return;\n    }\n\n    h = tos;\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p8 = cdr(p2);\n\n      while (iscons(p8)) {\n        p5 = car(p8);\n        expand_get_AF();\n        p8 = cdr(p8);\n      }\n    } else {\n      p5 = p2;\n      expand_get_AF();\n    }\n\n    n = tos - h;\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p8.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(h);\n    return p2 = p8;\n  };\n\n  expand_get_AF = function expand_get_AF() {\n    var d, i, j, n, o, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 1;\n\n    if (!_Find(p5, p9)) {\n      return;\n    }\n\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p5 = cadr(p5);\n    }\n\n    push(p5);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n\n    for (i = o = ref = n; ref <= 0 ? o < 0 : o > 0; i = ref <= 0 ? ++o : --o) {\n      results.push(function () {\n        var i1, ref1, results1;\n        results1 = [];\n\n        for (j = i1 = 0, ref1 = d; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p5);\n          push_integer(i);\n          power();\n          reciprocate();\n          push(p9);\n          push_integer(j);\n          power();\n          results1.push(multiply());\n        }\n\n        return results1;\n      }());\n    }\n\n    return results;\n  }; // Do the exponential cosine function.\n\n\n  Eval_expcos = function Eval_expcos() {\n    push(cadr(p1));\n    Eval();\n    return expcos();\n  };\n\n  expcos = function expcos() {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    add();\n    return restore();\n  }; // Do the exponential sine function.\n\n\n  Eval_expsin = function Eval_expsin() {\n    push(cadr(p1));\n    Eval();\n    return expsin();\n  };\n\n  expsin = function expsin() {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    subtract();\n    return restore();\n  }; // factor a polynomial or integer\n\n\n  Eval_factor = function Eval_factor() {\n    var results;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    factor(); // more factoring?\n\n    p1 = cdddr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factor_again();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  factor_again = function factor_again() {\n    var h, n;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        factor_term();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      factor_term();\n    }\n\n    n = tos - h;\n\n    if (n > 1) {\n      multiply_all_noexpand(n);\n    }\n\n    return restore();\n  };\n\n  factor_term = function factor_term() {\n    save();\n    factorpoly();\n    p1 = pop();\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n    }\n\n    return restore();\n  };\n\n  factor = function factor() {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isinteger(p1)) {\n      push(p1);\n      factor_number(); // see pollard.cpp\n    } else {\n      push(p1);\n      push(p2);\n      factorpoly();\n    }\n\n    return restore();\n  }; // for factoring small integers (2^32 or less)\n\n\n  factor_small_number = function factor_small_number() {\n    var d, expo, i, n, o, ref;\n    i = 0;\n    save();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      stop(\"number too big to factor\");\n    }\n\n    if (n < 0) {\n      n = -n;\n    }\n\n    for (i = o = 0, ref = MAXPRIMETAB; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      d = primetab[i];\n\n      if (d > n / d) {\n        break;\n      }\n\n      expo = 0;\n\n      while (n % d === 0) {\n        n /= d;\n        expo++;\n      }\n\n      if (expo) {\n        push_integer(d);\n        push_integer(expo);\n      }\n    }\n\n    if (n > 1) {\n      push_integer(n);\n      push_integer(1);\n    }\n\n    return restore();\n  };\n\n  factorial = function factorial() {\n    var n;\n    n = 0;\n    save();\n    p1 = pop();\n    push(p1);\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push_symbol(FACTORIAL);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    bignum_factorial(n);\n    return restore();\n  }; // simplification rules for factorials (m < n)\n  //  (e + 1) * factorial(e)  ->  factorial(e + 1)\n  //  factorial(e) / e  ->  factorial(e - 1)\n  //  e / factorial(e)  ->  1 / factorial(e - 1)\n  //  factorial(e + n)\n  //  ----------------  ->  (e + m + 1)(e + m + 2)...(e + n)\n  //  factorial(e + m)\n  //  factorial(e + m)                               1\n  //  ----------------  ->  --------------------------------\n  //  factorial(e + n)    (e + m + 1)(e + m + 2)...(e + n)\n  // this function is not actually used, but\n  // all these simplifications\n  // do happen automatically via simplify\n\n\n  _simplifyfactorials = function simplifyfactorials() {\n    var x;\n    x = 0;\n    save();\n    x = expanding;\n    expanding = 0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      push(zero);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n\n        _simplifyfactorials();\n\n        add();\n        p1 = cdr(p1);\n      }\n\n      expanding = x;\n      restore();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      sfac_product();\n      expanding = x;\n      restore();\n      return;\n    }\n\n    push(p1);\n    expanding = x;\n    return restore();\n  };\n\n  sfac_product = function sfac_product() {\n    var i, i1, j, j1, n, o, ref, ref1, ref2, ref3, s;\n    i = 0;\n    j = 0;\n    n = 0;\n    s = tos;\n    p1 = cdr(p1);\n    n = 0;\n\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      n++;\n    }\n\n    for (i = o = 0, ref = n - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n\n      for (j = i1 = ref1 = i + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (stack[s + j] === symbol(NIL)) {\n          continue;\n        }\n\n        sfac_product_f(s, i, j);\n      }\n    }\n\n    push(one);\n\n    for (i = j1 = 0, ref3 = n; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n\n      push(stack[s + i]);\n      multiply();\n    }\n\n    p1 = pop();\n    moveTos(tos - n);\n    return push(p1);\n  };\n\n  sfac_product_f = function sfac_product_f(s, a, b) {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    p1 = stack[s + a];\n    p2 = stack[s + b];\n\n    if (ispower(p1)) {\n      p3 = caddr(p1);\n      p1 = cadr(p1);\n    } else {\n      p3 = one;\n    }\n\n    if (ispower(p2)) {\n      p4 = caddr(p2);\n      p2 = cadr(p2);\n    } else {\n      p4 = one;\n    }\n\n    if (isfactorial(p1) && isfactorial(p2)) {\n      // Determine if the powers cancel.\n      push(p3);\n      push(p4);\n      add();\n      yyexpand();\n      n = pop_integer();\n\n      if (n !== 0) {\n        return;\n      } // Find the difference between the two factorial args.\n      // For example, the difference between (a + 2)! and a! is 2.\n\n\n      push(cadr(p1));\n      push(cadr(p2));\n      subtract();\n      yyexpand();\n      n = pop_integer();\n\n      if (n === 0 || isNaN(n)) {\n        return;\n      }\n\n      if (n < 0) {\n        n = -n;\n        p5 = p1;\n        p1 = p2;\n        p2 = p5;\n        p5 = p3;\n        p3 = p4;\n        p4 = p5;\n      }\n\n      push(one);\n\n      for (i = o = 1, ref = n; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        push(cadr(p2));\n        push_integer(i);\n        add();\n        push(p3);\n        power();\n        multiply();\n      }\n\n      stack[s + a] = pop();\n      return stack[s + b] = symbol(NIL);\n    }\n  }; // Factor a polynomial\n\n\n  factorpoly = function factorpoly() {\n    var polynomial, variable;\n\n    if (DEBUG) {\n      console.log(\"factorpoly: \" + stack[tos - 1].toString() + \" \" + stack[tos - 2].toString());\n    }\n\n    save();\n    variable = pop();\n    polynomial = pop();\n\n    if (!_Find(polynomial, variable) || !ispolyexpandedform(polynomial, variable) || !issymbol(variable)) {\n      push(polynomial);\n    } else {\n      yyfactorpoly(variable, polynomial);\n    }\n\n    return restore();\n  }; //-----------------------------------------------------------------------------\n  //  Input:    tos-2    true polynomial\n  //      tos-1    free variable\n  //  Output:    factored polynomial on stack\n  //-----------------------------------------------------------------------------\n\n\n  yyfactorpoly = function yyfactorpoly(variable, polynomial) {\n    var A, AxPlusB, B, checkingTheDivision, dividend, factpoly_expo, firstParam, foundComplexRoot, foundRealRoot, h, i, i1, j1, l1, o, partOfPolynomialFactoredSoFar, polycoeff, prev_expanding, previousFactorisation, ref, ref1, ref2, ref3, remainingPoly, secondDegreePloly, secondParam, whichRootsAreWeFinding;\n\n    if (DEBUG) {\n      firstParam = variable;\n      secondParam = polynomial;\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam);\n    }\n\n    save();\n    h = tos;\n\n    if (_isfloating(polynomial)) {\n      stop(\"floating point numbers in polynomial\");\n    }\n\n    polycoeff = tos;\n    factpoly_expo = coeff(variable, polynomial) - 1;\n\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" factpoly_expo before rationalize_coefficients: \" + factpoly_expo);\n    }\n\n    partOfPolynomialFactoredSoFar = rationalize_coefficients(h);\n\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" factpoly_expo  after rationalize_coefficients: \" + factpoly_expo);\n    } // for univariate polynomials we could do factpoly_expo > 1\n\n\n    whichRootsAreWeFinding = \"real\";\n    remainingPoly = null;\n\n    while (factpoly_expo > 0) {\n      if (DEBUG) {\n        console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" factpoly_expo inside while loop: \" + factpoly_expo);\n      }\n\n      if (isZeroAtomOrTensor(stack[polycoeff + 0])) {\n        if (DEBUG) {\n          console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" isZeroAtomOrTensor\");\n        }\n\n        A = one;\n        B = zero;\n      } else {\n        //console.log(\"trying to find a \" + whichRootsAreWeFinding + \" root\")\n        if (whichRootsAreWeFinding === \"real\") {\n          var _get_factor_from_real = get_factor_from_real_root(variable, factpoly_expo, polycoeff);\n\n          var _get_factor_from_real2 = _slicedToArray(_get_factor_from_real, 3);\n\n          foundRealRoot = _get_factor_from_real2[0];\n          A = _get_factor_from_real2[1];\n          B = _get_factor_from_real2[2];\n        } else if (whichRootsAreWeFinding === \"complex\") {\n          var _get_factor_from_comp = get_factor_from_complex_root(remainingPoly, factpoly_expo, polycoeff);\n\n          var _get_factor_from_comp2 = _slicedToArray(_get_factor_from_comp, 2);\n\n          foundComplexRoot = _get_factor_from_comp2[0];\n          A = _get_factor_from_comp2[1];\n        }\n      }\n\n      if (whichRootsAreWeFinding === \"real\") {\n        if (foundRealRoot === 0) {\n          whichRootsAreWeFinding = \"complex\";\n          continue;\n        } else {\n          // build the 1-degree polynomial out of the\n          // real solution that was just found.\n          push(A); // A\n\n          push(variable); // x\n\n          multiply();\n          push(B); // B\n\n          add();\n          AxPlusB = pop();\n\n          if (DEBUG) {\n            console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" success\\nFACTOR=\" + AxPlusB);\n          } // factor out negative sign (not req'd because A > 1)\n          //if 0\n\n          /*\n          if (isnegativeterm(A))\n            push(AxPlusB)\n            negate()\n            AxPlusB = pop()\n            push(partOfPolynomialFactoredSoFar)\n            negate_noexpand()\n            partOfPolynomialFactoredSoFar = pop()\n          */\n          //endif\n          // partOfPolynomialFactoredSoFar is the part of the polynomial that was factored so far,\n          // add the newly found factor to it. Note that we are not actually\n          // multiplying the polynomials fully, we are just leaving them\n          // expressed as (P1)*(P2), we are not expanding the product.\n\n\n          push(partOfPolynomialFactoredSoFar);\n          push(AxPlusB);\n          multiply_noexpand();\n          partOfPolynomialFactoredSoFar = pop(); // ok now on stack we have the coefficients of the\n          // remaining part of the polynomial still to factor.\n          // Divide it by the newly-found factor so that\n          // the stack then contains the coefficients of the\n          // polynomial part still left to factor.\n\n          yydivpoly(factpoly_expo, polycoeff, A, B);\n\n          while (factpoly_expo && isZeroAtomOrTensor(stack[polycoeff + factpoly_expo])) {\n            factpoly_expo--;\n          }\n\n          push(zero);\n\n          for (i = o = 0, ref = factpoly_expo; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            push(stack[polycoeff + i]);\n            push(variable); // the free variable\n\n            push_integer(i);\n            power();\n            multiply();\n            add();\n          }\n\n          remainingPoly = pop();\n        } //console.log(\"real branch remainingPoly: \" + remainingPoly)\n\n      } else if (whichRootsAreWeFinding === \"complex\") {\n        if (foundComplexRoot === 0) {\n          break;\n        } else {\n          // build the 2-degree polynomial out of the\n          // real solution that was just found.\n          push(A); // A\n\n          push(variable); // x\n\n          subtract(); //console.log(\"first factor: \" + stack[tos-1].toString())\n\n          push(A); // A\n\n          conjugate();\n          push(variable); // x\n\n          subtract(); //console.log(\"second factor: \" + stack[tos-1].toString())\n\n          multiply(); //if (factpoly_expo > 0 && isnegativeterm(stack[polycoeff+factpoly_expo]))\n          //  negate()\n          //  negate_noexpand()\n\n          secondDegreePloly = pop();\n\n          if (DEBUG) {\n            console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" success\\nFACTOR=\" + secondDegreePloly);\n          } // factor out negative sign (not req'd because A > 1)\n          //if 0\n\n          /*\n          if (isnegativeterm(A))\n            push(secondDegreePloly)\n            negate()\n            secondDegreePloly = pop()\n            push(partOfPolynomialFactoredSoFar)\n            negate_noexpand()\n            partOfPolynomialFactoredSoFar = pop()\n          */\n          //endif\n          // partOfPolynomialFactoredSoFar is the part of the polynomial that was factored so far,\n          // add the newly found factor to it. Note that we are not actually\n          // multiplying the polynomials fully, we are just leaving them\n          // expressed as (P1)*(P2), we are not expanding the product.\n\n\n          push(partOfPolynomialFactoredSoFar);\n          previousFactorisation = pop(); //console.log(\"previousFactorisation: \" + previousFactorisation)\n\n          push(partOfPolynomialFactoredSoFar);\n          push(secondDegreePloly);\n          multiply_noexpand();\n          partOfPolynomialFactoredSoFar = pop();\n\n          if (remainingPoly == null) {\n            push(zero);\n\n            for (i = i1 = 0, ref1 = factpoly_expo; 0 <= ref1 ? i1 <= ref1 : i1 >= ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n              push(stack[polycoeff + i]);\n              push(variable); // the free variable\n\n              push_integer(i);\n              power();\n              multiply();\n              add();\n            }\n\n            remainingPoly = pop();\n          } //console.log(\"original polynomial (dividend): \" + remainingPoly)\n\n\n          dividend = remainingPoly; //push(dividend)\n          //degree()\n          //startingDegree = pop()\n\n          push(dividend); //console.log(\"dividing \" + stack[tos-1].toString() + \" by \" + secondDegreePloly)\n\n          push(secondDegreePloly); // divisor\n\n          push(variable); // X\n\n          divpoly();\n          remainingPoly = pop();\n          push(remainingPoly);\n          push(secondDegreePloly); // divisor\n\n          multiply();\n          checkingTheDivision = pop();\n\n          if (!equal(checkingTheDivision, dividend)) {\n            //push(dividend)\n            //gcd_sum()\n            //console.log(\"gcd top of stack: \" + stack[tos-1].toString())\n            if (DEBUG) {\n              console.log(\"we found a polynomial based on complex root and its conj but it doesn't divide the poly, quitting\");\n            }\n\n            if (DEBUG) {\n              console.log(\"so just returning previousFactorisation times dividend: \" + previousFactorisation + \" * \" + dividend);\n            }\n\n            push(previousFactorisation);\n            push(dividend);\n            prev_expanding = expanding;\n            expanding = 0;\n            yycondense();\n            expanding = prev_expanding;\n            multiply_noexpand();\n            partOfPolynomialFactoredSoFar = pop();\n            stack[h] = partOfPolynomialFactoredSoFar;\n            moveTos(h + 1);\n            restore();\n            return;\n          } //console.log(\"result: (still to be factored) \" + remainingPoly)\n          //push(remainingPoly)\n          //degree()\n          //remainingDegree = pop()\n\n          /*\n          if compare_numbers(startingDegree, remainingDegree)\n           * ok even if we found a complex root that\n           * together with the conjugate generates a poly in Z,\n           * that doesn't mean that the division would end up in Z.\n           * Example: 1+x^2+x^4+x^6 has +i and -i as one of its roots\n           * so a factor is 1+x^2 ( = (x+i)*(x-i))\n           * BUT \n           */\n\n\n          for (i = j1 = 0, ref2 = factpoly_expo; 0 <= ref2 ? j1 <= ref2 : j1 >= ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n            pop();\n          }\n\n          coeff(variable, remainingPoly);\n          factpoly_expo -= 2;\n        }\n      }\n    } //console.log(\"factpoly_expo: \" + factpoly_expo)\n\n\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" building the remaining unfactored part of the polynomial\");\n    }\n\n    push(zero);\n\n    for (i = l1 = 0, ref3 = factpoly_expo; 0 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[polycoeff + i]);\n      push(variable); // the free variable\n\n      push_integer(i);\n      power();\n      multiply();\n      add();\n    }\n\n    polynomial = pop();\n\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" remaining unfactored part of the polynomial: \" + polynomial.toString());\n    }\n\n    push(polynomial);\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    polynomial = pop();\n\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" new poly with extracted common factor: \" + polynomial.toString());\n    } //debugger\n    // factor out negative sign\n\n\n    if (factpoly_expo > 0 && isnegativeterm(stack[polycoeff + factpoly_expo])) {\n      push(polynomial); //prev_expanding = expanding\n      //expanding = 1\n\n      negate(); //expanding = prev_expanding\n\n      polynomial = pop();\n      push(partOfPolynomialFactoredSoFar);\n      negate_noexpand();\n      partOfPolynomialFactoredSoFar = pop();\n    }\n\n    push(partOfPolynomialFactoredSoFar);\n    push(polynomial);\n    multiply_noexpand();\n    partOfPolynomialFactoredSoFar = pop();\n\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" result: \" + partOfPolynomialFactoredSoFar);\n    }\n\n    stack[h] = partOfPolynomialFactoredSoFar;\n    moveTos(h + 1);\n    return restore();\n  };\n\n  rationalize_coefficients = function rationalize_coefficients(h) {\n    var i, i1, o, ratio, ratioInverse, ref, ref1, ref2, ref3; // LCM of all polynomial coefficients\n\n    ratio = one;\n\n    for (i = o = ref = h, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n      push(stack[i]);\n\n      _denominator();\n\n      push(ratio);\n      lcm();\n      ratio = pop();\n    } // multiply each coefficient by RESULT\n\n\n    for (i = i1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; i = ref2 <= ref3 ? ++i1 : --i1) {\n      push(ratio);\n      push(stack[i]);\n      multiply();\n      stack[i] = pop();\n    } // reciprocate RESULT\n\n\n    push(ratio);\n    reciprocate();\n    ratioInverse = pop();\n\n    if (DEBUG) {\n      console.log(\"rationalize_coefficients result: \" + ratioInverse.toString());\n    }\n\n    return ratioInverse;\n  };\n\n  get_factor_from_real_root = function get_factor_from_real_root(variable, factpoly_expo, polycoeff) {\n    var a0, an, evalPolyResult, h, i, i1, j, j1, l1, m1, na0, nan, o, polynomial, ref, ref1, ref2, ref3, ref4, rootsTries_i, rootsTries_j, testDenominator, testNumerator, testValue;\n\n    if (DEBUG) {\n      console.log(\"get_factor_from_real_root\");\n    }\n\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n\n    if (DEBUG) {\n      push(zero);\n\n      for (i = o = 0, ref = factpoly_expo; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n        push(stack[polycoeff + i]);\n        push(variable);\n        push_integer(i);\n        power();\n        multiply();\n        add();\n      }\n\n      polynomial = pop();\n      console.log(\"POLY=\" + polynomial);\n    }\n\n    h = tos;\n    an = tos;\n    push(stack[polycoeff + factpoly_expo]);\n    divisors_onstack();\n    nan = tos - an;\n    a0 = tos;\n    push(stack[polycoeff + 0]);\n    divisors_onstack();\n    na0 = tos - a0;\n\n    if (DEBUG) {\n      console.log(\"divisors of base term\");\n\n      for (i = i1 = 0, ref1 = na0; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        console.log(\", \" + stack[a0 + i]);\n      }\n\n      console.log(\"divisors of leading term\");\n\n      for (i = j1 = 0, ref2 = nan; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        console.log(\", \" + stack[an + i]);\n      }\n    } // try roots\n\n\n    for (rootsTries_i = l1 = 0, ref3 = nan; 0 <= ref3 ? l1 < ref3 : l1 > ref3; rootsTries_i = 0 <= ref3 ? ++l1 : --l1) {\n      for (rootsTries_j = m1 = 0, ref4 = na0; 0 <= ref4 ? m1 < ref4 : m1 > ref4; rootsTries_j = 0 <= ref4 ? ++m1 : --m1) {\n        //if DEBUG then console.log \"nan: \" + nan + \" na0: \" + na0 + \" i: \" + rootsTries_i + \" j: \" + rootsTries_j\n        testNumerator = stack[an + rootsTries_i];\n        testDenominator = stack[a0 + rootsTries_j];\n        push(testDenominator);\n        push(testNumerator);\n        divide();\n        negate();\n        testValue = pop();\n        evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n\n        if (DEBUG) {\n          console.log(\"try A=\" + testNumerator);\n          console.log(\", B=\" + testDenominator);\n          console.log(\", root \" + variable);\n          console.log(\"=-B/A=\" + testValue);\n          console.log(\", POLY(\" + testValue);\n          console.log(\")=\" + evalPolyResult);\n        }\n\n        if (isZeroAtomOrTensor(evalPolyResult)) {\n          moveTos(h);\n\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n\n          return [1, testNumerator, testDenominator];\n        }\n\n        push(testDenominator);\n        negate();\n        testDenominator = pop();\n        push(testValue);\n        negate();\n        testValue = pop();\n        evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n\n        if (DEBUG) {\n          console.log(\"try A=\" + testNumerator);\n          console.log(\", B=\" + testDenominator);\n          console.log(\", root \" + variable);\n          console.log(\"=-B/A=\" + testValue);\n          console.log(\", POLY(\" + testValue);\n          console.log(\")=\" + evalPolyResult);\n        }\n\n        if (isZeroAtomOrTensor(evalPolyResult)) {\n          moveTos(h);\n\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n\n          return [1, testNumerator, testDenominator];\n        }\n      }\n    }\n\n    moveTos(h);\n\n    if (DEBUG) {\n      console.log(\"get_factor_from_real_root returning\");\n    }\n\n    return [0, null, null];\n  };\n\n  get_factor_from_complex_root = function get_factor_from_complex_root(remainingPoly, factpoly_expo, polycoeff) {\n    var a0, an, evalPolyResult, h, i, i1, j, na0, nan, o, rootsTries_i, rootsTries_j, testValue;\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n\n    if (factpoly_expo <= 2) {\n      if (DEBUG) {\n        console.log(\"no more factoring via complex roots to be found in polynomial of degree <= 2\");\n      }\n\n      return [0, null];\n    }\n\n    if (DEBUG) {\n      console.log(\"complex root finding for POLY=\" + remainingPoly);\n    }\n\n    h = tos;\n    an = tos; // trying -1^(2/3) which generates a polynomial in Z\n    // generates x^2 + 2x + 1\n\n    push_integer(-1);\n    push_rational(2, 3);\n    power();\n\n    _rect();\n\n    testValue = pop();\n\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + testValue);\n    }\n\n    push(testValue);\n    evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + evalPolyResult);\n    }\n\n    if (isZeroAtomOrTensor(evalPolyResult)) {\n      moveTos(h);\n\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n\n      return [1, testValue];\n    } // trying 1^(2/3) which generates a polynomial in Z\n    // http://www.wolframalpha.com/input/?i=(1)%5E(2%2F3)\n    // generates x^2 - 2x + 1\n\n\n    push_integer(1);\n    push_rational(2, 3);\n    power();\n\n    _rect();\n\n    testValue = pop();\n\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + testValue);\n    }\n\n    push(testValue);\n    evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + evalPolyResult);\n    }\n\n    if (isZeroAtomOrTensor(evalPolyResult)) {\n      moveTos(h);\n\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n\n      return [1, testValue];\n    } // trying some simple complex numbers. All of these\n    // generate polynomials in Z\n\n\n    for (rootsTries_i = o = -10; o <= 10; rootsTries_i = ++o) {\n      for (rootsTries_j = i1 = 1; i1 <= 5; rootsTries_j = ++i1) {\n        push_integer(rootsTries_i);\n        push_integer(rootsTries_j);\n        push(imaginaryunit);\n        multiply();\n        add();\n\n        _rect();\n\n        testValue = pop();\n\n        if (DEBUG) {\n          console.log(\"complex root finding: trying simple complex combination \" + testValue);\n        }\n\n        push(testValue);\n        evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue); //console.log(\"complex root finding result: \" + evalPolyResult)\n\n        if (isZeroAtomOrTensor(evalPolyResult)) {\n          moveTos(h);\n\n          if (DEBUG) {\n            console.log(\"found complex root: \" + evalPolyResult);\n          }\n\n          return [1, testValue];\n        }\n      }\n    }\n\n    moveTos(h);\n\n    if (DEBUG) {\n      console.log(\"get_factor_from_complex_root returning 0\");\n    }\n\n    return [0, null];\n  }; //-----------------------------------------------------------------------------\n  //  Divide a polynomial by Ax+B\n  //  Input:  on stack:  polycoeff  Dividend coefficients\n  //      factpoly_expo   as parameter\n  //      A    as parameter\n  //      B    as parameter\n  //  Output:   on stack: polycoeff  Contains quotient coefficients\n  //-----------------------------------------------------------------------------\n\n\n  yydivpoly = function yydivpoly(factpoly_expo, polycoeff, A, B) {\n    var Q, i, o, ref;\n    Q = zero;\n\n    for (i = o = ref = factpoly_expo; ref <= 0 ? o < 0 : o > 0; i = ref <= 0 ? ++o : --o) {\n      push(stack[polycoeff + i]);\n      stack[polycoeff + i] = Q;\n      push(A);\n      divide();\n      Q = pop();\n      push(stack[polycoeff + i - 1]);\n      push(Q);\n      push(B);\n      multiply();\n      subtract();\n      stack[polycoeff + i - 1] = pop();\n    }\n\n    stack[polycoeff + 0] = Q;\n\n    if (DEBUG) {\n      return console.log(\"yydivpoly Q: \" + Q.toString());\n    }\n  };\n\n  Evalpoly = function Evalpoly(factpoly_expo, polycoeff, evaluateAt) {\n    var i, o, ref;\n    push(zero);\n\n    for (i = o = ref = factpoly_expo; ref <= 0 ? o <= 0 : o >= 0; i = ref <= 0 ? ++o : --o) {\n      push(evaluateAt);\n      multiply();\n      push(stack[polycoeff + i]); //if DEBUG\n      //  console.log(\"Evalpoly top of stack:\")\n      //  console.log stack[tos-i].toString()\n\n      add();\n    }\n\n    return pop();\n  }; // Push expression factors onto the stack. For example...\n  // Input\n  //       2\n  //     3x  + 2x + 1\n  // Output on stack\n  //     [  3  ]\n  //     [ x^2 ]\n  //     [  2  ]\n  //     [  x  ]\n  //     [  1  ]\n  // but not necessarily in that order. Returns the number of factors.\n  // Local U *p is OK here because no functional path to garbage collector.\n\n\n  factors = function factors(p) {\n    var h;\n    h = tos;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        push_term_factors(car(p));\n        p = cdr(p);\n      }\n    } else {\n      push_term_factors(p);\n    }\n\n    return tos - h;\n  }; // Local U *p is OK here because no functional path to garbage collector.\n\n\n  push_term_factors = function push_term_factors(p) {\n    var results;\n\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      return push(p);\n    }\n  };\n\n  Eval_filter = function Eval_filter() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      filter();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  filter = function filter() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    filter_main();\n    return restore();\n  };\n\n  filter_main = function filter_main() {\n    if (car(p1) === symbol(ADD)) {\n      return filter_sum();\n    } else if (istensor(p1)) {\n      return filter_tensor();\n    } else if (_Find(p1, p2)) {\n      return push_integer(0);\n    } else {\n      return push(p1);\n    }\n  };\n\n  filter_sum = function filter_sum() {\n    var results;\n    push_integer(0);\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      filter();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  filter_tensor = function filter_tensor() {\n    var i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    n = p1.tensor.nelem;\n    p3 = alloc_tensor(n);\n    p3.tensor.ndim = p1.tensor.ndim;\n\n    for (i = o = 0, ref = p1.tensor.ndim; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      filter();\n      p3.tensor.elem[i] = pop();\n    }\n\n    return push(p3);\n  };\n\n  Eval_float = function Eval_float() {\n    evaluatingAsFloats++;\n    push(cadr(p1));\n    Eval();\n\n    _yyfloat();\n\n    Eval();\n    return evaluatingAsFloats--;\n  };\n\n  checkFloatHasWorkedOutCompletely = function checkFloatHasWorkedOutCompletely(nodeToCheck) {\n    var numberOfEs, numberOfMults, numberOfPIs, numberOfPowers, numberOfSums;\n    numberOfPowers = _countOccurrencesOfSymbol(symbol(POWER), nodeToCheck);\n    numberOfPIs = _countOccurrencesOfSymbol(symbol(PI), nodeToCheck);\n    numberOfEs = _countOccurrencesOfSymbol(symbol(E), nodeToCheck);\n    numberOfMults = _countOccurrencesOfSymbol(symbol(MULTIPLY), nodeToCheck);\n    numberOfSums = _countOccurrencesOfSymbol(symbol(ADD), nodeToCheck);\n\n    if (DEBUG) {\n      console.log(\"     ... numberOfPowers: \" + numberOfPowers);\n      console.log(\"     ... numberOfPIs: \" + numberOfPIs);\n      console.log(\"     ... numberOfEs: \" + numberOfEs);\n      console.log(\"     ... numberOfMults: \" + numberOfMults);\n      console.log(\"     ... numberOfSums: \" + numberOfSums);\n    }\n\n    if (numberOfPowers > 1 || numberOfPIs > 0 || numberOfEs > 0 || numberOfMults > 1 || numberOfSums > 1) {\n      return stop(\"float: some unevalued parts in \" + nodeToCheck);\n    }\n  };\n\n  zzfloat = function zzfloat() {\n    save();\n    evaluatingAsFloats++; //p1 = pop()\n    //push(cadr(p1))\n    //push(p1)\n\n    Eval();\n\n    _yyfloat();\n\n    Eval();\n    evaluatingAsFloats--;\n    return restore();\n  }; // zzfloat doesn't necessarily result in a double\n  // , for example if there are variables. But\n  // in many of the tests there should be indeed\n  // a float, this line comes handy to highlight\n  // when that doesn't happen for those tests.\n  //checkFloatHasWorkedOutCompletely(stack[tos-1])\n\n\n  _yyfloat = function yyfloat() {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    evaluatingAsFloats++;\n    save();\n    p1 = pop();\n\n    if (iscons(p1)) {\n      h = tos;\n\n      while (iscons(p1)) {\n        push(car(p1));\n\n        _yyfloat();\n\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n\n      for (i = o = 0, ref = p1.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n\n        _yyfloat();\n\n        p1.tensor.elem[i] = pop();\n      }\n\n      push(p1);\n    } else if (p1.k === NUM) {\n      push(p1);\n      bignum_float();\n    } else if (p1 === symbol(PI)) {\n      push_double(Math.PI);\n    } else if (p1 === symbol(E)) {\n      push_double(Math.E);\n    } else {\n      push(p1);\n    }\n\n    restore();\n    return evaluatingAsFloats--;\n  };\n\n  Eval_floor = function Eval_floor() {\n    push(cadr(p1));\n    Eval();\n    return yfloor();\n  };\n\n  yfloor = function yfloor() {\n    save();\n    yyfloor();\n    return restore();\n  };\n\n  yyfloor = function yyfloor() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (!isNumericAtom(p1)) {\n      push_symbol(FLOOR);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.floor(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n\n    if (isnegativenumber(p1)) {\n      push_integer(-1);\n      return add();\n    }\n  }; // 'for' function\n\n  /*\n  x=0\n  y=2\n  for(do(x=sqrt(2+x),y=2*y/x),k,1,9)\n  float(y)\n   X: k\n  B: 1...9\n   1st parameter is the body\n  2nd parameter is the variable to loop with\n  3rd and 4th are the limits\n   */\n  //define A p3\n  //define B p4\n  //define I p5\n  //define X p6\n\n\n  Eval_for = function Eval_for() {\n    var i, j, k, loopingVariable, o, ref, ref1;\n    i = 0;\n    j = 0;\n    k = 0;\n    loopingVariable = caddr(p1);\n\n    if (!issymbol(loopingVariable)) {\n      stop(\"for: 2nd arg should be the variable to loop over\");\n    }\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    } // remember contents of the index\n    // variable so we can put it back after the loop\n\n\n    p4 = get_binding(loopingVariable);\n\n    for (i = o = ref = j, ref1 = k; ref <= ref1 ? o <= ref1 : o >= ref1; i = ref <= ref1 ? ++o : --o) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(loopingVariable, p5);\n      push(cadr(p1));\n      Eval();\n      pop();\n    } // put back the index variable to original content\n\n\n    set_binding(loopingVariable, p4); // return value\n\n    return push_symbol(NIL);\n  }; //-----------------------------------------------------------------------------\n  //  Author : philippe.billet@noos.fr\n  //  Gamma function gamma(x)\n  //-----------------------------------------------------------------------------\n\n\n  Eval_gamma = function Eval_gamma() {\n    push(cadr(p1));\n    Eval();\n    return gamma();\n  };\n\n  gamma = function gamma() {\n    save();\n    gammaf();\n    return restore();\n  };\n\n  gammaf = function gammaf() {\n    //  double d\n    p1 = pop();\n\n    if (isrational(p1) && MEQUAL(p1.q.a, 1) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push_rational(1, 2);\n      power();\n      return;\n    }\n\n    if (isrational(p1) && MEQUAL(p1.q.a, 3) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push_rational(1, 2);\n      power();\n      push_rational(1, 2);\n      multiply();\n      return;\n    } //  if (p1->k == DOUBLE) {\n    //    d = exp(lgamma(p1.d))\n    //    push_double(d)\n    //    return\n    //  }\n\n\n    if (isnegativeterm(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push_integer(-1);\n      multiply();\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      push(p1);\n      multiply();\n      sine();\n      push(p1);\n      multiply();\n      push(p1);\n      negate();\n      gamma();\n      multiply();\n      divide();\n      return;\n    }\n\n    if (car(p1) === symbol(ADD)) {\n      gamma_of_sum();\n      return;\n    }\n\n    push_symbol(GAMMA);\n    push(p1);\n    list(2);\n  };\n\n  gamma_of_sum = function gamma_of_sum() {\n    p3 = cdr(p1);\n\n    if (isrational(car(p3)) && MEQUAL(car(p3).q.a, 1) && MEQUAL(car(p3).q.b, 1)) {\n      push(cadr(p3));\n      push(cadr(p3));\n      gamma();\n      return multiply();\n    } else {\n      if (isrational(car(p3)) && MEQUAL(car(p3).q.a, -1) && MEQUAL(car(p3).q.b, 1)) {\n        push(cadr(p3));\n        gamma();\n        push(cadr(p3));\n        push_integer(-1);\n        add();\n        return divide();\n      } else {\n        push_symbol(GAMMA);\n        push(p1);\n        list(2);\n      }\n    }\n  }; // Greatest common denominator\n  // can also be run on polynomials, however\n  // it works only on the integers and it works\n  // by factoring the polynomials (not Euclidean algorithm)\n\n\n  Eval_gcd = function Eval_gcd() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      gcd();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  gcd = function gcd() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    gcd_main();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  gcd_main = function gcd_main() {\n    var polyVar;\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n\n    if (DEBUG) {\n      console.log(\"gcd_main: p1: \" + p1 + \" p2: \" + p2);\n    }\n\n    if (equal(p1, p2)) {\n      push(p1);\n      return;\n    }\n\n    if (isrational(p1) && isrational(p2)) {\n      push(p1);\n      push(p2);\n      gcd_numbers();\n      return;\n    }\n\n    if (polyVar = areunivarpolysfactoredorexpandedform(p1, p2)) {\n      gcd_polys(polyVar);\n      return;\n    }\n\n    if (car(p1) === symbol(ADD) && car(p2) === symbol(ADD)) {\n      gcd_sum_sum();\n      return;\n    }\n\n    if (car(p1) === symbol(ADD)) {\n      gcd_sum(p1);\n      p1 = pop();\n    }\n\n    if (car(p2) === symbol(ADD)) {\n      gcd_sum(p2);\n      p2 = pop();\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      gcd_sum_product();\n      return;\n    }\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      gcd_product_sum();\n      return;\n    }\n\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n\n    return gcd_powers_with_same_base();\n  };\n\n  areunivarpolysfactoredorexpandedform = function areunivarpolysfactoredorexpandedform(p1, p2) {\n    var polyVar;\n\n    if (DEBUG) {\n      console.log(\"areunivarpolysfactoredorexpandedform: p1: \" + p1 + \" p2: \" + p2);\n    }\n\n    if (polyVar = isunivarpolyfactoredorexpandedform(p1)) {\n      if (isunivarpolyfactoredorexpandedform(p2, polyVar)) {\n        return polyVar;\n      }\n    }\n\n    return false;\n  };\n\n  gcd_polys = function gcd_polys(polyVar) {\n    if (DEBUG) {\n      console.log(\"gcd_polys: p1: \" + p1 + \" polyVar: \" + polyVar);\n    } // gcd of factors\n\n\n    push(p1);\n    push(polyVar);\n    factorpoly();\n    p1 = pop();\n    push(p2);\n    push(polyVar);\n    factorpoly();\n    p2 = pop();\n\n    if (DEBUG) {\n      console.log(\"GCD: factored polys:\");\n    }\n\n    if (DEBUG) {\n      console.log(\"  p1:\" + p1.toString());\n    }\n\n    if (DEBUG) {\n      console.log(\"  p2:\" + p2.toString());\n    } // In case one of two polynomials can be factored,\n    // (and only in that case), then\n    // we'll need to run gcd_factors on the two polynomials.\n    // (In case neither of them can be factored there is no gcd).\n    // However, gcd_factors expects two _products_ , and\n    // in case _one_ of the polynomials can't be factored it will look\n    // like a sum instead of a product.\n    // So, we'll have to make that sum to look like a factor:\n    // let's just turn it into a product with 1.\n    // in case one of the two polys has been factored...\n\n\n    if (car(p1) === symbol(MULTIPLY) || car(p2) === symbol(MULTIPLY)) {\n      // then make sure that if one of them is a single\n      // factor, we take the sum and wrap it into a\n      // multiplication by 1\n      if (car(p1) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push(one);\n        list(3);\n        p1 = pop();\n      }\n\n      if (car(p2) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p2);\n        push(one);\n        list(3);\n        p2 = pop();\n      }\n    }\n\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n\n    gcd_powers_with_same_base();\n    return true;\n  };\n\n  gcd_product_product = function gcd_product_product() {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n\n    while (iscons(p3)) {\n      p4 = cdr(p2);\n\n      while (iscons(p4)) {\n        push(car(p3));\n        push(car(p4));\n        gcd();\n        multiply();\n        p4 = cdr(p4);\n      }\n\n      results.push(p3 = cdr(p3));\n    }\n\n    return results;\n  };\n\n  gcd_powers_with_same_base = function gcd_powers_with_same_base() {\n    if (car(p1) === symbol(POWER)) {\n      p3 = caddr(p1); // exponent\n\n      p1 = cadr(p1); // base\n    } else {\n      p3 = one;\n    }\n\n    if (car(p2) === symbol(POWER)) {\n      p4 = caddr(p2); // exponent\n\n      p2 = cadr(p2); // base\n    } else {\n      p4 = one;\n    }\n\n    if (!equal(p1, p2)) {\n      push(one);\n      return;\n    } // are both exponents numerical?\n\n\n    if (isNumericAtom(p3) && isNumericAtom(p4)) {\n      push(p1);\n\n      if (lessp(p3, p4)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n\n      power();\n      return;\n    } // are the exponents multiples of eah other?\n\n\n    push(p3);\n    push(p4);\n    divide();\n    p5 = pop();\n\n    if (isNumericAtom(p5)) {\n      push(p1); // choose the smallest exponent\n\n      if (car(p3) === symbol(MULTIPLY) && isNumericAtom(cadr(p3))) {\n        p5 = cadr(p3);\n      } else {\n        p5 = one;\n      }\n\n      if (car(p4) === symbol(MULTIPLY) && isNumericAtom(cadr(p4))) {\n        p6 = cadr(p4);\n      } else {\n        p6 = one;\n      }\n\n      if (lessp(p5, p6)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n\n      power();\n      return;\n    }\n\n    push(p3);\n    push(p4);\n    subtract();\n    p5 = pop();\n\n    if (!isNumericAtom(p5)) {\n      push(one);\n      return;\n    } // can't be equal because of test near beginning\n\n\n    push(p1);\n\n    if (isnegativenumber(p5)) {\n      push(p3);\n    } else {\n      push(p4);\n    }\n\n    return power();\n  }; // in this case gcd is used as a composite function, i.e. gcd(gcd(gcd...\n\n\n  gcd_sum_sum = function gcd_sum_sum() {\n    if (length(p1) !== length(p2)) {\n      push(one);\n      return;\n    }\n\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n\n    p3 = pop();\n    p4 = cdr(p2);\n    push(car(p4));\n    p4 = cdr(p4);\n\n    while (iscons(p4)) {\n      push(car(p4));\n      gcd();\n      p4 = cdr(p4);\n    }\n\n    p4 = pop();\n    push(p1);\n    push(p3);\n    divide();\n    p5 = pop();\n    push(p2);\n    push(p4);\n    divide();\n    p6 = pop();\n\n    if (equal(p5, p6)) {\n      push(p5);\n      push(p3);\n      push(p4);\n      gcd();\n      return multiply();\n    } else {\n      return push(one);\n    }\n  };\n\n  gcd_sum = function gcd_sum(p) {\n    var results;\n    p = cdr(p);\n    push(car(p));\n    p = cdr(p);\n    results = [];\n\n    while (iscons(p)) {\n      push(car(p));\n      gcd();\n      results.push(p = cdr(p));\n    }\n\n    return results;\n  };\n\n  gcd_sum_product = function gcd_sum_product() {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n\n    while (iscons(p3)) {\n      push(car(p3));\n      push(p2);\n      gcd();\n      multiply();\n      results.push(p3 = cdr(p3));\n    }\n\n    return results;\n  };\n\n  gcd_product_sum = function gcd_product_sum() {\n    var results;\n    push(one);\n    p4 = cdr(p2);\n    results = [];\n\n    while (iscons(p4)) {\n      push(p1);\n      push(car(p4));\n      gcd();\n      multiply();\n      results.push(p4 = cdr(p4));\n    }\n\n    return results;\n  }; // Guess which symbol to use for derivative, integral, etc.\n\n\n  guess = function guess() {\n    var p;\n    p = pop();\n    push(p);\n\n    if (_Find(p, symbol(SYMBOL_X))) {\n      return push_symbol(SYMBOL_X);\n    } else if (_Find(p, symbol(SYMBOL_Y))) {\n      return push_symbol(SYMBOL_Y);\n    } else if (_Find(p, symbol(SYMBOL_Z))) {\n      return push_symbol(SYMBOL_Z);\n    } else if (_Find(p, symbol(SYMBOL_T))) {\n      return push_symbol(SYMBOL_T);\n    } else if (_Find(p, symbol(SYMBOL_S))) {\n      return push_symbol(SYMBOL_S);\n    } else {\n      return push_symbol(SYMBOL_X);\n    }\n  }; //-----------------------------------------------------------------------------\n  //  Hermite polynomial\n  //  Input:    tos-2    x  (can be a symbol or expr)\n  //      tos-1    n\n  //  Output:    Result on stack\n  //-----------------------------------------------------------------------------\n\n\n  hermite = function hermite() {\n    save();\n    yyhermite();\n    return restore();\n  }; // uses the recurrence relation H(x,n+1)=2*x*H(x,n)-2*n*H(x,n-1)\n  //define X p1\n  //define N p2\n  //define Y p3\n  //define Y1 p4\n  //define Y0 p5\n\n\n  yyhermite = function yyhermite() {\n    var n;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push_symbol(HERMITE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    if (issymbol(p1)) {\n      return yyhermite2(n);\n    } else {\n      p3 = p1;\n      p1 = symbol(SECRETX);\n      yyhermite2(n);\n      p1 = p3;\n      push(symbol(SECRETX));\n      push(p1);\n\n      _subst();\n\n      return Eval();\n    }\n  };\n\n  yyhermite2 = function yyhermite2(n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p4 = pop();\n    results = [];\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p4;\n      p4 = pop();\n      push(p1);\n      push(p4);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(2);\n      results.push(multiply());\n    }\n\n    return results;\n  }; //-----------------------------------------------------------------------------\n  //  Create a Hilbert matrix\n  //  Input:    Dimension on stack\n  //  Output:    Hilbert matrix on stack\n  //  Example:\n  //  > hilbert(5)\n  //  ((1,1/2,1/3,1/4),(1/2,1/3,1/4,1/5),(1/3,1/4,1/5,1/6),(1/4,1/5,1/6,1/7))\n  //-----------------------------------------------------------------------------\n  //define A p1\n  //define N p2\n  //define AELEM(i, j) A->u.tensor->elem[i * n + j]\n\n\n  hilbert = function hilbert() {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p2 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (n < 2) {\n      push_symbol(HILBERT);\n      push(p2);\n      list(2);\n      restore();\n      return;\n    }\n\n    push_zero_matrix(n, n);\n    p1 = pop();\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        push_integer(i + j + 1);\n        inverse();\n        p1.tensor.elem[i * n + j] = pop();\n      }\n    }\n\n    push(p1);\n    return restore();\n  };\n\n  DEBUG_IMAG = false;\n\n  Eval_imag = function Eval_imag() {\n    push(cadr(p1));\n    Eval();\n    return imag();\n  };\n\n  imag = function imag() {\n    save();\n\n    _rect();\n\n    p1 = pop();\n\n    if (DEBUG_IMAG) {\n      console.log(\"IMAGE of \" + p1);\n    }\n\n    push(p1);\n    push(p1);\n    conjugate();\n\n    if (DEBUG_IMAG) {\n      console.log(\" image: conjugate result: \" + stack[tos - 1]);\n    }\n\n    subtract();\n    push_integer(2);\n    divide();\n\n    if (DEBUG_IMAG) {\n      console.log(\" image: 1st divide result: \" + stack[tos - 1]);\n    }\n\n    push(imaginaryunit);\n    divide();\n\n    if (DEBUG_IMAG) {\n      console.log(\" image: 2nd divide result: \" + stack[tos - 1]);\n    }\n\n    return restore();\n  }; // n is the total number of things on the stack. The first thing on the stack\n  // is the object to be indexed, followed by the indices themselves.\n  // called by Eval_index\n\n\n  index_function = function index_function(n) {\n    var i, i1, j1, k, l1, m, m1, ndim, nelem, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    save();\n    s = tos - n;\n    p1 = stack[s];\n    ndim = p1.tensor.ndim;\n    m = n - 1;\n\n    if (m > ndim) {\n      stop(\"too many indices for tensor\");\n    }\n\n    k = 0;\n\n    for (i = o = 0, ref = m; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 1]);\n      t = pop_integer();\n\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"index out of range\");\n      }\n\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n\n    if (ndim === m) {\n      moveTos(tos - n);\n      push(p1.tensor.elem[k]);\n      restore();\n      return;\n    }\n\n    for (i = i1 = ref1 = m, ref2 = ndim; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    }\n\n    nelem = 1;\n\n    for (i = j1 = ref3 = m, ref4 = ndim; ref3 <= ref4 ? j1 < ref4 : j1 > ref4; i = ref3 <= ref4 ? ++j1 : --j1) {\n      nelem *= p1.tensor.dim[i];\n    }\n\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim - m;\n\n    for (i = l1 = ref5 = m, ref6 = ndim; ref5 <= ref6 ? l1 < ref6 : l1 > ref6; i = ref5 <= ref6 ? ++l1 : --l1) {\n      p2.tensor.dim[i - m] = p1.tensor.dim[i];\n    }\n\n    for (i = m1 = 0, ref7 = nelem; 0 <= ref7 ? m1 < ref7 : m1 > ref7; i = 0 <= ref7 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[k + i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  }; //-----------------------------------------------------------------------------\n  //  Input:    n    Number of args on stack\n  //      tos-n    Right-hand value\n  //      tos-n+1    Left-hand value\n  //      tos-n+2    First index\n  //      .\n  //      .\n  //      .\n  //      tos-1    Last index\n  //  Output:    Result on stack\n  //-----------------------------------------------------------------------------\n  //define LVALUE p1\n  //define RVALUE p2\n  //define TMP p3\n\n\n  set_component = function set_component(n) {\n    var i, i1, j1, k, l1, m, m1, n1, ndim, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    t = 0;\n    save();\n\n    if (n < 3) {\n      stop(\"error in indexed assign\");\n    }\n\n    s = tos - n;\n    p2 = stack[s];\n    p1 = stack[s + 1];\n\n    if (!istensor(p1)) {\n      // p1 is LVALUE\n      stop(\"error in indexed assign: assigning to something that is not a tensor\");\n    }\n\n    ndim = p1.tensor.ndim;\n    m = n - 2;\n\n    if (m > ndim) {\n      stop(\"error in indexed assign\");\n    }\n\n    k = 0;\n\n    for (i = o = 0, ref = m; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 2]);\n      t = pop_integer();\n\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"error in indexed assign\\n\");\n      }\n\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n\n    for (i = i1 = ref1 = m, ref2 = ndim; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    } // copy\n\n\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n\n    for (i = j1 = 0, ref3 = p1.tensor.ndim; 0 <= ref3 ? j1 < ref3 : j1 > ref3; i = 0 <= ref3 ? ++j1 : --j1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = l1 = 0, ref4 = p1.tensor.nelem; 0 <= ref4 ? l1 < ref4 : l1 > ref4; i = 0 <= ref4 ? ++l1 : --l1) {\n      p3.tensor.elem[i] = p1.tensor.elem[i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p3);\n    p1 = p3;\n\n    if (ndim === m) {\n      if (istensor(p2)) {\n        // p2 is RVALUE\n        stop(\"error in indexed assign\");\n      }\n\n      p1.tensor.elem[k] = p2;\n      check_tensor_dimensions(p1);\n      moveTos(tos - n);\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (!istensor(p2)) {\n      // p2 is RVALUE\n      stop(\"error in indexed assign\");\n    }\n\n    if (ndim - m !== p2.tensor.ndim) {\n      // p2 is RVALUE\n      stop(\"error in indexed assign\");\n    } // p2 is RVALUE\n\n\n    for (i = m1 = 0, ref5 = p2.tensor.ndim; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n      if (p1.tensor.dim[m + i] !== p2.tensor.dim[i]) {\n        stop(\"error in indexed assign\");\n      }\n    } // p2 is RVALUE\n    // copy rvalue\n\n\n    for (i = n1 = 0, ref6 = p2.tensor.nelem; 0 <= ref6 ? n1 < ref6 : n1 > ref6; i = 0 <= ref6 ? ++n1 : --n1) {\n      p1.tensor.elem[k + i] = p2.tensor.elem[i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p1);\n    return restore();\n  };\n\n  _Eval_inner = function Eval_inner() {\n    var difference, i, i1, j1, l1, moretheArguments, o, operands, ref, ref1, ref2, ref3, refinedOperands, results, secondArgument, shift, theArguments; // if there are more than two arguments then\n    // reduce it to a more standard version\n    // of two arguments, which means we need to\n    // transform the arguments into a tree of\n    // inner products e.g.\n    // inner(a,b,c) becomes inner(a,inner(b,c))\n    // this is so we can get to a standard binary-tree\n    // version that is simpler to manipulate.\n\n    theArguments = [];\n    theArguments.push(car(cdr(p1)));\n    secondArgument = car(cdr(cdr(p1)));\n\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n\n    moretheArguments = cdr(cdr(p1));\n\n    while (moretheArguments !== symbol(NIL)) {\n      theArguments.push(car(moretheArguments));\n      moretheArguments = cdr(moretheArguments);\n    } // make it so e.g. inner(a,b,c) becomes inner(a,inner(b,c))\n\n\n    if (theArguments.length > 2) {\n      push_symbol(INNER);\n      push(theArguments[theArguments.length - 2]);\n      push(theArguments[theArguments.length - 1]);\n      list(3);\n\n      for (i = o = 2, ref = theArguments.length; 2 <= ref ? o < ref : o > ref; i = 2 <= ref ? ++o : --o) {\n        push_symbol(INNER);\n        swap();\n        push(theArguments[theArguments.length - i - 1]);\n        swap();\n        list(3);\n      }\n\n      p1 = pop();\n\n      _Eval_inner();\n\n      return;\n    } // TODO we have to take a look at the whole\n    // sequence of operands and make simplifications\n    // on that...\n\n\n    operands = [];\n\n    _get_innerprod_factors(p1, operands); //console.log \"printing operands --------\"\n    //for i in [0...operands.length]\n    //  console.log \"operand \" + i + \" : \" + operands[i]\n\n\n    refinedOperands = []; // removing all identity matrices\n\n    for (i = i1 = 0, ref1 = operands.length; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      if (operands[i] === symbol(SYMBOL_IDENTITY_MATRIX)) {\n        continue;\n      } else {\n        refinedOperands.push(operands[i]);\n      }\n    }\n\n    operands = refinedOperands;\n    refinedOperands = [];\n\n    if (operands.length > 1) {\n      // removing all consecutive pairs of inverses\n      // so we can answer that inv(a)·a results in the\n      // identity matrix. We want to catch symbolic inverses\n      // not numeric inverses, those will just take care\n      // of themselves when multiplied\n      shift = 0;\n\n      for (i = j1 = 0, ref2 = operands.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        //console.log \"comparing if \" + operands[i+shift] + \" and \" + operands[i+shift+1] + \" are inverses of each other\"\n        if (i + shift + 1 <= operands.length - 1) {\n          if (!(_isNumericAtomOrTensor(operands[i + shift]) || _isNumericAtomOrTensor(operands[i + shift + 1]))) {\n            push(operands[i + shift]);\n            Eval();\n\n            _inv();\n\n            push(operands[i + shift + 1]);\n            Eval();\n            subtract();\n            difference = pop(); //console.log \"result: \" + difference\n\n            if (isZeroAtomOrTensor(difference)) {\n              shift += 1;\n            } else {\n              refinedOperands.push(operands[i + shift]);\n            }\n          } else {\n            refinedOperands.push(operands[i + shift]);\n          }\n        } else {\n          break;\n        } //console.log \"i: \" + i + \" shift: \" + shift + \" operands.length: \" + operands.length\n\n\n        if (i + shift === operands.length - 2) {\n          //console.log \"adding last operand 2 \"\n          refinedOperands.push(operands[operands.length - 1]);\n        }\n\n        if (i + shift >= operands.length - 1) {\n          break;\n        }\n      }\n\n      operands = refinedOperands;\n    } //console.log \"refined operands --------\"\n    //for i in [0...refinedOperands.length]\n    //  console.log \"refined operand \" + i + \" : \" + refinedOperands[i]\n    //console.log \"stack[tos-1]: \" + stack[tos-1]\n    // now rebuild the arguments, just using the\n    // refined operands\n\n\n    push(symbol(INNER)); //console.log \"rebuilding the argument ----\"\n\n    if (operands.length > 0) {\n      for (i = l1 = 0, ref3 = operands.length; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n        //console.log \"pushing \" + operands[i]\n        push(operands[i]);\n      }\n    } else {\n      pop();\n      push(symbol(SYMBOL_IDENTITY_MATRIX));\n      return;\n    } //console.log \"list(operands.length): \" + (operands.length+1)\n\n\n    list(operands.length + 1);\n    p1 = pop();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n\n      _inner();\n\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  }; // inner definition\n\n\n  _inner = function inner() {\n    var arg1, arg2, arg3, subtractionResult;\n    save();\n    p2 = pop();\n    p1 = pop(); // more in general, when a and b are scalars,\n    // inner(a*M1, b*M2) is equal to\n    // a*b*inner(M1,M2), but of course we can only\n    // \"bring out\" in a and b the scalars, because\n    // it's the only commutative part.\n    // that's going to be trickier to do in general\n    // but let's start with just the signs.\n\n    if (isnegativeterm(p2) && isnegativeterm(p1)) {\n      push(p2);\n      negate();\n      p2 = pop();\n      push(p1);\n      negate();\n      p1 = pop();\n    } // since inner is associative,\n    // put it in a canonical form i.e.\n    // inner(inner(a,b),c) ->\n    // inner(a,inner(b,c))\n    // so that we can recognise when they\n    // are equal.\n\n\n    if (isinnerordot(p1)) {\n      arg1 = car(cdr(p1)); //a\n\n      arg2 = car(cdr(cdr(p1))); //b\n\n      arg3 = p2;\n      p1 = arg1;\n      push(arg2);\n      push(arg3);\n\n      _inner();\n\n      p2 = pop();\n    } // Check if one of the operands is the identity matrix\n    // we could maybe use Eval_testeq here but\n    // this seems to suffice?\n\n\n    if (p1 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p2);\n      restore();\n      return;\n    } else if (p2 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (istensor(p1) && istensor(p2)) {\n      inner_f();\n    } else {\n      if (!(_isNumericAtomOrTensor(p1) || _isNumericAtomOrTensor(p2))) {\n        push(p1);\n        push(p2);\n\n        _inv();\n\n        subtract();\n        subtractionResult = pop();\n\n        if (isZeroAtomOrTensor(subtractionResult)) {\n          push_symbol(SYMBOL_IDENTITY_MATRIX);\n          restore();\n          return;\n        }\n      } // if either operand is a sum then distribute\n      // (if we are in expanding mode)\n\n\n      if (expanding && isadd(p1)) {\n        p1 = cdr(p1);\n        push(zero);\n\n        while (iscons(p1)) {\n          push(car(p1));\n          push(p2);\n\n          _inner();\n\n          add();\n          p1 = cdr(p1);\n        }\n\n        restore();\n        return;\n      }\n\n      if (expanding && isadd(p2)) {\n        p2 = cdr(p2);\n        push(zero);\n\n        while (iscons(p2)) {\n          push(p1);\n          push(car(p2));\n\n          _inner();\n\n          add();\n          p2 = cdr(p2);\n        }\n\n        restore();\n        return;\n      }\n\n      push(p1);\n      push(p2); // there are 8 remaining cases here, since each of the\n      // two arguments can only be a scalar/tensor/unknown\n      // and the tensor - tensor case was caught\n      // upper in the code\n\n      if (istensor(p1) && isNumericAtom(p2)) {\n        // one case covered by this branch:\n        //   tensor - scalar\n        tensor_times_scalar();\n      } else if (isNumericAtom(p1) && istensor(p2)) {\n        // one case covered by this branch:\n        //   scalar - tensor\n        scalar_times_tensor();\n      } else {\n        if (isNumericAtom(p1) || isNumericAtom(p2)) {\n          // three cases covered by this branch:\n          //   unknown - scalar\n          //   scalar - unknown\n          //   scalar  - scalar\n          // in these cases a normal multiplication\n          // will be OK\n          multiply();\n        } else {\n          // three cases covered by this branch:\n          //   unknown - unknown\n          //   unknown - tensor\n          //   tensor  - unknown\n          // in this case we can't use normal\n          // multiplication.\n          pop();\n          pop();\n          push_symbol(INNER);\n          push(p1);\n          push(p2);\n          list(3);\n          restore();\n          return;\n        }\n      }\n    }\n\n    return restore();\n  }; // inner product of tensors p1 and p2\n\n\n  inner_f = function inner_f() {\n    var a, ak, b, bk, c, i, i1, j, j1, k, l1, m1, n, n1, ndim, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    n = p1.tensor.dim[p1.tensor.ndim - 1];\n\n    if (n !== p2.tensor.dim[0]) {\n      debugger;\n      stop(\"inner: tensor dimension check\");\n    }\n\n    ndim = p1.tensor.ndim + p2.tensor.ndim - 2;\n\n    if (ndim > MAXDIM) {\n      stop(\"inner: rank of result exceeds maximum\");\n    }\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem; //---------------------------------------------------------------------\n    //  ak is the number of rows in tensor A\n    //  bk is the number of columns in tensor B\n    //  Example:\n    //  A[3][3][4] B[4][4][3]\n    //    3  3        ak = 3 * 3 = 9\n    //                  4  3    bk = 4 * 3 = 12\n    //---------------------------------------------------------------------\n\n    ak = 1;\n\n    for (i = o = 0, ref = p1.tensor.ndim - 1; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      ak *= p1.tensor.dim[i];\n    }\n\n    bk = 1;\n\n    for (i = i1 = 1, ref1 = p2.tensor.ndim; 1 <= ref1 ? i1 < ref1 : i1 > ref1; i = 1 <= ref1 ? ++i1 : --i1) {\n      bk *= p2.tensor.dim[i];\n    }\n\n    p3 = alloc_tensor(ak * bk);\n    c = p3.tensor.elem; // new method copied from ginac http://www.ginac.de/\n\n    for (i = j1 = 0, ref2 = ak; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = 0, ref3 = n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; j = 0 <= ref3 ? ++l1 : --l1) {\n        if (isZeroAtomOrTensor(a[i * n + j])) {\n          continue;\n        }\n\n        for (k = m1 = 0, ref4 = bk; 0 <= ref4 ? m1 < ref4 : m1 > ref4; k = 0 <= ref4 ? ++m1 : --m1) {\n          push(a[i * n + j]);\n          push(b[j * bk + k]);\n          multiply();\n          push(c[i * bk + k]);\n          add();\n          c[i * bk + k] = pop();\n        }\n      }\n    } //---------------------------------------------------------------------\n    //  Note on understanding \"k * bk + j\"\n    //  k * bk because each element of a column is bk locations apart\n    //  + j because the beginnings of all columns are in the first bk \n    //  locations\n    //  Example: n = 2, bk = 6\n    //  b111  <- 1st element of 1st column\n    //  b112  <- 1st element of 2nd column\n    //  b113  <- 1st element of 3rd column\n    //  b121  <- 1st element of 4th column\n    //  b122  <- 1st element of 5th column\n    //  b123  <- 1st element of 6th column\n    //  b211  <- 2nd element of 1st column\n    //  b212  <- 2nd element of 2nd column\n    //  b213  <- 2nd element of 3rd column\n    //  b221  <- 2nd element of 4th column\n    //  b222  <- 2nd element of 5th column\n    //  b223  <- 2nd element of 6th column\n    //---------------------------------------------------------------------\n\n\n    if (ndim === 0) {\n      return push(p3.tensor.elem[0]);\n    } else {\n      p3.tensor.ndim = ndim;\n      j = 0;\n\n      for (i = n1 = 0, ref5 = p1.tensor.ndim - 1; 0 <= ref5 ? n1 < ref5 : n1 > ref5; i = 0 <= ref5 ? ++n1 : --n1) {\n        p3.tensor.dim[i] = p1.tensor.dim[i];\n      }\n\n      j = p1.tensor.ndim - 1;\n\n      for (i = o1 = 0, ref6 = p2.tensor.ndim - 1; 0 <= ref6 ? o1 < ref6 : o1 > ref6; i = 0 <= ref6 ? ++o1 : --o1) {\n        p3.tensor.dim[j + i] = p2.tensor.dim[i + 1];\n      }\n\n      return push(p3);\n    }\n  }; // Algebrite.run('c·(b+a)ᵀ·inv((a+b)ᵀ)·d').toString();\n  // Algebrite.run('c*(b+a)ᵀ·inv((a+b)ᵀ)·d').toString();\n  // Algebrite.run('(c·(b+a)ᵀ)·(inv((a+b)ᵀ)·d)').toString();\n\n\n  _get_innerprod_factors = function get_innerprod_factors(tree, factors_accumulator) {\n    if (!iscons(tree)) {\n      add_factor_to_accumulator(tree, factors_accumulator);\n      return;\n    }\n\n    if (cdr(tree) === symbol(NIL)) {\n      tree = _get_innerprod_factors(car(tree), factors_accumulator);\n      return;\n    }\n\n    if (isinnerordot(tree)) {\n      // console.log \"there is inner at top, recursing on the operands\"\n      _get_innerprod_factors(car(cdr(tree)), factors_accumulator);\n\n      _get_innerprod_factors(cdr(cdr(tree)), factors_accumulator);\n\n      return;\n    }\n\n    return add_factor_to_accumulator(tree, factors_accumulator);\n  };\n\n  add_factor_to_accumulator = function add_factor_to_accumulator(tree, factors_accumulator) {\n    if (tree !== symbol(NIL)) {\n      // console.log \">> adding to factors_accumulator: \" + tree\n      return factors_accumulator.push(tree);\n    }\n  };\n\n  itab = [// 1\n  \"f(a,a*x)\", // 9 (need a caveat for 7 so we can put 9 after 7)\n  \"f(1/x,log(x))\", // 7\n  \"f(x^a,x^(a+1)/(a+1))\", // five specialisations of case 7 for speed.\n  // Covers often-occurring exponents: each of\n  // these case ends up in a dedicated entry, so we\n  // only have to do one sure-shot match.\n  \"f(x^(-2),-x^(-1))\", \"f(x^(-1/2),2*x^(1/2))\", \"f(x^(1/2),2/3*x^(3/2))\", \"f(x,x^2/2)\", \"f(x^2,x^3/3)\", // 12\n  \"f(exp(a*x),1/a*exp(a*x))\", \"f(exp(a*x+b),1/a*exp(a*x+b))\", \"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\", \"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\", // 14\n  \"f(log(a*x),x*log(a*x)-x)\", // 15\n  \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\", // 16\n  \"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\", // 17\n  \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\", // 19\n  \"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\", // 20\n  \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\", // 27\n  \"f(1/(a+b*x),1/b*log(a+b*x))\", // 28\n  \"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\", // 29\n  \"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\", // 30\n  \"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\", // 31\n  \"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\", // 33\n  \"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\", // 34\n  \"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\", // 35\n  \"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\", // 37\n  \"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\", // 38\n  \"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\", // 39\n  \"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\", // 40\n  \"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\", // 41\n  \"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\", // 42\n  \"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\", // 60\n  \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\", // 61\n  \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\", // 62 is the same as 60\n  // 63\n  \"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\", //64\n  \"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\", //65\n  \"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\", //66 is covered by 61\n  //70\n  \"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\", //71\n  \"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\", //74\n  \"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\", //76\n  \"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\", // float(defint(1/(2+3*X^4),X,0,pi)) gave wrong result.\n  // Also, the tests related to the indefinite integral\n  // fail since we rationalise expressions \"better\", so I'm thinking\n  // to take this out completely as it seemed to give the\n  // wrong results in the first place.\n  //77\n  //\"f(1/(a+b*x^4),1/2*1/a*(a/b/4)^(1/4)*(1/2*log((x^2+2*(a/b/4)^(1/4)*x+2*(a/b/4)^(1/2))/(x^2-2*(a/b/4)^(1/4)*x+2*(a/b/4)^(1/2)))+arctan(2*(a/b/4)^(1/4)*x/(2*(a/b/4)^(1/2)-x^2))),or(not(number(a*b)),a*b>0))\",\n  //78\n  //\"f(1/(a+b*x^4),1/2*(-a/b)^(1/4)/a*(1/2*log((x+(-a/b)^(1/4))/(x-(-a/b)^(1/4)))+arctan(x*(-a/b)^(-1/4))),or(not(number(a*b)),a*b<0))\",\n  //79\n  \"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\", //80\n  \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\", // float(defint(X^2/(2+3*X^4),X,0,pi)) gave wrong result.\n  // Also, the tests related to the indefinite integral\n  // fail since we rationalise expressions \"better\", so I'm thinking\n  // to take this out completely as it seemed to give the\n  // wrong results in the first place.\n  //81\n  //\"f(x^2/(a+b*x^4),1/4*1/b*(a/b/4)^(-1/4)*(1/2*log((x^2-2*(a/b/4)^(1/4)*x+2*sqrt(a/b/4))/(x^2+2*(a/b/4)^(1/4)*x+2*sqrt(a/b/4)))+arctan(2*(a/b/4)^(1/4)*x/(2*sqrt(a/b/4)-x^2))),or(not(number(a*b)),a*b>0))\",\n  //82\n  //\"f(x^2/(a+b*x^4),1/4*1/b*(-a/b)^(-1/4)*(log((x-(-a/b)^(1/4))/(x+(-a/b)^(1/4)))+2*arctan(x*(-a/b)^(-1/4))),or(not(number(a*b)),a*b<0))\",\n  //83\n  \"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\", //124\n  \"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\", //125\n  \"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\", //126\n  \"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\", //128\n  \"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\", //129\n  \"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\", //131\n  \"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\", //132\n  \"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\", //133\n  \"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\", //135\n  \"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\", //136\n  \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\", //137\n  \"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\", //156\n  \"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\", //157\n  \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\", //158\n  \"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\", //159\n  \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", //160\n  \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", //161\n  \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\", //162\n  \"f(x/sqrt(x^2+a),sqrt(x^2+a))\", //163\n  \"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\", //164 need an unexpanded version?\n  \"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\", // match doesn't work for the following\n  \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\", //165\n  \"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\", //166\n  \"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\", //167\n  \"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\", //168\n  \"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\", //169\n  \"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\", //170\n  \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\", //171\n  \"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\", //172\n  \"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\", //173\n  \"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\", //174\n  \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\", //175\n  \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\", //176+\n  \"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\", //176-\n  \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\", //177+\n  \"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\", //177-\n  \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\", //196\n  \"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\", //197\n  \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\", //200+\n  \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\", //201    (seems to be handled somewhere else)\n  //202\n  \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\", //203\n  \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\", //204\n  \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\", //205\n  \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\", //210\n  \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\", //211\n  \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\", //214\n  \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\", //215\n  \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\", //216\n  \"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\", //217\n  \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\", //218\n  \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\", // 273\n  \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\", // 274\n  \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\", // 290\n  \"f(sin(a*x),-cos(a*x)/a)\", // 291\n  \"f(cos(a*x),sin(a*x)/a)\", // 292\n  \"f(tan(a*x),-log(cos(a*x))/a)\", // 293\n  \"f(1/tan(a*x),log(sin(a*x))/a)\", // 294\n  \"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\", // 295\n  \"f(1/sin(a*x),log(tan(a*x/2))/a)\", // 296\n  \"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\", // 297\n  \"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\", // 298\n  \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\", // 302\n  \"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\", // 303\n  \"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\", // 304\n  \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\", // 308\n  \"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\", // 312\n  \"f(1/cos(a*x)^2,tan(a*x)/a)\", // 318\n  \"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\", // 320\n  \"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\", // 326\n  \"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\", // 327\n  \"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\", // 328\n  \"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\", // 329\n  \"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\", // 330\n  \"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\", // 331\n  \"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\", // 333\n  \"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\", // 335\n  \"f(sin(a+b*x),-cos(a+b*x)/b)\", // 336\n  \"f(cos(a+b*x),sin(a+b*x)/b)\", // 337+ (with the addition of b)\n  \"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\", // 337- (with the addition of b)\n  \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\", // 338 (with the addition of b)\n  \"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\", // 339 (with the addition of b)\n  \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\", // 340\n  \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\", // check that b^2-a^2 is not zero\n  // 341\n  \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\", // check that b^2-a^2 is not zero\n  // 389\n  \"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\", // 390\n  \"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\", // 393\n  \"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\", // 394\n  \"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\", // 441\n  \"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\", // 442\n  \"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\", // 443\n  \"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\", // 485 (with addition of a)\n  // however commenting out since it's a duplicate of 14\n  // \"f(log(a*x),x*log(a*x)-x)\",\n  // 486 (with addition of a)\n  \"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\", // 487 (with addition of a)\n  \"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\", // 489\n  \"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\", // 493 (with addition of a)\n  \"f(1/x*1/(a+log(x)),log(a+log(x)))\", // 499\n  \"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\", // 500\n  \"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\", // 554\n  \"f(sinh(x),cosh(x))\", // 555\n  \"f(cosh(x),sinh(x))\", // 556\n  \"f(tanh(x),log(cosh(x)))\", // 560\n  \"f(x*sinh(x),x*cosh(x)-sinh(x))\", // 562\n  \"f(x*cosh(x),x*sinh(x)-cosh(x))\", // 566\n  \"f(sinh(x)^2,sinh(2*x)/4-x/2)\", // 569\n  \"f(tanh(x)^2,x-tanh(x))\", // 572\n  \"f(cosh(x)^2,sinh(2*x)/4+x/2)\", // ?\n  \"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\", // ?\n  \"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\", // ?\n  \"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\", // ?\n  \"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\", // these are needed for the surface integral in the manual\n  \"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\", \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\", \"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\", \"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\", \"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\", \"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\", \"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\", \"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\", \"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\", 0]; //define F p3\n  //define X p4\n  //define N p5\n\n  Eval_integral = function Eval_integral() {\n    var doNothing, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0; // evaluate 1st arg to get function F\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval(); // evaluate 2nd arg and then...\n    // example    result of 2nd arg  what to do\n    // integral(f)    nil      guess X, N = nil\n    // integral(f,2)  2      guess X, N = 2\n    // integral(f,x)  x      X = x, N = nil\n    // integral(f,x,2)  x      X = x, N = 2\n    // integral(f,x,y)  x      X = x, N = y\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n\n    while (1) {\n      // N might be a symbol instead of a number\n      if (isNumericAtom(p5)) {\n        push(p5);\n        n = pop_integer();\n\n        if (isNaN(n)) {\n          stop(\"nth integral: check n\");\n        }\n      } else {\n        n = 1;\n      }\n\n      push(p3);\n\n      if (n >= 0) {\n        for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          integral();\n        }\n      } else {\n        n = -n;\n\n        for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          derivative();\n        }\n      }\n\n      p3 = pop(); // if N is nil then arglist is exhausted\n\n      if (p5 === symbol(NIL)) {\n        break;\n      } // otherwise...\n      // N    arg1    what to do\n      // number  nil    break\n      // number  number    N = arg1, continue\n      // number  symbol    X = arg1, N = arg2, continue\n      // symbol  nil    X = N, N = nil, continue\n      // symbol  number    X = N, N = arg1, continue\n      // symbol  symbol    X = N, N = arg1, continue\n\n\n      if (isNumericAtom(p5)) {\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n\n        if (p5 === symbol(NIL)) {\n          break; // arglist exhausted\n        }\n\n        if (isNumericAtom(p5)) {\n          doNothing = 1; // N = arg1\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop(); // N = arg2\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop(); // N = arg1\n      }\n    }\n\n    return push(p3); // final result\n  };\n\n  integral = function integral() {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      integral_of_sum();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      integral_of_product();\n    } else {\n      integral_of_form();\n    }\n\n    p1 = pop();\n\n    if (_Find(p1, symbol(INTEGRAL))) {\n      stop(\"integral: sorry, could not find a solution\");\n    }\n\n    push(p1);\n    simplify();\n    Eval();\n    return restore();\n  };\n\n  integral_of_sum = function integral_of_sum() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    push(p2);\n    integral();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      integral();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  integral_of_product = function integral_of_product() {\n    push(p1);\n    push(p2);\n    partition();\n    p1 = pop();\n    integral_of_form();\n    return multiply(); // multiply constant part\n  };\n\n  integral_of_form = function integral_of_form() {\n    var hc, tab;\n    hc = italu_hashcode(p1, p2).toFixed(6);\n    tab = hashed_itab[hc];\n\n    if (!tab) {\n      // debugger\n      // italu_hashcode(p1, p2)\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    push(p1); // free variable\n\n    push(p2); // input expression\n\n    _transform(tab, false);\n\n    p3 = pop();\n\n    if (p3 === symbol(NIL)) {\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(p3);\n    }\n  }; // Implementation of hash codes based on ITALU (An Integral Table Look-Up)\n  // https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19680004891.pdf\n  // see Appendix A, page 153\n  // The first two values are from the ITALU paper.\n  // The others are just arbitrary constants.\n\n\n  hashcode_values = {\n    'x': 0.95532,\n    'constexp': 1.43762,\n    'constant': 1.14416593629414332,\n    'constbase': 1.20364122304218824,\n    'sin': 1.73305482518303221,\n    'arcsin': 1.6483368529465804,\n    'cos': 1.058672123686340116,\n    'arccos': 1.8405225918106694,\n    'tan': 1.12249437762925064,\n    'arctan': 1.1297397925394962,\n    'sinh': 1.8176164926060078,\n    'cosh': 1.9404934661708022,\n    'tanh': 1.6421307715103121,\n    'log': 1.47744370135492387,\n    'erf': 1.0825269225702916\n  };\n\n  italu_hashcode = function italu_hashcode(u, x) {\n    var half;\n\n    if (issymbol(u)) {\n      if (equal(u, x)) {\n        return hashcode_values.x;\n      } else {\n        return hashcode_values.constant;\n      }\n    } else if (iscons(u)) {\n      switch (symnum(car(u))) {\n        case ADD:\n          return hash_addition(cdr(u), x);\n\n        case MULTIPLY:\n          return hash_multiplication(cdr(u), x);\n\n        case POWER:\n          return hash_power(cadr(u), caddr(u), x);\n\n        case EXP:\n          return hash_power(symbol(E), cadr(u), x);\n\n        case SQRT:\n          push_double(0.5);\n          half = pop();\n          return hash_power(cadr(u), half, x);\n\n        default:\n          return hash_function(u, x);\n      }\n    }\n\n    return hashcode_values.constant;\n  };\n\n  hash_function = function hash_function(u, x) {\n    var arg_hash, base, name;\n\n    if (!_Find(cadr(u), x)) {\n      return hashcode_values.constant;\n    }\n\n    name = car(u);\n    arg_hash = italu_hashcode(cadr(u), x);\n    base = hashcode_values[name.printname];\n\n    if (!base) {\n      throw new Error('Unsupported function ' + name.printname);\n    }\n\n    return Math.pow(base, arg_hash);\n  };\n\n  hash_addition = function hash_addition(terms, x) {\n    var k, sum, term, term_hash, term_set, v;\n    term_set = {};\n\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n      term_hash = 0;\n\n      if (_Find(term, x)) {\n        term_hash = italu_hashcode(term, x);\n      } else {\n        // The original algorithm would skip this,\n        // but recording that it was present helps\n        // prevent collisions.\n        term_hash = hashcode_values.constant;\n      }\n\n      term_set[term_hash.toFixed(6)] = true;\n    }\n\n    sum = 0;\n\n    for (k in term_set) {\n      if (!hasProp.call(term_set, k)) continue;\n      v = term_set[k];\n      sum = sum + parseFloat(k, 10);\n    }\n\n    return sum;\n  };\n\n  hash_multiplication = function hash_multiplication(terms, x) {\n    var product, term;\n    product = 1;\n\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n\n      if (_Find(term, x)) {\n        product = product * italu_hashcode(term, x);\n      }\n    }\n\n    return product;\n  };\n\n  hash_power = function hash_power(base, power, x) {\n    var base_hash, exp_hash;\n    base_hash = hashcode_values.constant;\n    exp_hash = hashcode_values.constexp;\n\n    if (_Find(base, x)) {\n      base_hash = italu_hashcode(base, x);\n    }\n\n    if (_Find(power, x)) {\n      exp_hash = italu_hashcode(power, x);\n    } else {\n      // constant to constant = constant\n      if (base_hash === hashcode_values.constant) {\n        return hashcode_values.constant;\n      }\n\n      if (isminusone(power)) {\n        exp_hash = -1;\n      } else if (isoneovertwo(power)) {\n        exp_hash = 0.5;\n      } else if (isminusoneovertwo(power)) {\n        exp_hash = -0.5;\n      } else if (equalq(power, 2, 1)) {\n        exp_hash = 2;\n      } else if (equalq(power, -2, 1)) {\n        exp_hash = -2;\n      }\n    }\n\n    return Math.pow(base_hash, exp_hash);\n  };\n\n  make_hashed_itab = function make_hashed_itab() {\n    var f, h, key, len, o, s, tab, u;\n    tab = {};\n\n    for (o = 0, len = itab.length; o < len; o++) {\n      s = itab[o];\n\n      if (!s) {\n        break;\n      }\n\n      scan_meta(s);\n      f = pop();\n      u = cadr(f);\n      h = italu_hashcode(u, symbol(METAX));\n      key = h.toFixed(6);\n\n      if (!tab[key]) {\n        tab[key] = [];\n      }\n\n      tab[key].push(s);\n    }\n\n    console.log('hashed_itab = ' + JSON.stringify(tab, null, 2));\n    return tab;\n  };\n\n  $.make_hashed_itab = make_hashed_itab; // pre-calculated hashed integral table.\n  // in case the integral table is changed, use this\n  //   Algebrite.make_hashed_itab()\n  // and copy the resulting JSON in here.\n\n  hashed_itab = {\n    \"1.144166\": [\"f(a,a*x)\"],\n    \"1.046770\": [\"f(1/x,log(x))\"],\n    \"0.936400\": [\"f(x^a,x^(a+1)/(a+1))\"],\n    \"1.095727\": [\"f(x^(-2),-x^(-1))\"],\n    \"1.023118\": [\"f(x^(-1/2),2*x^(1/2))\"],\n    \"0.977405\": [\"f(x^(1/2),2/3*x^(3/2))\"],\n    \"0.955320\": [\"f(x,x^2/2)\"],\n    \"0.912636\": [\"f(x^2,x^3/3)\"],\n    \"1.137302\": [\"f(exp(a*x),1/a*exp(a*x))\", \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\"],\n    \"1.326774\": [\"f(exp(a*x+b),1/a*exp(a*x+b))\"],\n    \"1.080259\": [\"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\"],\n    \"1.260228\": [\"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\"],\n    \"1.451902\": [\"f(log(a*x),x*log(a*x)-x)\"],\n    \"0.486192\": [\"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\", \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\", \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.697274\": [\"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\", \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\", \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\"],\n    \"0.476307\": [\"f(1/(a+b*x),1/b*log(a+b*x))\"],\n    \"0.226868\": [\"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\"],\n    \"2.904531\": [\"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\"],\n    \"0.455026\": [\"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\"],\n    \"0.216732\": [\"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\"],\n    \"0.434695\": [\"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\"],\n    \"0.207048\": [\"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\"],\n    \"2.650781\": [\"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\"],\n    \"0.498584\": [\"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\"],\n    \"0.237479\": [\"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\"],\n    \"3.040375\": [\"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\"],\n    \"0.521902\": [\"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\"],\n    \"0.446014\": [\"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\"],\n    \"0.248586\": [\"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\"],\n    \"0.464469\": [\"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\"],\n    \"0.443716\": [\"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\"],\n    \"0.236382\": [\"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\"],\n    \"0.508931\": [\"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\"],\n    \"0.532733\": [\"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\"],\n    \"0.480638\": [\"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\"],\n    \"0.438648\": [\"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\"],\n    \"0.459164\": [\"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\", \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.450070\": [\"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\"],\n    \"1.448960\": [\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\"],\n    \"1.384221\": [\"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\"],\n    \"1.322374\": [\"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\"],\n    \"1.516728\": [\"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.587665\": [\"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"0.690150\": [\"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\"],\n    \"0.659314\": [\"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\"],\n    \"0.629856\": [\"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\"],\n    \"0.722428\": [\"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\"],\n    \"0.756216\": [\"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.434156\": [\"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\", \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\"],\n    \"0.729886\": [\"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\", \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"1.501230\": [\"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\", \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"0.666120\": [\"f(x/sqrt(x^2+a),sqrt(x^2+a))\", \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\"],\n    \"1.370077\": [\"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\", \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\"],\n    \"1.730087\": [\"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\", \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\"],\n    \"0.578006\": [\"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\"],\n    \"0.552180\": [\"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\"],\n    \"1.652787\": [\"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\"],\n    \"1.308862\": [\"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\", \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\"],\n    \"1.342944\": [\"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\", \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\", \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\"],\n    \"0.636358\": [\"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\", \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"0.652928\": [\"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\", \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\", \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\"],\n    \"0.764022\": [\"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\", \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\"],\n    \"1.578940\": [\"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\"],\n    \"1.620055\": [\"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\", \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\"],\n    \"0.332117\": [\"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\", \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\"],\n    \"1.571443\": [\"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"1.690994\": [\"f(sin(a*x),-cos(a*x)/a)\"],\n    \"1.055979\": [\"f(cos(a*x),sin(a*x)/a)\"],\n    \"1.116714\": [\"f(tan(a*x),-log(cos(a*x))/a)\"],\n    \"0.895484\": [\"f(1/tan(a*x),log(sin(a*x))/a)\"],\n    \"0.946989\": [\"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\"],\n    \"0.591368\": [\"f(1/sin(a*x),log(tan(a*x/2))/a)\"],\n    \"2.859462\": [\"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\"],\n    \"2.128050\": [\"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\", \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"1.115091\": [\"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\"],\n    \"1.081452\": [\"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\", \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"0.349716\": [\"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\"],\n    \"0.896788\": [\"f(1/cos(a*x)^2,tan(a*x)/a)\"],\n    \"1.785654\": [\"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\"],\n    \"3.188560\": [\"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\"],\n    \"1.516463\": [\"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\"],\n    \"2.707879\": [\"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\"],\n    \"0.369293\": [\"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\"],\n    \"0.560019\": [\"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\"],\n    \"0.530332\": [\"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\"],\n    \"0.331177\": [\"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\"],\n    \"0.313621\": [\"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\"],\n    \"3.172365\": [\"f(sin(a+b*x),-cos(a+b*x)/b)\"],\n    \"1.127162\": [\"f(cos(a+b*x),sin(a+b*x)/b)\"],\n    \"0.352714\": [\"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\", \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\", \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\"],\n    \"0.454515\": [\"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\", \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\", \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\"],\n    \"1.615441\": [\"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\"],\n    \"1.543263\": [\"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\"],\n    \"1.008798\": [\"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\"],\n    \"0.963724\": [\"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\"],\n    \"1.611938\": [\"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\"],\n    \"1.791033\": [\"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\"],\n    \"1.123599\": [\"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\"],\n    \"1.387031\": [\"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\"],\n    \"1.325058\": [\"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\"],\n    \"2.108018\": [\"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\"],\n    \"0.403214\": [\"f(1/x*1/(a+log(x)),log(a+log(x)))\"],\n    \"2.269268\": [\"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\"],\n    \"2.486498\": [\"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\"],\n    \"1.769733\": [\"f(sinh(x),cosh(x))\"],\n    \"1.883858\": [\"f(cosh(x),sinh(x))\"],\n    \"1.606140\": [\"f(tanh(x),log(cosh(x)))\"],\n    \"1.690661\": [\"f(x*sinh(x),x*cosh(x)-sinh(x))\"],\n    \"1.799688\": [\"f(x*cosh(x),x*sinh(x)-cosh(x))\"],\n    \"3.131954\": [\"f(sinh(x)^2,sinh(2*x)/4-x/2)\"],\n    \"2.579685\": [\"f(tanh(x)^2,x-tanh(x))\"],\n    \"3.548923\": [\"f(cosh(x)^2,sinh(2*x)/4+x/2)\"],\n    \"1.058866\": [\"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\"],\n    \"1.235270\": [\"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\"],\n    \"1.130783\": [\"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\"],\n    \"1.078698\": [\"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\"],\n    \"2.573650\": [\"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\", \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\"],\n    \"2.640666\": [\"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\"],\n    \"1.086487\": [\"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\"],\n    \"1.267493\": [\"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\"],\n    \"1.037943\": [\"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.210862\": [\"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.064970\": [\"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\"],\n    \"1.242392\": [\"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\"]\n  }; //-----------------------------------------------------------------------------\n  //  Input:    Matrix on stack (must have two dimensions but\n  //        it can be non-numerical)\n  //  Output:    Inverse on stack\n  //  Example:\n  //  > inv(((1,2),(3,4))\n  //  ((-2,1),(3/2,-1/2))\n  //  > inv(((a,b),(c,d))\n  //  ((d / (a d - b c),-b / (a d - b c)),(-c / (a d - b c),a / (a d - b c)))\n  //  Note:\n  //  THIS IS DIFFERENT FROM INVERSE OF AN EXPRESSION (inv)\n  //   Uses Gaussian elimination for numerical matrices.\n  //-----------------------------------------------------------------------------\n\n  INV_check_arg = function INV_check_arg() {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  _inv = function inv() {\n    var accumulator, eachEntry, i, n, o, ref;\n    i = 0;\n    n = 0; //U **a\n\n    save();\n    p1 = pop(); // an inv just goes away when\n    // applied to another inv\n\n    if (isinv(p1)) {\n      push(car(cdr(p1)));\n      restore();\n      return;\n    } // inverse goes away in case\n    // of identity matrix\n\n\n    if (isidentitymatrix(p1)) {\n      push(p1);\n      restore();\n      return;\n    } // distribute the inverse of a dot\n    // if in expanding mode\n    // note that the distribution happens\n    // in reverse.\n    // The dot operator is not\n    // commutative, so, it matters.\n\n\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n\n      while (iscons(p1)) {\n        accumulator.push(car(p1));\n        p1 = cdr(p1);\n      }\n\n      for (eachEntry = o = ref = accumulator.length - 1; ref <= 0 ? o <= 0 : o >= 0; eachEntry = ref <= 0 ? ++o : --o) {\n        push(accumulator[eachEntry]);\n\n        _inv();\n\n        if (eachEntry !== accumulator.length - 1) {\n          _inner();\n        }\n      }\n\n      restore();\n      return;\n    }\n\n    if (INV_check_arg() === 0) {\n      push_symbol(INV);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    if (_isNumericAtomOrTensor(p1)) {\n      yyinvg();\n    } else {\n      push(p1);\n      adj();\n      push(p1);\n      det();\n      p2 = pop();\n\n      if (isZeroAtomOrTensor(p2)) {\n        stop(\"inverse of singular matrix\");\n      }\n\n      push(p2);\n      divide();\n    }\n\n    return restore();\n  };\n\n  invg = function invg() {\n    save();\n    p1 = pop();\n\n    if (INV_check_arg() === 0) {\n      push_symbol(INVG);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n\n    yyinvg();\n    return restore();\n  }; // inverse using gaussian elimination\n\n\n  yyinvg = function yyinvg() {\n    var h, i, i1, j, j1, l1, n, o, ref, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n    h = tos;\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i === j) {\n          push(one);\n        } else {\n          push(zero);\n        }\n      }\n    }\n\n    for (i = j1 = 0, ref2 = n * n; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      push(p1.tensor.elem[i]);\n    }\n\n    INV_decomp(n);\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n\n    for (i = l1 = 0, ref3 = n * n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(tos - 2 * n * n);\n    return push(p1);\n  }; //-----------------------------------------------------------------------------\n  //  Input:    n * n unit matrix on stack\n  //      n * n operand on stack\n  //  Output:    n * n inverse matrix on stack\n  //      n * n garbage on stack\n  //      p2 mangled\n  //-----------------------------------------------------------------------------\n  //define A(i, j) stack[a + n * (i) + (j)]\n  //define U(i, j) stack[u + n * (i) + (j)]\n\n\n  INV_decomp = function INV_decomp(n) {\n    var a, d, i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4, results, u;\n    a = 0;\n    d = 0;\n    i = 0;\n    j = 0;\n    u = 0;\n    a = tos - n * n;\n    u = a - n * n;\n    results = [];\n\n    for (d = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; d = 0 <= ref ? ++o : --o) {\n      // diagonal element zero?\n      if (equal(stack[a + n * d + d], zero)) {\n        // find a new row\n        for (i = i1 = ref1 = d + 1, ref2 = n; ref1 <= ref2 ? i1 < ref2 : i1 > ref2; i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(stack[a + n * i + d], zero)) {\n            break;\n          }\n        }\n\n        if (i === n) {\n          stop(\"inverse of singular matrix\");\n        } // exchange rows\n\n\n        for (j = j1 = 0, ref3 = n; 0 <= ref3 ? j1 < ref3 : j1 > ref3; j = 0 <= ref3 ? ++j1 : --j1) {\n          p2 = stack[a + n * d + j];\n          stack[a + n * d + j] = stack[a + n * i + j];\n          stack[a + n * i + j] = p2;\n          p2 = stack[u + n * d + j];\n          stack[u + n * d + j] = stack[u + n * i + j];\n          stack[u + n * i + j] = p2;\n        }\n      } // multiply the pivot row by 1 / pivot\n\n\n      p2 = stack[a + n * d + d];\n\n      for (j = l1 = 0, ref4 = n; 0 <= ref4 ? l1 < ref4 : l1 > ref4; j = 0 <= ref4 ? ++l1 : --l1) {\n        if (j > d) {\n          push(stack[a + n * d + j]);\n          push(p2);\n          divide();\n          stack[a + n * d + j] = pop();\n        }\n\n        push(stack[u + n * d + j]);\n        push(p2);\n        divide();\n        stack[u + n * d + j] = pop();\n      }\n\n      results.push(function () {\n        var m1, ref5, results1; // clear out the column above and below the pivot\n\n        results1 = [];\n\n        for (i = m1 = 0, ref5 = n; 0 <= ref5 ? m1 < ref5 : m1 > ref5; i = 0 <= ref5 ? ++m1 : --m1) {\n          if (i === d) {\n            continue;\n          } // multiplier\n\n\n          p2 = stack[a + n * i + d];\n          results1.push(function () {\n            var n1, ref6, results2; // add pivot row to i-th row\n\n            results2 = [];\n\n            for (j = n1 = 0, ref6 = n; 0 <= ref6 ? n1 < ref6 : n1 > ref6; j = 0 <= ref6 ? ++n1 : --n1) {\n              if (j > d) {\n                push(stack[a + n * i + j]);\n                push(stack[a + n * d + j]);\n                push(p2);\n                multiply();\n                subtract();\n                stack[a + n * i + j] = pop();\n              }\n\n              push(stack[u + n * i + j]);\n              push(stack[u + n * d + j]);\n              push(p2);\n              multiply();\n              subtract();\n              results2.push(stack[u + n * i + j] = pop());\n            }\n\n            return results2;\n          }());\n        }\n\n        return results1;\n      }());\n    }\n\n    return results;\n  };\n\n  DEBUG_IS = false; // jsBoolToToInt = (p) ->\n  //   if p then 1 else 0\n  // p is a U\n  // this routine is a simple check on whether we have\n  // a basic zero in our hands. It doesn't perform any\n  // calculations or simplifications.\n\n  isZeroAtom = function isZeroAtom(p) {\n    switch (p.k) {\n      case NUM:\n        return MZERO(p.q.a);\n\n      case DOUBLE:\n        return p.d === 0.0;\n\n      default:\n        return false;\n    }\n  }; // p is a U\n  // this routine is a simple check on whether we have\n  // a basic zero in our hands. It doesn't perform any\n  // calculations or simplifications.\n\n\n  isZeroTensor = function isZeroTensor(p) {\n    var i, o, ref;\n\n    if (p.k !== TENSOR) {\n      return 0;\n    }\n\n    for (i = o = 0, ref = p.tensor.nelem; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      if (!isZeroAtomOrTensor(p.tensor.elem[i])) {\n        return 0;\n      }\n    }\n\n    return 1;\n  }; // p is a U\n  // this routine is a simple check on whether we have\n  // a basic zero in our hands. It doesn't perform any\n  // calculations or simplifications.\n\n\n  isZeroAtomOrTensor = function isZeroAtomOrTensor(p) {\n    return isZeroAtom(p) || isZeroTensor(p);\n  }; // This is a key routine to try to determine whether\n  // the argument looks like zero/false, or non-zero/true,\n  // or undetermined.\n  // This is useful in two instances:\n  //  * to determine if a predicate is true/false\n  //  * to determine if particular quantity is zero\n  // Note that if one wants to check if we have a simple\n  // zero atom or tensor in our hands, then the isZeroAtomOrTensor\n  // routine is sufficient.\n\n\n  isZeroLikeOrNonZeroLikeOrUndetermined = function isZeroLikeOrNonZeroLikeOrUndetermined(valueOrPredicate) {\n    var evalledArgument; // push the argument\n\n    push(valueOrPredicate); // just like Eval but turns assignments into\n    // equality checks\n\n    Eval_predicate();\n    evalledArgument = pop(); // OK first check if we already have\n    // a simple zero (or simple zero tensor)\n\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    } // also check if we have a simple numeric value, or a tensor\n    // full of simple numeric values (i.e. straight doubles or fractions).\n    // In such cases, since we\n    // just excluded they are zero, then we take it as\n    // a \"true\"\n\n\n    if (_isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    } // if we are here we are in the case of value that\n    // is not a zero and not a simple numeric value.\n    // e.g. stuff like\n    // 'sqrt(2)', or 'sin(45)' or '1+i', or 'a'\n    // so in such cases let's try to do a float()\n    // so we might get down to a simple numeric value\n    // in some of those cases\n\n\n    push(evalledArgument);\n    zzfloat();\n    evalledArgument = pop(); // anything that could be calculated down to a simple\n    // numeric value is now indeed either a \n    // double OR a double with an imaginary component\n    // e.g. 2.0 or 2.4 + i*5.6\n    // (Everything else are things that don't have a numeric\n    // value e.g. 'a+b')\n    // So, let's take care of the case where we have\n    // a simple numeric value with NO imaginary component,\n    // things like sqrt(2) or sin(PI)\n    // by doing the simple numeric\n    // values checks again\n\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    }\n\n    if (_isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    } // here we still have cases of simple numeric values\n    // WITH an imaginary component e.g. '1+i',\n    // or things that don't have a numeric value e.g. 'a'\n    // so now let's take care of the imaginary numbers:\n    // since we JUST have to spot \"zeros\" we can just\n    // calculate the absolute value and re-do all the checks\n    // we just did\n\n\n    if (_Find(evalledArgument, imaginaryunit)) {\n      push(evalledArgument);\n      absValFloat();\n      Eval_predicate();\n      evalledArgument = pop(); // re-do the simple-number checks...\n\n      if (isZeroAtomOrTensor(evalledArgument)) {\n        return 0;\n      }\n\n      if (_isNumericAtomOrTensor(evalledArgument)) {\n        return 1;\n      }\n    } // here we have stuff that is not reconducible to any\n    // numeric value (or tensor with numeric values) e.g.\n    // 'a+b', so it just means that we just don't know the\n    // truth value, so we have\n    // to leave the whole thing unevalled\n\n\n    return null;\n  }; // p is a U\n\n\n  isnegativenumber = function isnegativenumber(p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === -1) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d < 0.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  }; // p is a U\n\n\n  ispositivenumber = function ispositivenumber(p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === 1) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d > 0.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  }; // p is a U\n\n\n  isplustwo = function isplustwo(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 2) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === 2.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  }; // p is a U\n\n\n  isplusone = function isplusone(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === 1.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isminusone = function isminusone(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, -1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        if (p.d === -1.0) {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  isone = function isone(p) {\n    return isplusone(p) || isminusone(p);\n  };\n\n  isinteger = function isinteger(p) {\n    if (p.k === NUM && MEQUAL(p.q.b, 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isintegerorintegerfloat = function isintegerorintegerfloat(p) {\n    if (p.k === DOUBLE) {\n      if (p.d === Math.round(p.d)) {\n        return 1;\n      }\n\n      return 0;\n    }\n\n    return isinteger(p);\n  };\n\n  isnonnegativeinteger = function isnonnegativeinteger(p) {\n    if (isrational(p) && MEQUAL(p.q.b, 1) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isposint = function isposint(p) {\n    if (isinteger(p) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }; // --------------------------------------\n\n\n  isunivarpolyfactoredorexpandedform = function isunivarpolyfactoredorexpandedform(p, x) {\n    if (DEBUG) {\n      console.log(\"isunivarpolyfactoredorexpandedform: p: \" + p + \" x: \" + x);\n    }\n\n    if (x == null) {\n      push(p);\n      guess();\n      x = pop();\n      pop();\n    }\n\n    if (ispolyfactoredorexpandedform(p, x) && _Find(p, symbol(SYMBOL_X)) + _Find(p, symbol(SYMBOL_Y)) + _Find(p, symbol(SYMBOL_Z)) === 1) {\n      return x;\n    } else {\n      return 0;\n    }\n  }; // --------------------------------------\n  // sometimes we want to check if we have a poly in our\n  // hands, however it's in factored form and we don't\n  // want to expand it.\n\n\n  ispolyfactoredorexpandedform = function ispolyfactoredorexpandedform(p, x) {\n    return ispolyfactoredorexpandedform_factor(p, x);\n  };\n\n  ispolyfactoredorexpandedform_factor = function ispolyfactoredorexpandedform_factor(p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (DEBUG) {\n          console.log(\"ispolyfactoredorexpandedform_factor testing \" + car(p));\n        }\n\n        if (!ispolyfactoredorexpandedform_power(car(p), x)) {\n          if (DEBUG) {\n            console.log(\"... tested negative:\" + car(p));\n          }\n\n          return 0;\n        }\n\n        p = cdr(p);\n      }\n\n      return 1;\n    } else {\n      return ispolyfactoredorexpandedform_power(p, x);\n    }\n  };\n\n  ispolyfactoredorexpandedform_power = function ispolyfactoredorexpandedform_power(p, x) {\n    if (car(p) === symbol(POWER)) {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power (isposint(caddr(p)) \" + (isposint(caddr(p)), DEBUG ? console.log(\"ispolyfactoredorexpandedform_power ispolyexpandedform_expr(cadr(p), x)) \" + ispolyexpandedform_expr(cadr(p), x)) : void 0));\n      }\n\n      return isposint(caddr(p)) && ispolyexpandedform_expr(cadr(p), x);\n    } else {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power not a power, testing if this is exp form: \" + p);\n      }\n\n      return ispolyexpandedform_expr(p, x);\n    }\n  }; // --------------------------------------\n\n\n  ispolyexpandedform = function ispolyexpandedform(p, x) {\n    if (_Find(p, x)) {\n      return ispolyexpandedform_expr(p, x);\n    } else {\n      return 0;\n    }\n  };\n\n  ispolyexpandedform_expr = function ispolyexpandedform_expr(p, x) {\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (!ispolyexpandedform_term(car(p), x)) {\n          return 0;\n        }\n\n        p = cdr(p);\n      }\n\n      return 1;\n    } else {\n      return ispolyexpandedform_term(p, x);\n    }\n  };\n\n  ispolyexpandedform_term = function ispolyexpandedform_term(p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (!ispolyexpandedform_factor(car(p), x)) {\n          return 0;\n        }\n\n        p = cdr(p);\n      }\n\n      return 1;\n    } else {\n      return ispolyexpandedform_factor(p, x);\n    }\n  };\n\n  ispolyexpandedform_factor = function ispolyexpandedform_factor(p, x) {\n    if (equal(p, x)) {\n      return 1;\n    }\n\n    if (car(p) === symbol(POWER) && equal(cadr(p), x)) {\n      if (isposint(caddr(p))) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n    if (_Find(p, x)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }; // --------------------------------------\n\n\n  isnegativeterm = function isnegativeterm(p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    } else if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  hasNegativeRationalExponent = function hasNegativeRationalExponent(p) {\n    if (car(p) === symbol(POWER) && isrational(car(cdr(cdr(p)))) && isnegativenumber(car(cdr(p)))) {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has imaginary component\");\n      }\n\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has NO imaginary component\");\n      }\n\n      return 0;\n    }\n  };\n\n  isimaginarynumberdouble = function isimaginarynumberdouble(p) {\n    if (car(p) === symbol(MULTIPLY) && length(p) === 3 && isdouble(cadr(p)) && hasNegativeRationalExponent(caddr(p)) || equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isimaginarynumber = function isimaginarynumber(p) {\n    if (car(p) === symbol(MULTIPLY) && length(p) === 3 && isNumericAtom(cadr(p)) && equal(caddr(p), imaginaryunit) || equal(p, imaginaryunit) || hasNegativeRationalExponent(caddr(p))) {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" is imaginary number\");\n      }\n\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" isn't an imaginary number\");\n      }\n\n      return 0;\n    }\n  };\n\n  iscomplexnumberdouble = function iscomplexnumberdouble(p) {\n    if (car(p) === symbol(ADD) && length(p) === 3 && isdouble(cadr(p)) && isimaginarynumberdouble(caddr(p)) || isimaginarynumberdouble(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  iscomplexnumber = function iscomplexnumber(p) {\n    if (DEBUG_IS) {\n      debugger;\n    }\n\n    if (car(p) === symbol(ADD) && length(p) === 3 && isNumericAtom(cadr(p)) && isimaginarynumber(caddr(p)) || isimaginarynumber(p)) {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n\n      return 1;\n    } else {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n\n      return 0;\n    }\n  };\n\n  iseveninteger = function iseveninteger(p) {\n    if (isinteger(p) && p.q.a.isEven()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isnegative = function isnegative(p) {\n    if (car(p) === symbol(ADD) && isnegativeterm(cadr(p))) {\n      return 1;\n    } else if (isnegativeterm(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }; // returns 1 if there's a symbol somewhere.\n  // not used anywhere.\n  // NOTE: PI and POWER are symbols,\n  // so for example 2^3 would be symbolic\n  // while -1^(1/2) i.e. 'i' is not, so this can\n  // be tricky to use.\n\n\n  _issymbolic = function issymbolic(p) {\n    if (issymbol(p)) {\n      return 1;\n    } else {\n      while (iscons(p)) {\n        if (_issymbolic(car(p))) {\n          return 1;\n        }\n\n        p = cdr(p);\n      }\n\n      return 0;\n    }\n  }; // i.e. 2, 2^3, etc.\n\n\n  isintegerfactor = function isintegerfactor(p) {\n    return isinteger(p) || car(p) === symbol(POWER) && isinteger(cadr(p)) && isinteger(caddr(p));\n  };\n\n  isNumberOneOverSomething = function isNumberOneOverSomething(p) {\n    return isfraction(p) && MEQUAL(p.q.a.abs(), 1);\n  };\n\n  isoneover = function isoneover(p) {\n    return car(p) === symbol(POWER) && isminusone(caddr(p));\n  };\n\n  isfraction = function isfraction(p) {\n    return p.k === NUM && !MEQUAL(p.q.b, 1);\n  }; // p is a U, n an int\n\n\n  equaln = function equaln(p, n) {\n    switch (p.k) {\n      case NUM:\n        return MEQUAL(p.q.a, n) && MEQUAL(p.q.b, 1);\n\n      case DOUBLE:\n        return p.d === n;\n\n      default:\n        return false;\n    }\n  }; // p is a U, a and b ints\n\n\n  equalq = function equalq(p, a, b) {\n    switch (p.k) {\n      case NUM:\n        return MEQUAL(p.q.a, a) && MEQUAL(p.q.b, b);\n\n      case DOUBLE:\n        return p.d === a / b;\n\n      default:\n        return false;\n    }\n  }; // 1/2 ?\n\n\n  isoneovertwo = function isoneovertwo(p) {\n    return equalq(p, 1, 2);\n  }; // -1/2 ?\n\n\n  isminusoneovertwo = function isminusoneovertwo(p) {\n    return equalq(p, -1, 2);\n  }; // 1/sqrt(2) ?\n\n\n  isoneoversqrttwo = function isoneoversqrttwo(p) {\n    return car(p) === symbol(POWER) && equaln(cadr(p), 2) && equalq(caddr(p), -1, 2);\n  }; // -1/sqrt(2) ?\n\n\n  isminusoneoversqrttwo = function isminusoneoversqrttwo(p) {\n    return car(p) === symbol(MULTIPLY) && equaln(cadr(p), -1) && isoneoversqrttwo(caddr(p)) && length(p) === 3;\n  }; // sqrt(3)/2 ?\n\n\n  issqrtthreeovertwo = function issqrtthreeovertwo(p) {\n    return car(p) === symbol(MULTIPLY) && isoneovertwo(cadr(p)) && issqrtthree(caddr(p)) && length(p) === 3;\n  }; // -sqrt(3)/2 ?\n\n\n  isminussqrtthreeovertwo = function isminussqrtthreeovertwo(p) {\n    return car(p) === symbol(MULTIPLY) && isminusoneovertwo(cadr(p)) && issqrtthree(caddr(p)) && length(p) === 3;\n  }; // p == sqrt(3) ?\n\n\n  issqrtthree = function issqrtthree(p) {\n    return car(p) === symbol(POWER) && equaln(cadr(p), 3) && isoneovertwo(caddr(p));\n  };\n\n  _isfloating = function isfloating(p) {\n    if (p.k === DOUBLE || p === symbol(FLOATF)) {\n      return 1;\n    }\n\n    while (iscons(p)) {\n      if (_isfloating(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  isimaginaryunit = function isimaginaryunit(p) {\n    if (equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }; // n/2 * i * pi ?\n  // return value:\n  //  0  no\n  //  1  1\n  //  2  -1\n  //  3  i\n  //  4  -i\n\n\n  isquarterturn = function isquarterturn(p) {\n    var minussign, n;\n    n = 0;\n    minussign = 0;\n\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n\n    if (equal(cadr(p), imaginaryunit)) {\n      if (caddr(p) !== symbol(PI)) {\n        return 0;\n      }\n\n      if (length(p) !== 3) {\n        return 0;\n      }\n\n      return 2;\n    }\n\n    if (!isNumericAtom(cadr(p))) {\n      return 0;\n    }\n\n    if (!equal(caddr(p), imaginaryunit)) {\n      return 0;\n    }\n\n    if (cadddr(p) !== symbol(PI)) {\n      return 0;\n    }\n\n    if (length(p) !== 4) {\n      return 0;\n    }\n\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      return 0;\n    }\n\n    if (n < 1) {\n      minussign = 1;\n      n = -n;\n    }\n\n    switch (n % 4) {\n      case 0:\n        n = 1;\n        break;\n\n      case 1:\n        if (minussign) {\n          n = 4;\n        } else {\n          n = 3;\n        }\n\n        break;\n\n      case 2:\n        n = 2;\n        break;\n\n      case 3:\n        if (minussign) {\n          n = 3;\n        } else {\n          n = 4;\n        }\n\n    }\n\n    return n;\n  }; // special multiple of pi?\n  // returns for the following multiples of pi...\n  //  -4/2  -3/2  -2/2  -1/2  1/2  2/2  3/2  4/2\n  //  4  1  2  3  1  2  3  4\n\n\n  isnpi = function isnpi(p) {\n    var doNothing, n;\n    n = 0;\n\n    if (p === symbol(PI)) {\n      return 2;\n    }\n\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && caddr(p) === symbol(PI) && length(p) === 3) {\n      doNothing = 0;\n    } else {\n      return 0;\n    }\n\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      return 0;\n    }\n\n    if (n < 0) {\n      n = 4 - -n % 4;\n    } else {\n      n = 1 + (n - 1) % 4;\n    }\n\n    return n;\n  };\n\n  $.isZeroAtomOrTensor = isZeroAtomOrTensor;\n  $.isnegativenumber = isnegativenumber;\n  $.isplusone = isplusone;\n  $.isminusone = isminusone;\n  $.isinteger = isinteger;\n  $.isnonnegativeinteger = isnonnegativeinteger;\n  $.isposint = isposint;\n  $.isnegativeterm = isnegativeterm;\n  $.isimaginarynumber = isimaginarynumber;\n  $.iscomplexnumber = iscomplexnumber;\n  $.iseveninteger = iseveninteger;\n  $.isnegative = isnegative;\n  $.issymbolic = _issymbolic;\n  $.isintegerfactor = isintegerfactor;\n  $.isoneover = isoneover;\n  $.isfraction = isfraction;\n  $.isoneoversqrttwo = isoneoversqrttwo;\n  $.isminusoneoversqrttwo = isminusoneoversqrttwo;\n  $.isfloating = _isfloating;\n  $.isimaginaryunit = isimaginaryunit;\n  $.isquarterturn = isquarterturn;\n  $.isnpi = isnpi;\n\n  Eval_isprime = function Eval_isprime() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (isnonnegativeinteger(p1) && mprime(p1.q.a)) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_laguerre = function Eval_laguerre() {\n    // 1st arg\n    push(cadr(p1));\n    Eval(); // 2nd arg\n\n    push(caddr(p1));\n    Eval(); // 3rd arg\n\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n\n    return laguerre();\n  }; //define X p1\n  //define N p2\n  //define K p3\n  //define Y p4\n  //define Y0 p5\n  //define Y1 p6\n\n\n  laguerre = function laguerre() {\n    var n;\n    n = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n\n    if (n < 0 || isNaN(n)) {\n      push_symbol(LAGUERRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      restore();\n      return;\n    }\n\n    if (issymbol(p1)) {\n      laguerre2(n);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n      laguerre2(n);\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n\n      _subst();\n\n      Eval();\n    }\n\n    return restore();\n  };\n\n  laguerre2 = function laguerre2(n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop();\n    results = [];\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      subtract();\n      push(p3);\n      add();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p3);\n      add();\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      results.push(divide());\n    }\n\n    return results;\n  }; // Find the least common multiple of two expressions.\n\n\n  Eval_lcm = function Eval_lcm() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      lcm();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  lcm = function lcm() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    yylcm();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yylcm = function yylcm() {\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    gcd();\n    push(p1);\n    divide();\n    push(p2);\n    divide();\n    return inverse();\n  };\n\n  Eval_leading = function Eval_leading() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n\n    return leading();\n  }; //define P p1\n  //define X p2\n  //define N p3\n\n\n  leading = function leading() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p1); // N = degree of P\n\n    push(p2);\n    degree();\n    p3 = pop();\n    push(p1); // divide through by X ^ N\n\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2); // remove terms that depend on X\n\n    filter();\n    return restore();\n  };\n\n  Eval_legendre = function Eval_legendre() {\n    // 1st arg\n    push(cadr(p1));\n    Eval(); // 2nd arg\n\n    push(caddr(p1));\n    Eval(); // 3rd arg (optional)\n\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n\n    return legendre();\n  }; //define X p1\n  //define N p2\n  //define M p3\n  //define Y p4\n  //define Y0 p5\n  //define Y1 p6\n\n\n  legendre = function legendre() {\n    save();\n\n    __legendre();\n\n    return restore();\n  };\n\n  __legendre = function __legendre() {\n    var m, n;\n    m = 0;\n    n = 0;\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    push(p3);\n    m = pop_integer();\n\n    if (n < 0 || isNaN(n) || m < 0 || isNaN(m)) {\n      push_symbol(LEGENDRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      return;\n    }\n\n    if (issymbol(p1)) {\n      __legendre2(n, m);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n\n      __legendre2(n, m);\n\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n\n      _subst();\n\n      Eval();\n    }\n\n    return __legendre3(m);\n  };\n\n  __legendre2 = function __legendre2(n, m) {\n    var i, i1, o, ref, ref1, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop(); //  i=1  p5 = 0 \n    //    p6 = 1 \n    //    ((2*i+1)*x*p6 - i*p5) / i = x\n    //  i=2  p5 = 1\n    //    p6 = x\n    //    ((2*i+1)*x*p6 - i*p5) / i = -1/2 + 3/2*x^2\n    //  i=3  p5 = x\n    //    p6 = -1/2 + 3/2*x^2\n    //    ((2*i+1)*x*p6 - i*p5) / i = -3/2*x + 5/2*x^3\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      multiply();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      divide();\n    }\n\n    results = [];\n\n    for (i = i1 = 0, ref1 = m; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1);\n      results.push(derivative());\n    }\n\n    return results;\n  }; // moveTos tos * (-1)^m * (1-x^2)^(m/2)\n\n\n  __legendre3 = function __legendre3(m) {\n    if (m === 0) {\n      return;\n    }\n\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      sine();\n      square();\n    } else if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      cosine();\n      square();\n    } else {\n      push_integer(1);\n      push(p1);\n      square();\n      subtract();\n    }\n\n    push_integer(m);\n    push_rational(1, 2);\n    multiply();\n    power();\n    multiply();\n\n    if (m % 2) {\n      return negate();\n    }\n  }; // Create a list from n things on the stack.\n  // n is an integer\n\n\n  list = function list(n) {\n    var listIterator, o, ref, results;\n    listIterator = 0;\n    push(symbol(NIL));\n    results = [];\n\n    for (listIterator = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; listIterator = 0 <= ref ? ++o : --o) {\n      results.push(cons());\n    }\n\n    return results;\n  }; // Natural logarithm.\n  // Note that we use the mathematics / Javascript / Mathematica\n  // convention that \"log\" is indeed the natural logarithm.\n  // In engineering, biology, astronomy, \"log\" can stand instead\n  // for the \"common\" logarithm i.e. base 10. Also note that Google\n  // calculations use log for the common logarithm.\n\n\n  Eval_log = function Eval_log() {\n    push(cadr(p1));\n    Eval();\n    return logarithm();\n  };\n\n  logarithm = function logarithm() {\n    save();\n    yylog();\n    return restore();\n  };\n\n  yylog = function yylog() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (p1 === symbol(E)) {\n      push_integer(1);\n      return;\n    }\n\n    if (equaln(p1, 1)) {\n      push_integer(0);\n      return;\n    }\n\n    if (isnegativenumber(p1)) {\n      push(p1);\n      negate();\n      logarithm();\n      push(imaginaryunit);\n\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n\n      multiply();\n      add();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.log(p1.d);\n      push_double(d);\n      return;\n    } // rational number and not an integer?\n\n\n    if (isfraction(p1)) {\n      push(p1);\n\n      _numerator();\n\n      logarithm();\n      push(p1);\n\n      _denominator();\n\n      logarithm();\n      subtract();\n      return;\n    } // log(a ^ b) --> b log(a)\n\n\n    if (car(p1) === symbol(POWER)) {\n      push(caddr(p1));\n      push(cadr(p1));\n      logarithm();\n      multiply();\n      return;\n    } // log(a * b) --> log(a) + log(b)\n\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      push_integer(0);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        logarithm();\n        add();\n        p1 = cdr(p1);\n      }\n\n      return;\n    }\n\n    push_symbol(LOG);\n    push(p1);\n    return list(2);\n  }; // now this might be a little confusing, so a\n  // clarification is in order.\n  // First off, at the scripting level most things\n  // as they are handled get evalled.\n  // That means that they are recursively \"calculated\"\n  // as much as possible, i.e. variables are recursively\n  // looked up for their values, operators are applied,\n  // functions are ivoked, etc.\n  // I.e. while scripting, most things are\n  // evalled all the times.\n  // e.g. if I type\n  //   x = 1+1\n  // then x is actually assigned 2, not 1+1\n  // Something that helps a little is \"quote\", e.g.\n  // If I assign\n  //   x = quote(1+1)\n  // then x actually contains 1+1, not 2.\n  // But then x is evaluated as soon as I type\n  //   x // gives \"2\" as x is evaluated\n  // Evaluation is great, but sometimes one wants\n  // to look at the actual structure of an expression\n  // or a content of a variable, without those\n  // being evaluated first.\n  // for example I might type\n  //   x = a + b\n  //   a = 1\n  //   b = 2\n  // and from this point on printing the actual\n  // structure of x is impossible, because from\n  // now on any evaluation of x will give \"3\"\n  // You might say \"but you have x defined up there,\n  // what's the point of printing it out?\", to which\n  // the answer is that one might do further\n  // substitutions or transformations of special kind\n  // to x. One might want to look at the structure\n  // and it might be complex or impossible.\n  // So this function does that.\n  // If it's passed a variable, then it\n  // DOES NOT eval the variable, RATHER\n  // it prints the content of the variable without\n  // evaluating it.\n  // In the other cases it works like \"quote\" e.g.\n  // it just gives the argument as is, again without\n  // evaluating it.\n  // In the following examples, for brevity, I just\n  // use\n  //   x = quote(1+2)\n  // instead of this:\n  //   x = a + b\n  //   a = 1\n  //   b = 2\n  // to put a structure in x that is easy to see whether\n  // it's avaulated or not.\n  // So lookup allows this:\n  //   x = quote(1+2)\n  //   print(lookup(x)) # gives 1+2\n  // Note that there would be potentially a way\n  // to achieve a similar result, you could do:\n  //   x = quote(quote(1+2))\n  //   print(x)\n  // but you can't always control x to contain\n  // two quotes like that...\n  // note how two \"quotes\" are needed because\n  // if you just put one, then\n  // x would indeed contain 1+2 instead of 3,\n  // but then print would evaluate that to 3:\n  //   x = quote(1+2) # now x contains 1+2, not 3\n  //   print(x) # but x evaluated here to 3\n  // Other workarounds would not work:\n  //   x = quote(1+2)\n  //   print(quote(x))\n  // would not work because quote(x) literally means 'x'\n  // so 'x' is printed instead of its content.\n  // Note also that lookup allows you to copy\n  // the structure of a variable to another:\n  //   x = a + b\n  //   a = 1\n  //   b = 2\n  // now:\n  //   y = x # y contains the number 3 and prints to 3\n  //   y = lookup(x) # y contains \"a+b\" and prints to 3\n  //   y = quote(x) # y contains \"x\" and prints to 3\n  // note that in the first and second case y is\n  // independent from x, i.e. changing x doesn't change y\n  // while in the last case it is.\n  // Another similar simple example is when doing something\n  // like this:\n  //    x = y\n  //    y = z\n  //    x\n  //       => gives z\n  //    lookup(x)\n  //       => gives y\n  //          i.e. lookup allows you to see the immediate\n  //          content of x, rather than the evaluation which\n  //          would end up in x -> y -> z\n  // Note that if you invert the order of the assignments i.e.\n  //    y = z\n  //    x = y\n  // Then at this point x immediately contains z, since the\n  // assignment x = y is not quoted, hence y is evaluated to z\n  // when assigned to x.\n  //    lookup(x)\n  //       => gives z\n\n\n  Eval_lookup = function Eval_lookup() {\n    p1 = cadr(p1);\n\n    if (!iscons(p1) && cadr(p1).k === SYM) {\n      p1 = get_binding(p1);\n    }\n\n    return push(p1); // Bignum addition and subtraction\n  }; //static unsigned int *addf(unsigned int *, unsigned int *)\n  //static unsigned int *subf(unsigned int *, unsigned int *)\n  //static int ucmp(unsigned int *, unsigned int *)\n\n\n  madd = function madd(a, b) {\n    return a.add(b);\n  };\n\n  msub = function msub(a, b) {\n    return a.subtract(b);\n  };\n\n  addf = function addf(a, b) {\n    return a.add(b);\n  };\n\n  subf = function subf(a, b) {\n    return a.subtract(b);\n  }; // unsigned compare\n\n\n  ucmp = function ucmp(a, b) {\n    return a.compareAbs(b);\n  }; //-----------------------------------------------------------------------------\n  //  Bignum GCD\n  //  Uses the binary GCD algorithm.\n  //  See \"The Art of Computer Programming\" p. 338.\n  //  mgcd always returns a positive value\n  //  mgcd(0, 0) = 0\n  //  mgcd(u, 0) = |u|\n  //  mgcd(0, v) = |v|\n  //-----------------------------------------------------------------------------\n\n\n  mgcd = function mgcd(u, v) {\n    return bigInt.gcd(u, v);\n  }; //if SELFTEST\n  // s is a string\n\n\n  new_string = function new_string(s) {\n    var theNewString;\n    theNewString = new U();\n    theNewString.k = STR;\n    theNewString.str = s;\n    return theNewString;\n  };\n\n  out_of_memory = function out_of_memory() {\n    return stop(\"out of memory\");\n  }; // both ints\n\n\n  push_zero_matrix = function push_zero_matrix(i, j) {\n    push(alloc_tensor(i * j));\n    stack[tos - 1].tensor.ndim = 2;\n    stack[tos - 1].tensor.dim[0] = i;\n    return stack[tos - 1].tensor.dim[1] = j;\n  };\n\n  push_identity_matrix = function push_identity_matrix(n) {\n    var i, o, ref;\n    push_zero_matrix(n, n);\n\n    for (i = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      stack[tos - 1].tensor.elem[i * n + i] = one;\n    }\n\n    return check_tensor_dimensions(stack[tos - 1]);\n  };\n\n  push_cars = function push_cars(p) {\n    var results;\n    results = [];\n\n    while (iscons(p)) {\n      push(car(p));\n      results.push(p = cdr(p));\n    }\n\n    return results;\n  }; // see cmp_expr definition, this\n  // function alone just does simple structure comparison\n  // or compares numbers (either rationals or integers or doubles)\n  // but can't be used alone to test\n  // more complex mathematical equalities...\n\n\n  equal = function equal(p1, p2) {\n    if (_cmp_expr(p1, p2) === 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  lessp = function lessp(p1, p2) {\n    if (_cmp_expr(p1, p2) < 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  sign = function sign(n) {\n    if (n < 0) {\n      return -1;\n    } else if (n > 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }; // compares whether two expressions\n  // have the same structure.\n  // For example this method alone\n  // would compare \"1+1\" and \"2\"\n  // as different.\n  // It just so happens though that one oftens\n  // evaluates the two sides before passing them\n  // to this function, so chances are that the two\n  // sides have the same normal form.\n  // Even a simple evaluation might not cut it\n  // though... a simplification of both sides\n  // would then help. And even that might not\n  // cut it in some cases...\n\n\n  _cmp_expr = function cmp_expr(p1, p2) {\n    var n;\n    n = 0;\n\n    if (p1 === p2) {\n      return 0;\n    }\n\n    if (p1 === symbol(NIL)) {\n      return -1;\n    }\n\n    if (p2 === symbol(NIL)) {\n      return 1;\n    }\n\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      return sign(compare_numbers(p1, p2));\n    }\n\n    if (isNumericAtom(p1)) {\n      return -1;\n    }\n\n    if (isNumericAtom(p2)) {\n      return 1;\n    }\n\n    if (isstr(p1) && isstr(p2)) {\n      return sign(strcmp(p1.str, p2.str));\n    }\n\n    if (isstr(p1)) {\n      return -1;\n    }\n\n    if (isstr(p2)) {\n      return 1;\n    }\n\n    if (issymbol(p1) && issymbol(p2)) {\n      return sign(strcmp(get_printname(p1), get_printname(p2)));\n    }\n\n    if (issymbol(p1)) {\n      return -1;\n    }\n\n    if (issymbol(p2)) {\n      return 1;\n    }\n\n    if (istensor(p1) && istensor(p2)) {\n      return compare_tensors(p1, p2);\n    }\n\n    if (istensor(p1)) {\n      return -1;\n    }\n\n    if (istensor(p2)) {\n      return 1;\n    } // recursion here\n\n\n    while (iscons(p1) && iscons(p2)) {\n      n = _cmp_expr(car(p1), car(p2));\n\n      if (n !== 0) {\n        return n;\n      }\n\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n\n    if (iscons(p2)) {\n      return -1;\n    }\n\n    if (iscons(p1)) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  length = function length(p) {\n    var n;\n    n = 0;\n\n    while (iscons(p)) {\n      p = cdr(p);\n      n++;\n    }\n\n    return n;\n  };\n\n  unique = function unique(p) {\n    save();\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n\n    _unique_f(p);\n\n    if (p2 !== symbol(NIL)) {\n      p1 = symbol(NIL);\n    }\n\n    p = p1;\n    restore();\n    return p;\n  };\n\n  _unique_f = function unique_f(p) {\n    if (isstr(p)) {\n      if (p1 === symbol(NIL)) {\n        p1 = p;\n      } else if (p !== p1) {\n        p2 = p;\n      }\n\n      return;\n    }\n\n    while (iscons(p)) {\n      _unique_f(car(p));\n\n      if (p2 !== symbol(NIL)) {\n        return;\n      }\n\n      p = cdr(p);\n    }\n  };\n\n  ssqrt = function ssqrt() {\n    push_rational(1, 2);\n    return power();\n  };\n\n  yyexpand = function yyexpand() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    Eval();\n    return expanding = prev_expanding;\n  };\n\n  exponential = function exponential() {\n    push_symbol(E);\n    swap();\n    return power();\n  };\n\n  square = function square() {\n    push_integer(2);\n    return power();\n  }; //__cmp = (p1, p2) ->\n  //  return cmp_expr(p1, p2)\n  // n an integer\n\n\n  sort_stack = function sort_stack(n) {\n    var h, subsetOfStack; //qsort(stack + tos - n, n, sizeof (U *), __cmp)\n\n    h = tos - n;\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(_cmp_expr);\n    return stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n  };\n\n  $.equal = equal;\n  $.length = length; // Bignum multiplication and division\n\n  mmul = function mmul(a, b) {\n    return a.multiply(b);\n  };\n\n  mdiv = function mdiv(a, b) {\n    return a.divide(b);\n  }; // a = a + b\n\n  /*\n  static void\n  addf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # can be signed or unsigned \n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] + b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n   // a = a - b\n   static void\n  subf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # must be signed\n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] - b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n   // a = b * c\n   // 0xffffffff + 0xffffffff * 0xffffffff == 0xffffffff00000000\n   static void\n  mulf(unsigned int *a, unsigned int *b, int len, unsigned int c)\n  {\n    int i\n    unsigned long long t = 0; # must be unsigned\n    for (i = 0; i < len; i++) {\n      t += (unsigned long long) b[i] * c\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n    a[i] = (unsigned int) t\n  }\n  */\n\n\n  mmod = function mmod(a, b) {\n    return a.mod(b);\n  }; // return both quotient and remainder of a/b\n  // we'd have this method as divmod(number)\n  // but obviously doesn't change the passed parameters\n\n\n  mdivrem = function mdivrem(a, b) {\n    var toReturn;\n    toReturn = a.divmod(b);\n    return [toReturn.quotient, toReturn.remainder];\n  }; //if SELFTEST\n  // small integer tests\n\n\n  Eval_mod = function Eval_mod() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return mod();\n  };\n\n  mod = function mod() {\n    var n;\n    n = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"mod function: divide by zero\");\n    }\n\n    if (!isNumericAtom(p1) || !isNumericAtom(p2)) {\n      push_symbol(MOD);\n      push(p1);\n      push(p2);\n      list(3);\n      restore();\n      return;\n    }\n\n    if (isdouble(p1)) {\n      push(p1);\n      n = pop_integer();\n\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n\n      push_integer(n);\n      p1 = pop();\n    }\n\n    if (isdouble(p2)) {\n      push(p2);\n      n = pop_integer();\n\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n\n      push_integer(n);\n      p2 = pop();\n    }\n\n    if (!isinteger(p1) || !isinteger(p2)) {\n      stop(\"mod function: integer arguments expected\");\n    }\n\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mmod(p1.q.a, p2.q.a);\n    p3.q.b = mint(1);\n    push(p3);\n    return restore();\n  }; // Bignum power\n  // a is a bigint, n is a small normal int\n\n\n  mpow = function mpow(a, n) {\n    return a.pow(n);\n  }; //if SELFTEST\n  // Bignum prime test (returns 1 if prime, 0 if not)\n  // Uses Algorithm P (probabilistic primality test) from p. 395 of\n  // \"The Art of Computer Programming, Volume 2\" by Donald E. Knuth.\n\n\n  mprime = function mprime(n) {\n    return n.isProbablePrime();\n  }; //if SELFTEST\n  //-----------------------------------------------------------------------------\n  //  Bignum root\n  //  Returns null pointer if not perfect root.\n  //  The sign of the radicand is ignored.\n  //-----------------------------------------------------------------------------\n\n\n  mroot = function mroot(n, index) {\n    var i, j, k, o, ref, x, y; // this doesn't quite work\n    //return n.pow(1/index +  0.0000000000000001)\n    // sign of radicand ignored\n\n    n = n.abs();\n    i = 0;\n    j = 0;\n    k = 0;\n\n    if (index === 0) {\n      stop(\"root index is zero\");\n    } // count number of bits\n\n\n    k = 0;\n\n    while (n.shiftRight(k) > 0) {\n      k++;\n    }\n\n    if (k === 0) {\n      return mint(0);\n    } // initial guess\n\n\n    k = Math.floor((k - 1) / index);\n    j = Math.floor(k / 32 + 1);\n    x = bigInt(j);\n\n    for (i = o = 0, ref = j; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n      // zero-out the ith bit\n      x = x.and(bigInt(1).shiftLeft(i).not());\n    }\n\n    while (k >= 0) {\n      // set the kth bit\n      x = x.or(bigInt(1).shiftLeft(k));\n      y = mpow(x, index);\n\n      switch (mcmp(y, n)) {\n        case 0:\n          return x;\n\n        case 1:\n          //mp_clr_bit(x, k)\n          // clear the kth bit\n          x = x.and(bigInt(1).shiftLeft(k).not());\n      }\n\n      k--;\n    }\n\n    return 0;\n  }; //if SELFTEST\n  // Symbolic multiplication\n  // multiplication is commutative, so it can't be used\n  // e.g. on two matrices.\n  // But it can be used, say, on a scalar and a matrix.,\n  // so the output of a multiplication is not\n  // always a scalar.\n  //extern void append(void)\n  //static void parse_p1(void)\n  //static void parse_p2(void)\n  //static void __normalize_radical_factors(int)\n\n\n  DEBUG_MULTIPLY = false;\n\n  Eval_multiply = function Eval_multiply() {\n    var results;\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      multiply();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  }; // this one doesn't eval the factors,\n  // so you pass i*(-1)^(1/2), it wouldnt't\n  // give -1, because i is not evalled\n\n\n  multiply = function multiply() {\n    if (esc_flag) {\n      stop(\"escape key stop\");\n    }\n\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply_numbers();\n    } else {\n      save();\n      yymultiply();\n      return restore();\n    }\n  };\n\n  yymultiply = function yymultiply() {\n    var h, i, n, o, ref, ref1;\n    h = 0;\n    i = 0;\n    n = 0; // pop operands\n\n    p2 = pop();\n    p1 = pop();\n    h = tos; // is either operand zero?\n\n    if (isZeroAtom(p1) || isZeroAtom(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n\n      return;\n    } // is either operand a sum?\n    //console.log(\"yymultiply: expanding: \" + expanding)\n\n\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        multiply();\n        add();\n        p1 = cdr(p1);\n      }\n\n      return;\n    }\n\n    if (expanding && isadd(p2)) {\n      p2 = cdr(p2);\n\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n\n      while (iscons(p2)) {\n        push(p1);\n        push(car(p2));\n        multiply();\n        add();\n        p2 = cdr(p2);\n      }\n\n      return;\n    }\n\n    if (!istensor(p1) && istensor(p2)) {\n      push(p1);\n      push(p2);\n      scalar_times_tensor();\n      return;\n    } // tensor times scalar?\n\n\n    if (istensor(p1) && !istensor(p2)) {\n      push(p1);\n      push(p2);\n      tensor_times_scalar();\n      return;\n    } // adjust operands\n\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n    } else {\n      push(p1);\n      list(1);\n      p1 = pop();\n    }\n\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n    } else {\n      push(p2);\n      list(1);\n      p2 = pop();\n    } // handle numerical coefficients\n\n\n    if (isNumericAtom(car(p1)) && isNumericAtom(car(p2))) {\n      push(car(p1));\n      push(car(p2));\n      multiply_numbers();\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    } else if (isNumericAtom(car(p1))) {\n      push(car(p1));\n      p1 = cdr(p1);\n    } else if (isNumericAtom(car(p2))) {\n      push(car(p2));\n      p2 = cdr(p2);\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n    }\n\n    parse_p1();\n    parse_p2();\n\n    while (iscons(p1) && iscons(p2)) {\n      //    if (car(p1)->gamma && car(p2)->gamma) {\n      //      combine_gammas(h)\n      //      p1 = cdr(p1)\n      //      p2 = cdr(p2)\n      //      parse_p1()\n      //      parse_p2()\n      //      continue\n      //    }\n      if (caar(p1) === symbol(OPERATOR) && caar(p2) === symbol(OPERATOR)) {\n        push_symbol(OPERATOR);\n        push(cdar(p1));\n        push(cdar(p2));\n        append();\n        cons();\n        p1 = cdr(p1);\n        p2 = cdr(p2);\n        parse_p1();\n        parse_p2();\n        continue;\n      }\n\n      switch (_cmp_expr(p3, p4)) {\n        case -1:\n          push(car(p1));\n          p1 = cdr(p1);\n          parse_p1();\n          break;\n\n        case 1:\n          push(car(p2));\n          p2 = cdr(p2);\n          parse_p2();\n          break;\n\n        case 0:\n          combine_factors(h);\n          p1 = cdr(p1);\n          p2 = cdr(p2);\n          parse_p1();\n          parse_p2();\n          break;\n\n        default:\n          stop(\"internal error 2\");\n      }\n    } // push remaining factors, if any\n\n\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p2)) {\n      push(car(p2));\n      p2 = cdr(p2);\n    } // normalize radical factors\n    // example: 2*2(-1/2) -> 2^(1/2)\n    // must be done after merge because merge may produce radical\n    // example: 2^(1/2-a)*2^a -> 2^(1/2)\n\n\n    __normalize_radical_factors(h); // this hack should not be necessary, unless power returns a multiply\n    //for (i = h; i < tos; i++) {\n    //  if (car(stack[i]) == symbol(MULTIPLY)) {\n    //    multiply_all(tos - h)\n    //    return\n    //  }\n    //}\n\n\n    if (expanding) {\n      for (i = o = ref = h, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n        if (isadd(stack[i])) {\n          multiply_all(tos - h);\n          return;\n        }\n      }\n    } // n is the number of result factors on the stack\n\n\n    n = tos - h;\n\n    if (n === 1) {\n      return;\n    } // discard integer 1\n\n\n    if (isrational(stack[h]) && equaln(stack[h], 1)) {\n      if (n === 2) {\n        p7 = pop();\n        pop();\n        push(p7);\n      } else {\n        stack[h] = symbol(MULTIPLY);\n        list(n);\n      }\n\n      return;\n    }\n\n    list(n);\n    p7 = pop();\n    push_symbol(MULTIPLY);\n    push(p7);\n    return cons();\n  }; // Decompose a factor into base and power.\n  // input:  car(p1)    factor\n  // output:  p3    factor's base\n  //    p5    factor's power (possibly 1)\n\n\n  parse_p1 = function parse_p1() {\n    p3 = car(p1);\n    p5 = evaluatingAsFloats ? one_as_double : one;\n\n    if (car(p3) === symbol(POWER)) {\n      p5 = caddr(p3);\n      return p3 = cadr(p3);\n    }\n  }; // Decompose a factor into base and power.\n  // input:  car(p2)    factor\n  // output:  p4    factor's base\n  //    p6    factor's power (possibly 1)\n\n\n  parse_p2 = function parse_p2() {\n    p4 = car(p2);\n    p6 = evaluatingAsFloats ? one_as_double : one;\n\n    if (car(p4) === symbol(POWER)) {\n      p6 = caddr(p4);\n      return p4 = cadr(p4);\n    }\n  }; // h an integer\n\n\n  combine_factors = function combine_factors(h) {\n    push(p4);\n    push(p5);\n    push(p6);\n    add();\n    power();\n    p7 = pop();\n\n    if (isNumericAtom(p7)) {\n      push(stack[h]);\n      push(p7);\n      multiply_numbers();\n      return stack[h] = pop();\n    } else if (car(p7) === symbol(MULTIPLY)) {\n      // power can return number * factor (i.e. -1 * i)\n      if (isNumericAtom(cadr(p7)) && cdddr(p7) === symbol(NIL)) {\n        push(stack[h]);\n        push(cadr(p7));\n        multiply_numbers();\n        stack[h] = pop();\n        return push(caddr(p7));\n      } else {\n        return push(p7);\n      }\n    } else {\n      return push(p7);\n    }\n  };\n\n  gp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, -6, -7, -8, -3, -4, -5, 13, 14, 15, -16, 9, 10, 11, -12], [0, 0, 6, -1, -11, 10, -2, -15, 14, 12, -5, 4, -9, 16, -8, 7, -13], [0, 0, 7, 11, -1, -9, 15, -2, -13, 5, 12, -3, -10, 8, 16, -6, -14], [0, 0, 8, -10, 9, -1, -14, 13, -2, -4, 3, 12, -11, -7, 6, 16, -15], [0, 0, 3, 2, 15, -14, 1, 11, -10, 16, -8, 7, 13, 12, -5, 4, 9], [0, 0, 4, -15, 2, 13, -11, 1, 9, 8, 16, -6, 14, 5, 12, -3, 10], [0, 0, 5, 14, -13, 2, 10, -9, 1, -7, 6, 16, 15, -4, 3, 12, 11], [0, 0, 13, 12, -5, 4, 16, -8, 7, -1, -11, 10, -3, -2, -15, 14, -6], [0, 0, 14, 5, 12, -3, 8, 16, -6, 11, -1, -9, -4, 15, -2, -13, -7], [0, 0, 15, -4, 3, 12, -7, 6, 16, -10, 9, -1, -5, -14, 13, -2, -8], [0, 0, 16, -9, -10, -11, -13, -14, -15, -3, -4, -5, 1, -6, -7, -8, 2], [0, 0, 9, -16, 8, -7, -12, 5, -4, -2, -15, 14, 6, -1, -11, 10, 3], [0, 0, 10, -8, -16, 6, -5, -12, 3, 15, -2, -13, 7, 11, -1, -9, 4], [0, 0, 11, 7, -6, -16, 4, -3, -12, -14, 13, -2, 8, -10, 9, -1, 5], [0, 0, 12, 13, 14, 15, 9, 10, 11, -6, -7, -8, -2, -3, -4, -5, -1]]; //if 0\n  // h an int\n\n  combine_gammas = function combine_gammas(h) {\n    var n;\n    n = gp[Math.floor(p1.gamma)][Math.floor(p2.gamma)];\n\n    if (n < 0) {\n      n = -n;\n      push(stack[h]);\n      negate();\n      stack[h] = pop();\n    }\n\n    if (n > 1) {\n      return push(_gamma[n]);\n    }\n  }; // this is useful for example when you are just adding/removing\n  // factors from an already factored quantity.\n  // e.g. if you factored x^2 + 3x + 2 into (x+1)(x+2)\n  // and you want to divide by (x+1) , i.e. you multiply by (x-1)^-1,\n  // then there is no need to expand.\n\n\n  multiply_noexpand = function multiply_noexpand() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply();\n    return expanding = prev_expanding;\n  }; // multiply n factors on stack\n  // n an integer\n\n\n  multiply_all = function multiply_all(n) {\n    var h, i, o, ref;\n    i = 0;\n\n    if (n === 1) {\n      return;\n    }\n\n    if (n === 0) {\n      push(evaluatingAsFloats ? one_as_double : one);\n      return;\n    }\n\n    h = tos - n;\n    push(stack[h]);\n\n    for (i = o = 1, ref = n; 1 <= ref ? o < ref : o > ref; i = 1 <= ref ? ++o : --o) {\n      push(stack[h + i]);\n      multiply();\n    }\n\n    stack[h] = pop();\n    return moveTos(h + 1);\n  }; // n an integer\n\n\n  multiply_all_noexpand = function multiply_all_noexpand(n) {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply_all(n);\n    return expanding = prev_expanding;\n  }; //-----------------------------------------------------------------------------\n  //  Symbolic division, or numeric division if doubles are found.\n  //  Input:    Dividend and divisor on stack\n  //  Output:    Quotient on stack\n  //-----------------------------------------------------------------------------\n\n\n  divide = function divide() {\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return divide_numbers();\n    } else {\n      inverse();\n      return multiply();\n    }\n  }; // this is different from inverse of a matrix (inv)!\n\n\n  inverse = function inverse() {\n    if (isNumericAtom(stack[tos - 1])) {\n      return invert_number();\n    } else {\n      push_integer(-1);\n      return power();\n    }\n  };\n\n  reciprocate = function reciprocate() {\n    return inverse();\n  };\n\n  negate = function negate() {\n    if (isNumericAtom(stack[tos - 1])) {\n      return negate_number();\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(-1.0);\n      } else {\n        push_integer(-1);\n      }\n\n      return multiply();\n    }\n  };\n\n  negate_expand = function negate_expand() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    negate();\n    return expanding = prev_expanding;\n  };\n\n  negate_noexpand = function negate_noexpand() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    negate();\n    return expanding = prev_expanding;\n  }; //-----------------------------------------------------------------------------\n  //  Normalize radical factors\n  //  Input:    stack[h]  Coefficient factor, possibly 1\n  //      stack[h + 1]  Second factor\n  //      stack[tos - 1]  Last factor\n  //  Output:    Reduced coefficent and normalized radicals (maybe)\n  //  Example:  2*2^(-1/2) -> 2^(1/2)\n  //  (power number number) is guaranteed to have the following properties:\n  //  1. Base is an integer\n  //  2. Absolute value of exponent < 1\n  //  These properties are assured by the power function.\n  //-----------------------------------------------------------------------------\n  //define A p1\n  //define B p2\n  //define BASE p3\n  //define EXPO p4\n  //define TMP p5\n  // h is an int\n\n\n  __normalize_radical_factors = function __normalize_radical_factors(h) {\n    var i, i1, j1, o, ref, ref1, ref2, ref3, ref4, ref5;\n    i = 0; // if coeff is 1 or floating then don't bother\n\n    if (isplusone(stack[h]) || isminusone(stack[h]) || isdouble(stack[h])) {\n      return;\n    } // if no radicals then don't bother\n\n\n    for (i = o = ref = h + 1, ref1 = tos; ref <= ref1 ? o < ref1 : o > ref1; i = ref <= ref1 ? ++o : --o) {\n      if (__is_radical_number(stack[i])) {\n        break;\n      }\n    }\n\n    if (i === tos) {\n      return;\n    } // ok, try to simplify\n\n\n    save(); // numerator\n\n    push(stack[h]);\n    mp_numerator();\n\n    if (DEBUG_MULTIPLY) {\n      console.log(\"__normalize_radical_factors numerator: \" + stack[tos - 1]);\n    }\n\n    p1 = pop();\n\n    for (i = i1 = ref2 = h + 1, ref3 = tos; ref2 <= ref3 ? i1 < ref3 : i1 > ref3; i = ref2 <= ref3 ? ++i1 : --i1) {\n      if (isplusone(p1) || isminusone(p1)) {\n        // p1 is A\n        break;\n      }\n\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n\n      if (!isnegativenumber(p4)) {\n        //p4 is EXPO\n        continue;\n      } // numerator divisible by p3 (base)?\n\n\n      push(p1);\n      push(p3);\n      divide();\n      p5 = pop();\n\n      if (!isinteger(p5)) {\n        //p5 is TMP\n        continue;\n      } // reduce numerator\n\n\n      p1 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(evaluatingAsFloats ? one_as_double : one);\n      push(p4);\n      add();\n      list(3);\n      stack[i] = pop();\n    } // denominator\n\n\n    push(stack[h]);\n    mp_denominator();\n\n    if (DEBUG_MULTIPLY) {\n      console.log(\"__normalize_radical_factors denominator: \" + stack[tos - 1]);\n    }\n\n    p2 = pop();\n\n    for (i = j1 = ref4 = h + 1, ref5 = tos; ref4 <= ref5 ? j1 < ref5 : j1 > ref5; i = ref4 <= ref5 ? ++j1 : --j1) {\n      if (isplusone(p2)) {\n        // p2 is B\n        break;\n      }\n\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n\n      if (isnegativenumber(p4)) {\n        //p4 is EXPO\n        continue;\n      } // denominator divisible by p3? #p3 is BASE\n\n\n      push(p2);\n      push(p3);\n      divide();\n      p5 = pop();\n\n      if (!isinteger(p5)) {\n        //p5 is TMP\n        continue;\n      }\n\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical p5: \" + p5.toString());\n      }\n\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical top stack: \" + stack[tos - 1]);\n      } // reduce denominator\n\n\n      p2 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(p4);\n\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical p3: \" + p3.toString());\n      }\n\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical p4: \" + p4.toString());\n      }\n\n      push(one);\n      subtract();\n\n      if (dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication) {\n        if (isinteger(p3) && !isinteger(stack[tos - 1]) && isnegativenumber(stack[tos - 1])) {\n          // bail out,\n          // we want to avoid going ahead with the subtraction of\n          // the exponents, because that would turn a perfectly good\n          // integer exponent in the denominator into a fractional one\n          // i.e. a radical.\n          // Note that this only prevents new radicals ending up\n          // in the denominator, it doesn't fix existing ones.\n          pop();\n          pop();\n          pop();\n          push(p1);\n          push(p3);\n          divide();\n          p1 = pop();\n          break;\n        }\n      }\n\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical exponent: \" + stack[tos - 1]);\n      }\n\n      list(3);\n      stack[i] = pop();\n    } // reconstitute the coefficient\n\n\n    push(p1);\n    push(p2);\n    divide();\n    stack[h] = pop();\n    return restore();\n  }; // don't include i\n  // p is a U\n  // TODO should this be in is.coffee ?\n\n\n  __is_radical_number = function __is_radical_number(p) {\n    // don't use i\n    return car(p) === symbol(POWER) && isNumericAtom(cadr(p)) && isfraction(caddr(p)) && !isminusone(cadr(p));\n  }; //-----------------------------------------------------------------------------\n  //  > a*hilbert(2)\n  //  ((a,1/2*a),(1/2*a,1/3*a))\n  //  Note that \"a\" is presumed to be a scalar. Is this correct?\n  //  Yes, because \"*\" has no meaning if \"a\" is a tensor.\n  //  To multiply tensors, \"dot\" or \"outer\" should be used.\n  //  > dot(a,hilbert(2))\n  //  dot(a,((1,1/2),(1/2,1/3)))\n  //  In this case \"a\" could be a scalar or tensor so the result is not\n  //  expanded.\n  //-----------------------------------------------------------------------------\n  // find the roots of a polynomial numerically\n\n\n  NROOTS_YMAX = 101;\n  NROOTS_DELTA = 1.0e-6;\n  NROOTS_EPSILON = 1.0e-9;\n\n  NROOTS_ABS = function NROOTS_ABS(z) {\n    return Math.sqrt(z.r * z.r + z.i * z.i);\n  }; // random between -2 and 2\n\n\n  theRandom = 0.0;\n\n  NROOTS_RANDOM = function NROOTS_RANDOM() {\n    //theRandom += 0.2\n    //return theRandom\n    return 4.0 * Math.random() - 2.0;\n  };\n\n  numericRootOfPolynomial = function () {\n    var numericRootOfPolynomial = /*#__PURE__*/_createClass(function numericRootOfPolynomial() {\n      \"use strict\";\n\n      _classCallCheck(this, numericRootOfPolynomial);\n    });\n\n    ;\n    numericRootOfPolynomial.prototype.r = 0.0;\n    numericRootOfPolynomial.prototype.i = 0.0;\n    return numericRootOfPolynomial;\n  }.call(this);\n\n  nroots_a = new numericRootOfPolynomial();\n  nroots_b = new numericRootOfPolynomial();\n  nroots_x = new numericRootOfPolynomial();\n  nroots_y = new numericRootOfPolynomial();\n  nroots_fa = new numericRootOfPolynomial();\n  nroots_fb = new numericRootOfPolynomial();\n  nroots_dx = new numericRootOfPolynomial();\n  nroots_df = new numericRootOfPolynomial();\n  nroots_c = [];\n\n  for (initNRoots = o = 0, ref = NROOTS_YMAX; 0 <= ref ? o < ref : o > ref; initNRoots = 0 <= ref ? ++o : --o) {\n    nroots_c[initNRoots] = new numericRootOfPolynomial();\n  }\n\n  Eval_nroots = function Eval_nroots() {\n    var h, i, i1, j1, k, l1, n, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    p2 = pop();\n    p1 = pop();\n\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"nroots: polynomial?\");\n    } // mark the stack\n\n\n    h = tos; // get the coefficients\n\n    n = coeff(p2, p1);\n\n    if (n > NROOTS_YMAX) {\n      stop(\"nroots: degree?\");\n    } // convert the coefficients to real and imaginary doubles\n\n\n    for (i = i1 = 0, ref1 = n; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      push(stack[h + i]);\n      real();\n\n      _yyfloat();\n\n      Eval();\n      p1 = pop();\n      push(stack[h + i]);\n      imag();\n\n      _yyfloat();\n\n      Eval();\n      p2 = pop();\n\n      if (!isdouble(p1) || !isdouble(p2)) {\n        stop(\"nroots: coefficients?\");\n      }\n\n      nroots_c[i].r = p1.d;\n      nroots_c[i].i = p2.d;\n    } // pop the coefficients\n\n\n    moveTos(h); // n is the number of coefficients, n = deg(p) + 1\n\n    monic(n);\n\n    for (k = j1 = ref2 = n; j1 > 1; k = j1 += -1) {\n      findroot(k);\n\n      if (Math.abs(nroots_a.r) < NROOTS_DELTA) {\n        nroots_a.r = 0.0;\n      }\n\n      if (Math.abs(nroots_a.i) < NROOTS_DELTA) {\n        nroots_a.i = 0.0;\n      }\n\n      push_double(nroots_a.r);\n      push_double(nroots_a.i);\n      push(imaginaryunit);\n      multiply();\n      add();\n      NROOTS_divpoly(k);\n    } // now make n equal to the number of roots\n\n\n    n = tos - h;\n\n    if (n > 1) {\n      sort_stack(n);\n      p1 = alloc_tensor(n);\n      p1.tensor.ndim = 1;\n      p1.tensor.dim[0] = n;\n\n      for (i = l1 = 0, ref3 = n; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n        p1.tensor.elem[i] = stack[h + i];\n      }\n\n      moveTos(h);\n      return push(p1);\n    }\n  }; // divide the polynomial by its leading coefficient\n\n\n  monic = function monic(n) {\n    var i1, k, ref1, t;\n    k = 0;\n    t = 0.0;\n    nroots_y.r = nroots_c[n - 1].r;\n    nroots_y.i = nroots_c[n - 1].i;\n    t = nroots_y.r * nroots_y.r + nroots_y.i * nroots_y.i;\n\n    for (k = i1 = 0, ref1 = n - 1; 0 <= ref1 ? i1 < ref1 : i1 > ref1; k = 0 <= ref1 ? ++i1 : --i1) {\n      nroots_c[k].r = (nroots_c[k].r * nroots_y.r + nroots_c[k].i * nroots_y.i) / t;\n      nroots_c[k].i = (nroots_c[k].i * nroots_y.r - nroots_c[k].r * nroots_y.i) / t;\n    }\n\n    nroots_c[n - 1].r = 1.0;\n    return nroots_c[n - 1].i = 0.0;\n  }; // uses the secant method\n\n\n  findroot = function findroot(n) {\n    var i1, j, j1, k, nrabs, t;\n    j = 0;\n    k = 0;\n    t = 0.0;\n\n    if (NROOTS_ABS(nroots_c[0]) < NROOTS_DELTA) {\n      nroots_a.r = 0.0;\n      nroots_a.i = 0.0;\n      return;\n    }\n\n    for (j = i1 = 0; i1 < 100; j = ++i1) {\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n      compute_fa(n);\n      nroots_b.r = nroots_a.r;\n      nroots_b.i = nroots_a.i;\n      nroots_fb.r = nroots_fa.r;\n      nroots_fb.i = nroots_fa.i;\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n\n      for (k = j1 = 0; j1 < 1000; k = ++j1) {\n        compute_fa(n);\n        nrabs = NROOTS_ABS(nroots_fa);\n\n        if (DEBUG) {\n          console.log(\"nrabs: \" + nrabs);\n        }\n\n        if (nrabs < NROOTS_EPSILON) {\n          return;\n        }\n\n        if (NROOTS_ABS(nroots_fa) < NROOTS_ABS(nroots_fb)) {\n          nroots_x.r = nroots_a.r;\n          nroots_x.i = nroots_a.i;\n          nroots_a.r = nroots_b.r;\n          nroots_a.i = nroots_b.i;\n          nroots_b.r = nroots_x.r;\n          nroots_b.i = nroots_x.i;\n          nroots_x.r = nroots_fa.r;\n          nroots_x.i = nroots_fa.i;\n          nroots_fa.r = nroots_fb.r;\n          nroots_fa.i = nroots_fb.i;\n          nroots_fb.r = nroots_x.r;\n          nroots_fb.i = nroots_x.i;\n        } // dx = nroots_b - nroots_a\n\n\n        nroots_dx.r = nroots_b.r - nroots_a.r;\n        nroots_dx.i = nroots_b.i - nroots_a.i; // df = fb - fa\n\n        nroots_df.r = nroots_fb.r - nroots_fa.r;\n        nroots_df.i = nroots_fb.i - nroots_fa.i; // y = dx / df\n\n        t = nroots_df.r * nroots_df.r + nroots_df.i * nroots_df.i;\n\n        if (t === 0.0) {\n          break;\n        }\n\n        nroots_y.r = (nroots_dx.r * nroots_df.r + nroots_dx.i * nroots_df.i) / t;\n        nroots_y.i = (nroots_dx.i * nroots_df.r - nroots_dx.r * nroots_df.i) / t; // a = b - y * fb\n\n        nroots_a.r = nroots_b.r - (nroots_y.r * nroots_fb.r - nroots_y.i * nroots_fb.i);\n        nroots_a.i = nroots_b.i - (nroots_y.r * nroots_fb.i + nroots_y.i * nroots_fb.r);\n      }\n    }\n\n    return stop(\"nroots: convergence error\");\n  };\n\n  compute_fa = function compute_fa(n) {\n    var i1, k, ref1, results, t;\n    k = 0;\n    t = 0.0; // x = a\n\n    nroots_x.r = nroots_a.r;\n    nroots_x.i = nroots_a.i; // fa = c0 + c1 * x\n\n    nroots_fa.r = nroots_c[0].r + nroots_c[1].r * nroots_x.r - nroots_c[1].i * nroots_x.i;\n    nroots_fa.i = nroots_c[0].i + nroots_c[1].r * nroots_x.i + nroots_c[1].i * nroots_x.r;\n    results = [];\n\n    for (k = i1 = 2, ref1 = n; 2 <= ref1 ? i1 < ref1 : i1 > ref1; k = 2 <= ref1 ? ++i1 : --i1) {\n      // x = a * x\n      t = nroots_a.r * nroots_x.r - nroots_a.i * nroots_x.i;\n      nroots_x.i = nroots_a.r * nroots_x.i + nroots_a.i * nroots_x.r;\n      nroots_x.r = t; // fa += c[k] * x\n\n      nroots_fa.r += nroots_c[k].r * nroots_x.r - nroots_c[k].i * nroots_x.i;\n      results.push(nroots_fa.i += nroots_c[k].r * nroots_x.i + nroots_c[k].i * nroots_x.r);\n    }\n\n    return results;\n  }; // divide the polynomial by x - a\n\n\n  NROOTS_divpoly = function NROOTS_divpoly(n) {\n    var i1, j1, k, ref1, ref2, results;\n    k = 0;\n\n    for (k = i1 = ref1 = n - 1; ref1 <= 0 ? i1 < 0 : i1 > 0; k = ref1 <= 0 ? ++i1 : --i1) {\n      nroots_c[k - 1].r += nroots_c[k].r * nroots_a.r - nroots_c[k].i * nroots_a.i;\n      nroots_c[k - 1].i += nroots_c[k].i * nroots_a.r + nroots_c[k].r * nroots_a.i;\n    }\n\n    if (NROOTS_ABS(nroots_c[0]) > NROOTS_DELTA) {\n      stop(\"nroots: residual error\");\n    }\n\n    results = [];\n\n    for (k = j1 = 0, ref2 = n - 1; 0 <= ref2 ? j1 < ref2 : j1 > ref2; k = 0 <= ref2 ? ++j1 : --j1) {\n      nroots_c[k].r = nroots_c[k + 1].r;\n      results.push(nroots_c[k].i = nroots_c[k + 1].i);\n    }\n\n    return results;\n  };\n\n  Eval_numerator = function Eval_numerator() {\n    push(cadr(p1));\n    Eval();\n    return _numerator();\n  };\n\n  _numerator = function numerator() {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop();\n\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument); //console.trace \"rationalising \"\n\n      rationalize();\n      theArgument = pop();\n    } //console.log \"rationalised: \" + theArgument\n\n\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument); //console.log \"theArgument inside multiply: \" + theArgument\n      //console.log \"first term: \" + car(theArgument)\n\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n\n        _numerator();\n\n        theArgument = cdr(theArgument);\n      }\n\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_numerator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      return push(one);\n    } else {\n      return push(theArgument);\n    }\n  }; // Outer product of tensors\n\n\n  Eval_outer = function Eval_outer() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      outer();\n      results.push(p1 = cdr(p1));\n    }\n\n    return results;\n  };\n\n  outer = function outer() {\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (istensor(p1) && istensor(p2)) {\n      yyouter();\n    } else {\n      push(p1);\n      push(p2);\n\n      if (istensor(p1)) {\n        tensor_times_scalar();\n      } else if (istensor(p2)) {\n        scalar_times_tensor();\n      } else {\n        multiply();\n      }\n    }\n\n    return restore();\n  };\n\n  yyouter = function yyouter() {\n    var i, i1, j, j1, k, l1, m1, ndim, nelem, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    k = 0;\n    ndim = 0;\n    nelem = 0;\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n\n    if (ndim > MAXDIM) {\n      stop(\"outer: rank of result exceeds maximum\");\n    }\n\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = i1 = 0, ref1 = p1.tensor.ndim; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    j = i;\n\n    for (i = j1 = 0, ref2 = p2.tensor.ndim; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      p3.tensor.dim[j + i] = p2.tensor.dim[i];\n    }\n\n    k = 0;\n\n    for (i = l1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      for (j = m1 = 0, ref4 = p2.tensor.nelem; 0 <= ref4 ? m1 < ref4 : m1 > ref4; j = 0 <= ref4 ? ++m1 : --m1) {\n        push(p1.tensor.elem[i]);\n        push(p2.tensor.elem[j]);\n        multiply();\n        p3.tensor.elem[k++] = pop();\n      }\n    }\n\n    return push(p3);\n  };\n\n  partition = function partition() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push_integer(1);\n    p3 = pop();\n    p4 = p3;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      if (_Find(car(p1), p2)) {\n        push(p4);\n        push(car(p1));\n        multiply();\n        p4 = pop();\n      } else {\n        push(p3);\n        push(car(p1));\n        multiply();\n        p3 = pop();\n      }\n\n      p1 = cdr(p1);\n    }\n\n    push(p3);\n    push(p4);\n    return restore();\n  };\n  /*\n    Add a pattern i.e. a substitution rule.\n    Substitution rule needs a template as first argument\n    and what to transform it to as second argument.\n    Optional third argument is a boolean test which\n    adds conditions to when the rule is applied.\n  */\n  // same as Eval_pattern but only leaves\n  // NIL on stack at return, hence gives no\n  // printout\n\n\n  Eval_silentpattern = function Eval_silentpattern() {\n    Eval_pattern();\n    pop();\n    return push_symbol(NIL);\n  };\n\n  Eval_pattern = function Eval_pattern() {\n    var firstArgument, patternPosition, secondArgument, stringKey, thirdArgument;\n\n    if (!iscons(cdr(p1))) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n\n    firstArgument = car(cdr(p1));\n    secondArgument = car(cdr(cdr(p1)));\n\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n\n    if (!iscons(cdr(cdr(p1)))) {\n      thirdArgument = symbol(NIL);\n    } else {\n      thirdArgument = car(cdr(cdr(cdr(p1))));\n    }\n\n    if (equal(firstArgument, secondArgument)) {\n      stop(\"recursive pattern\");\n    } // console.log \"Eval_pattern of \" + cdr(p1)\n    // this is likely to create garbage collection\n    // problems in the C version as it's an\n    // untracked reference\n\n\n    stringKey = \"template: \" + _print_list(firstArgument);\n    stringKey += \" tests: \" + _print_list(thirdArgument);\n\n    if (DEBUG) {\n      console.log(\"pattern stringkey: \" + stringKey);\n    }\n\n    patternPosition = userSimplificationsInStringForm.indexOf(stringKey); // if pattern is not there yet, add it, otherwise replace it\n\n    if (patternPosition === -1) {\n      //console.log \"adding pattern because it doesn't exist: \" + cdr(p1)\n      userSimplificationsInStringForm.push(stringKey);\n      userSimplificationsInListForm.push(cdr(p1));\n    } else {\n      if (DEBUG) {\n        console.log(\"pattern already exists, replacing. \" + cdr(p1));\n      }\n\n      userSimplificationsInStringForm[patternPosition] = stringKey;\n      userSimplificationsInListForm[patternPosition] = cdr(p1);\n    } // return the pattern node itself so we can\n    // give some printout feedback\n\n\n    push_symbol(PATTERN);\n    push(cdr(p1));\n    return list(2);\n  };\n\n  do_clearPatterns = function do_clearPatterns() {\n    userSimplificationsInListForm = [];\n    return userSimplificationsInStringForm = [];\n  };\n\n  Eval_clearpatterns = function Eval_clearpatterns() {\n    // this is likely to create garbage collection\n    // problems in the C version as it's an\n    // untracked reference\n    do_clearPatterns(); // return nothing\n\n    return push_symbol(NIL);\n  };\n\n  Eval_patternsinfo = function Eval_patternsinfo() {\n    var patternsinfoToBePrinted;\n    patternsinfoToBePrinted = patternsinfo();\n\n    if (patternsinfoToBePrinted !== \"\") {\n      return push(new_string(patternsinfoToBePrinted));\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  patternsinfo = function patternsinfo() {\n    var i, i1, len, patternsinfoToBePrinted;\n    patternsinfoToBePrinted = \"\";\n\n    for (i1 = 0, len = userSimplificationsInListForm.length; i1 < len; i1++) {\n      i = userSimplificationsInListForm[i1];\n      patternsinfoToBePrinted += userSimplificationsInListForm + \"\\n\";\n    }\n\n    return patternsinfoToBePrinted;\n  };\n\n  Eval_polar = function Eval_polar() {\n    push(cadr(p1));\n    Eval();\n    return polar();\n  };\n\n  polar = function polar() {\n    // there are points where we turn polar\n    // representations into rect, we set a \"stack flag\"\n    // here to avoid that, so we don't undo the\n    // work that we are trying to do.\n    evaluatingPolar++;\n    save();\n    p1 = pop();\n    push(p1);\n    abs();\n    push(imaginaryunit);\n    push(p1);\n    arg();\n    multiply();\n    exponential();\n    multiply();\n    evaluatingPolar--;\n    return restore();\n  }; // Factor using the Pollard rho method\n\n\n  n_factor_number = 0;\n\n  factor_number = function factor_number() {\n    var h;\n    h = 0;\n    save();\n    p1 = pop(); // 0 or 1?\n\n    if (equaln(p1, 0) || equaln(p1, 1) || equaln(p1, -1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    n_factor_number = p1.q.a;\n    h = tos;\n    factor_a();\n\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      cons();\n    }\n\n    return restore();\n  }; // factor using table look-up, then switch to rho method if necessary\n  // From TAOCP Vol. 2 by Knuth, p. 380 (Algorithm A)\n\n\n  factor_a = function factor_a() {\n    var i1, k;\n    k = 0;\n\n    if (n_factor_number.isNegative()) {\n      n_factor_number = setSignTo(n_factor_number, 1);\n      push_integer(-1);\n    }\n\n    for (k = i1 = 0; i1 < 10000; k = ++i1) {\n      try_kth_prime(k); // if n_factor_number is 1 then we're done\n\n      if (n_factor_number.compare(1) === 0) {\n        return;\n      }\n    }\n\n    return factor_b();\n  };\n\n  try_kth_prime = function try_kth_prime(k) {\n    var count, d, q, r;\n    count = 0;\n    d = mint(primetab[k]);\n    count = 0;\n\n    while (1) {\n      // if n_factor_number is 1 then we're done\n      if (n_factor_number.compare(1) === 0) {\n        if (count) {\n          push_factor(d, count);\n        }\n\n        return;\n      }\n\n      var _mdivrem = mdivrem(n_factor_number, d);\n\n      var _mdivrem2 = _slicedToArray(_mdivrem, 2);\n\n      q = _mdivrem2[0];\n      r = _mdivrem2[1];\n\n      // continue looping while remainder is zero\n      if (r.isZero()) {\n        count++;\n        n_factor_number = q;\n      } else {\n        break;\n      }\n    }\n\n    if (count) {\n      push_factor(d, count);\n    } // q = n_factor_number/d, hence if q < d then\n    // n_factor_number < d^2 so n_factor_number is prime\n\n\n    if (mcmp(q, d) === -1) {\n      push_factor(n_factor_number, 1);\n      return n_factor_number = mint(1);\n    }\n  }; // From TAOCP Vol. 2 by Knuth, p. 385 (Algorithm B)\n\n\n  factor_b = function factor_b() {\n    var bigint_one, g, k, l, t, x, xprime;\n    k = 0;\n    l = 0;\n    bigint_one = mint(1);\n    x = mint(5);\n    xprime = mint(2);\n    k = 1;\n    l = 1;\n\n    while (1) {\n      if (mprime(n_factor_number)) {\n        push_factor(n_factor_number, 1);\n        return 0;\n      }\n\n      while (1) {\n        if (esc_flag) {\n          stop(\"esc\");\n        } // g = gcd(x' - x, n_factor_number)\n\n\n        t = msub(xprime, x);\n        t = setSignTo(t, 1);\n        g = mgcd(t, n_factor_number);\n\n        if (MEQUAL(g, 1)) {\n          if (--k === 0) {\n            xprime = x;\n            l *= 2;\n            k = l;\n          } // x = (x ^ 2 + 1) mod n_factor_number\n\n\n          t = mmul(x, x);\n          x = madd(t, bigint_one);\n          t = mmod(x, n_factor_number);\n          x = t;\n          continue;\n        }\n\n        push_factor(g, 1);\n\n        if (mcmp(g, n_factor_number) === 0) {\n          return -1;\n        } // n_factor_number = n_factor_number / g\n\n\n        t = mdiv(n_factor_number, g);\n        n_factor_number = t; // x = x mod n_factor_number\n\n        t = mmod(x, n_factor_number);\n        x = t; // xprime = xprime mod n_factor_number\n\n        t = mmod(xprime, n_factor_number);\n        xprime = t;\n        break;\n      }\n    }\n  };\n\n  push_factor = function push_factor(d, count) {\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = d;\n    p1.q.b = mint(1);\n    push(p1);\n\n    if (count > 1) {\n      push_symbol(POWER);\n      swap();\n      p1 = new U();\n      p1.k = NUM;\n      p1.q.a = mint(count);\n      p1.q.b = mint(1);\n      push(p1);\n      return list(3);\n    }\n  };\n\n  DEBUG_POWER = false;\n\n  Eval_power = function Eval_power() {\n    if (DEBUG_POWER) {\n      debugger;\n    }\n\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return power();\n  };\n\n  power = function power() {\n    save();\n    yypower();\n    return restore();\n  };\n\n  yypower = function yypower() {\n    var b_isEven_and_c_isItsInverse, hopefullySimplified, inputBase, inputExp, isThisOne, is_a_moreThanZero, n;\n\n    if (DEBUG_POWER) {\n      debugger;\n    }\n\n    n = 0;\n    p2 = pop(); // exponent\n\n    p1 = pop(); // base\n\n    inputExp = p2;\n    inputBase = p1; //debugger\n\n    if (DEBUG_POWER) {\n      console.log(\"POWER: \" + p1 + \" ^ \" + p2);\n    } // first, some very basic simplifications right away\n    //  1 ^ a    ->  1\n    //  a ^ 0    ->  1\n\n\n    if (equal(p1, one) || isZeroAtomOrTensor(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } //  a ^ 1    ->  a\n\n\n    if (equal(p2, one)) {\n      push(p1);\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } //   -1 ^ -1    ->  -1\n\n\n    if (isminusone(p1) && isminusone(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n\n      negate();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } //   -1 ^ 1/2  ->  i\n\n\n    if (isminusone(p1) && isoneovertwo(p2)) {\n      push(imaginaryunit);\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } //   -1 ^ -1/2  ->  -i\n\n\n    if (isminusone(p1) && isminusoneovertwo(p2)) {\n      push(imaginaryunit);\n      negate();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } //   -1 ^ rational\n\n\n    if (isminusone(p1) && !isdouble(p1) && isrational(p2) && !isinteger(p2) && ispositivenumber(p2) && !evaluatingAsFloats) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: -1 ^ rational\");\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\" trick: p2.q.a , p2.q.b \" + p2.q.a + \" , \" + p2.q.b);\n      }\n\n      if (p2.q.a < p2.q.b) {\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n      } else {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push_symbol(POWER);\n        push(p1);\n        push_rational(p2.q.a.mod(p2.q.b), p2.q.b);\n        list(3);\n        list(3);\n\n        if (DEBUG_POWER) {\n          console.log(\" trick applied : \" + stack[tos - 1]);\n        }\n      } // evaluates clock form into\n      // rectangular form. This seems to give\n      // slightly better form to some test results.\n\n\n      _rect();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // both base and exponent are rational numbers?\n\n\n    if (isrational(p1) && isrational(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: isrational(p1) && isrational(p2)\");\n      }\n\n      push(p1);\n      push(p2);\n      qpow();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // both base and exponent are either rational or double?\n\n\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: both base and exponent are either rational or double \");\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\"POWER - isNumericAtom(p1) && isNumericAtom(p2)\");\n      }\n\n      push(p1);\n      push(p2);\n      dpow();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    if (istensor(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: istensor(p1) \");\n      }\n\n      power_tensor();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // if we only assume variables to be real, then |a|^2 = a^2\n    // (if x is complex this doesn't hold e.g. i, which makes 1 and -1\n\n\n    if (car(p1) === symbol(ABS) && iseveninteger(p2) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: even power of absolute of real value \");\n      }\n\n      push(cadr(p1));\n      push(p2);\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // e^log(...)\n\n\n    if (p1 === symbol(E) && car(p2) === symbol(LOG)) {\n      push(cadr(p2));\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // e^some_float\n\n\n    if (p1 === symbol(E) && isdouble(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: p1 == symbol(E) && isdouble(p2) \");\n      }\n\n      push_double(Math.exp(p2.d));\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // complex number in exponential form, get it to rectangular\n    // but only if we are not in the process of calculating a polar form,\n    // otherwise we'd just undo the work we want to do\n\n\n    if (p1 === symbol(E) && _Find(p2, imaginaryunit) !== 0 && _Find(p2, symbol(PI)) !== 0 && !evaluatingPolar) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n\n      if (DEBUG_POWER) {\n        console.log(\"   power: turning complex exponential to rect: \" + stack[tos - 1]);\n      }\n\n      _rect();\n\n      hopefullySimplified = pop();\n\n      if (_Find(hopefullySimplified, symbol(PI)) === 0) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: turned complex exponential to rect: \" + hopefullySimplified);\n        }\n\n        push(hopefullySimplified);\n        return;\n      }\n    } //  (a * b) ^ c  ->  (a ^ c) * (b ^ c)\n    // note that we can't in general do this, for example\n    // sqrt(x*y) != x^(1/2) y^(1/2) (counterexample\" x = -1 and y = -1)\n    // BUT we can carve-out here some cases where this\n    // transformation is correct\n\n\n    if (car(p1) === symbol(MULTIPLY) && isinteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: (a * b) ^ c  ->  (a ^ c) * (b ^ c) \");\n      }\n\n      p1 = cdr(p1);\n      push(car(p1));\n      push(p2);\n      power();\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        power();\n        multiply();\n        p1 = cdr(p1);\n      }\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // (a ^ b) ^ c  ->  a ^ (b * c)\n    // note that we can't in general do this, for example\n    // sqrt(x^y) !=  x^(1/2 y) (counterexample x = -1)\n    // BUT we can carve-out here some cases where this\n    // transformation is correct\n    // simple numeric check to see if a is a number > 0\n\n\n    is_a_moreThanZero = false;\n\n    if (isNumericAtom(cadr(p1))) {\n      is_a_moreThanZero = sign(compare_numbers(cadr(p1), zero));\n    }\n\n    if (car(p1) === symbol(POWER) && (isinteger(p2) || is_a_moreThanZero)) {\n      // when a is >= 0\n      push(cadr(p1));\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    }\n\n    b_isEven_and_c_isItsInverse = false;\n\n    if (iseveninteger(caddr(p1))) {\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      isThisOne = pop();\n\n      if (isone(isThisOne)) {\n        b_isEven_and_c_isItsInverse = true;\n      }\n    }\n\n    if (car(p1) === symbol(POWER) && b_isEven_and_c_isItsInverse) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: car(p1) == symbol(POWER) && b_isEven_and_c_isItsInverse \");\n      }\n\n      push(cadr(p1));\n      abs();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } //  when expanding,\n    //  (a + b) ^ n  ->  (a + b) * (a + b) ...\n\n\n    if (expanding && isadd(p1) && isNumericAtom(p2)) {\n      push(p2);\n      n = pop_integer();\n\n      if (n > 1 && !isNaN(n)) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: expanding && isadd(p1) && isNumericAtom(p2) \");\n        }\n\n        power_sum(n);\n\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n\n        return;\n      }\n    } //  sin(x) ^ 2n -> (1 - cos(x) ^ 2) ^ n\n\n\n    if (trigmode === 1 && car(p1) === symbol(SIN) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2) \");\n      }\n\n      push_integer(1);\n      push(cadr(p1));\n      cosine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } //  cos(x) ^ 2n -> (1 - sin(x) ^ 2) ^ n\n\n\n    if (trigmode === 2 && car(p1) === symbol(COS) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2) \");\n      }\n\n      push_integer(1);\n      push(cadr(p1));\n      sine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n\n      return;\n    } // complex number? (just number, not expression)\n\n\n    if (iscomplexnumber(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\" power - handling the case (a + ib) ^ n\");\n      } // integer power?\n      // n will be negative here, positive n already handled\n\n\n      if (isinteger(p2)) {\n        //               /        \\  n\n        //         -n   |  a - ib  |\n        // (a + ib)   = | -------- |\n        //              |   2   2  |\n        //               \\ a + b  /\n        push(p1);\n        conjugate();\n        p3 = pop();\n        push(p3); // gets the denominator\n\n        push(p3);\n        push(p1);\n        multiply();\n        divide();\n\n        if (!isone(p2)) {\n          push(p2);\n          negate();\n          power();\n        }\n\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n\n        return;\n      } // noninteger or floating power?\n\n\n      if (isNumericAtom(p2)) {\n        push(p1);\n        abs();\n        push(p2);\n        power();\n        push_integer(-1);\n        push(p1);\n        arg();\n        push(p2);\n        multiply();\n\n        if (evaluatingAsFloats || iscomplexnumberdouble(p1) && isdouble(p2)) {\n          // remember that the \"double\" type is\n          // toxic, i.e. it propagates, so we do\n          // need to evaluate PI to its actual double\n          // value\n          push_double(Math.PI);\n        } else {\n          //console.log(\"power pushing PI when p1 is: \" + p1 + \" and p2 is:\" + p2)\n          push(symbol(PI));\n        }\n\n        divide();\n        power();\n        multiply(); // if we calculate the power making use of arctan:\n        //  * it prevents nested radicals from being simplified\n        //  * results become really hard to manipulate afterwards\n        //  * we can't go back to other forms.\n        // so leave the power as it is.\n\n        if (avoidCalculatingPowersIntoArctans) {\n          if (_Find(stack[tos - 1], symbol(ARCTAN))) {\n            pop();\n            push_symbol(POWER);\n            push(p1);\n            push(p2);\n            list(3);\n          }\n        }\n\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n\n        return;\n      }\n    } //push(p1)\n    //abs()\n    //push(p2)\n    //power()\n    //push(symbol(E))\n    //push(p1)\n    //arg()\n    //push(p2)\n    //multiply()\n    //push(imaginaryunit)\n    //multiply()\n    //power()\n    //multiply()\n\n\n    if (simplify_polar()) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: using simplify_polar\");\n      }\n\n      return;\n    }\n\n    if (DEBUG_POWER) {\n      console.log(\"   power: nothing can be done \");\n    }\n\n    push_symbol(POWER);\n    push(p1);\n    push(p2);\n    list(3);\n\n    if (DEBUG_POWER) {\n      return console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n    }\n  }; //-----------------------------------------------------------------------------\n  //  Compute the power of a sum\n  //  Input:    p1  sum\n  //      n  exponent\n  //  Output:    Result on stack\n  //  Note:\n  //  Uses the multinomial series (see Math World)\n  //                          n              n!          n1   n2       nk\n  //  (a1 + a2 + ... + ak)  = sum (--------------- a1   a2   ... ak  )\n  //                               n1! n2! ... nk!\n  //  The sum is over all n1 ... nk such that n1 + n2 + ... + nk = n.\n  //-----------------------------------------------------------------------------\n  // first index is the term number 0..k-1, second index is the exponent 0..n\n  //define A(i, j) frame[(i) * (n + 1) + (j)]\n\n\n  power_sum = function power_sum(n) {\n    var a, i, i1, j, j1, k, l1, ref1, ref2, ref3;\n    a = [];\n    i = 0;\n    j = 0;\n    k = 0; // number of terms in the sum\n\n    k = length(p1) - 1; // local frame\n\n    push_frame(k * (n + 1)); // array of powers\n\n    p1 = cdr(p1);\n\n    for (i = i1 = 0, ref1 = k; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n      for (j = j1 = 0, ref2 = n; 0 <= ref2 ? j1 <= ref2 : j1 >= ref2; j = 0 <= ref2 ? ++j1 : --j1) {\n        push(car(p1));\n        push_integer(j);\n        power();\n        stack[frame + i * (n + 1) + j] = pop();\n      }\n\n      p1 = cdr(p1);\n    }\n\n    push_integer(n);\n    factorial();\n    p1 = pop();\n\n    for (i = l1 = 0, ref3 = k; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n      a[i] = 0;\n    }\n\n    push(zero);\n\n    _multinomial_sum(k, n, a, 0, n);\n\n    return pop_frame(k * (n + 1));\n  }; //-----------------------------------------------------------------------------\n  //  Compute multinomial sum\n  //  Input:    k  number of factors\n  //      n  overall exponent\n  //      a  partition array\n  //      i  partition array index\n  //      m  partition remainder\n  //      p1  n!\n  //      A  factor array\n  //  Output:    Result on stack\n  //  Note:\n  //  Uses recursive descent to fill the partition array.\n  //-----------------------------------------------------------------------------\n  //int k, int n, int *a, int i, int m\n\n\n  _multinomial_sum = function multinomial_sum(k, n, a, i, m) {\n    var i1, j, j1, l1, ref1, ref2, ref3;\n    j = 0;\n\n    if (i < k - 1) {\n      for (j = i1 = 0, ref1 = m; 0 <= ref1 ? i1 <= ref1 : i1 >= ref1; j = 0 <= ref1 ? ++i1 : --i1) {\n        a[i] = j;\n\n        _multinomial_sum(k, n, a, i + 1, m - j);\n      }\n\n      return;\n    }\n\n    a[i] = m; // coefficient\n\n    push(p1);\n\n    for (j = j1 = 0, ref2 = k; 0 <= ref2 ? j1 < ref2 : j1 > ref2; j = 0 <= ref2 ? ++j1 : --j1) {\n      push_integer(a[j]);\n      factorial();\n      divide();\n    } // factors\n\n\n    for (j = l1 = 0, ref3 = k; 0 <= ref3 ? l1 < ref3 : l1 > ref3; j = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[frame + j * (n + 1) + a[j]]);\n      multiply();\n    }\n\n    return add();\n  }; // exp(n/2 i pi) ?\n  // p2 is the exponent expression\n  // clobbers p3\n\n\n  simplify_polar = function simplify_polar() {\n    var doNothing, n;\n    n = 0;\n    n = isquarterturn(p2);\n\n    switch (n) {\n      case 0:\n        doNothing = 1;\n        break;\n\n      case 1:\n        push_integer(1);\n        return 1;\n\n      case 2:\n        push_integer(-1);\n        return 1;\n\n      case 3:\n        push(imaginaryunit);\n        return 1;\n\n      case 4:\n        push(imaginaryunit);\n        negate();\n        return 1;\n    }\n\n    if (car(p2) === symbol(ADD)) {\n      p3 = cdr(p2);\n\n      while (iscons(p3)) {\n        n = isquarterturn(car(p3));\n\n        if (n) {\n          break;\n        }\n\n        p3 = cdr(p3);\n      }\n\n      switch (n) {\n        case 0:\n          return 0;\n\n        case 1:\n          push_integer(1);\n          break;\n\n        case 2:\n          push_integer(-1);\n          break;\n\n        case 3:\n          push(imaginaryunit);\n          break;\n\n        case 4:\n          push(imaginaryunit);\n          negate();\n      }\n\n      push(p2);\n      push(car(p3));\n      subtract();\n      exponential();\n      multiply();\n      return 1;\n    }\n\n    return 0;\n  }; //-----------------------------------------------------------------------------\n  //  Look up the nth prime\n  //  Input:    n on stack (0 < n < 10001)\n  //  Output:    nth prime on stack\n  //-----------------------------------------------------------------------------\n\n\n  Eval_prime = function Eval_prime() {\n    push(cadr(p1));\n    Eval();\n    return prime();\n  };\n\n  prime = function prime() {\n    var n;\n    n = 0;\n    n = pop_integer();\n\n    if (n < 1 || n > MAXPRIMETAB) {\n      stop(\"prime: Argument out of range.\");\n    }\n\n    n = primetab[n - 1];\n    return push_integer(n);\n  };\n\n  power_str = \"^\";\n  codeGen = false; // this is only invoked when user invokes\n  // \"print\" explicitly\n\n  Eval_print = function Eval_print() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), printMode);\n    return push(symbol(NIL));\n  }; // this is only invoked when user invokes\n  // \"print2dascii\" explicitly\n\n\n  Eval_print2dascii = function Eval_print2dascii() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_2DASCII);\n    return push(symbol(NIL));\n  }; // this is only invoked when user invokes\n  // \"printcomputer\" explicitly\n\n\n  Eval_printcomputer = function Eval_printcomputer() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_COMPUTER);\n    return push(symbol(NIL));\n  }; // this is only invoked when user invokes\n  // \"printlatex\" explicitly\n\n\n  Eval_printlatex = function Eval_printlatex() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_LATEX);\n    return push(symbol(NIL));\n  }; // this is only invoked when user invokes\n  // \"printhuman\" explicitly\n\n\n  Eval_printhuman = function Eval_printhuman() {\n    var original_test_flag; // test flag needs to be suspended\n    // because otherwise \"printcomputer\" mode\n    // will happen.\n\n    original_test_flag = test_flag;\n    test_flag = 0;\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_HUMAN);\n    test_flag = original_test_flag;\n    return push(symbol(NIL));\n  }; // this is only invoked when user invokes\n  // \"printlist\" explicitly\n\n\n  Eval_printlist = function Eval_printlist() {\n    var beenPrinted;\n    beenPrinted = _print(cdr(p1), PRINTMODE_LIST);\n    stringsEmittedByUserPrintouts += beenPrinted;\n    return push(symbol(NIL));\n  };\n\n  _print = function _print(p, passedPrintMode) {\n    var accumulator, origPrintMode;\n    accumulator = \"\";\n\n    while (iscons(p)) {\n      push(car(p));\n      Eval();\n      p2 = pop();\n      origPrintMode = printMode;\n\n      if (passedPrintMode === PRINTMODE_COMPUTER) {\n        printMode = PRINTMODE_COMPUTER;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_FULL_PRINT);\n      } else if (passedPrintMode === PRINTMODE_HUMAN) {\n        printMode = PRINTMODE_HUMAN;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_PLAIN_PRINT);\n      } else if (passedPrintMode === PRINTMODE_2DASCII) {\n        printMode = PRINTMODE_2DASCII;\n        accumulator = print2dascii(p2);\n        rememberPrint(accumulator, LAST_2DASCII_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LATEX) {\n        printMode = PRINTMODE_LATEX;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_LATEX_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LIST) {\n        printMode = PRINTMODE_LIST;\n        accumulator = _print_list(p2);\n        rememberPrint(accumulator, LAST_LIST_PRINT);\n      }\n\n      printMode = origPrintMode;\n      p = cdr(p);\n    }\n\n    if (DEBUG) {\n      console.log(\"emttedString from display: \" + stringsEmittedByUserPrintouts);\n    }\n\n    return accumulator;\n  };\n\n  rememberPrint = function rememberPrint(theString, theTypeOfPrint) {\n    var parsedString;\n    scan('\"' + theString + '\"');\n    parsedString = pop();\n    return set_binding(symbol(theTypeOfPrint), parsedString);\n  };\n\n  print_str = function print_str(s) {\n    if (DEBUG) {\n      console.log(\"emttedString from print_str: \" + stringsEmittedByUserPrintouts);\n    }\n\n    return s;\n  };\n\n  print_char = function print_char(c) {\n    return c;\n  };\n\n  collectLatexStringFromReturnValue = function collectLatexStringFromReturnValue(p) {\n    var origPrintMode, originalCodeGen, returnedString;\n    origPrintMode = printMode;\n    printMode = PRINTMODE_LATEX;\n    originalCodeGen = codeGen;\n    codeGen = false;\n    returnedString = print_expr(p); // some variables might contain underscores, escape those\n\n    returnedString = returnedString.replace(/_/g, \"\\\\_\");\n    printMode = origPrintMode;\n    codeGen = originalCodeGen;\n\n    if (DEBUG) {\n      console.log(\"emttedString from collectLatexStringFromReturnValue: \" + stringsEmittedByUserPrintouts);\n    }\n\n    return returnedString;\n  };\n\n  printline = function printline(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(p);\n    return accumulator;\n  };\n\n  print_base_of_denom = function print_base_of_denom(p1) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isfraction(p1) || car(p1) === symbol(ADD) || car(p1) === symbol(MULTIPLY) || car(p1) === symbol(POWER) || lessp(p1, zero)) {\n      // p1 is BASE\n      accumulator += print_char('(');\n      accumulator += print_expr(p1);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p1); // p1 is BASE\n    }\n\n    return accumulator;\n  };\n\n  print_expo_of_denom = function print_expo_of_denom(p2) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isfraction(p2) || car(p2) === symbol(ADD) || car(p2) === symbol(MULTIPLY) || car(p2) === symbol(POWER)) {\n      // p2 is EXPO\n      accumulator += print_char('(');\n      accumulator += print_expr(p2);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p2); // p2 is EXPO\n    }\n\n    return accumulator;\n  }; // prints stuff after the divide symbol \"/\"\n  // d is the number of denominators\n  //define BASE p1\n  //define EXPO p2\n\n\n  print_denom = function print_denom(p, d) {\n    var accumulator;\n    accumulator = \"\";\n    save();\n    p1 = cadr(p);\n    p2 = caddr(p);\n\n    if (isminusone(p2)) {\n      // p2 is EXPO\n      accumulator += print_base_of_denom(p1);\n      restore();\n      return accumulator;\n    }\n\n    if (d === 1) {\n      // p2 is EXPO\n      accumulator += print_char('(');\n    } // prepare the exponent\n    // (needs to be negated)\n    // before printing it out\n\n\n    push(p2);\n    negate();\n    p2 = pop();\n    accumulator += _print_power(p1, p2);\n\n    if (d === 1) {\n      accumulator += print_char(')');\n    }\n\n    restore();\n    return accumulator;\n  }; //define A p3\n  //define B p4\n\n\n  print_a_over_b = function print_a_over_b(p) {\n    var accumulator, d, doNothing, n;\n    accumulator = \"\";\n    flag = 0;\n    n = 0;\n    d = 0;\n    save(); // count numerators and denominators\n\n    n = 0;\n    d = 0;\n    p1 = cdr(p);\n    p2 = car(p1);\n\n    if (isrational(p2)) {\n      push(p2);\n      mp_numerator();\n\n      _absval();\n\n      p3 = pop();\n      push(p2);\n      mp_denominator();\n      p4 = pop();\n\n      if (!isplusone(p3)) {\n        // p3 is A\n        n++;\n      }\n\n      if (!isplusone(p4)) {\n        // p4 is B\n        d++;\n      }\n\n      p1 = cdr(p1);\n    } else {\n      p3 = one;\n      p4 = one; // p4 is B\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (is_denominator(p2)) {\n        d++;\n      } else {\n        n++;\n      }\n\n      p1 = cdr(p1);\n    } //debugger\n\n\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('\\\\frac{');\n    }\n\n    if (n === 0) {\n      accumulator += print_char('1');\n    } else {\n      flag = 0;\n      p1 = cdr(p);\n\n      if (isrational(car(p1))) {\n        p1 = cdr(p1);\n      }\n\n      if (!isplusone(p3)) {\n        // p3 is A\n        accumulator += _print_factor(p3);\n        flag = 1;\n      }\n\n      while (iscons(p1)) {\n        p2 = car(p1);\n\n        if (is_denominator(p2)) {\n          doNothing = 1;\n        } else {\n          if (flag) {\n            accumulator += print_multiply_sign();\n          }\n\n          accumulator += _print_factor(p2);\n          flag = 1;\n        }\n\n        p1 = cdr(p1);\n      }\n    }\n\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}{');\n    } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n      accumulator += print_str(\" / \");\n    } else {\n      accumulator += print_str(\"/\");\n    }\n\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char('(');\n    }\n\n    flag = 0;\n    p1 = cdr(p);\n\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    if (!isplusone(p4)) {\n      // p4 is B\n      accumulator += _print_factor(p4);\n      flag = 1;\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (is_denominator(p2)) {\n        if (flag) {\n          accumulator += print_multiply_sign();\n        }\n\n        accumulator += print_denom(p2, d);\n        flag = 1;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char(')');\n    }\n\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}');\n    }\n\n    restore();\n    return accumulator;\n  };\n\n  print_expr = function print_expr(p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isadd(p)) {\n      p = cdr(p);\n\n      if (sign_of_term(car(p)) === '-') {\n        accumulator += print_str(\"-\");\n      }\n\n      accumulator += print_term(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (sign_of_term(car(p)) === '+') {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" + \");\n          } else {\n            accumulator += print_str(\"+\");\n          }\n        } else {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" - \");\n          } else {\n            accumulator += print_str(\"-\");\n          }\n        }\n\n        accumulator += print_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (sign_of_term(p) === '-') {\n        accumulator += print_str(\"-\");\n      }\n\n      accumulator += print_term(p);\n    }\n\n    return accumulator;\n  };\n\n  sign_of_term = function sign_of_term(p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && lessp(cadr(p), zero)) {\n      accumulator += '-';\n    } else if (isNumericAtom(p) && lessp(p, zero)) {\n      accumulator += '-';\n    } else {\n      accumulator += '+';\n    }\n\n    return accumulator;\n  };\n\n  print_term = function print_term(p) {\n    var accumulator, denom, numberOneOverSomething, origAccumulator, previousFactorWasANumber;\n    accumulator = \"\";\n\n    if (car(p) === symbol(MULTIPLY) && any_denominators(p)) {\n      accumulator += print_a_over_b(p);\n      return accumulator;\n    }\n\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p); // coeff -1?\n\n      if (isminusone(car(p))) {\n        //      print_char('-')\n        p = cdr(p);\n      }\n\n      previousFactorWasANumber = false; // print the first factor ------------\n\n      if (isNumericAtom(car(p))) {\n        previousFactorWasANumber = true;\n      } // this numberOneOverSomething thing is so that\n      // we show things of the form\n      //   numericFractionOfForm1/something * somethingElse\n      // as\n      //   somethingElse / something\n      // so for example 1/2 * sqrt(2) is rendered as\n      //   sqrt(2)/2\n      // rather than the first form, which looks confusing.\n      // NOTE that you might want to avoid this\n      // when printing polynomials, as it could be nicer\n      // to show the numeric coefficients well separated from\n      // the variable, but we'll see when we'll\n      // come to it if it's an issue.\n\n\n      numberOneOverSomething = false;\n\n      if (printMode === PRINTMODE_LATEX && iscons(cdr(p)) && isNumberOneOverSomething(car(p))) {\n        numberOneOverSomething = true;\n        denom = car(p).q.b.toString();\n      }\n\n      if (numberOneOverSomething) {\n        origAccumulator = accumulator;\n        accumulator = \"\";\n      } else {\n        accumulator += _print_factor(car(p));\n      }\n\n      p = cdr(p); // print all the other factors -------\n\n      while (iscons(p)) {\n        // check if we end up having a case where two numbers\n        // are next to each other. In those cases, latex needs\n        // to insert a \\cdot otherwise they end up\n        // right next to each other and read like one big number\n        if (printMode === PRINTMODE_LATEX) {\n          if (previousFactorWasANumber) {\n            // if what comes next is a power and the base\n            // is a number, then we are in the case\n            // of consecutive numbers.\n            // Note that sqrt() i.e when exponent is 1/2\n            // doesn't count because the radical gives\n            // a nice graphical separation already.\n            if (caar(p) === symbol(POWER)) {\n              if (isNumericAtom(car(cdr(car(p))))) {\n                if (!isfraction(car(cdr(cdr(car(p)))))) {\n                  accumulator += \" \\\\cdot \";\n                }\n              }\n            }\n          }\n        }\n\n        accumulator += print_multiply_sign();\n        accumulator += _print_factor(car(p), false, true);\n        previousFactorWasANumber = false;\n\n        if (isNumericAtom(car(p))) {\n          previousFactorWasANumber = true;\n        }\n\n        p = cdr(p);\n      }\n\n      if (numberOneOverSomething) {\n        accumulator = origAccumulator + \"\\\\frac{\" + accumulator + \"}{\" + denom + \"}\";\n      }\n    } else {\n      accumulator += _print_factor(p);\n    }\n\n    return accumulator;\n  };\n\n  print_subexpr = function print_subexpr(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_char('(');\n    accumulator += print_expr(p);\n    accumulator += print_char(')');\n    return accumulator;\n  };\n\n  print_factorial_function = function print_factorial_function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cadr(p);\n\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(p);\n    } else {\n      accumulator += print_expr(p);\n    }\n\n    accumulator += print_char('!');\n    return accumulator;\n  };\n\n  print_ABS_latex = function print_ABS_latex(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\left |\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\right |\");\n    return accumulator;\n  };\n\n  print_BINOMIAL_latex = function print_BINOMIAL_latex(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\binom{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"}{\");\n    accumulator += print_expr(caddr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_DOT_latex = function print_DOT_latex(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\cdot \");\n    accumulator += print_expr(caddr(p));\n    return accumulator;\n  };\n\n  print_DOT_codegen = function print_DOT_codegen(p) {\n    var accumulator;\n    accumulator = \"dot(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \", \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SIN_codegen = function print_SIN_codegen(p) {\n    var accumulator;\n    accumulator = \"Math.sin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_COS_codegen = function print_COS_codegen(p) {\n    var accumulator;\n    accumulator = \"Math.cos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_TAN_codegen = function print_TAN_codegen(p) {\n    var accumulator;\n    accumulator = \"Math.tan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCSIN_codegen = function print_ARCSIN_codegen(p) {\n    var accumulator;\n    accumulator = \"Math.asin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCCOS_codegen = function print_ARCCOS_codegen(p) {\n    var accumulator;\n    accumulator = \"Math.acos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCTAN_codegen = function print_ARCTAN_codegen(p) {\n    var accumulator;\n    accumulator = \"Math.atan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SQRT_latex = function print_SQRT_latex(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\sqrt{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_latex = function print_TRANSPOSE_latex(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n\n    accumulator += print_expr(cadr(p));\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^T\");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_codegen = function print_TRANSPOSE_codegen(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"transpose(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_UNIT_codegen = function print_UNIT_codegen(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"identity(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_INV_latex = function print_INV_latex(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n\n    accumulator += print_expr(cadr(p));\n\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^{-1}\");\n    return accumulator;\n  };\n\n  print_INV_codegen = function print_INV_codegen(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"inv(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_DEFINT_latex = function print_DEFINT_latex(p) {\n    var accumulator, functionBody, i, i1, numberOfIntegrals, originalIntegral, ref1, theIntegral, theVariable;\n    accumulator = \"\";\n    functionBody = car(cdr(p));\n    p = cdr(p);\n    originalIntegral = p;\n    numberOfIntegrals = 0;\n\n    while (iscons(cdr(cdr(p)))) {\n      numberOfIntegrals++;\n      theIntegral = cdr(cdr(p));\n      accumulator += print_str(\"\\\\int^{\");\n      accumulator += print_expr(car(cdr(theIntegral)));\n      accumulator += print_str(\"}_{\");\n      accumulator += print_expr(car(theIntegral));\n      accumulator += print_str(\"} \\\\! \");\n      p = cdr(theIntegral);\n    }\n\n    accumulator += print_expr(functionBody);\n    accumulator += print_str(\" \\\\,\");\n    p = originalIntegral;\n\n    for (i = i1 = 1, ref1 = numberOfIntegrals; 1 <= ref1 ? i1 <= ref1 : i1 >= ref1; i = 1 <= ref1 ? ++i1 : --i1) {\n      theVariable = cdr(p);\n      accumulator += print_str(\" \\\\mathrm{d} \");\n      accumulator += print_expr(car(theVariable));\n\n      if (i < numberOfIntegrals) {\n        accumulator += print_str(\" \\\\, \");\n      }\n\n      p = cdr(cdr(theVariable));\n    }\n\n    return accumulator;\n  };\n\n  print_tensor = function print_tensor(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += _print_tensor_inner3(p, 0, 0)[1];\n    return accumulator;\n  }; // j scans the dimensions\n  // k is an increment for all the printed elements\n  //   since they are all together in sequence in one array\n\n\n  _print_tensor_inner3 = function print_tensor_inner(p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, retString;\n    accumulator = \"\";\n    accumulator += print_str(\"[\"); // only the last dimension prints the actual elements\n    // e.g. in a matrix, the first dimension contains\n    // vectors, not elements, and the second dimension\n    // actually contains the elements\n    // if not the last dimension, we are just printing wrappers\n    // and recursing down i.e. we print the next dimension\n\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        var _print_tensor_inner = _print_tensor_inner3(p, j + 1, k);\n\n        var _print_tensor_inner2 = _slicedToArray(_print_tensor_inner, 2);\n\n        k = _print_tensor_inner2[0];\n        retString = _print_tensor_inner2[1];\n        accumulator += retString; // add separator between elements dimensions\n        // \"above\" the inner-most dimension\n\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n      }\n    } else {\n      // if we reached the last dimension, we print the actual\n      // elements\n      for (i = j1 = 0, ref2 = p.tensor.dim[j]; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]); // add separator between elements in the\n        // inner-most dimension\n\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n\n        k++;\n      }\n    }\n\n    accumulator += print_str(\"]\");\n    return [k, accumulator];\n  };\n\n  print_tensor_latex = function print_tensor_latex(p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (p.tensor.ndim <= 2) {\n      accumulator += _print_tensor_inner_latex(true, p, 0, 0)[1];\n    }\n\n    return accumulator;\n  }; // firstLevel is needed because printing a matrix\n  // is not exactly an elegant recursive procedure:\n  // the vector on the first level prints the latex\n  // \"wrap\", while the vectors that make up the\n  // rows don't. so it's a bit asymmetric and this\n  // flag helps.\n  // j scans the dimensions\n  // k is an increment for all the printed elements\n  //   since they are all together in sequence in one array\n\n\n  _print_tensor_inner_latex = function print_tensor_inner_latex(firstLevel, p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, retString;\n    accumulator = \"\"; // open the outer latex wrap\n\n    if (firstLevel) {\n      accumulator += \"\\\\begin{bmatrix} \";\n    } // only the last dimension prints the actual elements\n    // e.g. in a matrix, the first dimension contains\n    // vectors, not elements, and the second dimension\n    // actually contains the elements\n    // if not the last dimension, we are just printing wrappers\n    // and recursing down i.e. we print the next dimension\n\n\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; 0 <= ref1 ? i1 < ref1 : i1 > ref1; i = 0 <= ref1 ? ++i1 : --i1) {\n        var _print_tensor_inner_l = _print_tensor_inner_latex(0, p, j + 1, k);\n\n        var _print_tensor_inner_l2 = _slicedToArray(_print_tensor_inner_l, 2);\n\n        k = _print_tensor_inner_l2[0];\n        retString = _print_tensor_inner_l2[1];\n        accumulator += retString;\n\n        if (i !== p.tensor.dim[j] - 1) {\n          // add separator between rows\n          accumulator += print_str(\" \\\\\\\\ \");\n        }\n      }\n    } else {\n      // if we reached the last dimension, we print the actual\n      // elements\n      for (i = j1 = 0, ref2 = p.tensor.dim[j]; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]); // separator between elements in each row\n\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\" & \");\n        }\n\n        k++;\n      }\n    } // close the outer latex wrap\n\n\n    if (firstLevel) {\n      accumulator += \" \\\\end{bmatrix}\";\n    }\n\n    return [k, accumulator];\n  };\n\n  print_SUM_latex = function print_SUM_latex(p) {\n    var accumulator;\n    accumulator = \"\\\\sum_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_SUM_codegen = function print_SUM_codegen(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderSum = 0; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderSum += \" + print_expr(body) + \";\" + \" } \" + \" return holderSum;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_TEST_latex = function print_TEST_latex(p) {\n    var accumulator;\n    accumulator = \"\\\\left\\\\{ \\\\begin{array}{ll}\";\n    p = cdr(p);\n\n    while (iscons(p)) {\n      // odd number of parameters means that the\n      // last argument becomes the default case\n      // i.e. the one without a test.\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"{\";\n        accumulator += print_expr(car(p));\n        accumulator += \"} & otherwise \";\n        accumulator += \" \\\\\\\\\\\\\\\\\";\n        break;\n      }\n\n      accumulator += \"{\";\n      accumulator += print_expr(cadr(p));\n      accumulator += \"} & if & \";\n      accumulator += print_expr(car(p));\n      accumulator += \" \\\\\\\\\\\\\\\\\"; // test unsuccessful, continue to the\n      // next pair of test,value\n\n      p = cddr(p);\n    }\n\n    accumulator = accumulator.substring(0, accumulator.length - 4);\n    return accumulator += \"\\\\end{array} \\\\right.\";\n  };\n\n  print_TEST_codegen = function print_TEST_codegen(p) {\n    var accumulator, howManyIfs;\n    accumulator = \"(function(){\";\n    p = cdr(p);\n    howManyIfs = 0;\n\n    while (iscons(p)) {\n      // odd number of parameters means that the\n      // last argument becomes the default case\n      // i.e. the one without a test.\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"else {\";\n        accumulator += \"return (\" + print_expr(car(p)) + \");\";\n        accumulator += \"}\";\n        break;\n      }\n\n      if (howManyIfs) {\n        accumulator += \" else \";\n      }\n\n      accumulator += \"if (\" + print_expr(car(p)) + \"){\";\n      accumulator += \"return (\" + print_expr(cadr(p)) + \");\";\n      accumulator += \"}\"; // test unsuccessful, continue to the\n      // next pair of test,value\n\n      howManyIfs++;\n      p = cddr(p);\n    }\n\n    accumulator += \"})()\";\n    return accumulator;\n  };\n\n  print_TESTLT_latex = function print_TESTLT_latex(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" < \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTLE_latex = function print_TESTLE_latex(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\leq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGT_latex = function print_TESTGT_latex(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" > \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGE_latex = function print_TESTGE_latex(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\geq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTEQ_latex = function print_TESTEQ_latex(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" = \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_FOR_codegen = function print_FOR_codegen(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   \" + print_expr(body) + \" } \" + \"})()\";\n    return accumulator;\n  };\n\n  print_DO_codegen = function print_DO_codegen(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n\n    while (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n    }\n\n    return accumulator;\n  };\n\n  print_SETQ_codegen = function print_SETQ_codegen(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \" = \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"; \";\n    return accumulator;\n  };\n\n  print_PRODUCT_latex = function print_PRODUCT_latex(p) {\n    var accumulator;\n    accumulator = \"\\\\prod_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_PRODUCT_codegen = function print_PRODUCT_codegen(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderProduct = 1; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderProduct *= \" + print_expr(body) + \";\" + \" } \" + \" return holderProduct;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_base = function print_base(p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (isadd(cadr(p)) || caadr(p) === symbol(MULTIPLY) || caadr(p) === symbol(POWER) || isnegativenumber(cadr(p))) {\n      accumulator += print_str('(');\n      accumulator += print_expr(cadr(p));\n      accumulator += print_str(')');\n    } else if (isNumericAtom(cadr(p)) && (lessp(cadr(p), zero) || isfraction(cadr(p)))) {\n      accumulator += print_str('(');\n      accumulator += _print_factor(cadr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += _print_factor(cadr(p));\n    }\n\n    return accumulator;\n  };\n\n  print_exponent = function print_exponent(p) {\n    var accumulator;\n    accumulator = \"\";\n\n    if (iscons(caddr(p)) || isfraction(caddr(p)) || isNumericAtom(caddr(p)) && lessp(caddr(p), zero)) {\n      accumulator += print_str('(');\n      accumulator += print_expr(caddr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += _print_factor(caddr(p));\n    }\n\n    return accumulator;\n  };\n\n  _print_power = function print_power(base, exponent) {\n    var accumulator, denomExponent, newExponent, numExponent;\n    accumulator = \"\"; //debugger\n\n    if (DEBUG) {\n      console.log(\"power base: \" + base + \" \" + \" exponent: \" + exponent);\n    } // quick check is this is actually a square root.\n\n\n    if (isoneovertwo(exponent)) {\n      if (equaln(base, 2)) {\n        if (codeGen) {\n          accumulator += print_str(\"Math.SQRT2\");\n          return accumulator;\n        }\n      } else {\n        if (printMode === PRINTMODE_LATEX) {\n          accumulator += print_str(\"\\\\sqrt{\");\n          accumulator += print_expr(base);\n          accumulator += print_str(\"}\");\n          return accumulator;\n        } else if (codeGen) {\n          accumulator += print_str(\"Math.sqrt(\");\n          accumulator += print_expr(base);\n          accumulator += print_str(')');\n          return accumulator;\n        }\n      }\n    }\n\n    if (equaln(get_binding(symbol(PRINT_LEAVE_E_ALONE)), 1) && base === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.exp(\");\n        accumulator += print_expo_of_denom(exponent);\n        accumulator += print_str(')');\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"e^{\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(\"}\");\n      } else {\n        accumulator += print_str(\"exp(\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      }\n\n      return accumulator;\n    }\n\n    if (codeGen) {\n      accumulator += print_str(\"Math.pow(\");\n      accumulator += print_base_of_denom(base);\n      accumulator += print_str(\", \");\n      accumulator += print_expo_of_denom(exponent);\n      accumulator += print_str(')');\n      return accumulator;\n    }\n\n    if (equaln(get_binding(symbol(PRINT_LEAVE_X_ALONE)), 0) || base.printname !== \"x\") {\n      // if the exponent is negative then\n      // we invert the base BUT we don't do\n      // that if the base is \"e\", because for\n      // example when trigonometric functions are\n      // expressed in terms of exponential functions\n      // that would be really confusing, one wants to\n      // keep \"e\" as the base and the negative exponent\n      if (base !== symbol(E)) {\n        if (isminusone(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += print_expr(base);\n            accumulator += print_str(')');\n          } else {\n            accumulator += print_expr(base);\n          }\n\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n\n          return accumulator;\n        }\n\n        if (isnegativeterm(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n\n          push(exponent);\n          push_integer(-1);\n          multiply();\n          newExponent = pop();\n\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += _print_power(base, newExponent);\n            accumulator += print_str(')');\n          } else {\n            accumulator += _print_power(base, newExponent);\n          }\n\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n\n          return accumulator;\n        }\n      }\n\n      if (isfraction(exponent) && printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\sqrt\");\n        push(exponent);\n\n        _denominator();\n\n        denomExponent = pop();\n\n        if (!isplustwo(denomExponent)) {\n          accumulator += print_str(\"[\");\n          accumulator += print_expr(denomExponent);\n          accumulator += print_str(\"]\");\n        }\n\n        accumulator += print_str(\"{\");\n        push(exponent);\n\n        _numerator();\n\n        numExponent = pop();\n        exponent = numExponent;\n        accumulator += _print_power(base, exponent);\n        accumulator += print_str(\"}\");\n        return accumulator;\n      }\n    }\n\n    if (printMode === PRINTMODE_LATEX && isplusone(exponent)) {\n      // if we are in latex mode we turn many\n      // radicals into a radix sign with a power\n      // underneath, and the power is often one\n      // (e.g. square root turns into a radical\n      // with a power one underneath) so handle\n      // this case simply here, just print the base\n      accumulator += print_expr(base);\n    } else {\n      // print the base,\n      // determining if it needs to be\n      // wrapped in parentheses or not\n      if (isadd(base) || isnegativenumber(base)) {\n        accumulator += print_str('(');\n        accumulator += print_expr(base);\n        accumulator += print_str(')');\n      } else if (car(base) === symbol(MULTIPLY) || car(base) === symbol(POWER)) {\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str('(');\n        }\n\n        accumulator += _print_factor(base, true);\n\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str(')');\n        }\n      } else if (isNumericAtom(base) && (lessp(base, zero) || isfraction(base))) {\n        accumulator += print_str('(');\n        accumulator += _print_factor(base);\n        accumulator += print_str(')');\n      } else {\n        accumulator += _print_factor(base);\n      } // print the power symbol\n      //debugger\n\n\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        //print_str(\" ^ \")\n        accumulator += print_str(power_str);\n      } else {\n        accumulator += print_str(\"^\");\n      } // print the exponent\n\n\n      if (printMode === PRINTMODE_LATEX) {\n        // in latex mode, one can omit the curly braces\n        // wrapping the exponent if the exponent is only\n        // one character long\n        if (print_expr(exponent).length > 1) {\n          accumulator += print_str(\"{\");\n          accumulator += print_expr(exponent);\n          accumulator += print_str(\"}\");\n        } else {\n          accumulator += print_expr(exponent);\n        }\n      } else if (iscons(exponent) || isfraction(exponent) || isNumericAtom(exponent) && lessp(exponent, zero)) {\n        accumulator += print_str('(');\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      } else {\n        accumulator += _print_factor(exponent);\n      }\n    }\n\n    return accumulator;\n  };\n\n  print_index_function = function print_index_function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(car(p));\n    } else {\n      accumulator += print_expr(car(p));\n    }\n\n    accumulator += print_str('[');\n    p = cdr(p);\n\n    if (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        accumulator += print_str(',');\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n      }\n    }\n\n    accumulator += print_str(']');\n    return accumulator;\n  };\n\n  _print_factor = function print_factor(p, omitParens, pastFirstFactor) {\n    var accumulator, base, exponent, fbody, parameters, returned; // debugger\n\n    accumulator = \"\";\n\n    if (isNumericAtom(p)) {\n      // in an evaluated term, all the numeric parts\n      // are at the beginning of the term.\n      // When printing the EXPRESSION,\n      // we peek into the first factor of the term and we\n      // look at whether it's a number less then zero.\n      // if it is, we print the \"-\" as the \"leading\" part of the\n      // print of the EXPRESSION, and then we proceed printint the factors\n      // of the term. This means that when we come here, we must\n      // skip printing the minus if the number is negative,\n      // because it's already been printed.\n      if (pastFirstFactor && lessp(p, zero)) {\n        accumulator += '(';\n      }\n\n      accumulator += print_number(p, pastFirstFactor);\n\n      if (pastFirstFactor && lessp(p, zero)) {\n        accumulator += ')';\n      }\n\n      return accumulator;\n    }\n\n    if (isstr(p)) {\n      accumulator += print_str(\"\\\"\");\n      accumulator += print_str(p.str);\n      accumulator += print_str(\"\\\"\");\n      return accumulator;\n    }\n\n    if (istensor(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_tensor_latex(p);\n      } else {\n        accumulator += print_tensor(p);\n      }\n\n      return accumulator;\n    }\n\n    if (car(p) === symbol(MULTIPLY)) {\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\left (\");\n          } else {\n            accumulator += print_str('(');\n          }\n        }\n      }\n\n      accumulator += print_expr(p);\n\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\right ) \");\n          } else {\n            accumulator += print_str(')');\n          }\n        }\n      }\n\n      return accumulator;\n    } else if (isadd(p)) {\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n\n      accumulator += print_expr(p);\n\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n\n      return accumulator;\n    }\n\n    if (car(p) === symbol(POWER)) {\n      base = cadr(p);\n      exponent = caddr(p);\n      accumulator += _print_power(base, exponent);\n      return accumulator;\n    } //  if (car(p) == _list) {\n    //    print_str(\"{\")\n    //    p = cdr(p)\n    //    if (iscons(p)) {\n    //      print_expr(car(p))\n    //      p = cdr(p)\n    //    }\n    //    while (iscons(p)) {\n    //      print_str(\",\")\n    //      print_expr(car(p))\n    //      p = cdr(p)\n    //    }\n    //    print_str(\"}\")\n    //    return\n    //  }\n\n\n    if (car(p) === symbol(FUNCTION)) {\n      fbody = cadr(p);\n\n      if (!codeGen) {\n        parameters = caddr(p);\n        accumulator += print_str(\"function \");\n\n        if (DEBUG) {\n          console.log(\"emittedString from print_factor \" + stringsEmittedByUserPrintouts);\n        }\n\n        returned = _print_list(parameters);\n        accumulator += returned;\n        accumulator += print_str(\" -> \");\n      }\n\n      accumulator += print_expr(fbody);\n      return accumulator;\n    }\n\n    if (car(p) === symbol(PATTERN)) {\n      accumulator += print_expr(caadr(p));\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\" \\\\rightarrow \");\n      } else {\n        if (printMode === PRINTMODE_HUMAN && !test_flag) {\n          accumulator += print_str(\" -> \");\n        } else {\n          accumulator += print_str(\"->\");\n        }\n      }\n\n      accumulator += print_expr(car(cdr(cadr(p))));\n      return accumulator;\n    }\n\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      accumulator += print_index_function(p);\n      return accumulator;\n    }\n\n    if (car(p) === symbol(FACTORIAL)) {\n      accumulator += print_factorial_function(p);\n      return accumulator;\n    } else if (car(p) === symbol(ABS) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_ABS_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(SQRT) && printMode === PRINTMODE_LATEX) {\n      //debugger\n      accumulator += print_SQRT_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(TRANSPOSE)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TRANSPOSE_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_TRANSPOSE_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(UNIT)) {\n      if (codeGen) {\n        accumulator += print_UNIT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(INV)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_INV_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_INV_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(BINOMIAL) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_BINOMIAL_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(DEFINT) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_DEFINT_latex(p);\n      return accumulator;\n    } else if (isinnerordot(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_DOT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_DOT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SIN)) {\n      if (codeGen) {\n        accumulator += print_SIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(COS)) {\n      if (codeGen) {\n        accumulator += print_COS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TAN)) {\n      if (codeGen) {\n        accumulator += print_TAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCSIN)) {\n      if (codeGen) {\n        accumulator += print_ARCSIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCCOS)) {\n      if (codeGen) {\n        accumulator += print_ARCCOS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCTAN)) {\n      if (codeGen) {\n        accumulator += print_ARCTAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SUM)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_SUM_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_SUM_codegen(p);\n        return accumulator;\n      } //else if car(p) == symbol(QUOTE)\n      //  if printMode == PRINTMODE_LATEX\n      //    print_expr(cadr(p))\n      //    return accumulator\n\n    } else if (car(p) === symbol(PRODUCT)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_PRODUCT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_PRODUCT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FOR)) {\n      if (codeGen) {\n        accumulator += print_FOR_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(DO)) {\n      if (codeGen) {\n        accumulator += print_DO_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TEST)) {\n      if (codeGen) {\n        accumulator += print_TEST_codegen(p);\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TEST_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") < (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") <= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") > (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") >= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTEQ)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") === (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTEQ_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FLOOR)) {\n      if (codeGen) {\n        accumulator += \"Math.floor(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lfloor {\" + print_expr(cadr(p)) + \"} \\\\rfloor \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(CEILING)) {\n      if (codeGen) {\n        accumulator += \"Math.ceiling(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lceil {\" + print_expr(cadr(p)) + \"} \\\\rceil \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ROUND)) {\n      if (codeGen) {\n        accumulator += \"Math.round(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SETQ)) {\n      if (codeGen) {\n        accumulator += print_SETQ_codegen(p);\n        return accumulator;\n      } else {\n        accumulator += print_expr(cadr(p));\n        accumulator += print_str(\"=\");\n        accumulator += print_expr(caddr(p));\n        return accumulator;\n      }\n    }\n\n    if (iscons(p)) {\n      //if (car(p) == symbol(FORMAL) && cadr(p)->k == SYM) {\n      //  print_str(((struct symbol *) cadr(p))->name)\n      //  return\n      //}\n      accumulator += _print_factor(car(p));\n      p = cdr(p);\n\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n\n      if (iscons(p)) {\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n\n        while (iscons(p)) {\n          accumulator += print_str(\",\");\n          accumulator += print_expr(car(p));\n          p = cdr(p);\n        }\n      }\n\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n\n      return accumulator;\n    }\n\n    if (p === symbol(DERIVATIVE)) {\n      accumulator += print_char('d');\n    } else if (p === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.E\");\n      } else {\n        accumulator += print_str(\"e\");\n      }\n    } else if (p === symbol(PI)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\pi\");\n      } else {\n        accumulator += print_str(\"pi\");\n      }\n    } else {\n      accumulator += print_str(get_printname(p));\n    }\n\n    return accumulator;\n  };\n\n  _print_list = function print_list(p) {\n    var accumulator;\n    accumulator = \"\";\n\n    switch (p.k) {\n      case CONS:\n        accumulator += '(';\n        accumulator += _print_list(car(p));\n\n        if (p === cdr(p) && p !== symbol(NIL)) {\n          console.log(\"oh no recursive!\");\n          debugger;\n        }\n\n        p = cdr(p);\n\n        while (iscons(p)) {\n          accumulator += \" \";\n          accumulator += _print_list(car(p));\n          p = cdr(p);\n\n          if (p === cdr(p) && p !== symbol(NIL)) {\n            console.log(\"oh no recursive!\");\n            debugger;\n          }\n        }\n\n        if (p !== symbol(NIL)) {\n          accumulator += \" . \";\n          accumulator += _print_list(p);\n        }\n\n        accumulator += ')';\n        break;\n\n      case STR:\n        //print_str(\"\\\"\")\n        accumulator += p.str;\n        break;\n      //print_str(\"\\\"\")\n\n      case NUM:\n      case DOUBLE:\n        accumulator += print_number(p, true);\n        break;\n\n      case SYM:\n        accumulator += get_printname(p);\n        break;\n\n      default:\n        accumulator += \"<tensor>\";\n    }\n\n    return accumulator;\n  };\n\n  print_multiply_sign = function print_multiply_sign() {\n    var accumulator;\n    accumulator = \"\";\n\n    if (printMode === PRINTMODE_LATEX) {\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        accumulator += print_str(\" \");\n      } else {\n        return accumulator;\n      }\n    }\n\n    if (printMode === PRINTMODE_HUMAN && !test_flag && !codeGen) {\n      accumulator += print_str(\" \");\n    } else {\n      accumulator += print_str(\"*\");\n    }\n\n    return accumulator;\n  };\n\n  is_denominator = function is_denominator(p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && isnegativeterm(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }; // don't consider the leading fraction\n  // we want 2/3*a*b*c instead of 2*a*b*c/3\n\n\n  any_denominators = function any_denominators(p) {\n    var q;\n    p = cdr(p); //  if (isfraction(car(p)))\n    //    return 1\n\n    while (iscons(p)) {\n      q = car(p);\n\n      if (is_denominator(q)) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n  /*\n   Prints in \"2d\", e.g. instead of 1/(x+1)^2 :\n         1\n   ----------\n           2\n    (1 + x)\n    Note that although this looks more natural, a) it's not parsable and\n   b) it can be occasionally be ambiguous, such as:\n      1\n   ----\n     2\n   x\n   is 1/x^2 but it also looks a little like x^(1/2)\n   */\n  //-----------------------------------------------------------------------------\n  //  Examples:\n  //     012345678\n  //  -2 .........\n  //  -1 .........\n  //   0 ..hello..  x=2, y=0, h=1, w=5\n  //   1 .........\n  //   2 .........\n  //     012345678\n  //  -2 .........\n  //  -1 ..355....\n  //   0 ..---....  x=2, y=-1, h=3, w=3\n  //   1 ..113....\n  //   2 .........\n  //-----------------------------------------------------------------------------\n\n\n  YMAX = 10000;\n\n  glyph = function () {\n    var glyph = /*#__PURE__*/_createClass(function glyph() {\n      \"use strict\";\n\n      _classCallCheck(this, glyph);\n    });\n\n    ;\n    glyph.prototype.c = 0;\n    glyph.prototype.x = 0;\n    glyph.prototype.y = 0;\n    return glyph;\n  }.call(this); // will contain glyphs\n\n\n  chartab = [];\n\n  for (charTabIndex = i1 = 0, ref1 = YMAX; 0 <= ref1 ? i1 < ref1 : i1 > ref1; charTabIndex = 0 <= ref1 ? ++i1 : --i1) {\n    chartab[charTabIndex] = new glyph();\n  }\n\n  yindex = 0;\n  level = 0;\n  emit_x = 0;\n  expr_level = 0;\n  display_flag = 0; // this is not really the translated version,\n  // the original is in window.cpp and is\n  // rather more complex\n\n  printchar_nowrap = function printchar_nowrap(character) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += character;\n    return accumulator;\n  };\n\n  printchar = function printchar(character) {\n    return printchar_nowrap(character);\n  };\n\n  print2dascii = function print2dascii(p) {\n    var beenPrinted, h, w, y;\n    h = 0;\n    w = 0;\n    y = 0;\n    save();\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_top_expr(p); // if too wide then print flat\n\n    var _get_size = get_size(0, yindex);\n\n    var _get_size2 = _slicedToArray(_get_size, 3);\n\n    h = _get_size2[0];\n    w = _get_size2[1];\n    y = _get_size2[2];\n\n    if (w > 100) {\n      printline(p);\n      restore();\n      return;\n    }\n\n    beenPrinted = print_glyphs();\n    restore();\n    return beenPrinted;\n  };\n\n  emit_top_expr = function emit_top_expr(p) {\n    if (car(p) === symbol(SETQ)) {\n      emit_expr(cadr(p));\n\n      __emit_str(\" = \");\n\n      emit_expr(caddr(p));\n      return;\n    }\n\n    if (istensor(p)) {\n      return emit_tensor(p);\n    } else {\n      return emit_expr(p);\n    }\n  };\n\n  will_be_displayed_as_fraction = function will_be_displayed_as_fraction(p) {\n    if (level > 0) {\n      return 0;\n    }\n\n    if (isfraction(p)) {\n      return 1;\n    }\n\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n\n    if (isfraction(cadr(p))) {\n      return 1;\n    }\n\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  emit_expr = function emit_expr(p) {\n    //  if (level > 0) {\n    //    printexpr(p)\n    //    return\n    //  }\n    expr_level++;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n\n      if (__is_negative(car(p))) {\n        __emit_char('-');\n\n        if (will_be_displayed_as_fraction(car(p))) {\n          __emit_char(' ');\n        }\n      }\n\n      emit_term(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n\n          __emit_char('-');\n\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n\n          __emit_char('+');\n\n          __emit_char(' ');\n        }\n\n        emit_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (__is_negative(p)) {\n        __emit_char('-');\n\n        if (will_be_displayed_as_fraction(p)) {\n          __emit_char(' ');\n        }\n      }\n\n      emit_term(p);\n    }\n\n    return expr_level--;\n  };\n\n  emit_unsigned_expr = function emit_unsigned_expr(p) {\n    var results;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p); //    if (__is_negative(car(p)))\n      //      __emit_char('-')\n\n      emit_term(car(p));\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n\n          __emit_char('-');\n\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n\n          __emit_char('+');\n\n          __emit_char(' ');\n        }\n\n        emit_term(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      //    if (__is_negative(p))\n      //      __emit_char('-')\n      return emit_term(p);\n    }\n  };\n\n  __is_negative = function __is_negative(p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    }\n\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  emit_term = function emit_term(p) {\n    var n;\n\n    if (car(p) === symbol(MULTIPLY)) {\n      n = count_denominators(p);\n\n      if (n && level === 0) {\n        return emit_fraction(p, n);\n      } else {\n        return emit_multiply(p, n);\n      }\n    } else {\n      return emit_factor(p);\n    }\n  };\n\n  isdenominator = function isdenominator(p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && __is_negative(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  count_denominators = function count_denominators(p) {\n    var count, q;\n    count = 0;\n    p = cdr(p); //  if (isfraction(car(p))) {\n    //    count++\n    //    p = cdr(p)\n    //  }\n\n    while (iscons(p)) {\n      q = car(p);\n\n      if (isdenominator(q)) {\n        count++;\n      }\n\n      p = cdr(p);\n    }\n\n    return count;\n  }; // n is the number of denominators, not counting a fraction like 1/2\n\n\n  emit_multiply = function emit_multiply(p, n) {\n    var results;\n\n    if (n === 0) {\n      p = cdr(p);\n\n      if (isplusone(car(p)) || isminusone(car(p))) {\n        p = cdr(p);\n      }\n\n      emit_factor(car(p));\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        __emit_char(' ');\n\n        emit_factor(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      emit_numerators(p);\n\n      __emit_char('/'); // need grouping if more than one denominator\n\n\n      if (n > 1 || isfraction(cadr(p))) {\n        __emit_char('(');\n\n        emit_denominators(p);\n        return __emit_char(')');\n      } else {\n        return emit_denominators(p);\n      }\n    }\n  }; //define A p3\n  //define B p4\n  // sign of term has already been emitted\n\n\n  emit_fraction = function emit_fraction(p, d) {\n    var count, doNothing, k1, k2, n, x;\n    count = 0;\n    k1 = 0;\n    k2 = 0;\n    n = 0;\n    x = 0;\n    save();\n    p3 = one;\n    p4 = one;\n\n    if (isrational(cadr(p))) {\n      push(cadr(p));\n      mp_numerator();\n\n      _absval();\n\n      p3 = pop();\n      push(cadr(p));\n      mp_denominator();\n      p4 = pop(); // p4 is B\n    }\n\n    if (isdouble(cadr(p))) {\n      push(cadr(p));\n\n      _absval();\n\n      p3 = pop(); // p3 is A\n    } // count numerators\n\n\n    if (isplusone(p3)) {\n      // p3 is A\n      n = 0;\n    } else {\n      n = 1;\n    }\n\n    p1 = cdr(p);\n\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        n++;\n      }\n\n      p1 = cdr(p1);\n    } // emit numerators\n\n\n    x = emit_x;\n    k1 = yindex;\n    count = 0;\n\n    if (!isplusone(p3)) {\n      // p3 is A\n      emit_number(p3, 0);\n      count++;\n    } // skip over \"multiply\"\n\n\n    p1 = cdr(p); // skip over numerical coefficient, already handled\n\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n\n        if (n === 1) {\n          emit_expr(p2);\n        } else {\n          emit_factor(p2);\n        }\n\n        count++;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    if (count === 0) {\n      __emit_char('1');\n    } // emit denominators\n\n\n    k2 = yindex;\n    count = 0;\n\n    if (!isplusone(p4)) {\n      // p4 is B\n      emit_number(p4, 0);\n      count++;\n      d++;\n    }\n\n    p1 = cdr(p);\n\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n\n    while (iscons(p1)) {\n      p2 = car(p1);\n\n      if (isdenominator(p2)) {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n\n        emit_denominator(p2, d);\n        count++;\n      }\n\n      p1 = cdr(p1);\n    }\n\n    fixup_fraction(x, k1, k2);\n    return restore();\n  }; // p points to a multiply\n\n\n  emit_numerators = function emit_numerators(p) {\n    var doNothing, n;\n    save();\n    n = 0;\n    p1 = one;\n    p = cdr(p);\n\n    if (isrational(car(p))) {\n      push(car(p));\n      mp_numerator();\n\n      _absval();\n\n      p1 = pop();\n      p = cdr(p);\n    } else if (isdouble(car(p))) {\n      push(car(p));\n\n      _absval();\n\n      p1 = pop();\n      p = cdr(p);\n    }\n\n    n = 0;\n\n    if (!isplusone(p1)) {\n      emit_number(p1, 0);\n      n++;\n    }\n\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        doNothing = 1;\n      } else {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n\n        emit_factor(car(p));\n        n++;\n      }\n\n      p = cdr(p);\n    }\n\n    if (n === 0) {\n      __emit_char('1');\n    }\n\n    return restore();\n  }; // p points to a multiply\n\n\n  emit_denominators = function emit_denominators(p) {\n    var n;\n    save();\n    n = 0;\n    p = cdr(p);\n\n    if (isfraction(car(p))) {\n      push(car(p));\n      mp_denominator();\n      p1 = pop();\n      emit_number(p1, 0);\n      n++;\n      p = cdr(p);\n    }\n\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n\n        emit_denominator(car(p), 0);\n        n++;\n      }\n\n      p = cdr(p);\n    }\n\n    return restore();\n  };\n\n  emit_factor = function emit_factor(p) {\n    if (istensor(p)) {\n      if (level === 0) {\n        //emit_tensor(p)\n        emit_flat_tensor(p);\n      } else {\n        emit_flat_tensor(p);\n      }\n\n      return;\n    }\n\n    if (isdouble(p)) {\n      emit_number(p, 0);\n      return;\n    }\n\n    if (car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY)) {\n      emit_subexpr(p);\n      return;\n    }\n\n    if (car(p) === symbol(POWER)) {\n      emit_power(p);\n      return;\n    }\n\n    if (iscons(p)) {\n      //if (car(p) == symbol(FORMAL) && cadr(p).k == SYM)\n      //  emit_symbol(cadr(p))\n      //else\n      emit_function(p);\n      return;\n    }\n\n    if (isNumericAtom(p)) {\n      if (level === 0) {\n        emit_numerical_fraction(p);\n      } else {\n        emit_number(p, 0);\n      }\n\n      return;\n    }\n\n    if (issymbol(p)) {\n      emit_symbol(p);\n      return;\n    }\n\n    if (isstr(p)) {\n      emit_string(p);\n    }\n  };\n\n  emit_numerical_fraction = function emit_numerical_fraction(p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n    save();\n    push(p);\n    mp_numerator();\n\n    _absval();\n\n    p3 = pop();\n    push(p);\n    mp_denominator();\n    p4 = pop();\n\n    if (isplusone(p4)) {\n      // p4 is B\n      emit_number(p3, 0);\n      restore();\n      return;\n    }\n\n    x = emit_x;\n    k1 = yindex;\n    emit_number(p3, 0);\n    k2 = yindex;\n    emit_number(p4, 0); // p4 is B\n\n    fixup_fraction(x, k1, k2);\n    return restore();\n  }; // if it's a factor then it doesn't need parens around it, i.e. 1/sin(theta)^2\n\n\n  isfactor = function isfactor(p) {\n    if (iscons(p) && car(p) !== symbol(ADD) && car(p) !== symbol(MULTIPLY) && car(p) !== symbol(POWER)) {\n      return 1;\n    }\n\n    if (issymbol(p)) {\n      return 1;\n    }\n\n    if (isfraction(p)) {\n      return 0;\n    }\n\n    if (isnegativenumber(p)) {\n      return 0;\n    }\n\n    if (isNumericAtom(p)) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  emit_power = function emit_power(p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n\n    if (cadr(p) === symbol(E)) {\n      __emit_str(\"exp(\");\n\n      emit_expr(caddr(p));\n\n      __emit_char(')');\n\n      return;\n    }\n\n    if (level > 0) {\n      if (isminusone(caddr(p))) {\n        __emit_char('1');\n\n        __emit_char('/');\n\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n      } else {\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n\n        __emit_char('^');\n\n        if (isfactor(caddr(p))) {\n          emit_factor(caddr(p));\n        } else {\n          emit_subexpr(caddr(p));\n        }\n      }\n\n      return;\n    } // special case: 1 over something\n\n\n    if (__is_negative(caddr(p))) {\n      x = emit_x;\n      k1 = yindex;\n\n      __emit_char('1');\n\n      k2 = yindex; //level++\n\n      emit_denominator(p, 1); //level--\n\n      fixup_fraction(x, k1, k2);\n      return;\n    }\n\n    k1 = yindex;\n\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n\n    k2 = yindex;\n    level++;\n    emit_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  }; // if n == 1 then emit as expr (no parens)\n  // p is a power\n\n\n  emit_denominator = function emit_denominator(p, n) {\n    var k1, k2;\n    k1 = 0;\n    k2 = 0; // special case: 1 over something\n\n    if (isminusone(caddr(p))) {\n      if (n === 1) {\n        emit_expr(cadr(p));\n      } else {\n        emit_factor(cadr(p));\n      }\n\n      return;\n    }\n\n    k1 = yindex; // emit base\n\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n\n    k2 = yindex; // emit exponent, don't emit minus sign\n\n    level++;\n    emit_unsigned_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  };\n\n  emit_function = function emit_function(p) {\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      emit_index_function(p);\n      return;\n    }\n\n    if (car(p) === symbol(FACTORIAL)) {\n      emit_factorial_function(p);\n      return;\n    }\n\n    if (car(p) === symbol(DERIVATIVE)) {\n      __emit_char('d');\n    } else {\n      emit_symbol(car(p));\n    }\n\n    __emit_char('(');\n\n    p = cdr(p);\n\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        __emit_char(','); //__emit_char(' ')\n\n\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n\n    return __emit_char(')');\n  };\n\n  emit_index_function = function emit_index_function(p) {\n    p = cdr(p);\n\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      emit_subexpr(car(p));\n    } else {\n      emit_expr(car(p));\n    }\n\n    __emit_char('[');\n\n    p = cdr(p);\n\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n\n      while (iscons(p)) {\n        __emit_char(',');\n\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n\n    return __emit_char(']');\n  };\n\n  emit_factorial_function = function emit_factorial_function(p) {\n    p = cadr(p);\n\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      emit_subexpr(p);\n    } else {\n      emit_expr(p);\n    }\n\n    return __emit_char('!');\n  };\n\n  emit_subexpr = function emit_subexpr(p) {\n    __emit_char('(');\n\n    emit_expr(p);\n    return __emit_char(')');\n  };\n\n  emit_symbol = function emit_symbol(p) {\n    var i, j1, pPrintName, ref2, results;\n    i = 0;\n\n    if (p === symbol(E)) {\n      __emit_str(\"exp(1)\");\n\n      return;\n    }\n\n    pPrintName = get_printname(p);\n    results = [];\n\n    for (i = j1 = 0, ref2 = pPrintName.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(pPrintName[i]));\n    }\n\n    return results;\n  };\n\n  emit_string = function emit_string(p) {\n    var i, j1, pString, ref2;\n    i = 0;\n    pString = p.str;\n\n    __emit_char('\"');\n\n    for (i = j1 = 0, ref2 = pString.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      __emit_char(pString[i]);\n    }\n\n    return __emit_char('\"');\n  };\n\n  fixup_fraction = function fixup_fraction(x, k1, k2) {\n    var dx, dy, h1, h2, i, j1, ref2, results, w, w1, w2, y, y1, y2;\n    dx = 0;\n    dy = 0;\n    i = 0;\n    w = 0;\n    y = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n\n    var _get_size3 = get_size(k1, k2);\n\n    var _get_size4 = _slicedToArray(_get_size3, 3);\n\n    h1 = _get_size4[0];\n    w1 = _get_size4[1];\n    y1 = _get_size4[2];\n\n    var _get_size5 = get_size(k2, yindex);\n\n    var _get_size6 = _slicedToArray(_get_size5, 3);\n\n    h2 = _get_size6[0];\n    w2 = _get_size6[1];\n    y2 = _get_size6[2];\n\n    if (w2 > w1) {\n      dx = (w2 - w1) / 2; // shift numerator right\n    } else {\n      dx = 0;\n    }\n\n    dx++; // this is how much is below the baseline\n\n    y = y1 + h1 - 1;\n    dy = -y - 1;\n    move(k1, k2, dx, dy);\n\n    if (w2 > w1) {\n      dx = -w1;\n    } else {\n      dx = -w1 + (w1 - w2) / 2;\n    }\n\n    dx++;\n    dy = -y2 + 1;\n    move(k2, yindex, dx, dy);\n\n    if (w2 > w1) {\n      w = w2;\n    } else {\n      w = w1;\n    }\n\n    w += 2;\n    emit_x = x;\n    results = [];\n\n    for (i = j1 = 0, ref2 = w; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char('-'));\n    }\n\n    return results;\n  };\n\n  fixup_power = function fixup_power(k1, k2) {\n    var dy, h1, h2, w1, w2, y1, y2;\n    dy = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n\n    var _get_size7 = get_size(k1, k2);\n\n    var _get_size8 = _slicedToArray(_get_size7, 3);\n\n    h1 = _get_size8[0];\n    w1 = _get_size8[1];\n    y1 = _get_size8[2];\n\n    var _get_size9 = get_size(k2, yindex);\n\n    var _get_size10 = _slicedToArray(_get_size9, 3);\n\n    h2 = _get_size10[0];\n    w2 = _get_size10[1];\n    y2 = _get_size10[2];\n    // move superscript to baseline\n    dy = -y2 - h2 + 1; // now move above base\n\n    dy += y1 - 1;\n    return move(k2, yindex, 0, dy);\n  };\n\n  move = function move(j, k, dx, dy) {\n    var i, j1, ref2, ref3, results;\n    i = 0;\n    results = [];\n\n    for (i = j1 = ref2 = j, ref3 = k; ref2 <= ref3 ? j1 < ref3 : j1 > ref3; i = ref2 <= ref3 ? ++j1 : --j1) {\n      chartab[i].x += dx;\n      results.push(chartab[i].y += dy);\n    }\n\n    return results;\n  }; // finds the bounding rectangle and vertical position\n\n\n  get_size = function get_size(j, k) {\n    var h, i, j1, max_x, max_y, min_x, min_y, ref2, ref3, w, y;\n    i = 0;\n    min_x = chartab[j].x;\n    max_x = chartab[j].x;\n    min_y = chartab[j].y;\n    max_y = chartab[j].y;\n\n    for (i = j1 = ref2 = j + 1, ref3 = k; ref2 <= ref3 ? j1 < ref3 : j1 > ref3; i = ref2 <= ref3 ? ++j1 : --j1) {\n      if (chartab[i].x < min_x) {\n        min_x = chartab[i].x;\n      }\n\n      if (chartab[i].x > max_x) {\n        max_x = chartab[i].x;\n      }\n\n      if (chartab[i].y < min_y) {\n        min_y = chartab[i].y;\n      }\n\n      if (chartab[i].y > max_y) {\n        max_y = chartab[i].y;\n      }\n    }\n\n    h = max_y - min_y + 1;\n    w = max_x - min_x + 1;\n    y = min_y;\n    return [h, w, y];\n  };\n\n  displaychar = function displaychar(c) {\n    return __emit_char(c);\n  };\n\n  __emit_char = function __emit_char(c) {\n    if (yindex === YMAX) {\n      return;\n    }\n\n    if (chartab[yindex] == null) {\n      debugger;\n    }\n\n    chartab[yindex].c = c;\n    chartab[yindex].x = emit_x;\n    chartab[yindex].y = 0;\n    yindex++;\n    return emit_x++;\n  };\n\n  __emit_str = function __emit_str(s) {\n    var i, j1, ref2, results;\n    i = 0;\n    results = [];\n\n    for (i = j1 = 0, ref2 = s.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(s[i]));\n    }\n\n    return results;\n  };\n\n  emit_number = function emit_number(p, emit_sign) {\n    var i, j1, l1, m1, ref2, ref3, ref4, results, results1, tmpString;\n    tmpString = \"\";\n    i = 0;\n\n    switch (p.k) {\n      case NUM:\n        tmpString = p.q.a.toString();\n\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n\n        for (i = j1 = 0, ref2 = tmpString.length; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n          __emit_char(tmpString[i]);\n        }\n\n        tmpString = p.q.b.toString();\n\n        if (tmpString === \"1\") {\n          break;\n        }\n\n        __emit_char('/');\n\n        results = [];\n\n        for (i = l1 = 0, ref3 = tmpString.length; 0 <= ref3 ? l1 < ref3 : l1 > ref3; i = 0 <= ref3 ? ++l1 : --l1) {\n          results.push(__emit_char(tmpString[i]));\n        }\n\n        return results;\n        break;\n\n      case DOUBLE:\n        tmpString = doubleToReasonableString(p.d);\n\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n\n        results1 = [];\n\n        for (i = m1 = 0, ref4 = tmpString.length; 0 <= ref4 ? m1 < ref4 : m1 > ref4; i = 0 <= ref4 ? ++m1 : --m1) {\n          results1.push(__emit_char(tmpString[i]));\n        }\n\n        return results1;\n    }\n  }; // a and b are glyphs\n\n\n  cmpGlyphs = function cmpGlyphs(a, b) {\n    if (a.y < b.y) {\n      return -1;\n    }\n\n    if (a.y > b.y) {\n      return 1;\n    }\n\n    if (a.x < b.x) {\n      return -1;\n    }\n\n    if (a.x > b.x) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  print_glyphs = function print_glyphs() {\n    var accumulator, i, j1, ref2, subsetOfStack, x, y;\n    i = 0;\n    accumulator = \"\"; // now sort the glyphs by their vertical positions,\n    // since we are going to build a string where obviously the\n    // \"upper\" line has to printed out first, followed by\n    // a new line, followed by the other lines.\n    //qsort(chartab, yindex, sizeof (struct glyph), __cmp)\n\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n\n    for (i = j1 = 0, ref2 = yindex; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        accumulator += printchar('\\n');\n        x = 0;\n        y++;\n      }\n\n      while (chartab[i].x > x) {\n        accumulator += printchar_nowrap(' ');\n        x++;\n      }\n\n      accumulator += printchar_nowrap(chartab[i].c);\n      x++;\n    }\n\n    return accumulator;\n  };\n\n  buffer = \"\";\n\n  getdisplaystr = function getdisplaystr() {\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_expr(pop());\n    fill_buf();\n    return buffer;\n  };\n\n  fill_buf = function fill_buf() {\n    var i, j1, ref2, sIndex, subsetOfStack, tmpBuffer, x, y;\n    tmpBuffer = buffer;\n    sIndex = 0;\n    i = 0; //qsort(chartab, yindex, sizeof (struct glyph), __cmp)\n\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n\n    for (i = j1 = 0, ref2 = yindex; 0 <= ref2 ? j1 < ref2 : j1 > ref2; i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        tmpBuffer[sIndex++] = '\\n';\n        x = 0;\n        y++;\n      }\n\n      while (chartab[i].x > x) {\n        tmpBuffer[sIndex++] = ' ';\n        x++;\n      }\n\n      tmpBuffer[sIndex++] = chartab[i].c;\n      x++;\n    }\n\n    return tmpBuffer[sIndex++] = '\\n';\n  };\n\n  N = 100;\n\n  oneElement = function () {\n    var oneElement = /*#__PURE__*/_createClass(function oneElement() {\n      \"use strict\";\n\n      _classCallCheck(this, oneElement);\n    });\n\n    ;\n    oneElement.prototype.x = 0;\n    oneElement.prototype.y = 0;\n    oneElement.prototype.h = 0;\n    oneElement.prototype.w = 0;\n    oneElement.prototype.index = 0;\n    oneElement.prototype.count = 0;\n    return oneElement;\n  }.call(this);\n\n  elem = [];\n\n  for (elelmIndex = j1 = 0; j1 < 10000; elelmIndex = ++j1) {\n    elem[elelmIndex] = new oneElement();\n  }\n\n  SPACE_BETWEEN_COLUMNS = 3;\n  SPACE_BETWEEN_ROWS = 1;\n\n  emit_tensor = function emit_tensor(p) {\n    var col, dx, dy, eh, ew, h, i, l1, m1, n, n1, ncol, nrow, o1, ref2, ref3, ref4, ref5, row, w, x, y;\n    i = 0;\n    n = 0;\n    nrow = 0;\n    ncol = 0;\n    x = 0;\n    y = 0;\n    h = 0;\n    w = 0;\n    dx = 0;\n    dy = 0;\n    eh = 0;\n    ew = 0;\n    row = 0;\n    col = 0;\n\n    if (p.tensor.ndim > 2) {\n      emit_flat_tensor(p);\n      return;\n    }\n\n    nrow = p.tensor.dim[0];\n\n    if (p.tensor.ndim === 2) {\n      ncol = p.tensor.dim[1];\n    } else {\n      ncol = 1;\n    }\n\n    n = nrow * ncol;\n\n    if (n > N) {\n      emit_flat_tensor(p);\n      return;\n    } // horizontal coordinate of the matrix\n    //if 0\n    //emit_x += 2; # make space for left paren\n    //endif\n\n\n    x = emit_x; // emit each element\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      elem[i].index = yindex;\n      elem[i].x = emit_x;\n      emit_expr(p.tensor.elem[i]);\n      elem[i].count = yindex - elem[i].index;\n\n      var _get_size11 = get_size(elem[i].index, yindex);\n\n      var _get_size12 = _slicedToArray(_get_size11, 3);\n\n      elem[i].h = _get_size12[0];\n      elem[i].w = _get_size12[1];\n      elem[i].y = _get_size12[2];\n    } // find element height and width\n\n\n    eh = 0;\n    ew = 0;\n\n    for (i = m1 = 0, ref3 = n; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      if (elem[i].h > eh) {\n        eh = elem[i].h;\n      }\n\n      if (elem[i].w > ew) {\n        ew = elem[i].w;\n      }\n    } // this is the overall height of the matrix\n\n\n    h = nrow * eh + (nrow - 1) * SPACE_BETWEEN_ROWS; // this is the overall width of the matrix\n\n    w = ncol * ew + (ncol - 1) * SPACE_BETWEEN_COLUMNS; // this is the vertical coordinate of the matrix\n\n    y = -(h / 2); // move elements around\n\n    for (row = n1 = 0, ref4 = nrow; 0 <= ref4 ? n1 < ref4 : n1 > ref4; row = 0 <= ref4 ? ++n1 : --n1) {\n      for (col = o1 = 0, ref5 = ncol; 0 <= ref5 ? o1 < ref5 : o1 > ref5; col = 0 <= ref5 ? ++o1 : --o1) {\n        i = row * ncol + col; // first move to upper left corner of matrix\n\n        dx = x - elem[i].x;\n        dy = y - elem[i].y;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy); // now move to official position\n\n        dx = 0;\n\n        if (col > 0) {\n          dx = col * (ew + SPACE_BETWEEN_COLUMNS);\n        }\n\n        dy = 0;\n\n        if (row > 0) {\n          dy = row * (eh + SPACE_BETWEEN_ROWS);\n        } // small correction for horizontal centering\n\n\n        dx += (ew - elem[i].w) / 2; // small correction for vertical centering\n\n        dy += (eh - elem[i].h) / 2;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy);\n      }\n    }\n\n    return emit_x = x + w;\n  };\n\n  emit_flat_tensor = function emit_flat_tensor(p) {\n    return _emit_tensor_inner(p, 0, 0);\n  };\n\n  _emit_tensor_inner = function emit_tensor_inner(p, j, k) {\n    var i, l1, ref2;\n    i = 0;\n\n    __emit_char('(');\n\n    for (i = l1 = 0, ref2 = p.tensor.dim[j]; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (j + 1 === p.tensor.ndim) {\n        emit_expr(p.tensor.elem[k]);\n        k = k + 1;\n      } else {\n        k = _emit_tensor_inner(p, j + 1, k);\n      }\n\n      if (i + 1 < p.tensor.dim[j]) {\n        __emit_char(',');\n      }\n    }\n\n    __emit_char(')');\n\n    return k;\n  }; // 'product' function\n  //define A p3\n  //define B p4\n  //define I p5\n  //define X p6\n  // leaves the product at the top of the stack\n\n\n  Eval_product = function Eval_product() {\n    var body, i, indexVariable, j, k, l1, oldIndexVariableValue, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0; // 1st arg\n\n    body = cadr(p1); // 2nd arg (index)\n\n    indexVariable = caddr(p1);\n\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    } // 3rd arg (lower limit)\n\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    } // 4th arg (upper limit)\n\n\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    } // remember contents of the index\n    // variable so we can put it back after the loop\n\n\n    oldIndexVariableValue = get_binding(indexVariable);\n    push_integer(1);\n\n    for (i = l1 = ref2 = j, ref3 = k; ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n\n      if (DEBUG) {\n        console.log(\"product - factor 1: \" + stack[tos - 1].toString());\n        console.log(\"product - factor 2: \" + stack[tos - 2].toString());\n      }\n\n      multiply();\n\n      if (DEBUG) {\n        console.log(\"product - result: \" + stack[tos - 1].toString());\n      }\n    } // put back the index variable to original content\n\n\n    return set_binding(indexVariable, oldIndexVariableValue);\n  }; //  Add rational numbers\n  //  Input:    tos-2    addend\n  //      tos-1    addend\n  //  Output:    sum on stack\n\n\n  qadd = function qadd() {\n    var gcdBetweenNumeratorAndDenominator, qadd_ab, qadd_ba, qadd_denominator, qadd_frac1, qadd_frac2, qadd_numerator, resultSum; // a, qadd_ab, b, qadd_ba, c are all bigNum\n    // we are adding the fractions qadd_frac1 + qadd_frac2 i.e.\n    // qadd_frac1.q.a/qadd_frac1.q.b + qadd_frac2.q.a/qadd_frac2.q.b\n\n    qadd_frac2 = pop();\n    qadd_frac1 = pop();\n    qadd_ab = mmul(qadd_frac1.q.a, qadd_frac2.q.b);\n    qadd_ba = mmul(qadd_frac1.q.b, qadd_frac2.q.a);\n    qadd_numerator = madd(qadd_ab, qadd_ba); //mfree(qadd_ab)\n    //mfree(qadd_ba)\n    // zero?\n\n    if (MZERO(qadd_numerator)) {\n      //console.log \"qadd IS ZERO\"\n      //mfree(qadd_numerator)\n      push(zero);\n      return;\n    }\n\n    qadd_denominator = mmul(qadd_frac1.q.b, qadd_frac2.q.b);\n    gcdBetweenNumeratorAndDenominator = mgcd(qadd_numerator, qadd_denominator); //console.log \"gcd(\"+qadd_numerator+\",\"+qadd_denominator+\"): \" + gcdBetweenNumeratorAndDenominator\n\n    gcdBetweenNumeratorAndDenominator = makeSignSameAs(gcdBetweenNumeratorAndDenominator, qadd_denominator); //console.log \"qadd qadd_denominator: \" + qadd_denominator\n    //console.log \"qadd gcdBetweenNumeratorAndDenominator: \" + gcdBetweenNumeratorAndDenominator\n\n    resultSum = new U();\n    resultSum.k = NUM;\n    resultSum.q.a = mdiv(qadd_numerator, gcdBetweenNumeratorAndDenominator);\n    resultSum.q.b = mdiv(qadd_denominator, gcdBetweenNumeratorAndDenominator); //console.log \"qadd resultSum.q.a: \" + resultSum.q.a\n    //console.log \"qadd resultSum.q.b: \" + resultSum.q.b\n    //mfree(qadd_numerator)\n    //mfree(qadd_denominator)\n    //mfree(gcdBetweenNumeratorAndDenominator)\n\n    return push(resultSum);\n  }; //console.log \"qadd result: \" + resultSum\n  //  Divide rational numbers\n  //  Input:    tos-2    dividend\n  //      tos-1    divisor\n  //  Output:    quotient on stack\n\n\n  qdiv = function qdiv() {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop(); // zero?\n\n    if (MZERO(p2.q.a)) {\n      stop(\"divide by zero\");\n    }\n\n    if (MZERO(p1.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    aa = mmul(p1.q.a, p2.q.b);\n    bb = mmul(p1.q.b, p2.q.a);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c);\n    push(p1);\n    return restore();\n  }; //  Multiply rational numbers\n  //  Input:    tos-2    multiplicand\n  //      tos-1    multiplier\n  //  Output:    product on stack\n\n\n  qmul = function qmul() {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop(); // zero?\n\n    if (MZERO(p1.q.a) || MZERO(p2.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n\n    aa = mmul(p1.q.a, p2.q.a);\n    bb = mmul(p1.q.b, p2.q.b);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c); //mfree(aa)\n    //mfree(bb)\n\n    push(p1);\n    return restore();\n  }; // Rational power function\n\n\n  qpow = function qpow() {\n    save();\n    qpowf();\n    return restore();\n  }; //define BASE p1\n  //define EXPO p2\n\n\n  qpowf = function qpowf() {\n    var a, b, expo, t, x, y;\n    expo = 0; //unsigned int a, b, *t, *x, *y\n\n    p2 = pop();\n    p1 = pop();\n\n    if (isplusone(p1) || isZeroAtomOrTensor(p2)) {\n      // p1 is BASE  # p2 is EXPO\n      push_integer(1);\n      return;\n    } // if (-1)^(1/2) -> leave it as is\n\n\n    if (isminusone(p1) && isoneovertwo(p2)) {\n      // p1 is BASE  # p2 is EXPO\n      push(imaginaryunit);\n      return;\n    } // if base is zero then return 0\n\n\n    if (isZeroAtomOrTensor(p1)) {\n      // p1 is BASE\n      if (isnegativenumber(p2)) {\n        // p2 is EXPO\n        stop(\"divide by zero\");\n      }\n\n      push(zero);\n      return;\n    } // if exponent is 1 then return base\n\n\n    if (isplusone(p2)) {\n      // p2 is EXPO\n      push(p1);\n      return;\n    } // if exponent is integer then power\n\n\n    if (isinteger(p2)) {\n      // p2 is EXPO\n      push(p2);\n      expo = pop_integer();\n\n      if (isNaN(expo)) {\n        // expo greater than 32 bits\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n        return;\n      }\n\n      x = mpow(p1.q.a, Math.abs(expo));\n      y = mpow(p1.q.b, Math.abs(expo));\n\n      if (expo < 0) {\n        t = x;\n        x = y;\n        y = t;\n        x = makeSignSameAs(x, y);\n        y = makePositive(y);\n      }\n\n      p3 = new U();\n      p3.k = NUM;\n      p3.q.a = x;\n      p3.q.b = y;\n      push(p3);\n      return;\n    } // from here on out the exponent is NOT an integer\n    // if base is -1 then normalize polar angle\n\n\n    if (isminusone(p1)) {\n      // p1 is BASE\n      push(p2);\n      normalize_angle();\n      return;\n    } // if base is negative then (-N)^M -> N^M * (-1)^M\n\n\n    if (isnegativenumber(p1)) {\n      // p1 is BASE\n      push(p1);\n      negate();\n      push(p2);\n      qpow();\n      push_integer(-1);\n      push(p2);\n      qpow();\n      multiply();\n      return;\n    }\n\n    if (!isinteger(p1)) {\n      // p1 is BASE\n      push(p1);\n      mp_numerator();\n      push(p2);\n      qpow();\n      push(p1);\n      mp_denominator();\n      push(p2);\n      negate();\n      qpow();\n      multiply();\n      return;\n    } // At this point p1 (BASE) is a positive integer.\n    // If p1 (BASE) is small then factor it.\n\n\n    if (is_small_integer(p1)) {\n      // p1 is BASE\n      push(p1);\n      push(p2);\n      quickfactor();\n      return;\n    }\n\n    if (!isSmall(p2.q.a) || !isSmall(p2.q.b)) {\n      // p2 is EXPO\n      push_symbol(POWER);\n      push(p1); // p1 is BASE\n\n      push(p2);\n      list(3);\n      return;\n    }\n\n    a = p2.q.a;\n    b = p2.q.b;\n    x = mroot(p1.q.a, b);\n\n    if (x === 0) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    y = mpow(x, a); //mfree(x)\n\n    p3 = new U();\n    p3.k = NUM;\n\n    if (p2.q.a.isNegative()) {\n      // p2 is EXPO\n      p3.q.a = bigInt(1);\n      p3.q.b = y;\n    } else {\n      p3.q.a = y;\n      p3.q.b = bigInt(1);\n    }\n\n    return push(p3);\n  }; //-----------------------------------------------------------------------------\n  //  Normalize the angle of unit imaginary, i.e. (-1) ^ N\n  //  Input:    N on stack (must be rational, not float)\n  //  Output:    Result on stack\n  //  Note:\n  //  n = q * d + r\n  //  Example:\n  //            n  d  q  r\n  //  (-1)^(8/3)  ->   (-1)^(2/3)  8  3  2  2\n  //  (-1)^(7/3)  ->   (-1)^(1/3)  7  3  2  1\n  //  (-1)^(5/3)  ->  -(-1)^(2/3)  5  3  1  2\n  //  (-1)^(4/3)  ->  -(-1)^(1/3)  4  3  1  1\n  //  (-1)^(2/3)  ->   (-1)^(2/3)  2  3  0  2\n  //  (-1)^(1/3)  ->   (-1)^(1/3)  1  3  0  1\n  //  (-1)^(-1/3)  ->  -(-1)^(2/3)  -1  3  -1  2\n  //  (-1)^(-2/3)  ->  -(-1)^(1/3)  -2  3  -1  1\n  //  (-1)^(-4/3)  ->   (-1)^(2/3)  -4  3  -2  2\n  //  (-1)^(-5/3)  ->   (-1)^(1/3)  -5  3  -2  1\n  //  (-1)^(-7/3)  ->  -(-1)^(2/3)  -7  3  -3  2\n  //  (-1)^(-8/3)  ->  -(-1)^(1/3)  -8  3  -3  1\n  //-----------------------------------------------------------------------------\n  //define A p1\n  //define Q p2\n  //define R p3\n\n\n  normalize_angle = function normalize_angle() {\n    save();\n    p1 = pop();\n\n    if (isinteger(p1)) {\n      // p1 is A\n      if (p1.q.a.isOdd()) {\n        // p1 is A\n        push_integer(-1); // odd exponent\n      } else {\n        push_integer(1); // even exponent\n      }\n\n      restore();\n      return;\n    } // floor\n\n\n    push(p1);\n    bignum_truncate();\n    p2 = pop();\n\n    if (isnegativenumber(p1)) {\n      // p1 is A\n      push(p2); // p2 is Q\n\n      push_integer(-1);\n      add();\n      p2 = pop(); // p2 is Q\n    } // remainder (always positive)\n\n\n    push(p1);\n    push(p2);\n    subtract();\n    p3 = pop();\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p3); // p3 is R\n\n    list(3); // negate if quotient is odd\n\n    if (p2.q.a.isOdd()) {\n      // p2 is Q\n      negate();\n    }\n\n    return restore();\n  };\n\n  is_small_integer = function is_small_integer(p) {\n    return isSmall(p.q.a);\n  }; //-----------------------------------------------------------------------------\n  //  Factor small numerical powers\n  //  Input:    tos-2    Base (positive integer < 2^31 - 1)\n  //      tos-1    Exponent\n  //  Output:    Expr on stack\n  //-----------------------------------------------------------------------------\n  //define BASE p1\n  //define EXPO p2\n\n\n  quickfactor = function quickfactor() {\n    var h, i, l1, n, ref2, stackIndex;\n    i = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push(p1);\n    factor_small_number();\n    n = tos - h;\n    stackIndex = h;\n\n    for (i = l1 = 0, ref2 = n; l1 < ref2; i = l1 += 2) {\n      push(stack[stackIndex + i]);\n      push(stack[stackIndex + i + 1]);\n      push(p2);\n      multiply();\n      quickpower();\n    } // stack has n results from factor_number_raw()\n    // on top of that are all the expressions from quickpower()\n    // multiply the quickpower() results\n\n\n    multiply_all(tos - h - n);\n    p1 = pop();\n    moveTos(h);\n    push(p1);\n    return restore();\n  }; // p1 (BASE) is a prime number so power is simpler\n\n\n  quickpower = function quickpower() {\n    var expo;\n    expo = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    bignum_truncate();\n    p3 = pop();\n    push(p2);\n    push(p3);\n    subtract();\n    p4 = pop();\n\n    if (!isZeroAtomOrTensor(p4)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p4);\n      list(3);\n    }\n\n    push(p3);\n    expo = pop_integer();\n\n    if (isNaN(expo)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p3);\n      list(3);\n      restore();\n      return;\n    }\n\n    if (expo === 0) {\n      restore();\n      return;\n    }\n\n    push(p1);\n    bignum_power_number(expo);\n    return restore();\n  }; //if SELFTEST\n  // Divide polynomials\n\n\n  Eval_quotient = function Eval_quotient() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p1 = pop();\n\n    if (p1 === symbol(NIL)) {\n      p1 = symbol(SYMBOL_X);\n    }\n\n    push(p1);\n    return divpoly();\n  }; //-----------------------------------------------------------------------------\n  //  Divide polynomials\n  //  Input:    tos-3    Dividend\n  //      tos-2    Divisor\n  //      tos-1    x\n  //  Output:    tos-1    Quotient\n  //-----------------------------------------------------------------------------\n  //define DIVIDEND p1\n  //define DIVISOR p2\n  //define X p3\n  //define Q p4\n  //define QUOTIENT p5\n\n\n  divpoly = function divpoly() {\n    var dividend, divisor, h, i, l1, m, n, ref2, x;\n    h = 0;\n    i = 0;\n    m = 0;\n    n = 0;\n    x = 0; //U **dividend, **divisor\n\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    dividend = tos;\n    m = coeff(p3, p1) - 1;\n    divisor = tos;\n    n = coeff(p3, p2) - 1;\n    x = m - n;\n    push_integer(0);\n    p5 = pop();\n\n    while (x >= 0) {\n      push(stack[dividend + m]);\n      push(stack[divisor + n]);\n      divide();\n      p4 = pop();\n\n      for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        push(stack[dividend + x + i]);\n        push(stack[divisor + i]);\n        push(p4);\n        multiply();\n        subtract();\n        stack[dividend + x + i] = pop();\n      }\n\n      push(p5);\n      push(p4);\n      push(p3);\n      push_integer(x);\n      power();\n      multiply();\n      add();\n      p5 = pop();\n      m--;\n      x--;\n    }\n\n    moveTos(h);\n    push(p5);\n    return restore();\n  };\n\n  DEBUG_RATIONALIZE = false;\n\n  Eval_rationalize = function Eval_rationalize() {\n    push(cadr(p1));\n    Eval();\n    return rationalize();\n  };\n\n  rationalize = function rationalize() {\n    var x;\n    x = expanding;\n    yyrationalize();\n    return expanding = x;\n  };\n\n  yyrationalize = function yyrationalize() {\n    var commonDenominator, eachTerm, theArgument;\n    theArgument = pop();\n\n    if (istensor(theArgument)) {\n      __rationalize_tensor(theArgument);\n\n      return;\n    }\n\n    expanding = 0;\n\n    if (car(theArgument) !== symbol(ADD)) {\n      push(theArgument);\n      return;\n    }\n\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: this is the input expr: \" + theArgument);\n    } // get new denominator\n\n\n    push(one);\n    multiply_denominators(theArgument);\n    commonDenominator = pop();\n\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: this is the new denominator: \" + commonDenominator);\n    } // multiply each term by new denominator\n\n\n    push(zero);\n    eachTerm = cdr(theArgument);\n\n    while (iscons(eachTerm)) {\n      if (DEBUG_RATIONALIZE) {\n        console.log(\"term: \" + car(eachTerm));\n      }\n\n      push(commonDenominator);\n      push(car(eachTerm));\n      multiply();\n      add();\n      eachTerm = cdr(eachTerm);\n    }\n\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: original terms times new denominator: \" + stack[tos - 1]);\n    } // collect common factors\n\n\n    Condense();\n\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: after factoring: \" + stack[tos - 1]);\n    } // divide by common denominator\n\n\n    push(commonDenominator);\n    divide();\n\n    if (DEBUG_RATIONALIZE) {\n      return console.log(\"rationalize: after dividing by new denom. (and we're done): \" + stack[tos - 1]);\n    }\n  };\n\n  multiply_denominators = function multiply_denominators(p) {\n    var results;\n\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        multiply_denominators_term(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      return multiply_denominators_term(p);\n    }\n  };\n\n  multiply_denominators_term = function multiply_denominators_term(p) {\n    var results;\n\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n\n      while (iscons(p)) {\n        multiply_denominators_factor(car(p));\n        results.push(p = cdr(p));\n      }\n\n      return results;\n    } else {\n      return multiply_denominators_factor(p);\n    }\n  };\n\n  multiply_denominators_factor = function multiply_denominators_factor(p) {\n    if (car(p) !== symbol(POWER)) {\n      return;\n    }\n\n    push(p);\n    p = caddr(p); // like x^(-2) ?\n\n    if (isnegativenumber(p)) {\n      inverse();\n\n      __lcm();\n\n      return;\n    } // like x^(-a) ?\n\n\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      inverse();\n\n      __lcm();\n\n      return;\n    } // no match\n\n\n    return pop();\n  };\n\n  __rationalize_tensor = function __rationalize_tensor(theTensor) {\n    var i, l1, n, ref2;\n    i = 0;\n    push(theTensor);\n    Eval();\n    theTensor = pop();\n\n    if (!istensor(theTensor)) {\n      // might be zero\n      push(theTensor);\n      return;\n    }\n\n    n = theTensor.tensor.nelem;\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(theTensor.tensor.elem[i]);\n      rationalize();\n      theTensor.tensor.elem[i] = pop();\n    }\n\n    check_tensor_dimensions(theTensor);\n    return push(theTensor);\n  };\n\n  __lcm = function __lcm() {\n    save();\n    p1 = pop();\n    p2 = pop();\n    push(p1);\n    push(p2);\n    multiply();\n    push(p1);\n    push(p2);\n    gcd();\n    divide();\n    return restore();\n  };\n\n  Eval_real = function Eval_real() {\n    push(cadr(p1));\n    Eval();\n    return real();\n  };\n\n  real = function real() {\n    save();\n\n    _rect();\n\n    p1 = pop();\n    push(p1);\n    push(p1);\n    conjugate();\n    add();\n    push_integer(2);\n    divide();\n    return restore();\n  };\n\n  DEBUG_RECT = false;\n\n  Eval_rect = function Eval_rect() {\n    push(cadr(p1));\n    Eval();\n    return _rect();\n  };\n\n  _rect = function rect() {\n    var input;\n    save();\n    p1 = pop();\n    input = p1;\n\n    if (DEBUG_RECT) {\n      console.log(\"RECT of \" + input);\n    }\n\n    if (DEBUG_RECT) {\n      console.log(\"any clock forms in : \" + input + \" ? \" + _findPossibleClockForm(input));\n    } // if we assume real variables, then the\n    // rect of any symbol is the symbol itself\n    // (note that 'i' is not a symbol, it's made of (-1)^(1/2))\n    // otherwise we have to leave unevalled\n\n\n    if (issymbol(p1)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        push(p1);\n      } else {\n        push_symbol(YYRECT);\n        push(p1);\n        list(2);\n      }\n    } else if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))) && !_findPossibleExponentialForm(p1) && !_findPossibleClockForm(p1) && !(_Find(p1, symbol(SIN)) && _Find(p1, symbol(COS)) && _Find(p1, imaginaryunit))) {\n      // no polar form?\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n\n      push(p1); // ib\n    } else if (car(p1) === symbol(MULTIPLY) && isimaginaryunit(cadr(p1)) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      push(p1); // sum\n    } else if (car(p1) === symbol(ADD)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is a sum \");\n      }\n\n      push_integer(0);\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n\n        _rect();\n\n        add();\n        p1 = cdr(p1);\n      }\n    } else {\n      // try to get to the rectangular form by doing\n      // abs(p1) * (cos (theta) + i * sin(theta))\n      // where theta is arg(p1)\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is NOT a sum \");\n      }\n\n      push(p1);\n      abs();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" abs: \" + stack[tos - 1].toString());\n      }\n\n      push(p1);\n      arg();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" arg of \" + p1 + \" : \" + stack[tos - 1].toString());\n      }\n\n      p1 = pop();\n      push(p1);\n      cosine();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cosine: \" + stack[tos - 1].toString());\n      }\n\n      push(imaginaryunit);\n      push(p1);\n      sine();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" sine: \" + stack[tos - 1].toString());\n      }\n\n      multiply();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" i * sine: \" + stack[tos - 1].toString());\n      }\n\n      add();\n\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cos + i * sine: \" + stack[tos - 1].toString());\n      }\n\n      multiply();\n    }\n\n    restore();\n\n    if (DEBUG_RECT) {\n      return console.log(\"rect of \" + input + \" : \" + stack[tos - 1]);\n    }\n  }; //define POLY p1\n  //define X p2\n  //define A p3\n  //define B p4\n  //define C p5\n  //define Y p6\n\n\n  show_power_debug = false;\n  performing_roots = false;\n\n  Eval_roots = function Eval_roots() {\n    // this transforms simple \"equation\" forms into\n    // something that can be processed. E.g., say, y = 3x - 2\n    // A == B -> A - B\n    // A = B -> A - B\n    p2 = cadr(p1);\n\n    if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n      push(cadr(p2));\n      Eval();\n      push(caddr(p2));\n      Eval();\n      subtract();\n    } else {\n      push(p2);\n      Eval();\n      p2 = pop();\n\n      if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n        push(cadr(p2));\n        Eval();\n        push(caddr(p2));\n        Eval();\n        subtract();\n      } else {\n        push(p2);\n      }\n    } // 2nd arg, x\n\n\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n\n    p2 = pop();\n    p1 = pop();\n\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"roots: 1st argument is not a polynomial in the variable \" + p2);\n    }\n\n    push(p1);\n    push(p2);\n    return roots();\n  };\n\n  hasImaginaryCoeff = function hasImaginaryCoeff(k) {\n    var h, i, imaginaryCoefficients, l1, ref2; //polycoeff = tos\n\n    imaginaryCoefficients = false;\n    h = tos;\n\n    for (i = l1 = ref2 = k; l1 > 0; i = l1 += -1) {\n      //console.log \"hasImaginaryCoeff - coeff.:\" + stack[tos-i].toString()\n      if (iscomplexnumber(stack[tos - i])) {\n        imaginaryCoefficients = true;\n        break;\n      }\n    }\n\n    return imaginaryCoefficients;\n  };\n\n  isSimpleRoot = function isSimpleRoot(k) {\n    var h, i, isSimpleRootPolynomial, l1, ref2; //polycoeff = tos\n    //tos-n    Coefficient of x^0\n    //tos-1    Coefficient of x^(n-1)\n\n    if (k > 2) {\n      isSimpleRootPolynomial = true;\n      h = tos;\n\n      if (isZeroAtomOrTensor(stack[tos - k])) {\n        isSimpleRootPolynomial = false;\n      }\n\n      for (i = l1 = ref2 = k - 1; l1 > 1; i = l1 += -1) {\n        if (!isZeroAtomOrTensor(stack[tos - i])) {\n          isSimpleRootPolynomial = false;\n          break;\n        }\n      }\n    } else {\n      isSimpleRootPolynomial = false;\n    }\n\n    return isSimpleRootPolynomial;\n  };\n\n  normalisedCoeff = function normalisedCoeff(variable, polynomial) {\n    var divideBy, i, k, l1, m1, miniStack, ref2, ref3;\n    k = coeff(variable, polynomial); //console.log(\"->\" + tos)\n\n    divideBy = stack[tos - 1];\n    miniStack = [];\n\n    for (i = l1 = 1, ref2 = k; 1 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      miniStack.push(pop());\n    } //console.log(tos)\n\n\n    for (i = m1 = ref3 = k - 1; ref3 <= 0 ? m1 <= 0 : m1 >= 0; i = ref3 <= 0 ? ++m1 : --m1) {\n      push(miniStack[i]);\n      push(divideBy);\n      divide();\n    } //console.log(tos)\n\n\n    return k;\n  }; // takes the polynomial and the\n  // variable on the stack\n\n\n  roots = function roots() {\n    var h, i, k, l1, lastCoeff, leadingCoeff, n, ref2;\n    h = 0;\n    i = 0;\n    n = 0;\n\n    if (DEBUG) {\n      console.log(\"roots: \" + stack[tos - 1].toString() + \" \" + stack[tos - 2].toString());\n    }\n\n    save(); // the simplification of nested radicals uses\n    // \"roots\", which in turn uses simplification\n    // of nested radicals. Usually there is no problem,\n    // one level of recursion does the job. Beyond that,\n    // we probably got stuck in a strange case of infinite\n    // recursion, so bail out and return NIL.\n\n    if (recursionLevelNestedRadicalsRemoval > 1) {\n      pop();\n      pop();\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n\n    performing_roots = true;\n    h = tos - 2;\n\n    if (DEBUG) {\n      console.log(\"roots checking if \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n    }\n\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    k = normalisedCoeff(p2, p1);\n\n    if (isSimpleRoot(k)) {\n      if (DEBUG) {\n        console.log(\"yes, \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n      }\n\n      lastCoeff = stack[tos - k];\n      leadingCoeff = stack[tos - 1];\n      moveTos(tos - k);\n      pop();\n      pop();\n      getSimpleRoots(k, leadingCoeff, lastCoeff);\n    } else {\n      moveTos(tos - k);\n      roots2();\n    }\n\n    n = tos - h;\n\n    if (n === 0) {\n      stop(\"roots: the polynomial is not factorable, try nroots\");\n    }\n\n    if (n === 1) {\n      performing_roots = false;\n      restore();\n      return;\n    }\n\n    sort_stack(n);\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n\n    moveTos(h);\n    push(p1);\n    restore();\n    return performing_roots = false;\n  }; // ok to generate these roots take a look at their form\n  // in the case of even and odd exponents here:\n  // http://www.wolframalpha.com/input/?i=roots+x%5E14+%2B+1\n  // http://www.wolframalpha.com/input/?i=roots+ax%5E14+%2B+b\n  // http://www.wolframalpha.com/input/?i=roots+x%5E15+%2B+1\n  // http://www.wolframalpha.com/input/?i=roots+a*x%5E15+%2B+b\n\n\n  getSimpleRoots = function getSimpleRoots(n, leadingCoeff, lastCoeff) {\n    var aSol, commonPart, l1, m1, ref2, ref3, rootsOfOne;\n\n    if (DEBUG) {\n      console.log(\"getSimpleRoots\");\n    }\n\n    save(); //tos-n    Coefficient of x^0\n    //tos-1    Coefficient of x^(n-1)\n\n    n = n - 1;\n    push(lastCoeff);\n    push_rational(1, n);\n    power();\n    push(leadingCoeff);\n    push_rational(1, n);\n    power();\n    divide();\n    commonPart = pop();\n\n    if (n % 2 === 0) {\n      for (rootsOfOne = l1 = 1, ref2 = n; l1 <= ref2; rootsOfOne = l1 += 2) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n        aSol = pop();\n        push(aSol);\n        push(aSol);\n        negate();\n      }\n    } else {\n      for (rootsOfOne = m1 = 1, ref3 = n; 1 <= ref3 ? m1 <= ref3 : m1 >= ref3; rootsOfOne = 1 <= ref3 ? ++m1 : --m1) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n\n        if (rootsOfOne % 2 === 0) {\n          negate();\n        }\n      }\n    }\n\n    return restore();\n  };\n\n  roots2 = function roots2() {\n    var k;\n    save();\n\n    if (DEBUG) {\n      console.log(\"roots2: \" + stack[tos - 1].toString() + \" \" + stack[tos - 2].toString());\n    }\n\n    p2 = pop(); // the polynomial variable\n\n    p1 = pop(); // the polynomial\n\n    push(p1);\n    push(p2);\n    k = normalisedCoeff(p2, p1);\n\n    if (!hasImaginaryCoeff(k)) {\n      moveTos(tos - k);\n      factorpoly();\n      p1 = pop();\n    } else {\n      moveTos(tos - k);\n      pop();\n      pop();\n    }\n\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1); // scan through all the factors\n      // and find the roots of each of them\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        roots3();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      roots3();\n    }\n\n    return restore();\n  };\n\n  roots3 = function roots3() {\n    var n;\n    save();\n    p2 = pop();\n    p1 = pop();\n\n    if (car(p1) === symbol(POWER) && ispolyexpandedform(cadr(p1), p2) && isposint(caddr(p1))) {\n      n = normalisedCoeff(p2, cadr(p1));\n      mini_solve(n);\n    } else if (ispolyexpandedform(p1, p2)) {\n      n = normalisedCoeff(p2, p1);\n      mini_solve(n);\n    }\n\n    return restore();\n  }; //-----------------------------------------------------------------------------\n  //  Input:    stack[tos - 2]    polynomial\n  //      stack[tos - 1]    dependent symbol\n  //  Output:    stack      roots on stack\n  //            (input args are popped first)\n  //-----------------------------------------------------------------------------\n  // note that for many quadratic, cubic and quartic polynomials we don't\n  // actually end up using the quadratic/cubic/quartic formulas in here,\n  // since there is a chance we factored the polynomial and in so\n  // doing we found some solutions and lowered the degree.\n\n\n  mini_solve = function mini_solve(n) {\n    var C_CHECKED_AS_NOT_ZERO, Q_CHECKED_AS_NOT_ZERO, R_18_a_b_c_d, R_27_a2_d, R_2_b3, R_3_a, R_3_a_C, R_3_a_c, R_4_DELTA03, R_6_a, R_6_a_C, R_C, R_C_over_3a, R_C_simplified_toCheckIfZero, R_DELTA0, R_DELTA0_simplified_toCheckIfZero, R_DELTA0_toBeCheckedIfZero, R_DELTA1, R_Q, R_Q_simplified_toCheckIfZero, R_S, R_S_simplified_toCheckIfZero, R_a2, R_a2_d, R_a2_d2, R_a3, R_a_b_c, R_a_b_c_d, R_a_c, R_b2, R_b2_c2, R_b3, R_b3_d, R_c2, R_c3, R_d2, R_determinant, R_determinant_simplified_toCheckIfZero, R_e2, R_e3, R_m, R_m27_a2_d2, R_m4_a_c3, R_m4_b3_d, R_m9_a_b_c, R_m_b_over_3a, R_minus_4S2_minus_2p, R_minus_b_over_4a, R_p, R_principalCubicRoot, R_q, R_q_over_S, R_r, S_CHECKED_AS_NOT_ZERO, ThreePPlus2M, TwoQOversqrtPPlus2M, biquadraticSolutions, choiceOfRadicalInQSoSIsNotZero, coeff2, coeff3, coeff4, depressedSolutions, eachSolution, flipSignOFQSoCIsNotZero, flipSignOFRadicalSoQIsNotZero, i_sqrt3, l1, len, len1, len2, m1, n1, one_minus_i_sqrt3, one_plus_i_sqrt3, ref2, ref3, ref4, resolventCubicSolutions, root_solution, sqrtPPlus2M, toBeCheckedIFZero; //console.log \"mini_solve >>>>>>>>>>>>>>>>>>>>>>>> tos:\" + tos\n\n    save(); // AX + B, X = -B/A\n\n    if (n === 2) {\n      //console.log \"mini_solve >>>>>>>>> 1st degree\"\n      p3 = pop();\n      p4 = pop();\n      push(p4);\n      push(p3);\n      divide();\n      negate();\n      restore();\n      return;\n    } // AX^2 + BX + C, X = (-B +/- (B^2 - 4AC)^(1/2)) / (2A)\n\n\n    if (n === 3) {\n      //console.log \"mini_solve >>>>>>>>> 2nd degree\"\n      p3 = pop(); // A\n\n      p4 = pop(); // B\n\n      p5 = pop(); // C\n      // B^2\n\n      push(p4);\n      push_integer(2);\n      power(); // 4AC\n\n      push_integer(4);\n      push(p3);\n      multiply();\n      push(p5);\n      multiply(); // B^2 - 4AC\n\n      subtract(); //(B^2 - 4AC)^(1/2)\n\n      push_rational(1, 2);\n      power(); //p6 is (B^2 - 4AC)^(1/2)\n\n      p6 = pop();\n      push(p6);\n      push(p4);\n      subtract(); // -B + (B^2 - 4AC)^(1/2)\n      // 1/2A\n\n      push(p3);\n      push_integer(2);\n      multiply();\n      divide(); //simplify()\n      //rationalize()\n      // tos - 1 now is 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n\n      push(p6);\n      push(p4);\n      add(); // tos - 1 now is  B + (B^2 - 4AC)^(1/2)\n      // tos - 2: 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n\n      negate(); // tos - 1 now is  -B -(B^2 - 4AC)^(1/2)\n      // tos - 2: 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n      // 1/2A again\n\n      push(p3);\n      divide();\n      push_rational(1, 2);\n      multiply(); //simplify()\n      //rationalize()\n      // tos - 1: 2nd root: (-B - (B^2 - 4AC)^(1/2)) / (2A)\n      // tos - 2: 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n\n      restore();\n      return;\n    } //if (n == 4)\n\n\n    if (n === 4 || n === 5) {\n      p3 = pop(); // A\n\n      p4 = pop(); // B\n\n      p5 = pop(); // C\n\n      p6 = pop(); // D\n      // C - only related calculations\n\n      push(p5);\n      push(p5);\n      multiply();\n      R_c2 = pop();\n      push(R_c2);\n      push(p5);\n      multiply();\n      R_c3 = pop(); // B - only related calculations\n\n      push(p4);\n      push(p4);\n      multiply();\n      R_b2 = pop();\n      push(R_b2);\n      push(p4);\n      multiply();\n      R_b3 = pop();\n      push(R_b3);\n      push(p6);\n      multiply();\n      R_b3_d = pop();\n      push(R_b3_d);\n      push_integer(-4);\n      multiply();\n      R_m4_b3_d = pop();\n      push(R_b3);\n      push_integer(2);\n      multiply();\n      R_2_b3 = pop(); // A - only related calculations\n\n      push(p3);\n      push(p3);\n      multiply();\n      R_a2 = pop();\n      push(R_a2);\n      push(p3);\n      multiply();\n      R_a3 = pop();\n      push_integer(3);\n      push(p3);\n      multiply();\n      R_3_a = pop();\n      push(R_a2);\n      push(p6);\n      multiply();\n      R_a2_d = pop();\n      push(R_a2_d);\n      push(p6);\n      multiply();\n      R_a2_d2 = pop();\n      push(R_a2_d);\n      push_integer(27);\n      multiply();\n      R_27_a2_d = pop();\n      push(R_a2_d2);\n      push_integer(-27);\n      multiply();\n      R_m27_a2_d2 = pop();\n      push(R_3_a);\n      push_integer(2);\n      multiply();\n      R_6_a = pop(); // mixed calculations\n\n      push(p3);\n      push(p5);\n      multiply();\n      R_a_c = pop();\n      push(R_a_c);\n      push(p4);\n      multiply();\n      R_a_b_c = pop();\n      push(R_a_b_c);\n      push(p6);\n      multiply();\n      R_a_b_c_d = pop();\n      push(R_a_c);\n      push_integer(3);\n      multiply();\n      R_3_a_c = pop();\n      push_integer(-4);\n      push(p3);\n      push(R_c3);\n      multiply();\n      multiply();\n      R_m4_a_c3 = pop();\n      push(R_a_b_c);\n      push_integer(9);\n      multiply();\n      negate();\n      R_m9_a_b_c = pop();\n      push(R_a_b_c_d);\n      push_integer(18);\n      multiply();\n      R_18_a_b_c_d = pop();\n      push(R_b2);\n      push(R_3_a_c);\n      subtract();\n      R_DELTA0 = pop();\n      push(R_b2);\n      push(R_c2);\n      multiply();\n      R_b2_c2 = pop();\n      push(p4);\n      negate();\n      push(R_3_a);\n      divide();\n      R_m_b_over_3a = pop();\n\n      if (n === 4) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using cubic formula <<<<<<<<<<<<<<< \");\n        } //console.log \">>>> A:\" + p3.toString()\n        //console.log \">>>> B:\" + p4.toString()\n        //console.log \">>>> C:\" + p5.toString()\n        //console.log \">>>> D:\" + p6.toString()\n\n\n        if (DEBUG) {\n          console.log(\"cubic: D0: \" + R_DELTA0.toString());\n        }\n\n        push(R_DELTA0);\n        push_integer(3);\n        power();\n        push_integer(4);\n        multiply();\n        R_4_DELTA03 = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_toBeCheckedIfZero = pop();\n\n        if (DEBUG) {\n          console.log(\"cubic: D0 as float: \" + R_DELTA0_toBeCheckedIfZero.toString());\n        } //if isZeroAtomOrTensor(R_DELTA0_toBeCheckedIfZero)\n        //  console.log \" *********************************** D0 IS ZERO\"\n        // DETERMINANT\n\n\n        push(R_18_a_b_c_d);\n        push(R_m4_b3_d);\n        push(R_b2_c2);\n        push(R_m4_a_c3);\n        push(R_m27_a2_d2);\n        add();\n        add();\n        add();\n        add();\n        simplify();\n        absValFloat();\n        R_determinant = pop();\n\n        if (DEBUG) {\n          console.log(\"cubic: DETERMINANT: \" + R_determinant.toString());\n        } // R_DELTA1\n\n\n        push(R_2_b3);\n        push(R_m9_a_b_c);\n        push(R_27_a2_d);\n        add();\n        add();\n        R_DELTA1 = pop();\n\n        if (DEBUG) {\n          console.log(\"cubic: D1: \" + R_DELTA1.toString());\n        } // R_Q\n\n\n        push(R_DELTA1);\n        push_integer(2);\n        power();\n        push(R_4_DELTA03);\n        subtract();\n        push_rational(1, 2);\n        power();\n        simplify();\n        R_Q = pop();\n\n        if (isZeroAtomOrTensor(R_determinant)) {\n          if (isZeroAtomOrTensor(R_DELTA0_toBeCheckedIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is zero\");\n            }\n\n            push(R_m_b_over_3a); // just same solution three times\n\n            restore();\n            return;\n          } else {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is not zero\");\n            }\n\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            push(p4);\n            push(p5);\n            multiply();\n            subtract();\n            push(R_DELTA0);\n            push_integer(2);\n            multiply();\n            divide(); // first solution\n\n            root_solution = pop();\n            push(root_solution); // pushing two of them on the stack\n\n            push(root_solution); // second solution here\n            // 4abc\n\n            push(R_a_b_c);\n            push_integer(4);\n            multiply(); // -9a*a*d\n\n            push(p3);\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            multiply();\n            negate(); // -9*b^3\n\n            push(R_b3);\n            negate(); // sum the three terms\n\n            add();\n            add(); // denominator is a*delta0\n\n            push(p3);\n            push(R_DELTA0);\n            multiply(); // build the fraction\n\n            divide();\n            restore();\n            return;\n          }\n        }\n\n        C_CHECKED_AS_NOT_ZERO = false;\n        flipSignOFQSoCIsNotZero = false;\n\n        while (!C_CHECKED_AS_NOT_ZERO) {\n          // R_C\n          push(R_Q);\n\n          if (flipSignOFQSoCIsNotZero) {\n            negate();\n          }\n\n          push(R_DELTA1);\n          add();\n          push_rational(1, 2);\n          multiply();\n          push_rational(1, 3);\n          power();\n          simplify();\n          R_C = pop();\n\n          if (DEBUG) {\n            console.log(\"cubic: C: \" + R_C.toString());\n          }\n\n          push(R_C);\n          simplify();\n          absValFloat();\n          R_C_simplified_toCheckIfZero = pop();\n\n          if (DEBUG) {\n            console.log(\"cubic: C as absval and float: \" + R_C_simplified_toCheckIfZero.toString());\n          }\n\n          if (isZeroAtomOrTensor(R_C_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: C IS ZERO flipping the sign\");\n            }\n\n            flipSignOFQSoCIsNotZero = true;\n          } else {\n            C_CHECKED_AS_NOT_ZERO = true;\n          }\n        }\n\n        push(R_C);\n        push(R_3_a);\n        multiply();\n        R_3_a_C = pop();\n        push(R_3_a_C);\n        push_integer(2);\n        multiply();\n        R_6_a_C = pop(); // imaginary parts calculations\n\n        push(imaginaryunit);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        multiply();\n        i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        add();\n        one_plus_i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        subtract();\n        one_minus_i_sqrt3 = pop();\n        push(R_C);\n        push(R_3_a);\n        divide();\n        R_C_over_3a = pop(); // first solution\n\n        push(R_m_b_over_3a); // first term\n\n        push(R_C_over_3a);\n        negate(); // second term\n\n        push(R_DELTA0);\n        push(R_3_a_C);\n        divide();\n        negate(); // third term\n        // now add the three terms together\n\n        add();\n        add();\n        simplify(); // second solution\n\n        push(R_m_b_over_3a); // first term\n\n        push(R_C_over_3a);\n        push(one_plus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide(); // second term\n\n        push(one_minus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide(); // third term\n        // now add the three terms together\n\n        add();\n        add();\n        simplify(); // third solution\n\n        push(R_m_b_over_3a); // first term\n\n        push(R_C_over_3a);\n        push(one_minus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide(); // second term\n\n        push(one_plus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide(); // third term\n        // now add the three terms together\n\n        add();\n        add();\n        simplify();\n        restore();\n        return;\n      } // See http://www.sscc.edu/home/jdavidso/Math/Catalog/Polynomials/Fourth/Fourth.html\n      // for a description of general shapes and properties of fourth degree polynomials\n\n\n      if (n === 5) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using quartic formula <<<<<<<<<<<<<<< \");\n        }\n\n        p7 = pop(); // E\n\n        if (isZeroAtomOrTensor(p4) && isZeroAtomOrTensor(p6) && !isZeroAtomOrTensor(p5) && !isZeroAtomOrTensor(p7)) {\n          if (DEBUG) {\n            console.log(\"biquadratic case\");\n          }\n\n          push(p3);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(p5);\n          push(symbol(SECRETX));\n          multiply();\n          push(p7);\n          add();\n          add();\n          push(symbol(SECRETX));\n          roots();\n          biquadraticSolutions = pop();\n          ref2 = biquadraticSolutions.tensor.elem;\n\n          for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n            eachSolution = ref2[l1];\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            simplify();\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            negate();\n            simplify();\n          }\n\n          restore();\n          return;\n        } // D - only related calculations\n\n\n        push(p6);\n        push(p6);\n        multiply();\n        R_d2 = pop(); // E - only related calculations\n\n        push(p7);\n        push(p7);\n        multiply();\n        R_e2 = pop();\n        push(R_e2);\n        push(p7);\n        multiply();\n        R_e3 = pop(); // DETERMINANT\n\n        push_integer(256);\n        push(R_a3);\n        push(R_e3);\n        multiply();\n        multiply(); // first term 256 a^3 e^3\n\n        push_integer(-192);\n        push(R_a2_d);\n        push(R_e2);\n        push(p4);\n        multiply();\n        multiply();\n        multiply(); // second term -192 a^3 b d e^2\n\n        push_integer(-128);\n        push(R_a2);\n        push(R_c2);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply(); // third term -128 a^2 c^2 e^2\n\n        push_integer(144);\n        push(R_a2_d2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // fourth term 144 a^2 c d^2 e\n\n        push(R_m27_a2_d2);\n        push(R_d2);\n        multiply(); // fifth term -27 a^2 d^4\n\n        push_integer(144);\n        push(R_a_b_c);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply(); // sixth term 144 a b^2 c e^2\n\n        push_integer(-6);\n        push(p3);\n        push(R_b2);\n        push(R_d2);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        multiply(); // seventh term -6 a b^2 d^2 e\n\n        push_integer(-80);\n        push(R_a_b_c_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // eigth term -80 a b c^2 d e\n\n        push_integer(18);\n        push(R_a_b_c_d);\n        push(R_d2);\n        multiply();\n        multiply(); // ninth term 18 a b c d^3\n\n        push_integer(16);\n        push(R_a_c);\n        push(R_c3);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // tenth term 16 a c^4 e\n\n        push_integer(-4);\n        push(R_a_c);\n        push(R_c2);\n        push(R_d2);\n        multiply();\n        multiply();\n        multiply(); // eleventh term -4 a c^3 d^2\n\n        push_integer(-27);\n        push(R_b3);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply(); // twelveth term -27 b^4 e^2\n\n        push_integer(18);\n        push(R_b3_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // thirteenth term 18 b^3 c d e\n\n        push(R_m4_b3_d);\n        push(R_d2);\n        multiply(); // fourteenth term -4 b^3 d^3\n\n        push_integer(-4);\n        push(R_b2_c2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // fifteenth term -4 b^2 c^3 e\n\n        push(R_b2_c2);\n        push(R_d2);\n        multiply(); // sixteenth term b^2 c^2 d^2\n        // add together the sixteen terms by doing\n        // fifteen adds\n\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        R_determinant = pop();\n\n        if (DEBUG) {\n          console.log(\"R_determinant: \" + R_determinant.toString());\n        } // DELTA0\n\n\n        push(R_c2); // term one of DELTA0\n\n        push_integer(-3);\n        push(p4);\n        push(p6);\n        multiply();\n        multiply(); // term two of DELTA0\n\n        push_integer(12);\n        push(p3);\n        push(p7);\n        multiply();\n        multiply(); // term three of DELTA0\n        // add the three terms together\n\n        add();\n        add();\n        R_DELTA0 = pop();\n\n        if (DEBUG) {\n          console.log(\"R_DELTA0: \" + R_DELTA0.toString());\n        } // DELTA1\n\n\n        push_integer(2);\n        push(R_c3);\n        multiply();\n        push_integer(-9);\n        push(p4);\n        push(p5);\n        push(p6);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(27);\n        push(R_b2);\n        push(p7);\n        multiply();\n        multiply();\n        push_integer(27);\n        push(p3);\n        push(R_d2);\n        multiply();\n        multiply();\n        push_integer(-72);\n        push(R_a_c);\n        push(p7);\n        multiply();\n        multiply(); // add the five terms together\n\n        add();\n        add();\n        add();\n        add();\n        R_DELTA1 = pop();\n\n        if (DEBUG) {\n          console.log(\"R_DELTA1: \" + R_DELTA1.toString());\n        } // p\n\n\n        push_integer(8);\n        push(R_a_c);\n        multiply();\n        push_integer(-3);\n        push(R_b2);\n        multiply();\n        add();\n        push_integer(8);\n        push(R_a2);\n        multiply();\n        divide();\n        R_p = pop();\n\n        if (DEBUG) {\n          console.log(\"p: \" + R_p.toString());\n        } // q\n\n\n        push(R_b3);\n        push_integer(-4);\n        push(R_a_b_c);\n        multiply();\n        push_integer(8);\n        push(R_a2_d);\n        multiply();\n        add();\n        add();\n        push_integer(8);\n        push(R_a3);\n        multiply();\n        divide();\n        R_q = pop();\n\n        if (DEBUG) {\n          console.log(\"q: \" + R_q.toString());\n        }\n\n        if (DEBUG) {\n          console.log(\"tos 1 \" + tos);\n        }\n\n        if (!isZeroAtomOrTensor(p4)) {\n          if (DEBUG) {\n            console.log(\"tos 2 \" + tos);\n          }\n\n          push_integer(8);\n          push(p5);\n          push(p3);\n          multiply();\n          multiply();\n          push_integer(-3);\n          push(p4);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          divide();\n          R_p = pop();\n\n          if (DEBUG) {\n            console.log(\"p for depressed quartic: \" + R_p.toString());\n          }\n\n          push(p4);\n          push_integer(3);\n          power();\n          push_integer(-4);\n          push(p3);\n          push(p4);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          push_integer(8);\n          push(p6);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          multiply();\n          add();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(3);\n          power();\n          multiply();\n          divide();\n          R_q = pop();\n\n          if (DEBUG) {\n            console.log(\"q for depressed quartic: \" + R_q.toString());\n          } // convert to depressed quartic\n\n\n          push(p4);\n          push_integer(4);\n          power();\n          push_integer(-3);\n          multiply();\n          push_integer(256);\n          push(R_a3);\n          push(p7);\n          multiply();\n          multiply();\n          push_integer(-64);\n          push(R_a2_d);\n          push(p4);\n          multiply();\n          multiply();\n          push_integer(16);\n          push(R_b2);\n          push(p3);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          add();\n          add();\n          add();\n          push_integer(256);\n          push(p3);\n          push_integer(4);\n          power();\n          multiply();\n          divide();\n          R_r = pop();\n\n          if (DEBUG) {\n            console.log(\"r for depressed quartic: \" + R_r.toString());\n          }\n\n          if (DEBUG) {\n            console.log(\"tos 4 \" + tos);\n          }\n\n          push(symbol(SECRETX));\n          push_integer(4);\n          power();\n\n          if (DEBUG) {\n            console.log(\"4 * x^4: \" + stack[tos - 1].toString());\n          }\n\n          push(R_p);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n\n          if (DEBUG) {\n            console.log(\"R_p * x^2: \" + stack[tos - 1].toString());\n          }\n\n          push(R_q);\n          push(symbol(SECRETX));\n          multiply();\n\n          if (DEBUG) {\n            console.log(\"R_q * x: \" + stack[tos - 1].toString());\n          }\n\n          push(R_r);\n\n          if (DEBUG) {\n            console.log(\"R_r: \" + stack[tos - 1].toString());\n          }\n\n          add();\n          add();\n          add();\n          simplify();\n\n          if (DEBUG) {\n            console.log(\"solving depressed quartic: \" + stack[tos - 1].toString());\n          }\n\n          push(symbol(SECRETX));\n          roots();\n          depressedSolutions = pop();\n\n          if (DEBUG) {\n            console.log(\"depressedSolutions: \" + depressedSolutions);\n          }\n\n          ref3 = depressedSolutions.tensor.elem;\n\n          for (m1 = 0, len1 = ref3.length; m1 < len1; m1++) {\n            eachSolution = ref3[m1];\n            push(eachSolution);\n            push(p4);\n            push_integer(4);\n            push(p3);\n            multiply();\n            divide();\n            subtract();\n            simplify();\n\n            if (DEBUG) {\n              console.log(\"solution from depressed: \" + stack[tos - 1].toString());\n            }\n          }\n\n          restore();\n          return;\n        } else {\n          R_p = p5;\n          R_q = p6;\n          R_r = p7;\n          /*\n           * Descartes' solution\n           * https://en.wikipedia.org/wiki/Quartic_function#Descartes.27_solution\n           * finding the \"u\" in the depressed equation\n           push_integer(2)\n          push(R_p)\n          multiply()\n          coeff2 = pop()\n           push_integer(-4)\n          push(R_p)\n          push_integer(2)\n          power()\n          multiply()\n          push(R_r)\n          multiply()\n          coeff3 = pop()\n           push(R_q)\n          push_integer(2)\n          power()\n          negate()\n          coeff4 = pop()\n            * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(3)\n          power()\n           push(coeff2)\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          multiply()\n           push(coeff3)\n          push(symbol(SECRETX))\n          multiply()\n           push(coeff4)\n           add()\n          add()\n          add()\n           console.log(\"Descarte's resolventCubic: \" +  stack[tos-1].toString())\n          push(symbol(SECRETX))\n           roots()\n           resolventCubicSolutions = pop()\n          console.log(\"Descarte's resolventCubic solutions: \" +  resolventCubicSolutions)\n          console.log(\"tos: \" +  tos)\n           R_u = null\n          #R_u = resolventCubicSolutions.tensor.elem[1]\n          for eachSolution in resolventCubicSolutions.tensor.elem\n            console.log(\"examining solution: \" +  eachSolution)\n            push(eachSolution)\n            push_integer(2)\n            multiply()\n            push(R_p)\n            add()\n             absValFloat()\n            toBeCheckedIFZero = pop()\n            console.log(\"abs value is: \" +  eachSolution)\n            if !isZeroAtomOrTensor(toBeCheckedIFZero)\n              R_u = eachSolution\n              break\n           console.log(\"chosen solution: \" +  R_u)\n           push(R_u)\n          negate()\n          R_s = pop()\n           push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          add()\n          add()\n          push_integer(2)\n          divide()\n          R_t = pop()\n           push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          subtract()\n          add()\n          push_integer(2)\n          divide()\n          R_v = pop()\n            * factoring the quartic into two quadratics:\n            * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n           push(R_s)\n          push(symbol(SECRETX))\n          multiply()\n           push(R_t)\n           add()\n          add()\n           console.log(\"factored quartic 1: \" + stack[tos-1].toString())\n           push(symbol(SECRETX))\n          push_integer(2)\n          power()\n           push(R_u)\n          push(symbol(SECRETX))\n          multiply()\n           push(R_v)\n           add()\n          add()\n           console.log(\"factored quartic 2: \" + stack[tos-1].toString())\n          pop()\n           restore()\n          return\n           */\n          // Ferrari's solution\n          // https://en.wikipedia.org/wiki/Quartic_function#Ferrari.27s_solution\n          // finding the \"m\" in the depressed equation\n\n          push_rational(5, 2);\n          push(R_p);\n          multiply();\n          coeff2 = pop();\n          push_integer(2);\n          push(R_p);\n          push_integer(2);\n          power();\n          multiply();\n          push(R_r);\n          subtract();\n          coeff3 = pop();\n          push(R_p);\n          push_integer(3);\n          power();\n          push_integer(2);\n          divide();\n          push_rational(-1, 2);\n          push(R_p);\n          push(R_r);\n          multiply();\n          multiply();\n          push_rational(-1, 8);\n          push(R_q);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n          coeff4 = pop();\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          push(coeff2);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(coeff3);\n          push(symbol(SECRETX));\n          multiply();\n          push(coeff4);\n          add();\n          add();\n          add();\n\n          if (DEBUG) {\n            console.log(\"resolventCubic: \" + stack[tos - 1].toString());\n          }\n\n          push(symbol(SECRETX));\n          roots();\n          resolventCubicSolutions = pop();\n\n          if (DEBUG) {\n            console.log(\"resolventCubicSolutions: \" + resolventCubicSolutions);\n          }\n\n          R_m = null;\n          ref4 = resolventCubicSolutions.tensor.elem; //R_m = resolventCubicSolutions.tensor.elem[1]\n\n          for (n1 = 0, len2 = ref4.length; n1 < len2; n1++) {\n            eachSolution = ref4[n1];\n\n            if (DEBUG) {\n              console.log(\"examining solution: \" + eachSolution);\n            }\n\n            push(eachSolution);\n            push_integer(2);\n            multiply();\n            push(R_p);\n            add();\n            absValFloat();\n            toBeCheckedIFZero = pop();\n\n            if (DEBUG) {\n              console.log(\"abs value is: \" + eachSolution);\n            }\n\n            if (!isZeroAtomOrTensor(toBeCheckedIFZero)) {\n              R_m = eachSolution;\n              break;\n            }\n          }\n\n          if (DEBUG) {\n            console.log(\"chosen solution: \" + R_m);\n          }\n\n          push(R_m);\n          push_integer(2);\n          multiply();\n          push(R_p);\n          add();\n          push_rational(1, 2);\n          power();\n          simplify();\n          sqrtPPlus2M = pop();\n          push(R_q);\n          push_integer(2);\n          multiply();\n          push(sqrtPPlus2M);\n          divide();\n          simplify();\n          TwoQOversqrtPPlus2M = pop();\n          push(R_p);\n          push_integer(3);\n          multiply();\n          push(R_m);\n          push_integer(2);\n          multiply();\n          add();\n          ThreePPlus2M = pop(); // solution1\n\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide(); // solution2\n\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide(); // solution3\n\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide(); // solution4\n\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide();\n          restore();\n          return;\n        } // Q ---------------------------\n\n\n        push(R_determinant);\n        simplify();\n        absValFloat();\n        R_determinant_simplified_toCheckIfZero = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_simplified_toCheckIfZero = pop();\n        S_CHECKED_AS_NOT_ZERO = false;\n        choiceOfRadicalInQSoSIsNotZero = 0;\n\n        while (!S_CHECKED_AS_NOT_ZERO) {\n          Q_CHECKED_AS_NOT_ZERO = false;\n          flipSignOFRadicalSoQIsNotZero = false;\n\n          while (!Q_CHECKED_AS_NOT_ZERO) {\n            // D1 under the outer radical\n            push(R_DELTA1); // D1^2 under the inner radical\n\n            push(R_DELTA1);\n            push_integer(2);\n            power(); // 4*D0^3 under the inner radical\n\n            push_integer(-4);\n            push(R_DELTA0);\n            push_integer(3);\n            power();\n            multiply(); // addition under the inner radical\n\n            add(); // the second radical\n\n            push_rational(1, 2);\n            power();\n\n            if (flipSignOFRadicalSoQIsNotZero) {\n              negate();\n            } // the addition under the outer radical\n\n\n            add(); // content of outer radical divided by two\n\n            push_integer(2);\n            divide();\n\n            if (DEBUG) {\n              console.log(\"content of cubic root: \" + stack[tos - 1].toString());\n            } // outer radical calculation: cubic root\n            // now we actually have to find all the roots\n            // because we have to pick the one that makes S != 0\n\n\n            push_rational(1, 3);\n            power();\n            simplify();\n            R_principalCubicRoot = pop();\n\n            if (DEBUG) {\n              console.log(\"principal cubic root: \" + R_principalCubicRoot.toString());\n            }\n\n            if (DEBUG) {\n              console.log(\"tos : \" + tos);\n            }\n\n            if (choiceOfRadicalInQSoSIsNotZero === 0) {\n              if (DEBUG) {\n                console.log(\"chosing principal cubic root\");\n              }\n\n              push(R_principalCubicRoot);\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond principal\");\n              }\n\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(-1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond beyond principal\");\n              }\n\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            }\n\n            simplify();\n            R_Q = pop();\n\n            if (DEBUG) {\n              console.log(\"Q \" + R_Q.toString());\n            }\n\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n\n            push(R_Q);\n            simplify();\n            absValFloat();\n            R_Q_simplified_toCheckIfZero = pop();\n\n            if (DEBUG) {\n              console.log(\"Q simplified and abs\" + R_Q_simplified_toCheckIfZero.toString());\n            }\n\n            if (isZeroAtomOrTensor(R_Q_simplified_toCheckIfZero) && !isZeroAtomOrTensor(R_determinant_simplified_toCheckIfZero) && isZeroAtomOrTensor(R_DELTA0_simplified_toCheckIfZero)) {\n              if (DEBUG) {\n                console.log(\" *********************************** Q IS ZERO and it matters, flipping the sign\");\n              }\n\n              flipSignOFRadicalSoQIsNotZero = true;\n            } else {\n              Q_CHECKED_AS_NOT_ZERO = true;\n            }\n\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n          } // S\n\n\n          push_rational(-2, 3);\n          push(R_p);\n          multiply();\n          push(R_Q);\n          push(R_DELTA0);\n          push(R_Q);\n          divide();\n          add(); //rationalize()\n          //console.log(\"rationalised: \" + stack[tos-1].toString())\n          //simplify()\n\n          push(R_3_a);\n          divide();\n          add();\n          push_rational(1, 2);\n          power();\n          push_integer(2);\n          divide();\n          show_power_debug = true;\n          simplify();\n          R_S = pop();\n\n          if (DEBUG) {\n            console.log(\"S \" + R_S.toString());\n          } // now check if S is zero\n\n\n          push(R_S);\n          simplify();\n          absValFloat();\n          R_S_simplified_toCheckIfZero = pop();\n\n          if (DEBUG) {\n            console.log(\"S \" + R_S_simplified_toCheckIfZero.toString());\n          }\n\n          if (isZeroAtomOrTensor(R_S_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" *********************************** S IS ZERO chosing another cubic root\");\n            }\n\n            choiceOfRadicalInQSoSIsNotZero++;\n          } else {\n            S_CHECKED_AS_NOT_ZERO = true;\n          }\n\n          if (DEBUG) {\n            console.log(\"tos: \" + tos);\n          }\n        } // ----------------------------\n\n\n        if (DEBUG) {\n          console.log(\"tos: \" + tos);\n        }\n\n        push(p4);\n        negate();\n        push(p3);\n        push_integer(4);\n        multiply();\n        divide();\n        R_minus_b_over_4a = pop();\n        push_integer(-4);\n        push(R_S);\n        push_integer(2);\n        power();\n        multiply();\n        push_integer(2);\n        push(R_p);\n        multiply();\n        subtract();\n        R_minus_4S2_minus_2p = pop();\n        push(R_q);\n        push(R_S);\n        divide();\n        R_q_over_S = pop();\n\n        if (DEBUG) {\n          console.log(\"tos before putting together the 4 solutions: \" + tos);\n        } // first solution\n\n\n        push(R_minus_b_over_4a); // first term\n\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify(); // second solution\n\n        push(R_minus_b_over_4a); // first term\n\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify(); // third solution\n\n        push(R_minus_b_over_4a); // first term\n\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify(); // fourth solution\n\n        push(R_minus_b_over_4a); // first term\n\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify();\n        restore();\n        return;\n      }\n    }\n\n    moveTos(tos - n);\n    return restore();\n  };\n\n  Eval_round = function Eval_round() {\n    push(cadr(p1));\n    Eval();\n    return yround();\n  };\n\n  yround = function yround() {\n    save();\n    yyround();\n    return restore();\n  };\n\n  yyround = function yyround() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (!isNumericAtom(p1)) {\n      push_symbol(ROUND);\n      push(p1);\n      list(2);\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.round(p1.d);\n      push_double(d);\n      return;\n    }\n\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n\n    push(p1);\n\n    _yyfloat();\n\n    p1 = pop();\n    return push_integer(Math.round(p1.d));\n  }; // This scanner uses the recursive descent method.\n  // The char pointers token_str and scan_str are pointers to the input string as\n  // in the following example.\n  //  | g | a | m | m | a |   | a | l | p | h | a |\n  //    ^                   ^\n  //    token_str           scan_str\n  // The char pointer token_buf points to a malloc buffer.\n  //  | g | a | m | m | a | \\0 |\n  //    ^\n  //    token_buf\n  // In the sequence of method invocations for scanning,\n  // first we do the calls for scanning the operands\n  // of the operators of least precedence.\n  // So, since precedence in maths goes something like\n  // (form high to low) exponents, mult/div, plus/minus\n  // so we scan first for terms, then factors, then powers.\n  // That's the general idea, but of course we also have to deal\n  // with things like parens, non-commutative\n  // dot (or inner) product, assignments and tests,\n  // function calls etc.\n  // Note that a^1/2 is, correctly, a/2, not, incorrectly, sqrt(a),\n  // see comment in related test in power.coffee for more about this.\n  //  Notes:\n  //  Formerly add() and multiply() were used to construct expressions but\n  //  this preevaluation caused problems.\n  //  For example, suppose A has the floating point value inf.\n  //  Before, the expression A/A resulted in 1 because the scanner would\n  //  divide the symbols.\n  //  After removing add() and multiply(), A/A results in nan which is the\n  //  correct result.\n  //  The functions negate() and inverse() are used but they do not cause\n  //  problems with preevaluation of symbols.\n\n\n  T_INTEGER = 1001;\n  T_DOUBLE = 1002;\n  T_SYMBOL = 1003;\n  T_FUNCTION = 1004;\n  T_NEWLINE = 1006;\n  T_STRING = 1007;\n  T_GTEQ = 1008;\n  T_LTEQ = 1009;\n  T_EQ = 1010;\n  T_NEQ = 1011;\n  T_QUOTASSIGN = 1012;\n  token = \"\";\n  newline_flag = 0;\n  meta_mode = 0;\n  input_str = 0;\n  scan_str = 0;\n  token_str = 0;\n  token_buf = 0;\n  lastFoundSymbol = null;\n  symbolsRightOfAssignment = null;\n  symbolsLeftOfAssignment = null;\n  isSymbolLeftOfAssignment = null;\n  scanningParameters = null;\n  functionInvokationsScanningStack = null;\n  skipRootVariableToBeSolved = false;\n  assignmentFound = null; // Returns number of chars scanned and expr on stack.\n  // Returns zero when nothing left to scan.\n  // takes a string\n\n  scanned = \"\";\n\n  scan = function scan(s) {\n    if (DEBUG) {\n      console.log(\"#### scanning \" + s);\n    } //if s==\"y=x\"\n    //  debugger\n    //if s==\"y\"\n    //  debugger\n    //if s==\"i=sqrt(-1)\"\n    //  debugger\n\n\n    lastFoundSymbol = null;\n    symbolsRightOfAssignment = [];\n    symbolsLeftOfAssignment = [];\n    isSymbolLeftOfAssignment = true;\n    scanningParameters = [];\n    functionInvokationsScanningStack = [\"\"];\n    assignmentFound = false;\n    scanned = s;\n    meta_mode = 0;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n\n    scan_stmt();\n    expanding--;\n\n    if (!assignmentFound) {\n      symbolsInExpressionsWithoutAssignments = symbolsInExpressionsWithoutAssignments.concat(symbolsLeftOfAssignment);\n    }\n\n    return token_str - input_str;\n  }; // takes a string\n\n\n  scan_meta = function scan_meta(s) {\n    scanned = s;\n    meta_mode = 1;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n\n    scan_stmt();\n    expanding--;\n    return token_str - input_str;\n  };\n\n  scan_stmt = function scan_stmt() {\n    var assignmentIsOfQuotedType, existingDependencies, i, indexOfSymbolLeftOfAssignment, l1, len, len1, m1, symbolLeftOfAssignment;\n    scan_relation();\n    assignmentIsOfQuotedType = false;\n\n    if (token === T_QUOTASSIGN) {\n      assignmentIsOfQuotedType = true;\n    }\n\n    if (token === T_QUOTASSIGN || token === '=') {\n      symbolLeftOfAssignment = lastFoundSymbol;\n\n      if (DEBUG) {\n        console.log(\"assignment!\");\n      }\n\n      assignmentFound = true;\n      isSymbolLeftOfAssignment = false;\n      get_next_token();\n      push_symbol(SETQ);\n      swap(); // if it's a := then add a quote\n\n      if (assignmentIsOfQuotedType) {\n        push_symbol(QUOTE);\n      }\n\n      scan_relation(); // if it's a := then you have to list\n      // together the quote and its argument\n\n      if (assignmentIsOfQuotedType) {\n        list(2);\n      }\n\n      list(3);\n      isSymbolLeftOfAssignment = true;\n\n      if (codeGen) {\n        // in case of re-assignment, the symbol on the\n        // left will also be in the set of the symbols\n        // on the right. In that case just remove it from\n        // the symbols on the right.\n        indexOfSymbolLeftOfAssignment = symbolsRightOfAssignment.indexOf(symbolLeftOfAssignment);\n\n        if (indexOfSymbolLeftOfAssignment !== -1) {\n          symbolsRightOfAssignment.splice(indexOfSymbolLeftOfAssignment, 1);\n          symbolsHavingReassignments.push(symbolLeftOfAssignment);\n        } // print out the immediate dependencies\n\n\n        if (DEBUG) {\n          console.log(\"locally, \" + symbolLeftOfAssignment + \" depends on: \");\n\n          for (l1 = 0, len = symbolsRightOfAssignment.length; l1 < len; l1++) {\n            i = symbolsRightOfAssignment[l1];\n            console.log(\"  \" + i);\n          }\n        } // ok add the local dependencies to the existing\n        // dependencies of this left-value symbol\n        // create the exiting dependencies list if it doesn't exist\n\n\n        if (symbolsDependencies[symbolLeftOfAssignment] == null) {\n          symbolsDependencies[symbolLeftOfAssignment] = [];\n        }\n\n        existingDependencies = symbolsDependencies[symbolLeftOfAssignment]; // copy over the new dependencies to the existing\n        // dependencies avoiding repetitions\n\n        for (m1 = 0, len1 = symbolsRightOfAssignment.length; m1 < len1; m1++) {\n          i = symbolsRightOfAssignment[m1];\n\n          if (existingDependencies.indexOf(i) === -1) {\n            existingDependencies.push(i);\n          }\n        }\n\n        return symbolsRightOfAssignment = [];\n      }\n    }\n  };\n\n  scan_relation = function scan_relation() {\n    scan_expression();\n\n    switch (token) {\n      case T_EQ:\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case T_NEQ:\n        push_symbol(NOT);\n        swap();\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        list(3);\n        return list(2);\n\n      case T_LTEQ:\n        push_symbol(TESTLE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case T_GTEQ:\n        push_symbol(TESTGE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case '<':\n        push_symbol(TESTLT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n\n      case '>':\n        push_symbol(TESTGT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n    }\n  };\n\n  scan_expression = function scan_expression() {\n    var h;\n    h = tos;\n\n    switch (token) {\n      case '+':\n        get_next_token();\n        scan_term();\n        break;\n\n      case '-':\n        get_next_token();\n        scan_term();\n        negate();\n        break;\n\n      default:\n        scan_term();\n    }\n\n    while (newline_flag === 0 && (token === '+' || token === '-')) {\n      if (token === '+') {\n        get_next_token();\n        scan_term();\n      } else {\n        get_next_token();\n        scan_term();\n        negate();\n      }\n    }\n\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(ADD);\n      swap();\n      return cons();\n    }\n  };\n\n  is_factor = function is_factor() {\n    if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n      return 1;\n    }\n\n    switch (token) {\n      case '*':\n      case '/':\n        return 1;\n\n      case '(':\n      case T_SYMBOL:\n      case T_FUNCTION:\n      case T_INTEGER:\n      case T_DOUBLE:\n      case T_STRING:\n        if (newline_flag) {\n          // implicit mul can't cross line\n          scan_str = token_str; // better error display\n\n          return 0;\n        } else {\n          return 1;\n        }\n\n    }\n\n    return 0;\n  };\n\n  simplify_1_in_products = function simplify_1_in_products(tos, h) {\n    if (tos > h && isrational(stack[tos - 1]) && equaln(stack[tos - 1], 1)) {\n      return pop();\n    }\n  }; // calculate away consecutive constants\n\n\n  multiply_consecutive_constants = function multiply_consecutive_constants(tos, h) {\n    if (tos > h + 1 && isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply();\n    }\n  };\n\n  scan_term = function scan_term() {\n    var h;\n    h = tos;\n    scan_factor();\n\n    if (parse_time_simplifications) {\n      simplify_1_in_products(tos, h);\n    }\n\n    while (is_factor()) {\n      if (token === '*') {\n        get_next_token();\n        scan_factor();\n      } else if (token === '/') {\n        // in case of 1/... then\n        // we scanned the 1, we get rid\n        // of it because otherwise it becomes\n        // an extra factor that wasn't there and\n        // things like\n        // 1/(2*a) become 1*(1/(2*a))\n        simplify_1_in_products(tos, h);\n        get_next_token();\n        scan_factor();\n        inverse();\n      } else if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n        get_next_token();\n        push_symbol(INNER);\n        swap();\n        scan_factor();\n        list(3);\n      } else {\n        scan_factor();\n      }\n\n      if (parse_time_simplifications) {\n        multiply_consecutive_constants(tos, h);\n        simplify_1_in_products(tos, h);\n      }\n    }\n\n    if (h === tos) {\n      return push_integer(1);\n    } else if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      return cons();\n    }\n  };\n\n  scan_power = function scan_power() {\n    if (token === '^') {\n      get_next_token();\n      push_symbol(POWER);\n      swap();\n      scan_factor();\n      return list(3);\n    }\n  };\n\n  scan_index = function scan_index(h) {\n    //console.log \"[ as index\"\n    get_next_token();\n    push_symbol(INDEX);\n    swap();\n    scan_expression();\n\n    while (token === ',') {\n      get_next_token();\n      scan_expression();\n    }\n\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n\n    get_next_token();\n    return list(tos - h);\n  };\n\n  scan_factor = function scan_factor() {\n    var firstFactorIsNumber, h;\n    h = tos; //console.log \"scan_factor token: \" + token\n\n    firstFactorIsNumber = false;\n\n    if (token === '(') {\n      scan_subexpr();\n    } else if (token === T_SYMBOL) {\n      scan_symbol();\n    } else if (token === T_FUNCTION) {\n      scan_function_call_with_function_name();\n    } else if (token === '[') {\n      //console.log \"[ as tensor\"\n      //debugger\n      scan_tensor();\n    } else if (token === T_INTEGER) {\n      firstFactorIsNumber = true;\n      bignum_scan_integer(token_buf);\n      get_next_token();\n    } else if (token === T_DOUBLE) {\n      firstFactorIsNumber = true;\n      bignum_scan_float(token_buf);\n      get_next_token();\n    } else if (token === T_STRING) {\n      scan_string();\n    } else {\n      scan_error(\"syntax error\");\n    } // after the main initial part of the factor that\n    // we just scanned above,\n    // we can get an arbitrary about of appendages\n    // of the form ...[...](...)...\n    // If the main part is not a number, then these are all, respectively,\n    //  - index references (as opposed to tensor definition) and\n    //  - function calls without an explicit function name\n    //    (instead of subexpressions or parameters of function\n    //    definitions or function calls with an explicit function\n    //    name), respectively\n\n\n    while (token === '[' || token === '(' && newline_flag === 0 && !firstFactorIsNumber) {\n      if (token === '[') {\n        scan_index(h);\n      } else if (token === '(') {\n        //console.log \"( as function call without function name \"\n        scan_function_call_without_function_name();\n      }\n    }\n\n    while (token === '!') {\n      get_next_token();\n      push_symbol(FACTORIAL);\n      swap();\n      list(2);\n    }\n\n    while ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === transpose_unicode) {\n      get_next_token();\n      push_symbol(TRANSPOSE);\n      swap();\n      list(2);\n    }\n\n    return scan_power();\n  };\n\n  addSymbolRightOfAssignment = function addSymbolRightOfAssignment(theSymbol) {\n    var i, l1, prefixVar, ref2;\n\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols right of assignment\");\n      }\n\n      prefixVar = \"\";\n\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n\n      theSymbol = prefixVar + theSymbol;\n      return symbolsRightOfAssignment.push(theSymbol);\n    }\n  };\n\n  addSymbolLeftOfAssignment = function addSymbolLeftOfAssignment(theSymbol) {\n    var i, l1, prefixVar, ref2;\n\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols left of assignment\");\n      }\n\n      prefixVar = \"\";\n\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n\n      theSymbol = prefixVar + theSymbol;\n      return symbolsLeftOfAssignment.push(theSymbol);\n    }\n  };\n\n  scan_symbol = function scan_symbol() {\n    if (token !== T_SYMBOL) {\n      scan_error(\"symbol expected\");\n    }\n\n    if (meta_mode && token_buf.length === 1) {\n      switch (token_buf[0]) {\n        case 'a':\n          push(symbol(METAA));\n          break;\n\n        case 'b':\n          push(symbol(METAB));\n          break;\n\n        case 'x':\n          push(symbol(METAX));\n          break;\n\n        default:\n          push(usr_symbol(token_buf));\n      }\n    } else {\n      push(usr_symbol(token_buf));\n    } //console.log \"found symbol: \" + token_buf\n\n\n    if (scanningParameters.length === 0) {\n      if (DEBUG) {\n        console.log(\"out of scanning parameters, processing \" + token_buf);\n      }\n\n      lastFoundSymbol = token_buf;\n\n      if (isSymbolLeftOfAssignment) {\n        addSymbolLeftOfAssignment(token_buf);\n      }\n    } else {\n      if (DEBUG) {\n        console.log(\"still scanning parameters, skipping \" + token_buf);\n      }\n\n      if (isSymbolLeftOfAssignment) {\n        addSymbolRightOfAssignment(\"'\" + token_buf);\n      }\n    }\n\n    if (DEBUG) {\n      console.log(\"found symbol: \" + token_buf + \" left of assignment: \" + isSymbolLeftOfAssignment);\n    }\n\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n\n    return get_next_token();\n  };\n\n  scan_string = function scan_string() {\n    push(new_string(token_buf));\n    return get_next_token();\n  };\n\n  scan_function_call_with_function_name = function scan_function_call_with_function_name() {\n    var functionName, i, l1, n, p, ref2;\n\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_with_function_name start\");\n    }\n\n    n = 1; // the parameter number as we scan parameters\n\n    p = new U();\n    p = usr_symbol(token_buf);\n    push(p);\n    functionName = token_buf;\n\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.push(token_buf);\n    }\n\n    lastFoundSymbol = token_buf;\n\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n\n    get_next_token(); // open parens\n\n    get_next_token(); // 1st parameter\n\n    scanningParameters.push(true);\n\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n\n      while (token === ',') {\n        get_next_token(); // roots' disappearing variable, if there, is the second one\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        } // sums' disappearing variable, is alsways the second one\n\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"sum\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        } // product's disappearing variable, is alsways the second one\n\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"product\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        } // for's disappearing variable, is alsways the second one\n\n\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"for\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        } // defint's disappearing variables can be in positions 2,5,8...\n\n\n        if (functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"defint\") !== -1 && (n === 2 || n > 2 && (n - 2) % 3 === 0)) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n            return !new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n\n        scan_stmt();\n        skipRootVariableToBeSolved = false;\n        n++;\n      } // todo refactor this, there are two copies\n      // this catches the case where the \"roots\" variable is not specified\n\n\n      if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n        symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function (x) {\n          return !new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + \"x\").test(x);\n        });\n      }\n    }\n\n    scanningParameters.pop();\n\n    for (i = l1 = 0, ref2 = symbolsRightOfAssignment.length; 0 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (symbolsRightOfAssignment[i] != null) {\n        if (functionName === \"roots\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"defint\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"sum\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"product\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n\n        if (functionName === \"for\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n      }\n    }\n\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n\n    get_next_token();\n    list(n);\n\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.pop();\n    }\n\n    if (functionName === symbol(PATTERN).printname) {\n      patternHasBeenFound = true;\n    }\n\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_with_function_name end\");\n    }\n  };\n\n  scan_function_call_without_function_name = function scan_function_call_without_function_name() {\n    var n;\n\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_without_function_name start\");\n    } // the function will have to be looked up\n    // at runtime (i.e. we need to evaulate something to find it\n    // e.g. it might be inside a tensor, so we'd need to evaluate\n    // a tensor element access in that case)\n\n\n    push_symbol(EVAL);\n    swap();\n    list(2);\n    n = 1; // the parameter number as we scan parameters\n\n    get_next_token(); // left paren\n\n    scanningParameters.push(true);\n\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n\n      while (token === ',') {\n        get_next_token();\n        scan_stmt();\n        n++;\n      }\n    }\n\n    scanningParameters.pop();\n\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n\n    get_next_token();\n    list(n);\n\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_without_function_name end: \" + stack[tos - 1]);\n    }\n  }; // scan subexpression\n\n\n  scan_subexpr = function scan_subexpr() {\n    var n;\n    n = 0;\n\n    if (token !== '(') {\n      scan_error(\"( expected\");\n    }\n\n    get_next_token();\n    scan_stmt();\n\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n\n    return get_next_token();\n  };\n\n  scan_tensor = function scan_tensor() {\n    var n;\n    n = 0;\n\n    if (token !== '[') {\n      scan_error(\"[ expected\");\n    }\n\n    get_next_token(); //console.log \"scanning the next statement\"\n\n    scan_stmt();\n    n = 1;\n\n    while (token === ',') {\n      get_next_token();\n      scan_stmt();\n      n++;\n    } //console.log \"building tensor with elements number: \" + n\n\n\n    build_tensor(n);\n\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n\n    return get_next_token();\n  };\n\n  scan_error = function scan_error(errmsg) {\n    errorMessage = \"\"; // try not to put question mark on orphan line\n\n    while (input_str !== scan_str) {\n      if ((scanned[input_str] === '\\n' || scanned[input_str] === '\\r') && input_str + 1 === scan_str) {\n        break;\n      }\n\n      errorMessage += scanned[input_str++];\n    }\n\n    errorMessage += \" ? \";\n\n    while (scanned[input_str] && scanned[input_str] !== '\\n' && scanned[input_str] !== '\\r') {\n      errorMessage += scanned[input_str++];\n    }\n\n    errorMessage += '\\n';\n    return stop(errmsg);\n  }; // There are n expressions on the stack, possibly tensors.\n  // This function assembles the stack expressions into a single tensor.\n  // For example, at the top level of the expression ((a,b),(c,d)), the vectors\n  // (a,b) and (c,d) would be on the stack.\n  // takes an integer\n\n\n  build_tensor = function build_tensor(n) {\n    var i, l1, ref2; // int i, j, k, ndim, nelem\n\n    i = 0;\n    save();\n    p2 = alloc_tensor(n);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = n;\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.elem[i] = stack[tos - n + i];\n    }\n\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  };\n\n  get_next_token = function get_next_token() {\n    newline_flag = 0;\n\n    while (1) {\n      get_token();\n\n      if (token !== T_NEWLINE) {\n        break;\n      }\n\n      newline_flag = 1;\n    }\n\n    if (DEBUG) {\n      return console.log(\"get_next_token token: \" + token);\n    }\n  }; //if token == ')'\n  //  debugger\n\n\n  get_token = function get_token() {\n    // skip spaces\n    while (isspace(scanned[scan_str])) {\n      if (scanned[scan_str] === '\\n' || scanned[scan_str] === '\\r') {\n        token = T_NEWLINE;\n        scan_str++;\n        return;\n      }\n\n      scan_str++;\n    }\n\n    token_str = scan_str; // end of string?\n\n    if (scan_str === scanned.length) {\n      token = \"\";\n      return;\n    } // number?\n\n\n    if (isdigit(scanned[scan_str]) || scanned[scan_str] === '.') {\n      while (isdigit(scanned[scan_str])) {\n        scan_str++;\n      }\n\n      if (scanned[scan_str] === '.') {\n        scan_str++;\n\n        while (isdigit(scanned[scan_str])) {\n          scan_str++;\n        }\n\n        if (scanned[scan_str] === 'e' && (scanned[scan_str + 1] === '+' || scanned[scan_str + 1] === '-' || isdigit(scanned[scan_str + 1]))) {\n          scan_str += 2;\n\n          while (isdigit(scanned[scan_str])) {\n            scan_str++;\n          }\n        }\n\n        token = T_DOUBLE;\n      } else {\n        token = T_INTEGER;\n      }\n\n      update_token_buf(token_str, scan_str);\n      return;\n    } // symbol?\n\n\n    if (isalpha(scanned[scan_str])) {\n      while (isalnumorunderscore(scanned[scan_str])) {\n        scan_str++;\n      }\n\n      if (scanned[scan_str] === '(') {\n        token = T_FUNCTION;\n      } else {\n        token = T_SYMBOL;\n      }\n\n      update_token_buf(token_str, scan_str);\n      return;\n    } // string ?\n\n\n    if (scanned[scan_str] === '\"') {\n      scan_str++;\n\n      while (scanned[scan_str] !== '\"') {\n        //if (scan_str == scanned.length || scanned[scan_str] == '\\n' || scanned[scan_str] == '\\r')\n        if (scan_str === scanned.length - 1) {\n          scan_str++;\n          scan_error(\"runaway string\");\n          scan_str--;\n        }\n\n        scan_str++;\n      }\n\n      scan_str++;\n      token = T_STRING;\n      update_token_buf(token_str + 1, scan_str - 1);\n      return;\n    } // comment?\n\n\n    if (scanned[scan_str] === '#' || scanned[scan_str] === '-' && scanned[scan_str + 1] === '-') {\n      while (scanned[scan_str] && scanned[scan_str] !== '\\n' && scanned[scan_str] !== '\\r') {\n        scan_str++;\n      }\n\n      if (scanned[scan_str]) {\n        scan_str++;\n      }\n\n      token = T_NEWLINE;\n      return;\n    } // quote-assignment\n\n\n    if (scanned[scan_str] === ':' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_QUOTASSIGN;\n      return;\n    } // relational operator?\n\n\n    if (scanned[scan_str] === '=' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_EQ;\n      return;\n    } // != operator. It's a little odd because\n    // \"!\" is not a \"not\", which would make things consistent.\n    // (it's used for factorial).\n    // An alternative would be to use \"<>\" but it's not used\n    // a lot in other languages...\n\n\n    if (scanned[scan_str] === '!' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_NEQ;\n      return;\n    }\n\n    if (scanned[scan_str] === '<' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_LTEQ;\n      return;\n    }\n\n    if (scanned[scan_str] === '>' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_GTEQ;\n      return;\n    } // single char token\n\n\n    return token = scanned[scan_str++];\n  }; // both strings\n\n\n  update_token_buf = function update_token_buf(a, b) {\n    return token_buf = scanned.substring(a, b);\n  };\n\n  $.scan = scan; //-----------------------------------------------------------------------------\n  //  Author : philippe.billet@noos.fr\n  //  sgn sign function\n  //-----------------------------------------------------------------------------\n\n  Eval_sgn = function Eval_sgn() {\n    push(cadr(p1));\n    Eval();\n    return sgn();\n  };\n\n  sgn = function sgn() {\n    save();\n    yysgn();\n    return restore();\n  }; //define X p1\n\n\n  yysgn = function yysgn() {\n    p1 = pop();\n\n    if (isdouble(p1)) {\n      if (p1.d > 0) {\n        push_integer(1);\n        return;\n      } else {\n        if (p1.d === 0) {\n          push_integer(1);\n          return;\n        } else {\n          push_integer(-1);\n          return;\n        }\n      }\n    }\n\n    if (isrational(p1)) {\n      if (MSIGN(mmul(p1.q.a, p1.q.b)) === -1) {\n        push_integer(-1);\n        return;\n      } else {\n        if (MZERO(mmul(p1.q.a, p1.q.b))) {\n          push_integer(0);\n          return;\n        } else {\n          push_integer(1);\n          return;\n        }\n      }\n    }\n\n    if (iscomplexnumber(p1)) {\n      push_integer(-1);\n      push(p1);\n\n      _absval();\n\n      power();\n      push(p1);\n      multiply();\n      return;\n    }\n\n    if (isnegativeterm(p1)) {\n      push_symbol(SGN);\n      push(p1);\n      negate();\n      list(2);\n      push_integer(-1);\n      multiply();\n      return;\n    }\n    /*\n    push_integer(2)\n    push(p1)\n    heaviside()\n    multiply()\n    push_integer(-1)\n    add()\n    */\n\n\n    push_symbol(SGN);\n    push(p1);\n    return list(2);\n  }; // shape of tensor\n\n\n  Eval_shape = function Eval_shape() {\n    push(cadr(p1));\n    Eval();\n    return shape();\n  };\n\n  shape = function shape() {\n    var ai, an, i, l1, m1, ndim, ref2, ref3, t;\n    i = 0;\n    ndim = 0;\n    t = 0;\n    ai = [];\n    an = [];\n\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    } //U **a, **b\n\n\n    save();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"transpose: tensor expected, 1st arg is not a tensor\");\n      }\n\n      push(zero);\n      restore();\n      return;\n    }\n\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(ndim);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = ndim;\n\n    for (i = m1 = 0, ref3 = ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push_integer(p1.tensor.dim[i]);\n      p2.tensor.elem[i] = pop();\n    }\n\n    push(p2);\n    return restore();\n  };\n  /*\n   Simplify factorials\n   The following script\n     F(n,k) = k binomial(n,k)\n    (F(n,k) + F(n,k-1)) / F(n+1,k)\n   generates\n          k! n!             n! (1 - k + n)!              k! n!\n   -------------------- + -------------------- - ----------------------\n   (-1 + k)! (1 + n)!     (1 + n)! (-k + n)!     k (-1 + k)! (1 + n)!\n   Simplify each term to get\n       k       1 - k + n       1\n   ------- + ----------- - -------\n    1 + n       1 + n       1 + n\n   Then simplify the sum to get\n       n\n   -------\n    1 + n\n   */\n  // simplify factorials term-by-term\n\n\n  Eval_simfac = function Eval_simfac() {\n    push(cadr(p1));\n    Eval();\n    return simfac();\n  }; //if 1\n\n\n  simfac = function simfac() {\n    var h;\n    h = 0;\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      h = tos;\n      p1 = cdr(p1);\n\n      while (p1 !== symbol(NIL)) {\n        push(car(p1));\n        simfac_term();\n        p1 = cdr(p1);\n      }\n\n      add_all(tos - h);\n    } else {\n      push(p1);\n      simfac_term();\n    }\n\n    return restore();\n  }; //else\n\n  /*\n  void\n  simfac(void)\n  {\n    int h\n    save()\n    p1 = pop()\n    if (car(p1) == symbol(ADD)) {\n      h = tos\n      p1 = cdr(p1)\n      while (p1 != symbol(NIL)) {\n        push(car(p1))\n        simfac_term()\n        p1 = cdr(p1)\n      }\n      addk(tos - h)\n      p1 = pop()\n      if (find(p1, symbol(FACTORIAL))) {\n        push(p1)\n        if (car(p1) == symbol(ADD)) {\n          Condense()\n          simfac_term()\n        }\n      }\n    } else {\n      push(p1)\n      simfac_term()\n    }\n    restore()\n  }\n   #endif\n   */\n\n\n  simfac_term = function simfac_term() {\n    var doNothing, h;\n    h = 0;\n    save();\n    p1 = pop(); // if not a product of factors then done\n\n    if (car(p1) !== symbol(MULTIPLY)) {\n      push(p1);\n      restore();\n      return;\n    } // push all factors\n\n\n    h = tos;\n    p1 = cdr(p1);\n\n    while (p1 !== symbol(NIL)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    } // keep trying until no more to do\n\n\n    while (yysimfac(h)) {\n      doNothing = 1;\n    }\n\n    multiply_all_noexpand(tos - h);\n    return restore();\n  }; // try all pairs of factors\n\n\n  yysimfac = function yysimfac(h) {\n    var i, j, l1, m1, ref2, ref3, ref4, ref5;\n    i = 0;\n    j = 0;\n\n    for (i = l1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      p1 = stack[i];\n\n      for (j = m1 = ref4 = h, ref5 = tos; ref4 <= ref5 ? m1 < ref5 : m1 > ref5; j = ref4 <= ref5 ? ++m1 : --m1) {\n        if (i === j) {\n          continue;\n        }\n\n        p2 = stack[j]; //  n! / n    ->  (n - 1)!\n\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && equal(cadr(p1), cadr(p2))) {\n          push(cadr(p1));\n          push(one);\n          subtract();\n          factorial();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        } //  n / n!    ->  1 / (n - 1)!\n\n\n        if (car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL) && equal(p1, cadadr(p2))) {\n          push(p1);\n          push_integer(-1);\n          add();\n          factorial();\n          reciprocate();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        } //  (n + 1) n!  ->  (n + 1)!\n\n\n        if (car(p2) === symbol(FACTORIAL)) {\n          push(p1);\n          push(cadr(p2));\n          subtract();\n          p3 = pop();\n\n          if (isplusone(p3)) {\n            push(p1);\n            factorial();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        } //  1 / ((n + 1) n!)  ->  1 / (n + 1)!\n\n\n        if (car(p1) === symbol(POWER) && isminusone(caddr(p1)) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n\n          if (isplusone(p3)) {\n            push(cadr(p1));\n            factorial();\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        } //  (n + 1)! / n!  ->  n + 1\n        //  n! / (n + 1)!  ->  1 / (n + 1)\n\n\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n\n          if (isplusone(p3)) {\n            stack[i] = cadr(p1);\n            stack[j] = one;\n            return 1;\n          }\n\n          if (isminusone(p3)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n\n          if (equaln(p3, 2)) {\n            stack[i] = cadr(p1);\n            push(cadr(p1));\n            push_integer(-1);\n            add();\n            stack[j] = pop();\n            return 1;\n          }\n\n          if (equaln(p3, -2)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            push(cadr(cadr(p2)));\n            push_integer(-1);\n            add();\n            reciprocate();\n            stack[j] = pop();\n            return 1;\n          }\n        }\n      }\n    }\n\n    return 0;\n  };\n\n  DEBUG_SIMPLIFY = false;\n\n  Eval_simplify = function Eval_simplify() {\n    push(cadr(p1));\n    runUserDefinedSimplifications();\n    Eval();\n    return simplify();\n  };\n\n  runUserDefinedSimplifications = function runUserDefinedSimplifications() {\n    var atLeastOneSuccessInRouldOfRulesApplications, eachConsecutiveRuleApplication, eachSimplification, l1, len, len1, m1, numberOfRulesApplications, originalexpanding, success; // -----------------------\n    // unfortunately for the time being user\n    // specified simplifications are only\n    // run in things which don't contain\n    // integrals.\n    // Doesn't work yet, could be because of\n    // some clobbering as \"transform\" is called\n    // recursively?\n\n    if (userSimplificationsInListForm.length !== 0 && !_Find(cadr(p1), symbol(INTEGRAL))) {\n      originalexpanding = expanding;\n      expanding = false;\n\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"runUserDefinedSimplifications passed: \" + stack[tos - 1].toString());\n      }\n\n      Eval();\n\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"runUserDefinedSimplifications after eval no expanding: \" + stack[tos - 1].toString());\n      }\n\n      expanding = originalexpanding;\n      p1 = stack[tos - 1];\n\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"patterns to be checked: \");\n      }\n\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        eachSimplification = userSimplificationsInListForm[l1];\n\n        if (DEBUG_SIMPLIFY) {\n          console.log(\"...\" + eachSimplification);\n        }\n      }\n\n      atLeastOneSuccessInRouldOfRulesApplications = true;\n      numberOfRulesApplications = 0;\n\n      while (atLeastOneSuccessInRouldOfRulesApplications && numberOfRulesApplications < MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        atLeastOneSuccessInRouldOfRulesApplications = false;\n        numberOfRulesApplications++;\n\n        for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n          eachSimplification = userSimplificationsInListForm[m1];\n          success = true;\n          eachConsecutiveRuleApplication = 0;\n\n          while (success && eachConsecutiveRuleApplication < MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            eachConsecutiveRuleApplication++;\n\n            if (DEBUG_SIMPLIFY) {\n              console.log(\"simplify - tos: \" + tos + \" checking pattern: \" + eachSimplification + \" on: \" + p1);\n            }\n\n            push_symbol(NIL);\n            success = _transform(eachSimplification, true);\n\n            if (success) {\n              atLeastOneSuccessInRouldOfRulesApplications = true;\n            }\n\n            p1 = stack[tos - 1];\n\n            if (DEBUG_SIMPLIFY) {\n              console.log(\"p1 at this stage of simplification: \" + p1);\n            }\n          }\n\n          if (eachConsecutiveRuleApplication === MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            stop(\"maximum application of single transformation rule exceeded: \" + eachSimplification);\n          }\n        }\n      }\n\n      if (numberOfRulesApplications === MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        stop(\"maximum application of all transformation rules exceeded \");\n      }\n\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"METAX = \" + get_binding(symbol(METAX)));\n      }\n\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"METAA = \" + get_binding(symbol(METAA)));\n      }\n\n      if (DEBUG_SIMPLIFY) {\n        return console.log(\"METAB = \" + get_binding(symbol(METAB)));\n      }\n    }\n  }; // ------------------------\n\n\n  simplifyForCodeGeneration = function simplifyForCodeGeneration() {\n    save();\n    runUserDefinedSimplifications();\n    codeGen = true; // in \"codeGen\" mode we completely\n    // eval and simplify the function bodies\n    // because we really want to resolve all\n    // the variables indirections and apply\n    // all the simplifications we can.\n\n    simplify_main();\n    codeGen = false;\n    return restore();\n  };\n\n  simplify = function simplify() {\n    save();\n    simplify_main();\n    return restore();\n  };\n\n  simplify_main = function simplify_main() {\n    var args, fbody;\n    p1 = pop(); // when we do code generation, we proceed to\n    // fully evaluate and simplify the body of\n    // a function, so we resolve all variables\n    // indirections and we simplify everything\n    // we can given the current assignments.\n\n    if (codeGen && car(p1) === symbol(FUNCTION)) {\n      fbody = cadr(p1);\n      push(fbody); // let's simplify the body so we give it a\n      // compact form\n\n      eval();\n      simplify();\n      p3 = pop(); // replace the evaled body\n\n      args = caddr(p1);\n      push_symbol(FUNCTION);\n      push(p3);\n      push(args);\n      list(3);\n      p1 = pop();\n    }\n\n    if (istensor(p1)) {\n      simplify_tensor();\n      return;\n    }\n\n    if (_Find(p1, symbol(FACTORIAL))) {\n      push(p1);\n      simfac();\n      p2 = pop();\n      push(p1);\n      rationalize();\n      simfac();\n      p3 = pop();\n\n      if (_count(p2) < _count(p3)) {\n        p1 = p2;\n      } else {\n        p1 = p3;\n      }\n    }\n\n    f10();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f10: \" + p1.toString());\n    }\n\n    f1();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f1: \" + p1.toString());\n    }\n\n    f2();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f2: \" + p1.toString());\n    }\n\n    f3();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f3: \" + p1.toString());\n    }\n\n    f4();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f4: \" + p1.toString());\n    }\n\n    f5();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f5: \" + p1.toString());\n    }\n\n    f9();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f9: \" + p1.toString());\n    }\n\n    simplify_polarRect();\n\n    if (do_simplify_nested_radicals) {\n      // if there is some de-nesting then\n      // re-run a simplification because\n      // the shape of the expression might\n      // have changed significantly.\n      // e.g. simplify(14^(1/2) - (16 - 4*7^(1/2))^(1/2))\n      // needs some more semplification after the de-nesting.\n      if (simplify_nested_radicals()) {\n        if (DEBUG_SIMPLIFY) {\n          console.log(\"de-nesting successful into: \" + p1.toString());\n        }\n\n        push(p1);\n        simplify();\n        return;\n      }\n    }\n\n    simplify_rectToClock();\n    simplify_rational_expressions();\n    return push(p1);\n  };\n\n  simplify_tensor = function simplify_tensor() {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1.tensor.elem[i]);\n      simplify();\n      p2.tensor.elem[i] = pop();\n    }\n\n    check_tensor_dimensions(p2);\n\n    if (isZeroAtomOrTensor(p2)) {\n      p2 = zero; // null tensor becomes scalar zero\n    }\n\n    return push(p2);\n  }; // try rationalizing\n\n\n  f1 = function f1() {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n\n    push(p1);\n    rationalize();\n    p2 = pop();\n\n    if (_count(p2) < _count(p1)) {\n      return p1 = p2;\n    }\n  }; // try condensing\n\n\n  f2 = function f2() {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n\n    push(p1);\n    Condense();\n    p2 = pop();\n\n    if (_count(p2) <= _count(p1)) {\n      return p1 = p2;\n    }\n  }; // this simplifies forms like (A-B) / (B-A)\n\n\n  f3 = function f3() {\n    push(p1);\n    rationalize();\n    negate();\n    rationalize();\n    negate();\n    rationalize();\n    p2 = pop();\n\n    if (_count(p2) < _count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f10 = function f10() {\n    var a, b, carp1, miao, originalexpanding;\n    carp1 = car(p1);\n    miao = cdr(p1);\n\n    if (carp1 === symbol(MULTIPLY) || isinnerordot(p1)) {\n      // both operands a transpose?\n      if (car(car(cdr(p1))) === symbol(TRANSPOSE) && car(car(cdr(cdr(p1)))) === symbol(TRANSPOSE)) {\n        if (DEBUG_SIMPLIFY) {\n          console.log(\"maybe collecting a transpose \" + p1);\n        }\n\n        a = cadr(car(cdr(p1)));\n        b = cadr(car(cdr(cdr(p1))));\n\n        if (carp1 === symbol(MULTIPLY)) {\n          push(a);\n          push(b);\n          multiply();\n        } else if (isinnerordot(p1)) {\n          push(b);\n          push(a);\n\n          _inner();\n        }\n\n        push_integer(1);\n        push_integer(2);\n        originalexpanding = expanding;\n        expanding = false;\n\n        _transpose();\n\n        expanding = originalexpanding;\n        p2 = pop();\n\n        if (_count(p2) < _count(p1)) {\n          p1 = p2;\n        }\n\n        if (DEBUG_SIMPLIFY) {\n          return console.log(\"collecting a transpose \" + p2);\n        }\n      }\n    }\n  }; // try expanding denominators\n\n\n  f4 = function f4() {\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    }\n\n    push(p1);\n    rationalize();\n    inverse();\n    rationalize();\n    inverse();\n    rationalize();\n    p2 = pop();\n\n    if (_count(p2) < _count(p1)) {\n      return p1 = p2;\n    }\n  }; // simplifies trig forms\n\n\n  simplify_trig = function simplify_trig() {\n    save();\n    p1 = pop();\n    f5();\n    push(p1);\n    return restore();\n  };\n\n  f5 = function f5() {\n    if (_Find(p1, symbol(SIN)) === 0 && _Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n\n    p2 = p1;\n    trigmode = 1;\n    push(p2);\n    Eval();\n    p3 = pop();\n    trigmode = 2;\n    push(p2);\n    Eval();\n    p4 = pop();\n    trigmode = 0;\n\n    if (_count(p4) < _count(p3) || nterms(p4) < nterms(p3)) {\n      p3 = p4;\n    }\n\n    if (_count(p3) < _count(p1) || nterms(p3) < nterms(p1)) {\n      return p1 = p3;\n    }\n  }; // if it's a sum then try to simplify each term\n\n\n  f9 = function f9() {\n    var oldp1, oldp2;\n\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n\n    push_integer(0);\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      push(car(p2));\n      simplify();\n      add();\n      oldp1 = p1;\n      oldp2 = p2;\n      p1 = pop();\n      simplify_rational_expressions();\n      push(p1);\n      p1 = oldp1;\n      p2 = oldp2;\n      p2 = cdr(p2);\n    }\n\n    p2 = pop();\n\n    if (_count(p2) < _count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_rational_expressions = function simplify_rational_expressions() {\n    var denom, num, polyVar, sasa, theGCD;\n    push(p1);\n\n    _denominator();\n\n    denom = pop();\n\n    if (isone(denom)) {\n      return;\n    }\n\n    push(p1);\n\n    _numerator();\n\n    num = pop();\n\n    if (isone(num)) {\n      return;\n    }\n\n    if (!(polyVar = areunivarpolysfactoredorexpandedform(num, denom))) {\n      return;\n    }\n\n    push(num);\n    push(denom);\n    gcd();\n    push(polyVar);\n    factor();\n    theGCD = pop(); // if there are no common factors then\n    // bail\n\n    if (isone(theGCD)) {\n      return;\n    }\n\n    push(num);\n    push(polyVar);\n    factor();\n    push(theGCD); //divide()\n\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    push(denom);\n    push(polyVar);\n    factor();\n    push(theGCD); //divide()\n\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    divide(); //simplify()\n\n    Condense();\n    sasa = stack[tos - 1].toString();\n    p2 = pop();\n\n    if (_count(p2) < _count(p1)) {\n      return p1 = p2;\n    }\n  }; // things like 6*(cos(2/9*pi)+i*sin(2/9*pi))\n  // where we have sin and cos, those might start to\n  // look better in clock form i.e.  6*(-1)^(2/9) \n\n\n  simplify_rectToClock = function simplify_rectToClock() {\n    //debugger\n    if (_Find(p1, symbol(SIN)) === 0 && _Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n\n    push(p1);\n    Eval();\n    clockform();\n    p2 = pop();\n\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"before simplification clockform: \" + p1 + \" after: \" + p2);\n    }\n\n    if (_count(p2) < _count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_polarRect = function simplify_polarRect() {\n    push(p1);\n\n    _polarRectAMinusOneBase();\n\n    Eval();\n    p2 = pop();\n\n    if (_count(p2) < _count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  _polarRectAMinusOneBase = function polarRectAMinusOneBase() {\n    var h;\n    save();\n    p1 = pop();\n\n    if (isimaginaryunit(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    if (equal(car(p1), symbol(POWER)) && isminusone(cadr(p1))) {\n      // base we just said is minus 1\n      push(one);\n      negate(); // exponent\n\n      push(caddr(p1));\n\n      _polarRectAMinusOneBase();\n\n      power(); // try to simplify it using polar and rect\n\n      polar();\n\n      _rect();\n    } else if (iscons(p1)) {\n      h = tos;\n\n      while (iscons(p1)) {\n        //console.log(\"recursing on: \" + car(p1).toString())\n        push(car(p1));\n\n        _polarRectAMinusOneBase(); //console.log(\"...transformed into: \" + stack[tos-1].toString())\n\n\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n\n    restore();\n  };\n\n  nterms = function nterms(p) {\n    if (car(p) !== symbol(ADD)) {\n      return 1;\n    } else {\n      return length(p) - 1;\n    }\n  };\n\n  simplify_nested_radicals = function simplify_nested_radicals() {\n    var prev_expanding, simplificationWithCondense, simplificationWithoutCondense, somethingSimplified;\n\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n\n      return false;\n    }\n\n    push(p1);\n    somethingSimplified = _take_care_of_nested_radicals(); // in this paragraph we check whether we can collect\n    // common factors without complicating the expression\n    // in particular we want to avoid \n    // collecting radicals like in this case where\n    // we collect sqrt(2):\n    //   2-2^(1/2) into 2^(1/2)*(-1+2^(1/2))\n    // but we do like to collect other non-radicals e.g.\n    //   17/2+3/2*5^(1/2) into 1/2*(17+3*5^(1/2))\n    // so what we do is we count the powers and we check\n    // which version has the least number of them.\n\n    simplificationWithoutCondense = stack[tos - 1];\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    simplificationWithCondense = pop(); //console.log(\"occurrences of powers in \" + simplificationWithoutCondense + \" :\" + countOccurrencesOfSymbol(symbol(POWER),simplificationWithoutCondense))\n    //console.log(\"occurrences of powers in \" + simplificationWithCondense + \" :\" + countOccurrencesOfSymbol(symbol(POWER),simplificationWithCondense))\n\n    if (_countOccurrencesOfSymbol(symbol(POWER), simplificationWithoutCondense) < _countOccurrencesOfSymbol(symbol(POWER), simplificationWithCondense)) {\n      push(simplificationWithoutCondense);\n    } else {\n      push(simplificationWithCondense);\n    } // we got out result, wrap up\n\n\n    p1 = pop();\n    return somethingSimplified;\n  };\n\n  _take_care_of_nested_radicals = function take_care_of_nested_radicals() {\n    var A, B, C, SOLUTION, anyRadicalSimplificationWorked, base, checkSize, commonBases, commonInnerExponent, countingTerms, eachSolution, exponent, firstTerm, h, i, innerbase, innerexponent, l1, len, len1, len2, len3, lowercase_a, lowercase_b, m1, n1, numberOfTerms, o1, possibleNewExpression, possibleNewExpressionValue, possibleRationalSolutions, possibleSolutions, potentialPower, realOfpossibleRationalSolutions, ref2, secondTerm, secondTermFactor, termsThatAreNotPowers, whichRationalSolution;\n\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n\n      return false;\n    }\n\n    save();\n    p1 = pop(); //console.log(\"take_care_of_nested_radicals p1: \" + p1.toString())\n\n    if (equal(car(p1), symbol(POWER))) {\n      //console.log(\"ok it's a power \")\n      base = cadr(p1);\n      exponent = caddr(p1);\n\n      if (!isminusone(exponent) && equal(car(base), symbol(ADD)) && isfraction(exponent) && (equalq(exponent, 1, 3) || equalq(exponent, 1, 2))) {\n        //console.log(\"ok there is a radix with a term inside\")\n        firstTerm = cadr(base);\n        push(firstTerm);\n\n        _take_care_of_nested_radicals();\n\n        pop();\n        secondTerm = caddr(base);\n        push(secondTerm);\n\n        _take_care_of_nested_radicals();\n\n        pop(); //console.log(\"possible double radical term1: \" + firstTerm)\n        //console.log(\"possible double radical term2: \" + secondTerm)\n\n        numberOfTerms = 0;\n        countingTerms = base;\n\n        while (cdr(countingTerms) !== symbol(NIL)) {\n          numberOfTerms++;\n          countingTerms = cdr(countingTerms);\n        } //console.log(\"number of terms: \" + numberOfTerms)\n\n\n        if (numberOfTerms > 2) {\n          //console.log(\"too many terms under outer radix \")\n          push(p1);\n          restore();\n          return false;\n        } // list here all the factors\n\n\n        commonInnerExponent = null;\n        commonBases = [];\n        termsThatAreNotPowers = [];\n\n        if (car(secondTerm) === symbol(MULTIPLY)) {\n          // product of factors\n          secondTermFactor = cdr(secondTerm);\n\n          if (iscons(secondTermFactor)) {\n            while (iscons(secondTermFactor)) {\n              //console.log(\"second term factor BIS: \" + car(secondTermFactor).toString())\n              potentialPower = car(secondTermFactor);\n\n              if (car(potentialPower) === symbol(POWER)) {\n                innerbase = cadr(potentialPower);\n                innerexponent = caddr(potentialPower);\n\n                if (equalq(innerexponent, 1, 2)) {\n                  if (commonInnerExponent == null) {\n                    commonInnerExponent = innerexponent;\n                    commonBases.push(innerbase);\n                  } else {\n                    if (equal(innerexponent, commonInnerExponent)) {\n                      //console.log(\"common base: \" + innerbase.toString())\n                      commonBases.push(innerbase);\n                    } else {}\n                  }\n                }\n              } else {\n                //console.log(\"no common bases here \")\n                //console.log(\"this one is a power base: \" + innerbase + \" , exponent: \" + innerexponent)\n                termsThatAreNotPowers.push(potentialPower);\n              }\n\n              secondTermFactor = cdr(secondTermFactor);\n            }\n          }\n        } else if (car(secondTerm) === symbol(POWER)) {\n          innerbase = cadr(secondTerm);\n          innerexponent = caddr(secondTerm);\n\n          if (commonInnerExponent == null && equalq(innerexponent, 1, 2)) {\n            //console.log(\"tackling double radical 2: \" + p1.toString())\n            commonInnerExponent = innerexponent;\n            commonBases.push(innerbase);\n          }\n        }\n\n        if (commonBases.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n\n        A = firstTerm; //console.log(\"A: \" + A.toString())\n\n        push_integer(1);\n\n        for (l1 = 0, len = commonBases.length; l1 < len; l1++) {\n          i = commonBases[l1];\n          push(i);\n          multiply();\n        } //console.log(\"basis with common exponent: \" + i.toString())\n\n\n        C = pop(); //console.log(\"C: \" + C.toString())\n\n        push_integer(1);\n\n        for (m1 = 0, len1 = termsThatAreNotPowers.length; m1 < len1; m1++) {\n          i = termsThatAreNotPowers[m1];\n          push(i);\n          multiply();\n        } //console.log(\"terms that are not powers: \" + i.toString())\n\n\n        B = pop(); //console.log(\"B: \" + B.toString())\n\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          negate();\n          push(C);\n          multiply();\n          push(B);\n          divide(); // 4th coeff\n          //console.log(\"constant coeff \" + stack[tos-1].toString())\n\n          checkSize = pop();\n          push(checkSize);\n          real();\n\n          _yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize);\n          push_integer(3);\n          push(C);\n          multiply(); // 3rd coeff\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n\n          checkSize = pop();\n          push(checkSize);\n          real();\n\n          _yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize);\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(-3);\n          push(A);\n          multiply();\n          push(B);\n          divide(); // 2nd coeff\n\n          checkSize = pop();\n          push(checkSize);\n          real();\n\n          _yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize); //console.log(\"next coeff \" + stack[tos-1].toString())\n\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push_integer(1); // 1st coeff\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          multiply();\n          add();\n          add();\n          add();\n        } else if (equalq(exponent, 1, 2)) {\n          push(C); // 3th coeff\n\n          checkSize = pop();\n          push(checkSize);\n          real();\n\n          _yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize); //console.log(\"constant coeff \" + stack[tos-1].toString())\n\n          push_integer(-2);\n          push(A);\n          multiply();\n          push(B);\n          divide(); // 2nd coeff\n\n          checkSize = pop();\n          push(checkSize);\n          real();\n\n          _yyfloat();\n\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n\n          push(checkSize); //console.log(\"next coeff \" + stack[tos-1].toString())\n\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(1); // 1st coeff\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n        } //console.log(\"whole polynomial: \" + stack[tos-1].toString())\n\n\n        push(symbol(SECRETX));\n        recursionLevelNestedRadicalsRemoval++; //console.log(\"invoking roots at recursion level: \" + recursionLevelNestedRadicalsRemoval)\n\n        roots();\n        recursionLevelNestedRadicalsRemoval--;\n\n        if (equal(stack[tos - 1], symbol(NIL))) {\n          if (DEBUG_SIMPLIFY) {\n            console.log(\"roots bailed out because of too much recursion\");\n          }\n\n          pop();\n          push(p1);\n          restore();\n          return false;\n        } //console.log(\"all solutions: \" + stack[tos-1].toString())\n        // exclude the solutions with radicals\n\n\n        possibleSolutions = [];\n        ref2 = stack[tos - 1].tensor.elem;\n\n        for (n1 = 0, len2 = ref2.length; n1 < len2; n1++) {\n          eachSolution = ref2[n1];\n\n          if (!_Find(eachSolution, symbol(POWER))) {\n            possibleSolutions.push(eachSolution);\n          }\n        }\n\n        pop(); // popping the tensor with the solutions\n        //console.log(\"possible solutions: \" + possibleSolutions.toString())\n\n        if (possibleSolutions.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n\n        possibleRationalSolutions = [];\n        realOfpossibleRationalSolutions = []; //console.log(\"checking the one with maximum real part \")\n\n        for (o1 = 0, len3 = possibleSolutions.length; o1 < len3; o1++) {\n          i = possibleSolutions[o1];\n          push(i);\n          real();\n\n          _yyfloat();\n\n          possibleRationalSolutions.push(i);\n          realOfpossibleRationalSolutions.push(pop().d);\n        }\n\n        whichRationalSolution = realOfpossibleRationalSolutions.indexOf(Math.max.apply(Math, realOfpossibleRationalSolutions));\n        SOLUTION = possibleRationalSolutions[whichRationalSolution]; //console.log(\"picked solution: \" + SOLUTION)\n\n        /*\n        #possibleNewExpressions = []\n        #realOfPossibleNewExpressions = []\n         * pick the solution which cubic root has no radicals\n        lowercase_b = null\n        for SOLUTION in possibleSolutions\n          console.log(\"testing solution: \" + SOLUTION.toString())\n           debugger\n          if equalq(exponent,1,3)\n            push(A)\n            push(SOLUTION)\n            push_integer(3)\n            power()\n            push_integer(3)\n            push(C)\n            multiply()\n            push(SOLUTION)\n            multiply()\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,3)\n            power()\n          else if equalq(exponent,1,2)\n            push(A)\n            push(SOLUTION)\n            push_integer(2)\n            power()\n            push(C)\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,2)\n            power()\n          console.log(\"b is: \" + stack[tos-1].toString())\n           lowercase_b = pop()\n           if !Find(lowercase_b, symbol(POWER))\n            break\n         */\n\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(3);\n          power();\n          push_integer(3);\n          push(C);\n          multiply();\n          push(SOLUTION);\n          multiply();\n          add();\n          divide(); //console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n\n          push_rational(1, 3);\n          power();\n        } else if (equalq(exponent, 1, 2)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(2);\n          power();\n          push(C);\n          add();\n          divide(); //console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n\n          push_rational(1, 2);\n          power();\n        } //console.log(\"b is: \" + stack[tos-1].toString())\n\n\n        lowercase_b = pop();\n\n        if (lowercase_b == null) {\n          push(p1);\n          restore();\n          return false;\n        }\n\n        push(lowercase_b);\n        push(SOLUTION);\n        multiply();\n\n        if (equalq(exponent, 1, 3)) {\n          //console.log(\"a is: \" + stack[tos-1].toString())\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n        } else if (equalq(exponent, 1, 2)) {\n          //console.log(\"a could be: \" + stack[tos-1].toString())\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n          possibleNewExpression = pop(); //console.log(\"verifying if  \" + possibleNewExpression + \" is positive\")\n\n          push(possibleNewExpression);\n          real();\n\n          _yyfloat();\n\n          possibleNewExpressionValue = pop();\n\n          if (!isnegativenumber(possibleNewExpressionValue)) {\n            //console.log(\"... it is positive\")\n            push(possibleNewExpression);\n          } else {\n            //console.log(\"... it is NOT positive\")\n            push(lowercase_b);\n            negate();\n            lowercase_b = pop();\n            push(lowercase_a);\n            negate();\n            lowercase_a = pop();\n            push(lowercase_b);\n            push(C);\n            push_rational(1, 2);\n            power();\n            multiply();\n            push(lowercase_a);\n            add();\n            simplify();\n          }\n        } // possibleNewExpression is now at top of stack\n        //console.log(\"potential new expression: \" + stack[tos-1].toString())\n\n\n        p1 = pop(); //newExpression = pop()\n        //debugger\n        //push(newExpression)\n        //real()\n        //yyfloat()\n        //possibleNewExpressions.push(newExpression)\n        //realOfPossibleNewExpressions.push(pop().d)\n        //whichExpression = realOfPossibleNewExpressions.indexOf(Math.max.apply(Math, realOfPossibleNewExpressions))\n        //p1 = possibleNewExpressions[whichExpression]\n        //console.log(\"final new expression: \" + p1.toString())\n\n        push(p1);\n        restore();\n        return true;\n      } else {\n        push(p1);\n        restore();\n        return false;\n      }\n    } else if (iscons(p1)) {\n      h = tos;\n      anyRadicalSimplificationWorked = false;\n\n      while (iscons(p1)) {\n        //console.log(\"recursing on: \" + car(p1).toString())\n        push(car(p1));\n        anyRadicalSimplificationWorked = anyRadicalSimplificationWorked || _take_care_of_nested_radicals(); //console.log(\"...transformed into: \" + stack[tos-1].toString())\n\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      restore();\n      return anyRadicalSimplificationWorked;\n    } else {\n      push(p1);\n      restore();\n      return false;\n    }\n\n    throw new Error(\"control flow should never reach here\");\n  }; // Sine function of numerical and symbolic arguments\n\n\n  Eval_sin = function Eval_sin() {\n    //console.log \"sin ---- \"\n    push(cadr(p1));\n    Eval();\n    return sine();\n  }; //console.log \"sin end ---- \"\n\n\n  sine = function sine() {\n    //console.log \"sine ---- \"\n    save();\n    p1 = pop();\n\n    if (car(p1) === symbol(ADD)) {\n      // sin of a sum can be further decomposed into\n      //sin(alpha+beta) = sin(alpha)*cos(beta)+sin(beta)*cos(alpha)\n      sine_of_angle_sum();\n    } else {\n      sine_of_angle();\n    }\n\n    return restore();\n  }; //console.log \"sine end ---- \"\n  // Use angle sum formula for special angles.\n  //define A p3\n  //define B p4\n  // decompose sum sin(alpha+beta) into\n  // sin(alpha)*cos(beta)+sin(beta)*cos(alpha)\n\n\n  sine_of_angle_sum = function sine_of_angle_sum() {\n    //console.log \"sin of angle sum ---- \"\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      p4 = car(p2);\n\n      if (isnpi(p4)) {\n        // p4 is B\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        sine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        cosine();\n        push(p4);\n        sine();\n        multiply();\n        add();\n        return;\n      } //console.log \"sin of angle sum end ---- \"\n\n\n      p2 = cdr(p2);\n    }\n\n    return sine_of_angle();\n  }; //console.log \"sin of angle sum end ---- \"\n\n\n  sine_of_angle = function sine_of_angle() {\n    var d, n;\n\n    if (car(p1) === symbol(ARCSIN)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.sin(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    } // sine function is antisymmetric, sin(-x) = -sin(x)\n\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      sine();\n      negate();\n      return;\n    } // sin(arctan(x)) = x / sqrt(1 + x^2)\n    // see p. 173 of the CRC Handbook of Mathematical Sciences\n\n\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      multiply();\n      return;\n    } // multiply by 180/pi to go from radians to degrees.\n    // we go from radians to degrees because it's much\n    // easier to calculate symbolic results of most (not all) \"classic\"\n    // angles (e.g. 30,45,60...) if we calculate the degrees\n    // and the we do a switch on that.\n    // Alternatively, we could look at the fraction of pi\n    // (e.g. 60 degrees is 1/3 pi) but that's more\n    // convoluted as we'd need to look at both numerator and\n    // denominator.\n\n\n    push(p1);\n    push_integer(180);\n    multiply();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    divide();\n    n = pop_integer(); // most \"good\" (i.e. compact) trigonometric results\n    // happen for a round number of degrees. There are some exceptions\n    // though, e.g. 22.5 degrees, which we don't capture here.\n\n    if (n < 0 || isNaN(n)) {\n      push(symbol(SIN));\n      push(p1);\n      list(2);\n      return;\n    } // values of some famous angles. Many more here:\n    // https://en.wikipedia.org/wiki/Trigonometric_constants_expressed_in_real_radicals\n\n\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n\n      case 30:\n      case 150:\n        return push_rational(1, 2);\n\n      case 210:\n      case 330:\n        return push_rational(-1, 2);\n\n      case 45:\n      case 135:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 225:\n      case 315:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 60:\n      case 120:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 240:\n      case 300:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 90:\n        return push_integer(1);\n\n      case 270:\n        return push_integer(-1);\n\n      default:\n        push(symbol(SIN));\n        push(p1);\n        return list(2);\n    }\n  }; //            exp(x) - exp(-x)\n  //  sinh(x) = ----------------\n  //                   2\n\n\n  Eval_sinh = function Eval_sinh() {\n    push(cadr(p1));\n    Eval();\n    return ysinh();\n  };\n\n  ysinh = function ysinh() {\n    save();\n    yysinh();\n    return restore();\n  };\n\n  yysinh = function yysinh() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCSINH)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.sinh(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n\n    push_symbol(SINH);\n    push(p1);\n    return list(2);\n  };\n\n  _subst = function subst() {\n    var expr, i, l1, m1, newExpr, newTensor, oldExpr, ref2, ref3;\n    save();\n    newExpr = pop();\n    oldExpr = pop();\n\n    if (oldExpr === symbol(NIL) || newExpr === symbol(NIL)) {\n      restore();\n      return;\n    }\n\n    expr = pop();\n\n    if (istensor(expr)) {\n      newTensor = alloc_tensor(expr.tensor.nelem);\n      newTensor.tensor.ndim = expr.tensor.ndim;\n\n      for (i = l1 = 0, ref2 = expr.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        newTensor.tensor.dim[i] = expr.tensor.dim[i];\n      }\n\n      for (i = m1 = 0, ref3 = expr.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n        push(expr.tensor.elem[i]);\n        push(oldExpr);\n        push(newExpr);\n\n        _subst();\n\n        newTensor.tensor.elem[i] = pop();\n        check_tensor_dimensions(newTensor);\n      }\n\n      push(newTensor);\n    } else if (equal(expr, oldExpr)) {\n      push(newExpr);\n    } else if (iscons(expr)) {\n      push(car(expr));\n      push(oldExpr);\n      push(newExpr);\n\n      _subst();\n\n      push(cdr(expr));\n      push(oldExpr);\n      push(newExpr);\n\n      _subst();\n\n      cons();\n    } else {\n      push(expr);\n    }\n\n    return restore();\n  }; // 'sum' function\n  //define A p3\n  //define B p4\n  //define I p5\n  //define X p6\n  // leaves the sum at the top of the stack\n\n\n  Eval_sum = function Eval_sum() {\n    var body, i, indexVariable, j, k, l1, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0; // 1st arg\n\n    body = cadr(p1); // 2nd arg (index)\n\n    indexVariable = caddr(p1);\n\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    } // 3rd arg (lower limit)\n\n\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    } // 4th arg (upper limit)\n\n\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    } // remember contents of the index\n    // variable so we can put it back after the loop\n\n\n    p4 = get_binding(indexVariable);\n    push_integer(0);\n\n    for (i = l1 = ref2 = j, ref3 = k; ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n      add();\n    } // put back the index variable to original content\n\n\n    return set_binding(indexVariable, p4);\n  }; // Tangent function of numerical and symbolic arguments\n\n\n  Eval_tan = function Eval_tan() {\n    push(cadr(p1));\n    Eval();\n    return tangent();\n  };\n\n  tangent = function tangent() {\n    save();\n    yytangent();\n    return restore();\n  };\n\n  yytangent = function yytangent() {\n    var d, n;\n    n = 0;\n    d = 0.0;\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.tan(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    } // tan function is antisymmetric, tan(-x) = -tan(x)\n\n\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      tangent();\n      negate();\n      return;\n    } // multiply by 180/pi to go from radians to degrees.\n    // we go from radians to degrees because it's much\n    // easier to calculate symbolic results of most (not all) \"classic\"\n    // angles (e.g. 30,45,60...) if we calculate the degrees\n    // and the we do a switch on that.\n    // Alternatively, we could look at the fraction of pi\n    // (e.g. 60 degrees is 1/3 pi) but that's more\n    // convoluted as we'd need to look at both numerator and\n    // denominator.\n\n\n    push(p1);\n    push_integer(180);\n    multiply();\n\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n\n    divide();\n    n = pop_integer(); // most \"good\" (i.e. compact) trigonometric results\n    // happen for a round number of degrees. There are some exceptions\n    // though, e.g. 22.5 degrees, which we don't capture here.\n\n    if (n < 0 || isNaN(n)) {\n      push(symbol(TAN));\n      push(p1);\n      list(2);\n      return;\n    }\n\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n\n      case 30:\n      case 210:\n        push_rational(1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 150:\n      case 330:\n        push_rational(-1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n\n      case 45:\n      case 225:\n        return push_integer(1);\n\n      case 135:\n      case 315:\n        return push_integer(-1);\n\n      case 60:\n      case 240:\n        push_integer(3);\n        push_rational(1, 2);\n        return power();\n\n      case 120:\n      case 300:\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return negate();\n\n      default:\n        push(symbol(TAN));\n        push(p1);\n        return list(2);\n    }\n  }; //             exp(2 x) - 1\n  //  tanh(x) = --------------\n  //             exp(2 x) + 1\n\n\n  Eval_tanh = function Eval_tanh() {\n    var d;\n    d = 0.0;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n\n    if (car(p1) === symbol(ARCTANH)) {\n      push(cadr(p1));\n      return;\n    }\n\n    if (isdouble(p1)) {\n      d = Math.tanh(p1.d);\n\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n\n      push_double(d);\n      return;\n    }\n\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n\n    push_symbol(TANH);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_taylor = function Eval_taylor() {\n    // 1st arg\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval(); // 2nd arg\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    } // 3rd arg\n\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(24); // default number of terms\n    } else {\n      push(p2);\n    } // 4th arg\n\n\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n\n    if (p2 === symbol(NIL)) {\n      push_integer(0); // default expansion point\n    } else {\n      push(p2);\n    }\n\n    return taylor();\n  }; //define F p1\n  //define X p2\n  //define N p3\n  //define A p4\n  //define C p5\n\n\n  taylor = function taylor() {\n    var i, k, l1, ref2;\n    i = 0;\n    k = 0;\n    save();\n    p4 = pop();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p3);\n    k = pop_integer();\n\n    if (isNaN(k)) {\n      push_symbol(TAYLOR);\n      push(p1);\n      push(p2);\n      push(p3);\n      push(p4);\n      list(5);\n      restore();\n      return;\n    }\n\n    push(p1);\n    push(p2);\n    push(p4);\n\n    _subst();\n\n    Eval();\n    push_integer(1);\n    p5 = pop();\n\n    for (i = l1 = 1, ref2 = k; 1 <= ref2 ? l1 <= ref2 : l1 >= ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(p2);\n      derivative();\n      p1 = pop();\n\n      if (isZeroAtomOrTensor(p1)) {\n        break;\n      }\n\n      push(p5);\n      push(p2);\n      push(p4);\n      subtract();\n      multiply();\n      p5 = pop();\n      push(p1);\n      push(p2);\n      push(p4);\n\n      _subst();\n\n      Eval();\n      push(p5);\n      multiply();\n      push_integer(i);\n      factorial();\n      divide();\n      add();\n    }\n\n    return restore();\n  }; //(docs are generated from top-level comments, keep an eye on the formatting!)\n\n  /* tensor =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   General description\n  -------------------\n  Tensors are a strange in-between of matrices and \"computer\"\n  rectangular data structures.\n   Tensors, unlike matrices, and like rectangular data structures,\n  can have an arbitrary number of dimensions (rank), although a tensor with\n  rank zero is just a scalar.\n   Tensors, like matrices and unlike many computer rectangular data structures,\n  must be \"contiguous\" i.e. have no empty spaces within its size, and \"uniform\",\n  i.e. each element must have the same shape and hence the same rank.\n   Also tensors have necessarily to make a distinction between row vectors,\n  column vectors (which have a rank of 2) and uni-dimensional vectors (rank 1).\n  They look very similar but they are fundamentally different.\n   Tensors are 1-indexed, as per general math notation, and like Fortran,\n  Lua, Mathematica, SASL, MATLAB, Julia, Erlang and APL.\n   Tensors with elements that are also tensors get promoted to a higher rank\n  , this is so we can represent and get the rank of a matrix correctly.\n  Example:\n  Start with a tensor of rank 1 with 2 elements (i.e. shape: 2)\n  if you put in both its elements another 2 tensors\n  of rank 1 with 2 elements (i.e. shape: 2)\n  then the result is a tensor of rank 2 with shape 2,2\n  i.e. the dimension of a tensor at all times must be\n  the number of nested tensors in it.\n  Also, all tensors must be \"uniform\" i.e. they must be accessed\n  uniformly, which means that all existing elements of a tensor\n  must be contiguous and have the same shape.\n  Implication of it all is that you can't put arbitrary\n  tensors inside tensors (like you would do to represent block matrices)\n  Rather, all tensors inside tensors must have same shape (and hence, rank)\n   Limitations\n  -----------\n  n.a.\n   Implementation info\n  -------------------\n  Tensors are implemented...\n   */\n  // Called from the \"eval\" module to evaluate tensor elements.\n  // p1 points to the tensor operand.\n\n\n  Eval_tensor = function Eval_tensor() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0; //U **a, **b\n    //---------------------------------------------------------------------\n    //  create a new tensor for the result\n    //---------------------------------------------------------------------\n\n    check_tensor_dimensions(p1);\n    nelem = p1.tensor.nelem;\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    } //---------------------------------------------------------------------\n    //  b = Eval(a)\n    //---------------------------------------------------------------------\n\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    check_tensor_dimensions(p2);\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      //console.log \"push/pop: pushing element a of \" + i\n      push(a[i]);\n      Eval(); //console.log \"push/pop: popping into element b of \" + i\n\n      b[i] = pop();\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2); //---------------------------------------------------------------------\n    //  push the result\n    //---------------------------------------------------------------------\n\n    push(p2);\n    return promote_tensor();\n  }; //-----------------------------------------------------------------------------\n  //  Add tensors\n  //  Input:    Operands on stack\n  //  Output:    Result on stack\n  //-----------------------------------------------------------------------------\n\n\n  tensor_plus_tensor = function tensor_plus_tensor() {\n    var a, b, c, i, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    ndim = 0;\n    nelem = 0; //U **a, **b, **c\n\n    save();\n    p2 = pop();\n    p1 = pop(); // are the dimension lists equal?\n\n    ndim = p1.tensor.ndim;\n\n    if (ndim !== p2.tensor.ndim) {\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] !== p2.tensor.dim[i]) {\n        push(symbol(NIL));\n        restore();\n        return;\n      }\n    } // create a new tensor for the result\n\n\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = m1 = 0, ref3 = ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    } // c = a + b\n\n\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n\n    for (i = n1 = 0, ref4 = nelem; 0 <= ref4 ? n1 < ref4 : n1 > ref4; i = 0 <= ref4 ? ++n1 : --n1) {\n      push(a[i]);\n      push(b[i]);\n      add();\n      c[i] = pop();\n    } // push the result\n\n\n    push(p3);\n    return restore();\n  }; //-----------------------------------------------------------------------------\n  //  careful not to reorder factors\n  //-----------------------------------------------------------------------------\n\n\n  tensor_times_scalar = function tensor_times_scalar() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0; //U **a, **b\n\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      multiply();\n      b[i] = pop();\n    }\n\n    push(p3);\n    return restore();\n  };\n\n  scalar_times_tensor = function scalar_times_tensor() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0; //U **a, **b\n\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p2.tensor.ndim;\n    nelem = p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p2.tensor.dim[i];\n    }\n\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n      push(a[i]);\n      multiply();\n      b[i] = pop();\n    }\n\n    push(p3);\n    return restore();\n  };\n\n  check_tensor_dimensions = function check_tensor_dimensions(p) {\n    if (p.tensor.nelem !== p.tensor.elem.length) {\n      console.log(\"something wrong in tensor dimensions\");\n      debugger;\n    }\n  };\n\n  is_square_matrix = function is_square_matrix(p) {\n    if (istensor(p) && p.tensor.ndim === 2 && p.tensor.dim[0] === p.tensor.dim[1]) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }; //-----------------------------------------------------------------------------\n  //  gradient of tensor\n  //-----------------------------------------------------------------------------\n\n\n  d_tensor_tensor = function d_tensor_tensor() {\n    var a, b, c, i, j, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    ndim = 0;\n    nelem = 0; //U **a, **b, **c\n\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n\n    if (ndim + 1 >= MAXDIM) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    p3 = alloc_tensor(nelem * p2.tensor.nelem);\n    p3.tensor.ndim = ndim + 1;\n\n    for (i = l1 = 0, ref2 = ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    p3.tensor.dim[ndim] = p2.tensor.dim[0];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      for (j = n1 = 0, ref4 = p2.tensor.nelem; 0 <= ref4 ? n1 < ref4 : n1 > ref4; j = 0 <= ref4 ? ++n1 : --n1) {\n        push(a[i]);\n        push(b[j]);\n        derivative();\n        c[i * p2.tensor.nelem + j] = pop();\n      }\n    }\n\n    return push(p3);\n  }; //-----------------------------------------------------------------------------\n  //  gradient of scalar\n  //-----------------------------------------------------------------------------\n\n\n  d_scalar_tensor = function d_scalar_tensor() {\n    var a, b, i, l1, ref2; //U **a, **b\n\n    p3 = alloc_tensor(p2.tensor.nelem);\n    p3.tensor.ndim = 1;\n    p3.tensor.dim[0] = p2.tensor.dim[0];\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = l1 = 0, ref2 = p2.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(a[i]);\n      derivative();\n      b[i] = pop();\n    }\n\n    return push(p3);\n  }; //-----------------------------------------------------------------------------\n  //  Derivative of tensor\n  //-----------------------------------------------------------------------------\n\n\n  d_tensor_scalar = function d_tensor_scalar() {\n    var a, b, i, l1, m1, ref2, ref3;\n    i = 0; //U **a, **b\n\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      derivative();\n      b[i] = pop();\n    }\n\n    return push(p3);\n  };\n\n  compare_tensors = function compare_tensors(p1, p2) {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n\n    if (p1.tensor.ndim < p2.tensor.ndim) {\n      return -1;\n    }\n\n    if (p1.tensor.ndim > p2.tensor.ndim) {\n      return 1;\n    }\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n        return -1;\n      }\n\n      if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n        return 1;\n      }\n    }\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      if (equal(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        continue;\n      }\n\n      if (lessp(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n\n    return 0;\n  }; //-----------------------------------------------------------------------------\n  //  Raise a tensor to a power\n  //  Input:    p1  tensor\n  //      p2  exponent\n  //  Output:    Result on stack\n  //-----------------------------------------------------------------------------\n\n\n  power_tensor = function power_tensor() {\n    var i, k, l1, m1, n, ref2, ref3, results;\n    i = 0;\n    k = 0;\n    n = 0; // first and last dims must be equal\n\n    k = p1.tensor.ndim - 1;\n\n    if (p1.tensor.dim[0] !== p1.tensor.dim[k]) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    push(p2);\n    n = pop_integer();\n\n    if (isNaN(n)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n\n    if (n === 0) {\n      if (p1.tensor.ndim !== 2) {\n        stop(\"power(tensor,0) with tensor rank not equal to 2\");\n      }\n\n      n = p1.tensor.dim[0];\n      p1 = alloc_tensor(n * n);\n      p1.tensor.ndim = 2;\n      p1.tensor.dim[0] = n;\n      p1.tensor.dim[1] = n;\n\n      for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        p1.tensor.elem[n * i + i] = one;\n      }\n\n      check_tensor_dimensions(p1);\n      push(p1);\n      return;\n    }\n\n    if (n < 0) {\n      n = -n;\n      push(p1);\n\n      _inv();\n\n      p1 = pop();\n    }\n\n    push(p1);\n    results = [];\n\n    for (i = m1 = 1, ref3 = n; 1 <= ref3 ? m1 < ref3 : m1 > ref3; i = 1 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n\n      _inner();\n\n      if (isZeroAtomOrTensor(stack[tos - 1])) {\n        break;\n      } else {\n        results.push(void 0);\n      }\n    }\n\n    return results;\n  };\n\n  copy_tensor = function copy_tensor() {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    save();\n    p1 = pop();\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[i];\n    }\n\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    push(p2);\n    return restore();\n  }; // Tensors with elements that are also tensors get promoted to a higher rank.\n\n\n  promote_tensor = function promote_tensor() {\n    var i, j, k, l1, m1, n1, ndim, nelem, o1, q1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    j = 0;\n    k = 0;\n    nelem = 0;\n    ndim = 0;\n    save();\n    p1 = pop();\n\n    if (!istensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    p2 = p1.tensor.elem[0];\n\n    for (i = l1 = 1, ref2 = p1.tensor.nelem; 1 <= ref2 ? l1 < ref2 : l1 > ref2; i = 1 <= ref2 ? ++l1 : --l1) {\n      if (!compatible(p2, p1.tensor.elem[i])) {\n        stop(\"Cannot promote tensor due to inconsistent tensor components.\");\n      }\n    }\n\n    if (!istensor(p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n\n    if (ndim > MAXDIM) {\n      stop(\"tensor rank > \" + MAXDIM);\n    }\n\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n\n    for (i = m1 = 0, ref3 = p1.tensor.ndim; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    for (j = n1 = 0, ref4 = p2.tensor.ndim; 0 <= ref4 ? n1 < ref4 : n1 > ref4; j = 0 <= ref4 ? ++n1 : --n1) {\n      p3.tensor.dim[i + j] = p2.tensor.dim[j];\n    }\n\n    k = 0;\n\n    for (i = o1 = 0, ref5 = p1.tensor.nelem; 0 <= ref5 ? o1 < ref5 : o1 > ref5; i = 0 <= ref5 ? ++o1 : --o1) {\n      p2 = p1.tensor.elem[i];\n\n      for (j = q1 = 0, ref6 = p2.tensor.nelem; 0 <= ref6 ? q1 < ref6 : q1 > ref6; j = 0 <= ref6 ? ++q1 : --q1) {\n        p3.tensor.elem[k++] = p2.tensor.elem[j];\n      }\n    }\n\n    check_tensor_dimensions(p2);\n    check_tensor_dimensions(p3);\n    push(p3);\n    return restore();\n  };\n\n  compatible = function compatible(p, q) {\n    var i, l1, ref2;\n\n    if (!istensor(p) && !istensor(q)) {\n      return 1;\n    }\n\n    if (!istensor(p) || !istensor(q)) {\n      return 0;\n    }\n\n    if (p.tensor.ndim !== q.tensor.ndim) {\n      return 0;\n    }\n\n    for (i = l1 = 0, ref2 = p.tensor.ndim; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p.tensor.dim[i] !== q.tensor.dim[i]) {\n        return 0;\n      }\n    }\n\n    return 1;\n  }; // If the number of args is odd then the last arg is the default result.\n  // Works like a switch statement. Could also be used for piecewise\n  // functions? TODO should probably be called \"switch\"?\n\n\n  Eval_test = function Eval_test() {\n    var checkResult, orig;\n    orig = p1;\n    p1 = cdr(p1);\n\n    while (iscons(p1)) {\n      // odd number of parameters means that the\n      // last argument becomes the default case\n      // i.e. the one without a test.\n      if (cdr(p1) === symbol(NIL)) {\n        push(car(p1));\n        Eval();\n        return;\n      }\n\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(p1));\n\n      if (checkResult == null) {\n        // we couldn't determine the result\n        // of a test. This means we can't conclude\n        // anything about the result of the\n        // overall test, so we must bail\n        // with the unevalled test\n        push(orig);\n        return;\n      } else if (checkResult) {\n        // test succesful, we found out output\n        push(cadr(p1));\n        Eval();\n        return;\n      } else {\n        // test unsuccessful, continue to the\n        // next pair of test,value\n        p1 = cddr(p1);\n      }\n    } // no test matched and there was no\n    // catch-all case, so we return zero.\n\n\n    return push_integer(0);\n  }; // we test A==B by first subtracting and checking if we symbolically\n  // get zero. If not, we evaluate to float and check if we get a zero.\n  // If we get another NUMBER then we know they are different.\n  // If we get something else, then we don't know and we return the\n  // unaveluated test, which is the same as saying \"maybe\".\n\n\n  Eval_testeq = function Eval_testeq() {\n    var checkResult, orig, subtractionResult; // first try without simplifyng both sides\n\n    orig = p1;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    subtract();\n    subtractionResult = pop(); // OK so we are doing something tricky here\n    // we are using isZeroLikeOrNonZeroLikeOrUndetermined to check if the result\n    // is zero or not zero or unknown.\n    // isZeroLikeOrNonZeroLikeOrUndetermined has some routines\n    // to determine the zero-ness/non-zero-ness or\n    // undeterminate-ness of things so we use\n    // that here and down below.\n\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if (checkResult != null && !checkResult) {\n      push_integer(1);\n      return;\n    } // we didn't get a simple numeric result but\n    // let's try again after doing\n    // a simplification on both sides\n\n\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    subtractionResult = pop();\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if (checkResult != null && !checkResult) {\n      push_integer(1);\n      return;\n    } // if we didn't get to a number then we\n    // don't know whether the quantities are\n    // different so do nothing\n\n\n    return push(orig);\n  }; // Relational operators expect a numeric result for operand difference.\n\n\n  Eval_testge = function Eval_testge() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison >= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testgt = function Eval_testgt() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison > 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testle = function Eval_testle() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison <= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testlt = function Eval_testlt() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n\n    if (comparison < 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  }; // not definition\n\n\n  Eval_not = function Eval_not() {\n    var checkResult, wholeAndExpression;\n    wholeAndExpression = p1;\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n\n    if (checkResult == null) {\n      // inconclusive test on predicate\n      return push(wholeAndExpression);\n    } else if (checkResult) {\n      // true -> false\n      return push_integer(0);\n    } else {\n      // false -> true\n      return push_integer(1);\n    }\n  };\n  /* and =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  a,b,...\n   General description\n  -------------------\n  Logical-and of predicate expressions.\n   */\n  // and definition\n\n\n  Eval_and = function Eval_and() {\n    var andPredicates, checkResult, somePredicateUnknown, wholeAndExpression;\n    wholeAndExpression = p1;\n    andPredicates = cdr(wholeAndExpression);\n    somePredicateUnknown = false;\n\n    while (iscons(andPredicates)) {\n      // eval each predicate\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(andPredicates));\n\n      if (checkResult == null) {\n        // here we have stuff that is not reconducible to any\n        // numeric value (or tensor with numeric values) e.g.\n        // 'a+b', so it just means that we just don't know the\n        // truth value of this particular predicate.\n        // We'll track the fact that we found an unknown\n        // predicate and we continue with the other predicates.\n        // (note that in case some subsequent predicate will be false,\n        // it won't matter that we found some unknowns and\n        // the whole test will be immediately zero).\n        somePredicateUnknown = true;\n        andPredicates = cdr(andPredicates);\n      } else if (checkResult) {\n        // found a true, move on to the next predicate\n        andPredicates = cdr(andPredicates);\n      } else if (!checkResult) {\n        // found a false, enough to falsify everything and return\n        push_integer(0);\n        return;\n      }\n    } // We checked all the predicates and none of them\n    // was false. So they were all either true or unknown.\n    // Now, if even just one was unknown, we'll have to call this\n    // test as inconclusive and return the whole test expression.\n    // If all the predicates were known, then we can conclude\n    // that the test returns true.\n\n\n    if (somePredicateUnknown) {\n      return push(wholeAndExpression);\n    } else {\n      return push_integer(1);\n    }\n  }; // or definition\n\n\n  Eval_or = function Eval_or() {\n    var checkResult, orPredicates, somePredicateUnknown, wholeOrExpression;\n    wholeOrExpression = p1;\n    orPredicates = cdr(wholeOrExpression);\n    somePredicateUnknown = false;\n\n    while (iscons(orPredicates)) {\n      // eval each predicate\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(orPredicates));\n\n      if (checkResult == null) {\n        // here we have stuff that is not reconducible to any\n        // numeric value (or tensor with numeric values) e.g.\n        // 'a+b', so it just means that we just don't know the\n        // truth value of this particular predicate.\n        // We'll track the fact that we found an unknown\n        // predicate and we continue with the other predicates.\n        // (note that in case some subsequent predicate will be false,\n        // it won't matter that we found some unknowns and\n        // the whole test will be immediately zero).\n        somePredicateUnknown = true;\n        orPredicates = cdr(orPredicates);\n      } else if (checkResult) {\n        // found a true, enough to return true\n        push_integer(1);\n        return;\n      } else if (!checkResult) {\n        // found a false, move on to the next predicate\n        orPredicates = cdr(orPredicates);\n      }\n    } // We checked all the predicates and none of them\n    // was true. So they were all either false or unknown.\n    // Now, if even just one was unknown, we'll have to call this\n    // test as inconclusive and return the whole test expression.\n    // If all the predicates were known, then we can conclude\n    // that the test returns false.\n\n\n    if (somePredicateUnknown) {\n      return push(wholeOrExpression);\n    } else {\n      return push_integer(0);\n    }\n  }; // use subtract for cases like A < A + 1\n  // TODO you could be smarter here and\n  // simplify both sides only in the case\n  // of \"relational operator: cannot determine...\"\n  // a bit like we do in Eval_testeq\n\n\n  cmp_args = function cmp_args() {\n    var t;\n    t = 0;\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    p1 = pop(); // try floating point if necessary\n\n    if (p1.k !== NUM && p1.k !== DOUBLE) {\n      push(p1);\n\n      _yyfloat();\n\n      Eval();\n      p1 = pop();\n    } //console.log \"comparison: \" + p1.toString()\n\n\n    if (isZeroAtomOrTensor(p1)) {\n      //console.log \"comparison isZero \"\n      return 0;\n    }\n\n    switch (p1.k) {\n      case NUM:\n        if (MSIGN(p1.q.a) === -1) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n\n        break;\n\n      case DOUBLE:\n        //console.log \"comparison p1.d: \" + p1.d\n        if (p1.d < 0.0) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n\n        break;\n\n      default:\n        //console.log \"comparison is null\"\n        t = null;\n    }\n\n    return t;\n  };\n  /*\n  Transform an expression using a pattern. The\n  pattern can come from the integrals table or\n  the user-defined patterns.\n   The expression and free variable are on the stack.\n   The argument s is a null terminated list of transform rules.\n   For example, see the itab (integrals table)\n   Internally, the following symbols are used:\n     F  input expression\n     X  free variable, i.e. F of X\n     A  template expression\n     B  result expression\n     C  list of conditional expressions\n   Puts the final expression on top of stack\n  (whether it's transformed or not) and returns\n  true is successful, false if not.\n   */\n  // p1 and p2 are tmps\n  //define F p3\n  //define X p4\n  //define A p5\n  //define B p6\n  //define C p7\n\n\n  _transform = function transform(s, generalTransform) {\n    var bookmarkTosToPrintDecomps, eachTransformEntry, i, l1, len, len1, m1, n1, numberOfDecomps, ref2, restTerm, secondTerm, success, theTransform, transform_h, transformationSuccessful, transformedTerms;\n    transform_h = 0;\n    save();\n    p1 = null;\n    p4 = pop(); // X i.e. free variable\n\n    p3 = pop(); // F i.e. input expression\n\n    if (DEBUG) {\n      console.log(\"         !!!!!!!!!   transform on: \" + p3);\n    }\n\n    saveMetaBindings();\n    set_binding(symbol(METAX), p4); // put constants in F(X) on the stack\n\n    transform_h = tos;\n    push_integer(1);\n    push(p3);\n    push(p4);\n\n    _polyform();\n\n    push(p4);\n    bookmarkTosToPrintDecomps = tos - 2;\n\n    _decomp(generalTransform);\n\n    numberOfDecomps = tos - bookmarkTosToPrintDecomps;\n\n    if (DEBUG) {\n      console.log(\"  \" + numberOfDecomps + \" decomposed elements ====== \");\n\n      for (i = l1 = 0, ref2 = numberOfDecomps; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        console.log(\"  decomposition element \" + i + \": \" + stack[tos - 1 - i]);\n      }\n    }\n\n    transformationSuccessful = false;\n\n    if (generalTransform) {\n      if (!isNumericAtom(p3)) {\n        theTransform = s;\n\n        if (DEBUG) {\n          console.log(\"applying transform: \" + theTransform);\n        }\n\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + theTransform);\n        }\n\n        push(theTransform); // replacements of meta variables. Note that we don't\n        // use scan_meta because the pattern is not a string\n        // that we have to parse, it's a tree already.\n        // replace a_ with METAA in the passed transformation\n\n        push(symbol(SYMBOL_A_UNDERSCORE));\n        push(symbol(METAA));\n\n        _subst(); // replace b_ with METAB in the passed transformation\n\n\n        push(symbol(SYMBOL_B_UNDERSCORE));\n        push(symbol(METAB));\n\n        _subst(); // replace x_ with METAX in the passed transformation\n\n\n        push(symbol(SYMBOL_X_UNDERSCORE));\n        push(symbol(METAX));\n\n        _subst();\n\n        p1 = pop();\n        p5 = car(p1);\n\n        if (DEBUG) {\n          console.log(\"template expression: \" + p5);\n        }\n\n        p6 = cadr(p1);\n        p7 = cddr(p1);\n        /*\n        p5 = p1.tensor.elem[0]\n        p6 = p1.tensor.elem[1]\n        for i in [2..(p1.tensor.elem.length-1)]\n          push p1.tensor.elem[i]\n        list(p1.tensor.elem.length - 2)\n        p7 = pop()\n        */\n\n        if (f_equals_a(transform_h, generalTransform)) {\n          // successful transformation,\n          // transformed result is in p6\n          transformationSuccessful = true;\n        } else {\n          // the match failed but perhaps we can match\n          // something lower down in the tree, so\n          // let's recurse the tree\n          if (DEBUG) {\n            console.log(\"p3 at this point: \" + p3);\n          }\n\n          transformedTerms = [];\n\n          if (DEBUG) {\n            console.log(\"car(p3): \" + car(p3));\n          }\n\n          restTerm = p3;\n\n          if (iscons(restTerm)) {\n            transformedTerms.push(car(p3));\n            restTerm = cdr(p3);\n          }\n\n          while (iscons(restTerm)) {\n            secondTerm = car(restTerm);\n            restTerm = cdr(restTerm);\n\n            if (DEBUG) {\n              console.log(\"tos before recursive transform: \" + tos);\n            }\n\n            push(secondTerm);\n            push_symbol(NIL);\n\n            if (DEBUG) {\n              console.log(\"testing: \" + secondTerm);\n            } //if (secondTerm+\"\") == \"eig(A x,transpose(A x))()\"\n            //  debugger\n\n\n            if (DEBUG) {\n              console.log(\"about to try to simplify other term: \" + secondTerm);\n            }\n\n            success = _transform(s, generalTransform);\n            transformationSuccessful = transformationSuccessful || success;\n            transformedTerms.push(pop());\n\n            if (DEBUG) {\n              console.log(\"tried to simplify other term: \" + secondTerm + \" ...successful?: \" + success + \" ...transformed: \" + transformedTerms[transformedTerms.length - 1]);\n            }\n          } // recreate the tree we were passed,\n          // but with all the terms being transformed\n\n\n          if (transformedTerms.length !== 0) {\n            for (m1 = 0, len = transformedTerms.length; m1 < len; m1++) {\n              i = transformedTerms[m1];\n              push(i);\n            }\n\n            list(transformedTerms.length);\n            p6 = pop(); // \"integrals\" mode\n          }\n        }\n      }\n    } else {\n      for (n1 = 0, len1 = s.length; n1 < len1; n1++) {\n        eachTransformEntry = s[n1];\n\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + eachTransformEntry);\n\n          if ((eachTransformEntry + \"\").indexOf(\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\") !== -1) {\n            debugger;\n          }\n        }\n\n        if (eachTransformEntry) {\n          scan_meta(eachTransformEntry);\n          p1 = pop();\n          p5 = cadr(p1);\n          p6 = caddr(p1);\n          p7 = cdddr(p1);\n          /*\n          p5 = p1.tensor.elem[0]\n          p6 = p1.tensor.elem[1]\n          for i in [2..(p1.tensor.elem.length-1)]\n            push p1.tensor.elem[i]\n          list(p1.tensor.elem.length - 2)\n          p7 = pop()\n          */\n\n          if (f_equals_a(transform_h, generalTransform)) {\n            // there is a successful transformation,\n            // transformed result is in p6\n            transformationSuccessful = true;\n            break;\n          }\n        }\n      }\n    }\n\n    moveTos(transform_h);\n\n    if (transformationSuccessful) {\n      //console.log \"transformation successful\"\n      // a transformation was successful\n      push(p6);\n      Eval();\n      p1 = pop(); //console.log \"...into: \" + p1\n\n      transformationSuccessful = true;\n    } else {\n      // transformations failed\n      if (generalTransform) {\n        // result = original expression\n        p1 = p3;\n      } else {\n        p1 = symbol(NIL);\n      }\n    }\n\n    restoreMetaBindings();\n    push(p1);\n    restore();\n    return transformationSuccessful;\n  };\n\n  saveMetaBindings = function saveMetaBindings() {\n    push(get_binding(symbol(METAA)));\n    push(get_binding(symbol(METAB)));\n    return push(get_binding(symbol(METAX)));\n  };\n\n  restoreMetaBindings = function restoreMetaBindings() {\n    set_binding(symbol(METAX), pop());\n    set_binding(symbol(METAB), pop());\n    return set_binding(symbol(METAA), pop());\n  }; // search for a METAA and METAB such that F = A\n\n\n  f_equals_a = function f_equals_a(h, generalTransform) {\n    var fea_i, fea_j, l1, m1, originalexpanding, ref2, ref3, ref4, ref5;\n    fea_i = 0;\n    fea_j = 0;\n\n    for (fea_i = l1 = ref2 = h, ref3 = tos; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; fea_i = ref2 <= ref3 ? ++l1 : --l1) {\n      set_binding(symbol(METAA), stack[fea_i]);\n\n      if (DEBUG) {\n        console.log(\"  binding METAA to \" + get_binding(symbol(METAA)));\n      }\n\n      for (fea_j = m1 = ref4 = h, ref5 = tos; ref4 <= ref5 ? m1 < ref5 : m1 > ref5; fea_j = ref4 <= ref5 ? ++m1 : --m1) {\n        set_binding(symbol(METAB), stack[fea_j]);\n\n        if (DEBUG) {\n          console.log(\"  binding METAB to \" + get_binding(symbol(METAB)));\n        } // now test all the conditions (it's an and between them)\n\n\n        p1 = p7;\n\n        while (iscons(p1)) {\n          push(car(p1));\n          Eval();\n          p2 = pop();\n\n          if (isZeroAtomOrTensor(p2)) {\n            break;\n          }\n\n          p1 = cdr(p1);\n        }\n\n        if (iscons(p1)) {\n          // conditions are not met,\n          // skip to the next binding of metas\n          continue;\n        }\n\n        push(p3);\n\n        if (DEBUG) {\n          console.log(\"about to evaluate template expression: \" + p5 + \" binding METAA to \" + get_binding(symbol(METAA)) + \" and binding METAB to \" + get_binding(symbol(METAB)) + \" and binding METAX to \" + get_binding(symbol(METAX)));\n        }\n\n        push(p5);\n\n        if (generalTransform) {\n          originalexpanding = expanding;\n          expanding = false;\n        }\n\n        Eval();\n\n        if (generalTransform) {\n          expanding = originalexpanding;\n        }\n\n        if (DEBUG) {\n          console.log(\"  comparing \" + stack[tos - 1] + \" to: \" + stack[tos - 2]);\n        }\n\n        subtract();\n        p1 = pop();\n\n        if (isZeroAtomOrTensor(p1)) {\n          if (DEBUG) {\n            console.log(\"binding METAA to \" + get_binding(symbol(METAA)));\n            console.log(\"binding METAB to \" + get_binding(symbol(METAB)));\n            console.log(\"binding METAX to \" + get_binding(symbol(METAX)));\n            console.log(\"comparing \" + p3 + \" to: \" + p5);\n          }\n\n          return 1; // yes\n        }\n      }\n    }\n\n    return 0; // no\n  }; // Transpose tensor indices\n\n\n  Eval_transpose = function Eval_transpose() {\n    push(cadr(p1));\n    Eval(); // add default params if they\n    // have not been passed\n\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n\n    return _transpose();\n  };\n\n  _transpose = function transpose() {\n    var a, accumulator, ai, an, b, eachEntry, i, innerTranspSwitch1, innerTranspSwitch2, j, k, l, l1, m, m1, n1, ndim, nelem, o1, q1, r1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, s1, t;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    ai = [];\n    an = [];\n\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    } //U **a, **b\n\n\n    save(); // by default p3 is 2 and p2 is 1\n\n    p3 = pop(); // index to be transposed\n\n    p2 = pop(); // other index to be transposed\n\n    p1 = pop(); // what needs to be transposed\n    // a transposition just goes away when\n    // applied to a scalar\n\n    if (isNumericAtom(p1)) {\n      push(p1);\n      restore();\n      return;\n    } // transposition goes away for identity matrix\n\n\n    if (isplusone(p2) && isplustwo(p3) || isplusone(p3) && isplustwo(p2)) {\n      if (isidentitymatrix(p1)) {\n        push(p1);\n        restore();\n        return;\n      }\n    } // a transposition just goes away when\n    // applied to another transposition with\n    // the same columns to be switched\n\n\n    if (istranspose(p1)) {\n      innerTranspSwitch1 = car(cdr(cdr(p1)));\n      innerTranspSwitch2 = car(cdr(cdr(cdr(p1))));\n\n      if (equal(innerTranspSwitch1, p3) && equal(innerTranspSwitch2, p2) || equal(innerTranspSwitch2, p3) && equal(innerTranspSwitch1, p2) || equal(innerTranspSwitch1, symbol(NIL)) && equal(innerTranspSwitch2, symbol(NIL)) && (isplusone(p3) && isplustwo(p2) || isplusone(p2) && isplustwo(p3))) {\n        push(car(cdr(p1)));\n        restore();\n        return;\n      }\n    } // if operand is a sum then distribute\n    // (if we are in expanding mode)\n\n\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n      push(zero);\n\n      while (iscons(p1)) {\n        push(car(p1)); // add the dimensions to switch but only if\n        // they are not the default ones.\n\n        push(p2);\n        push(p3);\n\n        _transpose();\n\n        add();\n        p1 = cdr(p1);\n      }\n\n      restore();\n      return;\n    } // if operand is a multiplication then distribute\n    // (if we are in expanding mode)\n\n\n    if (expanding && ismultiply(p1)) {\n      p1 = cdr(p1);\n      push(one);\n\n      while (iscons(p1)) {\n        push(car(p1)); // add the dimensions to switch but only if\n        // they are not the default ones.\n\n        push(p2);\n        push(p3);\n\n        _transpose();\n\n        multiply();\n        p1 = cdr(p1);\n      }\n\n      restore();\n      return;\n    } // distribute the transpose of a dot\n    // if in expanding mode\n    // note that the distribution happens\n    // in reverse as per tranpose rules.\n    // The dot operator is not\n    // commutative, so, it matters.\n\n\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n\n      while (iscons(p1)) {\n        accumulator.push([car(p1), p2, p3]);\n        p1 = cdr(p1);\n      }\n\n      for (eachEntry = m1 = ref3 = accumulator.length - 1; ref3 <= 0 ? m1 <= 0 : m1 >= 0; eachEntry = ref3 <= 0 ? ++m1 : --m1) {\n        push(accumulator[eachEntry][0]);\n        push(accumulator[eachEntry][1]);\n        push(accumulator[eachEntry][2]);\n\n        _transpose();\n\n        if (eachEntry !== accumulator.length - 1) {\n          _inner();\n        }\n      }\n\n      restore();\n      return;\n    }\n\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        //stop(\"transpose: tensor expected, 1st arg is not a tensor\")\n        push_symbol(TRANSPOSE);\n        push(p1);\n\n        if ((!isplusone(p2) || !isplustwo(p3)) && (!isplusone(p3) || !isplustwo(p2))) {\n          push(p2);\n          push(p3);\n          list(4);\n        } else {\n          list(2);\n        }\n\n        restore();\n        return;\n      }\n\n      push(zero);\n      restore();\n      return;\n    }\n\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem; // is it a vector?\n    // so here it's something curious - note how vectors are\n    // not really special two-dimensional matrices, but rather\n    // 1-dimension objects (like tensors can be). So since\n    // they have one dimension, transposition has no effect.\n    // (as opposed as if they were special two-dimensional\n    // matrices)\n    // see also Ran Pan, Tensor Transpose and Its Properties. CoRR abs/1411.1503 (2014)\n\n    if (ndim === 1) {\n      push(p1);\n      restore();\n      return;\n    }\n\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n\n    if (l < 1 || l > ndim || m < 1 || m > ndim) {\n      stop(\"transpose: index out of range\");\n    }\n\n    l--;\n    m--;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n\n    for (i = n1 = 0, ref4 = ndim; 0 <= ref4 ? n1 < ref4 : n1 > ref4; i = 0 <= ref4 ? ++n1 : --n1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n\n    p2.tensor.dim[l] = p1.tensor.dim[m];\n    p2.tensor.dim[m] = p1.tensor.dim[l];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem; // init tensor index\n\n    for (i = o1 = 0, ref5 = ndim; 0 <= ref5 ? o1 < ref5 : o1 > ref5; i = 0 <= ref5 ? ++o1 : --o1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    } // copy components from a to b\n\n\n    for (i = q1 = 0, ref6 = nelem; 0 <= ref6 ? q1 < ref6 : q1 > ref6; i = 0 <= ref6 ? ++q1 : --q1) {\n      // swap indices l and m\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      k = 0;\n\n      for (j = r1 = 0, ref7 = ndim; 0 <= ref7 ? r1 < ref7 : r1 > ref7; j = 0 <= ref7 ? ++r1 : --r1) {\n        k = k * an[j] + ai[j];\n      } // swap indices back\n\n\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      b[k] = a[i]; // increment tensor index\n      // Suppose the tensor dimensions are 2 and 3.\n      // Then the tensor index ai increments as follows:\n      // 00 -> 01\n      // 01 -> 02\n      // 02 -> 10\n      // 10 -> 11\n      // 11 -> 12\n      // 12 -> 00\n\n      for (j = s1 = ref8 = ndim - 1; ref8 <= 0 ? s1 <= 0 : s1 >= 0; j = ref8 <= 0 ? ++s1 : --s1) {\n        if (++ai[j] < an[j]) {\n          break;\n        }\n\n        ai[j] = 0;\n      }\n    }\n\n    push(p2);\n    return restore();\n  }; // Evaluate a user defined function\n  //define F p3 # F is the function body\n  //define A p4 # A is the formal argument list\n  //define B p5 # B is the calling argument list\n  //define S p6 # S is the argument substitution list\n  // we got here because there was a function invocation and\n  // it's not been parsed (and consequently tagged) as any\n  // system function.\n  // So we are dealing with another function.\n  // The function could be actually defined, or not yet,\n  // so we'll deal with both cases.\n\n  /* d =====================================================================\n   Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n   Parameters\n  ----------\n  f,x\n   General description\n  -------------------\n  Returns the partial derivative of f with respect to x. x can be a vector e.g. [x,y].\n   */\n\n\n  Eval_user_function = function Eval_user_function() {\n    var bodyAndFormalArguments, h; // Use \"derivative\" instead of \"d\" if there is no user function \"d\"\n\n    if (DEBUG) {\n      console.log(\"Eval_user_function evaluating: \" + car(p1));\n    }\n\n    if (car(p1) === symbol(SYMBOL_D) && get_binding(symbol(SYMBOL_D)) === symbol(SYMBOL_D)) {\n      Eval_derivative();\n      return;\n    } // normally car(p1) is a symbol with the function name\n    // but it could be something that has to be\n    // evaluated to get to the function definition instead\n    // (e.g. the function is an element of an array)\n    // so we do an eval to sort it all out. \n\n\n    push(car(p1));\n    Eval(); // we expect to find either the body and\n    // formula arguments, OR, if the function\n    // has not been defined yet, then the\n    // function will just contain its own name, as\n    // all undefined variables do.\n\n    bodyAndFormalArguments = pop();\n\n    if (isNumericAtom(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found multiplication instead. Use '*' symbol explicitly for multiplication.\");\n    } else if (istensor(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found tensor product instead. Use 'dot/inner' explicitly.\");\n    } else if (isstr(bodyAndFormalArguments)) {\n      stop(\"expected function, found string instead.\");\n    }\n\n    p3 = car(cdr(bodyAndFormalArguments)); // p3 is function body F\n    // p4 is the formal argument list\n    // that is also contained here in the FUNCTION node \n\n    p4 = car(cdr(cdr(bodyAndFormalArguments)));\n    p5 = cdr(p1); // next check is whether evaluation did nothing, so the function is undefined\n\n    if (car(bodyAndFormalArguments) !== symbol(FUNCTION) || bodyAndFormalArguments === car(p1)) {\n      // p3 is F\n      // leave everything as it was and return\n      h = tos;\n      push(bodyAndFormalArguments);\n      p1 = p5;\n\n      while (iscons(p1)) {\n        push(car(p1));\n        Eval();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      return;\n    } // Create the argument substitution list p6(S)\n\n\n    p1 = p4;\n    p2 = p5;\n    h = tos;\n\n    while (iscons(p1) && iscons(p2)) {\n      push(car(p1));\n      push(car(p2)); // why explicitly Eval the parameters when\n      // the body of the function is\n      // evalled anyways? Commenting it out. All tests pass...\n      //Eval()\n\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n\n    list(tos - h);\n    p6 = pop();\n    push(p3);\n\n    if (iscons(p6)) {\n      // p6 is S\n      push(p6);\n\n      _rewrite_args();\n    } //console.log \"rewritten body: \" + stack[tos-1]\n\n\n    return Eval();\n  }; // Rewrite by expanding symbols that contain args\n\n\n  _rewrite_args = function rewrite_args() {\n    var h, n;\n    n = 0;\n    save(); // subst. list which is a list\n    // where each consecutive pair\n    // is what needs to be substituted and with what\n\n    p2 = pop();\n    p1 = pop();\n\n    if (istensor(p1)) {\n      n = rewrite_args_tensor();\n      restore();\n      return n;\n    }\n\n    if (iscons(p1)) {\n      h = tos;\n\n      if (car(p1) === car(p2)) {\n        // rewrite a function in\n        // the body with the one\n        // passed from the paramaters\n        push_symbol(EVAL);\n        push(car(cdr(p2)));\n        list(2);\n      } else {\n        // if there is no match\n        // then no substitution necessary\n        push(car(p1));\n      } // continue recursively to\n      // rewrite the rest of the body\n\n\n      p1 = cdr(p1);\n\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        n += _rewrite_args();\n        p1 = cdr(p1);\n      }\n\n      list(tos - h);\n      restore();\n      return n;\n    }\n\n    if (!issymbol(p1)) {\n      push(p1);\n      restore();\n      return 0;\n    } // Here we are in a symbol case\n    // so we need to substitute\n    // Check if there is a direct match\n    // of symbols right away\n\n\n    p3 = p2;\n\n    while (iscons(p3)) {\n      if (p1 === car(p3)) {\n        push(cadr(p3));\n        restore();\n        return 1;\n      }\n\n      p3 = cddr(p3);\n    } // Get the symbol's content, if _that_\n    // matches then do the substitution\n\n\n    p3 = get_binding(p1);\n    push(p3);\n\n    if (p1 !== p3) {\n      push(p2);\n      n = _rewrite_args();\n\n      if (n === 0) {\n        pop();\n        push(p1); // restore if not rewritten with arg\n      }\n    }\n\n    restore();\n    return n;\n  };\n\n  rewrite_args_tensor = function rewrite_args_tensor() {\n    var i, l1, n, ref2;\n    n = 0;\n    i = 0;\n    push(p1);\n    copy_tensor();\n    p1 = pop();\n\n    for (i = l1 = 0, ref2 = p1.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      n += _rewrite_args();\n      p1.tensor.elem[i] = pop();\n    }\n\n    check_tensor_dimensions(p1);\n    push(p1);\n    return n;\n  };\n\n  Eval_zero = function Eval_zero() {\n    var i, k, l1, m, m1, n, ref2, ref3;\n    i = 0;\n    k = [];\n    m = 0;\n    n = 0;\n\n    for (i = l1 = 0, ref2 = MAXDIM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      k[i] = 0;\n    }\n\n    m = 1;\n    n = 0;\n    p2 = cdr(p1);\n\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      i = pop_integer();\n\n      if (i < 1 || isNaN(i)) {\n        // if the input is nonsensical\n        // just return 0\n        push(zero);\n        return;\n      }\n\n      m *= i;\n      k[n++] = i;\n      p2 = cdr(p2);\n    }\n\n    if (n === 0) {\n      push(zero);\n      return;\n    }\n\n    p1 = alloc_tensor(m);\n    p1.tensor.ndim = n;\n\n    for (i = m1 = 0, ref3 = n; 0 <= ref3 ? m1 < ref3 : m1 > ref3; i = 0 <= ref3 ? ++m1 : --m1) {\n      p1.tensor.dim[i] = k[i];\n    }\n\n    return push(p1);\n  };\n\n  allocatedId = 0;\n\n  alloc_tensor = function alloc_tensor(nelem) {\n    var i, l1, p, ref2;\n    i = 0;\n    p = new U();\n    p.k = TENSOR;\n    p.tensor = new tensor();\n    p.tensor.nelem = nelem;\n\n    for (i = l1 = 0, ref2 = nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      p.tensor.elem[i] = zero;\n    }\n\n    p.tensor.allocatedId = allocatedId; //if allocatedId == 9\n    //  debugger\n\n    allocatedId++;\n    check_tensor_dimensions(p);\n    return p;\n  };\n  /*\n  // garbage collector\n   void\n  gc(void)\n  {\n    int i, j\n    U *p\n     // tag everything\n     for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++)\n        p[j].tag = 1\n    }\n     // untag what's used\n     untag(p0)\n    untag(p1)\n    untag(p2)\n    untag(p3)\n    untag(p4)\n    untag(p5)\n    untag(p6)\n    untag(p7)\n    untag(p8)\n    untag(p9)\n     untag(one)\n    untag(zero)\n    untag(imaginaryunit)\n     for (i = 0; i < NSYM; i++) {\n      untag(binding[i])\n      untag(arglist[i])\n    }\n     for (i = 0; i < tos; i++)\n      untag(stack[i])\n     for (i = (int) (frame - stack); i < TOS; i++)\n      untag(stack[i])\n     // collect everything that's still tagged\n     free_count = 0\n     for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++) {\n        if (p[j].tag == 0)\n          continue\n        // still tagged so it's unused, put on free list\n        switch (p[j].k) {\n        case TENSOR:\n          free(p[j].u.tensor)\n          break\n        case STR:\n          free(p[j].u.str)\n          break\n        case NUM:\n          mfree(p[j].u.q.a)\n          mfree(p[j].u.q.b)\n          break\n        }\n        p[j].k = CONS; // so no double free occurs above\n        p[j].u.cons.cdr = free_list\n        free_list = p + j\n        free_count++\n      }\n    }\n  }\n   void\n  untag(U *p)\n  {\n    int i\n     if (iscons(p)) {\n      do {\n        if (p->tag == 0)\n          return\n        p->tag = 0\n        untag(p->u.cons.car)\n        p = p->u.cons.cdr\n      } while (iscons(p))\n      untag(p)\n      return\n    }\n     if (p->tag) {\n      p->tag = 0\n       if (istensor(p)) {\n        for (i = 0; i < p->u.tensor->nelem; i++)\n          untag(p->u.tensor->elem[i])\n      }\n    }\n  }\n   // get memory for 100,000 atoms\n   void\n  alloc_mem(void)\n  {\n    int i\n    U *p\n    if (mcount == M)\n      return\n    p = (U *) malloc(N * sizeof (struct U))\n    if (p == NULL)\n      return\n    mem[mcount++] = p\n    for (i = 0; i < N; i++) {\n      p[i].k = CONS; // so no free in gc\n      p[i].u.cons.cdr = p + i + 1\n    }\n    p[N - 1].u.cons.cdr = free_list\n    free_list = p\n    free_count += N\n  }\n   void\n  print_mem_info(void)\n  {\n    char buf[100]\n     sprintf(buf, \"%d blocks (%d bytes/block)\\n\", N * mcount, (int) sizeof (U))\n    printstr(buf)\n     sprintf(buf, \"%d free\\n\", free_count)\n    printstr(buf)\n     sprintf(buf, \"%d used\\n\", N * mcount - free_count)\n    printstr(buf)\n  }\n  */\n  // returns 1 if expr p contains expr q, otherweise returns 0\n\n\n  _Find = function Find(p, q) {\n    var i, l1, ref2;\n    i = 0;\n\n    if (equal(p, q)) {\n      return 1;\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (_Find(p.tensor.elem[i], q)) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    while (iscons(p)) {\n      if (_Find(car(p), q)) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  }; // find stuff like (-1)^(something (but disregard\n  // imaginary units which are in the form (-1)^(1/2))\n\n\n  _findPossibleClockForm = function findPossibleClockForm(p) {\n    var i, l1, ref2;\n    i = 0;\n\n    if (isimaginaryunit(p)) {\n      return 0;\n    }\n\n    if (car(p) === symbol(POWER) && !isinteger(caddr(p1))) {\n      if (_Find(cadr(p), imaginaryunit)) {\n        //console.log \"found i^fraction \" + p\n        return 1;\n      }\n    }\n\n    if (car(p) === symbol(POWER) && equaln(cadr(p), -1) && !isinteger(caddr(p1))) {\n      //console.log \"found -1^fraction in \" + p\n      return 1;\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (_findPossibleClockForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    while (iscons(p)) {\n      if (_findPossibleClockForm(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  }; // find stuff like (e)^(i something)\n\n\n  _findPossibleExponentialForm = function findPossibleExponentialForm(p) {\n    var i, l1, ref2;\n    i = 0;\n\n    if (car(p) === symbol(POWER) && cadr(p) === symbol(E)) {\n      return _Find(caddr(p), imaginaryunit);\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        if (_findPossibleExponentialForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    while (iscons(p)) {\n      if (_findPossibleExponentialForm(car(p))) {\n        return 1;\n      }\n\n      p = cdr(p);\n    }\n\n    return 0;\n  };\n\n  $.Find = _Find;\n\n  init = function init() {\n    var i, l1, ref2; //debugger\n    //console.log \"DOING AN INIT ========================================================================\"\n\n    i = 0;\n    flag = 0;\n    reset_after_error();\n    chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n\n    if (flag) {\n      // already initted\n      return;\n    }\n\n    flag = 1; // total clearout of symbol table\n\n    for (i = l1 = 0, ref2 = NSYM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      isSymbolReclaimable[i] = false;\n    }\n\n    return defn();\n  };\n\n  defn_str = [\"version=\\\"\" + version + \"\\\"\", \"e=exp(1)\", \"i=sqrt(-1)\", \"autoexpand=1\", \"assumeRealVariables=1\", \"trange=[-pi,pi]\", \"xrange=[-10,10]\", \"yrange=[-10,10]\", \"last=0\", \"trace=0\", \"forceFixedPrintout=1\", \"maxFixedPrintoutDigits=6\", \"printLeaveEAlone=1\", \"printLeaveXAlone=0\", // cross definition\n  \"cross(u,v)=[u[2]*v[3]-u[3]*v[2],u[3]*v[1]-u[1]*v[3],u[1]*v[2]-u[2]*v[1]]\", // curl definition\n  \"curl(v)=[d(v[3],y)-d(v[2],z),d(v[1],z)-d(v[3],x),d(v[2],x)-d(v[1],y)]\", // div definition\n  \"div(v)=d(v[1],x)+d(v[2],y)+d(v[3],z)\", // Note that we use the mathematics / Javascript / Mathematica\n  // convention that \"log\" is indeed the natural logarithm.\n  // In engineering, biology, astronomy, \"log\" can stand instead\n  // for the \"common\" logarithm i.e. base 10. Also note that Google\n  // calculations use log for the common logarithm.\n  \"ln(x)=log(x)\"];\n\n  defn = function defn() {\n    var definitionOfInterest, defn_i, l1, originalCodeGen, ref2;\n    p0 = symbol(NIL);\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n    p3 = symbol(NIL);\n    p4 = symbol(NIL);\n    p5 = symbol(NIL);\n    p6 = symbol(NIL);\n    p7 = symbol(NIL);\n    p8 = symbol(NIL);\n    p9 = symbol(NIL);\n    std_symbol(\"abs\", ABS);\n    std_symbol(\"add\", ADD);\n    std_symbol(\"adj\", ADJ);\n    std_symbol(\"and\", AND);\n    std_symbol(\"approxratio\", APPROXRATIO);\n    std_symbol(\"arccos\", ARCCOS);\n    std_symbol(\"arccosh\", ARCCOSH);\n    std_symbol(\"arcsin\", ARCSIN);\n    std_symbol(\"arcsinh\", ARCSINH);\n    std_symbol(\"arctan\", ARCTAN);\n    std_symbol(\"arctanh\", ARCTANH);\n    std_symbol(\"arg\", ARG);\n    std_symbol(\"atomize\", ATOMIZE);\n    std_symbol(\"besselj\", BESSELJ);\n    std_symbol(\"bessely\", BESSELY);\n    std_symbol(\"binding\", BINDING);\n    std_symbol(\"binomial\", BINOMIAL);\n    std_symbol(\"ceiling\", CEILING);\n    std_symbol(\"check\", CHECK);\n    std_symbol(\"choose\", CHOOSE);\n    std_symbol(\"circexp\", CIRCEXP);\n    std_symbol(\"clear\", CLEAR);\n    std_symbol(\"clearall\", CLEARALL);\n    std_symbol(\"clearpatterns\", CLEARPATTERNS);\n    std_symbol(\"clock\", CLOCK);\n    std_symbol(\"coeff\", COEFF);\n    std_symbol(\"cofactor\", COFACTOR);\n    std_symbol(\"condense\", CONDENSE);\n    std_symbol(\"conj\", CONJ);\n    std_symbol(\"contract\", CONTRACT);\n    std_symbol(\"cos\", COS);\n    std_symbol(\"cosh\", COSH);\n    std_symbol(\"decomp\", DECOMP);\n    std_symbol(\"defint\", DEFINT);\n    std_symbol(\"deg\", DEGREE);\n    std_symbol(\"denominator\", DENOMINATOR);\n    std_symbol(\"det\", DET);\n    std_symbol(\"derivative\", DERIVATIVE);\n    std_symbol(\"dim\", DIM);\n    std_symbol(\"dirac\", DIRAC);\n    std_symbol(\"divisors\", DIVISORS);\n    std_symbol(\"do\", DO);\n    std_symbol(\"dot\", DOT);\n    std_symbol(\"draw\", DRAW);\n    std_symbol(\"dsolve\", DSOLVE);\n    std_symbol(\"erf\", ERF);\n    std_symbol(\"erfc\", ERFC);\n    std_symbol(\"eigen\", EIGEN);\n    std_symbol(\"eigenval\", EIGENVAL);\n    std_symbol(\"eigenvec\", EIGENVEC);\n    std_symbol(\"eval\", EVAL);\n    std_symbol(\"exp\", EXP);\n    std_symbol(\"expand\", EXPAND);\n    std_symbol(\"expcos\", EXPCOS);\n    std_symbol(\"expsin\", EXPSIN);\n    std_symbol(\"factor\", FACTOR);\n    std_symbol(\"factorial\", FACTORIAL);\n    std_symbol(\"factorpoly\", FACTORPOLY);\n    std_symbol(\"filter\", FILTER);\n    std_symbol(\"float\", FLOATF);\n    std_symbol(\"floor\", FLOOR);\n    std_symbol(\"for\", FOR);\n    std_symbol(\"function\", FUNCTION);\n    std_symbol(\"Gamma\", GAMMA);\n    std_symbol(\"gcd\", GCD);\n    std_symbol(\"hermite\", HERMITE);\n    std_symbol(\"hilbert\", HILBERT);\n    std_symbol(\"imag\", IMAG);\n    std_symbol(\"component\", INDEX);\n    std_symbol(\"inner\", INNER);\n    std_symbol(\"integral\", INTEGRAL);\n    std_symbol(\"inv\", INV);\n    std_symbol(\"invg\", INVG);\n    std_symbol(\"isinteger\", ISINTEGER);\n    std_symbol(\"isprime\", ISPRIME);\n    std_symbol(\"laguerre\", LAGUERRE); //  std_symbol(\"laplace\", LAPLACE)\n\n    std_symbol(\"lcm\", LCM);\n    std_symbol(\"leading\", LEADING);\n    std_symbol(\"legendre\", LEGENDRE);\n    std_symbol(\"log\", LOG);\n    std_symbol(\"lookup\", LOOKUP);\n    std_symbol(\"mod\", MOD);\n    std_symbol(\"multiply\", MULTIPLY);\n    std_symbol(\"not\", NOT);\n    std_symbol(\"nroots\", NROOTS);\n    std_symbol(\"number\", NUMBER);\n    std_symbol(\"numerator\", NUMERATOR);\n    std_symbol(\"operator\", OPERATOR);\n    std_symbol(\"or\", OR);\n    std_symbol(\"outer\", OUTER);\n    std_symbol(\"pattern\", PATTERN);\n    std_symbol(\"patternsinfo\", PATTERNSINFO);\n    std_symbol(\"polar\", POLAR);\n    std_symbol(\"power\", POWER);\n    std_symbol(\"prime\", PRIME);\n    std_symbol(\"print\", PRINT);\n    std_symbol(\"print2dascii\", PRINT2DASCII);\n    std_symbol(\"printcomputer\", PRINTFULL);\n    std_symbol(\"printlatex\", PRINTLATEX);\n    std_symbol(\"printlist\", PRINTLIST);\n    std_symbol(\"printhuman\", PRINTPLAIN);\n    std_symbol(\"printLeaveEAlone\", PRINT_LEAVE_E_ALONE);\n    std_symbol(\"printLeaveXAlone\", PRINT_LEAVE_X_ALONE);\n    std_symbol(\"product\", PRODUCT);\n    std_symbol(\"quote\", QUOTE);\n    std_symbol(\"quotient\", QUOTIENT);\n    std_symbol(\"rank\", RANK);\n    std_symbol(\"rationalize\", RATIONALIZE);\n    std_symbol(\"real\", REAL);\n    std_symbol(\"rect\", YYRECT);\n    std_symbol(\"roots\", ROOTS);\n    std_symbol(\"round\", ROUND);\n    std_symbol(\"equals\", SETQ);\n    std_symbol(\"sgn\", SGN);\n    std_symbol(\"silentpattern\", SILENTPATTERN);\n    std_symbol(\"simplify\", SIMPLIFY);\n    std_symbol(\"sin\", SIN);\n    std_symbol(\"sinh\", SINH);\n    std_symbol(\"shape\", SHAPE);\n    std_symbol(\"sqrt\", SQRT);\n    std_symbol(\"stop\", STOP);\n    std_symbol(\"subst\", SUBST);\n    std_symbol(\"sum\", SUM);\n    std_symbol(\"symbolsinfo\", SYMBOLSINFO);\n    std_symbol(\"tan\", TAN);\n    std_symbol(\"tanh\", TANH);\n    std_symbol(\"taylor\", TAYLOR);\n    std_symbol(\"test\", TEST);\n    std_symbol(\"testeq\", TESTEQ);\n    std_symbol(\"testge\", TESTGE);\n    std_symbol(\"testgt\", TESTGT);\n    std_symbol(\"testle\", TESTLE);\n    std_symbol(\"testlt\", TESTLT);\n    std_symbol(\"transpose\", TRANSPOSE);\n    std_symbol(\"unit\", UNIT);\n    std_symbol(\"zero\", ZERO);\n    std_symbol(\"nil\", NIL);\n    std_symbol(\"autoexpand\", AUTOEXPAND);\n    std_symbol(\"bake\", BAKE);\n    std_symbol(\"assumeRealVariables\", ASSUME_REAL_VARIABLES);\n    std_symbol(\"last\", LAST);\n    std_symbol(\"lastprint\", LAST_PRINT);\n    std_symbol(\"last2dasciiprint\", LAST_2DASCII_PRINT);\n    std_symbol(\"lastfullprint\", LAST_FULL_PRINT);\n    std_symbol(\"lastlatexprint\", LAST_LATEX_PRINT);\n    std_symbol(\"lastlistprint\", LAST_LIST_PRINT);\n    std_symbol(\"lastplainprint\", LAST_PLAIN_PRINT);\n    std_symbol(\"trace\", TRACE);\n    std_symbol(\"forceFixedPrintout\", FORCE_FIXED_PRINTOUT);\n    std_symbol(\"maxFixedPrintoutDigits\", MAX_FIXED_PRINTOUT_DIGITS);\n    std_symbol(\"~\", YYE); // tilde so sort puts it after other symbols\n\n    std_symbol(\"$DRAWX\", DRAWX); // special purpose internal symbols\n\n    std_symbol(\"$METAA\", METAA);\n    std_symbol(\"$METAB\", METAB);\n    std_symbol(\"$METAX\", METAX);\n    std_symbol(\"$SECRETX\", SECRETX);\n    std_symbol(\"version\", VERSION);\n    std_symbol(\"pi\", PI);\n    std_symbol(\"a\", SYMBOL_A);\n    std_symbol(\"b\", SYMBOL_B);\n    std_symbol(\"c\", SYMBOL_C);\n    std_symbol(\"d\", SYMBOL_D);\n    std_symbol(\"i\", SYMBOL_I);\n    std_symbol(\"j\", SYMBOL_J);\n    std_symbol(\"n\", SYMBOL_N);\n    std_symbol(\"r\", SYMBOL_R);\n    std_symbol(\"s\", SYMBOL_S);\n    std_symbol(\"t\", SYMBOL_T);\n    std_symbol(\"x\", SYMBOL_X);\n    std_symbol(\"y\", SYMBOL_Y);\n    std_symbol(\"z\", SYMBOL_Z);\n    std_symbol(\"I\", SYMBOL_IDENTITY_MATRIX);\n    std_symbol(\"a_\", SYMBOL_A_UNDERSCORE);\n    std_symbol(\"b_\", SYMBOL_B_UNDERSCORE);\n    std_symbol(\"x_\", SYMBOL_X_UNDERSCORE);\n    std_symbol(\"$C1\", C1);\n    std_symbol(\"$C2\", C2);\n    std_symbol(\"$C3\", C3);\n    std_symbol(\"$C4\", C4);\n    std_symbol(\"$C5\", C5);\n    std_symbol(\"$C6\", C6);\n    defineSomeHandyConstants(); // don't add all these functions to the\n    // symbolsDependencies, clone the original\n\n    originalCodeGen = codeGen;\n    codeGen = false;\n\n    for (defn_i = l1 = 0, ref2 = defn_str.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; defn_i = 0 <= ref2 ? ++l1 : --l1) {\n      definitionOfInterest = defn_str[defn_i];\n      scan(definitionOfInterest);\n\n      if (DEBUG) {\n        console.log(\"... evaling \" + definitionOfInterest);\n        console.log(\"top of stack:\");\n        console.log(_print_list(stack[tos - 1]));\n      }\n\n      Eval();\n      pop();\n    } // restore the symbol dependencies as they were before.\n\n\n    return codeGen = originalCodeGen;\n  };\n\n  defineSomeHandyConstants = function defineSomeHandyConstants() {\n    zero = new_integer(0);\n    one = new_integer(1);\n    push_double(1.0);\n    one_as_double = pop(); // i is the square root of -1 i.e. -1 ^ 1/2\n\n    push_symbol(POWER);\n\n    if (DEBUG) {\n      console.log(_print_list(stack[tos - 1]));\n    }\n\n    push_integer(-1);\n\n    if (DEBUG) {\n      console.log(_print_list(stack[tos - 1]));\n    }\n\n    push_rational(1, 2);\n\n    if (DEBUG) {\n      console.log(_print_list(stack[tos - 1]));\n    }\n\n    list(3);\n\n    if (DEBUG) {\n      console.log(_print_list(stack[tos - 1]));\n    }\n\n    return imaginaryunit = pop(); // must be untagged in gc\n  }; // Bignum compare\n  //  returns\n  //  -1    a < b\n  //  0    a = b\n  //  1    a > b\n\n\n  mcmp = function mcmp(a, b) {\n    return a.compare(b);\n  }; // a is a bigint, n is a normal int\n\n\n  mcmpint = function mcmpint(a, n) {\n    var b, t;\n    b = bigInt(n);\n    t = mcmp(a, b);\n    return t;\n  };\n\n  strcmp = function strcmp(str1, str2) {\n    if (str1 === str2) {\n      return 0;\n    } else if (str1 > str2) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  doubleToReasonableString = function doubleToReasonableString(d) {\n    var maxFixedPrintoutDigits, stringRepresentation; // when generating code, print out\n    // the standard JS Number printout\n\n    if (codeGen) {\n      return \"\" + d;\n    }\n\n    if (isZeroAtomOrTensor(get_binding(symbol(FORCE_FIXED_PRINTOUT)))) {\n      stringRepresentation = \"\" + d; // manipulate the string so that it can be parsed by\n      // Algebrite (something like 1.23e-123 wouldn't cut it because\n      // that would be parsed as 1.23*e - 123)\n\n      if (printMode === PRINTMODE_LATEX) {\n        // 1.0\\mathrm{e}{-10} looks much better than the plain 1.0e-10\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"\\\\mathrm{e}{$1}\");\n        } else {\n          // if there is no dot in the mantissa, add it so we see it's\n          // a double and not a perfect number\n          // e.g. 1e-10 becomes 1.0\\mathrm{e}{-10}\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0\\\\mathrm{e}{$2}\");\n        }\n      } else {\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"*10^($1)\");\n        } else {\n          // if there is no dot in the mantissa, add it so we see it's\n          // a double and not a perfect number\n          // e.g. 1e-10 becomes 1.0e-10\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0*10^($2)\");\n        }\n      }\n    } else {\n      push(get_binding(symbol(MAX_FIXED_PRINTOUT_DIGITS)));\n      maxFixedPrintoutDigits = pop_integer(); //console.log \"maxFixedPrintoutDigits: \" + maxFixedPrintoutDigits\n      //console.log \"type: \" + typeof(maxFixedPrintoutDigits)\n      //console.log \"toFixed: \" + d.toFixed(maxFixedPrintoutDigits)\n\n      stringRepresentation = \"\" + d.toFixed(maxFixedPrintoutDigits); // remove any trailing zeroes after the dot\n      // see https://stackoverflow.com/questions/26299160/using-regex-how-do-i-remove-the-trailing-zeros-from-a-decimal-number\n\n      stringRepresentation = stringRepresentation.replace(/(\\.\\d*?[1-9])0+$/gm, \"$1\"); // in case there are only zeroes after the dot, removes the dot too\n\n      stringRepresentation = stringRepresentation.replace(/\\.0+$/gm, \"\"); // we actually want to give a hint to user that\n      // it's a double, so add a trailing \".0\" if there\n      // is no decimal point\n\n      if (stringRepresentation.indexOf(\".\") === -1) {\n        stringRepresentation += \".0\";\n      }\n\n      if (parseFloat(stringRepresentation) !== d) {\n        stringRepresentation = d.toFixed(maxFixedPrintoutDigits) + \"...\";\n      }\n    }\n\n    return stringRepresentation;\n  }; // does nothing\n\n\n  clear_term = function clear_term() {}; // s is a string here anyways\n\n\n  isspace = function isspace(s) {\n    if (s == null) {\n      return false;\n    }\n\n    return s === ' ' || s === '\\t' || s === '\\n' || s === '\\v' || s === '\\f' || s === '\\r';\n  };\n\n  isdigit = function isdigit(str) {\n    if (str == null) {\n      return false;\n    }\n\n    return /^\\d+$/.test(str);\n  };\n\n  isalpha = function isalpha(str) {\n    if (str == null) {\n      return false;\n    } //Check for non-alphabetic characters and space\n\n\n    return str.search(/[^A-Za-z]/) === -1;\n  };\n\n  isalphaOrUnderscore = function isalphaOrUnderscore(str) {\n    if (str == null) {\n      return false;\n    } //Check for non-alphabetic characters and space\n\n\n    return str.search(/[^A-Za-z_]/) === -1;\n  };\n\n  isunderscore = function isunderscore(str) {\n    if (str == null) {\n      return false;\n    }\n\n    return str.search(/_/) === -1;\n  };\n\n  isalnumorunderscore = function isalnumorunderscore(str) {\n    if (str == null) {\n      return false;\n    }\n\n    return isalphaOrUnderscore(str) || isdigit(str);\n  };\n\n  _count = function count(p) {\n    var n;\n\n    if (iscons(p)) {\n      n = 0;\n\n      while (iscons(p)) {\n        n += _count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n\n    return n;\n  }; // this probably works out to be\n  // more general than just counting symbols, it can\n  // probably count instances of anything you pass as\n  // first argument but didn't try it.\n\n\n  _countOccurrencesOfSymbol = function countOccurrencesOfSymbol(needle, p) {\n    var n;\n    n = 0;\n\n    if (iscons(p)) {\n      while (iscons(p)) {\n        n += _countOccurrencesOfSymbol(needle, car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (equal(needle, p)) {\n        n = 1;\n      }\n    }\n\n    return n;\n  }; // returns the total number of elements\n  // in an expression\n\n\n  countsize = function countsize(p) {\n    var i, l1, n, ref2;\n    n = 0;\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        n += p.tensor.elem[i];\n      }\n    } else if (iscons(p)) {\n      while (iscons(p)) {\n        n += _count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n\n    return n;\n  }; //jmp_buf stop_return, draw_stop_return\n  // s is a string here\n\n\n  stop = function stop(s) {\n    var message; //if (draw_flag == 2)\n    //  longjmp(draw_stop_return, 1)\n    //else\n\n    errorMessage += \"Stop: \";\n    errorMessage += s; //debugger\n\n    message = errorMessage;\n    errorMessage = '';\n    moveTos(0);\n    throw new Error(message);\n  }; //longjmp(stop_return, 1)\n  // Figuring out dependencies is key to automatically\n  // generating a method signature when generating JS code\n  // from algebrite scripts.\n  // This is important because the user can keep using normal Algebrite\n  // scripting without special notations.\n  // Basically the process consists of figuring out\n  // the \"ground variables\" that are needed to compute each variable.\n  // Now there are two ways of doing this:\n  //   * at parse time\n  //   * after running the scripts\n  // Doing it at parse time means that we can't track simplifications\n  // canceling-out some variables for example. But on the other side\n  // it's very quick and the user can somehow see what the signature is\n  // going to look like (assuming tha code is rather simple), or anyways\n  // is going to easily make sense of the generated signature.\n  // Doing it after execution on the other hand would allow us to see\n  // if some variable cancel-out. But if variables cancel out then\n  // they might do so according to some run-time behaviour that the user\n  // might struggle to keep track of.\n  // So the effort for the user to make sense of the signature in the first case\n  // is similar to the effort of keeping tab of types in a typed language.\n  // While in the second case the effort is similar to running the\n  // code and simplifications in her head.\n  // If we just want to compute the dependencies, we don't need to do\n  // anything costly, we don't \"run\" the code and we don't simplify\n  // the code. Just finding the plain dependencies\n  // TODO change the name of this function, as it doesn't just find the\n  // dependencies. It also runs it and generates the JS code.\n\n\n  findDependenciesInScript = function findDependenciesInScript(stringToBeParsed, dontGenerateCode) {\n    var allReturnedLatexStrings, allReturnedPlainStrings, bodyForReadableSummaryOfGeneratedCode, cyclesDescriptions, deQuotedDep, dependencyInfo, eachDependency, error, generatedBody, generatedCode, i, indexOfEachReplacement, indexOfPartRemainingToBeParsed, inited, key, l1, len, len1, len2, len3, len4, len5, len6, len7, m1, n, n1, newUserSymbol, o1, origPrintMode, originalUserSymbol, parameters, q1, r1, readableSummaryOfGeneratedCode, recursedDependencies, ref2, replacementsFrom, replacementsTo, s1, scriptEvaluation, stringToBeRun, t1, testableString, timeStartFromAlgebra, toBePrinted, u1, userVariablesMentioned, value, variablesWithCycles;\n\n    if (DEBUG) {\n      console.log(\"stringToBeParsed: \" + stringToBeParsed);\n    }\n\n    timeStartFromAlgebra = new Date().getTime();\n    inited = true;\n    codeGen = true;\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    symbolsInExpressionsWithoutAssignments = [];\n    patternHasBeenFound = false;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    n = 0; // we are going to store the dependencies _of the block as a whole_\n    // so all affected variables in the whole block are lumped\n    // together, and same for the variable that affect those, we\n    // lump them all together.\n\n    dependencyInfo = {\n      affectsVariables: [],\n      affectedBy: []\n    };\n    stringToBeRun = stringToBeParsed; // parse the input. This collects the\n    // dependency information\n\n    while (1) {\n      try {\n        errorMessage = \"\";\n        check_stack();\n\n        if (DEBUG) {\n          console.log(\"findDependenciesInScript: scanning\");\n        }\n\n        n = scan(stringToBeParsed.substring(indexOfPartRemainingToBeParsed));\n\n        if (DEBUG) {\n          console.log(\"scanned\");\n        }\n\n        pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n\n        errorMessage = error + \"\"; //debugger\n\n        reset_after_error();\n        break;\n      }\n\n      if (n === 0) {\n        break;\n      }\n\n      indexOfPartRemainingToBeParsed += n;\n    }\n\n    testableString = \"\"; // print out all local dependencies as collected by this\n    // parsing pass\n\n    if (DEBUG) {\n      console.log(\"all local dependencies ----------------\");\n    }\n\n    testableString += \"All local dependencies: \";\n\n    for (key in symbolsDependencies) {\n      value = symbolsDependencies[key];\n\n      if (DEBUG) {\n        console.log(\"variable \" + key + \" depends on: \");\n      }\n\n      dependencyInfo.affectsVariables.push(key);\n      testableString += \" variable \" + key + \" depends on: \";\n\n      for (l1 = 0, len = value.length; l1 < len; l1++) {\n        i = value[l1];\n\n        if (DEBUG) {\n          console.log(\"    \" + i);\n        }\n\n        if (i[0] !== \"'\") {\n          dependencyInfo.affectedBy.push(i);\n        }\n\n        testableString += i + \", \";\n      }\n\n      testableString += \"; \";\n    }\n\n    testableString += \". \"; // print out the symbols with re-assignments:\n\n    if (DEBUG) {\n      console.log(\"Symbols with reassignments ----------------\");\n    }\n\n    testableString += \"Symbols with reassignments: \";\n\n    for (m1 = 0, len1 = symbolsHavingReassignments.length; m1 < len1; m1++) {\n      key = symbolsHavingReassignments[m1];\n\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n\n    testableString += \". \"; // print out the symbols that appear in expressions without assignments\n\n    if (DEBUG) {\n      console.log(\"Symbols in expressions without assignments ----------------\");\n    }\n\n    testableString += \"Symbols in expressions without assignments: \";\n\n    for (n1 = 0, len2 = symbolsInExpressionsWithoutAssignments.length; n1 < len2; n1++) {\n      key = symbolsInExpressionsWithoutAssignments[n1];\n\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n\n    testableString += \". \"; // ALL Algebrite code is affected by any pattern changing\n\n    dependencyInfo.affectedBy.push(\"PATTERN_DEPENDENCY\");\n\n    if (patternHasBeenFound) {\n      dependencyInfo.affectsVariables.push(\"PATTERN_DEPENDENCY\");\n      testableString += \" - PATTERN_DEPENDENCY inserted - \";\n    } // print out all global dependencies as collected by this\n    // parsing pass\n\n\n    if (DEBUG) {\n      console.log(\"All dependencies recursively ----------------\");\n    }\n\n    testableString += \"All dependencies recursively: \";\n    scriptEvaluation = [\"\", \"\"];\n    generatedCode = \"\";\n    readableSummaryOfGeneratedCode = \"\";\n\n    if (errorMessage === \"\" && !dontGenerateCode) {\n      try {\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n        scriptEvaluation = run(stringToBeParsed, true);\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n      } catch (error1) {\n        error = error1;\n\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n\n        errorMessage = error + \"\"; //debugger\n\n        init();\n      }\n\n      if (errorMessage === \"\") {\n        for (key in symbolsDependencies) {\n          codeGen = true;\n\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          }\n\n          codeGen = false;\n\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" depends on: \");\n          }\n\n          testableString += \" variable \" + key + \" depends on: \";\n          recursedDependencies = [];\n          variablesWithCycles = [];\n          cyclesDescriptions = [];\n\n          _recursiveDependencies(key, recursedDependencies, [], variablesWithCycles, [], cyclesDescriptions);\n\n          for (o1 = 0, len3 = variablesWithCycles.length; o1 < len3; o1++) {\n            i = variablesWithCycles[o1];\n\n            if (DEBUG) {\n              console.log(\"    --> cycle through \" + i);\n            }\n          }\n\n          for (q1 = 0, len4 = recursedDependencies.length; q1 < len4; q1++) {\n            i = recursedDependencies[q1];\n\n            if (DEBUG) {\n              console.log(\"    \" + i);\n            }\n\n            testableString += i + \", \";\n          }\n\n          testableString += \"; \";\n\n          for (r1 = 0, len5 = cyclesDescriptions.length; r1 < len5; r1++) {\n            i = cyclesDescriptions[r1];\n            testableString += \" \" + i + \", \";\n          }\n\n          if (DEBUG) {\n            console.log(\"  code generation:\" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          } // we really want to make an extra effort\n          // to generate simplified code, so\n          // run a \"simplify\" on the content of each\n          // variable that we are generating code for.\n          // Note that the variable\n          // will still point to un-simplified structures,\n          // we only simplify the generated code.\n\n\n          push(get_binding(usr_symbol(key))); // Since we go and simplify all variables we meet,\n          // we have to replace each variable passed as a parameter\n          // with something entirely new, so that there is no chance\n          // that it might evoke previous values in the external scope\n          // as in this case:\n          //  a = 2\n          //  f(a) = a+1+b\n          // we don't want 'a' in the body of f to be simplified to 2\n          // There are two cases: 1) the variable actually was already in\n          // the symbol table, in which case there is going to be this new\n          // one prepended with AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE, and\n          // we'll have to remove up this variable later.\n          // OR 2) the variable wasn't already in the symbol table, in which\n          // case we directly create this one, which means that we'll have\n          // to rename it later to the correct name without the prepended\n          // part.\n\n          replacementsFrom = [];\n          replacementsTo = [];\n\n          for (s1 = 0, len6 = recursedDependencies.length; s1 < len6; s1++) {\n            eachDependency = recursedDependencies[s1];\n\n            if (eachDependency[0] === \"'\") {\n              deQuotedDep = eachDependency.substring(1);\n              originalUserSymbol = usr_symbol(deQuotedDep);\n              newUserSymbol = usr_symbol(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\" + deQuotedDep);\n              replacementsFrom.push(originalUserSymbol);\n              replacementsTo.push(newUserSymbol);\n              push(originalUserSymbol);\n              push(newUserSymbol);\n\n              _subst();\n\n              if (DEBUG) {\n                console.log(\"after substitution: \" + stack[tos - 1]);\n              }\n            }\n          }\n\n          try {\n            simplifyForCodeGeneration();\n          } catch (error1) {\n            error = error1;\n\n            if (PRINTOUTRESULT) {\n              console.log(error);\n            }\n\n            errorMessage = error + \"\"; //debugger\n\n            init();\n          }\n\n          for (indexOfEachReplacement = t1 = 0, ref2 = replacementsFrom.length; 0 <= ref2 ? t1 < ref2 : t1 > ref2; indexOfEachReplacement = 0 <= ref2 ? ++t1 : --t1) {\n            //console.log \"replacing back \" + replacementsTo[indexOfEachReplacement] + \" into: \" + replacementsFrom[indexOfEachReplacement]\n            push(replacementsTo[indexOfEachReplacement]);\n            push(replacementsFrom[indexOfEachReplacement]);\n\n            _subst();\n          }\n\n          clearRenamedVariablesToAvoidBindingToExternalScope();\n\n          if (errorMessage === \"\") {\n            toBePrinted = pop(); // we have to get all the variables used on the right side\n            // here. I.e. to print the arguments it's better to look at the\n            // actual method body after simplification.\n\n            userVariablesMentioned = [];\n\n            _collectUserSymbols(toBePrinted, userVariablesMentioned);\n\n            allReturnedPlainStrings = \"\";\n            allReturnedLatexStrings = \"\";\n            codeGen = true;\n            generatedBody = toBePrinted.toString();\n            codeGen = false;\n            origPrintMode = printMode;\n            printMode = PRINTMODE_LATEX;\n            bodyForReadableSummaryOfGeneratedCode = toBePrinted.toString();\n            printMode = origPrintMode;\n\n            if (variablesWithCycles.indexOf(key) !== -1) {\n              generatedCode += \"// \" + key + \" is part of a cyclic dependency, no code generated.\";\n              readableSummaryOfGeneratedCode += \"#\" + key + \" is part of a cyclic dependency, no code generated.\";\n            } else {\n              /*\n               * using this paragraph instead of the following one\n               * creates methods signatures that\n               * are slightly less efficient\n               * i.e. variables compare even if they are\n               * simplified away.\n               * In theory these signatures are more stable, but\n               * in practice signatures vary quite a bit anyways\n               * depending on previous assignments for example,\n               * so it's unclear whether going for stability\n               * is sensible at all..\n              if recursedDependencies.length != 0\n                parameters = \"(\"\n                for i in recursedDependencies\n                  if i.indexOf(\"'\") != 0\n                    parameters += i + \", \"\n                  else\n                    if recursedDependencies.indexOf(i.substring(1)) == -1\n                      parameters += i.substring(1) + \", \"\n               */\n              // remove all native functions from the\n              // parameters as well.\n              userVariablesMentioned = userVariablesMentioned.filter(function (x) {\n                return predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(x + \"\") === -1;\n              }); // remove the variable that are not in the dependency list\n              // i.e. only allow the variables that are in the dependency list\n\n              userVariablesMentioned = userVariablesMentioned.filter(function (x) {\n                return recursedDependencies.indexOf(x + \"\") !== -1 || recursedDependencies.indexOf(\"\\'\" + x + \"\") !== -1;\n              });\n\n              if (userVariablesMentioned.length !== 0) {\n                parameters = \"(\";\n\n                for (u1 = 0, len7 = userVariablesMentioned.length; u1 < len7; u1++) {\n                  i = userVariablesMentioned[u1];\n\n                  if (i.printname !== key) {\n                    parameters += i.printname + \", \";\n                  }\n                } // eliminate the last \", \" for printout clarity\n\n\n                parameters = parameters.replace(/, $/gm, \"\");\n                parameters += \")\";\n                generatedCode += key + \" = function \" + parameters + \" { return ( \" + generatedBody + \" ); }\";\n                readableSummaryOfGeneratedCode += key + parameters + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              } else {\n                generatedCode += key + \" = \" + generatedBody + \";\";\n                readableSummaryOfGeneratedCode += key + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              }\n            }\n\n            generatedCode += \"\\n\";\n            readableSummaryOfGeneratedCode += \"\\n\";\n\n            if (DEBUG) {\n              console.log(\"    \" + generatedCode);\n            }\n          }\n        }\n      }\n    } // eliminate the last new line\n\n\n    generatedCode = generatedCode.replace(/\\n$/gm, \"\");\n    readableSummaryOfGeneratedCode = readableSummaryOfGeneratedCode.replace(/\\n$/gm, \"\"); // cleanup\n\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    patternHasBeenFound = false;\n    symbolsInExpressionsWithoutAssignments = [];\n\n    if (DEBUG) {\n      console.log(\"testable string: \" + testableString);\n    }\n\n    if (TIMING_DEBUGS) {\n      console.log(\"findDependenciesInScript time for: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStartFromAlgebra) + \"ms\");\n    }\n\n    return [testableString, scriptEvaluation[0], generatedCode, readableSummaryOfGeneratedCode, scriptEvaluation[1], errorMessage, dependencyInfo];\n  };\n\n  _recursiveDependencies = function recursiveDependencies(variableToBeChecked, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions) {\n    var cyclesDescription, i, k, l1, len, len1, m1, ref2;\n    variablesAlreadyFleshedOut.push(variableToBeChecked); // recursive dependencies can only be descended if the variable is not bound to a parameter\n\n    if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]] != null) {\n      if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]].indexOf(\"'\" + variableToBeChecked) !== -1) {\n        if (DEBUG) {\n          console.log(\"can't keep following the chain of \" + variableToBeChecked + \" because it's actually a variable bound to a parameter\");\n        }\n\n        if (arrayWhereDependenciesWillBeAdded.indexOf(\"'\" + variableToBeChecked) === -1 && arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n          arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n        }\n\n        return arrayWhereDependenciesWillBeAdded;\n      }\n    }\n\n    chainBeingChecked.push(variableToBeChecked);\n\n    if (symbolsDependencies[variableToBeChecked] == null) {\n      // end case: the passed variable has no dependencies\n      // so there is nothing else to do\n      if (arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n        arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n      }\n\n      return arrayWhereDependenciesWillBeAdded;\n    } else {\n      ref2 = symbolsDependencies[variableToBeChecked]; // recursion case: we have to dig deeper\n\n      for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n        i = ref2[l1]; // check that there is no recursion in dependencies\n        // we do that by keeping a list of variables that\n        // have already been \"fleshed-out\". If we encounter\n        // any of those \"fleshed-out\" variables while\n        // fleshing out, then there is a cycle \n\n        if (chainBeingChecked.indexOf(i) !== -1) {\n          if (DEBUG) {\n            console.log(\"  found cycle:\");\n          }\n\n          cyclesDescription = \"\";\n\n          for (m1 = 0, len1 = chainBeingChecked.length; m1 < len1; m1++) {\n            k = chainBeingChecked[m1];\n\n            if (variablesWithCycles.indexOf(k) === -1) {\n              variablesWithCycles.push(k);\n            }\n\n            if (DEBUG) {\n              console.log(k + \" --> \");\n            }\n\n            cyclesDescription += k + \" --> \";\n          }\n\n          if (DEBUG) {\n            console.log(\" ... then \" + i + \" again\");\n          }\n\n          cyclesDescription += \" ... then \" + i + \" again\";\n          cyclesDescriptions.push(cyclesDescription); //if DEBUG then console.log \"    --> cycle through \" + i\n          // we want to flesh-out i but it's already been\n          // fleshed-out, just add it to the variables\n          // with cycles and move on\n          // todo refactor this, there are two copies of these two lines\n\n          if (variablesWithCycles.indexOf(i) === -1) {\n            variablesWithCycles.push(i);\n          }\n        } else {\n          // flesh-out i recursively\n          _recursiveDependencies(i, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions);\n\n          chainBeingChecked.pop();\n        }\n      } //variablesAlreadyFleshedOut.pop()\n\n\n      return arrayWhereDependenciesWillBeAdded;\n    }\n  }; // parses and runs one statement/expression at a time\n\n\n  inited = false;\n  latexErrorSign = \"\\\\rlap{\\\\large\\\\color{red}\\\\bigtriangleup}{\\\\ \\\\ \\\\tiny\\\\color{red}!}\";\n\n  turnErrorMessageToLatex = function turnErrorMessageToLatex(theErrorMessage) {\n    theErrorMessage = theErrorMessage.replace(/\\n/g, \"\");\n    theErrorMessage = theErrorMessage.replace(/_/g, \"} \\\\_ \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(transpose_unicode), 'g'), \"}{}^{T}\\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(dotprod_unicode), 'g'), \"}\\\\cdot \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"Stop:\", \"}  \\\\quad \\\\text{Stop:\");\n    theErrorMessage = theErrorMessage.replace(\"->\", \"}  \\\\rightarrow \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"?\", \"}\\\\enspace \" + latexErrorSign + \" \\\\enspace  \\\\text{\");\n    theErrorMessage = \"$$\\\\text{\" + theErrorMessage.replace(/\\n/g, \"\") + \"}$$\"; //console.log \"theErrorMessage: \" + theErrorMessage\n\n    return theErrorMessage;\n  }; // there are around a dozen different unicodes that\n  // represent some sort of middle dot, let's catch the most\n  // common and turn them into what we can process\n\n\n  normaliseDots = function normaliseDots(stringToNormalise) {\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8901), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8226), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(12539), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(55296), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(65381), 'g'), String.fromCharCode(dotprod_unicode));\n    return stringToNormalise;\n  };\n\n  TIMING_DEBUGS = false;\n\n  run = function run(stringToBeRun) {\n    var generateLatex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var allReturnedLatexStrings, allReturnedPlainStrings, collectedLatexResult, collectedPlainResult, error, errorWhileExecution, i, indexOfPartRemainingToBeParsed, n, stringToBeReturned, theErrorMessage, timeStart, timingDebugWrite;\n    timeStart = new Date().getTime(); //stringToBeRun = stringToBeRun + \"\\n\"\n\n    stringToBeRun = normaliseDots(stringToBeRun); //console.log \"run running: \" + stringToBeRun\n\n    if (stringToBeRun === \"selftest\") {\n      selftest();\n      return;\n    }\n\n    if (!inited) {\n      inited = true;\n      init();\n    }\n\n    i = 0;\n    n = 0;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n\n    while (1) {\n      try {\n        // while we can keep scanning commands out of the\n        // passed input AND we can execute them...\n        errorMessage = \"\";\n        check_stack();\n        n = scan(stringToBeRun.substring(indexOfPartRemainingToBeParsed));\n        p1 = pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        } //debugger\n\n\n        allReturnedPlainStrings += error.message;\n\n        if (generateLatex) {\n          //debugger\n          theErrorMessage = turnErrorMessageToLatex(error.message);\n          allReturnedLatexStrings += theErrorMessage;\n        }\n\n        reset_after_error();\n        break;\n      }\n\n      if (n === 0) {\n        break;\n      } // if debug mode then print the source text\n      //if (equaln(get_binding(symbol(TRACE)), 1)) {\n      //  for (i = 0 i < n i++)\n      //    if (s[i] != '\\r')\n      //      printchar(s[i])\n      //  if (s[n - 1] != '\\n') # n is not zero, see above\n      //    printchar('\\n')\n      //}\n\n\n      indexOfPartRemainingToBeParsed += n;\n      push(p1); //debugger\n\n      errorWhileExecution = false;\n\n      try {\n        stringsEmittedByUserPrintouts = \"\";\n        top_level_eval(); //console.log \"emitted string after top_level_eval(): >\" + stringsEmittedByUserPrintouts + \"<\"\n        //console.log \"allReturnedPlainStrings string after top_level_eval(): >\" + allReturnedPlainStrings + \"<\"\n\n        p2 = pop();\n        check_stack();\n\n        if (isstr(p2)) {\n          if (DEBUG) {\n            console.log(p2.str);\n          }\n\n          if (DEBUG) {\n            console.log(\"\\n\");\n          }\n        } // if the return value is nil there isn't much point\n        // in adding \"nil\" to the printout\n\n\n        if (p2 === symbol(NIL)) {\n          //collectedPlainResult = stringsEmittedByUserPrintouts\n          collectedPlainResult = stringsEmittedByUserPrintouts;\n\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + stringsEmittedByUserPrintouts + \"$$\";\n          }\n        } else {\n          //console.log \"emitted string before collectPlainStringFromReturnValue: >\" + stringsEmittedByUserPrintouts + \"<\"\n          //console.log \"allReturnedPlainStrings string before collectPlainStringFromReturnValue: >\" + allReturnedPlainStrings + \"<\"\n          collectedPlainResult = print_expr(p2);\n          collectedPlainResult += \"\\n\"; //console.log \"collectedPlainResult: >\" + collectedPlainResult + \"<\"\n\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + collectLatexStringFromReturnValue(p2) + \"$$\";\n\n            if (DEBUG) {\n              console.log(\"collectedLatexResult: \" + collectedLatexResult);\n            }\n          }\n        }\n\n        allReturnedPlainStrings += collectedPlainResult;\n\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n        }\n\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"printline\");\n          }\n\n          if (DEBUG) {\n            console.log(collectedPlainResult);\n          }\n        } //alert collectedPlainResult\n\n\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"display:\");\n          }\n\n          print2dascii(p2);\n        }\n\n        if (generateLatex) {\n          allReturnedLatexStrings += \"\\n\";\n        }\n      } catch (error1) {\n        error = error1;\n        errorWhileExecution = true;\n        collectedPlainResult = error.message;\n\n        if (generateLatex) {\n          collectedLatexResult = turnErrorMessageToLatex(error.message);\n        }\n\n        if (PRINTOUTRESULT) {\n          console.log(collectedPlainResult);\n        }\n\n        allReturnedPlainStrings += collectedPlainResult;\n\n        if (collectedPlainResult !== \"\") {\n          allReturnedPlainStrings += \"\\n\";\n        }\n\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n          allReturnedLatexStrings += \"\\n\";\n        }\n\n        init();\n      }\n    }\n\n    if (allReturnedPlainStrings[allReturnedPlainStrings.length - 1] === \"\\n\") {\n      allReturnedPlainStrings = allReturnedPlainStrings.substring(0, allReturnedPlainStrings.length - 1);\n    }\n\n    if (generateLatex) {\n      if (allReturnedLatexStrings[allReturnedLatexStrings.length - 1] === \"\\n\") {\n        allReturnedLatexStrings = allReturnedLatexStrings.substring(0, allReturnedLatexStrings.length - 1);\n      }\n    }\n\n    if (generateLatex) {\n      if (DEBUG) {\n        console.log(\"allReturnedLatexStrings: \" + allReturnedLatexStrings);\n      }\n\n      stringToBeReturned = [allReturnedPlainStrings, allReturnedLatexStrings];\n    } else {\n      stringToBeReturned = allReturnedPlainStrings;\n    }\n\n    if (TIMING_DEBUGS) {\n      timingDebugWrite = \"run time on: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStart) + \"ms\";\n      console.log(timingDebugWrite);\n    }\n\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    return stringToBeReturned;\n  };\n\n  check_stack = function check_stack() {\n    if (tos !== 0) {\n      debugger;\n      stop(\"stack error\");\n    }\n\n    if (frame !== TOS) {\n      debugger;\n      stop(\"frame error\");\n    }\n\n    if (chainOfUserSymbolsNotFunctionsBeingEvaluated.length !== 0) {\n      debugger;\n      stop(\"symbols evaluation still ongoing?\");\n    }\n\n    if (evaluatingAsFloats !== 0) {\n      debugger;\n      stop(\"numeric evaluation still ongoing?\");\n    }\n\n    if (evaluatingPolar !== 0) {\n      debugger;\n      return stop(\"evaluation of polar still ongoing?\");\n    }\n  }; // cannot reference symbols yet\n  // returns nil on stack if no result to print\n\n\n  top_level_eval = function top_level_eval() {\n    var evalledArgument, originalArgument, shouldAutoexpand;\n\n    if (DEBUG) {\n      console.log(\"#### top level eval\");\n    }\n\n    trigmode = 0;\n    shouldAutoexpand = symbol(AUTOEXPAND);\n\n    if (isZeroAtomOrTensor(get_binding(shouldAutoexpand))) {\n      expanding = 0;\n    } else {\n      expanding = 1;\n    }\n\n    originalArgument = top();\n    Eval();\n    evalledArgument = top(); // \"draw\", \"for\" and \"setq\" return \"nil\", there is no result to print\n\n    if (evalledArgument === symbol(NIL)) {\n      return;\n    } // update \"last\" to contain the last result\n\n\n    set_binding(symbol(LAST), evalledArgument);\n\n    if (!isZeroAtomOrTensor(get_binding(symbol(BAKE)))) {\n      _bake();\n\n      evalledArgument = top();\n    } // If user asked explicitly asked to evaluate \"i\" or \"j\" and\n    // they represent the imaginary unit (-1)^(1/2), then \n    // show (-1)^(1/2).\n\n\n    if ((originalArgument === symbol(SYMBOL_I) || originalArgument === symbol(SYMBOL_J)) && isimaginaryunit(evalledArgument)) {// In all other cases, replace all instances of (-1)^(1/2) in the result\n      // with the symbol \"i\" or \"j\" depending on which one\n      // represents the imaginary unit\n    } else if (isimaginaryunit(get_binding(symbol(SYMBOL_J)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_J);\n      return _subst();\n    } else if (isimaginaryunit(get_binding(symbol(SYMBOL_I)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_I);\n      return _subst();\n    }\n  };\n\n  check_esc_flag = function check_esc_flag() {\n    if (esc_flag) {\n      return stop(\"esc key\");\n    }\n  }; // this is called when the whole notebook is re-run\n  // so we get the chance of clearing the whole state from\n  // scratch.\n  // In practice, the state we need to clear that persists\n  // across blocks are only the patterns, so\n  // just eject those.\n\n\n  clearAlgebraEnvironment = function clearAlgebraEnvironment() {\n    //console.log \"CLEARING clearAlgebraEnvironment =============================================================\"\n    return do_clearall();\n  };\n\n  computeDependenciesFromAlgebra = function computeDependenciesFromAlgebra(codeFromAlgebraBlock) {\n    var i, keepState, l1, len, len1, m1, originalcodeFromAlgebraBlock, userSimplificationsInProgramForm;\n\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra!!!\");\n    } // return findDependenciesInScript(codeFromAlgebraBlock, true)[6]\n    // TODO this part below is duplicated from computeResultsAndJavaScriptFromAlgebra\n    //      ...should refactor.\n\n\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true; //console.log \"codeFromAlgebraBlock: \" + codeFromAlgebraBlock\n\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1]; //console.log \"silentpattern(\" + car(i) + \",\"+cdr(i)+\")\"\n\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    }\n\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra: patterns in the list --------------- \");\n\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n\n      console.log(\"...end of list --------------- \");\n    }\n\n    called_from_Algebra_block = false;\n    return findDependenciesInScript(codeFromAlgebraBlock, true)[6];\n  };\n\n  computeResultsAndJavaScriptFromAlgebra = function computeResultsAndJavaScriptFromAlgebra(codeFromAlgebraBlock) {\n    var code, dependencyInfo, i, keepState, l1, latexResult, len, len1, m1, originalcodeFromAlgebraBlock, readableSummaryOfCode, result, stringToBeRun, testableStringIsIgnoredHere, timeStartFromAlgebra, userSimplificationsInProgramForm;\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true;\n    timeStartFromAlgebra = new Date().getTime();\n\n    if (TIMING_DEBUGS) {\n      console.log(\" --------- computeResultsAndJavaScriptFromAlgebra input: \" + codeFromAlgebraBlock + \" at: \" + new Date());\n    } // we start \"clean\" each time:\n    // clear all the symbols and then re-define\n    // the \"starting\" symbols.\n    //console.log \"codeFromAlgebraBlock: \" + codeFromAlgebraBlock\n\n\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n    stringToBeRun = codeFromAlgebraBlock;\n\n    if (DEBUG) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra: patterns in the list --------------- \");\n\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n\n      console.log(\"...end of list --------------- \");\n    }\n\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1]; //console.log \"silentpattern(\" + car(i) + \",\"+cdr(i)+\")\"\n\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    } //debugger\n\n\n    var _findDependenciesInSc = findDependenciesInScript(codeFromAlgebraBlock);\n\n    var _findDependenciesInSc2 = _slicedToArray(_findDependenciesInSc, 7);\n\n    testableStringIsIgnoredHere = _findDependenciesInSc2[0];\n    result = _findDependenciesInSc2[1];\n    code = _findDependenciesInSc2[2];\n    readableSummaryOfCode = _findDependenciesInSc2[3];\n    latexResult = _findDependenciesInSc2[4];\n    errorMessage = _findDependenciesInSc2[5];\n    dependencyInfo = _findDependenciesInSc2[6];\n    called_from_Algebra_block = false;\n\n    if (readableSummaryOfCode !== \"\" || errorMessage !== \"\") {\n      result += \"\\n\" + readableSummaryOfCode;\n\n      if (errorMessage !== \"\") {\n        result += \"\\n\" + errorMessage;\n      }\n\n      result = result.replace(/\\n/g, \"\\n\\n\");\n      latexResult += \"\\n\" + \"$$\" + readableSummaryOfCode + \"$$\";\n\n      if (errorMessage !== \"\") {\n        latexResult += turnErrorMessageToLatex(errorMessage);\n      }\n\n      latexResult = latexResult.replace(/\\n/g, \"\\n\\n\");\n    } // remove empty results altogether from latex output, which happens\n    // for example for assignments to variables or\n    // functions definitions\n\n\n    latexResult = latexResult.replace(/\\n*/, \"\");\n    latexResult = latexResult.replace(/\\$\\$\\$\\$\\n*/g, \"\");\n    code = code.replace(/Math\\./g, \"\");\n    code = code.replace(/\\n/g, \"\\n\\n\"); //console.log \"code: \" + code\n    //console.log \"result: \" + result\n    //console.log \"latexResult: \" + latexResult\n\n    if (TIMING_DEBUGS) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra time (total time from notebook and back) for: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStartFromAlgebra) + \"ms\");\n    }\n\n    return {\n      //code: \"// no code generated yet\\n//try again later\"\n      //code: \"console.log('some passed code is run'); window.something = 1;\"\n      code: code,\n      // TODO temporarily pass latex in place of standard result too\n      result: latexResult,\n      latexResult: latexResult,\n      dependencyInfo: dependencyInfo\n    };\n  };\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).run = run;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).findDependenciesInScript = findDependenciesInScript;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeDependenciesFromAlgebra = computeDependenciesFromAlgebra;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeResultsAndJavaScriptFromAlgebra = computeResultsAndJavaScriptFromAlgebra;\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).clearAlgebraEnvironment = clearAlgebraEnvironment; //   _______\n  //  |  | <- stack\n  //  |  |\n  //  |_______|\n  //  |  | <- stack + tos\n  //  |  |\n  //  |  |\n  //  |_______|\n  //  |  | <- frame\n  //  |_______|\n  //      <- stack + TOS\n  //  The stack grows from low memory towards high memory. This is so that\n  //  multiple expressions can be pushed on the stack and then accessed as an\n  //  array.\n  //  The frame area holds local variables and grows from high memory towards\n  //  low memory. The frame area makes local variables visible to the garbage\n  //  collector.\n\n  tos = 0; // p is a U\n\n  nil_symbols = 0;\n\n  push = function push(p) {\n    if (p == null) {\n      debugger;\n    }\n\n    if (p.isZero != null) {\n      debugger;\n    } //console.log \"pushing \"\n    //console.log print_list(p)\n\n\n    if (p === symbol(NIL)) {\n      nil_symbols++;\n\n      if (DEBUG) {\n        console.log(\"pushing symbol(NIL) #\" + nil_symbols);\n      }\n    } //if nil_symbols == 111\n    //  debugger\n\n\n    if (tos >= frame) {\n      stop(\"stack overflow\");\n    }\n\n    return stack[tos++] = p;\n  }; // returns a U\n\n\n  moveTos = function moveTos(stackPos) {\n    if (tos <= stackPos) {\n      // we are moving the stack pointer\n      // \"up\" the stack (as if we were doing a push)\n      tos = stackPos;\n      return;\n    } // we are moving the stack pointer\n    // \"down\" the stack i.e. as if we were\n    // doing a pop, we can zero-\n    // out all the elements that we pass\n    // so we can reclaim the memory\n\n\n    while (tos > stackPos) {\n      stack[tos] = null;\n      tos--;\n    }\n  };\n\n  top = function top() {\n    return stack[tos - 1];\n  };\n\n  pop = function pop() {\n    var elementToBeReturned; //popsNum++\n    //console.log \"pop #\" + popsNum\n\n    if (tos === 0) {\n      debugger;\n      stop(\"stack underflow\");\n    }\n\n    if (stack[tos - 1] == null) {\n      debugger;\n    }\n\n    elementToBeReturned = stack[--tos]; // give a chance to the garbage\n    // collection to reclaim space\n    // This is JS-specific, it would\n    // actually make the C garbage\n    // collector useless.\n\n    stack[tos] = null;\n    return elementToBeReturned;\n  }; // n is an integer\n\n\n  push_frame = function push_frame(n) {\n    var i, l1, ref2, results;\n    i = 0;\n    frame -= n;\n\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n\n    results = [];\n\n    for (i = l1 = 0, ref2 = n; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      results.push(stack[frame + i] = symbol(NIL));\n    }\n\n    return results;\n  }; // n is an integer\n\n\n  pop_frame = function pop_frame(n) {\n    frame += n;\n\n    if (frame > TOS) {\n      return stop(\"frame underflow\");\n    }\n  };\n\n  save = function save() {\n    frame -= 10;\n\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n\n    stack[frame + 0] = p0;\n    stack[frame + 1] = p1;\n    stack[frame + 2] = p2;\n    stack[frame + 3] = p3;\n    stack[frame + 4] = p4;\n    stack[frame + 5] = p5;\n    stack[frame + 6] = p6;\n    stack[frame + 7] = p7;\n    stack[frame + 8] = p8;\n    return stack[frame + 9] = p9;\n  };\n\n  restore = function restore() {\n    if (frame > TOS - 10) {\n      stop(\"frame underflow\");\n    }\n\n    p0 = stack[frame + 0];\n    p1 = stack[frame + 1];\n    p2 = stack[frame + 2];\n    p3 = stack[frame + 3];\n    p4 = stack[frame + 4];\n    p5 = stack[frame + 5];\n    p6 = stack[frame + 6];\n    p7 = stack[frame + 7];\n    p8 = stack[frame + 8];\n    p9 = stack[frame + 9];\n    return frame += 10;\n  }; // Local U * is OK here because there is no functional path to the garbage collector.\n\n\n  swap = function swap() {\n    var p, q; //U *p, *q\n    // p and q are both Us\n\n    p = pop();\n    q = pop();\n    push(p);\n    return push(q);\n  }; // Local U * is OK here because there is no functional path to the garbage collector.\n\n\n  dupl = function dupl() {\n    var p; //U *p\n\n    p = pop();\n    push(p);\n    return push(p);\n  };\n\n  $.dupl = dupl;\n  $.swap = swap;\n  $.restore = restore;\n  $.save = save;\n  $.push = push;\n  $.pop = pop; // The symbol table is a simple array of struct U.\n  // put symbol at index n\n\n  Eval_symbolsinfo = function Eval_symbolsinfo() {\n    var symbolsinfoToBePrinted;\n    symbolsinfoToBePrinted = symbolsinfo();\n\n    if (symbolsinfoToBePrinted !== \"\") {\n      return push(new_string(symbolsinfoToBePrinted));\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  symbolsinfo = function symbolsinfo() {\n    var bindingi, i, l1, ref2, ref3, symbolsinfoToBePrinted, symtabi;\n    symbolsinfoToBePrinted = \"\";\n\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      symtabi = symtab[i] + \"\";\n      bindingi = (binding[i] + \"\").substring(0, 4);\n      symbolsinfoToBePrinted += \"symbol: \" + symtabi + \" size: \" + countsize(binding[i]) + \" value: \" + bindingi + \"...\\n\";\n    }\n\n    return symbolsinfoToBePrinted;\n  }; // s is a string, n is an int\n  // TODO: elsewhere when we create a symbol we\n  // rather prefer to create a new entry. Here we just\n  // reuse the existing one. If that can never be a problem\n  // then explain why, otherwise do create a new entry.\n\n\n  std_symbol = function std_symbol(s, n, latexPrint) {\n    var p;\n    p = symtab[n];\n\n    if (p == null) {\n      debugger;\n    }\n\n    p.printname = s;\n\n    if (latexPrint != null) {\n      return p.latexPrint = latexPrint;\n    } else {\n      return p.latexPrint = s;\n    }\n  }; // symbol lookup, or symbol creation if symbol doesn't exist yet\n  // this happens often from the scanner. When the scanner sees something\n  // like myVar = 2, it create a tree (SETQ (\"myVar\" symbol as created/looked up here (2)))\n  // user-defined functions also have a usr symbol.\n  // Note that some symbols like, say, \"abs\",\n  // are picked up by the scanner directly as keywords,\n  // so they are not looked up via this.\n  // So in fact you could redefine abs to be abs(x) = x\n  // but still abs would be picked up by the scanner as a particular\n  // node type and calls to abs() will be always to the \"native\" abs\n  // Also note that some symbols such as \"zero\" are (strangely) not picked up by\n  // the scanner as special nodes, rather they are identified as keywords\n  // (e.g. not redefinable) at time of symbol lookup (in Eval_sym) and\n  // evalled, where eval has a case for ZERO.\n  // Also note that there are a number of symbols, such as a,b,c,x,y,z,...\n  // that are actually created by std_symbols.\n  // They are not special node types (like abs), they are normal symbols\n  // that are looked up, but the advantage is that since they are often\n  // used internally by algebrite, we create the symbol in advance and\n  // we can reference the symbol entry in a clean way\n  // (e.g. symbol(SYMBOL_X)) rather than\n  // by looking up a string.\n  // s is a string\n\n\n  usr_symbol = function usr_symbol(s) {\n    var i, l1, ref2; //console.log \"usr_symbol of \" + s\n    //if s == \"aaa\"\n    //  debugger\n    // find either the existing symbol, or if we\n    // reach an empty symbol (printname == \"\") then\n    // re-use that location.\n\n    i = 0;\n\n    for (i = l1 = 0, ref2 = NSYM; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      if (s === symtab[i].printname) {\n        // found the symbol\n        return symtab[i];\n      }\n\n      if (symtab[i].printname === \"\") {\n        // found an entry in the symbol table\n        // with no printname, exit the loop\n        // and re-use this location\n        break;\n      }\n    }\n\n    if (i === NSYM) {\n      stop(\"symbol table overflow\");\n    }\n\n    symtab[i] = new U();\n    symtab[i].k = SYM;\n    symtab[i].printname = s; // say that we just created the symbol\n    // then, binding[the new symbol entry]\n    // by default points to the symbol.\n    // So the value of an unassigned symbol will\n    // be just its name.\n\n    binding[i] = symtab[i];\n    isSymbolReclaimable[i] = false;\n    return symtab[i];\n  }; // get the symbol's printname\n  // p is a U\n\n\n  get_printname = function get_printname(p) {\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n\n    return p.printname;\n  }; // p and q are both U\n  // there are two Us at play here. One belongs to the\n  // symtab array and is the variable name.\n  // The other one is the U with the content, and that\n  // one will go in the corresponding \"binding\" array entry.\n\n\n  set_binding = function set_binding(p, q) {\n    var indexFound;\n\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    } //console.log \"setting binding of \" + p.toString() + \" to: \" + q.toString()\n    //if p.toString() == \"aaa\"\n    //  debugger\n\n\n    indexFound = symtab.indexOf(p);\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n    */\n\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n\n    if (DEBUG) {\n      console.log(\"lookup >> set_binding lookup \" + indexFound);\n    }\n\n    isSymbolReclaimable[indexFound] = false;\n    return binding[indexFound] = q;\n  }; // p is a U\n\n\n  get_binding = function get_binding(p) {\n    var indexFound;\n\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    } //console.log \"getting binding of \" + p.toString()\n    //if p.toString() == \"aaa\"\n    //  debugger\n\n\n    indexFound = symtab.indexOf(p);\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n    */\n\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n\n    if (DEBUG) {\n      console.log(\"lookup >> get_binding lookup \" + indexFound);\n    } //if indexFound == 139\n    //  debugger\n    //if indexFound == 137\n    //  debugger\n\n\n    return binding[indexFound];\n  }; // the concept of user symbol is a little fuzzy\n  // beucase mathematics is full of symbols that actually\n  // have a special meaning, e.g. e,i,I in some cases j...\n\n\n  is_usr_symbol = function is_usr_symbol(p) {\n    var theSymnum;\n\n    if (p.k !== SYM) {\n      return false;\n    }\n\n    theSymnum = symnum(p); // see \"defs\" file for the naming of the symbols\n\n    if (theSymnum > PI && theSymnum !== SYMBOL_I && theSymnum !== SYMBOL_IDENTITY_MATRIX) {\n      return true;\n    }\n\n    return false;\n  }; // get symbol's number from ptr\n  // p is U\n\n\n  lookupsTotal = 0;\n\n  symnum = function symnum(p) {\n    var indexFound;\n    lookupsTotal++;\n\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n\n    indexFound = symtab.indexOf(p);\n\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n\n    if (DEBUG) {\n      console.log(\"lookup >> symnum lookup \" + indexFound + \" lookup # \" + lookupsTotal);\n    } //if lookupsTotal == 21\n    //  debugger\n    //if indexFound == 79\n    //  debugger\n\n\n    return indexFound;\n  }; // push indexed symbol\n  // k is an int\n\n\n  push_symbol = function push_symbol(k) {\n    return push(symtab[k]);\n  };\n\n  clear_symbols = function clear_symbols() {\n    var i, l1, ref2, ref3, results; // we can clear just what's assignable.\n    // everything before NIL is not assignable,\n    // so there is no need to clear it.\n\n    results = [];\n\n    for (i = l1 = ref2 = NIL + 1, ref3 = NSYM; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      // stop at the first empty\n      // entry that is not reclaimable\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      results.push(isSymbolReclaimable[i] = false);\n    }\n\n    return results;\n  }; //symtab[i].printname = \"\"\n  //binding[i] = symtab[i]\n  // collect all the variables in a tree\n\n\n  _collectUserSymbols = function collectUserSymbols(p) {\n    var accumulator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var i, l1, ref2;\n\n    if (is_usr_symbol(p)) {\n      if (accumulator.indexOf(p) === -1) {\n        accumulator.push(p);\n        return;\n      }\n    }\n\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n        _collectUserSymbols(p.tensor.elem[i], accumulator);\n      }\n\n      return;\n    }\n\n    while (iscons(p)) {\n      _collectUserSymbols(car(p), accumulator);\n\n      p = cdr(p);\n    }\n  };\n\n  $.get_binding = get_binding;\n  $.set_binding = set_binding;\n  $.usr_symbol = usr_symbol;\n  $.symbolsinfo = symbolsinfo;\n  $.collectUserSymbols = _collectUserSymbols;\n\n  if (!inited) {\n    inited = true;\n    init();\n  }\n\n  $.init = init;\n\n  parse_internal = function parse_internal(argu) {\n    if (typeof argu === 'string') {\n      return scan(argu); // now its in the stack\n    } else if (typeof argu === 'number') {\n      if (argu % 1 === 0) {\n        return push_integer(argu);\n      } else {\n        return push_double(argu);\n      }\n    } else if (argu instanceof U) {\n      // hey look its a U\n      return push(argu);\n    } else {\n      console.warn('unknown argument type', argu);\n      return push(symbol(NIL));\n    }\n  };\n\n  parse = function parse(argu) {\n    var data, error;\n\n    try {\n      parse_internal(argu);\n      data = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n\n    return data;\n  }; // exec handles the running ia JS of all the algebrite\n  // functions. The function name is passed in \"name\" and\n  // the corresponding function is pushed at the top of the stack\n\n\n  exec = function exec(name) {\n    var argu, error, fn, l1, len, result;\n    fn = get_binding(usr_symbol(name));\n    check_stack();\n    push(fn);\n\n    for (var _len = arguments.length, argus = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      argus[_key - 1] = arguments[_key];\n    }\n\n    for (l1 = 0, len = argus.length; l1 < len; l1++) {\n      argu = argus[l1];\n      parse_internal(argu);\n    }\n\n    list(1 + argus.length);\n    p1 = pop();\n    push(p1);\n\n    try {\n      top_level_eval();\n      result = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n\n    return result;\n  };\n\n  $.exec = exec;\n  $.parse = parse;\n\n  (function () {\n    var builtin_fns, fn, l1, len, results;\n    builtin_fns = [\"abs\", \"add\", \"adj\", \"and\", \"approxratio\", \"arccos\", \"arccosh\", \"arcsin\", \"arcsinh\", \"arctan\", \"arctanh\", \"arg\", \"atomize\", \"besselj\", \"bessely\", \"binding\", \"binomial\", \"ceiling\", \"check\", \"choose\", \"circexp\", \"clear\", \"clearall\", \"clearpatterns\", \"clock\", \"coeff\", \"cofactor\", \"condense\", \"conj\", \"contract\", \"cos\", \"cosh\", \"decomp\", \"defint\", \"deg\", \"denominator\", \"det\", \"derivative\", \"dim\", \"dirac\", \"divisors\", \"do\", \"dot\", \"draw\", \"dsolve\", \"eigen\", \"eigenval\", \"eigenvec\", \"erf\", \"erfc\", \"eval\", \"exp\", \"expand\", \"expcos\", \"expsin\", \"factor\", \"factorial\", \"factorpoly\", \"filter\", \"float\", \"floor\", \"for\", \"Gamma\", \"gcd\", \"hermite\", \"hilbert\", \"imag\", \"component\", \"inner\", \"integral\", \"inv\", \"invg\", \"isinteger\", \"isprime\", \"laguerre\", \"lcm\", \"leading\", \"legendre\", \"log\", \"mod\", \"multiply\", \"not\", \"nroots\", \"number\", \"numerator\", \"operator\", \"or\", \"outer\", \"pattern\", \"patternsinfo\", \"polar\", \"power\", \"prime\", \"print\", \"print2dascii\", \"printcomputer\", \"printlatex\", \"printlist\", \"printhuman\", \"product\", \"quote\", \"quotient\", \"rank\", \"rationalize\", \"real\", \"rect\", \"roots\", \"round\", \"equals\", \"shape\", \"sgn\", \"silentpattern\", \"simplify\", \"sin\", \"sinh\", \"sqrt\", \"stop\", \"subst\", \"sum\", \"symbolsinfo\", \"tan\", \"tanh\", \"taylor\", \"test\", \"testeq\", \"testge\", \"testgt\", \"testle\", \"testlt\", \"transpose\", \"unit\", \"zero\"];\n    results = [];\n\n    for (l1 = 0, len = builtin_fns.length; l1 < len; l1++) {\n      fn = builtin_fns[l1];\n      results.push($[fn] = exec.bind(this, fn));\n    }\n\n    return results;\n  })();\n\n  freeze = function freeze() {\n    var frozenContents, frozenHash, frozenPatterns, frozenSymbols, i, l1, ref2;\n    frozenSymbols = [];\n    frozenContents = [];\n    frozenPatterns = [];\n    frozenHash = \"\";\n\n    for (i = l1 = 0, ref2 = symtab.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      //if symtab[i].printname == \"\"\n      //  if isSymbolReclaimable[i] == false\n      //    break\n      //  else\n      //    continue\n      if (isSymbolReclaimable[i] === false) {\n        frozenSymbols.push(symtab[i]);\n        frozenContents.push(binding[i]);\n      }\n    } // just clone them\n\n\n    frozenPatterns = userSimplificationsInListForm.slice(0);\n    return [frozenSymbols, frozenContents, frozenPatterns, zero, one, imaginaryunit, getStateHash()];\n  };\n\n  unfreeze = function unfreeze(frozen) {\n    var frozenContents, frozenPatterns, frozenSymbols, i, l1, ref2;\n\n    var _frozen = _slicedToArray(frozen, 6);\n\n    frozenSymbols = _frozen[0];\n    frozenContents = _frozen[1];\n    frozenPatterns = _frozen[2];\n    zero = _frozen[3];\n    one = _frozen[4];\n    imaginaryunit = _frozen[5];\n\n    //clear_symbols()\n    for (i = l1 = 0, ref2 = frozenSymbols.length; 0 <= ref2 ? l1 < ref2 : l1 > ref2; i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = frozenSymbols[i];\n      binding[i] = frozenContents[i];\n    }\n\n    return userSimplificationsInListForm = frozenPatterns.slice(0);\n  };\n\n  compareState = function compareState(previousHash) {\n    var frozenHash;\n    frozenHash = getStateHash();\n\n    if (frozenHash === previousHash) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  getStateHash = function getStateHash() {\n    var bindingi, frozenHash, i, l1, len, m1, ref2, ref3, symtabi;\n    frozenHash = \"\";\n\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; ref2 <= ref3 ? l1 < ref3 : l1 > ref3; i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      symtabi = _print_list(symtab[i]);\n      bindingi = _print_list(binding[i]);\n      frozenHash += \" //\" + symtabi + \" : \" + bindingi;\n    }\n\n    for (m1 = 0, len = userSimplificationsInListForm.length; m1 < len; m1++) {\n      i = userSimplificationsInListForm[m1];\n      frozenHash += \" pattern: \" + i;\n    }\n\n    if (DEBUG) {\n      console.log(\"frozenHash: \" + frozenHash);\n    }\n\n    return frozenHash;\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Numerical-method/node_modules/algebrite/dist/algebrite.js"],"names":["$","ABS","ADD","ADJ","AND","APPROXRATIO","ARCCOS","ARCCOSH","ARCSIN","ARCSINH","ARCTAN","ARCTANH","ARG","ASSUME_REAL_VARIABLES","ATOMIZE","AUTOEXPAND","BAKE","BESSELJ","BESSELY","BINDING","BINOMIAL","BINOM_check_args","BUF","C1","C2","C3","C4","C5","C6","CEILING","CHECK","CHOOSE","CIRCEXP","CLEAR","CLEARALL","CLEARPATTERNS","CLOCK","COEFF","COFACTOR","CONDENSE","CONJ","CONS","CONTRACT","COS","COSH","Condense","DEBUG","DEBUG_ABS","DEBUG_ARG","DEBUG_CLOCKFORM","DEBUG_IMAG","DEBUG_IS","DEBUG_MULTIPLY","DEBUG_POWER","DEBUG_RATIONALIZE","DEBUG_RECT","DEBUG_SIMPLIFY","DECOMP","DEFINT","DEGREE","DENOMINATOR","DERIVATIVE","DET","DET_check_arg","DIM","DIRAC","DIVISORS","DO","DOT","DOUBLE","DRAW","DRAWX","DSOLVE","E","EIGEN","EIGENVAL","EIGENVEC","EIG_N","EIG_check_arg","EIG_yydd","EIG_yyqq","ERF","ERFC","EVAL","EXP","EXPAND","EXPCOS","EXPSIN","Eval","Eval_Eval","Eval_abs","Eval_add","Eval_adj","Eval_and","Eval_approxratio","Eval_arccos","Eval_arccosh","Eval_arcsin","Eval_arcsinh","Eval_arctan","Eval_arctanh","Eval_arg","Eval_besselj","Eval_bessely","Eval_binding","Eval_binomial","Eval_ceiling","Eval_check","Eval_choose","Eval_circexp","Eval_clear","Eval_clearall","Eval_clearpatterns","Eval_clock","Eval_coeff","Eval_cofactor","Eval_condense","Eval_conj","Eval_cons","Eval_contract","Eval_cos","Eval_cosh","Eval_decomp","Eval_defint","Eval_degree","Eval_denominator","Eval_derivative","Eval_det","Eval_dim","Eval_dirac","Eval_divisors","Eval_do","Eval_dsolve","Eval_eigen","Eval_eigenval","Eval_eigenvec","Eval_erf","Eval_erfc","Eval_exp","Eval_expand","Eval_expcos","Eval_expsin","Eval_factor","Eval_factorial","Eval_factorpoly","Eval_filter","Eval_float","Eval_floor","Eval_for","Eval_function_reference","Eval_gamma","Eval_gcd","Eval_hermite","Eval_hilbert","Eval_imag","Eval_index","Eval_inner","Eval_integral","Eval_inv","Eval_invg","Eval_isinteger","Eval_isprime","Eval_laguerre","Eval_lcm","Eval_leading","Eval_legendre","Eval_log","Eval_lookup","Eval_mod","Eval_multiply","Eval_noexpand","Eval_not","Eval_nroots","Eval_number","Eval_numerator","Eval_operator","Eval_or","Eval_outer","Eval_pattern","Eval_patternsinfo","Eval_polar","Eval_power","Eval_predicate","Eval_prime","Eval_print","Eval_print2dascii","Eval_printcomputer","Eval_printhuman","Eval_printlatex","Eval_printlist","Eval_product","Eval_quote","Eval_quotient","Eval_rank","Eval_rationalize","Eval_real","Eval_rect","Eval_roots","Eval_round","Eval_setq","Eval_sgn","Eval_shape","Eval_silentpattern","Eval_simfac","Eval_simplify","Eval_sin","Eval_sinh","Eval_sqrt","Eval_stop","Eval_subst","Eval_sum","Eval_sym","Eval_symbolsinfo","Eval_tan","Eval_tanh","Eval_taylor","Eval_tensor","Eval_test","Eval_testeq","Eval_testge","Eval_testgt","Eval_testle","Eval_testlt","Eval_transpose","Eval_unit","Eval_user_function","Eval_zero","Evalpoly","FACTOR","FACTORIAL","FACTORPOLY","FILTER","FLOATF","FLOOR","FOR","FORCE_FIXED_PRINTOUT","FUNCTION","Find","GAMMA","GCD","HERMITE","HILBERT","IMAG","INDEX","INNER","INTEGRAL","INV","INVG","INV_check_arg","INV_decomp","ISINTEGER","ISPRIME","LAGUERRE","LAST","LAST_2DASCII_PRINT","LAST_FULL_PRINT","LAST_LATEX_PRINT","LAST_LIST_PRINT","LAST_PLAIN_PRINT","LAST_PRINT","LCM","LEADING","LEGENDRE","LOG","LOOKUP","M","MAXDIM","MAXPRIMETAB","MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES","MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE","MAX_FIXED_PRINTOUT_DIGITS","MAX_PROGRAM_SIZE","MEQUAL","METAA","METAB","METAX","MLENGTH","MOD","MSIGN","MULTIPLY","MZERO","N","NIL","NOT","NROOTS","NROOTS_ABS","NROOTS_DELTA","NROOTS_EPSILON","NROOTS_RANDOM","NROOTS_YMAX","NROOTS_divpoly","NSYM","NUM","NUMBER","NUMERATOR","OPERATOR","OR","OUTER","PATTERN","PATTERNSINFO","PI","POLAR","POWER","PRIME","PRINT","PRINT2DASCII","PRINTFULL","PRINTLATEX","PRINTLIST","PRINTMODE_2DASCII","PRINTMODE_COMPUTER","PRINTMODE_HUMAN","PRINTMODE_LATEX","PRINTMODE_LIST","PRINTOUTRESULT","PRINTPLAIN","PRINT_LEAVE_E_ALONE","PRINT_LEAVE_X_ALONE","PRODUCT","QUOTE","QUOTIENT","RANK","RATIONALIZE","REAL","ROOTS","ROUND","SECRETX","SELFTEST","SETQ","SGN","SHAPE","SILENTPATTERN","SIMPLIFY","SIN","SINH","SPACE_BETWEEN_COLUMNS","SPACE_BETWEEN_ROWS","SQRT","STOP","STR","SUBST","SUM","SYM","SYMBOLSINFO","SYMBOL_A","SYMBOL_A_UNDERSCORE","SYMBOL_B","SYMBOL_B_UNDERSCORE","SYMBOL_C","SYMBOL_D","SYMBOL_I","SYMBOL_IDENTITY_MATRIX","SYMBOL_J","SYMBOL_N","SYMBOL_R","SYMBOL_S","SYMBOL_T","SYMBOL_X","SYMBOL_X_UNDERSCORE","SYMBOL_Y","SYMBOL_Z","TAN","TANH","TAYLOR","TENSOR","TEST","TESTEQ","TESTGE","TESTGT","TESTLE","TESTLT","TIMING_DEBUGS","TOS","TRACE","TRANSPOSE","T_DOUBLE","T_EQ","T_FUNCTION","T_GTEQ","T_INTEGER","T_LTEQ","T_NEQ","T_NEWLINE","T_QUOTASSIGN","T_STRING","T_SYMBOL","U","UNIT","USR_SYMBOLS","VERSION","YMAX","YYE","YYRECT","ZERO","__emit_char","__emit_str","__factor_add","__factorial","__is_negative","__is_radical_number","__lcm","__legendre","__legendre2","__legendre3","__normalize_radical_factors","__rationalize_tensor","_print","abs","absValFloat","absval","absval_tensor","add","addSymbolLeftOfAssignment","addSymbolRightOfAssignment","add_all","add_factor_to_accumulator","add_numbers","add_terms","addf","adj","alloc_tensor","allocatedId","any_denominators","approxAll","approxLogs","approxLogsOfRationals","approxOneRatioOnly","approxRadicals","approxRadicalsOfRationals","approxRationalsOfLogs","approxRationalsOfPowersOfE","approxRationalsOfPowersOfPI","approxRationalsOfRadicals","approxSineOfRationalMultiplesOfPI","approxSineOfRationals","approxTrigonometric","approx_just_an_integer","approx_logarithmsOfRationals","approx_nothingUseful","approx_radicalOfRatio","approx_ratioOfRadical","approx_rationalOfE","approx_rationalOfPi","approx_rationalsOfLogarithms","approx_sine_of_pi_times_rational","approx_sine_of_rational","approxratioRecursive","arccos","arccosh","arcsin","arcsinh","arctan","arctanh","areunivarpolysfactoredorexpandedform","arg","arglist","assignmentFound","avoidCalculatingPowersIntoArctans","bake","bake_poly","bake_poly_term","besselj","bessely","bigInt","bignum_factorial","bignum_float","bignum_power_number","bignum_scan_float","bignum_scan_integer","bignum_truncate","binding","binomial","buffer","build_tensor","caaddr","caadr","caar","cadaddr","cadadr","cadar","caddaddr","caddadr","caddar","caddddr","cadddr","caddr","cadr","called_from_Algebra_block","car","cdaddr","cdadr","cdar","cddaddr","cddar","cdddaddr","cddddr","cdddr","cddr","cdr","ceiling","chainOfUserSymbolsNotFunctionsBeingEvaluated","charTabIndex","chartab","checkFloatHasWorkedOutCompletely","check_esc_flag","check_stack","check_tensor_dimensions","choose","choose_check_args","circexp","clearAlgebraEnvironment","clearRenamedVariablesToAvoidBindingToExternalScope","clear_symbols","clear_term","clearall","clockform","cmpGlyphs","cmp_args","cmp_expr","cmp_terms","cmp_terms_count","codeGen","coeff","cofactor","collectLatexStringFromReturnValue","collectUserSymbols","combine_factors","combine_gammas","combine_terms","compareState","compare_numbers","compare_rationals","compare_tensors","compatible","computeDependenciesFromAlgebra","computeResultsAndJavaScriptFromAlgebra","compute_fa","conjugate","cons","consCount","contract","convert_bignum_to_double","convert_rational_to_double","copy_tensor","cosine","cosine_of_angle","cosine_of_angle_sum","count","countOccurrencesOfSymbol","count_denominators","counter","countsize","d_scalar_scalar","d_scalar_scalar_1","d_scalar_tensor","d_tensor_scalar","d_tensor_tensor","dabs","darccos","darccosh","darcsin","darcsinh","darctan","darctanh","dbesselj0","dbesseljn","dbessely0","dbesselyn","dcos","dcosh","dd","decomp","decomp_product","decomp_sum","defineSomeHandyConstants","define_user_function","defn","defn_str","degree","denominator","derf","derfc","derivative","derivative_of_integral","det","determinant","detg","dfunction","dhermite","dirac","display","display_flag","displaychar","divide","divide_numbers","divisors","divisors_onstack","divpoly","dlog","do_clearPatterns","do_clearall","do_simplify_nested_radicals","dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication","dotprod_unicode","doubleToReasonableString","dpow","dpower","dproduct","draw_flag","draw_stop_return","dsgn","dsin","dsinh","dsum","dtan","dtanh","dupl","eigen","elelmIndex","elem","emit_denominator","emit_denominators","emit_expr","emit_factor","emit_factorial_function","emit_flat_tensor","emit_fraction","emit_function","emit_index_function","emit_multiply","emit_number","emit_numerators","emit_numerical_fraction","emit_power","emit_string","emit_subexpr","emit_symbol","emit_tensor","emit_tensor_inner","emit_term","emit_top_expr","emit_unsigned_expr","emit_x","equal","equaln","equalq","erfc","errorMessage","esc_flag","evaluatingAsFloats","evaluatingPolar","exec","expand","expand_get_A","expand_get_AF","expand_get_B","expand_get_C","expand_get_CF","expand_tensor","expanding","expcos","exponential","expr_level","expsin","f1","f10","f2","f3","f4","f5","f9","f_equals_a","factor","factor_a","factor_again","factor_b","factor_number","factor_small_number","factor_term","factorial","factorpoly","factors","fill_buf","filter","filter_main","filter_sum","filter_tensor","findDependenciesInScript","findPossibleClockForm","findPossibleExponentialForm","findroot","fixup_fraction","fixup_power","flag","floatToRatioRoutine","fmt_index","fmt_level","fmt_x","frame","freeze","functionInvokationsScanningStack","gamma","gamma_of_sum","gammaf","gcd","gcd_main","gcd_numbers","gcd_polys","gcd_powers_with_same_base","gcd_product_product","gcd_product_sum","gcd_sum","gcd_sum_product","gcd_sum_sum","gen","getSimpleRoots","getStateHash","get_binding","get_factor_from_complex_root","get_factor_from_real_root","get_innerprod_factors","get_next_token","get_printname","get_size","get_token","getdisplaystr","glyph","gp","guess","hasImaginaryCoeff","hasNegativeRationalExponent","hash_addition","hash_function","hash_multiplication","hash_power","hashcode_values","hashed_itab","hermite","hilbert","i1","imag","imaginaryunit","index_function","init","initNRoots","inited","inner","inner_f","input_str","integral","integral_of_form","integral_of_product","integral_of_sum","inv","inverse","invert_number","invg","isNumberOneOverSomething","isNumericAtom","isNumericAtomOrTensor","isSimpleRoot","isSmall","isSymbolLeftOfAssignment","isSymbolReclaimable","isZeroAtom","isZeroAtomOrTensor","isZeroLikeOrNonZeroLikeOrUndetermined","isZeroTensor","is_denominator","is_factor","is_small_integer","is_square_matrix","is_usr_symbol","isadd","isalnumorunderscore","isalpha","isalphaOrUnderscore","iscomplexnumber","iscomplexnumberdouble","iscons","isdenominator","isdigit","isdouble","iseveninteger","isfactor","isfactorial","isfloating","isfraction","isidentitymatrix","isimaginarynumber","isimaginarynumberdouble","isimaginaryunit","isinnerordot","isinteger","isintegerfactor","isintegerorintegerfloat","isinv","iskeyword","isminusone","isminusoneoversqrttwo","isminusoneovertwo","isminussqrtthreeovertwo","ismultiply","isnegative","isnegativenumber","isnegativeterm","isnonnegativeinteger","isnpi","isone","isoneover","isoneoversqrttwo","isoneovertwo","isplusone","isplustwo","ispolyexpandedform","ispolyexpandedform_expr","ispolyexpandedform_factor","ispolyexpandedform_term","ispolyfactoredorexpandedform","ispolyfactoredorexpandedform_factor","ispolyfactoredorexpandedform_power","isposint","ispositivenumber","ispower","isquarterturn","isrational","isspace","issqrtthree","issqrtthreeovertwo","isstr","issymbol","issymbolic","istensor","istranspose","isunderscore","isunivarpolyfactoredorexpandedform","itab","italu_hashcode","j1","laguerre","laguerre2","lastFoundSymbol","latexErrorSign","lcm","leading","legendre","length","lessp","level","list","listLength","logarithm","logbuf","lookupsTotal","lu_decomp","madd","makePositive","makeSignSameAs","make_hashed_itab","mask","mcmp","mcmpint","mdiv","mdivrem","meta_mode","mgcd","mini_solve","mint","mmod","mmul","mod","monic","move","moveTos","mp_clr_bit","mp_denominator","mp_numerator","mp_set_bit","mpow","mprime","mroot","mshiftright","msub","mtotal","multinomial_sum","multiply","multiply_all","multiply_all_noexpand","multiply_consecutive_constants","multiply_denominators","multiply_denominators_factor","multiply_denominators_term","multiply_noexpand","multiply_numbers","n_factor_number","negate","negate_expand","negate_noexpand","negate_number","new_integer","new_string","newline_flag","nil_symbols","normaliseDots","normalisedCoeff","normalize_angle","nroots_a","nroots_b","nroots_c","nroots_df","nroots_dx","nroots_fa","nroots_fb","nroots_x","nroots_y","nterms","nthCadr","numerator","numericRootOfPolynomial","o","one","oneElement","one_as_double","out_buf","out_count","out_of_memory","outer","p0","p1","p2","p3","p4","p5","p6","p7","p8","p9","parse","parse_internal","parse_p1","parse_p2","parse_time_simplifications","partition","patternHasBeenFound","patternsinfo","performing_roots","polar","polarRectAMinusOneBase","polyform","pop","pop_double","pop_frame","pop_integer","power","power_str","power_sum","power_tensor","predefinedSymbolsInGlobalScope_doNotTrackInDependencies","prime","primetab","print2dascii","printMode","print_ABS_latex","print_ARCCOS_codegen","print_ARCSIN_codegen","print_ARCTAN_codegen","print_BINOMIAL_latex","print_COS_codegen","print_DEFINT_latex","print_DOT_codegen","print_DOT_latex","print_DO_codegen","print_FOR_codegen","print_INV_codegen","print_INV_latex","print_PRODUCT_codegen","print_PRODUCT_latex","print_SETQ_codegen","print_SIN_codegen","print_SQRT_latex","print_SUM_codegen","print_SUM_latex","print_TAN_codegen","print_TESTEQ_latex","print_TESTGE_latex","print_TESTGT_latex","print_TESTLE_latex","print_TESTLT_latex","print_TEST_codegen","print_TEST_latex","print_TRANSPOSE_codegen","print_TRANSPOSE_latex","print_UNIT_codegen","print_a_over_b","print_base","print_base_of_denom","print_char","print_denom","print_double","print_expo_of_denom","print_exponent","print_expr","print_factor","print_factorial_function","print_glyphs","print_index_function","print_list","print_multiply_sign","print_number","print_power","print_str","print_subexpr","print_tensor","print_tensor_inner","print_tensor_inner_latex","print_tensor_latex","print_term","printchar","printchar_nowrap","printline","program_buf","promote_tensor","push","pushTryNotToDuplicate","push_cars","push_double","push_factor","push_frame","push_identity_matrix","push_integer","push_rational","push_symbol","push_term_factors","push_terms","push_zero_matrix","qadd","qdiv","qmul","qpow","qpowf","quickfactor","quickpower","rational","rationalize","rationalize_coefficients","real","reciprocate","rect","recursionLevelNestedRadicalsRemoval","recursiveDependencies","ref","ref1","rememberPrint","remove_negative_exponents","reset_after_error","restore","restoreMetaBindings","rewrite_args","rewrite_args_tensor","roots","roots2","roots3","run","runUserDefinedSimplifications","save","saveMetaBindings","scalar_times_tensor","scan","scan_error","scan_expression","scan_factor","scan_function_call_with_function_name","scan_function_call_without_function_name","scan_index","scan_meta","scan_power","scan_relation","scan_stmt","scan_str","scan_string","scan_subexpr","scan_symbol","scan_tensor","scan_term","scanned","scanningParameters","setM","setSignTo","set_binding","set_component","setq_indexed","sfac_product","sfac_product_f","sgn","shape","show_power_debug","sign","sign_of_term","simfac","simfac_term","simpleComplexityMeasure","simplify","simplifyForCodeGeneration","simplify_1_in_products","simplify_main","simplify_nested_radicals","simplify_polar","simplify_polarRect","simplify_rational_expressions","simplify_rectToClock","simplify_tensor","simplify_trig","simplifyfactorials","sine","sine_of_angle","sine_of_angle_sum","skipRootVariableToBeSolved","sort_stack","square","ssqrt","stack","stackAddsCount","std_symbol","step","step2","stop","strcmp","stringsEmittedByUserPrintouts","subf","subst","subtract","subtract_numbers","swap","symbol","symbolsDependencies","symbolsHavingReassignments","symbolsInExpressionsWithoutAssignments","symbolsLeftOfAssignment","symbolsRightOfAssignment","symbolsinfo","symnum","symtab","take_care_of_nested_radicals","tangent","taylor","tensor","tensor_plus_tensor","tensor_times_scalar","testApprox","test_flag","text_metric","theRandom","token","token_buf","token_str","top","top_level_eval","tos","transform","transpose","transpose_unicode","trigmode","trivial_divide","try_kth_prime","turnErrorMessageToLatex","ucmp","unfreeze","unique","unique_f","update_token_buf","userSimplificationsInListForm","userSimplificationsInStringForm","usr_symbol","verbosing","version","will_be_displayed_as_fraction","ybinomial","ycosh","ydirac","yerf","yerfc","yfloor","yindex","yround","ysinh","yyarg","yybesselj","yybessely","yyceiling","yycondense","yycontract","yycosh","yydegree","yydetg","yydivpoly","yyerf","yyerfc","yyexpand","yyfactorpoly","yyfloat","yyfloor","yyhermite","yyhermite2","yyinvg","yylcm","yylog","yymultiply","yyouter","yypower","yyrationalize","yyround","yysgn","yysimfac","yysinh","yytangent","zero","zzfloat","hasProp","hasOwnProperty","require","prototype","a","b","call","q","printname","str","d","k","tag","dim","results","ndim","nelem","h","w","n","ascent","descent","width","ceil","i","j","primes","Math","sqrt","x","p","startCount","isPositive","isZero","toString","equals","exports","theArgument","console","trace","log","anyFactorsYet","input","s","subsetOfStack","slice","sort","concat","t","l1","m1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","doNothing","numberOfDigitsAfterTheDot","precision","splitBeforeAndAfterDot","supposedlyTheFloat","theFloat","theRatio","split","pow","decimal","AccuracyFactor","DecimalSign","FractionDenominator","FractionNumerator","PreviousDenominator","ScratchValue","Z","ret","isNaN","floor","bestResultSoFar","complexity","error","hypothesis","len","likelyMultiplier","minimumComplexity","ratio","result","Number","MAX_VALUE","round","len1","approxRadicalsOfRationalsResult","approxRationalsOfRadicalsResult","approxLogsOfRationalsResult","approxRationalsOfLogsResult","approxSineOfRationalMultiplesOfPIResult","approxSineOfRationalsResult","fraction","sin","LOG_EXPLANATIONS","approxLogsResult","approxRadicalsResult","approxRationalsOfPowersOfEResult","approxRationalsOfPowersOfPIResult","approxTrigonometricResult","bestApproxSoFar","constantsSum","constantsSumMin","aResult","c","theSum","Array","i2","i3","j2","j3","k3","l2","l3","len2","len3","len4","len5","len6","len7","m2","m3","n1","n2","o1","o2","originalValue","q1","q2","r1","r2","returned","returnedFraction","returnedValue","s1","s2","t1","t2","u1","u2","v1","v2","value","x1","x2","z1","z2","toFixed","errno","acos","asin","atan","y","z","jn","yn","geq","MIN_SAFE_INTEGER","leq","MAX_SAFE_INTEGER","isNegative","theResult","qsub","ab","ba","minusOne","expo","toJSNumber","quotientAndRemainder","divmod","quotient","remainder","theNewInteger","accumulator","buf","scounter","sign_","substring","parseFloat","signed","aAsString","denominatorString","shiftRight","indexOf","indexFound","variableToBeCleared","variable","polynomial","coeffsCount","constant","polynomialWithoutConstant","prev_expanding","row","col","ai","an","l","m","cos","cosh","toBePushed","generalTransform","breakFromOutherWhile","base","theta","op","ref10","printstr","ref11","results1","cc","ss","ans","exp","willEvaluateAsFloats","cycleString","positionIfSymbolAlreadyBeingEvaluated","cons_head","Eval_atomize","Eval_draw","checkResult","dsolve","orig","theTensor","A","AxPlusB","B","checkingTheDivision","dividend","factpoly_expo","firstParam","foundComplexRoot","foundRealRoot","partOfPolynomialFactoredSoFar","polycoeff","previousFactorisation","remainingPoly","secondDegreePloly","secondParam","whichRootsAreWeFinding","ratioInverse","a0","evalPolyResult","na0","nan","rootsTries_i","rootsTries_j","testDenominator","testNumerator","testValue","Q","evaluateAt","nodeToCheck","numberOfEs","numberOfMults","numberOfPIs","numberOfPowers","numberOfSums","loopingVariable","polyVar","difference","moretheArguments","operands","refinedOperands","secondArgument","shift","theArguments","arg1","arg2","arg3","subtractionResult","ak","bk","tree","factors_accumulator","hc","tab","u","half","arg_hash","name","Error","terms","sum","term","term_hash","term_set","v","product","base_hash","exp_hash","constexp","f","key","JSON","stringify","eachEntry","results2","valueOrPredicate","evalledArgument","isEven","minussign","listIterator","compareAbs","theNewString","toReturn","isProbablePrime","index","and","shiftLeft","not","or","append","_gamma","r","random","nrabs","firstArgument","patternPosition","stringKey","thirdArgument","patternsinfoToBePrinted","compare","bigint_one","g","xprime","b_isEven_and_c_isItsInverse","hopefullySimplified","inputBase","inputExp","isThisOne","is_a_moreThanZero","original_test_flag","beenPrinted","passedPrintMode","origPrintMode","theString","theTypeOfPrint","parsedString","originalCodeGen","returnedString","replace","denom","numberOneOverSomething","origAccumulator","previousFactorWasANumber","functionBody","numberOfIntegrals","originalIntegral","theIntegral","theVariable","retString","firstLevel","body","lowerlimit","upperlimit","howManyIfs","exponent","denomExponent","newExponent","numExponent","omitParens","pastFirstFactor","fbody","parameters","character","k1","k2","pPrintName","pString","dx","dy","h1","h2","w1","w2","y1","y2","max_x","max_y","min_x","min_y","emit_sign","tmpString","sIndex","tmpBuffer","eh","ew","ncol","nrow","indexVariable","oldIndexVariableValue","gcdBetweenNumeratorAndDenominator","qadd_ab","qadd_ba","qadd_denominator","qadd_frac1","qadd_frac2","qadd_numerator","resultSum","aa","bb","isOdd","stackIndex","divisor","commonDenominator","eachTerm","imaginaryCoefficients","isSimpleRootPolynomial","divideBy","miniStack","lastCoeff","leadingCoeff","aSol","commonPart","rootsOfOne","C_CHECKED_AS_NOT_ZERO","Q_CHECKED_AS_NOT_ZERO","R_18_a_b_c_d","R_27_a2_d","R_2_b3","R_3_a","R_3_a_C","R_3_a_c","R_4_DELTA03","R_6_a","R_6_a_C","R_C","R_C_over_3a","R_C_simplified_toCheckIfZero","R_DELTA0","R_DELTA0_simplified_toCheckIfZero","R_DELTA0_toBeCheckedIfZero","R_DELTA1","R_Q","R_Q_simplified_toCheckIfZero","R_S","R_S_simplified_toCheckIfZero","R_a2","R_a2_d","R_a2_d2","R_a3","R_a_b_c","R_a_b_c_d","R_a_c","R_b2","R_b2_c2","R_b3","R_b3_d","R_c2","R_c3","R_d2","R_determinant","R_determinant_simplified_toCheckIfZero","R_e2","R_e3","R_m","R_m27_a2_d2","R_m4_a_c3","R_m4_b3_d","R_m9_a_b_c","R_m_b_over_3a","R_minus_4S2_minus_2p","R_minus_b_over_4a","R_p","R_principalCubicRoot","R_q","R_q_over_S","R_r","S_CHECKED_AS_NOT_ZERO","ThreePPlus2M","TwoQOversqrtPPlus2M","biquadraticSolutions","choiceOfRadicalInQSoSIsNotZero","coeff2","coeff3","coeff4","depressedSolutions","eachSolution","flipSignOFQSoCIsNotZero","flipSignOFRadicalSoQIsNotZero","i_sqrt3","one_minus_i_sqrt3","one_plus_i_sqrt3","resolventCubicSolutions","root_solution","sqrtPPlus2M","toBeCheckedIFZero","assignmentIsOfQuotedType","existingDependencies","indexOfSymbolLeftOfAssignment","symbolLeftOfAssignment","splice","charCodeAt","firstFactorIsNumber","theSymbol","prefixVar","functionName","RegExp","test","errmsg","atLeastOneSuccessInRouldOfRulesApplications","eachConsecutiveRuleApplication","eachSimplification","numberOfRulesApplications","originalexpanding","success","args","eval","carp1","miao","oldp1","oldp2","num","sasa","theGCD","simplificationWithCondense","simplificationWithoutCondense","somethingSimplified","C","SOLUTION","anyRadicalSimplificationWorked","checkSize","commonBases","commonInnerExponent","countingTerms","firstTerm","innerbase","innerexponent","lowercase_a","lowercase_b","numberOfTerms","possibleNewExpression","possibleNewExpressionValue","possibleRationalSolutions","possibleSolutions","potentialPower","realOfpossibleRationalSolutions","secondTerm","secondTermFactor","termsThatAreNotPowers","whichRationalSolution","max","apply","sinh","expr","newExpr","newTensor","oldExpr","tan","tanh","comparison","wholeAndExpression","andPredicates","somePredicateUnknown","orPredicates","wholeOrExpression","bookmarkTosToPrintDecomps","eachTransformEntry","numberOfDecomps","restTerm","theTransform","transform_h","transformationSuccessful","transformedTerms","fea_i","fea_j","innerTranspSwitch1","innerTranspSwitch2","bodyAndFormalArguments","definitionOfInterest","defn_i","str1","str2","maxFixedPrintoutDigits","stringRepresentation","search","needle","message","stringToBeParsed","dontGenerateCode","allReturnedLatexStrings","allReturnedPlainStrings","bodyForReadableSummaryOfGeneratedCode","cyclesDescriptions","deQuotedDep","dependencyInfo","eachDependency","generatedBody","generatedCode","indexOfEachReplacement","indexOfPartRemainingToBeParsed","newUserSymbol","originalUserSymbol","readableSummaryOfGeneratedCode","recursedDependencies","replacementsFrom","replacementsTo","scriptEvaluation","stringToBeRun","testableString","timeStartFromAlgebra","toBePrinted","userVariablesMentioned","variablesWithCycles","Date","getTime","affectsVariables","affectedBy","error1","variableToBeChecked","arrayWhereDependenciesWillBeAdded","variablesAlreadyFleshedOut","chainBeingChecked","cyclesDescription","theErrorMessage","String","fromCharCode","stringToNormalise","generateLatex","collectedLatexResult","collectedPlainResult","errorWhileExecution","stringToBeReturned","timeStart","timingDebugWrite","selftest","originalArgument","shouldAutoexpand","codeFromAlgebraBlock","keepState","originalcodeFromAlgebraBlock","userSimplificationsInProgramForm","code","latexResult","readableSummaryOfCode","testableStringIsIgnoredHere","stackPos","elementToBeReturned","symbolsinfoToBePrinted","bindingi","symtabi","latexPrint","theSymnum","argu","warn","data","fn","argus","builtin_fns","bind","frozenContents","frozenHash","frozenPatterns","frozenSymbols","frozen","previousHash"],"mappings":";;;;;;AAAA;AACA,CAAC,YAAW;AAEV;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsBE;AACF;AACA;AACA;AACA;AACA;AACA;;AAIE;AACF;AACA;AACA;AACA;;AAIE;AACF;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAiBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAuBE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaE;AACF;AACA;AACA;AACA;AACA;;AAIE;AACF;AACA;AACA;AACA;AACA;AACA;;AAIE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUE;AACF;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOE;AACF;AACA;AACA;AACA;AACA;AACA;AAKE,MAAIA,CAAJ;AAAA,MAAOC,GAAP;AAAA,MAAYC,GAAZ;AAAA,MAAiBC,GAAjB;AAAA,MAAsBC,GAAtB;AAAA,MAA2BC,WAA3B;AAAA,MAAwCC,MAAxC;AAAA,MAAgDC,OAAhD;AAAA,MAAyDC,MAAzD;AAAA,MAAiEC,OAAjE;AAAA,MAA0EC,MAA1E;AAAA,MAAkFC,OAAlF;AAAA,MAA2FC,GAA3F;AAAA,MAAgGC,qBAAhG;AAAA,MAAuHC,OAAvH;AAAA,MAAgIC,UAAhI;AAAA,MAA4IC,IAA5I;AAAA,MAAkJC,OAAlJ;AAAA,MAA2JC,OAA3J;AAAA,MAAoKC,OAApK;AAAA,MAA6KC,QAA7K;AAAA,MAAuLC,gBAAvL;AAAA,MAAyMC,GAAzM;AAAA,MAA8MC,EAA9M;AAAA,MAAkNC,EAAlN;AAAA,MAAsNC,EAAtN;AAAA,MAA0NC,EAA1N;AAAA,MAA8NC,EAA9N;AAAA,MAAkOC,EAAlO;AAAA,MAAsOC,OAAtO;AAAA,MAA+OC,KAA/O;AAAA,MAAsPC,MAAtP;AAAA,MAA8PC,OAA9P;AAAA,MAAuQC,KAAvQ;AAAA,MAA8QC,QAA9Q;AAAA,MAAwRC,aAAxR;AAAA,MAAuSC,KAAvS;AAAA,MAA8SC,KAA9S;AAAA,MAAqTC,QAArT;AAAA,MAA+TC,QAA/T;AAAA,MAAyUC,IAAzU;AAAA,MAA+UC,IAA/U;AAAA,MAAqVC,QAArV;AAAA,MAA+VC,GAA/V;AAAA,MAAoWC,IAApW;AAAA,MAA0WC,QAA1W;AAAA,MAAoXC,KAApX;AAAA,MAA2XC,SAA3X;AAAA,MAAsYC,SAAtY;AAAA,MAAiZC,eAAjZ;AAAA,MAAkaC,UAAla;AAAA,MAA8aC,QAA9a;AAAA,MAAwbC,cAAxb;AAAA,MAAwcC,WAAxc;AAAA,MAAqdC,iBAArd;AAAA,MAAweC,UAAxe;AAAA,MAAofC,cAApf;AAAA,MAAogBC,MAApgB;AAAA,MAA4gBC,MAA5gB;AAAA,MAAohBC,MAAphB;AAAA,MAA4hBC,WAA5hB;AAAA,MAAyiBC,UAAziB;AAAA,MAAqjBC,GAArjB;AAAA,MAA0jBC,aAA1jB;AAAA,MAAykBC,GAAzkB;AAAA,MAA8kBC,KAA9kB;AAAA,MAAqlBC,QAArlB;AAAA,MAA+lBC,EAA/lB;AAAA,MAAmmBC,GAAnmB;AAAA,MAAwmBC,MAAxmB;AAAA,MAAgnBC,IAAhnB;AAAA,MAAsnBC,KAAtnB;AAAA,MAA6nBC,MAA7nB;AAAA,MAAqoBC,CAAroB;AAAA,MAAwoBC,KAAxoB;AAAA,MAA+oBC,QAA/oB;AAAA,MAAypBC,QAAzpB;AAAA,MAAmqBC,KAAnqB;AAAA,MAA0qBC,aAA1qB;AAAA,MAAyrBC,QAAzrB;AAAA,MAAmsBC,QAAnsB;AAAA,MAA6sBC,GAA7sB;AAAA,MAAktBC,IAAltB;AAAA,MAAwtBC,IAAxtB;AAAA,MAA8tBC,GAA9tB;AAAA,MAAmuBC,MAAnuB;AAAA,MAA2uBC,MAA3uB;AAAA,MAAmvBC,MAAnvB;AAAA,MAA2vBC,IAA3vB;AAAA,MAAiwBC,SAAjwB;AAAA,MAA4wBC,QAA5wB;AAAA,MAAsxBC,QAAtxB;AAAA,MAAgyBC,QAAhyB;AAAA,MAA0yBC,QAA1yB;AAAA,MAAozBC,gBAApzB;AAAA,MAAs0BC,WAAt0B;AAAA,MAAm1BC,YAAn1B;AAAA,MAAi2BC,WAAj2B;AAAA,MAA82BC,YAA92B;AAAA,MAA43BC,WAA53B;AAAA,MAAy4BC,YAAz4B;AAAA,MAAu5BC,QAAv5B;AAAA,MAAi6BC,YAAj6B;AAAA,MAA+6BC,YAA/6B;AAAA,MAA67BC,YAA77B;AAAA,MAA28BC,aAA38B;AAAA,MAA09BC,YAA19B;AAAA,MAAw+BC,UAAx+B;AAAA,MAAo/BC,WAAp/B;AAAA,MAAigCC,YAAjgC;AAAA,MAA+gCC,UAA/gC;AAAA,MAA2hCC,aAA3hC;AAAA,MAA0iCC,kBAA1iC;AAAA,MAA8jCC,UAA9jC;AAAA,MAA0kCC,UAA1kC;AAAA,MAAslCC,aAAtlC;AAAA,MAAqmCC,aAArmC;AAAA,MAAonCC,SAApnC;AAAA,MAA+nCC,SAA/nC;AAAA,MAA0oCC,aAA1oC;AAAA,MAAypCC,QAAzpC;AAAA,MAAmqCC,SAAnqC;AAAA,MAA8qCC,WAA9qC;AAAA,MAA2rCC,WAA3rC;AAAA,MAAwsCC,WAAxsC;AAAA,MAAqtCC,gBAArtC;AAAA,MAAuuCC,eAAvuC;AAAA,MAAwvCC,QAAxvC;AAAA,MAAkwCC,QAAlwC;AAAA,MAA4wCC,UAA5wC;AAAA,MAAwxCC,aAAxxC;AAAA,MAAuyCC,OAAvyC;AAAA,MAAgzCC,WAAhzC;AAAA,MAA6zCC,UAA7zC;AAAA,MAAy0CC,aAAz0C;AAAA,MAAw1CC,aAAx1C;AAAA,MAAu2CC,QAAv2C;AAAA,MAAi3CC,SAAj3C;AAAA,MAA43CC,QAA53C;AAAA,MAAs4CC,WAAt4C;AAAA,MAAm5CC,WAAn5C;AAAA,MAAg6CC,WAAh6C;AAAA,MAA66CC,WAA76C;AAAA,MAA07CC,cAA17C;AAAA,MAA08CC,eAA18C;AAAA,MAA29CC,WAA39C;AAAA,MAAw+CC,UAAx+C;AAAA,MAAo/CC,UAAp/C;AAAA,MAAggDC,QAAhgD;AAAA,MAA0gDC,uBAA1gD;AAAA,MAAmiDC,UAAniD;AAAA,MAA+iDC,QAA/iD;AAAA,MAAyjDC,YAAzjD;AAAA,MAAukDC,YAAvkD;AAAA,MAAqlDC,SAArlD;AAAA,MAAgmDC,UAAhmD;AAAA,MAA4mDC,WAA5mD;AAAA,MAAwnDC,aAAxnD;AAAA,MAAuoDC,QAAvoD;AAAA,MAAipDC,SAAjpD;AAAA,MAA4pDC,cAA5pD;AAAA,MAA4qDC,YAA5qD;AAAA,MAA0rDC,aAA1rD;AAAA,MAAysDC,QAAzsD;AAAA,MAAmtDC,YAAntD;AAAA,MAAiuDC,aAAjuD;AAAA,MAAgvDC,QAAhvD;AAAA,MAA0vDC,WAA1vD;AAAA,MAAuwDC,QAAvwD;AAAA,MAAixDC,aAAjxD;AAAA,MAAgyDC,aAAhyD;AAAA,MAA+yDC,QAA/yD;AAAA,MAAyzDC,WAAzzD;AAAA,MAAs0DC,WAAt0D;AAAA,MAAm1DC,cAAn1D;AAAA,MAAm2DC,aAAn2D;AAAA,MAAk3DC,OAAl3D;AAAA,MAA23DC,UAA33D;AAAA,MAAu4DC,YAAv4D;AAAA,MAAq5DC,iBAAr5D;AAAA,MAAw6DC,UAAx6D;AAAA,MAAo7DC,UAAp7D;AAAA,MAAg8DC,cAAh8D;AAAA,MAAg9DC,UAAh9D;AAAA,MAA49DC,UAA59D;AAAA,MAAw+DC,iBAAx+D;AAAA,MAA2/DC,kBAA3/D;AAAA,MAA+gEC,eAA/gE;AAAA,MAAgiEC,eAAhiE;AAAA,MAAijEC,cAAjjE;AAAA,MAAikEC,YAAjkE;AAAA,MAA+kEC,UAA/kE;AAAA,MAA2lEC,aAA3lE;AAAA,MAA0mEC,SAA1mE;AAAA,MAAqnEC,gBAArnE;AAAA,MAAuoEC,SAAvoE;AAAA,MAAkpEC,SAAlpE;AAAA,MAA6pEC,UAA7pE;AAAA,MAAyqEC,UAAzqE;AAAA,MAAqrEC,SAArrE;AAAA,MAAgsEC,QAAhsE;AAAA,MAA0sEC,UAA1sE;AAAA,MAAstEC,kBAAttE;AAAA,MAA0uEC,WAA1uE;AAAA,MAAuvEC,aAAvvE;AAAA,MAAswEC,QAAtwE;AAAA,MAAgxEC,SAAhxE;AAAA,MAA2xEC,SAA3xE;AAAA,MAAsyEC,SAAtyE;AAAA,MAAizEC,UAAjzE;AAAA,MAA6zEC,QAA7zE;AAAA,MAAu0EC,QAAv0E;AAAA,MAAi1EC,gBAAj1E;AAAA,MAAm2EC,QAAn2E;AAAA,MAA62EC,SAA72E;AAAA,MAAw3EC,WAAx3E;AAAA,MAAq4EC,WAAr4E;AAAA,MAAk5EC,SAAl5E;AAAA,MAA65EC,WAA75E;AAAA,MAA06EC,WAA16E;AAAA,MAAu7EC,WAAv7E;AAAA,MAAo8EC,WAAp8E;AAAA,MAAi9EC,WAAj9E;AAAA,MAA89EC,cAA99E;AAAA,MAA8+EC,SAA9+E;AAAA,MAAy/EC,kBAAz/E;AAAA,MAA6gFC,SAA7gF;AAAA,MAAwhFC,QAAxhF;AAAA,MAAkiFC,MAAliF;AAAA,MAA0iFC,SAA1iF;AAAA,MAAqjFC,UAArjF;AAAA,MAAikFC,MAAjkF;AAAA,MAAykFC,MAAzkF;AAAA,MAAilFC,KAAjlF;AAAA,MAAwlFC,GAAxlF;AAAA,MAA6lFC,oBAA7lF;AAAA,MAAmnFC,QAAnnF;AAAA,MAA6nFC,KAA7nF;AAAA,MAAmoFC,KAAnoF;AAAA,MAA0oFC,GAA1oF;AAAA,MAA+oFC,OAA/oF;AAAA,MAAwpFC,OAAxpF;AAAA,MAAiqFC,IAAjqF;AAAA,MAAuqFC,KAAvqF;AAAA,MAA8qFC,KAA9qF;AAAA,MAAqrFC,QAArrF;AAAA,MAA+rFC,GAA/rF;AAAA,MAAosFC,IAApsF;AAAA,MAA0sFC,aAA1sF;AAAA,MAAytFC,UAAztF;AAAA,MAAquFC,SAAruF;AAAA,MAAgvFC,OAAhvF;AAAA,MAAyvFC,QAAzvF;AAAA,MAAmwFC,IAAnwF;AAAA,MAAywFC,kBAAzwF;AAAA,MAA6xFC,eAA7xF;AAAA,MAA8yFC,gBAA9yF;AAAA,MAAg0FC,eAAh0F;AAAA,MAAi1FC,gBAAj1F;AAAA,MAAm2FC,UAAn2F;AAAA,MAA+2FC,GAA/2F;AAAA,MAAo3FC,OAAp3F;AAAA,MAA63FC,QAA73F;AAAA,MAAu4FC,GAAv4F;AAAA,MAA44FC,MAA54F;AAAA,MAAo5FC,CAAp5F;AAAA,MAAu5FC,MAAv5F;AAAA,MAA+5FC,WAA/5F;AAAA,MAA46FC,yCAA56F;AAAA,MAAu9FC,2CAAv9F;AAAA,MAAogGC,yBAApgG;AAAA,MAA+hGC,gBAA/hG;AAAA,MAAijGC,MAAjjG;AAAA,MAAyjGC,KAAzjG;AAAA,MAAgkGC,KAAhkG;AAAA,MAAukGC,KAAvkG;AAAA,MAA8kGC,OAA9kG;AAAA,MAAulGC,GAAvlG;AAAA,MAA4lGC,KAA5lG;AAAA,MAAmmGC,QAAnmG;AAAA,MAA6mGC,KAA7mG;AAAA,MAAonGC,CAApnG;AAAA,MAAunGC,GAAvnG;AAAA,MAA4nGC,GAA5nG;AAAA,MAAioGC,MAAjoG;AAAA,MAAyoGC,UAAzoG;AAAA,MAAqpGC,YAArpG;AAAA,MAAmqGC,cAAnqG;AAAA,MAAmrGC,aAAnrG;AAAA,MAAksGC,WAAlsG;AAAA,MAA+sGC,cAA/sG;AAAA,MAA+tGC,IAA/tG;AAAA,MAAquGC,GAAruG;AAAA,MAA0uGC,MAA1uG;AAAA,MAAkvGC,SAAlvG;AAAA,MAA6vGC,QAA7vG;AAAA,MAAuwGC,EAAvwG;AAAA,MAA2wGC,KAA3wG;AAAA,MAAkxGC,OAAlxG;AAAA,MAA2xGC,YAA3xG;AAAA,MAAyyGC,EAAzyG;AAAA,MAA6yGC,KAA7yG;AAAA,MAAozGC,KAApzG;AAAA,MAA2zGC,KAA3zG;AAAA,MAAk0GC,KAAl0G;AAAA,MAAy0GC,YAAz0G;AAAA,MAAu1GC,SAAv1G;AAAA,MAAk2GC,UAAl2G;AAAA,MAA82GC,SAA92G;AAAA,MAAy3GC,iBAAz3G;AAAA,MAA44GC,kBAA54G;AAAA,MAAg6GC,eAAh6G;AAAA,MAAi7GC,eAAj7G;AAAA,MAAk8GC,cAAl8G;AAAA,MAAk9GC,cAAl9G;AAAA,MAAk+GC,UAAl+G;AAAA,MAA8+GC,mBAA9+G;AAAA,MAAmgHC,mBAAngH;AAAA,MAAwhHC,OAAxhH;AAAA,MAAiiHC,KAAjiH;AAAA,MAAwiHC,QAAxiH;AAAA,MAAkjHC,IAAljH;AAAA,MAAwjHC,WAAxjH;AAAA,MAAqkHC,IAArkH;AAAA,MAA2kHC,KAA3kH;AAAA,MAAklHC,KAAllH;AAAA,MAAylHC,OAAzlH;AAAA,MAAkmHC,QAAlmH;AAAA,MAA4mHC,IAA5mH;AAAA,MAAknHC,GAAlnH;AAAA,MAAunHC,KAAvnH;AAAA,MAA8nHC,aAA9nH;AAAA,MAA6oHC,QAA7oH;AAAA,MAAupHC,GAAvpH;AAAA,MAA4pHC,IAA5pH;AAAA,MAAkqHC,qBAAlqH;AAAA,MAAyrHC,kBAAzrH;AAAA,MAA6sHC,IAA7sH;AAAA,MAAmtHC,IAAntH;AAAA,MAAytHC,GAAztH;AAAA,MAA8tHC,KAA9tH;AAAA,MAAquHC,GAAruH;AAAA,MAA0uHC,GAA1uH;AAAA,MAA+uHC,WAA/uH;AAAA,MAA4vHC,QAA5vH;AAAA,MAAswHC,mBAAtwH;AAAA,MAA2xHC,QAA3xH;AAAA,MAAqyHC,mBAAryH;AAAA,MAA0zHC,QAA1zH;AAAA,MAAo0HC,QAAp0H;AAAA,MAA80HC,QAA90H;AAAA,MAAw1HC,sBAAx1H;AAAA,MAAg3HC,QAAh3H;AAAA,MAA03HC,QAA13H;AAAA,MAAo4HC,QAAp4H;AAAA,MAA84HC,QAA94H;AAAA,MAAw5HC,QAAx5H;AAAA,MAAk6HC,QAAl6H;AAAA,MAA46HC,mBAA56H;AAAA,MAAi8HC,QAAj8H;AAAA,MAA28HC,QAA38H;AAAA,MAAq9HC,GAAr9H;AAAA,MAA09HC,IAA19H;AAAA,MAAg+HC,MAAh+H;AAAA,MAAw+HC,MAAx+H;AAAA,MAAg/HC,IAAh/H;AAAA,MAAs/HC,MAAt/H;AAAA,MAA8/HC,MAA9/H;AAAA,MAAsgIC,MAAtgI;AAAA,MAA8gIC,MAA9gI;AAAA,MAAshIC,MAAthI;AAAA,MAA8hIC,aAA9hI;AAAA,MAA6iIC,GAA7iI;AAAA,MAAkjIC,KAAljI;AAAA,MAAyjIC,SAAzjI;AAAA,MAAokIC,QAApkI;AAAA,MAA8kIC,IAA9kI;AAAA,MAAolIC,UAAplI;AAAA,MAAgmIC,MAAhmI;AAAA,MAAwmIC,SAAxmI;AAAA,MAAmnIC,MAAnnI;AAAA,MAA2nIC,KAA3nI;AAAA,MAAkoIC,SAAloI;AAAA,MAA6oIC,YAA7oI;AAAA,MAA2pIC,QAA3pI;AAAA,MAAqqIC,QAArqI;AAAA,MAA+qIC,CAA/qI;AAAA,MAAkrIC,IAAlrI;AAAA,MAAwrIC,WAAxrI;AAAA,MAAqsIC,OAArsI;AAAA,MAA8sIC,IAA9sI;AAAA,MAAotIC,GAAptI;AAAA,MAAytIC,MAAztI;AAAA,MAAiuIC,IAAjuI;AAAA,MAAuuIC,WAAvuI;AAAA,MAAovIC,UAApvI;AAAA,MAAgwIC,YAAhwI;AAAA,MAA8wIC,WAA9wI;AAAA,MAA2xIC,aAA3xI;AAAA,MAA0yIC,mBAA1yI;AAAA,MAA+zIC,KAA/zI;AAAA,MAAs0IC,UAAt0I;AAAA,MAAk1IC,WAAl1I;AAAA,MAA+1IC,WAA/1I;AAAA,MAA42IC,2BAA52I;AAAA,MAAy4IC,oBAAz4I;AAAA,MAA+5IC,MAA/5I;AAAA,MAAu6IC,GAAv6I;AAAA,MAA46IC,WAA56I;AAAA,MAAy7IC,OAAz7I;AAAA,MAAi8IC,aAAj8I;AAAA,MAAg9IC,GAAh9I;AAAA,MAAq9IC,yBAAr9I;AAAA,MAAg/IC,0BAAh/I;AAAA,MAA4gJC,OAA5gJ;AAAA,MAAqhJC,yBAArhJ;AAAA,MAAgjJC,WAAhjJ;AAAA,MAA6jJC,SAA7jJ;AAAA,MAAwkJC,IAAxkJ;AAAA,MAA8kJC,GAA9kJ;AAAA,MAAmlJC,YAAnlJ;AAAA,MAAimJC,WAAjmJ;AAAA,MAA8mJC,gBAA9mJ;AAAA,MAAgoJC,SAAhoJ;AAAA,MAA2oJC,UAA3oJ;AAAA,MAAupJC,qBAAvpJ;AAAA,MAA8qJC,kBAA9qJ;AAAA,MAAksJC,cAAlsJ;AAAA,MAAktJC,yBAAltJ;AAAA,MAA6uJC,qBAA7uJ;AAAA,MAAowJC,0BAApwJ;AAAA,MAAgyJC,2BAAhyJ;AAAA,MAA6zJC,yBAA7zJ;AAAA,MAAw1JC,iCAAx1J;AAAA,MAA23JC,qBAA33J;AAAA,MAAk5JC,mBAAl5J;AAAA,MAAu6JC,sBAAv6J;AAAA,MAA+7JC,4BAA/7J;AAAA,MAA69JC,oBAA79J;AAAA,MAAm/JC,qBAAn/J;AAAA,MAA0gKC,qBAA1gK;AAAA,MAAiiKC,kBAAjiK;AAAA,MAAqjKC,mBAArjK;AAAA,MAA0kKC,4BAA1kK;AAAA,MAAwmKC,gCAAxmK;AAAA,MAA0oKC,uBAA1oK;AAAA,MAAmqKC,qBAAnqK;AAAA,MAAyrKC,MAAzrK;AAAA,MAAisKC,OAAjsK;AAAA,MAA0sKC,MAA1sK;AAAA,MAAktKC,OAAltK;AAAA,MAA2tKC,OAA3tK;AAAA,MAAmuKC,OAAnuK;AAAA,MAA4uKC,oCAA5uK;AAAA,MAAkxKC,GAAlxK;AAAA,MAAuxKC,OAAvxK;AAAA,MAAgyKC,eAAhyK;AAAA,MAAizKC,iCAAjzK;AAAA,MAAo1KC,KAAp1K;AAAA,MAA01KC,SAA11K;AAAA,MAAq2KC,cAAr2K;AAAA,MAAq3KC,OAAr3K;AAAA,MAA83KC,OAA93K;AAAA,MAAu4KC,MAAv4K;AAAA,MAA+4KC,gBAA/4K;AAAA,MAAi6KC,YAAj6K;AAAA,MAA+6KC,mBAA/6K;AAAA,MAAo8KC,iBAAp8K;AAAA,MAAu9KC,mBAAv9K;AAAA,MAA4+KC,eAA5+K;AAAA,MAA6/KC,OAA7/K;AAAA,MAAsgLC,QAAtgL;AAAA,MAAghLC,MAAhhL;AAAA,MAAwhLC,YAAxhL;AAAA,MAAsiLC,MAAtiL;AAAA,MAA8iLC,KAA9iL;AAAA,MAAqjLC,IAArjL;AAAA,MAA2jLC,OAA3jL;AAAA,MAAokLC,MAApkL;AAAA,MAA4kLC,KAA5kL;AAAA,MAAmlLC,QAAnlL;AAAA,MAA6lLC,OAA7lL;AAAA,MAAsmLC,MAAtmL;AAAA,MAA8mLC,OAA9mL;AAAA,MAAunLC,MAAvnL;AAAA,MAA+nLC,KAA/nL;AAAA,MAAsoLC,IAAtoL;AAAA,MAA4oLC,yBAA5oL;AAAA,MAAuqLC,GAAvqL;AAAA,MAA4qLC,MAA5qL;AAAA,MAAorLC,KAAprL;AAAA,MAA2rLC,IAA3rL;AAAA,MAAisLC,OAAjsL;AAAA,MAA0sLC,KAA1sL;AAAA,MAAitLC,QAAjtL;AAAA,MAA2tLC,MAA3tL;AAAA,MAAmuLC,KAAnuL;AAAA,MAA0uLC,IAA1uL;AAAA,MAAgvLC,GAAhvL;AAAA,MAAqvLC,OAArvL;AAAA,MAA8vLC,4CAA9vL;AAAA,MAA4yLC,YAA5yL;AAAA,MAA0zLC,OAA1zL;AAAA,MAAm0LC,gCAAn0L;AAAA,MAAq2LC,cAAr2L;AAAA,MAAq3LC,WAAr3L;AAAA,MAAk4LC,uBAAl4L;AAAA,MAA25LC,MAA35L;AAAA,MAAm6LC,iBAAn6L;AAAA,MAAs7LC,QAAt7L;AAAA,MAA+7LC,uBAA/7L;AAAA,MAAw9LC,kDAAx9L;AAAA,MAA4gMC,aAA5gM;AAAA,MAA2hMC,UAA3hM;AAAA,MAAuiMC,QAAviM;AAAA,MAAijMC,SAAjjM;AAAA,MAA4jMC,SAA5jM;AAAA,MAAukMC,QAAvkM;AAAA,MAAilMC,SAAjlM;AAAA,MAA2lMC,SAA3lM;AAAA,MAAsmMC,eAAtmM;AAAA,MAAunMC,OAAvnM;AAAA,MAAgoMC,KAAhoM;AAAA,MAAuoMC,QAAvoM;AAAA,MAAipMC,iCAAjpM;AAAA,MAAorMC,mBAAprM;AAAA,MAAwsMC,eAAxsM;AAAA,MAAytMC,cAAztM;AAAA,MAAyuMC,aAAzuM;AAAA,MAAwvMC,YAAxvM;AAAA,MAAswMC,eAAtwM;AAAA,MAAuxMC,iBAAvxM;AAAA,MAA0yMC,eAA1yM;AAAA,MAA2zMC,UAA3zM;AAAA,MAAu0MC,8BAAv0M;AAAA,MAAu2MC,sCAAv2M;AAAA,MAA+4MC,UAA/4M;AAAA,MAA25MC,SAA35M;AAAA,MAAs6MC,IAAt6M;AAAA,MAA46MC,SAA56M;AAAA,MAAu7MC,QAAv7M;AAAA,MAAi8MC,wBAAj8M;AAAA,MAA29MC,0BAA39M;AAAA,MAAu/MC,WAAv/M;AAAA,MAAogNC,MAApgN;AAAA,MAA4gNC,eAA5gN;AAAA,MAA6hNC,mBAA7hN;AAAA,MAAkjNC,MAAljN;AAAA,MAAyjNC,yBAAzjN;AAAA,MAAmlNC,kBAAnlN;AAAA,MAAumNC,OAAvmN;AAAA,MAAgnNC,SAAhnN;AAAA,MAA2nNC,eAA3nN;AAAA,MAA4oNC,iBAA5oN;AAAA,MAA+pNC,eAA/pN;AAAA,MAAgrNC,eAAhrN;AAAA,MAAisNC,eAAjsN;AAAA,MAAktNC,IAAltN;AAAA,MAAwtNC,OAAxtN;AAAA,MAAiuNC,QAAjuN;AAAA,MAA2uNC,OAA3uN;AAAA,MAAovNC,QAApvN;AAAA,MAA8vNC,OAA9vN;AAAA,MAAuwNC,QAAvwN;AAAA,MAAixNC,SAAjxN;AAAA,MAA4xNC,SAA5xN;AAAA,MAAuyNC,SAAvyN;AAAA,MAAkzNC,SAAlzN;AAAA,MAA6zNC,IAA7zN;AAAA,MAAm0NC,KAAn0N;AAAA,MAA00NC,EAA10N;AAAA,MAA80NC,OAA90N;AAAA,MAAs1NC,cAAt1N;AAAA,MAAs2NC,UAAt2N;AAAA,MAAk3NC,wBAAl3N;AAAA,MAA44NC,oBAA54N;AAAA,MAAk6NC,IAAl6N;AAAA,MAAw6NC,QAAx6N;AAAA,MAAk7NC,MAAl7N;AAAA,MAA07NC,YAA17N;AAAA,MAAu8NC,IAAv8N;AAAA,MAA68NC,KAA78N;AAAA,MAAo9NC,UAAp9N;AAAA,MAAg+NC,sBAAh+N;AAAA,MAAw/NC,GAAx/N;AAAA,MAA6/NC,WAA7/N;AAAA,MAA0gOC,IAA1gO;AAAA,MAAghOC,SAAhhO;AAAA,MAA2hOC,QAA3hO;AAAA,MAAqiOC,KAAriO;AAAA,MAA4iOC,OAA5iO;AAAA,MAAqjOC,YAArjO;AAAA,MAAmkOC,WAAnkO;AAAA,MAAglOC,MAAhlO;AAAA,MAAwlOC,cAAxlO;AAAA,MAAwmOC,QAAxmO;AAAA,MAAknOC,gBAAlnO;AAAA,MAAooOC,OAApoO;AAAA,MAA6oOC,IAA7oO;AAAA,MAAmpOC,gBAAnpO;AAAA,MAAqqOC,WAArqO;AAAA,MAAkrOC,2BAAlrO;AAAA,MAA+sOC,2DAA/sO;AAAA,MAA4wOC,eAA5wO;AAAA,MAA6xOC,wBAA7xO;AAAA,MAAuzOC,IAAvzO;AAAA,MAA6zOC,MAA7zO;AAAA,MAAq0OC,QAAr0O;AAAA,MAA+0OC,SAA/0O;AAAA,MAA01OC,gBAA11O;AAAA,MAA42OC,IAA52O;AAAA,MAAk3OC,IAAl3O;AAAA,MAAw3OC,KAAx3O;AAAA,MAA+3OC,IAA/3O;AAAA,MAAq4OC,IAAr4O;AAAA,MAA24OC,KAA34O;AAAA,MAAk5OC,IAAl5O;AAAA,MAAw5OC,KAAx5O;AAAA,MAA+5OC,UAA/5O;AAAA,MAA26OC,IAA36O;AAAA,MAAi7OC,gBAAj7O;AAAA,MAAm8OC,iBAAn8O;AAAA,MAAs9OC,SAAt9O;AAAA,MAAi+OC,WAAj+O;AAAA,MAA8+OC,uBAA9+O;AAAA,MAAugPC,gBAAvgP;AAAA,MAAyhPC,aAAzhP;AAAA,MAAwiPC,aAAxiP;AAAA,MAAujPC,mBAAvjP;AAAA,MAA4kPC,aAA5kP;AAAA,MAA2lPC,WAA3lP;AAAA,MAAwmPC,eAAxmP;AAAA,MAAynPC,uBAAznP;AAAA,MAAkpPC,UAAlpP;AAAA,MAA8pPC,WAA9pP;AAAA,MAA2qPC,YAA3qP;AAAA,MAAyrPC,WAAzrP;AAAA,MAAssPC,WAAtsP;AAAA,MAAmtPC,kBAAntP;AAAA,MAAsuPC,SAAtuP;AAAA,MAAivPC,aAAjvP;AAAA,MAAgwPC,kBAAhwP;AAAA,MAAoxPC,MAApxP;AAAA,MAA4xPC,KAA5xP;AAAA,MAAmyPC,MAAnyP;AAAA,MAA2yPC,MAA3yP;AAAA,MAAmzPC,IAAnzP;AAAA,MAAyzPC,YAAzzP;AAAA,MAAu0PC,QAAv0P;AAAA,MAAi1PC,kBAAj1P;AAAA,MAAq2PC,eAAr2P;AAAA,MAAs3PC,IAAt3P;AAAA,MAA43PC,OAA53P;AAAA,MAAo4PC,YAAp4P;AAAA,MAAk5PC,aAAl5P;AAAA,MAAi6PC,YAAj6P;AAAA,MAA+6PC,YAA/6P;AAAA,MAA67PC,aAA77P;AAAA,MAA48PC,aAA58P;AAAA,MAA29PC,SAA39P;AAAA,MAAs+PC,MAAt+P;AAAA,MAA8+PC,WAA9+P;AAAA,MAA2/PC,UAA3/P;AAAA,MAAugQC,MAAvgQ;AAAA,MAA+gQC,EAA/gQ;AAAA,MAAmhQC,GAAnhQ;AAAA,MAAwhQC,EAAxhQ;AAAA,MAA4hQC,EAA5hQ;AAAA,MAAgiQC,EAAhiQ;AAAA,MAAoiQC,EAApiQ;AAAA,MAAwiQC,EAAxiQ;AAAA,MAA4iQC,UAA5iQ;AAAA,MAAwjQC,MAAxjQ;AAAA,MAAgkQC,QAAhkQ;AAAA,MAA0kQC,YAA1kQ;AAAA,MAAwlQC,QAAxlQ;AAAA,MAAkmQC,aAAlmQ;AAAA,MAAinQC,mBAAjnQ;AAAA,MAAsoQC,WAAtoQ;AAAA,MAAmpQC,SAAnpQ;AAAA,MAA8pQC,UAA9pQ;AAAA,MAA0qQC,OAA1qQ;AAAA,MAAmrQC,QAAnrQ;AAAA,MAA6rQC,MAA7rQ;AAAA,MAAqsQC,WAArsQ;AAAA,MAAktQC,UAAltQ;AAAA,MAA8tQC,aAA9tQ;AAAA,MAA6uQC,wBAA7uQ;AAAA,MAAuwQC,sBAAvwQ;AAAA,MAA8xQC,4BAA9xQ;AAAA,MAA2zQC,QAA3zQ;AAAA,MAAq0QC,cAAr0Q;AAAA,MAAq1QC,WAAr1Q;AAAA,MAAk2QC,IAAl2Q;AAAA,MAAw2QC,mBAAx2Q;AAAA,MAA63QC,SAA73Q;AAAA,MAAw4QC,SAAx4Q;AAAA,MAAm5QC,KAAn5Q;AAAA,MAA05QC,KAA15Q;AAAA,MAAi6QC,MAAj6Q;AAAA,MAAy6QC,gCAAz6Q;AAAA,MAA28QC,KAA38Q;AAAA,MAAk9QC,YAAl9Q;AAAA,MAAg+QC,MAAh+Q;AAAA,MAAw+QC,GAAx+Q;AAAA,MAA6+QC,QAA7+Q;AAAA,MAAu/QC,WAAv/Q;AAAA,MAAogRC,SAApgR;AAAA,MAA+gRC,yBAA/gR;AAAA,MAA0iRC,mBAA1iR;AAAA,MAA+jRC,eAA/jR;AAAA,MAAglRC,OAAhlR;AAAA,MAAylRC,eAAzlR;AAAA,MAA0mRC,WAA1mR;AAAA,MAAunRC,IAAvnR;AAAA,MAA4nRC,cAA5nR;AAAA,MAA4oRC,YAA5oR;AAAA,MAA0pRC,WAA1pR;AAAA,MAAuqRC,4BAAvqR;AAAA,MAAqsRC,yBAArsR;AAAA,MAAguRC,sBAAhuR;AAAA,MAAuvRC,cAAvvR;AAAA,MAAuwRC,aAAvwR;AAAA,MAAsxRC,QAAtxR;AAAA,MAAgyRC,SAAhyR;AAAA,MAA2yRC,aAA3yR;AAAA,MAA0zRC,KAA1zR;AAAA,MAAi0RC,EAAj0R;AAAA,MAAq0RC,KAAr0R;AAAA,MAA40RC,iBAA50R;AAAA,MAA+1RC,2BAA/1R;AAAA,MAA43RC,aAA53R;AAAA,MAA24RC,aAA34R;AAAA,MAA05RC,mBAA15R;AAAA,MAA+6RC,UAA/6R;AAAA,MAA27RC,eAA37R;AAAA,MAA48RC,WAA58R;AAAA,MAAy9RC,OAAz9R;AAAA,MAAk+RC,OAAl+R;AAAA,MAA2+RC,EAA3+R;AAAA,MAA++RC,IAA/+R;AAAA,MAAq/RC,aAAr/R;AAAA,MAAogSC,cAApgS;AAAA,MAAohSC,IAAphS;AAAA,MAA0hSC,UAA1hS;AAAA,MAAsiSC,MAAtiS;AAAA,MAA8iSC,MAA9iS;AAAA,MAAqjSC,OAArjS;AAAA,MAA8jSC,SAA9jS;AAAA,MAAykSC,QAAzkS;AAAA,MAAmlSC,gBAAnlS;AAAA,MAAqmSC,mBAArmS;AAAA,MAA0nSC,eAA1nS;AAAA,MAA2oSC,IAA3oS;AAAA,MAAgpSC,OAAhpS;AAAA,MAAypSC,aAAzpS;AAAA,MAAwqSC,IAAxqS;AAAA,MAA8qSC,wBAA9qS;AAAA,MAAwsSC,aAAxsS;AAAA,MAAutSC,sBAAvtS;AAAA,MAA8uSC,YAA9uS;AAAA,MAA4vSC,OAA5vS;AAAA,MAAqwSC,wBAArwS;AAAA,MAA+xSC,mBAA/xS;AAAA,MAAozSC,UAApzS;AAAA,MAAg0SC,kBAAh0S;AAAA,MAAo1SC,qCAAp1S;AAAA,MAA23SC,YAA33S;AAAA,MAAy4SC,cAAz4S;AAAA,MAAy5SC,SAAz5S;AAAA,MAAo6SC,gBAAp6S;AAAA,MAAs7SC,gBAAt7S;AAAA,MAAw8SC,aAAx8S;AAAA,MAAu9SC,KAAv9S;AAAA,MAA89SC,mBAA99S;AAAA,MAAm/SC,OAAn/S;AAAA,MAA4/SC,mBAA5/S;AAAA,MAAihTC,eAAjhT;AAAA,MAAkiTC,qBAAliT;AAAA,MAAyjTC,MAAzjT;AAAA,MAAikTC,aAAjkT;AAAA,MAAglTC,OAAhlT;AAAA,MAAylTC,QAAzlT;AAAA,MAAmmTC,aAAnmT;AAAA,MAAknTC,QAAlnT;AAAA,MAA4nTC,WAA5nT;AAAA,MAAyoTC,WAAzoT;AAAA,MAAqpTC,UAArpT;AAAA,MAAiqTC,gBAAjqT;AAAA,MAAmrTC,iBAAnrT;AAAA,MAAssTC,uBAAtsT;AAAA,MAA+tTC,eAA/tT;AAAA,MAAgvTC,YAAhvT;AAAA,MAA8vTC,SAA9vT;AAAA,MAAywTC,eAAzwT;AAAA,MAA0xTC,uBAA1xT;AAAA,MAAmzTC,KAAnzT;AAAA,MAA0zTC,SAA1zT;AAAA,MAAq0TC,UAAr0T;AAAA,MAAi1TC,qBAAj1T;AAAA,MAAw2TC,iBAAx2T;AAAA,MAA23TC,uBAA33T;AAAA,MAAo5TC,UAAp5T;AAAA,MAAg6TC,UAAh6T;AAAA,MAA46TC,gBAA56T;AAAA,MAA87TC,cAA97T;AAAA,MAA88TC,oBAA98T;AAAA,MAAo+TC,KAAp+T;AAAA,MAA2+TC,KAA3+T;AAAA,MAAk/TC,SAAl/T;AAAA,MAA6/TC,gBAA7/T;AAAA,MAA+gUC,YAA/gU;AAAA,MAA6hUC,SAA7hU;AAAA,MAAwiUC,SAAxiU;AAAA,MAAmjUC,kBAAnjU;AAAA,MAAukUC,uBAAvkU;AAAA,MAAgmUC,yBAAhmU;AAAA,MAA2nUC,uBAA3nU;AAAA,MAAopUC,4BAAppU;AAAA,MAAkrUC,mCAAlrU;AAAA,MAAutUC,kCAAvtU;AAAA,MAA2vUC,QAA3vU;AAAA,MAAqwUC,gBAArwU;AAAA,MAAuxUC,OAAvxU;AAAA,MAAgyUC,aAAhyU;AAAA,MAA+yUC,UAA/yU;AAAA,MAA2zUC,OAA3zU;AAAA,MAAo0UC,WAAp0U;AAAA,MAAi1UC,kBAAj1U;AAAA,MAAq2UC,KAAr2U;AAAA,MAA42UC,QAA52U;AAAA,MAAs3UC,WAAt3U;AAAA,MAAk4UC,QAAl4U;AAAA,MAA44UC,WAA54U;AAAA,MAAy5UC,YAAz5U;AAAA,MAAu6UC,kCAAv6U;AAAA,MAA28UC,IAA38U;AAAA,MAAi9UC,cAAj9U;AAAA,MAAi+UC,EAAj+U;AAAA,MAAq+UC,QAAr+U;AAAA,MAA++UC,SAA/+U;AAAA,MAA0/UC,eAA1/U;AAAA,MAA2gVC,cAA3gV;AAAA,MAA2hVC,GAA3hV;AAAA,MAAgiVC,OAAhiV;AAAA,MAAyiVC,QAAziV;AAAA,MAAmjVC,MAAnjV;AAAA,MAA2jVC,KAA3jV;AAAA,MAAkkVC,KAAlkV;AAAA,MAAykVC,IAAzkV;AAAA,MAA+kVC,UAA/kV;AAAA,MAA2lVC,SAA3lV;AAAA,MAAsmVC,MAAtmV;AAAA,MAA8mVC,YAA9mV;AAAA,MAA4nVC,SAA5nV;AAAA,MAAuoVC,IAAvoV;AAAA,MAA6oVC,YAA7oV;AAAA,MAA2pVC,cAA3pV;AAAA,MAA2qVC,gBAA3qV;AAAA,MAA6rVC,IAA7rV;AAAA,MAAmsVC,IAAnsV;AAAA,MAAysVC,OAAzsV;AAAA,MAAktVC,IAAltV;AAAA,MAAwtVC,OAAxtV;AAAA,MAAiuVC,SAAjuV;AAAA,MAA4uVC,IAA5uV;AAAA,MAAkvVC,UAAlvV;AAAA,MAA8vVC,IAA9vV;AAAA,MAAowVC,IAApwV;AAAA,MAA0wVC,IAA1wV;AAAA,MAAgxVC,GAAhxV;AAAA,MAAqxVC,KAArxV;AAAA,MAA4xVC,IAA5xV;AAAA,MAAkyVC,OAAlyV;AAAA,MAA2yVC,UAA3yV;AAAA,MAAuzVC,cAAvzV;AAAA,MAAu0VC,YAAv0V;AAAA,MAAq1VC,UAAr1V;AAAA,MAAi2VC,IAAj2V;AAAA,MAAu2VC,MAAv2V;AAAA,MAA+2VC,KAA/2V;AAAA,MAAs3VC,WAAt3V;AAAA,MAAm4VC,IAAn4V;AAAA,MAAy4VC,MAAz4V;AAAA,MAAi5VC,gBAAj5V;AAAA,MAAk6VC,QAAl6V;AAAA,MAA46VC,YAA56V;AAAA,MAA07VC,qBAA17V;AAAA,MAAi9VC,8BAAj9V;AAAA,MAAi/VC,qBAAj/V;AAAA,MAAwgWC,4BAAxgW;AAAA,MAAsiWC,0BAAtiW;AAAA,MAAkkWC,iBAAlkW;AAAA,MAAqlWC,gBAArlW;AAAA,MAAumWC,eAAvmW;AAAA,MAAwnWC,MAAxnW;AAAA,MAAgoWC,aAAhoW;AAAA,MAA+oWC,eAA/oW;AAAA,MAAgqWC,aAAhqW;AAAA,MAA+qWC,WAA/qW;AAAA,MAA4rWC,UAA5rW;AAAA,MAAwsWC,YAAxsW;AAAA,MAAstWC,WAAttW;AAAA,MAAmuWC,aAAnuW;AAAA,MAAkvWC,eAAlvW;AAAA,MAAmwWC,eAAnwW;AAAA,MAAoxWC,QAApxW;AAAA,MAA8xWC,QAA9xW;AAAA,MAAwyWC,QAAxyW;AAAA,MAAkzWC,SAAlzW;AAAA,MAA6zWC,SAA7zW;AAAA,MAAw0WC,SAAx0W;AAAA,MAAm1WC,SAAn1W;AAAA,MAA81WC,QAA91W;AAAA,MAAw2WC,QAAx2W;AAAA,MAAk3WC,MAAl3W;AAAA,MAA03WC,OAA13W;AAAA,MAAm4WC,UAAn4W;AAAA,MAA84WC,uBAA94W;AAAA,MAAu6WC,CAAv6W;AAAA,MAA06WC,GAA16W;AAAA,MAA+6WC,UAA/6W;AAAA,MAA27WC,aAA37W;AAAA,MAA08WC,OAA18W;AAAA,MAAm9WC,SAAn9W;AAAA,MAA89WC,aAA99W;AAAA,MAA6+WC,KAA7+W;AAAA,MAAo/WC,EAAp/W;AAAA,MAAw/WC,EAAx/W;AAAA,MAA4/WC,EAA5/W;AAAA,MAAggXC,EAAhgX;AAAA,MAAogXC,EAApgX;AAAA,MAAwgXC,EAAxgX;AAAA,MAA4gXC,EAA5gX;AAAA,MAAghXC,EAAhhX;AAAA,MAAohXC,EAAphX;AAAA,MAAwhXC,EAAxhX;AAAA,MAA4hXC,KAA5hX;AAAA,MAAmiXC,cAAniX;AAAA,MAAmjXC,QAAnjX;AAAA,MAA6jXC,QAA7jX;AAAA,MAAukXC,0BAAvkX;AAAA,MAAmmXC,SAAnmX;AAAA,MAA8mXC,mBAA9mX;AAAA,MAAmoXC,YAAnoX;AAAA,MAAipXC,gBAAjpX;AAAA,MAAmqXC,KAAnqX;AAAA,MAA0qXC,uBAA1qX;AAAA,MAAksXC,SAAlsX;AAAA,MAA4sXC,GAA5sX;AAAA,MAAitXC,UAAjtX;AAAA,MAA6tXC,SAA7tX;AAAA,MAAwuXC,WAAxuX;AAAA,MAAqvXC,KAArvX;AAAA,MAA4vXC,SAA5vX;AAAA,MAAuwXC,SAAvwX;AAAA,MAAkxXC,YAAlxX;AAAA,MAAgyXC,uDAAhyX;AAAA,MAAy1XC,KAAz1X;AAAA,MAAg2XC,QAAh2X;AAAA,MAA02XC,YAA12X;AAAA,MAAw3XC,SAAx3X;AAAA,MAAm4XC,eAAn4X;AAAA,MAAo5XC,oBAAp5X;AAAA,MAA06XC,oBAA16X;AAAA,MAAg8XC,oBAAh8X;AAAA,MAAs9XC,oBAAt9X;AAAA,MAA4+XC,iBAA5+X;AAAA,MAA+/XC,kBAA//X;AAAA,MAAmhYC,iBAAnhY;AAAA,MAAsiYC,eAAtiY;AAAA,MAAujYC,gBAAvjY;AAAA,MAAykYC,iBAAzkY;AAAA,MAA4lYC,iBAA5lY;AAAA,MAA+mYC,eAA/mY;AAAA,MAAgoYC,qBAAhoY;AAAA,MAAupYC,mBAAvpY;AAAA,MAA4qYC,kBAA5qY;AAAA,MAAgsYC,iBAAhsY;AAAA,MAAmtYC,gBAAntY;AAAA,MAAquYC,iBAAruY;AAAA,MAAwvYC,eAAxvY;AAAA,MAAywYC,iBAAzwY;AAAA,MAA4xYC,kBAA5xY;AAAA,MAAgzYC,kBAAhzY;AAAA,MAAo0YC,kBAAp0Y;AAAA,MAAw1YC,kBAAx1Y;AAAA,MAA42YC,kBAA52Y;AAAA,MAAg4YC,kBAAh4Y;AAAA,MAAo5YC,gBAAp5Y;AAAA,MAAs6YC,uBAAt6Y;AAAA,MAA+7YC,qBAA/7Y;AAAA,MAAs9YC,kBAAt9Y;AAAA,MAA0+YC,cAA1+Y;AAAA,MAA0/YC,UAA1/Y;AAAA,MAAsgZC,mBAAtgZ;AAAA,MAA2hZC,UAA3hZ;AAAA,MAAuiZC,WAAviZ;AAAA,MAAojZC,YAApjZ;AAAA,MAAkkZC,mBAAlkZ;AAAA,MAAulZC,cAAvlZ;AAAA,MAAumZC,UAAvmZ;AAAA,MAAmnZC,aAAnnZ;AAAA,MAAioZC,wBAAjoZ;AAAA,MAA2pZC,YAA3pZ;AAAA,MAAyqZC,oBAAzqZ;AAAA,MAA+rZC,WAA/rZ;AAAA,MAA2sZC,mBAA3sZ;AAAA,MAAguZC,YAAhuZ;AAAA,MAA8uZC,YAA9uZ;AAAA,MAA2vZC,SAA3vZ;AAAA,MAAswZC,aAAtwZ;AAAA,MAAqxZC,YAArxZ;AAAA,MAAmyZC,oBAAnyZ;AAAA,MAAuzZC,yBAAvzZ;AAAA,MAAi1ZC,kBAAj1Z;AAAA,MAAq2ZC,UAAr2Z;AAAA,MAAi3ZC,SAAj3Z;AAAA,MAA43ZC,gBAA53Z;AAAA,MAA84ZC,SAA94Z;AAAA,MAAy5ZC,WAAz5Z;AAAA,MAAs6ZC,cAAt6Z;AAAA,MAAs7ZC,IAAt7Z;AAAA,MAA47ZC,qBAA57Z;AAAA,MAAm9ZC,SAAn9Z;AAAA,MAA89ZC,WAA99Z;AAAA,MAA2+ZC,WAA3+Z;AAAA,MAAw/ZC,UAAx/Z;AAAA,MAAogaC,oBAApga;AAAA,MAA0haC,YAA1ha;AAAA,MAAwiaC,aAAxia;AAAA,MAAujaC,WAAvja;AAAA,MAAokaC,iBAApka;AAAA,MAAulaC,UAAvla;AAAA,MAAmmaC,gBAAnma;AAAA,MAAqnaC,IAArna;AAAA,MAA2naC,IAA3na;AAAA,MAAioaC,IAAjoa;AAAA,MAAuoaC,IAAvoa;AAAA,MAA6oaC,KAA7oa;AAAA,MAAopaC,WAAppa;AAAA,MAAiqaC,UAAjqa;AAAA,MAA6qaC,QAA7qa;AAAA,MAAuraC,WAAvra;AAAA,MAAosaC,wBAApsa;AAAA,MAA8taC,IAA9ta;AAAA,MAAouaC,WAApua;AAAA,MAAivaC,KAAjva;AAAA,MAAuvaC,mCAAvva;AAAA,MAA4xaC,sBAA5xa;AAAA,MAAmzaC,GAAnza;AAAA,MAAwzaC,IAAxza;AAAA,MAA8zaC,aAA9za;AAAA,MAA60aC,yBAA70a;AAAA,MAAw2aC,iBAAx2a;AAAA,MAA23aC,OAA33a;AAAA,MAAo4aC,mBAAp4a;AAAA,MAAy5aC,aAAz5a;AAAA,MAAu6aC,mBAAv6a;AAAA,MAA47aC,KAA57a;AAAA,MAAm8aC,MAAn8a;AAAA,MAA28aC,MAA38a;AAAA,MAAm9aC,GAAn9a;AAAA,MAAw9aC,6BAAx9a;AAAA,MAAu/aC,IAAv/a;AAAA,MAA6/aC,gBAA7/a;AAAA,MAA+gbC,mBAA/gb;AAAA,MAAoibC,IAApib;AAAA,MAA0ibC,UAA1ib;AAAA,MAAsjbC,eAAtjb;AAAA,MAAukbC,WAAvkb;AAAA,MAAolbC,qCAAplb;AAAA,MAA2nbC,wCAA3nb;AAAA,MAAqqbC,UAArqb;AAAA,MAAirbC,SAAjrb;AAAA,MAA4rbC,UAA5rb;AAAA,MAAwsbC,aAAxsb;AAAA,MAAutbC,SAAvtb;AAAA,MAAkubC,QAAlub;AAAA,MAA4ubC,WAA5ub;AAAA,MAAyvbC,YAAzvb;AAAA,MAAuwbC,WAAvwb;AAAA,MAAoxbC,WAApxb;AAAA,MAAiybC,SAAjyb;AAAA,MAA4ybC,OAA5yb;AAAA,MAAqzbC,kBAArzb;AAAA,MAAy0bC,IAAz0b;AAAA,MAA+0bC,SAA/0b;AAAA,MAA01bC,WAA11b;AAAA,MAAu2bC,aAAv2b;AAAA,MAAs3bC,YAAt3b;AAAA,MAAo4bC,YAAp4b;AAAA,MAAk5bC,cAAl5b;AAAA,MAAk6bC,GAAl6b;AAAA,MAAu6bC,KAAv6b;AAAA,MAA86bC,gBAA96b;AAAA,MAAg8bC,IAAh8b;AAAA,MAAs8bC,YAAt8b;AAAA,MAAo9bC,MAAp9b;AAAA,MAA49bC,WAA59b;AAAA,MAAy+bC,uBAAz+b;AAAA,MAAkgcC,QAAlgc;AAAA,MAA4gcC,yBAA5gc;AAAA,MAAuicC,sBAAvic;AAAA,MAA+jcC,aAA/jc;AAAA,MAA8kcC,wBAA9kc;AAAA,MAAwmcC,cAAxmc;AAAA,MAAwncC,kBAAxnc;AAAA,MAA4ocC,6BAA5oc;AAAA,MAA2qcC,oBAA3qc;AAAA,MAAiscC,eAAjsc;AAAA,MAAktcC,aAAltc;AAAA,MAAiucC,mBAAjuc;AAAA,MAAqvcC,IAArvc;AAAA,MAA2vcC,aAA3vc;AAAA,MAA0wcC,iBAA1wc;AAAA,MAA6xcC,0BAA7xc;AAAA,MAAyzcC,UAAzzc;AAAA,MAAq0cC,MAAr0c;AAAA,MAA60cC,KAA70c;AAAA,MAAo1cC,KAAp1c;AAAA,MAA21cC,cAA31c;AAAA,MAA22cC,UAA32c;AAAA,MAAu3cC,IAAv3c;AAAA,MAA63cC,KAA73c;AAAA,MAAo4cC,IAAp4c;AAAA,MAA04cC,MAA14c;AAAA,MAAk5cC,6BAAl5c;AAAA,MAAi7cC,IAAj7c;AAAA,MAAu7cC,MAAv7c;AAAA,MAA87cC,QAA97c;AAAA,MAAw8cC,gBAAx8c;AAAA,MAA09cC,IAA19c;AAAA,MAAg+cC,MAAh+c;AAAA,MAAw+cC,mBAAx+c;AAAA,MAA6/cC,0BAA7/c;AAAA,MAAyhdC,sCAAzhd;AAAA,MAAikdC,uBAAjkd;AAAA,MAA0ldC,wBAA1ld;AAAA,MAAondC,WAApnd;AAAA,MAAiodC,MAAjod;AAAA,MAAyodC,MAAzod;AAAA,MAAipdC,6BAAjpd;AAAA,MAA+qdC,OAA/qd;AAAA,MAAwrdC,MAAxrd;AAAA,MAAgsdC,MAAhsd;AAAA,MAAwsdC,kBAAxsd;AAAA,MAA4tdC,mBAA5td;AAAA,MAAivdC,UAAjvd;AAAA,MAA6vdC,SAA7vd;AAAA,MAAwwdC,WAAxwd;AAAA,MAAqxdC,SAArxd;AAAA,MAAgydC,KAAhyd;AAAA,MAAuydC,SAAvyd;AAAA,MAAkzdC,SAAlzd;AAAA,MAA6zdC,GAA7zd;AAAA,MAAk0dC,cAAl0d;AAAA,MAAk1dC,GAAl1d;AAAA,MAAu1dC,UAAv1d;AAAA,MAAk2dC,UAAl2d;AAAA,MAA62dC,iBAA72d;AAAA,MAAg4dC,QAAh4d;AAAA,MAA04dC,cAA14d;AAAA,MAA05dC,aAA15d;AAAA,MAAy6dC,uBAAz6d;AAAA,MAAk8dC,IAAl8d;AAAA,MAAw8dC,QAAx8d;AAAA,MAAk9dC,MAAl9d;AAAA,MAA09dC,SAA19d;AAAA,MAAo+dC,gBAAp+d;AAAA,MAAs/dC,6BAAt/d;AAAA,MAAqheC,+BAArhe;AAAA,MAAsjeC,UAAtje;AAAA,MAAkkeC,SAAlke;AAAA,MAA6keC,OAA7ke;AAAA,MAAsleC,6BAAtle;AAAA,MAAqneC,SAArne;AAAA,MAAgoeC,KAAhoe;AAAA,MAAuoeC,MAAvoe;AAAA,MAA+oeC,IAA/oe;AAAA,MAAqpeC,KAArpe;AAAA,MAA4peC,MAA5pe;AAAA,MAAoqeC,MAApqe;AAAA,MAA4qeC,MAA5qe;AAAA,MAAoreC,KAApre;AAAA,MAA2reC,KAA3re;AAAA,MAAkseC,SAAlse;AAAA,MAA6seC,SAA7se;AAAA,MAAwteC,SAAxte;AAAA,MAAmueC,UAAnue;AAAA,MAA+ueC,UAA/ue;AAAA,MAA2veC,MAA3ve;AAAA,MAAmweC,SAAnwe;AAAA,MAA6weC,MAA7we;AAAA,MAAqxeC,SAArxe;AAAA,MAAgyeC,KAAhye;AAAA,MAAuyeC,MAAvye;AAAA,MAA+yeC,QAA/ye;AAAA,MAAyzeC,YAAzze;AAAA,MAAu0eC,QAAv0e;AAAA,MAAg1eC,OAAh1e;AAAA,MAAy1eC,SAAz1e;AAAA,MAAo2eC,UAAp2e;AAAA,MAAg3eC,MAAh3e;AAAA,MAAw3eC,KAAx3e;AAAA,MAA+3eC,KAA/3e;AAAA,MAAs4eC,UAAt4e;AAAA,MAAk5eC,OAAl5e;AAAA,MAA25eC,OAA35e;AAAA,MAAo6eC,aAAp6e;AAAA,MAAm7eC,OAAn7e;AAAA,MAA47eC,KAA57e;AAAA,MAAm8eC,QAAn8e;AAAA,MAA68eC,MAA78e;AAAA,MAAq9eC,SAAr9e;AAAA,MAAg+eC,IAAh+e;AAAA,MAAs+eC,OAAt+e;AAAA,MACEC,OAAO,GAAG,GAAGC,cADf;;AAGAnvB,EAAAA,MAAM,GAAGovB,OAAO,CAAC,aAAD,CAAhB,CAz4BU,CA24BV;;AACA7C,EAAAA,OAAO,GAAG,OAAV;AAEA/0B,EAAAA,QAAQ,GAAG,CAAX,CA94BU,CAg5BV;;AACApC,EAAAA,IAAI,GAAG,IAAP;AAEArP,EAAAA,KAAK,GAAG,KAAR;AAEA4Q,EAAAA,cAAc,GAAG,KAAjB,CAr5BU,CAu5BV;;AACAF,EAAAA,eAAe,GAAG,iBAAlB;AAEAH,EAAAA,iBAAiB,GAAG,mBAApB;AAEAC,EAAAA,kBAAkB,GAAG,oBAArB;AAEAC,EAAAA,eAAe,GAAG,iBAAlB;AAEAE,EAAAA,cAAc,GAAG,gBAAjB,CAh6BU,CAk6BV;AACA;;AACAwoB,EAAAA,SAAS,GAAG3oB,kBAAZ;AAEAoS,EAAAA,2DAA2D,GAAG,IAA9D;AAEA8b,EAAAA,mCAAmC,GAAG,CAAtC;AAEA/b,EAAAA,2BAA2B,GAAG,IAA9B;AAEAhJ,EAAAA,iCAAiC,GAAG,IAApC;;AAEAykB,EAAAA,QAAQ,GAAI,YAAW;AACrB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBqB,QAmBfA,QAnBe;AAAA;;AAAA;AAAA;;AAmBJ;AAEjBA,IAAAA,QAAQ,CAACkL,SAAT,CAAmBC,CAAnB,GAAuB,IAAvB,CArBqB,CAqBQ;;AAE7BnL,IAAAA,QAAQ,CAACkL,SAAT,CAAmBE,CAAnB,GAAuB,IAAvB,CAvBqB,CAuBQ;;AAE7B,WAAOpL,QAAP;AAED,GA3BU,CA2BRqL,IA3BQ,CA2BH,IA3BG,CAAX;;AA6BAr0B,EAAAA,CAAC,GAAI,YAAW;AAAA,QACRA,CADQ;AAAA;;AAUZ,mBAAc;AAAA;;AACZ,aAAKwJ,IAAL,GAAY,EAAZ;AACA,aAAKA,IAAL,CAAUlD,GAAV,GAAgB,IAAhB;AACA,aAAKkD,IAAL,CAAUxC,GAAV,GAAgB,IAAhB;AACA,aAAKstB,CAAL,GAAS,IAAItL,QAAJ,EAAT;AACD;;AAfW;AAAA;AAAA,eAEZ,oBAAW;AACT,iBAAOzC,UAAU,CAAC,IAAD,CAAjB;AACD;AAJW;AAAA;AAAA,eAMZ,yBAAgB;AACd,iBAAO7d,iCAAiC,CAAC,IAAD,CAAxC;AACD;AARW;;AAAA;AAAA;;AAiBb;AAED1I,IAAAA,CAAC,CAACk0B,SAAF,CAAY1qB,IAAZ,GAAmB,IAAnB,CAnBc,CAmBW;;AAEzBxJ,IAAAA,CAAC,CAACk0B,SAAF,CAAYK,SAAZ,GAAwB,EAAxB;AAEAv0B,IAAAA,CAAC,CAACk0B,SAAF,CAAYM,GAAZ,GAAkB,EAAlB;AAEAx0B,IAAAA,CAAC,CAACk0B,SAAF,CAAY3E,MAAZ,GAAqB,IAArB,CAzBc,CA2Bd;;AACAvvB,IAAAA,CAAC,CAACk0B,SAAF,CAAYI,CAAZ,GAAgB,IAAhB,CA5Bc,CA4BQ;;AAEtBt0B,IAAAA,CAAC,CAACk0B,SAAF,CAAYO,CAAZ,GAAgB,GAAhB,CA9Bc,CA8BO;;AAErBz0B,IAAAA,CAAC,CAACk0B,SAAF,CAAYQ,CAAZ,GAAgB,CAAhB;AAEA10B,IAAAA,CAAC,CAACk0B,SAAF,CAAYS,GAAZ,GAAkB,CAAlB;AAEA,WAAO30B,CAAP;AAED,GAtCG,CAsCDq0B,IAtCC,CAsCI,IAtCJ,CAAJ;;AAwCAhkB,EAAAA,YAAY,GAAG,EAAf,CAn/BU,CAq/BV;;AACA9lB,EAAAA,IAAI,GAAG,CAAP;AAEA2P,EAAAA,GAAG,GAAG,CAAN;AAEA/N,EAAAA,MAAM,GAAG,CAAT;AAEA8Q,EAAAA,GAAG,GAAG,CAAN;AAEAyB,EAAAA,MAAM,GAAG,CAAT;AAEAtB,EAAAA,GAAG,GAAG,CAAN,CAhgCU,CAkgCV;AAEA;;AACAgN,EAAAA,OAAO,GAAG,CAAV;AAEAriB,EAAAA,GAAG,GAAGqiB,OAAO,EAAb;AAEApiB,EAAAA,GAAG,GAAGoiB,OAAO,EAAb;AAEAniB,EAAAA,GAAG,GAAGmiB,OAAO,EAAb;AAEAliB,EAAAA,GAAG,GAAGkiB,OAAO,EAAb;AAEAjiB,EAAAA,WAAW,GAAGiiB,OAAO,EAArB;AAEAhiB,EAAAA,MAAM,GAAGgiB,OAAO,EAAhB;AAEA/hB,EAAAA,OAAO,GAAG+hB,OAAO,EAAjB;AAEA9hB,EAAAA,MAAM,GAAG8hB,OAAO,EAAhB;AAEA7hB,EAAAA,OAAO,GAAG6hB,OAAO,EAAjB;AAEA5hB,EAAAA,MAAM,GAAG4hB,OAAO,EAAhB;AAEA3hB,EAAAA,OAAO,GAAG2hB,OAAO,EAAjB;AAEA1hB,EAAAA,GAAG,GAAG0hB,OAAO,EAAb;AAEAxhB,EAAAA,OAAO,GAAGwhB,OAAO,EAAjB;AAEArhB,EAAAA,OAAO,GAAGqhB,OAAO,EAAjB;AAEAphB,EAAAA,OAAO,GAAGohB,OAAO,EAAjB;AAEAnhB,EAAAA,OAAO,GAAGmhB,OAAO,EAAjB;AAEAlhB,EAAAA,QAAQ,GAAGkhB,OAAO,EAAlB;AAEAzgB,EAAAA,OAAO,GAAGygB,OAAO,EAAjB;AAEAxgB,EAAAA,KAAK,GAAGwgB,OAAO,EAAf;AAEAvgB,EAAAA,MAAM,GAAGugB,OAAO,EAAhB;AAEAtgB,EAAAA,OAAO,GAAGsgB,OAAO,EAAjB;AAEArgB,EAAAA,KAAK,GAAGqgB,OAAO,EAAf;AAEApgB,EAAAA,QAAQ,GAAGogB,OAAO,EAAlB;AAEAngB,EAAAA,aAAa,GAAGmgB,OAAO,EAAvB;AAEAlgB,EAAAA,KAAK,GAAGkgB,OAAO,EAAf;AAEAjgB,EAAAA,KAAK,GAAGigB,OAAO,EAAf;AAEAhgB,EAAAA,QAAQ,GAAGggB,OAAO,EAAlB;AAEA/f,EAAAA,QAAQ,GAAG+f,OAAO,EAAlB;AAEA9f,EAAAA,IAAI,GAAG8f,OAAO,EAAd;AAEA5f,EAAAA,QAAQ,GAAG4f,OAAO,EAAlB;AAEA3f,EAAAA,GAAG,GAAG2f,OAAO,EAAb;AAEA1f,EAAAA,IAAI,GAAG0f,OAAO,EAAd;AAEA7e,EAAAA,MAAM,GAAG6e,OAAO,EAAhB;AAEA5e,EAAAA,MAAM,GAAG4e,OAAO,EAAhB;AAEA3e,EAAAA,MAAM,GAAG2e,OAAO,EAAhB;AAEA1e,EAAAA,WAAW,GAAG0e,OAAO,EAArB;AAEAze,EAAAA,UAAU,GAAGye,OAAO,EAApB;AAEAxe,EAAAA,GAAG,GAAGwe,OAAO,EAAb;AAEAte,EAAAA,GAAG,GAAGse,OAAO,EAAb;AAEAre,EAAAA,KAAK,GAAGqe,OAAO,EAAf;AAEApe,EAAAA,QAAQ,GAAGoe,OAAO,EAAlB;AAEAne,EAAAA,EAAE,GAAGme,OAAO,EAAZ;AAEAle,EAAAA,GAAG,GAAGke,OAAO,EAAb;AAEAhe,EAAAA,IAAI,GAAGge,OAAO,EAAd;AAEA9d,EAAAA,MAAM,GAAG8d,OAAO,EAAhB;AAEA5d,EAAAA,KAAK,GAAG4d,OAAO,EAAf;AAEA3d,EAAAA,QAAQ,GAAG2d,OAAO,EAAlB;AAEA1d,EAAAA,QAAQ,GAAG0d,OAAO,EAAlB;AAEArd,EAAAA,GAAG,GAAGqd,OAAO,EAAb;AAEApd,EAAAA,IAAI,GAAGod,OAAO,EAAd;AAEAnd,EAAAA,IAAI,GAAGmd,OAAO,EAAd;AAEAld,EAAAA,GAAG,GAAGkd,OAAO,EAAb;AAEAjd,EAAAA,MAAM,GAAGid,OAAO,EAAhB;AAEAhd,EAAAA,MAAM,GAAGgd,OAAO,EAAhB;AAEA/c,EAAAA,MAAM,GAAG+c,OAAO,EAAhB;AAEAlU,EAAAA,MAAM,GAAGkU,OAAO,EAAhB;AAEAjU,EAAAA,SAAS,GAAGiU,OAAO,EAAnB;AAEAhU,EAAAA,UAAU,GAAGgU,OAAO,EAApB;AAEA/T,EAAAA,MAAM,GAAG+T,OAAO,EAAhB;AAEA9T,EAAAA,MAAM,GAAG8T,OAAO,EAAhB;AAEA7T,EAAAA,KAAK,GAAG6T,OAAO,EAAf;AAEA5T,EAAAA,GAAG,GAAG4T,OAAO,EAAb;AAEA1T,EAAAA,QAAQ,GAAG0T,OAAO,EAAlB;AAEAxT,EAAAA,KAAK,GAAGwT,OAAO,EAAf;AAEAvT,EAAAA,GAAG,GAAGuT,OAAO,EAAb;AAEAtT,EAAAA,OAAO,GAAGsT,OAAO,EAAjB;AAEArT,EAAAA,OAAO,GAAGqT,OAAO,EAAjB;AAEApT,EAAAA,IAAI,GAAGoT,OAAO,EAAd;AAEAnT,EAAAA,KAAK,GAAGmT,OAAO,EAAf;AAEAlT,EAAAA,KAAK,GAAGkT,OAAO,EAAf;AAEAjT,EAAAA,QAAQ,GAAGiT,OAAO,EAAlB;AAEAhT,EAAAA,GAAG,GAAGgT,OAAO,EAAb;AAEA/S,EAAAA,IAAI,GAAG+S,OAAO,EAAd;AAEA5S,EAAAA,SAAS,GAAG4S,OAAO,EAAnB;AAEA3S,EAAAA,OAAO,GAAG2S,OAAO,EAAjB;AAEA1S,EAAAA,QAAQ,GAAG0S,OAAO,EAAlB,CA7pCU,CA+pCV;;AACAlS,EAAAA,GAAG,GAAGkS,OAAO,EAAb;AAEAjS,EAAAA,OAAO,GAAGiS,OAAO,EAAjB;AAEAhS,EAAAA,QAAQ,GAAGgS,OAAO,EAAlB;AAEA/R,EAAAA,GAAG,GAAG+R,OAAO,EAAb;AAEA9R,EAAAA,MAAM,GAAG8R,OAAO,EAAhB;AAEAjR,EAAAA,GAAG,GAAGiR,OAAO,EAAb;AAEA/Q,EAAAA,QAAQ,GAAG+Q,OAAO,EAAlB;AAEA3Q,EAAAA,GAAG,GAAG2Q,OAAO,EAAb;AAEA1Q,EAAAA,MAAM,GAAG0Q,OAAO,EAAhB;AAEAjQ,EAAAA,MAAM,GAAGiQ,OAAO,EAAhB;AAEAhQ,EAAAA,SAAS,GAAGgQ,OAAO,EAAnB;AAEA/P,EAAAA,QAAQ,GAAG+P,OAAO,EAAlB;AAEA9P,EAAAA,EAAE,GAAG8P,OAAO,EAAZ;AAEA7P,EAAAA,KAAK,GAAG6P,OAAO,EAAf;AAEA5P,EAAAA,OAAO,GAAG4P,OAAO,EAAjB;AAEA3P,EAAAA,YAAY,GAAG2P,OAAO,EAAtB;AAEAzP,EAAAA,KAAK,GAAGyP,OAAO,EAAf;AAEAxP,EAAAA,KAAK,GAAGwP,OAAO,EAAf;AAEAvP,EAAAA,KAAK,GAAGuP,OAAO,EAAf;AAEA1O,EAAAA,mBAAmB,GAAG0O,OAAO,EAA7B;AAEAzO,EAAAA,mBAAmB,GAAGyO,OAAO,EAA7B;AAEAtP,EAAAA,KAAK,GAAGsP,OAAO,EAAf;AAEArP,EAAAA,YAAY,GAAGqP,OAAO,EAAtB;AAEApP,EAAAA,SAAS,GAAGoP,OAAO,EAAnB;AAEAnP,EAAAA,UAAU,GAAGmP,OAAO,EAApB;AAEAlP,EAAAA,SAAS,GAAGkP,OAAO,EAAnB;AAEA3O,EAAAA,UAAU,GAAG2O,OAAO,EAApB;AAEAxO,EAAAA,OAAO,GAAGwO,OAAO,EAAjB;AAEAvO,EAAAA,KAAK,GAAGuO,OAAO,EAAf;AAEAtO,EAAAA,QAAQ,GAAGsO,OAAO,EAAlB;AAEArO,EAAAA,IAAI,GAAGqO,OAAO,EAAd;AAEApO,EAAAA,WAAW,GAAGoO,OAAO,EAArB;AAEAnO,EAAAA,IAAI,GAAGmO,OAAO,EAAd;AAEAjO,EAAAA,KAAK,GAAGiO,OAAO,EAAf;AAEA9J,EAAAA,MAAM,GAAG8J,OAAO,EAAhB;AAEAlO,EAAAA,KAAK,GAAGkO,OAAO,EAAf;AAEA9N,EAAAA,IAAI,GAAG8N,OAAO,EAAd;AAEA7N,EAAAA,GAAG,GAAG6N,OAAO,EAAb;AAEA3N,EAAAA,aAAa,GAAG2N,OAAO,EAAvB;AAEA1N,EAAAA,QAAQ,GAAG0N,OAAO,EAAlB;AAEAzN,EAAAA,GAAG,GAAGyN,OAAO,EAAb;AAEAxN,EAAAA,IAAI,GAAGwN,OAAO,EAAd;AAEA5N,EAAAA,KAAK,GAAG4N,OAAO,EAAf;AAEArN,EAAAA,IAAI,GAAGqN,OAAO,EAAd;AAEApN,EAAAA,IAAI,GAAGoN,OAAO,EAAd;AAEAlN,EAAAA,KAAK,GAAGkN,OAAO,EAAf;AAEAjN,EAAAA,GAAG,GAAGiN,OAAO,EAAb;AAEA/M,EAAAA,WAAW,GAAG+M,OAAO,EAArB;AAEA7L,EAAAA,GAAG,GAAG6L,OAAO,EAAb;AAEA5L,EAAAA,IAAI,GAAG4L,OAAO,EAAd;AAEA3L,EAAAA,MAAM,GAAG2L,OAAO,EAAhB;AAEAzL,EAAAA,IAAI,GAAGyL,OAAO,EAAd;AAEAxL,EAAAA,MAAM,GAAGwL,OAAO,EAAhB;AAEAvL,EAAAA,MAAM,GAAGuL,OAAO,EAAhB;AAEAtL,EAAAA,MAAM,GAAGsL,OAAO,EAAhB;AAEArL,EAAAA,MAAM,GAAGqL,OAAO,EAAhB;AAEApL,EAAAA,MAAM,GAAGoL,OAAO,EAAhB;AAEAhL,EAAAA,SAAS,GAAGgL,OAAO,EAAnB;AAEAnK,EAAAA,IAAI,GAAGmK,OAAO,EAAd;AAEA7J,EAAAA,IAAI,GAAG6J,OAAO,EAAd,CAtxCU,CAwxCV;AACA;;AACA5Q,EAAAA,GAAG,GAAG4Q,OAAO,EAAb,CA1xCU,CA0xCO;;AAEjBzS,EAAAA,IAAI,GAAGyS,OAAO,EAAd;AAEAnS,EAAAA,UAAU,GAAGmS,OAAO,EAApB;AAEAxS,EAAAA,kBAAkB,GAAGwS,OAAO,EAA5B;AAEAvS,EAAAA,eAAe,GAAGuS,OAAO,EAAzB;AAEAtS,EAAAA,gBAAgB,GAAGsS,OAAO,EAA1B;AAEArS,EAAAA,eAAe,GAAGqS,OAAO,EAAzB;AAEApS,EAAAA,gBAAgB,GAAGoS,OAAO,EAA1B;AAEAvhB,EAAAA,UAAU,GAAGuhB,OAAO,EAApB;AAEAthB,EAAAA,IAAI,GAAGshB,OAAO,EAAd;AAEAzhB,EAAAA,qBAAqB,GAAGyhB,OAAO,EAA/B;AAEAjL,EAAAA,KAAK,GAAGiL,OAAO,EAAf;AAEA3T,EAAAA,oBAAoB,GAAG2T,OAAO,EAA9B;AAEAxR,EAAAA,yBAAyB,GAAGwR,OAAO,EAAnC;AAEA/J,EAAAA,GAAG,GAAG+J,OAAO,EAAb;AAEA/d,EAAAA,KAAK,GAAG+d,OAAO,EAAf,CAxzCU,CAwzCS;;AAEnBrR,EAAAA,KAAK,GAAGqR,OAAO,EAAf;AAEApR,EAAAA,KAAK,GAAGoR,OAAO,EAAf;AAEAnR,EAAAA,KAAK,GAAGmR,OAAO,EAAf;AAEAhO,EAAAA,OAAO,GAAGgO,OAAO,EAAjB;AAEAjK,EAAAA,OAAO,GAAGiK,OAAO,EAAjB;AAEA1P,EAAAA,EAAE,GAAG0P,OAAO,EAAZ;AAEA9M,EAAAA,QAAQ,GAAG8M,OAAO,EAAlB;AAEA5M,EAAAA,QAAQ,GAAG4M,OAAO,EAAlB;AAEA1M,EAAAA,QAAQ,GAAG0M,OAAO,EAAlB;AAEAzM,EAAAA,QAAQ,GAAGyM,OAAO,EAAlB;AAEAxM,EAAAA,QAAQ,GAAGwM,OAAO,EAAlB;AAEAtM,EAAAA,QAAQ,GAAGsM,OAAO,EAAlB;AAEArM,EAAAA,QAAQ,GAAGqM,OAAO,EAAlB;AAEApM,EAAAA,QAAQ,GAAGoM,OAAO,EAAlB;AAEAnM,EAAAA,QAAQ,GAAGmM,OAAO,EAAlB;AAEAlM,EAAAA,QAAQ,GAAGkM,OAAO,EAAlB;AAEAjM,EAAAA,QAAQ,GAAGiM,OAAO,EAAlB;AAEA/L,EAAAA,QAAQ,GAAG+L,OAAO,EAAlB;AAEA9L,EAAAA,QAAQ,GAAG8L,OAAO,EAAlB;AAEAvM,EAAAA,sBAAsB,GAAGuM,OAAO,EAAhC;AAEA7M,EAAAA,mBAAmB,GAAG6M,OAAO,EAA7B;AAEA3M,EAAAA,mBAAmB,GAAG2M,OAAO,EAA7B;AAEAhM,EAAAA,mBAAmB,GAAGgM,OAAO,EAA7B;AAEA/gB,EAAAA,EAAE,GAAG+gB,OAAO,EAAZ;AAEA9gB,EAAAA,EAAE,GAAG8gB,OAAO,EAAZ;AAEA7gB,EAAAA,EAAE,GAAG6gB,OAAO,EAAZ;AAEA5gB,EAAAA,EAAE,GAAG4gB,OAAO,EAAZ;AAEA3gB,EAAAA,EAAE,GAAG2gB,OAAO,EAAZ;AAEA1gB,EAAAA,EAAE,GAAG0gB,OAAO,EAAZ;AAEAlK,EAAAA,WAAW,GAAGkK,OAAO,EAArB,CAp3CU,CAo3Ce;;AAEzB7d,EAAAA,CAAC,GAAG8T,GAAJ,CAt3CU,CAw3CV;AACA;AACA;;AACAnB,EAAAA,GAAG,GAAG,MAAN;AAEA9V,EAAAA,GAAG,GAAG,KAAN;AAEAyP,EAAAA,gBAAgB,GAAG,MAAnB;AAEAJ,EAAAA,WAAW,GAAG,KAAd;AAEAC,EAAAA,yCAAyC,GAAG,CAA5C;AAEAC,EAAAA,2CAA2C,GAAG,EAA9C,CAr4CU,CAu4CV;;AACAH,EAAAA,MAAM,GAAG,EAAT,CAx4CU,CA04CV;AACA;AACA;;AACAo2B,EAAAA,mBAAmB,GAAG,EAAtB;AAEAC,EAAAA,0BAA0B,GAAG,EAA7B;AAEAC,EAAAA,sCAAsC,GAAG,EAAzC;AAEAjM,EAAAA,mBAAmB,GAAG,KAAtB;AAEAc,EAAAA,uDAAuD,GAAG,CAAC,aAAD,EAAgB,KAAhB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,IAAjC,EAAuC,KAAvC,EAA8C,SAA9C,EAAyD,KAAzD,EAAgE,OAAhE,EAAyE,UAAzE,EAAqF,YAArF,EAAmG,QAAnG,EAA6G,MAA7G,EAAqH,KAArH,EAA4H,KAA5H,EAAmI,MAAnI,EAA2I,MAA3I,EAAmJ,OAAnJ,EAA4J,OAA5J,EAAqK,SAArK,EAAgL,MAAhL,EAAwL,OAAxL,EAAiM,KAAjM,EAAwM,MAAxM,EAAgN,MAAhN,CAA1D,CAr5CU,CAu5CV;AACA;AACA;AACA;AACA;;AACAhB,EAAAA,0BAA0B,GAAG,IAA7B;AAEAzb,EAAAA,4CAA4C,GAAG,EAA/C;AAEAmnB,EAAAA,6BAA6B,GAAG,EAAhC,CAh6CU,CAk6CV;AACA;AACA;;AACAhoB,EAAAA,yBAAyB,GAAG,KAA5B;;AAEAkpB,EAAAA,MAAM,GAAI,YAAW;AAAA,QACbA,MADa,6BAEjB,kBAAc;AAAA;;AAAA;;AACZ,WAAKqF,GAAL,GAAY,YAAW;AACrB,YAAIvT,CAAJ,EAAOmI,GAAP,EAAYqL,OAAZ;AACAA,QAAAA,OAAO,GAAG,EAAV;;AACA,aAAKxT,CAAC,GAAG,CAAJ,EAAOmI,GAAG,GAAGhxB,MAAlB,EAA2B,KAAKgxB,GAAL,GAAWnI,CAAC,IAAImI,GAAhB,GAAsBnI,CAAC,IAAImI,GAAtD,EAA4D,KAAKA,GAAL,GAAWnI,CAAC,EAAZ,GAAiBA,CAAC,EAA9E,EAAkF;AAChFwT,UAAAA,OAAO,CAACjN,IAAR,CAAa,CAAb;AACD;;AACD,eAAOiN,OAAP;AACD,OAPU,EAAX;;AAQA,WAAKpmB,IAAL,GAAY,EAAZ;AACD,KAZgB;;AAclB;AAED8gB,IAAAA,MAAM,CAAC2E,SAAP,CAAiBY,IAAjB,GAAwB,CAAxB,CAhBmB,CAgBQ;;AAE3BvF,IAAAA,MAAM,CAAC2E,SAAP,CAAiBU,GAAjB,GAAuB,IAAvB,CAlBmB,CAkBU;;AAE7BrF,IAAAA,MAAM,CAAC2E,SAAP,CAAiBa,KAAjB,GAAyB,CAAzB,CApBmB,CAoBS;;AAE5BxF,IAAAA,MAAM,CAAC2E,SAAP,CAAiBzlB,IAAjB,GAAwB,IAAxB,CAtBmB,CAsBW;;AAE9B,WAAO8gB,MAAP;AAED,GA1BQ,CA0BN8E,IA1BM,CA0BD,IA1BC,CAAT;;AA4BAznB,EAAAA,OAAO,GAAI,YAAW;AAAA,QACdA,OADc;AAAA;;AAAA;AAAA;;AACJ;AAEhBA,IAAAA,OAAO,CAACsnB,SAAR,CAAkBc,CAAlB,GAAsB,CAAtB;AAEApoB,IAAAA,OAAO,CAACsnB,SAAR,CAAkBe,CAAlB,GAAsB,CAAtB;AAEAroB,IAAAA,OAAO,CAACsnB,SAAR,CAAkBgB,CAAlB,GAAsB,CAAtB;AAEAtoB,IAAAA,OAAO,CAACsnB,SAAR,CAAkBC,CAAlB,GAAsB,EAAtB,CAToB,CASM;;AAE1B,WAAOvnB,OAAP;AAED,GAbS,CAaPynB,IAbO,CAaF,IAbE,CAAV;;AAeAzE,EAAAA,WAAW,GAAI,YAAW;AAAA,QAClBA,WADkB;AAAA;;AAAA;AAAA;;AACJ;AAEpBA,IAAAA,WAAW,CAACsE,SAAZ,CAAsBiB,MAAtB,GAA+B,CAA/B;AAEAvF,IAAAA,WAAW,CAACsE,SAAZ,CAAsBkB,OAAtB,GAAgC,CAAhC;AAEAxF,IAAAA,WAAW,CAACsE,SAAZ,CAAsBmB,KAAtB,GAA8B,CAA9B;AAEA,WAAOzF,WAAP;AAED,GAXa,CAWXyE,IAXW,CAWN,IAXM,CAAd;;AAaAlE,EAAAA,GAAG,GAAG,CAAN,CA/9CU,CA+9CD;;AAETlf,EAAAA,SAAS,GAAG,CAAZ;AAEAV,EAAAA,kBAAkB,GAAG,CAArB;AAEAC,EAAAA,eAAe,GAAG,CAAlB;AAEA+C,EAAAA,KAAK,GAAG,CAAR;AAEAF,EAAAA,SAAS,GAAG,CAAZ;AAEAC,EAAAA,SAAS,GAAG,CAAZ;AAEA6d,EAAAA,SAAS,GAAG,CAAZ;;AAEAtN,EAAAA,QAAQ,GAAI,YAAW;AACrB,QAAIyR,IAAJ,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,MAAhB;AACAA,IAAAA,MAAM,GAAG,CAAC,CAAD,CAAT;AACAF,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAOE,MAAM,CAAC7Y,MAAP,GAAgBnkB,WAAvB,EAAoC;AAClC+8B,MAAAA,CAAC,GAAG,CAAJ;AACAF,MAAAA,IAAI,GAAGI,IAAI,CAACC,IAAL,CAAUJ,CAAV,CAAP;;AACA,aAAOC,CAAC,GAAGC,MAAM,CAAC7Y,MAAX,IAAqB6Y,MAAM,CAACD,CAAD,CAAN,IAAaF,IAAzC,EAA+C;AAC7C,YAAIC,CAAC,GAAGE,MAAM,CAACD,CAAD,CAAV,KAAkB,CAAtB,EAAyB;AACvBA,UAAAA,CAAC,GAAG,CAAC,CAAL;AACA;AACD;;AACDA,QAAAA,CAAC;AACF;;AACD,UAAIA,CAAC,KAAK,CAAC,CAAX,EAAc;AACZC,QAAAA,MAAM,CAAC7N,IAAP,CAAY2N,CAAZ;AACD;;AACDA,MAAAA,CAAC,IAAI,CAAL;AACD;;AACDE,IAAAA,MAAM,CAACh9B,WAAD,CAAN,GAAsB,CAAtB;AACA,WAAOg9B,MAAP;AACD,GArBU,EAAX;;AAuBAnlB,EAAAA,QAAQ,GAAG,CAAX;AAEAxC,EAAAA,SAAS,GAAG,CAAZ;AAEAmR,EAAAA,MAAM,GAAG,CAAT;AAEAsR,EAAAA,QAAQ,GAAG,CAAX;AAEArT,EAAAA,MAAM,GAAG,EAAT;AAEAwK,EAAAA,WAAW,GAAG,EAAd,CAhhDU,CAkhDV;;AACAyH,EAAAA,MAAM,GAAG,EAAT,CAnhDU,CAqhDV;AACA;;AACA/pB,EAAAA,OAAO,GAAG,EAAV;AAEAqS,EAAAA,mBAAmB,GAAG,EAAtB;AAEApT,EAAAA,OAAO,GAAG,EAAV,CA3hDU,CA2hDI;;AAEdypB,EAAAA,KAAK,GAAG,EAAR,CA7hDU,CA6hDE;;AAEZta,EAAAA,KAAK,GAAG,CAAR;AAEAqO,EAAAA,EAAE,GAAG,IAAL,CAjiDU,CAiiDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CAniDU,CAmiDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CAriDU,CAqiDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CAviDU,CAuiDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CAziDU,CAyiDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CA3iDU,CA2iDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CA7iDU,CA6iDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CA/iDU,CA+iDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CAjjDU,CAijDC;;AAEXC,EAAAA,EAAE,GAAG,IAAL,CAnjDU,CAmjDC;;AAEXuR,EAAAA,IAAI,GAAG,IAAP,CArjDU,CAqjDG;;AAEbvS,EAAAA,GAAG,GAAG,IAAN,CAvjDU,CAujDE;;AAEZE,EAAAA,aAAa,GAAG,IAAhB;AAEArL,EAAAA,aAAa,GAAG,IAAhB,CA3jDU,CA2jDY;;AAEtBsL,EAAAA,OAAO,GAAG,EAAV;AAEAC,EAAAA,SAAS,GAAG,CAAZ;AAEAiO,EAAAA,SAAS,GAAG,CAAZ;AAEApnB,EAAAA,OAAO,GAAG,KAAV;AAEAwF,EAAAA,gBAAgB,GAAG,IAAnB,CArkDU,CAqkDe;;AAEzBijB,EAAAA,6BAA6B,GAAG,EAAhC;AAEAC,EAAAA,+BAA+B,GAAG,EAAlC;AAEAX,EAAAA,iBAAiB,GAAG,IAApB;AAEA7iB,EAAAA,eAAe,GAAG,GAAlB;;AAEAkhB,EAAAA,MAAM,GAAG,gBAASiH,CAAT,EAAY;AACnB,WAAOzG,MAAM,CAACyG,CAAD,CAAb;AACD,GAFD;;AAIAnd,EAAAA,MAAM,GAAG,gBAASod,CAAT,EAAY;AACnB,WAAOA,CAAC,CAACnB,CAAF,KAAQnqC,IAAf;AACD,GAFD;;AAIAgxB,EAAAA,UAAU,GAAG,oBAASsa,CAAT,EAAY;AACvB,WAAOA,CAAC,CAACnB,CAAF,KAAQx6B,GAAf;AACD,GAFD;;AAIA0e,EAAAA,QAAQ,GAAG,kBAASid,CAAT,EAAY;AACrB,WAAOA,CAAC,CAACnB,CAAF,KAAQvoC,MAAf;AACD,GAFD;;AAIAirB,EAAAA,aAAa,GAAG,uBAASye,CAAT,EAAY;AAC1B,WAAOta,UAAU,CAACsa,CAAD,CAAV,IAAiBjd,QAAQ,CAACid,CAAD,CAAhC;AACD,GAFD;;AAIAla,EAAAA,KAAK,GAAG,eAASka,CAAT,EAAY;AAClB,WAAOA,CAAC,CAACnB,CAAF,KAAQz3B,GAAf;AACD,GAFD;;AAIA6e,EAAAA,QAAQ,GAAG,kBAAS+Z,CAAT,EAAY;AACrB,QAAIA,CAAC,IAAI,IAAT,EAAe;AACb;AACD,KAFD,MAEO;AACL,aAAOA,CAAC,CAACnB,CAAF,KAAQh2B,MAAf;AACD;AACF,GAND,CAvmDU,CA+mDV;AACA;;;AACA2Y,EAAAA,sBAAqB,GAAG,+BAASwe,CAAT,EAAY;AAClC,QAAI1B,CAAJ,EAAOoB,CAAP,EAAUL,CAAV,EAAa7T,CAAb,EAAgBmI,GAAhB;;AACA,QAAIpS,aAAa,CAACye,CAAD,CAAb,IAAoBA,CAAC,KAAKlH,MAAM,CAAC9wB,sBAAD,CAApC,EAA8D;AAC5D,aAAO,CAAP;AACD;;AACD,QAAI,CAACie,QAAQ,CAAC+Z,CAAD,CAAT,IAAgB,CAACze,aAAa,CAACye,CAAD,CAAlC,EAAuC;AACrC;AACA,aAAO,CAAP;AACD;;AACDX,IAAAA,CAAC,GAAGW,CAAC,CAACtG,MAAF,CAASwF,KAAb;AACAZ,IAAAA,CAAC,GAAG0B,CAAC,CAACtG,MAAF,CAAS9gB,IAAb;;AACA,SAAK8mB,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF,UAAI,CAAChK,sBAAqB,CAAC8c,CAAC,CAACoB,CAAD,CAAF,CAA1B,EAAkC;AAChC;AACA,eAAO,CAAP;AACD;AACF;;AACD,WAAO,CAAP;AACD,GAlBD;;AAoBA3Z,EAAAA,QAAQ,GAAG,kBAASia,CAAT,EAAY;AACrB,WAAOA,CAAC,CAACnB,CAAF,KAAQt3B,GAAf;AACD,GAFD;;AAIAuc,EAAAA,SAAS,GAAG,mBAASkc,CAAT,EAAY;AACtB,WAAOja,QAAQ,CAACia,CAAD,CAAR,IAAe3G,MAAM,CAAC2G,CAAD,CAAN,GAAYr8B,GAAlC;AACD,GAFD;;AAIA8M,EAAAA,GAAG,GAAG,aAASuvB,CAAT,EAAY;AAChB,QAAIpd,MAAM,CAACod,CAAD,CAAV,EAAe;AACb,aAAOA,CAAC,CAACrsB,IAAF,CAAOlD,GAAd;AACD,KAFD,MAEO;AACL,aAAOqoB,MAAM,CAACn1B,GAAD,CAAb;AACD;AACF,GAND;;AAQAwN,EAAAA,GAAG,GAAG,aAAS6uB,CAAT,EAAY;AAChB,QAAIpd,MAAM,CAACod,CAAD,CAAV,EAAe;AACb,aAAOA,CAAC,CAACrsB,IAAF,CAAOxC,GAAd;AACD,KAFD,MAEO;AACL,aAAO2nB,MAAM,CAACn1B,GAAD,CAAb;AACD;AACF,GAND;;AAQAkM,EAAAA,IAAI,GAAG,cAASmwB,CAAT,EAAY;AACjB,WAAOvvB,GAAG,CAACA,GAAG,CAACuvB,CAAD,CAAJ,CAAV;AACD,GAFD;;AAIAzvB,EAAAA,IAAI,GAAG,cAASyvB,CAAT,EAAY;AACjB,WAAOvvB,GAAG,CAACU,GAAG,CAAC6uB,CAAD,CAAJ,CAAV;AACD,GAFD;;AAIApvB,EAAAA,IAAI,GAAG,cAASovB,CAAT,EAAY;AACjB,WAAO7uB,GAAG,CAACV,GAAG,CAACuvB,CAAD,CAAJ,CAAV;AACD,GAFD;;AAIA9uB,EAAAA,IAAI,GAAG,cAAS8uB,CAAT,EAAY;AACjB,WAAO7uB,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAV;AACD,GAFD;;AAIApwB,EAAAA,KAAK,GAAG,eAASowB,CAAT,EAAY;AAClB,WAAOvvB,GAAG,CAACA,GAAG,CAACU,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIA1vB,EAAAA,KAAK,GAAG,eAAS0vB,CAAT,EAAY;AAClB,WAAOvvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAhwB,EAAAA,KAAK,GAAG,eAASgwB,CAAT,EAAY;AAClB,WAAOvvB,GAAG,CAACU,GAAG,CAACV,GAAG,CAACuvB,CAAD,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIArvB,EAAAA,KAAK,GAAG,eAASqvB,CAAT,EAAY;AAClB,WAAO7uB,GAAG,CAACV,GAAG,CAACU,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAlvB,EAAAA,KAAK,GAAG,eAASkvB,CAAT,EAAY;AAClB,WAAO7uB,GAAG,CAACA,GAAG,CAACV,GAAG,CAACuvB,CAAD,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIA/uB,EAAAA,KAAK,GAAG,eAAS+uB,CAAT,EAAY;AAClB,WAAO7uB,GAAG,CAACA,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIArwB,EAAAA,MAAM,GAAG,gBAASqwB,CAAT,EAAY;AACnB,WAAOvvB,GAAG,CAACA,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAjwB,EAAAA,MAAM,GAAG,gBAASiwB,CAAT,EAAY;AACnB,WAAOvvB,GAAG,CAACU,GAAG,CAACV,GAAG,CAACU,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIA7vB,EAAAA,MAAM,GAAG,gBAAS6vB,CAAT,EAAY;AACnB,WAAOvvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACuvB,CAAD,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAtvB,EAAAA,MAAM,GAAG,gBAASsvB,CAAT,EAAY;AACnB,WAAO7uB,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIA3vB,EAAAA,MAAM,GAAG,gBAAS2vB,CAAT,EAAY;AACnB,WAAOvvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAhvB,EAAAA,MAAM,GAAG,gBAASgvB,CAAT,EAAY;AACnB,WAAO7uB,GAAG,CAACA,GAAG,CAACA,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIA5vB,EAAAA,OAAO,GAAG,iBAAS4vB,CAAT,EAAY;AACpB,WAAOvvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAACA,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAlwB,EAAAA,OAAO,GAAG,iBAASkwB,CAAT,EAAY;AACpB,WAAOvvB,GAAG,CAACU,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAnvB,EAAAA,OAAO,GAAG,iBAASmvB,CAAT,EAAY;AACpB,WAAO7uB,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIA9vB,EAAAA,OAAO,GAAG,iBAAS8vB,CAAT,EAAY;AACpB,WAAOvvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIAjvB,EAAAA,QAAQ,GAAG,kBAASivB,CAAT,EAAY;AACrB,WAAO7uB,GAAG,CAACA,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD;;AAIA/vB,EAAAA,QAAQ,GAAG,kBAAS+vB,CAAT,EAAY;AACrB,WAAOvvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,CAAV;AACD,GAFD,CAjvDU,CAqvDV;;;AACA7Y,EAAAA,UAAU,GAAG,oBAAS6Y,CAAT,EAAY;AACvB,QAAIC,UAAJ;AACAA,IAAAA,UAAU,GAAG,CAAC,CAAd;;AACA,WAAOrd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAC,MAAAA,UAAU;AACX;;AACD,WAAOA,UAAP;AACD,GARD,CAtvDU,CAgwDV;;;AACA5U,EAAAA,OAAO,GAAG,iBAAS2U,CAAT,EAAYX,CAAZ,EAAe;AACvB,QAAIY,UAAJ;AACAA,IAAAA,UAAU,GAAG,CAAb;;AACA,WAAOA,UAAU,IAAIZ,CAArB,EAAwB;AACtBW,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAC,MAAAA,UAAU;AACX;;AACD,WAAOxvB,GAAG,CAACuvB,CAAD,CAAV;AACD,GARD;;AAUA1d,EAAAA,KAAK,GAAG,eAAS0d,CAAT,EAAY;AAClB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAAxB;AACD,GAFD;;AAIAgyB,EAAAA,UAAU,GAAG,oBAAS6b,CAAT,EAAY;AACvB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAxB;AACD,GAFD;;AAIAgiB,EAAAA,OAAO,GAAG,iBAASwa,CAAT,EAAY;AACpB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAxB;AACD,GAFD;;AAIAme,EAAAA,WAAW,GAAG,qBAAS8c,CAAT,EAAY;AACxB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACx4B,SAAD,CAAxB;AACD,GAFD;;AAIAmjB,EAAAA,YAAY,GAAG,sBAASuc,CAAT,EAAY;AACzB,WAAQvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACz3B,KAAD,CAAlB,IAA+BoP,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACziC,GAAD,CAAvD;AACD,GAFD;;AAIA6vB,EAAAA,WAAW,GAAG,qBAAS8Z,CAAT,EAAY;AACxB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACvvB,SAAD,CAAxB;AACD,GAFD;;AAIAsa,EAAAA,KAAK,GAAG,eAASmc,CAAT,EAAY;AAClB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACv3B,GAAD,CAAxB;AACD,GAFD,CAnyDU,CAuyDV;AACA;AACA;;;AACA8hB,EAAAA,gBAAgB,GAAG,0BAAS2c,CAAT,EAAY;AAC7B,WAAOA,CAAC,KAAKlH,MAAM,CAAC9wB,sBAAD,CAAnB;AACD,GAFD;;AAIAzE,EAAAA,KAAK,GAAG,eAASy8B,CAAT,EAAY;AAClB,QAAIA,CAAC,CAACE,UAAF,EAAJ,EAAoB;AAClB,aAAO,CAAP;AACD,KAFD,MAEO,IAAIF,CAAC,CAACG,MAAF,EAAJ,EAAgB;AACrB,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAC,CAAR;AACD;AACF,GARD;;AAUA98B,EAAAA,OAAO,GAAG,iBAAS28B,CAAT,EAAY;AACpB,WAAOA,CAAC,CAACI,QAAF,GAAarZ,MAApB;AACD,GAFD;;AAIAtjB,EAAAA,KAAK,GAAG,eAASu8B,CAAT,EAAY;AAClB,WAAOA,CAAC,CAACG,MAAF,EAAP;AACD,GAFD;;AAIAl9B,EAAAA,MAAM,GAAG,gBAAS+8B,CAAT,EAAYX,CAAZ,EAAe;AACtB,QAAIW,CAAC,IAAI,IAAT,EAAe;AACb;AACD;;AACD,WAAOA,CAAC,CAACK,MAAF,CAAShB,CAAT,CAAP;AACD,GALD;;AAOAtL,EAAAA,iBAAiB,GAAG,6BAAW;AAC7BrL,IAAAA,OAAO,CAAC,CAAD,CAAP;AACAjO,IAAAA,QAAQ,GAAG,CAAX;AACAxC,IAAAA,SAAS,GAAG,CAAZ;AACA0F,IAAAA,KAAK,GAAGtU,GAAR;AACAqR,IAAAA,kBAAkB,GAAG,CAArB;AACA,WAAOC,eAAe,GAAG,CAAzB;AACD,GAPD;;AASA1oB,EAAAA,CAAC,GAAG,OAAOquC,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,IAA9C,GAAqDA,OAArD,GAA+D,IAAnE;AAEAruC,EAAAA,CAAC,CAACspC,OAAF,GAAYA,OAAZ;AAEAtpC,EAAAA,CAAC,CAACqwB,KAAF,GAAUA,KAAV;AAEArwB,EAAAA,CAAC,CAACkyB,UAAF,GAAeA,UAAf;AAEAlyB,EAAAA,CAAC,CAACuzB,OAAF,GAAYA,OAAZ;AAEAvzB,EAAAA,CAAC,CAACixB,WAAF,GAAgBA,WAAhB;AAEAjxB,EAAAA,CAAC,CAACwe,GAAF,GAAQA,GAAR;AAEAxe,EAAAA,CAAC,CAACkf,GAAF,GAAQA,GAAR;AAEAlf,EAAAA,CAAC,CAAC4d,IAAF,GAASA,IAAT;AAEA5d,EAAAA,CAAC,CAACse,IAAF,GAASA,IAAT;AAEAte,EAAAA,CAAC,CAAC2e,IAAF,GAASA,IAAT;AAEA3e,EAAAA,CAAC,CAACif,IAAF,GAASA,IAAT;AAEAjf,EAAAA,CAAC,CAAC2d,KAAF,GAAUA,KAAV;AAEA3d,EAAAA,CAAC,CAACqe,KAAF,GAAUA,KAAV;AAEAre,EAAAA,CAAC,CAAC+d,KAAF,GAAUA,KAAV;AAEA/d,EAAAA,CAAC,CAAC0e,KAAF,GAAUA,KAAV;AAEA1e,EAAAA,CAAC,CAAC6e,KAAF,GAAUA,KAAV;AAEA7e,EAAAA,CAAC,CAACgf,KAAF,GAAUA,KAAV;AAEAhf,EAAAA,CAAC,CAAC0d,MAAF,GAAWA,MAAX;AAEA1d,EAAAA,CAAC,CAAC8d,MAAF,GAAWA,MAAX;AAEA9d,EAAAA,CAAC,CAACke,MAAF,GAAWA,MAAX;AAEAle,EAAAA,CAAC,CAACye,MAAF,GAAWA,MAAX;AAEAze,EAAAA,CAAC,CAACoe,MAAF,GAAWA,MAAX;AAEApe,EAAAA,CAAC,CAAC+e,MAAF,GAAWA,MAAX;AAEA/e,EAAAA,CAAC,CAACme,OAAF,GAAYA,OAAZ;AAEAne,EAAAA,CAAC,CAAC6d,OAAF,GAAYA,OAAZ;AAEA7d,EAAAA,CAAC,CAAC4e,OAAF,GAAYA,OAAZ;AAEA5e,EAAAA,CAAC,CAACie,OAAF,GAAYA,OAAZ;AAEAje,EAAAA,CAAC,CAAC8e,QAAF,GAAaA,QAAb;AAEA9e,EAAAA,CAAC,CAACge,QAAF,GAAaA,QAAb;AAEAhe,EAAAA,CAAC,CAAC6mC,MAAF,GAAWA,MAAX;AAEA7mC,EAAAA,CAAC,CAAC2wB,MAAF,GAAWA,MAAX;AAEA3wB,EAAAA,CAAC,CAACyzB,UAAF,GAAeA,UAAf;AAEAzzB,EAAAA,CAAC,CAAC8wB,QAAF,GAAaA,QAAb;AAEA9wB,EAAAA,CAAC,CAACsvB,aAAF,GAAkBA,aAAlB;AAEAtvB,EAAAA,CAAC,CAAC6zB,KAAF,GAAUA,KAAV;AAEA7zB,EAAAA,CAAC,CAACg0B,QAAF,GAAaA,QAAb;AAEAh0B,EAAAA,CAAC,CAAC8zB,QAAF,GAAaA,QAAb;AAEA9zB,EAAAA,CAAC,CAAC6xB,SAAF,GAAcA,SAAd;AAEA7xB,EAAAA,CAAC,CAACyC,IAAF,GAASA,IAAT;AAEAzC,EAAAA,CAAC,CAACoS,GAAF,GAAQA,GAAR;AAEApS,EAAAA,CAAC,CAACqE,MAAF,GAAWA,MAAX;AAEArE,EAAAA,CAAC,CAACmV,GAAF,GAAQA,GAAR;AAEAnV,EAAAA,CAAC,CAAC4W,MAAF,GAAWA,MAAX;AAEA5W,EAAAA,CAAC,CAACsV,GAAF,GAAQA,GAAR,CAx6DU,CA26DV;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaEvS,EAAAA,SAAS,GAAG,KAAZ;;AAEA2C,EAAAA,QAAQ,GAAG,oBAAW;AACpBo6B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO+T,GAAG,EAAV;AACD,GAJD;;AAMAC,EAAAA,WAAW,GAAG,uBAAW;AACvBhU,IAAAA,IAAI;;AACJiU,IAAAA,OAAM;;AACNjU,IAAAA,IAAI;AACJ,WAAOwmC,OAAO,EAAd;AACD,GALD,CAh+DU,CAu+DV;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAzyB,EAAAA,GAAG,GAAG,eAAW;AACf,QAAI+0B,WAAJ;AACAA,IAAAA,WAAW,GAAGnG,GAAG,EAAjB;;AACA,QAAIplC,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACC,KAAR,CAAc,kBAAkBF,WAAhC;AACD;;AACDjV,IAAAA,UAAS;;AACT,QAAIt2B,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAApC;AACD;;AACD5uB,IAAAA,OAAM;;AACN,QAAI1W,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxC;AACD;;AACDvI,IAAAA,IAAI,CAACwO,WAAD,CAAJ;;AACAnqB,IAAAA,YAAW;;AACX,QAAIphB,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAvC;AACD;;AACD5uB,IAAAA,OAAM;;AACN,QAAI1W,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA1C;AACD;;AACDpjB,IAAAA,MAAM;;AACN,QAAIliB,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,qBAAqBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAtC;AACD;;AACD,QAAItlC,SAAJ,EAAe;AACb,aAAOwrC,OAAO,CAACE,GAAR,CAAY,cAAZ,CAAP;AACD;AACF,GA9BD;;AAgCAh1B,EAAAA,OAAM,GAAG,kBAAW;AAClB,QAAIi1B,aAAJ,EAAmBC,KAAnB;AACAnM,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAsT,IAAAA,KAAK,GAAG3U,EAAR;;AACA,QAAIj3B,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,YAAYzU,EAAxB;AACD,KAPiB,CAQlB;;;AACA,QAAInK,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,YAA5B;AACD;;AACD8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,UAAIhpC,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD;;AACD,QAAI3P,gBAAgB,CAAC4H,EAAD,CAApB,EAA0B;AACxB,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,kBAA5B;AACD;;AACD8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACNgK,MAAAA,OAAO;AACP;AACD;;AACD,QAAIzO,gBAAgB,CAAC0G,EAAD,CAApB,EAA0B;AACxB,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,kBAA5B;AACD;;AACD8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD;;AACD,QAAI/H,EAAE,KAAK6M,MAAM,CAACj0B,EAAD,CAAjB,EAAuB;AACrB,UAAI7P,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,QAA5B;AACD;;AACD8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD,KAlDiB,CAmDlB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAlB,KAA4B8qB,sBAAqB,CAACgP,EAAD,CAArB,IAA6B/O,4BAA2B,CAAC+O,EAAD,CAAxD,IAAgEnrB,KAAI,CAACmrB,EAAD,EAAK3L,aAAL,CAAhG,CAAJ,EAA0H;AACxH,UAAItrB,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,WAA5B;AACD;;AACD,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ;AACD,OANuH,CAOxH;;;AACA3O,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAuH,MAAAA,KAAI,GAToH,CAShH;;;AACRvH,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqH,MAAAA,IAAI;AACJhB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,MAAAA,KAAK;AACLqE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA5L,MAAAA,IAAI;AACJiS,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,MAAAA,KAAK;AACL9hB,MAAAA,GAAG;AACH2mB,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,MAAAA,KAAK;AACL8J,MAAAA,aAAa;;AACb,UAAIxiC,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BsV,MAAM,CAAC9J,IAAI,CAAC0b,EAAD,CAAL,EAAW,CAAC,CAAZ,CAAvC,EAAuD;AACrD,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,qBAA5B;AACD,OAHoD,CAIrD;;;AACA,UAAIvR,kBAAJ,EAAwB;AACtB,YAAI1lB,SAAJ,EAAe;AACbwrC,UAAAA,OAAO,CAACE,GAAR,CAAY,iCAAZ;AACD;;AACDxO,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD,OALD,MAKO;AACL,YAAIl9B,SAAJ,EAAe;AACbwrC,UAAAA,OAAO,CAACE,GAAR,CAAY,gCAAZ;AACD;;AACDpO,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACD;;AACD,UAAIt9B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD,KAhHiB,CAiHlB;;;AACA,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BwgB,gBAAgB,CAACjV,KAAK,CAAC2b,EAAD,CAAN,CAAjD,EAA8D;AAC5D,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,iDAA5B;AACD;;AACD8F,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAzgB,MAAAA,GAAG;AACHumB,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAyB,MAAAA,KAAK;;AACL,UAAI14B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD,KA/HiB,CAgIlB;;;AACA,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BwL,IAAI,CAAC0b,EAAD,CAAJ,KAAa6M,MAAM,CAACpiC,CAAD,CAApD,EAAyD;AACvD,UAAI1B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,oBAA5B;AACD,OAHsD,CAIvD;;;AACA8F,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAqH,MAAAA,IAAI;AACJhY,MAAAA,WAAW;;AACX,UAAItmB,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC,UAAIxO,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,eAA5B;AACD,OAH+B,CAIhC;;;AACA0U,MAAAA,aAAa,GAAG,KAAhB;AACA1U,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACAvgB,QAAAA,OAAM;;AACN,YAAIi1B,aAAJ,EAAmB;AACjBrX,UAAAA,QAAQ;AACT;;AACDqX,QAAAA,aAAa,GAAG,IAAhB;AACA1U,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,UAAIj3B,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC5mC,GAAD,CAAtB,EAA6B;AAC3B,UAAI8C,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,kBAA5B;AACD,OAH0B,CAI3B;;;AACAuG,MAAAA,WAAW,CAACtgC,GAAD,CAAX;AACA6/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,UAAIlyB,SAAJ,EAAe;AACbwrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACDtG,MAAAA,OAAO;AACP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAII,QAAI/N,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChBtgB,MAAAA,aAAa;AACbqoB,MAAAA,OAAO;AACP;AACD;;AACD,QAAI1P,cAAc,CAAC2H,EAAD,CAAd,IAAuBxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAlB,IAA2BmyB,cAAc,CAAC/T,IAAI,CAAC0b,EAAD,CAAL,CAApE,EAAiF;AAC/E8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACNiC,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACD,QAAIt4B,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,WAAWzU,EAAX,GAAgB,0BAA5B;AACD;;AACDuG,IAAAA,WAAW,CAACtgC,GAAD,CAAX;AACA6/B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,QAAIlyB,SAAJ,EAAe;AACbwrC,MAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBE,KAAjB,GAAyB,KAAzB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlD;AACD;;AACD,WAAOtG,OAAO,EAAd;AACD,GArOD,CA9gEU,CAqvEV;;;AACAroB,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIsgB,EAAE,CAACyN,MAAH,CAAUuF,IAAV,KAAmB,CAAvB,EAA0B;AACxB3G,MAAAA,IAAI,CAAC,kCAAD,CAAJ;AACD;;AACDvG,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAvY,IAAAA,SAAS;;AACTiN,IAAAA,MAAK;;AACL4R,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,IAAAA,KAAK;AACLoJ,IAAAA,QAAQ;AACR,WAAOr/B,IAAI,EAAX;AACD,GAZD;;AAcA6lB,EAAAA,IAAI,GAAG,CAAP;;AAEA1lB,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIunC,CAAJ;AACAA,IAAAA,CAAC,GAAG7E,GAAJ;AACArO,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJy0B,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAoF,MAAAA,UAAU,CAACxG,EAAD,CAAV;AACAD,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAO/f,SAAS,CAACouB,GAAG,GAAG6E,CAAP,CAAhB;AACD,GAZD,CAtwEU,CAoxEV;;;AACAjH,EAAAA,cAAc,GAAG,CAAjB;;AAEAhsB,EAAAA,SAAS,GAAG,mBAASmzB,CAAT,EAAY;AACtB,QAAIF,CAAJ,EAAOO,CAAP,EAAUtf,EAAV,EAAcmG,EAAd,EAAkBiF,CAAlB,EAAqBmI,GAArB,EAA0BC,IAA1B,EAAgCoL,OAAhC,EAAyC6B,CAAzC,EAA4CC,aAA5C;AACA5I,IAAAA,cAAc;AACdwH,IAAAA,CAAC,GAAG,CAAJ;AACAP,IAAAA,CAAC,GAAG7E,GAAG,GAAG+E,CAAV;AACAwB,IAAAA,CAAC,GAAG1B,CAAJ,CALsB,CAMtB;;AACA,QAAIpqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gCAAgCxI,cAA5C;AACD,KATqB,CAUtB;AACA;;;AACA,QAAInjC,KAAJ,EAAW;AACT,WAAK2qC,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG2G,GAAtB,EAA4B,KAAK3G,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAArD,EAA2D+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAlF,EAAqF;AACnFgV,QAAAA,OAAO,CAACE,GAAR,CAAY3P,WAAU,CAACkH,KAAK,CAACyH,CAAD,CAAN,CAAtB;AACD;AACF;;AACD,SAAKA,CAAC,GAAGtf,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,EAAtB,EAA0Bsf,CAAC,GAAG,EAAEtf,EAAhC,EAAoC;AAClC,UAAIif,CAAC,GAAG,CAAR,EAAW;AACT;AACD;;AACD/hB,MAAAA,IAAI,GAAG,CAAP,CAJkC,CAKlC;;AACAwjB,MAAAA,aAAa,GAAG7I,KAAK,CAAC8I,KAAN,CAAY5B,CAAZ,EAAeA,CAAC,GAAGE,CAAnB,CAAhB;AACAyB,MAAAA,aAAa,CAACE,IAAd,CAAmBxuB,SAAnB;AACAylB,MAAAA,KAAK,GAAGA,KAAK,CAAC8I,KAAN,CAAY,CAAZ,EAAe5B,CAAf,EAAkB8B,MAAlB,CAAyBH,aAAzB,EAAwCG,MAAxC,CAA+ChJ,KAAK,CAAC8I,KAAN,CAAY5B,CAAC,GAAGE,CAAhB,CAA/C,CAAR;;AACA,UAAI/hB,IAAI,KAAK,CAAb,EAAgB;AACd;AACD;;AACD+hB,MAAAA,CAAC,GAAGpsB,aAAa,CAACksB,CAAD,EAAIE,CAAJ,CAAjB;AACD;;AACD3W,IAAAA,OAAO,CAACyW,CAAC,GAAGE,CAAL,CAAP;;AACA,YAAQA,CAAR;AACE,WAAK,CAAL;AACE,YAAI3kB,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD,SAFD,MAEO;AACLH,UAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD;;AACF,WAAK,CAAL;AACE;;AACF;AACE9W,QAAAA,IAAI,CAACmY,CAAD,CAAJ;AACApT,QAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAkF,QAAAA,WAAW,CAACrgC,GAAD,CAAX;AACA4/B,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAtY,QAAAA,IAAI;AAfR;;AAiBA,QAAI5e,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,+BAA+BxI,cAA3C;AACD,KAnDqB,CAoDtB;AACA;;;AACA,QAAInjC,KAAJ,EAAW;AACTiqC,MAAAA,OAAO,GAAG,EAAV;;AACA,WAAKU,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAYqN,IAAI,GAAG0G,GAAxB,EAA8B,KAAK1G,IAAL,GAAYrN,EAAE,GAAGqN,IAAjB,GAAwBrN,EAAE,GAAGqN,IAA3D,EAAkE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAErN,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7FyY,QAAAA,OAAO,CAACjN,IAAR,CAAayO,OAAO,CAACE,GAAR,CAAY3P,WAAU,CAACkH,KAAK,CAACyH,CAAD,CAAN,CAAtB,CAAb;AACD;;AACD,aAAOV,OAAP;AACD;AACF,GA7DD,CAvxEU,CAs1EV;;;AACAvsB,EAAAA,eAAe,GAAG,CAAlB;;AAEAD,EAAAA,SAAS,GAAG,mBAASyZ,EAAT,EAAaC,EAAb,EAAiB;AAC3B,QAAIwT,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV,EAAeuN,CAAf;AACAzuB,IAAAA,eAAe,GAFY,CAG3B;AACA;;AACAitB,IAAAA,CAAC,GAAG,CAAJ,CAL2B,CAM3B;;AACA,QAAIne,aAAa,CAAC0K,EAAD,CAAb,IAAqB1K,aAAa,CAAC2K,EAAD,CAAtC,EAA4C;AAC1C5O,MAAAA,IAAI,GAAG,CAAP,CAD0C,CAE1C;;AACA,aAAO,CAAP;AACD,KAX0B,CAY3B;;;AACA,QAAI2I,QAAQ,CAACgG,EAAD,CAAR,IAAgBhG,QAAQ,CAACiG,EAAD,CAA5B,EAAkC;AAChC,UAAID,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB/S,EAAE,CAACwN,MAAH,CAAUuF,IAA/B,EAAqC;AACnC;AACA,eAAO,CAAC,CAAR;AACD;;AACD,UAAIhT,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB/S,EAAE,CAACwN,MAAH,CAAUuF,IAA/B,EAAqC;AACnC;AACA,eAAO,CAAP;AACD;;AACD,WAAKS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG1H,EAAE,CAACyN,MAAH,CAAUuF,IAAhC,EAAuC,KAAKtL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAhE,EAAsE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA7F,EAAgG;AAC9F,YAAIS,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAvB,EAAyC;AACvC;AACA,iBAAO,CAAC,CAAR;AACD;;AACD,YAAIzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAvB,EAAyC;AACvC;AACA,iBAAO,CAAP;AACD;AACF;;AACDpiB,MAAAA,IAAI,GAAG,CAAP,CAnBgC,CAoBhC;;AACA,aAAO,CAAP;AACD;;AACD,QAAI7M,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,UAAI1K,aAAa,CAAC9Q,GAAG,CAACwb,EAAD,CAAJ,CAAjB,EAA4B;AAC1BA,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,YAAI9a,GAAG,CAAC8a,EAAD,CAAH,KAAY6M,MAAM,CAACn1B,GAAD,CAAtB,EAA6B;AAC3BsoB,UAAAA,EAAE,GAAGxb,GAAG,CAACwb,EAAD,CAAR;AACD;AACF;AACF;;AACD,QAAIxb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC0oB,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;;AACA,UAAI3K,aAAa,CAAC9Q,GAAG,CAACyb,EAAD,CAAJ,CAAjB,EAA4B;AAC1BA,QAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;;AACA,YAAI/a,GAAG,CAAC+a,EAAD,CAAH,KAAY4M,MAAM,CAACn1B,GAAD,CAAtB,EAA6B;AAC3BuoB,UAAAA,EAAE,GAAGzb,GAAG,CAACyb,EAAD,CAAR;AACD;AACF;AACF;;AACDgV,IAAAA,CAAC,GAAG3uB,SAAQ,CAAC0Z,EAAD,EAAKC,EAAL,CAAZ;;AACA,QAAIgV,CAAC,KAAK,CAAV,EAAa;AACX5jB,MAAAA,IAAI,GAAG,CAAP;AACD,KAzD0B,CA0D3B;;;AACA,WAAO4jB,CAAP;AACD,GA5DD;;AA8DAjuB,EAAAA,aAAa,GAAG,uBAAS4tB,CAAT,EAAYxB,CAAZ,EAAe;AAC7B,QAAIK,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcpZ,EAAd,EAAkB4a,EAAlB,EAAsBC,EAAtB,EAA0B5V,CAA1B,EAA6BmI,GAA7B,EAAkCC,IAAlC,EAAwCyN,IAAxC,EAA8CC,IAA9C,EAAoDC,IAApD,EAA0DC,IAA1D,EAAgEC,IAAhE,EAAsEC,IAAtE,EAA4EC,IAA5E,EAAkFC,IAAlF,EAAwFV,CAAxF,CAD6B,CAE7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAxB,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAOA,CAAC,GAAIL,CAAC,GAAG,CAAhB,EAAoB;AAClB5tB,MAAAA,cAAc;AACd0a,MAAAA,EAAE,GAAG8L,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAV;AACAtT,MAAAA,EAAE,GAAG6L,KAAK,CAAC4I,CAAC,GAAGnB,CAAJ,GAAQ,CAAT,CAAV;;AACA,UAAIzZ,QAAQ,CAACkG,EAAD,CAAR,IAAgBlG,QAAQ,CAACmG,EAAD,CAA5B,EAAkC;AAChC2F,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAuN,QAAAA,kBAAkB;AAClB1N,QAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,YAAIrB,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtBs0B,UAAAA,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAL,GAAezT,EAAf;;AACA,eAAK0T,CAAC,GAAGnU,CAAC,GAAGmI,GAAG,GAAG+L,CAAC,GAAG,CAAlB,EAAqB9L,IAAI,GAAGyL,CAAC,GAAG,CAArC,EAAyC1L,GAAG,IAAIC,IAAP,GAAcpI,CAAC,GAAGoI,IAAlB,GAAyBpI,CAAC,GAAGoI,IAAtE,EAA6E+L,CAAC,GAAGhM,GAAG,IAAIC,IAAP,GAAc,EAAEpI,CAAhB,GAAoB,EAAEA,CAAvG,EAA0G;AACxGyM,YAAAA,KAAK,CAAC4I,CAAC,GAAGlB,CAAL,CAAL,GAAe1H,KAAK,CAAC4I,CAAC,GAAGlB,CAAJ,GAAQ,CAAT,CAApB;AACD;;AACDN,UAAAA,CAAC;AACDK,UAAAA,CAAC;AACF;;AACDA,QAAAA,CAAC;AACD;AACD;;AACD,UAAIzZ,QAAQ,CAACkG,EAAD,CAAR,IAAgBlG,QAAQ,CAACmG,EAAD,CAA5B,EAAkC;AAChCsT,QAAAA,CAAC;AACD;AACD;;AACD,UAAIne,aAAa,CAAC4K,EAAD,CAAb,IAAqB5K,aAAa,CAAC6K,EAAD,CAAtC,EAA4C;AAC1C2F,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAngB,QAAAA,WAAW;AACXggB,QAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,YAAIxL,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B,eAAK0T,CAAC,GAAGvf,EAAE,GAAGihB,IAAI,GAAG3B,CAAhB,EAAmB4B,IAAI,GAAGjC,CAAC,GAAG,CAAnC,EAAuCgC,IAAI,IAAIC,IAAR,GAAelhB,EAAE,GAAGkhB,IAApB,GAA2BlhB,EAAE,GAAGkhB,IAAvE,EAA8E3B,CAAC,GAAG0B,IAAI,IAAIC,IAAR,GAAe,EAAElhB,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5G6X,YAAAA,KAAK,CAAC4I,CAAC,GAAGlB,CAAL,CAAL,GAAe1H,KAAK,CAAC4I,CAAC,GAAGlB,CAAJ,GAAQ,CAAT,CAApB;AACD;;AACDN,UAAAA,CAAC,IAAI,CAAL;AACD,SALD,MAKO;AACLpH,UAAAA,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAL,GAAezT,EAAf;;AACA,eAAK0T,CAAC,GAAGpZ,EAAE,GAAGgb,IAAI,GAAG7B,CAAC,GAAG,CAApB,EAAuB8B,IAAI,GAAGnC,CAAC,GAAG,CAAvC,EAA2CkC,IAAI,IAAIC,IAAR,GAAejb,EAAE,GAAGib,IAApB,GAA2Bjb,EAAE,GAAGib,IAA3E,EAAkF7B,CAAC,GAAG4B,IAAI,IAAIC,IAAR,GAAe,EAAEjb,EAAjB,GAAsB,EAAEA,EAA9G,EAAkH;AAChH0R,YAAAA,KAAK,CAAC4I,CAAC,GAAGlB,CAAL,CAAL,GAAe1H,KAAK,CAAC4I,CAAC,GAAGlB,CAAJ,GAAQ,CAAT,CAApB;AACD;;AACDN,UAAAA,CAAC;AACF;;AACDK,QAAAA,CAAC;AACDA,QAAAA,CAAC;AACD;AACD;;AACD,UAAIne,aAAa,CAAC4K,EAAD,CAAb,IAAqB5K,aAAa,CAAC6K,EAAD,CAAtC,EAA4C;AAC1CsT,QAAAA,CAAC;AACD;AACD;;AACD,UAAIhlB,kBAAJ,EAAwB;AACtBuR,QAAAA,EAAE,GAAGN,aAAL;AACAO,QAAAA,EAAE,GAAGP,aAAL;AACD,OAHD,MAGO;AACLM,QAAAA,EAAE,GAAGR,GAAL;AACAS,QAAAA,EAAE,GAAGT,GAAL;AACD;;AACDyV,MAAAA,CAAC,GAAG,CAAJ;;AACA,UAAIzwB,GAAG,CAAC0b,EAAD,CAAH,KAAY2M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC2oB,QAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACA+U,QAAAA,CAAC,GAAG,CAAJ;;AACA,YAAI3f,aAAa,CAAC9Q,GAAG,CAAC0b,EAAD,CAAJ,CAAjB,EAA4B;AAC1BF,UAAAA,EAAE,GAAGxb,GAAG,CAAC0b,EAAD,CAAR;AACAA,UAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;;AACA,cAAIhb,GAAG,CAACgb,EAAD,CAAH,KAAY2M,MAAM,CAACn1B,GAAD,CAAtB,EAA6B;AAC3BwoB,YAAAA,EAAE,GAAG1b,GAAG,CAAC0b,EAAD,CAAR;AACA+U,YAAAA,CAAC,GAAG,CAAJ;AACD;AACF;AACF;;AACD,UAAIzwB,GAAG,CAAC2b,EAAD,CAAH,KAAY0M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC4oB,QAAAA,EAAE,GAAGjb,GAAG,CAACib,EAAD,CAAR;;AACA,YAAI7K,aAAa,CAAC9Q,GAAG,CAAC2b,EAAD,CAAJ,CAAjB,EAA4B;AAC1BF,UAAAA,EAAE,GAAGzb,GAAG,CAAC2b,EAAD,CAAR;AACAA,UAAAA,EAAE,GAAGjb,GAAG,CAACib,EAAD,CAAR;;AACA,cAAIjb,GAAG,CAACib,EAAD,CAAH,KAAY0M,MAAM,CAACn1B,GAAD,CAAtB,EAA6B;AAC3ByoB,YAAAA,EAAE,GAAG3b,GAAG,CAAC2b,EAAD,CAAR;AACD;AACF;AACF;;AACD,UAAI,CAAChS,KAAK,CAAC+R,EAAD,EAAKC,EAAL,CAAV,EAAoB;AAClBsT,QAAAA,CAAC;AACD;AACD;;AACD3N,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAjgB,MAAAA,WAAW;AACXggB,MAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,UAAIxL,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B,aAAK0T,CAAC,GAAGwB,EAAE,GAAGM,IAAI,GAAG/B,CAAhB,EAAmBgC,IAAI,GAAGrC,CAAC,GAAG,CAAnC,EAAuCoC,IAAI,IAAIC,IAAR,GAAeP,EAAE,GAAGO,IAApB,GAA2BP,EAAE,GAAGO,IAAvE,EAA8E/B,CAAC,GAAG8B,IAAI,IAAIC,IAAR,GAAe,EAAEP,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5GlJ,UAAAA,KAAK,CAAC4I,CAAC,GAAGlB,CAAL,CAAL,GAAe1H,KAAK,CAAC4I,CAAC,GAAGlB,CAAJ,GAAQ,CAAT,CAApB;AACD;;AACDN,QAAAA,CAAC,IAAI,CAAL;AACAK,QAAAA,CAAC;AACDA,QAAAA,CAAC;AACD;AACD;;AACD3N,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,UAAIiV,CAAJ,EAAO;AACLnP,QAAAA,IAAI,CAAC+G,MAAM,CAACt1B,QAAD,CAAP,CAAJ;AACAuuB,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAxY,QAAAA,IAAI;AACL,OAJD,MAIO;AACLoe,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACD;;AACD7C,MAAAA,QAAQ;AACR2O,MAAAA,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAL,GAAepS,GAAG,EAAlB;;AACA,WAAKqS,CAAC,GAAGyB,EAAE,GAAGO,IAAI,GAAGjC,CAAC,GAAG,CAApB,EAAuBkC,IAAI,GAAGvC,CAAC,GAAG,CAAvC,EAA2CsC,IAAI,IAAIC,IAAR,GAAeR,EAAE,GAAGQ,IAApB,GAA2BR,EAAE,GAAGQ,IAA3E,EAAkFjC,CAAC,GAAGgC,IAAI,IAAIC,IAAR,GAAe,EAAER,EAAjB,GAAsB,EAAEA,EAA9G,EAAkH;AAChHnJ,QAAAA,KAAK,CAAC4I,CAAC,GAAGlB,CAAL,CAAL,GAAe1H,KAAK,CAAC4I,CAAC,GAAGlB,CAAJ,GAAQ,CAAT,CAApB;AACD;;AACDN,MAAAA,CAAC;AACDK,MAAAA,CAAC,GA9GiB,CA+GlB;;AACAA,MAAAA,CAAC;AACF;;AACD,WAAOL,CAAP;AACD,GA/HD;;AAiIA3M,EAAAA,UAAU,GAAG,oBAASsN,CAAT,EAAY;AACvB,QAAIhB,OAAJ;;AACA,QAAIvuB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAArB,EAA4B;AAC1B6tC,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,MAAAA,OAAO,GAAG,EAAV;;AACA,aAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBjO,QAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACAhB,QAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,aAAOhB,OAAP;AACD,KARD,MAQO,IAAI,CAACnd,UAAU,CAACme,CAAD,CAAf,EAAoB;AACzB,aAAOjO,IAAI,CAACiO,CAAD,CAAX;AACD;AACF,GAbD,CAxhFU,CAuiFV;;;AACAp0B,EAAAA,GAAG,GAAG,eAAW;AACf,QAAIuzB,CAAJ;AACA1K,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA6R,IAAAA,CAAC,GAAG7E,GAAJ;AACA5H,IAAAA,UAAU,CAACzG,EAAD,CAAV;AACAyG,IAAAA,UAAU,CAACxG,EAAD,CAAV;AACAhgB,IAAAA,SAAS,CAACouB,GAAG,GAAG6E,CAAP,CAAT;AACA,WAAOnL,OAAO,EAAd;AACD,GAVD;;AAYAjoB,EAAAA,OAAO,GAAG,iBAAS8yB,CAAT,EAAY;AACpB,QAAIM,CAAJ,EAAOO,CAAP,EAAUlU,CAAV,EAAamI,GAAb,EAAkBkN,CAAlB;AACAnB,IAAAA,CAAC,GAAG,CAAJ;AACAjL,IAAAA,IAAI;AACJoM,IAAAA,CAAC,GAAGvG,GAAG,GAAGuE,CAAV;AACAM,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,SAAKoF,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGkL,CAAtB,EAA0B,KAAKlL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFkH,MAAAA,UAAU,CAACuF,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAN,CAAV;AACD;;AACDxzB,IAAAA,SAAS,CAACouB,GAAG,GAAG6E,CAAP,CAAT;AACAlT,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA5E,IAAAA,OAAO,CAAC4R,GAAG,GAAGuE,CAAP,CAAP;AACA9M,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAdD;;AAgBA2E,EAAAA,QAAQ,GAAG,oBAAW;AACpB3O,IAAAA,MAAM;AACN,WAAOpe,GAAG,EAAV;AACD,GAHD;;AAKA/T,EAAAA,QAAQ,GAAG,oBAAW;AACpBk6B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO2U,GAAG,EAAV;AACD,GAJD;;AAMAA,EAAAA,GAAG,GAAG,eAAW;AACf,QAAIy1B,SAAJ,EAAenC,CAAf,EAAkBtf,EAAlB,EAAsBuf,CAAtB,EAAyBN,CAAzB,EAA4B7T,CAA5B,EAA+BmI,GAA/B,EAAoCC,IAApC;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrH,QAAQ,CAACgG,EAAD,CAAR,IAAgBA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,KAAmB,CAAnC,IAAwChT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,MAAqB9S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAjE,EAAmF;AACjF8C,MAAAA,SAAS,GAAG,CAAZ;AACD,KAFD,MAEO;AACLvJ,MAAAA,IAAI,CAAC,6BAAD,CAAJ;AACD;;AACD+G,IAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAJ;AACA7S,IAAAA,EAAE,GAAG7f,YAAY,CAACgzB,CAAC,GAAGA,CAAL,CAAjB;AACAnT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACA/S,IAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;AACAnT,IAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FxN,QAAAA,QAAQ,CAACqZ,EAAD,EAAKoT,CAAL,EAAQK,CAAR,EAAWC,CAAX,CAAR;AACAzT,QAAAA,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAeymB,CAAC,GAAGM,CAAJ,GAAQD,CAAvB,IAA4BpS,GAAG,EAA/B,CAF2F,CAExD;AACpC;AACF;;AACDyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAzBD;;AA2BAj8B,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAIwoC,WAAJ;AACAA,IAAAA,WAAW,GAAGhwB,IAAI,CAAC0b,EAAD,CAAlB;AACA8F,IAAAA,IAAI,CAACwO,WAAD,CAAJ;AACA,WAAOxyB,qBAAoB,EAA3B;AACD,GALD;;AAOAA,EAAAA,qBAAoB,GAAG,gCAAW;AAChC,QAAI2xB,CAAJ,EAAOtf,EAAP,EAAWoL,CAAX,EAAcmI,GAAd,EAAmBC,IAAnB;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAjL,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrH,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChBG,MAAAA,EAAE,GAAG/f,YAAY,CAAC4f,EAAE,CAACyN,MAAH,CAAUwF,KAAX,CAAjB;AACA9S,MAAAA,EAAE,CAACsN,MAAH,CAAUuF,IAAV,GAAiBhT,EAAE,CAACyN,MAAH,CAAUuF,IAA3B;;AACA,WAAKS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG1H,EAAE,CAACyN,MAAH,CAAUuF,IAAhC,EAAuC,KAAKtL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAhE,EAAsE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA7F,EAAgG;AAC9FY,QAAAA,EAAE,CAACsN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACD,WAAKA,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG3H,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKtL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAvE,EAA8E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG2R,QAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;;AACA3xB,QAAAA,qBAAoB;;AACpBqe,QAAAA,EAAE,CAACsN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACA3b,QAAAA,uBAAuB,CAACya,EAAD,CAAvB;AACD;;AACD2F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACD,KAbD,MAaO,IAAIH,EAAE,CAAC4S,CAAH,KAASvoC,MAAb,EAAqB;AAC1By7B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAtf,MAAAA,kBAAkB;AACnB,KAHM,MAGA,IAAIiW,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACrB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACAle,MAAAA,qBAAoB;;AACpBgkB,MAAAA,IAAI,CAAC5gB,GAAG,CAAC8a,EAAD,CAAJ,CAAJ;;AACAle,MAAAA,qBAAoB;;AACpB4F,MAAAA,IAAI;AACL,KANM,MAMA;AACLoe,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD,WAAO+H,OAAO,EAAd;AACD,GA/BD;;AAiCArnB,EAAAA,kBAAkB,GAAG,8BAAW;AAC9B,QAAIm1B,yBAAJ,EAA+BC,SAA/B,EAA0CC,sBAA1C,EAAkEC,kBAAlE,EAAsFC,QAAtF,EAAgGC,QAAhG;AACAlE,IAAAA,OAAO;AACPgE,IAAAA,kBAAkB,GAAG3U,GAAG,EAAxB;;AACA,QAAI2U,kBAAkB,CAACpD,CAAnB,KAAyBvoC,MAA7B,EAAqC;AACnC4rC,MAAAA,QAAQ,GAAGD,kBAAkB,CAACrD,CAA9B;AACAoD,MAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,UAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,QAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,QAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACAK,QAAAA,QAAQ,GAAG5kB,mBAAmB,CAAC2kB,QAAD,EAAWH,SAAX,CAA9B;AACAxP,QAAAA,aAAa,CAAC4P,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAtB,CAAb;AACD,OALD,MAKO;AACL7P,QAAAA,YAAY,CAAC4P,QAAD,CAAZ;AACD;;AACD;AACD,KAhB6B,CAiB9B;;;AACA1P,IAAAA,WAAW,CAAClgC,WAAD,CAAX;AACAy/B,IAAAA,IAAI,CAACwO,WAAD,CAAJ;AACA,WAAOrZ,IAAI,CAAC,CAAD,CAAX;AACD,GArBD,CAlpFU,CAyqFV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3J,EAAAA,mBAAmB,GAAG,6BAAS+kB,OAAT,EAAkBC,cAAlB,EAAkC;AACtD,QAAIC,WAAJ,EAAiBC,mBAAjB,EAAsCC,iBAAtC,EAAyDC,mBAAzD,EAA8EC,YAA9E,EAA4FC,CAA5F,EAA+FC,GAA/F;AACAJ,IAAAA,iBAAiB,GAAG,KAAK,CAAzB;AACAD,IAAAA,mBAAmB,GAAG,KAAK,CAA3B;AACAD,IAAAA,WAAW,GAAG,KAAK,CAAnB;AACAK,IAAAA,CAAC,GAAG,KAAK,CAAT;AACAF,IAAAA,mBAAmB,GAAG,KAAK,CAA3B;AACAC,IAAAA,YAAY,GAAG,KAAK,CAApB;AACAE,IAAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAN;;AACA,QAAIC,KAAK,CAACT,OAAD,CAAT,EAAoB;AAClB,aAAOQ,GAAP;AACD,KAXqD,CAYtD;;;AACA,QAAIR,OAAO,KAAK,KAAhB,EAAuB;AACrBQ,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT,CAFqB,CAGrB;;AACA,aAAOA,GAAP;AACD;;AACD,QAAIR,OAAO,KAAK,CAAC,KAAjB,EAAwB;AACtBQ,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAV;AACAA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT,CAFsB,CAGtB;;AACA,aAAOA,GAAP;AACD;;AACD,QAAIR,OAAO,GAAG,GAAd,EAAmB;AACjBE,MAAAA,WAAW,GAAG,CAAC,GAAf;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,GAAG,GAAd;AACD;;AACDF,IAAAA,OAAO,GAAGzC,IAAI,CAACr0B,GAAL,CAAS82B,OAAT,CAAV;;AACA,QAAIzC,IAAI,CAACr0B,GAAL,CAAS82B,OAAO,GAAGzC,IAAI,CAACmD,KAAL,CAAWV,OAAX,CAAnB,IAA0CC,cAA9C,EAA8D;AAC5D;AACAG,MAAAA,iBAAiB,GAAGJ,OAAO,GAAGE,WAA9B;AACAC,MAAAA,mBAAmB,GAAG,GAAtB;AACAK,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASJ,iBAAT;AACAI,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASL,mBAAT;AACA,aAAOK,GAAP;AACD;;AACD,QAAIR,OAAO,GAAG,OAAd,EAAuB;AACrB;AACAI,MAAAA,iBAAiB,GAAGF,WAApB;AACAC,MAAAA,mBAAmB,GAAG,qBAAtB;AACAK,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASJ,iBAAT;AACAI,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASL,mBAAT;AACA,aAAOK,GAAP;AACD;;AACD,QAAIR,OAAO,GAAG,MAAd,EAAsB;AACpBI,MAAAA,iBAAiB,GAAG,wBAAwBF,WAA5C;AACAC,MAAAA,mBAAmB,GAAG,GAAtB;AACAK,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASJ,iBAAT;AACAI,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASL,mBAAT;AACA,aAAOK,GAAP;AACD;;AACDD,IAAAA,CAAC,GAAGP,OAAJ;AACAK,IAAAA,mBAAmB,GAAG,GAAtB;AACAF,IAAAA,mBAAmB,GAAG,GAAtB;;AACA,WAAO,IAAP,EAAa;AACXI,MAAAA,CAAC,GAAG,OAAOA,CAAC,GAAGhD,IAAI,CAACmD,KAAL,CAAWH,CAAX,CAAX,CAAJ;AACAD,MAAAA,YAAY,GAAGH,mBAAf;AACAA,MAAAA,mBAAmB,GAAGA,mBAAmB,GAAG5C,IAAI,CAACmD,KAAL,CAAWH,CAAX,CAAtB,GAAsCF,mBAA5D;AACAA,MAAAA,mBAAmB,GAAGC,YAAtB;AACAF,MAAAA,iBAAiB,GAAG7C,IAAI,CAACmD,KAAL,CAAWV,OAAO,GAAGG,mBAAV,GAAgC,GAA3C,CAApB,CALW,CAMX;;AACA,UAAI,EAAE5C,IAAI,CAACr0B,GAAL,CAAS82B,OAAO,GAAII,iBAAiB,GAAGD,mBAAxC,IAAgEF,cAAhE,IAAkFM,CAAC,KAAKhD,IAAI,CAACmD,KAAL,CAAWH,CAAX,CAA1F,CAAJ,EAA8G;AAC5G;AACD;AACF;;AACDH,IAAAA,iBAAiB,GAAGF,WAAW,GAAGE,iBAAlC;AACAI,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASJ,iBAAT;AACAI,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASL,mBAAT;AACA,WAAOK,GAAP;AACD,GAxED;;AA0EAz1B,EAAAA,sBAAsB,GAAG,CAAzB;AAEAS,EAAAA,uBAAuB,GAAG,CAA1B;AAEAD,EAAAA,gCAAgC,GAAG,CAAnC;AAEAF,EAAAA,mBAAmB,GAAG,CAAtB;AAEAH,EAAAA,qBAAqB,GAAG,CAAxB;AAEAD,EAAAA,oBAAoB,GAAG,CAAvB;AAEAE,EAAAA,qBAAqB,GAAG,CAAxB;AAEAC,EAAAA,kBAAkB,GAAG,CAArB;AAEAJ,EAAAA,4BAA4B,GAAG,CAA/B;AAEAM,EAAAA,4BAA4B,GAAG,CAA/B;;AAEAX,EAAAA,yBAAyB,GAAG,mCAASi1B,QAAT,EAAmB;AAC7C,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,UAAxC,EAAoD1D,CAApD,EAAuDtf,EAAvD,EAA2Duf,CAA3D,EAA8D0D,GAA9D,EAAmEC,gBAAnE,EAAqFC,iBAArF,EAAwGzB,yBAAxG,EAAmItW,CAAnI,EAAsIuW,SAAtI,EAAiJyB,KAAjJ,EAAwJ7P,GAAxJ,EAA6J8P,MAA7J,EAAqKzB,sBAArK;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B,EAT6C,CAU7C;;AACAkB,IAAAA,eAAe,GAAG,IAAlB;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B;AACAhQ,IAAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,CAAN;;AACA,SAAKnI,CAAC,GAAG,CAAJ,EAAO6X,GAAG,GAAG1P,GAAG,CAAC5M,MAAtB,EAA8ByE,CAAC,GAAG6X,GAAlC,EAAuC7X,CAAC,EAAxC,EAA4C;AAC1CkU,MAAAA,CAAC,GAAG/L,GAAG,CAACnI,CAAD,CAAP;;AACA,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2Buf,CAAC,GAAG,EAAEvf,EAAjC,EAAqC;AACnC;AACAgjB,QAAAA,UAAU,GAAGvD,IAAI,CAACC,IAAL,CAAUJ,CAAV,IAAeC,CAA5B,CAFmC,CAGnC;;AACA,YAAIE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAbkC,CAcnC;;;AACA,YAAID,KAAK,GAAG,IAAIpB,SAAhB,EAA2B;AACzBmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,WAAnB,GAAiC5D,CAAjC,GAAqC,OAArC,GAA+CC,CAAxD,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAASh2B,qBAAT,EAAgC61B,gBAAhC,EAAkD5D,CAAlD,EAAqDC,CAArD,CAAlB;AACD;AACF;AACF;AACF;;AACD,WAAOsD,eAAP;AACD,GA5CD;;AA8CAp2B,EAAAA,yBAAyB,GAAG,mCAASq1B,QAAT,EAAmB;AAC7C,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,UAAxC,EAAoD1D,CAApD,EAAuDtf,EAAvD,EAA2Duf,CAA3D,EAA8D0D,GAA9D,EAAmEQ,IAAnE,EAAyEP,gBAAzE,EAA2FC,iBAA3F,EAA8GzB,yBAA9G,EAAyItW,CAAzI,EAA4IuW,SAA5I,EAAuJyB,KAAvJ,EAA8J7P,GAA9J,EAAmKC,IAAnK,EAAyK6P,MAAzK,EAAiLzB,sBAAjL;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B,EAT6C,CAU7C;;AACAkB,IAAAA,eAAe,GAAG,IAAlB;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B;AACAhQ,IAAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,CAAN,CAb6C,CAc7C;AACA;AACA;;AACA,SAAKnI,CAAC,GAAG,CAAJ,EAAO6X,GAAG,GAAG1P,GAAG,CAAC5M,MAAtB,EAA8ByE,CAAC,GAAG6X,GAAlC,EAAuC7X,CAAC,EAAxC,EAA4C;AAC1CkU,MAAAA,CAAC,GAAG/L,GAAG,CAACnI,CAAD,CAAP;AACAoI,MAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,CAAP;;AACA,WAAKxT,EAAE,GAAG,CAAL,EAAQyjB,IAAI,GAAGjQ,IAAI,CAAC7M,MAAzB,EAAiC3G,EAAE,GAAGyjB,IAAtC,EAA4CzjB,EAAE,EAA9C,EAAkD;AAChDuf,QAAAA,CAAC,GAAG/L,IAAI,CAACxT,EAAD,CAAR,CADgD,CAEhD;;AACAgjB,QAAAA,UAAU,GAAGvD,IAAI,CAACC,IAAL,CAAUJ,CAAC,GAAGC,CAAd,CAAb,CAHgD,CAIhD;;AACA,YAAIE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAd+C,CAehD;;;AACA,YAAID,KAAK,GAAG,IAAIpB,SAAhB,EAA2B;AACzBmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,YAAnB,GAAkC5D,CAAlC,GAAsC,KAAtC,GAA8CC,CAA9C,GAAkD,IAA3D,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAASj2B,qBAAT,EAAgC81B,gBAAhC,EAAkD5D,CAAlD,EAAqDC,CAArD,CAAlB;AACD;AACF;AACF;AACF;;AACD,WAAOsD,eAAP;AACD,GAjDD;;AAmDAr2B,EAAAA,cAAc,GAAG,wBAASs1B,QAAT,EAAmB;AAClC,QAAI4B,+BAAJ,EAAqCC,+BAArC,EAAsEjC,yBAAtE,EAAiGC,SAAjG,EAA4GC,sBAA5G;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B,EATkC,CAUlC;AAEA;AACA;AACA;;AACAgC,IAAAA,+BAA+B,GAAG92B,yBAAyB,CAACi1B,QAAD,CAA3D;;AACA,QAAI6B,+BAA+B,IAAI,IAAvC,EAA6C;AAC3C,aAAOA,+BAAP;AACD;;AACDD,IAAAA,+BAA+B,GAAGj3B,yBAAyB,CAACq1B,QAAD,CAA3D;;AACA,QAAI4B,+BAA+B,IAAI,IAAvC,EAA6C;AAC3C,aAAOA,+BAAP;AACD;;AACD,WAAO,IAAP;AACD,GAxBD;;AA0BAr3B,EAAAA,UAAU,GAAG,oBAASy1B,QAAT,EAAmB;AAC9B,QAAI8B,2BAAJ,EAAiCC,2BAAjC,EAA8DnC,yBAA9D,EAAyFC,SAAzF,EAAoGC,sBAApG;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B,EAT8B,CAU9B;AACA;;AACAkC,IAAAA,2BAA2B,GAAGn3B,qBAAqB,CAACo1B,QAAD,CAAnD;;AACA,QAAI+B,2BAA2B,IAAI,IAAnC,EAAyC;AACvC,aAAOA,2BAAP;AACD;;AACDD,IAAAA,2BAA2B,GAAGt3B,qBAAqB,CAACw1B,QAAD,CAAnD;;AACA,QAAI8B,2BAA2B,IAAI,IAAnC,EAAyC;AACvC,aAAOA,2BAAP;AACD;;AACD,WAAO,IAAP;AACD,GArBD;;AAuBAl3B,EAAAA,qBAAqB,GAAG,+BAASo1B,QAAT,EAAmB;AACzC,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,UAAxC,EAAoD1D,CAApD,EAAuDtf,EAAvD,EAA2Duf,CAA3D,EAA8D2D,gBAA9D,EAAgFC,iBAAhF,EAAmGzB,yBAAnG,EAA8HtW,CAA9H,EAAiIuW,SAAjI,EAA4IyB,KAA5I,EAAmJC,MAAnJ,EAA2JzB,sBAA3J;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B;AACAkB,IAAAA,eAAe,GAAG,IAAlB;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B,CAXyC,CAY7C;;AACI,SAAKjE,CAAC,GAAGlU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBkU,CAAC,GAAG,EAAElU,CAA9B,EAAiC;AAC/B,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0Buf,CAAC,GAAG,EAAEvf,EAAhC,EAAoC;AAClC;AACAgjB,QAAAA,UAAU,GAAGvD,IAAI,CAACa,GAAL,CAAShB,CAAT,IAAcC,CAA3B,CAFkC,CAGlC;;AACA,YAAIE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAbiC,CAclC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAIE,gBAAgB,KAAK,CAArB,IAA0BzD,IAAI,CAACr0B,GAAL,CAASq0B,IAAI,CAACmD,KAAL,CAAWM,gBAAgB,GAAG3D,CAA9B,CAAT,MAA+CE,IAAI,CAACr0B,GAAL,CAAS83B,gBAAgB,GAAG3D,CAA5B,CAA7E,EAA6G;AAC3G;AACD;;AACD,YAAIwD,KAAK,GAAG,MAAMpB,SAAlB,EAA6B;AAC3BmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,UAAnB,GAAgC5D,CAAhC,GAAoC,OAApC,GAA8CC,CAAvD,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAAS71B,4BAAT,EAAuC01B,gBAAvC,EAAyD5D,CAAzD,EAA4DC,CAA5D,CAAlB;AACD;AACF;AACF;AACF;;AACD,WAAOsD,eAAP;AACD,GArDD;;AAuDAv2B,EAAAA,qBAAqB,GAAG,+BAASw1B,QAAT,EAAmB;AACzC,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,UAAxC,EAAoD1D,CAApD,EAAuDtf,EAAvD,EAA2Duf,CAA3D,EAA8D2D,gBAA9D,EAAgFC,iBAAhF,EAAmGzB,yBAAnG,EAA8HtW,CAA9H,EAAiIuW,SAAjI,EAA4IyB,KAA5I,EAAmJC,MAAnJ,EAA2JzB,sBAA3J;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B;AACAkB,IAAAA,eAAe,GAAG,IAAlB;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B,CAXyC,CAY7C;;AACI,SAAKjE,CAAC,GAAGlU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBkU,CAAC,GAAG,EAAElU,CAA9B,EAAiC;AAC/B,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0Buf,CAAC,GAAG,EAAEvf,EAAhC,EAAoC;AAClC;AACAgjB,QAAAA,UAAU,GAAGvD,IAAI,CAACa,GAAL,CAAShB,CAAC,GAAGC,CAAb,CAAb,CAFkC,CAGlC;;AACA,YAAIE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAbiC,CAclC;;;AACA,YAAID,KAAK,GAAG,OAAOpB,SAAnB,EAA8B;AAC5BmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,UAAnB,GAAgC5D,CAAhC,GAAoC,KAApC,GAA4CC,CAA5C,GAAgD,IAAzD,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAASn2B,4BAAT,EAAuCg2B,gBAAvC,EAAyD5D,CAAzD,EAA4DC,CAA5D,CAAlB;AACD;AACF;AACF;AACF;;AACD,WAAOsD,eAAP;AACD,GA1CD;;AA4CAl2B,EAAAA,0BAA0B,GAAG,oCAASm1B,QAAT,EAAmB;AAC9C,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,UAAxC,EAAoD1D,CAApD,EAAuDtf,EAAvD,EAA2Duf,CAA3D,EAA8D2D,gBAA9D,EAAgFC,iBAAhF,EAAmGzB,yBAAnG,EAA8HtW,CAA9H,EAAiIuW,SAAjI,EAA4IyB,KAA5I,EAAmJC,MAAnJ,EAA2JzB,sBAA3J;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B;AACAkB,IAAAA,eAAe,GAAG,IAAlB;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B,CAX8C,CAYlD;;AACI,SAAKjE,CAAC,GAAGlU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBkU,CAAC,GAAG,EAAElU,CAA9B,EAAiC;AAC/B,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2Buf,CAAC,GAAG,EAAEvf,EAAjC,EAAqC;AACnC;AACAgjB,QAAAA,UAAU,GAAGvD,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACnpC,CAAd,EAAiBgpC,CAAjB,IAAsBC,CAAnC,CAFmC,CAGnC;;AACA,YAAIE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAbkC,CAcnC;;;AACA,YAAID,KAAK,GAAG,IAAIpB,SAAhB,EAA2B;AACzBmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,UAAnB,GAAgC5D,CAAhC,GAAoC,OAApC,GAA8CC,CAAvD,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAAS/1B,kBAAT,EAA6B41B,gBAA7B,EAA+C5D,CAA/C,EAAkDC,CAAlD,CAAlB;AACD;AACF;AACF;AACF;;AACD,WAAOsD,eAAP;AACD,GA1CD;;AA4CAj2B,EAAAA,2BAA2B,GAAG,qCAASk1B,QAAT,EAAmB;AAC/C,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,UAAxC,EAAoD1D,CAApD,EAAuDtf,EAAvD,EAA2Duf,CAA3D,EAA8D2D,gBAA9D,EAAgFC,iBAAhF,EAAmGzB,yBAAnG,EAA8HtW,CAA9H,EAAiIuW,SAAjI,EAA4IyB,KAA5I,EAAmJC,MAAnJ,EAA2JzB,sBAA3J;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B;AACAkB,IAAAA,eAAe,GAAG,IAAlB,CAV+C,CAW/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B,CAnB+C,CAoBnD;;AACI,SAAKjE,CAAC,GAAGlU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBkU,CAAC,GAAG,EAAElU,CAA9B,EAAiC;AAC/B,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2Buf,CAAC,GAAG,EAAEvf,EAAjC,EAAqC;AACnC;AACAgjB,QAAAA,UAAU,GAAGvD,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACh7B,EAAd,EAAkB66B,CAAlB,IAAuBC,CAApC,CAFmC,CAGnC;;AACA,YAAIE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAbkC,CAcnC;;;AACA,YAAID,KAAK,GAAG,IAAIpB,SAAhB,EAA2B;AACzBmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,WAAnB,GAAiC5D,CAAjC,GAAqC,OAArC,GAA+CC,CAA/C,GAAmD,IAA5D,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAAS91B,mBAAT,EAA8B21B,gBAA9B,EAAgD5D,CAAhD,EAAmDC,CAAnD,CAAlB;AACD;AACF;AACF;AACF,KAhD8C,CAiD/C;;;AACA,WAAOsD,eAAP;AACD,GAnDD;;AAqDA71B,EAAAA,mBAAmB,GAAG,6BAAS80B,QAAT,EAAmB;AACvC,QAAIgC,uCAAJ,EAA6CC,2BAA7C,EAA0ErC,yBAA1E,EAAqGC,SAArG,EAAgHC,sBAAhH;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B,EATuC,CAUvC;;AACAoC,IAAAA,2BAA2B,GAAGh3B,qBAAqB,CAAC+0B,QAAD,CAAnD;;AACA,QAAIiC,2BAA2B,IAAI,IAAnC,EAAyC;AACvC,aAAOA,2BAAP;AACD;;AACDD,IAAAA,uCAAuC,GAAGh3B,iCAAiC,CAACg1B,QAAD,CAA3E;;AACA,QAAIgC,uCAAuC,IAAI,IAA/C,EAAqD;AACnD,aAAOA,uCAAP;AACD;;AACD,WAAO,IAAP;AACD,GApBD;;AAsBA/2B,EAAAA,qBAAqB,GAAG,+BAAS+0B,QAAT,EAAmB;AACzC,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCiB,QAAxC,EAAkDhB,UAAlD,EAA8D1D,CAA9D,EAAiEtf,EAAjE,EAAqEuf,CAArE,EAAwE2D,gBAAxE,EAA0FC,iBAA1F,EAA6GzB,yBAA7G,EAAwItW,CAAxI,EAA2IuW,SAA3I,EAAsJyB,KAAtJ,EAA6JC,MAA7J,EAAqKzB,sBAArK;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B;AACAkB,IAAAA,eAAe,GAAG,IAAlB;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B,CAXyC,CAY7C;AACA;AACA;AACA;AACA;;AACI,SAAKjE,CAAC,GAAGlU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBkU,CAAC,GAAG,EAAElU,CAA9B,EAAiC;AAC/B,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0Buf,CAAC,GAAG,EAAEvf,EAAhC,EAAoC;AAClC;AACAgkB,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACAyD,QAAAA,UAAU,GAAGvD,IAAI,CAACwE,GAAL,CAASD,QAAT,CAAb,CAHkC,CAIlC;;AACA,YAAIvE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAdiC,CAelC;;;AACA,YAAID,KAAK,GAAG,IAAIpB,SAAhB,EAA2B;AACzBmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,UAAnB,GAAgC5D,CAAhC,GAAoC,GAApC,GAA0CC,CAA1C,GAA8C,IAAvD,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAAS31B,uBAAT,EAAkCw1B,gBAAlC,EAAoD5D,CAApD,EAAuDC,CAAvD,CAAlB;AACD;AACF;AACF;AACF;;AACD,WAAOsD,eAAP;AACD,GA/CD;;AAiDA/1B,EAAAA,iCAAiC,GAAG,2CAASg1B,QAAT,EAAmB;AACrD,QAAIe,eAAJ,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCiB,QAAxC,EAAkDhB,UAAlD,EAA8D1D,CAA9D,EAAiEtf,EAAjE,EAAqEuf,CAArE,EAAwE2D,gBAAxE,EAA0FC,iBAA1F,EAA6GzB,yBAA7G,EAAwItW,CAAxI,EAA2IuW,SAA3I,EAAsJyB,KAAtJ,EAA6JC,MAA7J,EAAqKzB,sBAArK;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B;AACAkB,IAAAA,eAAe,GAAG,IAAlB;AACAM,IAAAA,iBAAiB,GAAGG,MAAM,CAACC,SAA3B,CAXqD,CAYzD;;AACI,SAAKjE,CAAC,GAAGlU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBkU,CAAC,GAAG,EAAElU,CAA/B,EAAkC;AAChC,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2Buf,CAAC,GAAG,EAAEvf,EAAjC,EAAqC;AACnC;AACAgkB,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACAyD,QAAAA,UAAU,GAAGvD,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACh7B,EAAL,GAAUu/B,QAAnB,CAAb,CAHmC,CAInC;;AACA,YAAIvE,IAAI,CAACr0B,GAAL,CAAS43B,UAAT,IAAuB,KAA3B,EAAkC;AAChCI,UAAAA,KAAK,GAAGtB,QAAQ,GAAGkB,UAAnB;AACAE,UAAAA,gBAAgB,GAAGzD,IAAI,CAAC+D,KAAL,CAAWJ,KAAX,CAAnB,CAFgC,CAGhC;;AACAL,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS,IAAIg4B,KAAK,GAAGF,gBAArB,CAAR;AACD,SALD,MAKO;AACLE,UAAAA,KAAK,GAAG,CAAR;AACAF,UAAAA,gBAAgB,GAAG,CAAnB;AACAH,UAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS02B,QAAQ,GAAGkB,UAApB,CAAR;AACD,SAdkC,CAenC;AACA;;;AACA,YAAID,KAAK,GAAG,KAAKpB,SAAjB,EAA4B;AAC1BmB,UAAAA,UAAU,GAAGrM,uBAAuB,CAACyM,gBAAD,EAAmB5D,CAAnB,EAAsBC,CAAtB,CAApC;;AACA,cAAIuD,UAAU,GAAGK,iBAAjB,EAAoC;AAClC;AACAA,YAAAA,iBAAiB,GAAGL,UAApB;AACAO,YAAAA,MAAM,GAAGH,gBAAgB,GAAG,UAAnB,GAAgC5D,CAAhC,GAAoC,GAApC,GAA0CC,CAA1C,GAA8C,SAAvD,CAHkC,CAIlC;;AACAsD,YAAAA,eAAe,GAAG,CAACQ,MAAD,EAAS51B,gCAAT,EAA2Cy1B,gBAA3C,EAA6D5D,CAA7D,EAAgEC,CAAhE,CAAlB;AACD;AACF;AACF;AACF;;AACD,WAAOsD,eAAP;AACD,GA5CD;;AA8CAz2B,EAAAA,SAAS,GAAG,mBAAS01B,QAAT,EAAmB;AAC7B,QAAIoC,gBAAJ,EAAsBC,gBAAtB,EAAwCC,oBAAxC,EAA8DC,gCAA9D,EAAgGC,iCAAhG,EAAmIC,yBAAnI,EAA8JC,eAA9J,EAA+KC,YAA/K,EAA6LC,eAA7L,EAA8MhD,yBAA9M,EAAyOC,SAAzO,EAAoPC,sBAApP;AACAA,IAAAA,sBAAsB,GAAGE,QAAQ,CAAC9B,QAAT,GAAoBgC,KAApB,CAA0B,GAA1B,CAAzB;;AACA,QAAIJ,sBAAsB,CAACjb,MAAvB,KAAkC,CAAtC,EAAyC;AACvC+a,MAAAA,yBAAyB,GAAGE,sBAAsB,CAAC,CAAD,CAAtB,CAA0Bjb,MAAtD;AACAgb,MAAAA,SAAS,GAAG,IAAIlC,IAAI,CAACwC,GAAL,CAAS,EAAT,EAAaP,yBAAb,CAAhB;AACD,KAHD,MAGO;AACL,aAAO,CAAC,KAAKjC,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAAN,EAA4B70B,sBAA5B,EAAoDwyB,IAAI,CAACmD,KAAL,CAAWd,QAAX,CAApD,EAA0E,CAA1E,EAA6E,CAA7E,CAAP;AACD;;AACD1B,IAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBqB,SAA5B;AACA+C,IAAAA,eAAe,GAAGpB,MAAM,CAACC,SAAzB;AACAkB,IAAAA,YAAY,GAAG,CAAf;AACAD,IAAAA,eAAe,GAAG,IAAlB;AACAN,IAAAA,gBAAgB,GAAG,IAAnB;AACAE,IAAAA,oBAAoB,GAAG53B,cAAc,CAACs1B,QAAD,CAArC;;AACA,QAAIsC,oBAAoB,IAAI,IAA5B,EAAkC;AAChCK,MAAAA,YAAY,GAAGhO,uBAAuB,CAAC2N,oBAAD,CAAtC;;AACA,UAAIK,YAAY,GAAGC,eAAnB,EAAoC;AAClC,YAAIR,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,2CAA2C8D,oBAA3C,GAAkE,eAAlE,GAAoFK,YAAhG;AACD;;AACDC,QAAAA,eAAe,GAAGD,YAAlB;AACAD,QAAAA,eAAe,GAAGJ,oBAAlB;AACD,OAND,MAMO;AACL,YAAIF,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,2CAA2C8D,oBAA3C,GAAkE,eAAlE,GAAoFK,YAAhG;AACD;AACF;AACF;;AACDN,IAAAA,gBAAgB,GAAG93B,UAAU,CAACy1B,QAAD,CAA7B;;AACA,QAAIqC,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BM,MAAAA,YAAY,GAAGhO,uBAAuB,CAAC0N,gBAAD,CAAtC;;AACA,UAAIM,YAAY,GAAGC,eAAnB,EAAoC;AAClC,YAAIR,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC6D,gBAAvC,GAA0D,eAA1D,GAA4EM,YAAxF;AACD;;AACDC,QAAAA,eAAe,GAAGD,YAAlB;AACAD,QAAAA,eAAe,GAAGL,gBAAlB;AACD,OAND,MAMO;AACL,YAAID,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC6D,gBAAvC,GAA0D,eAA1D,GAA4EM,YAAxF;AACD;AACF;AACF;;AACDJ,IAAAA,gCAAgC,GAAG13B,0BAA0B,CAACm1B,QAAD,CAA7D;;AACA,QAAIuC,gCAAgC,IAAI,IAAxC,EAA8C;AAC5CI,MAAAA,YAAY,GAAGhO,uBAAuB,CAAC4N,gCAAD,CAAtC;;AACA,UAAII,YAAY,GAAGC,eAAnB,EAAoC;AAClC,YAAIR,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,uDAAuD+D,gCAAvD,GAA0F,eAA1F,GAA4GI,YAAxH;AACD;;AACDC,QAAAA,eAAe,GAAGD,YAAlB;AACAD,QAAAA,eAAe,GAAGH,gCAAlB;AACD,OAND,MAMO;AACL,YAAIH,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,uDAAuD+D,gCAAvD,GAA0F,eAA1F,GAA4GI,YAAxH;AACD;AACF;AACF;;AACDH,IAAAA,iCAAiC,GAAG13B,2BAA2B,CAACk1B,QAAD,CAA/D;;AACA,QAAIwC,iCAAiC,IAAI,IAAzC,EAA+C;AAC7CG,MAAAA,YAAY,GAAGhO,uBAAuB,CAAC6N,iCAAD,CAAtC;;AACA,UAAIG,YAAY,GAAGC,eAAnB,EAAoC;AAClC,YAAIR,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,wDAAwDgE,iCAAxD,GAA4F,eAA5F,GAA8GG,YAA1H;AACD;;AACDC,QAAAA,eAAe,GAAGD,YAAlB;AACAD,QAAAA,eAAe,GAAGF,iCAAlB;AACD,OAND,MAMO;AACL,YAAIJ,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,wDAAwDgE,iCAAxD,GAA4F,eAA5F,GAA8GG,YAA1H;AACD;AACF;AACF;;AACDF,IAAAA,yBAAyB,GAAGv3B,mBAAmB,CAAC80B,QAAD,CAA/C;;AACA,QAAIyC,yBAAyB,IAAI,IAAjC,EAAuC;AACrCE,MAAAA,YAAY,GAAGhO,uBAAuB,CAAC8N,yBAAD,CAAtC;;AACA,UAAIE,YAAY,GAAGC,eAAnB,EAAoC;AAClC,YAAIR,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,gDAAgDiE,yBAAhD,GAA4E,eAA5E,GAA8FE,YAA1G;AACD;;AACDC,QAAAA,eAAe,GAAGD,YAAlB;AACAD,QAAAA,eAAe,GAAGD,yBAAlB;AACD,OAND,MAMO;AACL,YAAIL,gBAAJ,EAAsB;AACpB9D,UAAAA,OAAO,CAACE,GAAR,CAAY,gDAAgDiE,yBAAhD,GAA4E,eAA5E,GAA8FE,YAA1G;AACD;AACF;AACF;;AACD,WAAOD,eAAP;AACD,GA1FD;;AA4FA/N,EAAAA,uBAAuB,GAAG,iCAASkO,OAAT,EAAkBxG,CAAlB,EAAqByG,CAArB,EAAwB;AAChD,QAAIC,MAAJ;AACAA,IAAAA,MAAM,GAAG,IAAT;;AACA,QAAIF,OAAO,YAAYG,KAAvB,EAA8B;AAC5B;AACA;AACA;AACA;AACA,cAAQH,OAAO,CAAC,CAAD,CAAf;AACE,aAAKl3B,gCAAL;AACEo3B,UAAAA,MAAM,GAAG,CAAT;AACA;AACF;AACA;AACA;;AACA,aAAKt3B,mBAAL;AACEs3B,UAAAA,MAAM,GAAGpF,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAYxC,IAAI,CAACr0B,GAAL,CAASu5B,OAAO,CAAC,CAAD,CAAhB,CAAZ,IAAoClF,IAAI,CAACr0B,GAAL,CAASu5B,OAAO,CAAC,CAAD,CAAhB,CAA7C;AACA;;AACF,aAAKr3B,kBAAL;AACEu3B,UAAAA,MAAM,GAAGpF,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAYxC,IAAI,CAACr0B,GAAL,CAASu5B,OAAO,CAAC,CAAD,CAAhB,CAAZ,IAAoClF,IAAI,CAACr0B,GAAL,CAASu5B,OAAO,CAAC,CAAD,CAAhB,CAA7C;AACA;;AACF;AACEE,UAAAA,MAAM,GAAG,CAAT;AAdJ;;AAgBAA,MAAAA,MAAM,IAAIpF,IAAI,CAACr0B,GAAL,CAASu5B,OAAO,CAAC,CAAD,CAAhB,KAAwBlF,IAAI,CAACr0B,GAAL,CAASu5B,OAAO,CAAC,CAAD,CAAhB,IAAuBlF,IAAI,CAACr0B,GAAL,CAASu5B,OAAO,CAAC,CAAD,CAAhB,CAA/C,CAAV;AACD,KAtBD,MAsBO;AACLE,MAAAA,MAAM,IAAIpF,IAAI,CAACr0B,GAAL,CAASu5B,OAAT,KAAqBlF,IAAI,CAACr0B,GAAL,CAAS+yB,CAAT,IAAcsB,IAAI,CAACr0B,GAAL,CAASw5B,CAAT,CAAnC,CAAV;AACD,KA3B+C,CA6BhD;;;AACA,QAAID,OAAO,CAAC,CAAD,CAAP,KAAe,CAAnB,EAAsB;AACpBE,MAAAA,MAAM,IAAI,CAAV;AACD,KAFD,MAEO;AACLA,MAAAA,MAAM,IAAI,CAAV;AACD;;AACD,QAAIF,OAAO,CAAC,CAAD,CAAP,KAAe,CAAnB,EAAsB;AACpBE,MAAAA,MAAM,IAAI,CAAV;AACD,KAFD,MAEO;AACLA,MAAAA,MAAM,IAAI,CAAV;AACD;;AACD,QAAIF,OAAO,CAAC,CAAD,CAAP,KAAe,CAAnB,EAAsB;AACpBE,MAAAA,MAAM,IAAI,CAAV;AACD,KAFD,MAEO;AACLA,MAAAA,MAAM,IAAI,CAAV;AACD;;AACD,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACdA,MAAAA,MAAM,GAAG,CAAT;AACD;;AACD,WAAOA,MAAP;AACD,GAjDD;;AAmDApL,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIsJ,KAAJ,EAAWiB,QAAX,EAAqB1E,CAArB,EAAwBtf,EAAxB,EAA4B+kB,EAA5B,EAAgCC,EAAhC,EAAoCzF,CAApC,EAAuCpZ,EAAvC,EAA2C8e,EAA3C,EAA+CC,EAA/C,EAAmDC,EAAnD,EAAuDpE,EAAvD,EAA2DqE,EAA3D,EAA+DC,EAA/D,EAAmEpC,GAAnE,EAAwEQ,IAAxE,EAA8E6B,IAA9E,EAAoFC,IAApF,EAA0FC,IAA1F,EAAgGC,IAAhG,EAAsGC,IAAtG,EAA4GC,IAA5G,EAAkH3E,EAAlH,EAAsH4E,EAAtH,EAA0HC,EAA1H,EAA8HC,EAA9H,EAAkIC,EAAlI,EAAsI3a,CAAtI,EAAyI4a,EAAzI,EAA6IC,EAA7I,EAAiJC,aAAjJ,EAAgKC,EAAhK,EAAoKC,EAApK,EAAwKC,EAAxK,EAA4KC,EAA5K,EAAgL/S,GAAhL,EAAqLC,IAArL,EAA2LyN,IAA3L,EAAiMC,IAAjM,EAAuMC,IAAvM,EAA6MC,IAA7M,EAAmNC,IAAnN,EAAyNC,IAAzN,EAA+NiF,QAA/N,EAAyOC,gBAAzO,EAA2PC,aAA3P,EAA0QC,EAA1Q,EAA8QC,EAA9Q,EAAkRC,EAAlR,EAAsRC,EAAtR,EAA0RC,EAA1R,EAA8RC,EAA9R,EAAkSC,EAAlS,EAAsSC,EAAtS,EAA0SC,KAA1S,EAAiTC,EAAjT,EAAqTC,EAArT,EAAyTC,EAAzT,EAA6TC,EAA7T;AACA/T,IAAAA,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,CAAN;;AACA,SAAKnI,CAAC,GAAG,CAAJ,EAAO6X,GAAG,GAAG1P,GAAG,CAAC5M,MAAtB,EAA8ByE,CAAC,GAAG6X,GAAlC,EAAuC7X,CAAC,EAAxC,EAA4C;AAC1CkU,MAAAA,CAAC,GAAG/L,GAAG,CAACnI,CAAD,CAAP;AACAoI,MAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,CAAP;;AACA,WAAKxT,EAAE,GAAG,CAAL,EAAQyjB,IAAI,GAAGjQ,IAAI,CAAC7M,MAAzB,EAAiC3G,EAAE,GAAGyjB,IAAtC,EAA4CzjB,EAAE,EAA9C,EAAkD;AAChDuf,QAAAA,CAAC,GAAG/L,IAAI,CAACxT,EAAD,CAAR;;AACA,YAAIsf,CAAC,KAAKC,CAAV,EAAa;AACX,mBADW,CACD;AACX;;AACDa,QAAAA,OAAO,CAACE,GAAR,CAAY,iCAAiC,YAAjC,GAAgDhB,CAAhD,GAAoD,OAApD,GAA8DC,CAA1E;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAUJ,CAAV,IAAeC,CAAvB;AACAgH,QAAAA,QAAQ,GAAG/5B,cAAc,CAAC06B,KAAD,CAAzB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACC,IAAL,CAAU6G,QAAQ,CAAC,CAAD,CAAlB,CAAd,GAAuCA,QAAQ,CAAC,CAAD,CAA/D;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAAtC,EAA6C;AAC3CrG,UAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8B,YAA9B,GAA6ChB,CAA7C,GAAiD,OAAjD,GAA2DC,CAA3D,GAA+D,eAA/D,GAAiFgH,QAA7F;AACD;AACF;AACF;;AACDtF,IAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,CAAP;;AACA,SAAK9a,EAAE,GAAG,CAAL,EAAQmf,IAAI,GAAGrE,IAAI,CAACta,MAAzB,EAAiCR,EAAE,GAAGmf,IAAtC,EAA4Cnf,EAAE,EAA9C,EAAkD;AAChDmZ,MAAAA,CAAC,GAAG2B,IAAI,CAAC9a,EAAD,CAAR;AACA+a,MAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,CAAP;;AACA,WAAKH,EAAE,GAAG,CAAL,EAAQwE,IAAI,GAAGrE,IAAI,CAACva,MAAzB,EAAiCoa,EAAE,GAAGwE,IAAtC,EAA4CxE,EAAE,EAA9C,EAAkD;AAChDxB,QAAAA,CAAC,GAAG2B,IAAI,CAACH,EAAD,CAAR;;AACA,YAAIzB,CAAC,KAAKC,CAAV,EAAa;AACX,mBADW,CACD;AACX;;AACDa,QAAAA,OAAO,CAACE,GAAR,CAAY,+CAA+C,YAA/C,GAA8DhB,CAA9D,GAAkE,OAAlE,GAA4EC,CAAxF;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACC,IAAL,CAAUJ,CAAV,IAAeC,CAA/B;AACA2H,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAG/5B,cAAc,CAAC06B,KAAD,CAAzB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACC,IAAL,CAAU6G,QAAQ,CAAC,CAAD,CAAlB,CAAd,GAAuCA,QAAQ,CAAC,CAAD,CAA/D;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,IAA0C,KAA9C,EAAqD;AACnDrG,UAAAA,OAAO,CAACE,GAAR,CAAY,4CAA4C,YAA5C,GAA2DhB,CAA3D,GAA+D,OAA/D,GAAyEC,CAAzE,GAA6E,eAA7E,GAA+FgH,QAA3G;AACD;AACF;AACF;;AACDpF,IAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,CAAP;;AACA,SAAKH,EAAE,GAAG,CAAL,EAAQwE,IAAI,GAAGrE,IAAI,CAACxa,MAAzB,EAAiCqa,EAAE,GAAGwE,IAAtC,EAA4CxE,EAAE,EAA9C,EAAkD;AAChD1B,MAAAA,CAAC,GAAG6B,IAAI,CAACH,EAAD,CAAR;AACAI,MAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,CAAP;;AACA,WAAK0E,EAAE,GAAG,CAAL,EAAQL,IAAI,GAAGrE,IAAI,CAACza,MAAzB,EAAiCmf,EAAE,GAAGL,IAAtC,EAA4CK,EAAE,EAA9C,EAAkD;AAChDvG,QAAAA,CAAC,GAAG6B,IAAI,CAAC0E,EAAD,CAAR;;AACA,YAAIxG,CAAC,KAAKC,CAAV,EAAa;AACX,mBADW,CACD;AACX;;AACDa,QAAAA,OAAO,CAACE,GAAR,CAAY,iCAAiC,YAAjC,GAAgDhB,CAAhD,GAAoD,KAApD,GAA4DC,CAA5D,GAAgE,IAA5E;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAUJ,CAAC,GAAGC,CAAd,CAAR;AACAgH,QAAAA,QAAQ,GAAG/5B,cAAc,CAAC06B,KAAD,CAAzB;;AACA,YAAIX,QAAQ,IAAI,IAAhB,EAAsB;AACpBE,UAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACC,IAAL,CAAU6G,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAhC,CAA9B;;AACA,cAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgBn5B,qBAAhB,IAAyCqyB,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAA/E,EAAsF;AACpFrG,YAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8B,YAA9B,GAA6ChB,CAA7C,GAAiD,KAAjD,GAAyDC,CAAzD,GAA6D,iBAA7D,GAAiFgH,QAA7F;AACD;AACF;AACF;AACF;;AACDlF,IAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,CAAP;;AACA,SAAK2E,EAAE,GAAG,CAAL,EAAQN,IAAI,GAAGrE,IAAI,CAAC1a,MAAzB,EAAiCqf,EAAE,GAAGN,IAAtC,EAA4CM,EAAE,EAA9C,EAAkD;AAChD1G,MAAAA,CAAC,GAAG+B,IAAI,CAAC2E,EAAD,CAAR;AACA1E,MAAAA,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,CAAP;;AACA,WAAK6E,EAAE,GAAG,CAAL,EAAQR,IAAI,GAAGrE,IAAI,CAAC3a,MAAzB,EAAiCwf,EAAE,GAAGR,IAAtC,EAA4CQ,EAAE,EAA9C,EAAkD;AAChD5G,QAAAA,CAAC,GAAG+B,IAAI,CAAC6E,EAAD,CAAR;;AACA,YAAI7G,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtB;AACD;;AACDa,QAAAA,OAAO,CAACE,GAAR,CAAY,gDAAgD,YAAhD,GAA+DhB,CAA/D,GAAmE,KAAnE,GAA2EC,CAA3E,GAA+E,IAA3F;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACC,IAAL,CAAUJ,CAAC,GAAGC,CAAd,CAAhB;AACA2H,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAG/5B,cAAc,CAAC06B,KAAD,CAAzB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACC,IAAL,CAAU6G,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAhC,CAA9B;;AACA,YAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgBn5B,qBAAhB,IAAyCqyB,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,IAA0C,KAAvF,EAA8F;AAC5FrG,UAAAA,OAAO,CAACE,GAAR,CAAY,6CAA6C,YAA7C,GAA4DhB,CAA5D,GAAgE,KAAhE,GAAwEC,CAAxE,GAA4E,iBAA5E,GAAgGgH,QAA5G;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAG+G,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B/G,CAAC,GAAG,EAAE+G,EAAhC,EAAoC;AAClC,WAAK9G,CAAC,GAAGmH,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BnH,CAAC,GAAG,EAAEmH,EAAhC,EAAoC;AAClCtG,QAAAA,OAAO,CAACE,GAAR,CAAY,4BAA4B,UAA5B,GAAyChB,CAAzC,GAA6C,OAA7C,GAAuDC,CAAnE;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACa,GAAL,CAAShB,CAAT,IAAcC,CAAtB;AACAgH,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACa,GAAL,CAASiG,QAAQ,CAAC,CAAD,CAAjB,CAAd,GAAsCA,QAAQ,CAAC,CAAD,CAA9D;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAAtC,EAA6C;AAC3CrG,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB,UAAzB,GAAsChB,CAAtC,GAA0C,OAA1C,GAAoDC,CAApD,GAAwD,eAAxD,GAA0EgH,QAAtF;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAGsH,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BtH,CAAC,GAAG,EAAEsH,EAAhC,EAAoC;AAClC,WAAKrH,CAAC,GAAGuH,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BvH,CAAC,GAAG,EAAEuH,EAAhC,EAAoC;AAClC1G,QAAAA,OAAO,CAACE,GAAR,CAAY,0CAA0C,UAA1C,GAAuDhB,CAAvD,GAA2D,OAA3D,GAAqEC,CAAjF;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACa,GAAL,CAAShB,CAAT,IAAcC,CAA9B;AACA2H,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACa,GAAL,CAASiG,QAAQ,CAAC,CAAD,CAAjB,CAAd,GAAsCA,QAAQ,CAAC,CAAD,CAA9D;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,IAA0C,KAA9C,EAAqD;AACnDrG,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC,UAAvC,GAAoDhB,CAApD,GAAwD,OAAxD,GAAkEC,CAAlE,GAAsE,eAAtE,GAAwFgH,QAApG;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAG0H,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B1H,CAAC,GAAG,EAAE0H,EAAhC,EAAoC;AAClC,WAAKzH,CAAC,GAAG4H,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B5H,CAAC,GAAG,EAAE4H,EAAhC,EAAoC;AAClC/G,QAAAA,OAAO,CAACE,GAAR,CAAY,4BAA4B,UAA5B,GAAyChB,CAAzC,GAA6C,KAA7C,GAAqDC,CAArD,GAAyD,IAArE;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACa,GAAL,CAAShB,CAAC,GAAGC,CAAb,CAAR;AACAgH,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACa,GAAL,CAASiG,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAA/B,CAA9B;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAAtC,EAA6C;AAC3CrG,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB,UAAzB,GAAsChB,CAAtC,GAA0C,KAA1C,GAAkDC,CAAlD,GAAsD,IAAtD,GAA6D,eAA7D,GAA+EgH,QAA3F;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAG+H,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B/H,CAAC,GAAG,EAAE+H,EAAhC,EAAoC;AAClC,WAAK9H,CAAC,GAAGwF,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BxF,CAAC,GAAG,EAAEwF,EAAhC,EAAoC;AAClC3E,QAAAA,OAAO,CAACE,GAAR,CAAY,0CAA0C,UAA1C,GAAuDhB,CAAvD,GAA2D,KAA3D,GAAmEC,CAAnE,GAAuE,IAAnF;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACa,GAAL,CAAShB,CAAC,GAAGC,CAAb,CAAhB;AACA2H,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACa,GAAL,CAASiG,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAA/B,CAA9B;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,IAA0C,KAA9C,EAAqD;AACnDrG,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC,UAAvC,GAAoDhB,CAApD,GAAwD,KAAxD,GAAgEC,CAAhE,GAAoE,IAApE,GAA2E,eAA3E,GAA6FgH,QAAzG;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAG2F,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B3F,CAAC,GAAG,EAAE2F,EAAhC,EAAoC;AAClC,WAAK1F,CAAC,GAAG6F,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2B7F,CAAC,GAAG,EAAE6F,EAAjC,EAAqC;AACnChF,QAAAA,OAAO,CAACE,GAAR,CAAY,4BAA4B,WAA5B,GAA0ChB,CAA1C,GAA8C,OAA9C,GAAwDC,CAApE;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACnpC,CAAd,EAAiBgpC,CAAjB,IAAsBC,CAA9B;AACAgH,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACnpC,CAAd,EAAiBiwC,QAAQ,CAAC,CAAD,CAAzB,CAAd,GAA8CA,QAAQ,CAAC,CAAD,CAAtE;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAAtC,EAA6C;AAC3CrG,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB,WAAzB,GAAuChB,CAAvC,GAA2C,OAA3C,GAAqDC,CAArD,GAAyD,eAAzD,GAA2EgH,QAAvF;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAGsG,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BtG,CAAC,GAAG,EAAEsG,EAAhC,EAAoC;AAClC,WAAKrG,CAAC,GAAGwG,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2BxG,CAAC,GAAG,EAAEwG,EAAjC,EAAqC;AACnC3F,QAAAA,OAAO,CAACE,GAAR,CAAY,uDAAuD,WAAvD,GAAqEhB,CAArE,GAAyE,OAAzE,GAAmFC,CAA/F;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACnpC,CAAd,EAAiBgpC,CAAjB,IAAsBC,CAAtC;AACA2H,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAG55B,0BAA0B,CAACu6B,KAAD,CAArC;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACnpC,CAAd,EAAiBiwC,QAAQ,CAAC,CAAD,CAAzB,CAAd,GAA8CA,QAAQ,CAAC,CAAD,CAAtE;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,IAA0C,KAA9C,EAAqD;AACnDrG,UAAAA,OAAO,CAACE,GAAR,CAAY,oDAAoD,WAApD,GAAkEhB,CAAlE,GAAsE,OAAtE,GAAgFC,CAAhF,GAAoF,eAApF,GAAsGgH,QAAlH;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAG2G,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B3G,CAAC,GAAG,EAAE2G,EAAhC,EAAoC;AAClC,WAAK1G,CAAC,GAAG6G,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2B7G,CAAC,GAAG,EAAE6G,EAAjC,EAAqC;AACnChG,QAAAA,OAAO,CAACE,GAAR,CAAY,4BAA4B,WAA5B,GAA0ChB,CAA1C,GAA8C,KAA9C,GAAsDC,CAAlE;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACh7B,EAAd,EAAkB66B,CAAlB,IAAuBC,CAA/B;AACAgH,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACh7B,EAAd,EAAkB8hC,QAAQ,CAAC,CAAD,CAA1B,CAAd,GAA+CA,QAAQ,CAAC,CAAD,CAAvE;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAAtC,EAA6C;AAC3CrG,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB,WAAzB,GAAuChB,CAAvC,GAA2C,KAA3C,GAAmDC,CAAnD,GAAuD,iBAAvD,GAA2EgH,QAAvF;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAGgH,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BhH,CAAC,GAAG,EAAEgH,EAAhC,EAAoC;AAClC,WAAK/G,CAAC,GAAGoH,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2BpH,CAAC,GAAG,EAAEoH,EAAjC,EAAqC;AACnCvG,QAAAA,OAAO,CAACE,GAAR,CAAY,wDAAwD,WAAxD,GAAsEhB,CAAtE,GAA0E,KAA1E,GAAkFC,CAA9F;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACh7B,EAAd,EAAkB66B,CAAlB,IAAuBC,CAAvC;AACA2H,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAG35B,2BAA2B,CAACs6B,KAAD,CAAtC;AACAT,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACh7B,EAAd,EAAkB8hC,QAAQ,CAAC,CAAD,CAA1B,CAAd,GAA+CA,QAAQ,CAAC,CAAD,CAAvE;;AACA,YAAI9G,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,IAA0C,KAA9C,EAAqD;AACnDrG,UAAAA,OAAO,CAACE,GAAR,CAAY,qDAAqD,WAArD,GAAmEhB,CAAnE,GAAuE,KAAvE,GAA+EC,CAA/E,GAAmF,iBAAnF,GAAuGgH,QAAnH;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAGuH,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BvH,CAAC,GAAG,EAAEuH,EAAhC,EAAoC;AAClC,WAAKtH,CAAC,GAAGwH,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BxH,CAAC,GAAG,EAAEwH,EAAhC,EAAoC;AAClC3G,QAAAA,OAAO,CAACE,GAAR,CAAY,4BAA4B,WAA5B,GAA0ChB,CAA1C,GAA8C,GAA9C,GAAoDC,CAApD,GAAwD,IAApE;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACwE,GAAL,CAASD,QAAT,CAAR;AACAuC,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;AACAV,QAAAA,gBAAgB,GAAGD,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAzC;AACAE,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwE,GAAL,CAASuC,gBAAT,CAA9B;;AACA,YAAI/G,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAAtC,EAA6C;AAC3CrG,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB,WAAzB,GAAuChB,CAAvC,GAA2C,GAA3C,GAAiDC,CAAjD,GAAqD,iBAArD,GAAyEgH,QAArF;AACD;AACF;AACF,KAlMqB,CAmM1B;;;AACI,SAAKjH,CAAC,GAAG2H,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B3H,CAAC,GAAG,EAAE2H,EAAhC,EAAoC;AAClC,WAAK1H,CAAC,GAAG6H,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0B7H,CAAC,GAAG,EAAE6H,EAAhC,EAAoC;AAClChH,QAAAA,OAAO,CAACE,GAAR,CAAY,0CAA0C,WAA1C,GAAwDhB,CAAxD,GAA4D,GAA5D,GAAkEC,CAAlE,GAAsE,IAAlF;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACwE,GAAL,CAASD,QAAT,CAAhB;AACAkD,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;;AACA,YAAIX,QAAQ,IAAI,IAAhB,EAAsB;AACpBnG,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC,WAAvC,GAAqDhB,CAArD,GAAyD,GAAzD,GAA+DC,CAA/D,GAAmE,4BAA/E;AACD;;AACDiH,QAAAA,gBAAgB,GAAGD,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAzC;AACAE,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwE,GAAL,CAASuC,gBAAT,CAA9B;AACAzD,QAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,CAAR;;AACA,YAAI1D,KAAK,GAAG,KAAZ,EAAmB;AACjB3C,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC,WAAvC,GAAqDhB,CAArD,GAAyD,GAAzD,GAA+DC,CAA/D,GAAmE,iBAAnE,GAAuFgH,QAAvF,GAAkG,UAAlG,GAA+GxD,KAA3H;AACD;AACF;AACF,KArNqB,CAsN1B;;;AACI,SAAKzD,CAAC,GAAGgI,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BhI,CAAC,GAAG,EAAEgI,EAAhC,EAAoC;AAClC,WAAK/H,CAAC,GAAGyF,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,CAAvB,EAA0BzF,CAAC,GAAG,EAAEyF,EAAhC,EAAoC;AAClC5E,QAAAA,OAAO,CAACE,GAAR,CAAY,0CAA0C,WAA1C,GAAwDhB,CAAxD,GAA4D,GAA5D,GAAkEC,CAAlE,GAAsE,IAAlF;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACwE,GAAL,CAASD,QAAT,CAAhB;AACAkD,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR;AACAhB,QAAAA,QAAQ,GAAGn6B,SAAS,CAAC86B,KAAD,CAApB;;AACA,YAAIX,QAAQ,IAAI,IAAhB,EAAsB;AACpBnG,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC,WAAvC,GAAqDhB,CAArD,GAAyD,GAAzD,GAA+DC,CAA/D,GAAmE,4BAA/E;AACD;;AACDiH,QAAAA,gBAAgB,GAAGD,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAzC;AACAE,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwE,GAAL,CAASuC,gBAAT,CAA9B;AACAzD,QAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,CAAR;;AACA,YAAI1D,KAAK,GAAG,KAAZ,EAAmB;AACjB3C,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuC,WAAvC,GAAqDhB,CAArD,GAAyD,GAAzD,GAA+DC,CAA/D,GAAmE,iBAAnE,GAAuFgH,QAAvF,GAAkG,UAAlG,GAA+GxD,KAA3H;AACD;AACF;AACF;;AACDmE,IAAAA,KAAK,GAAG,CAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,GAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,IAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,0BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,KAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,2BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,MAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,4BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,CAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,GAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,IAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,0BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,KAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,2BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,MAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,4BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,OAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,6BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAU,CAAV,CAAR;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,mBAA5B,EAAiD;AAC/C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,kCAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,IAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,mBAA5B,EAAiD;AAC/C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,0BAAZ;AACD,KA5RqB,CA6RtB;AACA;;;AACA4G,IAAAA,KAAK,GAAG,GAAR;;AACA,QAAI16B,cAAc,CAAC06B,KAAD,CAAd,CAAsB,CAAtB,MAA6B,mBAAjC,EAAsD;AACpD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,0BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,GAAR;;AACA,QAAI76B,UAAU,CAAC66B,KAAD,CAAV,CAAkB,CAAlB,MAAyB,kBAA7B,EAAiD;AAC/C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,sBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,IAAR;;AACA,QAAI76B,UAAU,CAAC66B,KAAD,CAAV,CAAkB,CAAlB,MAAyB,kBAA7B,EAAiD;AAC/C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,GAAR;;AACA,QAAI76B,UAAU,CAAC66B,KAAD,CAAV,CAAkB,CAAlB,MAAyB,kBAA7B,EAAiD;AAC/C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,sBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,IAAR;;AACA,QAAI76B,UAAU,CAAC66B,KAAD,CAAV,CAAkB,CAAlB,MAAyB,kBAA7B,EAAiD;AAC/C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,IAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,kBAA5B,EAAgD;AAC9C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,sBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,KAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,kBAA5B,EAAgD;AAC9C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,GAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,kBAA5B,EAAgD;AAC9C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,qBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,IAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,kBAA5B,EAAgD;AAC9C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,sBAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAU,CAAV,CAAR;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,mBAA5B,EAAiD;AAC/C9G,MAAAA,OAAO,CAACE,GAAR,CAAY,kCAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,MAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B9G,MAAAA,OAAO,CAACE,GAAR,CAAY,4BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,QAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,qBAA5B,EAAmD;AACjD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,8BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,QAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,sBAA5B,EAAoD;AAClD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,8BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,QAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,uBAA5B,EAAqD;AACnD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,8BAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,iBAAR;;AACA,QAAI96B,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,4BAA5B,EAA0D;AACxD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,uCAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAU,CAAV,CAAR;;AACA,QAAI1yB,mBAAmB,CAACk6B,KAAD,CAAnB,CAA2B,CAA3B,MAAkC,qBAAtC,EAA6D;AAC3D9G,MAAAA,OAAO,CAACE,GAAR,CAAY,wCAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAU,CAAV,CAAR;;AACA,QAAI1yB,mBAAmB,CAACk6B,KAAD,CAAnB,CAA2B,CAA3B,MAAkC,qBAAtC,EAA6D;AAC3D9G,MAAAA,OAAO,CAACE,GAAR,CAAY,wCAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,CAACzH,IAAI,CAACC,IAAL,CAAU,CAAV,IAAeD,IAAI,CAACC,IAAL,CAAU,CAAV,CAAhB,IAAgC,CAAxC;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,sBAA5B,EAAoD;AAClD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,qDAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAU,IAAID,IAAI,CAACC,IAAL,CAAU,CAAV,CAAd,IAA8B,CAAtC;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,qBAA5B,EAAmD;AACjD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,mDAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,CAACzH,IAAI,CAACC,IAAL,CAAU,CAAV,IAAeD,IAAI,CAACC,IAAL,CAAU,CAAV,CAAhB,IAAgC,CAAxC;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,sBAA5B,EAAoD;AAClD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,qDAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAU,IAAID,IAAI,CAACC,IAAL,CAAU,CAAV,CAAd,IAA8B,CAAtC;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,sBAA5B,EAAoD;AAClD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,mDAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,CAACzH,IAAI,CAACC,IAAL,CAAU,CAAV,IAAe,CAAhB,IAAqB,CAA7B;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,sBAA5B,EAAoD;AAClD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,0CAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAGzH,IAAI,CAACC,IAAL,CAAU,KAAK,IAAID,IAAI,CAACC,IAAL,CAAU,CAAV,CAAnB,IAAmC,CAA3C;;AACA,QAAItzB,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,qBAA5B,EAAmD;AACjD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,sDAAZ;AACD,KA1XqB,CA2XtB;;;AACA4G,IAAAA,KAAK,GAAGzH,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACh7B,EAAL,GAAU,CAAnB,CAAR;;AACA,QAAI2H,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,qBAA5B,EAAmD;AACjD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,yCAAZ;AACD,KA/XqB,CAgYtB;;;AACA4G,IAAAA,KAAK,GAAGzH,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACh7B,EAAL,GAAU,CAAnB,CAAR;;AACA,QAAI2H,SAAS,CAAC86B,KAAD,CAAT,CAAiB,CAAjB,MAAwB,qBAA5B,EAAmD;AACjD9G,MAAAA,OAAO,CAACE,GAAR,CAAY,yCAAZ;AACD;;AACD4G,IAAAA,KAAK,GAAG,UAAR;;AACA,QAAIt6B,2BAA2B,CAACs6B,KAAD,CAA3B,CAAmC,CAAnC,MAA0C,qBAA9C,EAAqE;AACnE9G,MAAAA,OAAO,CAACE,GAAR,CAAY,8CAAZ;AACD;;AACD,SAAKhB,CAAC,GAAG4F,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2B5F,CAAC,GAAG,EAAE4F,EAAjC,EAAqC;AACnC,WAAK3F,CAAC,GAAG4F,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2B5F,CAAC,GAAG,EAAE4F,EAAjC,EAAqC;AACnC/E,QAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkC,WAAlC,GAAgDhB,CAAhD,GAAoD,GAApD,GAA0DC,CAA1D,GAA8D,SAA1E;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2H,QAAAA,KAAK,GAAGzH,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACh7B,EAAL,GAAUu/B,QAAnB,CAAR,CAHmC,CAInC;AACA;AACA;;AACAuC,QAAAA,QAAQ,GAAGv5B,mBAAmB,CAACk6B,KAAD,CAA9B;AACAV,QAAAA,gBAAgB,GAAGD,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAzC;AACAE,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACh7B,EAAL,GAAU+hC,gBAAnB,CAA9B;;AACA,YAAI/G,IAAI,CAACr0B,GAAL,CAAS87B,KAAK,GAAGT,aAAjB,IAAkC,KAAtC,EAA6C;AAC3CrG,UAAAA,OAAO,CAACE,GAAR,CAAY,+BAA+B,WAA/B,GAA6ChB,CAA7C,GAAiD,GAAjD,GAAuDC,CAAvD,GAA2D,sBAA3D,GAAoFgH,QAAhG;AACD;AACF;AACF;;AACD,SAAKjH,CAAC,GAAG+F,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2B/F,CAAC,GAAG,EAAE+F,EAAjC,EAAqC;AACnC,WAAK9F,CAAC,GAAGsG,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAI,EAAvB,EAA2BtG,CAAC,GAAG,EAAEsG,EAAjC,EAAqC;AACnC;AACA;AACA;AACA;AACA,YAAIvG,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,EAAjB,IAAuBD,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,EAA5C,EAAgD;AAC9C;AACD;;AACDa,QAAAA,OAAO,CAACE,GAAR,CAAY,gDAAgD,WAAhD,GAA8DhB,CAA9D,GAAkE,GAAlE,GAAwEC,CAAxE,GAA4E,SAAxF;AACAyE,QAAAA,QAAQ,GAAG1E,CAAC,GAAGC,CAAf;AACA2G,QAAAA,aAAa,GAAGzG,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACh7B,EAAL,GAAUu/B,QAAnB,CAAhB;AACAkD,QAAAA,KAAK,GAAGhB,aAAa,CAACqB,OAAd,CAAsB,CAAtB,CAAR,CAXmC,CAYnC;AACA;AACA;;AACAhB,QAAAA,QAAQ,GAAGv5B,mBAAmB,CAACk6B,KAAD,CAA9B;AACAV,QAAAA,gBAAgB,GAAGD,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAzC;AACAE,QAAAA,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,GAAc9G,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACh7B,EAAL,GAAU+hC,gBAAnB,CAA9B;AACAzD,QAAAA,KAAK,GAAGtD,IAAI,CAACr0B,GAAL,CAAS86B,aAAa,GAAGO,aAAzB,CAAR;;AACA,YAAI1D,KAAK,GAAG,KAAZ,EAAmB;AACjB3C,UAAAA,OAAO,CAACE,GAAR,CAAY,6CAA6C,WAA7C,GAA2DhB,CAA3D,GAA+D,GAA/D,GAAqEC,CAArE,GAAyE,sBAAzE,GAAkGgH,QAAlG,GAA6G,UAA7G,GAA0HxD,KAAtI;AACD;AACF;AACF;;AACD,WAAO3C,OAAO,CAACE,GAAR,CAAY,iBAAZ,CAAP;AACD,GAnbD;;AAqbAzuC,EAAAA,CAAC,CAAC2a,cAAF,GAAmBA,cAAnB;AAEA3a,EAAAA,CAAC,CAAC6a,qBAAF,GAA0BA,qBAA1B;AAEA7a,EAAAA,CAAC,CAACua,SAAF,GAAcA,SAAd;AAEAva,EAAAA,CAAC,CAAC4nC,UAAF,GAAeA,UAAf;;AAEA7hC,EAAAA,WAAW,GAAG,uBAAW;AACvB+5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOuW,MAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAI4wB,CAAJ,EAAOgJ,KAAP,EAAcvI,CAAd;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,CAAC,GAAG,GAAJ;AACAnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAClkC,GAAD,CAAtB,EAA6B;AAC3Bm9B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjR,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2b,MAAAA,KAAK,GAAG,CAAR;AACAhJ,MAAAA,CAAC,GAAGiB,IAAI,CAACgI,IAAL,CAAU5b,EAAE,CAAC2S,CAAb,CAAJ;;AACA,UAAIgJ,KAAJ,EAAW;AACTtP,QAAAA,IAAI,CAAC,wDAAD,CAAJ;AACD;;AACDpG,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA5K,MAAAA,OAAO;AACP;AACD,KApBiB,CAqBlB;AACA;;;AACA,QAAKrP,gBAAgB,CAACsH,EAAD,CAAjB,IAA2Bxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgC8W,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,EAAe,CAAf,EAAkB,CAAlB,CAAtC,IAA8Dxb,GAAG,CAACA,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAH,KAA2B6M,MAAM,CAAC/zB,KAAD,CAA/F,IAA0GsV,MAAM,CAAC5J,GAAG,CAACU,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAA8B,CAA9B,CAAhH,IAAoJ3R,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAAmC,CAAnC,EAAsC,CAAtC,CAAzL,EAAoO;AAClO,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAX,CAAX;AACD,OAFD,MAEO;AACL0tB,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,QAAAA,QAAQ;AACT;;AACD0K,MAAAA,OAAO;AACP;AACD,KAjCiB,CAkClB;AACA;;;AACA,QAAKhQ,qBAAqB,CAACiI,EAAD,CAAtB,IAAgCxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgC8W,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,EAAe,CAAC,CAAhB,EAAmB,CAAnB,CAAtC,IAA+Dxb,GAAG,CAACA,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAH,KAA2B6M,MAAM,CAAC/zB,KAAD,CAAhG,IAA2GsV,MAAM,CAAC5J,GAAG,CAACU,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAA8B,CAA9B,CAAjH,IAAqJ3R,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAAmC,CAAnC,EAAsC,CAAtC,CAA/L,EAA0O;AACxO,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAV,GAAgB,GAAjB,CAAX;AACD,OAFD,MAEO;AACL0tB,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,QAAAA,QAAQ;AACT;;AACD0K,MAAAA,OAAO;AACP;AACD,KA9CiB,CA+ClB;;;AACA,QAAInO,kBAAkB,CAACoG,EAAD,CAAtB,EAA4B;AAC1B,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAX,CAAX;AACD,OAFD,MAEO;AACL0tB,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,QAAAA,QAAQ;AACT;;AACD0K,MAAAA,OAAO;AACP;AACD,KA1DiB,CA2DlB;;;AACA,QAAI9P,uBAAuB,CAAC+H,EAAD,CAA3B,EAAiC;AAC/B,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,MAAM2N,IAAI,CAACh7B,EAAX,GAAgB,GAAjB,CAAX;AACD,OAFD,MAEO;AACL0tB,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,QAAAA,QAAQ;AACT;;AACD0K,MAAAA,OAAO;AACP;AACD;;AACD,QAAI,CAACtO,UAAU,CAACuG,EAAD,CAAf,EAAqB;AACnBuG,MAAAA,WAAW,CAACjgC,MAAD,CAAX;AACAw/B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,IAAAA,QAAQ;AACR+V,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,YAAQ4R,CAAR;AACE,WAAK,CAAC,CAAN;AACE,YAAI3kB,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,SAFD,MAEO;AACL2tB,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACD;;AACF,WAAK,CAAC,CAAN;AACE,YAAI6V,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAV,GAAgB,GAAjB,CAAX;AACD,SAFD,MAEO;AACL0tB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,UAAAA,QAAQ;AACT;;AACD;;AACF,WAAK,CAAL;AACE,YAAI5O,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAX,CAAX;AACD,SAFD,MAEO;AACL0tB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,UAAAA,QAAQ;AACT;;AACD;;AACF,WAAK,CAAL;AACE,YAAI5O,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAX,CAAX;AACD,SAFD,MAEO;AACL0tB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,UAAAA,QAAQ;AACT;;AACD;;AACF,WAAK,CAAL;AACE,YAAI5O,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD,SAFD,MAEO;AACLH,UAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD;;AACF;AACExL,QAAAA,WAAW,CAACjgC,MAAD,CAAX;AACAw/B,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,QAAAA,IAAI,CAAC,CAAD,CAAJ;AA7CJ;;AA+CA,WAAO8M,OAAO,EAAd;AACD,GAlID;;AAoIA/7B,EAAAA,YAAY,GAAG,wBAAW;AACxB85B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOwW,OAAO,EAAd;AACD,GAJD;;AAMAA,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAI2wB,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACAnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACjkC,IAAD,CAAtB,EAA8B;AAC5Bk9B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjR,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAG3S,EAAE,CAAC2S,CAAP;;AACA,UAAIA,CAAC,GAAG,GAAR,EAAa;AACXtG,QAAAA,IAAI,CAAC,4CAAD,CAAJ;AACD;;AACDsG,MAAAA,CAAC,GAAGiB,IAAI,CAACa,GAAL,CAAS9B,CAAC,GAAGiB,IAAI,CAACC,IAAL,CAAUlB,CAAC,GAAGA,CAAJ,GAAQ,GAAlB,CAAb,CAAJ;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA5K,MAAAA,OAAO;AACP;AACD;;AACD,QAAInP,SAAS,CAACoH,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACDxB,IAAAA,WAAW,CAAChgC,OAAD,CAAX;AACAu/B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACA,WAAO8M,OAAO,EAAd;AACD,GA7BD;;AA+BA97B,EAAAA,WAAW,GAAG,uBAAW;AACvB65B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOyW,MAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAI0wB,CAAJ,EAAOgJ,KAAP,EAAcvI,CAAd;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,CAAC,GAAG,CAAJ;AACAnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAChyB,GAAD,CAAtB,EAA6B;AAC3BirB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjR,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2b,MAAAA,KAAK,GAAG,CAAR;AACAhJ,MAAAA,CAAC,GAAGiB,IAAI,CAACiI,IAAL,CAAU7b,EAAE,CAAC2S,CAAb,CAAJ;;AACA,UAAIgJ,KAAJ,EAAW;AACTtP,QAAAA,IAAI,CAAC,wDAAD,CAAJ;AACD;;AACDpG,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA5K,MAAAA,OAAO;AACP;AACD,KApBiB,CAqBlB;AACA;;;AACA,QAAKrP,gBAAgB,CAACsH,EAAD,CAAjB,IAA2Bxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgC8W,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,EAAe,CAAf,EAAkB,CAAlB,CAAtC,IAA8Dxb,GAAG,CAACA,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAH,KAA2B6M,MAAM,CAAC/zB,KAAD,CAA/F,IAA0GsV,MAAM,CAAC5J,GAAG,CAACU,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAA8B,CAA9B,CAAhH,IAAoJ3R,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAAmC,CAAnC,EAAsC,CAAtC,CAAzL,EAAoO;AAClOsG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,MAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,MAAAA,QAAQ;AACR0K,MAAAA,OAAO;AACP;AACD,KA7BiB,CA8BlB;AACA;;;AACA,QAAKhQ,qBAAqB,CAACiI,EAAD,CAAtB,IAAgCxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgC8W,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,EAAe,CAAC,CAAhB,EAAmB,CAAnB,CAAtC,IAA+Dxb,GAAG,CAACA,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAH,KAA2B6M,MAAM,CAAC/zB,KAAD,CAAhG,IAA2GsV,MAAM,CAAC5J,GAAG,CAACU,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAA8B,CAA9B,CAAjH,IAAqJ3R,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAAmC,CAAnC,EAAsC,CAAtC,CAA/L,EAA0O;AACxO,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,CAAC2N,IAAI,CAACh7B,EAAN,GAAW,GAAZ,CAAX;AACD,OAFD,MAEO;AACL0tB,QAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAC,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,QAAAA,QAAQ;AACT;;AACD0K,MAAAA,OAAO;AACP;AACD,KA1CiB,CA2ClB;;;AACA,QAAInO,kBAAkB,CAACoG,EAAD,CAAtB,EAA4B;AAC1B,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAX,CAAX;AACD,OAFD,MAEO;AACL0tB,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,QAAAA,QAAQ;AACT;;AACD0K,MAAAA,OAAO;AACP;AACD,KAtDiB,CAuDlB;;;AACA,QAAI9P,uBAAuB,CAAC+H,EAAD,CAA3B,EAAiC;AAC/B,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,CAAC2N,IAAI,CAACh7B,EAAN,GAAW,GAAZ,CAAX;AACD,OAFD,MAEO;AACL0tB,QAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAC,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,QAAAA,QAAQ;AACT;;AACD0K,MAAAA,OAAO;AACP;AACD;;AACD,QAAI,CAACtO,UAAU,CAACuG,EAAD,CAAf,EAAqB;AACnBuG,MAAAA,WAAW,CAAC//B,MAAD,CAAX;AACAs/B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,IAAAA,QAAQ;AACR+V,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,YAAQ4R,CAAR;AACE,WAAK,CAAC,CAAN;AACE,YAAI3kB,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC,CAAC2N,IAAI,CAACh7B,EAAN,GAAW,GAAZ,CAAX;AACD,SAFD,MAEO;AACL0tB,UAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAC,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,UAAAA,QAAQ;AACT;;AACD;;AACF,WAAK,CAAC,CAAN;AACE,YAAI5O,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC,CAAC2N,IAAI,CAACh7B,EAAN,GAAW,GAAZ,CAAX;AACD,SAFD,MAEO;AACL0tB,UAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAC,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,UAAAA,QAAQ;AACT;;AACD;;AACF,WAAK,CAAL;AACE,YAAI5O,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD,SAFD,MAEO;AACLH,UAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD;;AACF,WAAK,CAAL;AACE,YAAItjB,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAX,CAAX;AACD,SAFD,MAEO;AACL0tB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,UAAAA,QAAQ;AACT;;AACD;;AACF,WAAK,CAAL;AACE,YAAI5O,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAL,GAAU,GAAX,CAAX;AACD,SAFD,MAEO;AACL0tB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAC,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAykB,UAAAA,QAAQ;AACT;;AACD;;AACF;AACEkJ,QAAAA,WAAW,CAAC//B,MAAD,CAAX;AACAs/B,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,QAAAA,IAAI,CAAC,CAAD,CAAJ;AA/CJ;;AAiDA,WAAO8M,OAAO,EAAd;AACD,GAhID;;AAkIA77B,EAAAA,YAAY,GAAG,wBAAW;AACxB45B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO0W,OAAO,EAAd;AACD,GAJD;;AAMAA,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIywB,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACAnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/xB,IAAD,CAAtB,EAA8B;AAC5BgrB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjR,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAG3S,EAAE,CAAC2S,CAAP;AACAA,MAAAA,CAAC,GAAGiB,IAAI,CAACa,GAAL,CAAS9B,CAAC,GAAGiB,IAAI,CAACC,IAAL,CAAUlB,CAAC,GAAGA,CAAJ,GAAQ,GAAlB,CAAb,CAAJ;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA5K,MAAAA,OAAO;AACP;AACD;;AACD,QAAIlS,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACDxB,IAAAA,WAAW,CAAC9/B,OAAD,CAAX;AACAq/B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACA,WAAO8M,OAAO,EAAd;AACD,GA1BD;;AA4BA57B,EAAAA,WAAW,GAAG,uBAAW;AACvB25B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO2W,OAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,OAAM,GAAG,kBAAW;AAClB,QAAIwwB,CAAJ,EAAOgJ,KAAP;AACAhJ,IAAAA,CAAC,GAAG,CAAJ;AACAnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACpwB,GAAD,CAAtB,EAA6B;AAC3BqpB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjR,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2b,MAAAA,KAAK,GAAG,CAAR;AACAhJ,MAAAA,CAAC,GAAGiB,IAAI,CAACkI,IAAL,CAAU9b,EAAE,CAAC2S,CAAb,CAAJ;;AACA,UAAIgJ,KAAJ,EAAW;AACTtP,QAAAA,IAAI,CAAC,uBAAD,CAAJ;AACD;;AACDpG,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA5K,MAAAA,OAAO;AACP;AACD;;AACD,QAAIlS,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACD,QAAI5P,UAAU,CAAC6H,EAAD,CAAd,EAAoB;AAClB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;;AACN5b,MAAAA,OAAM;;AACN4b,MAAAA,MAAM;AACNgK,MAAAA,OAAO;AACP;AACD,KAhCiB,CAiClB;;;AACA,QAAIlzB,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAChyB,GAAD,CAAX,CAAJ,IAAyBhG,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAClkC,GAAD,CAAX,CAAjC,EAAoD;AAClDm9B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAX,MAAAA,UAAS;;AACTY,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA7V,MAAAA,YAAW;;AACX+V,MAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,UAAI7c,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAChyB,GAAD,CAAlB,IAA2B2J,GAAG,CAAC0b,EAAD,CAAH,KAAY2M,MAAM,CAAClkC,GAAD,CAA7C,IAAsDwlB,KAAK,CAAC7J,IAAI,CAAC2b,EAAD,CAAL,EAAW3b,IAAI,CAAC4b,EAAD,CAAf,CAA/D,EAAqF;AACnF4F,QAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;AACA8H,QAAAA,OAAO;AACP;AACD;AACF,KA9CiB,CA+ClB;AACA;;;AACA,QAAKvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BsV,MAAM,CAAC9J,IAAI,CAAC0b,EAAD,CAAL,EAAW,CAAX,CAAnC,IAAoD3R,MAAM,CAAChK,KAAK,CAAC2b,EAAD,CAAN,EAAY,CAAC,CAAb,EAAgB,CAAhB,CAA3D,IAAmFxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgC8W,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,EAAe,CAAf,EAAkB,CAAlB,CAAtC,IAA8Dxb,GAAG,CAACA,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAH,KAA2B6M,MAAM,CAAC/zB,KAAD,CAA/F,IAA0GsV,MAAM,CAAC5J,GAAG,CAACU,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAA8B,CAA9B,CAAhH,IAAoJ3R,MAAM,CAAC7J,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,CAAJ,EAAmC,CAAnC,EAAsC,CAAtC,CAAjP,EAA4R;AAC1RsG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;;AACA,UAAI7X,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACLktB,QAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACDykB,MAAAA,QAAQ;AACR0K,MAAAA,OAAO;AACP;AACD,KA3DiB,CA4DlB;;;AACA,QAAI3Z,MAAM,CAAC4R,EAAD,EAAK,CAAL,CAAV,EAAmB;AACjBsG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;;AACA,UAAI7X,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACLktB,QAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACDykB,MAAAA,QAAQ;AACR0K,MAAAA,OAAO;AACP;AACD,KAvEiB,CAwElB;;;AACA,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BsV,MAAM,CAAC9J,IAAI,CAAC0b,EAAD,CAAL,EAAW,CAAX,CAAnC,IAAoD3R,MAAM,CAAChK,KAAK,CAAC2b,EAAD,CAAN,EAAY,CAAZ,EAAe,CAAf,CAA9D,EAAiF;AAC/EsG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;;AACA,UAAI7X,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACLktB,QAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACDykB,MAAAA,QAAQ;AACR0K,MAAAA,OAAO;AACP;AACD;;AACDxB,IAAAA,WAAW,CAAC7/B,MAAD,CAAX;AACAo/B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACA,WAAO8M,OAAO,EAAd;AACD,GAxFD;;AA0FA37B,EAAAA,YAAY,GAAG,wBAAW;AACxB05B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO4W,OAAO,EAAd;AACD,GAJD;;AAMAA,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIuwB,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACAnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACnwB,IAAD,CAAtB,EAA8B;AAC5BopB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjR,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAG3S,EAAE,CAAC2S,CAAP;;AACA,UAAIA,CAAC,GAAG,CAAC,GAAL,IAAYA,CAAC,GAAG,GAApB,EAAyB;AACvBtG,QAAAA,IAAI,CAAC,yDAAD,CAAJ;AACD;;AACDsG,MAAAA,CAAC,GAAGiB,IAAI,CAACa,GAAL,CAAS,CAAC,MAAM9B,CAAP,KAAa,MAAMA,CAAnB,CAAT,IAAkC,GAAtC;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA5K,MAAAA,OAAO;AACP;AACD;;AACD,QAAIlS,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACDxB,IAAAA,WAAW,CAAC5/B,OAAD,CAAX;AACAm/B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACA,WAAO8M,OAAO,EAAd;AACD,GA7BD;;AA+BA/+B,EAAAA,SAAS,GAAG,KAAZ;;AAEAqD,EAAAA,QAAQ,GAAG,oBAAW;AACpBy5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO8W,GAAG,EAAV;AACD,GAJD;;AAMAA,EAAAA,GAAG,GAAG,eAAW;AACfkmB,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAX,IAAAA,UAAS;;AACT4Q,IAAAA,KAAK;AACLnK,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA7V,IAAAA,YAAW;;AACX8lB,IAAAA,KAAK;AACLvD,IAAAA,QAAQ;AACR,WAAO3E,OAAO,EAAd;AACD,GAXD,CA9wIU,CA2xIV;AACA;;;AACAkI,EAAAA,KAAK,GAAG,iBAAW;AACjBzH,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAFiB,CAGjB;;AACA,QAAI/H,gBAAgB,CAAC0G,EAAD,CAAhB,IAAwBA,EAAE,KAAK6M,MAAM,CAACj0B,EAAD,CAAzC,EAA+C;AAC7C,UAAIke,QAAQ,CAACkJ,EAAD,CAAR,IAAgBvR,kBAApB,EAAwC;AACtCwX,QAAAA,WAAW,CAAC,CAAD,CAAX;AACD,OAFD,MAEO;AACLI,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACD;AACF,KAND,MAMO,IAAIjO,gBAAgB,CAAC4H,EAAD,CAApB,EAA0B;AAC/B,UAAIlJ,QAAQ,CAACkJ,EAAD,CAAR,IAAgBvR,kBAApB,EAAwC;AACtCwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACLktB,QAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACDmlB,MAAAA,MAAM,GANyB,CAOjC;AACA;AACA;AACA;AACC,KAXM,MAWA,IAAIjE,QAAQ,CAACkG,EAAD,CAAZ,EAAkB;AACvBuG,MAAAA,WAAW,CAAC3/B,GAAD,CAAX;AACAk/B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,KAJM,MAIA,IAAIzW,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BsV,MAAM,CAAC9J,IAAI,CAAC0b,EAAD,CAAL,EAAW,CAAC,CAAZ,CAAvC,EAAuD;AAC5D;AACA,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACLktB,QAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACDktB,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA3C,MAAAA,QAAQ;AACT,KATM,MASA,IAAI7Y,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BwL,IAAI,CAAC0b,EAAD,CAAJ,KAAa6M,MAAM,CAACpiC,CAAD,CAApD,EAAyD;AAC9D;AACAq7B,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA5L,MAAAA,IAAI,GAH0D,CAIhE;AACA;AACC,KANM,MAMA,IAAI5P,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6B6f,YAAY,CAACtU,KAAK,CAAC2b,EAAD,CAAN,CAA7C,EAA0D;AAC/D,UAAIh3B,SAAJ,EAAe;AACburC,QAAAA,OAAO,CAACE,GAAR,CAAY,oBAAoBzU,EAAhC;AACD;;AACD,UAAIh3B,SAAJ,EAAe;AACb;AACD;;AACD88B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA1d,MAAAA,GAAG;;AACH,UAAItZ,SAAJ,EAAe;AACburC,QAAAA,OAAO,CAACE,GAAR,CAAY,cAAczI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA/B;AACD;;AACDvI,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA3C,MAAAA,QAAQ;AACT,KAdM,MAcA,IAAI7Y,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AACvC;AACA8uB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACArG,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA1d,QAAAA,GAAG;AACH3C,QAAAA,GAAG;AACHqgB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KAVM,MAUA,IAAIxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAClC;AACA4/B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAuH,MAAAA,KAAI;;AACJvH,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqH,MAAAA,IAAI;AACJpH,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA5L,MAAAA,IAAI;AACJ8L,MAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,UAAIxL,kBAAkB,CAACoK,EAAD,CAAtB,EAA4B;AAC1B,YAAIxR,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,SAFD,MAEO;AACLktB,UAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACD,YAAIuf,UAAU,CAAC+H,EAAD,CAAd,EAAoB;AAClBnC,UAAAA,MAAM;AACP;AACF,OATD,MASO;AACL+H,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhV,QAAAA,MAAM;;AACN9I,QAAAA,OAAM;;AACN,YAAIgW,UAAU,CAAC8H,EAAD,CAAd,EAAoB;AAClB,cAAIxR,kBAAJ,EAAwB;AACtBwX,YAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,WAFD,MAEO;AACL2tB,YAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACD,cAAIuf,UAAU,CAAC+H,EAAD,CAAd,EAAoB;AAClBwM,YAAAA,QAAQ,GADU,CACN;AACb,WAFD,MAEO;AACL/sB,YAAAA,GAAG,GADE,CACE;AACR;AACF;AACF;AACF,KAtCM,MAsCA;AACL,UAAI,CAACkW,kBAAkB,CAAChD,WAAW,CAACga,MAAM,CAAChmC,qBAAD,CAAP,CAAZ,CAAvB,EAAqE;AACnE;AACAw/B,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,OAHD,MAGO;AACL;AACA;AACAE,QAAAA,WAAW,CAAC3/B,GAAD,CAAX;AACAk/B,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;AACF;;AACD,WAAO8M,OAAO,EAAd;AACD,GAnHD,CA7xIU,CAk5IV;;;AACArlB,EAAAA,KAAI,GAAG,gBAAW;AAChB,QAAIwwB,CAAJ,EAAO0B,CAAP,EAAUK,CAAV,EAAanB,CAAb,EAAgBiI,CAAhB,EAAmBC,CAAnB;AACA9I,IAAAA,CAAC,GAAG,CAAJ;AACA0B,IAAAA,CAAC,GAAG,CAAJ;AACAK,IAAAA,CAAC,GAAG,CAAJ;AACAnB,IAAAA,CAAC,GAAG,CAAJ;AACAiI,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACA7sB,IAAAA,SAAS;AACTqZ,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAuT,IAAAA,CAAC,GAAG9b,kBAAkB,CAACkH,EAAD,EAAK6M,MAAM,CAAC1wB,QAAD,CAAX,CAAtB;AACA84B,IAAAA,CAAC,GAAGnc,kBAAkB,CAACkH,EAAD,EAAK6M,MAAM,CAACzwB,QAAD,CAAX,CAAtB;AACA03B,IAAAA,CAAC,GAAGhb,kBAAkB,CAACkH,EAAD,EAAK6M,MAAM,CAACxwB,QAAD,CAAX,CAAtB;AACA0/B,IAAAA,CAAC,GAAGjjB,kBAAkB,CAACkH,EAAD,EAAK6M,MAAM,CAACtwB,QAAD,CAAX,CAAtB;AACAy/B,IAAAA,CAAC,GAAGljB,kBAAkB,CAACkH,EAAD,EAAK6M,MAAM,CAACrwB,QAAD,CAAX,CAAtB;;AACA,QAAIo4B,CAAC,KAAK,CAAN,IAAWK,CAAC,KAAK,CAAjB,IAAsBnB,CAAC,KAAK,CAA5B,IAAiCiI,CAAC,KAAK,CAAvC,IAA4CC,CAAC,KAAK,CAAtD,EAAyD;AACvD/b,MAAAA,EAAE,GAAG4M,MAAM,CAAC1wB,QAAD,CAAX;AACAwG,MAAAA,SAAS;AACV,KAHD,MAGO,IAAIiyB,CAAC,KAAK,CAAN,IAAWK,CAAC,KAAK,CAAjB,IAAsBnB,CAAC,KAAK,CAA5B,IAAiCiI,CAAC,KAAK,CAAvC,IAA4CC,CAAC,KAAK,CAAtD,EAAyD;AAC9D/b,MAAAA,EAAE,GAAG4M,MAAM,CAACzwB,QAAD,CAAX;AACAuG,MAAAA,SAAS;AACV,KAHM,MAGA,IAAIiyB,CAAC,KAAK,CAAN,IAAWK,CAAC,KAAK,CAAjB,IAAsBnB,CAAC,KAAK,CAA5B,IAAiCiI,CAAC,KAAK,CAAvC,IAA4CC,CAAC,KAAK,CAAtD,EAAyD;AAC9D/b,MAAAA,EAAE,GAAG4M,MAAM,CAACxwB,QAAD,CAAX;AACAsG,MAAAA,SAAS;AACV,KAHM,MAGA,IAAIiyB,CAAC,KAAK,CAAN,IAAWK,CAAC,KAAK,CAAjB,IAAsBnB,CAAC,KAAK,CAA5B,IAAiCiI,CAAC,KAAK,CAAvC,IAA4CC,CAAC,KAAK,CAAtD,EAAyD;AAC9D/b,MAAAA,EAAE,GAAG4M,MAAM,CAACtwB,QAAD,CAAX;AACAoG,MAAAA,SAAS;AACV,KAHM,MAGA,IAAIiyB,CAAC,KAAK,CAAN,IAAWK,CAAC,KAAK,CAAjB,IAAsBnB,CAAC,KAAK,CAA5B,IAAiCiI,CAAC,KAAK,CAAvC,IAA4CC,CAAC,KAAK,CAAtD,EAAyD;AAC9D/b,MAAAA,EAAE,GAAG4M,MAAM,CAACrwB,QAAD,CAAX;AACAmG,MAAAA,SAAS,GAFqD,CAGhE;AACA;AACA;AACA;AACC,KAPM,MAOA,IAAKgU,MAAM,CAACqJ,EAAD,CAAP,IAAgBxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACn4B,GAAD,CAAtC,EAA6C;AAClDw+B,MAAAA,CAAC,GAAG7E,GAAJ;AACAvI,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACAtd,QAAAA,KAAI;;AACJsd,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACD,KAVM,MAUA;AACLpN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD+H,IAAAA,OAAO;AACP,WAAO5Y,SAAS,EAAhB;AACD,GAlDD;;AAoDAiS,EAAAA,SAAQ,GAAG,oBAAW;AACpB,QAAI8R,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA1K,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvI,kBAAkB,CAACkH,EAAD,EAAKC,EAAL,CAAtB,EAAgC;AAC9Btd,MAAAA,SAAS;AACV,KAFD,MAEO,IAAIgU,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACrBkT,MAAAA,CAAC,GAAG7E,GAAJ;AACAvI,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACAmB,QAAAA,SAAQ;;AACRpB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACD,KAXM,MAWA;AACLpN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD,WAAO+H,OAAO,EAAd;AACD,GAvBD;;AAyBAplB,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAI0vB,CAAJ,EAAOa,CAAP,EAAUO,CAAV,EAAab,CAAb,EAAgBQ,CAAhB,EAAmB7T,CAAnB,EAAsBmI,GAAtB;AACAwL,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,CAAJ;AACAQ,IAAAA,CAAC,GAAG,CAAJ,CALqB,CAMrB;;AACAf,IAAAA,CAAC,GAAGhE,GAAJ;AACAuE,IAAAA,CAAC,GAAGlsB,KAAK,CAACuZ,EAAD,EAAKD,EAAL,CAAT;AACAkT,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,SAAKoF,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGkL,CAAC,GAAG,CAAvB,EAA0BrT,CAAC,IAAI,CAA/B,EAAkCkU,CAAC,GAAGlU,CAAC,IAAI,CAAC,CAA5C,EAA+C;AAC7CS,MAAAA,EAAE,GAAGgM,KAAK,CAACqG,CAAC,GAAGoB,CAAL,CAAV;AACA7wB,MAAAA,cAAc,CAAC6wB,CAAD,CAAd;AACD;;AACDL,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;;AACA,QAAIE,CAAC,GAAG,CAAR,EAAW;AACTnY,MAAAA,IAAI,CAACmY,CAAD,CAAJ;AACAtN,MAAAA,IAAI,CAAC+G,MAAM,CAAC3mC,GAAD,CAAP,CAAJ;AACA0mC,MAAAA,IAAI;AACJllB,MAAAA,IAAI;AACL;;AACDsY,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA5E,IAAAA,OAAO,CAAC4R,GAAG,GAAGuE,CAAP,CAAP;AACA,WAAO9M,IAAI,CAAC9F,EAAD,CAAX;AACD,GAxBD,CAh+IU,CA0/IV;AAEA;;;AACApd,EAAAA,cAAc,GAAG,wBAASgwB,CAAT,EAAY;AAC3B,QAAIM,CAAJ,EAAOE,CAAP;AACAF,IAAAA,CAAC,GAAG,CAAJ;AACAE,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIvd,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B;AACD,KAN0B,CAO3B;;;AACA,QAAI4S,CAAC,KAAK,CAAV,EAAa;AACX,UAAIpuB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B85B,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,eAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,UAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,UAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,OAND,MAMO;AACL8F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD;AACD;;AACDkT,IAAAA,CAAC,GAAG7E,GAAJ,CApB2B,CAqB3B;;AACA,QAAI7pB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KAND,MAMO,IAAI,CAAC5R,MAAM,CAAC4R,EAAD,EAAK,CAAL,CAAX,EAAoB;AACzB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD,KA9B0B,CA+B3B;;;AACA,QAAI4S,CAAC,KAAK,CAAV,EAAa;AACX9M,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD,KAFD,MAEO;AACL6F,MAAAA,IAAI,CAAC+G,MAAM,CAAC/zB,KAAD,CAAP,CAAJ;AACAgtB,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAoG,MAAAA,YAAY,CAACuM,CAAD,CAAZ;AACA3X,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACDmY,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;;AACA,QAAIE,CAAC,GAAG,CAAR,EAAW;AACTnY,MAAAA,IAAI,CAACmY,CAAD,CAAJ;AACAtN,MAAAA,IAAI,CAAC+G,MAAM,CAACt1B,QAAD,CAAP,CAAJ;AACAq1B,MAAAA,IAAI;AACJ,aAAOllB,IAAI,EAAX;AACD;AACF,GA/CD;;AAiDApb,EAAAA,YAAY,GAAG,wBAAW;AACxBw5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOqX,OAAO,EAAd;AACD,GAND;;AAQAA,EAAAA,OAAO,GAAG,mBAAW;AACnB2lB,IAAAA,IAAI;AACJ0H,IAAAA,SAAS;AACT,WAAOnI,OAAO,EAAd;AACD,GAJD,CAtjJU,CA4jJV;AACA;AACA;;;AACAmI,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIyC,CAAJ,EAAOS,CAAP;AACAT,IAAAA,CAAC,GAAG,GAAJ;AACAS,IAAAA,CAAC,GAAG,CAAJ;AACAnT,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,IAAAA,CAAC,GAAG5R,WAAW,EAAf,CAPqB,CAQrB;;AACA,QAAI1K,QAAQ,CAACkJ,EAAD,CAAR,IAAgB,CAAC8W,KAAK,CAAC1D,CAAD,CAA1B,EAA+B;AAC7BT,MAAAA,CAAC,GAAGsJ,EAAE,CAAC7I,CAAD,EAAIpT,EAAE,CAAC2S,CAAP,CAAN;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD,KAboB,CAcrB;;;AACA,QAAI9c,kBAAkB,CAACmK,EAAD,CAAlB,IAA0BnK,kBAAkB,CAACoK,EAAD,CAAhD,EAAsD;AACpDoG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,KAlBoB,CAmBrB;;;AACA,QAAIxQ,kBAAkB,CAACmK,EAAD,CAAlB,IAA0B,CAAC8W,KAAK,CAAC1D,CAAD,CAApC,EAAyC;AACvC/M,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,KAvBoB,CAwBrB;;;AACA,QAAIpG,EAAE,CAAC2S,CAAH,KAASx6B,GAAT,IAAgBpB,MAAM,CAACipB,EAAE,CAACuS,CAAH,CAAKF,CAAN,EAAS,CAAT,CAA1B,EAAuC;AACrC;AACA,UAAIt7B,MAAM,CAACipB,EAAE,CAACuS,CAAH,CAAKH,CAAN,EAAS,CAAT,CAAV,EAAuB;AACrB,YAAI5jB,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC,MAAM2N,IAAI,CAACh7B,EAAZ,CAAX;AACD,SAFD,MAEO;AACLytB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAqS,UAAAA,MAAM;AACP;;AACD6a,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/U,QAAAA,MAAM;AACNqb,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACLqE,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAyL,QAAAA,IAAI;AACJpO,QAAAA,QAAQ;AACR;AACD,OAlBoC,CAmBrC;;;AACA,UAAIrmB,MAAM,CAACipB,EAAE,CAACuS,CAAH,CAAKH,CAAN,EAAS,CAAC,CAAV,CAAV,EAAwB;AACtB,YAAI5jB,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAAC,MAAM2N,IAAI,CAACh7B,EAAZ,CAAX;AACD,SAFD,MAEO;AACLytB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,UAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACAqS,UAAAA,MAAM;AACP;;AACD6a,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/U,QAAAA,MAAM;AACNqb,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACLqE,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAhY,QAAAA,MAAM;AACNqV,QAAAA,QAAQ;AACR;AACD,OApCoC,CAqCrC;;;AACAgJ,MAAAA,YAAY,CAAC/uB,KAAK,CAAC2oB,EAAE,CAACuS,CAAH,CAAKH,CAAN,CAAN,CAAZ;AACAnS,MAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAgF,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/U,MAAAA,MAAM;AACN6a,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAwM,MAAAA,QAAQ;AACRrP,MAAAA,QAAQ;AACRyI,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAwM,MAAAA,QAAQ;AACR7pB,MAAAA,OAAO;AACPwa,MAAAA,QAAQ;AACRyI,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAoG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA7C,MAAAA,QAAQ;AACRqP,MAAAA,QAAQ;AACR7pB,MAAAA,OAAO;AACP6pB,MAAAA,QAAQ;AACR;AACD,KAvFoB,CAwFrB;;;AACA,QAAIrU,cAAc,CAAC2H,EAAD,CAAlB,EAAwB;AACtB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN+H,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAwB,MAAAA,KAAK;AACLqE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAlC,MAAAA,MAAM;AACN0D,MAAAA,KAAK;AACLpE,MAAAA,QAAQ;AACRkJ,MAAAA,WAAW,CAACt/B,OAAD,CAAX;AACA6+B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN+H,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACAoC,MAAAA,QAAQ;AACR;AACD;;AACD,QAAIhF,cAAc,CAAC4H,EAAD,CAAlB,EAAwB;AACtBoG,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAwB,MAAAA,KAAK;AACL8E,MAAAA,WAAW,CAACt/B,OAAD,CAAX;AACA6+B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAlC,MAAAA,MAAM;AACN9C,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACAoC,MAAAA,QAAQ;AACR;AACD,KAtHoB,CAuHrB;;;AACAyI,IAAAA,IAAI,CAAC+G,MAAM,CAAC5lC,OAAD,CAAP,CAAJ;AACA6+B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAOhF,IAAI,CAAC,CAAD,CAAX;AACD,GA5HD;;AA8HA1uB,EAAAA,YAAY,GAAG,wBAAW;AACxBu5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOsX,OAAO,EAAd;AACD,GAND;;AAQAA,EAAAA,OAAO,GAAG,mBAAW;AACnB0lB,IAAAA,IAAI;AACJ2H,IAAAA,SAAS;AACT,WAAOpI,OAAO,EAAd;AACD,GAJD,CArsJU,CA2sJV;AACA;;;AACAoI,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIwC,CAAJ,EAAOS,CAAP;AACAT,IAAAA,CAAC,GAAG,GAAJ;AACAS,IAAAA,CAAC,GAAG,CAAJ;AACAnT,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAI1K,QAAQ,CAACkJ,EAAD,CAAR,IAAgB,CAAC8W,KAAK,CAAC1D,CAAD,CAA1B,EAA+B;AAC7BT,MAAAA,CAAC,GAAGuJ,EAAE,CAAC9I,CAAD,EAAIpT,EAAE,CAAC2S,CAAP,CAAN;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAIta,cAAc,CAAC4H,EAAD,CAAlB,EAAwB;AACtBoG,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAwB,MAAAA,KAAK;AACL8E,MAAAA,WAAW,CAACr/B,OAAD,CAAX;AACA4+B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAlC,MAAAA,MAAM;AACN9C,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACAoC,MAAAA,QAAQ;AACR;AACD;;AACDkJ,IAAAA,WAAW,CAACr/B,OAAD,CAAX;AACA4+B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,GA7BD,CA7sJU,CA4uJV;AACA;AACA;;;AACAkB,EAAAA,IAAI,GAAG,cAASkW,CAAT,EAAY;AACjB,WAAOtvB,MAAM,CAACsvB,CAAD,CAAb;AACD,GAFD;;AAIA5c,EAAAA,OAAO,GAAG,iBAAS4c,CAAT,EAAY;AACpB,WAAOA,CAAC,CAAC8J,GAAF,CAAM1E,MAAM,CAAC2E,gBAAb,KAAkC/J,CAAC,CAACgK,GAAF,CAAM5E,MAAM,CAAC6E,gBAAb,CAAzC;AACD,GAFD,CAnvJU,CAuvJV;;;AACAvS,EAAAA,SAAS,GAAG,mBAASsI,CAAT,EAAYC,CAAZ,EAAe;AACzB,QAAID,CAAC,CAAC4B,UAAF,EAAJ,EAAoB;AAClB,UAAI3B,CAAC,GAAG,CAAR,EAAW;AACT,eAAOD,CAAC,CAAChV,QAAF,CAAWta,MAAM,CAAC,CAAC,CAAF,CAAjB,CAAP;AACD;AACF,KAJD,MAIO;AACL;AACA,UAAIuvB,CAAC,GAAG,CAAR,EAAW;AACT,eAAOD,CAAC,CAAChV,QAAF,CAAWta,MAAM,CAAC,CAAC,CAAF,CAAjB,CAAP;AACD;AACF;;AACD,WAAOsvB,CAAP;AACD,GAZD;;AAcA5W,EAAAA,cAAc,GAAG,wBAAS4W,CAAT,EAAYC,CAAZ,EAAe;AAC9B,QAAID,CAAC,CAAC4B,UAAF,EAAJ,EAAoB;AAClB,UAAI3B,CAAC,CAACiK,UAAF,EAAJ,EAAoB;AAClB,eAAOlK,CAAC,CAAChV,QAAF,CAAWta,MAAM,CAAC,CAAC,CAAF,CAAjB,CAAP;AACD;AACF,KAJD,MAIO;AACL;AACA,UAAIuvB,CAAC,CAAC2B,UAAF,EAAJ,EAAoB;AAClB,eAAO5B,CAAC,CAAChV,QAAF,CAAWta,MAAM,CAAC,CAAC,CAAF,CAAjB,CAAP;AACD;AACF;;AACD,WAAOsvB,CAAP;AACD,GAZD;;AAcA7W,EAAAA,YAAY,GAAG,sBAAS6W,CAAT,EAAY;AACzB,QAAIA,CAAC,CAACkK,UAAF,EAAJ,EAAoB;AAClB,aAAOlK,CAAC,CAAChV,QAAF,CAAWta,MAAM,CAAC,CAAC,CAAF,CAAjB,CAAP;AACD;;AACD,WAAOsvB,CAAP;AACD,GALD,CApxJU,CA2xJV;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AAEA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AAEA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEryB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIqyB,CAAJ,EAAOC,CAAP,EAAUkK,SAAV;AACAnK,IAAAA,CAAC,GAAG,GAAJ;AACAC,IAAAA,CAAC,GAAG,GAAJ,CAHuB,CAIvB;;AACA,QAAI7Y,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAV,IAA8B5U,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA5C,EAA8D;AAC5D1H,MAAAA,IAAI;AACJ;AACD;;AACD6B,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvK,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC2S,CAAP;AACD,KAFD,MAEO;AACLN,MAAAA,CAAC,GAAGvqB,0BAA0B,CAACkY,EAAD,CAA9B;AACD;;AACD,QAAIlJ,QAAQ,CAACmJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC0S,CAAP;AACD,KAFD,MAEO;AACLL,MAAAA,CAAC,GAAGxqB,0BAA0B,CAACmY,EAAD,CAA9B;AACD;;AACDuc,IAAAA,SAAS,GAAGnK,CAAC,GAAGC,CAAhB;AACArM,IAAAA,WAAW,CAACuW,SAAD,CAAX;AACA,WAAOzU,OAAO,EAAd;AACD,GAzBD;;AA2BA4E,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAI0F,CAAJ,EAAOC,CAAP;AACAD,IAAAA,CAAC,GAAG,GAAJ;AACAC,IAAAA,CAAC,GAAG,GAAJ;;AACA,QAAI7Y,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAV,IAA8B5U,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA5C,EAA8D;AAC5DoO,MAAAA,IAAI;AACJ;AACD;;AACDjU,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvK,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC2S,CAAP;AACD,KAFD,MAEO;AACLN,MAAAA,CAAC,GAAGvqB,0BAA0B,CAACkY,EAAD,CAA9B;AACD;;AACD,QAAIlJ,QAAQ,CAACmJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC0S,CAAP;AACD,KAFD,MAEO;AACLL,MAAAA,CAAC,GAAGxqB,0BAA0B,CAACmY,EAAD,CAA9B;AACD;;AACDgG,IAAAA,WAAW,CAACoM,CAAC,GAAGC,CAAL,CAAX;AACA,WAAOvK,OAAO,EAAd;AACD,GAvBD;;AAyBAlK,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAIwU,CAAJ,EAAOC,CAAP;AACAD,IAAAA,CAAC,GAAG,GAAJ;AACAC,IAAAA,CAAC,GAAG,GAAJ;;AACA,QAAI7Y,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAV,IAA8B5U,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA5C,EAA8D;AAC5DxH,MAAAA,IAAI;AACJ;AACD;;AACD2B,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvK,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC2S,CAAP;AACD,KAFD,MAEO;AACLN,MAAAA,CAAC,GAAGvqB,0BAA0B,CAACkY,EAAD,CAA9B;AACD;;AACD,QAAIlJ,QAAQ,CAACmJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC0S,CAAP;AACD,KAFD,MAEO;AACLL,MAAAA,CAAC,GAAGxqB,0BAA0B,CAACmY,EAAD,CAA9B;AACD;;AACDgG,IAAAA,WAAW,CAACoM,CAAC,GAAGC,CAAL,CAAX;AACA,WAAOvK,OAAO,EAAd;AACD,GAvBD;;AAyBA7c,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAImnB,CAAJ,EAAOC,CAAP;AACAD,IAAAA,CAAC,GAAG,GAAJ;AACAC,IAAAA,CAAC,GAAG,GAAJ;;AACA,QAAI7Y,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAV,IAA8B5U,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA5C,EAA8D;AAC5DzH,MAAAA,IAAI;AACJ;AACD;;AACD4B,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIxL,kBAAkB,CAACoK,EAAD,CAAtB,EAA4B;AAC1BoM,MAAAA,IAAI,CAAC,gBAAD,CAAJ;AACD;;AACD,QAAIvV,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC2S,CAAP;AACD,KAFD,MAEO;AACLN,MAAAA,CAAC,GAAGvqB,0BAA0B,CAACkY,EAAD,CAA9B;AACD;;AACD,QAAIlJ,QAAQ,CAACmJ,EAAD,CAAZ,EAAkB;AAChBqS,MAAAA,CAAC,GAAGrS,EAAE,CAAC0S,CAAP;AACD,KAFD,MAEO;AACLL,MAAAA,CAAC,GAAGxqB,0BAA0B,CAACmY,EAAD,CAA9B;AACD;;AACDgG,IAAAA,WAAW,CAACoM,CAAC,GAAGC,CAAL,CAAX;AACA,WAAOvK,OAAO,EAAd;AACD,GA1BD;;AA4BA5S,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIkd,CAAJ,EAAOC,CAAP,CADyB,CAEzB;;AACA9J,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIxL,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1BqM,MAAAA,IAAI,CAAC,gBAAD,CAAJ;AACD;;AACD,QAAIvV,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChBiG,MAAAA,WAAW,CAAC,IAAIjG,EAAE,CAAC2S,CAAR,CAAX;AACA5K,MAAAA,OAAO;AACP;AACD;;AACDsK,IAAAA,CAAC,GAAGtvB,MAAM,CAACid,EAAE,CAACwS,CAAH,CAAKH,CAAN,CAAV;AACAC,IAAAA,CAAC,GAAGvvB,MAAM,CAACid,EAAE,CAACwS,CAAH,CAAKF,CAAN,CAAV;AACAA,IAAAA,CAAC,GAAG7W,cAAc,CAAC6W,CAAD,EAAID,CAAJ,CAAlB;AACAA,IAAAA,CAAC,GAAGtI,SAAS,CAACsI,CAAD,EAAI,CAAJ,CAAb;AACArS,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASC,CAAT;AACAtS,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASD,CAAT;AACAvM,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAvBD,CA79JU,CAs/JV;;;AACA5gB,EAAAA,iBAAiB,GAAG,2BAASkrB,CAAT,EAAYC,CAAZ,EAAe;AACjC,QAAIoK,EAAJ,EAAQC,EAAR,EAAY1H,CAAZ;AACAA,IAAAA,CAAC,GAAG,CAAJ,CAFiC,CAGjC;;AACAyH,IAAAA,EAAE,GAAGrgB,IAAI,CAACgW,CAAC,CAACG,CAAF,CAAIH,CAAL,EAAQC,CAAC,CAACE,CAAF,CAAIF,CAAZ,CAAT;AACAqK,IAAAA,EAAE,GAAGtgB,IAAI,CAACgW,CAAC,CAACG,CAAF,CAAIF,CAAL,EAAQA,CAAC,CAACE,CAAF,CAAIH,CAAZ,CAAT;AACA4C,IAAAA,CAAC,GAAGrZ,IAAI,CAAC8gB,EAAD,EAAKC,EAAL,CAAR;AACA,WAAO1H,CAAP;AACD,GARD,CAv/JU,CAigKV;;;AACA/tB,EAAAA,eAAe,GAAG,yBAASmrB,CAAT,EAAYC,CAAZ,EAAe;AAC/B,QAAIwB,CAAJ,EAAOiI,CAAP;AACAjI,IAAAA,CAAC,GAAG,GAAJ;AACAiI,IAAAA,CAAC,GAAG,GAAJ;;AACA,QAAItiB,UAAU,CAAC4Y,CAAD,CAAV,IAAiB5Y,UAAU,CAAC6Y,CAAD,CAA/B,EAAoC;AAClC,aAAOnrB,iBAAiB,CAACkrB,CAAD,EAAIC,CAAJ,CAAxB;AACD;;AACD,QAAIxb,QAAQ,CAACub,CAAD,CAAZ,EAAiB;AACfyB,MAAAA,CAAC,GAAGzB,CAAC,CAACM,CAAN;AACD,KAFD,MAEO;AACLmB,MAAAA,CAAC,GAAGhsB,0BAA0B,CAACuqB,CAAD,CAA9B;AACD;;AACD,QAAIvb,QAAQ,CAACwb,CAAD,CAAZ,EAAiB;AACfyJ,MAAAA,CAAC,GAAGzJ,CAAC,CAACK,CAAN;AACD,KAFD,MAEO;AACLoJ,MAAAA,CAAC,GAAGj0B,0BAA0B,CAACwqB,CAAD,CAA9B;AACD;;AACD,QAAIwB,CAAC,GAAGiI,CAAR,EAAW;AACT,aAAO,CAAC,CAAR;AACD;;AACD,QAAIjI,CAAC,GAAGiI,CAAR,EAAW;AACT,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAxBD;;AA0BA7d,EAAAA,aAAa,GAAG,yBAAW;AACzBsK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIxL,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,YAAQ/H,EAAE,CAAC4S,CAAX;AACE,WAAKx6B,GAAL;AACE6nB,QAAAA,EAAE,GAAG,IAAI/hB,CAAJ,EAAL;AACA+hB,QAAAA,EAAE,CAAC2S,CAAH,GAAOx6B,GAAP;AACA6nB,QAAAA,EAAE,CAACuS,CAAH,CAAKH,CAAL,GAAStvB,MAAM,CAACid,EAAE,CAACwS,CAAH,CAAKH,CAAL,CAAOhV,QAAP,CAAgBta,MAAM,CAAC65B,QAAvB,CAAD,CAAf;AACA3c,QAAAA,EAAE,CAACuS,CAAH,CAAKF,CAAL,GAASvvB,MAAM,CAACid,EAAE,CAACwS,CAAH,CAAKF,CAAN,CAAf;AACAxM,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA;;AACF,WAAK51B,MAAL;AACE47B,QAAAA,WAAW,CAAC,CAACjG,EAAE,CAAC2S,CAAL,CAAX;AACA;;AACF;AACEtG,QAAAA,IAAI,CAAC,gCAAD,CAAJ;AAZJ;;AAcA,WAAOtE,OAAO,EAAd;AACD,GAvBD;;AAyBA1kB,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIgvB,CAAJ,CAD2B,CAE3B;;AACA7J,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAgR,IAAAA,CAAC,GAAGvW,IAAI,CAACkE,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASrS,EAAE,CAACwS,CAAH,CAAKF,CAAd,CAAR;AACAtS,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASA,CAAT;AACArS,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASvvB,MAAM,CAAC,CAAD,CAAf;AACA+iB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAZD;;AAcAnL,EAAAA,YAAY,GAAG,wBAAW;AACxB4L,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,CAAC4S,CAAH,KAASx6B,GAAb,EAAkB;AAChB0tB,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAuI,MAAAA,OAAO;AACP;AACD;;AACD9H,IAAAA,EAAE,GAAG,IAAI/hB,CAAJ,EAAL;AACA+hB,IAAAA,EAAE,CAAC2S,CAAH,GAAOx6B,GAAP;AACA6nB,IAAAA,EAAE,CAACuS,CAAH,CAAKH,CAAL,GAAStvB,MAAM,CAACid,EAAE,CAACwS,CAAH,CAAKH,CAAN,CAAf;AACApS,IAAAA,EAAE,CAACuS,CAAH,CAAKF,CAAL,GAASvvB,MAAM,CAAC,CAAD,CAAf;AACA+iB,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAdD;;AAgBApL,EAAAA,cAAc,GAAG,0BAAW;AAC1B6L,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,CAAC4S,CAAH,KAASx6B,GAAb,EAAkB;AAChB0tB,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAuI,MAAAA,OAAO;AACP;AACD;;AACD9H,IAAAA,EAAE,GAAG,IAAI/hB,CAAJ,EAAL;AACA+hB,IAAAA,EAAE,CAAC2S,CAAH,GAAOx6B,GAAP;AACA6nB,IAAAA,EAAE,CAACuS,CAAH,CAAKH,CAAL,GAAStvB,MAAM,CAACid,EAAE,CAACwS,CAAH,CAAKF,CAAN,CAAf;AACArS,IAAAA,EAAE,CAACuS,CAAH,CAAKF,CAAL,GAASvvB,MAAM,CAAC,CAAD,CAAf;AACA+iB,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAdD,CAnlKU,CAmmKV;;;AACA7kB,EAAAA,mBAAmB,GAAG,6BAAS25B,IAAT,EAAe;AACnC,QAAIxK,CAAJ,EAAOC,CAAP,EAAU2C,CAAV,CADmC,CAEnC;;AACAzM,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAgR,IAAAA,CAAC,GAAGvV,IAAI,CAACkD,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASuB,IAAI,CAACr0B,GAAL,CAASs9B,IAAT,CAAT,CAAR;AACAvK,IAAAA,CAAC,GAAGxV,IAAI,CAACkD,EAAE,CAACwS,CAAH,CAAKF,CAAN,EAASsB,IAAI,CAACr0B,GAAL,CAASs9B,IAAT,CAAT,CAAR;;AACA,QAAIA,IAAI,GAAG,CAAX,EAAc;AACZ;AACA5H,MAAAA,CAAC,GAAG5C,CAAJ;AACAA,MAAAA,CAAC,GAAGC,CAAJ;AACAA,MAAAA,CAAC,GAAG2C,CAAJ;AACA5C,MAAAA,CAAC,GAAG5W,cAAc,CAAC4W,CAAD,EAAIC,CAAJ,CAAlB;AACAA,MAAAA,CAAC,GAAGvI,SAAS,CAACuI,CAAD,EAAI,CAAJ,CAAb;AACD;;AACDtS,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASA,CAAT;AACArS,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASA,CAAT;AACAxM,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GArBD,CApmKU,CA2nKV;;;AACAlgB,EAAAA,wBAAwB,GAAG,kCAASksB,CAAT,EAAY;AACrC,WAAOA,CAAC,CAAC+I,UAAF,EAAP;AACD,GAFD,CA5nKU,CAgoKV;;;AACAh1B,EAAAA,0BAA0B,GAAG,oCAASisB,CAAT,EAAY;AACvC,QAAIgJ,oBAAJ,EAA0BvF,MAA1B;;AACA,QAAIzD,CAAC,CAACvB,CAAF,IAAO,IAAX,EAAiB;AACf;AACD;;AACDuK,IAAAA,oBAAoB,GAAGhJ,CAAC,CAACvB,CAAF,CAAIH,CAAJ,CAAM2K,MAAN,CAAajJ,CAAC,CAACvB,CAAF,CAAIF,CAAjB,CAAvB;AACAkF,IAAAA,MAAM,GAAGuF,oBAAoB,CAACE,QAArB,GAAgCF,oBAAoB,CAACG,SAArB,GAAiCnJ,CAAC,CAACvB,CAAF,CAAIF,CAAJ,CAAMwK,UAAN,EAA1E;AACA,WAAOtF,MAAP;AACD,GARD,CAjoKU,CA2oKV;;;AACArZ,EAAAA,WAAW,GAAG,qBAASiV,CAAT,EAAY;AACxB,QAAI+J,aAAJ;AACAA,IAAAA,aAAa,GAAG,IAAIj/B,CAAJ,EAAhB;AACAi/B,IAAAA,aAAa,CAACvK,CAAd,GAAkBx6B,GAAlB;AACA+kC,IAAAA,aAAa,CAAC3K,CAAd,CAAgBH,CAAhB,GAAoBtvB,MAAM,CAACqwB,CAAD,CAA1B;AACA+J,IAAAA,aAAa,CAAC3K,CAAd,CAAgBF,CAAhB,GAAoBvvB,MAAM,CAAC,CAAD,CAA1B;AACA,WAAOo6B,aAAP;AACD,GAPD,CA5oKU,CAqpKV;;;AACA9W,EAAAA,YAAY,GAAG,sBAAS+M,CAAT,EAAY;AACzB,QAAItqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,qBAAqBrB,CAAjC;AACD;;AACD,WAAOtN,IAAI,CAAC3H,WAAW,CAACiV,CAAD,CAAZ,CAAX;AACD,GALD,CAtpKU,CA6pKV;;;AACAnN,EAAAA,WAAW,GAAG,qBAAS0M,CAAT,EAAY;AACxBnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOvoC,MAAP;AACA21B,IAAAA,EAAE,CAAC2S,CAAH,GAAOA,CAAP;AACA7M,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAPD,CA9pKU,CAuqKV;;;AACAzB,EAAAA,aAAa,GAAG,uBAAS+L,CAAT,EAAYC,CAAZ,EAAe;AAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,QAAIyB,CAAJ;AACAA,IAAAA,CAAC,GAAG,IAAI71B,CAAJ,EAAJ;AACA61B,IAAAA,CAAC,CAACnB,CAAF,GAAMx6B,GAAN;AACA27B,IAAAA,CAAC,CAACvB,CAAF,CAAIH,CAAJ,GAAQtvB,MAAM,CAACsvB,CAAD,CAAd;AACA0B,IAAAA,CAAC,CAACvB,CAAF,CAAIF,CAAJ,GAAQvvB,MAAM,CAACuvB,CAAD,CAAd;AACA,WAAOxM,IAAI,CAACiO,CAAD,CAAX;AACD,GAjBD;;AAmBAvS,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAI4R,CAAJ;AACAA,IAAAA,CAAC,GAAG,IAAE,CAAN;AACA5K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,YAAQrB,EAAE,CAAC4S,CAAX;AACE,WAAKx6B,GAAL;AACE,YAAIqf,SAAS,CAACuI,EAAD,CAAT,IAAiBvK,OAAO,CAACuK,EAAE,CAACwS,CAAH,CAAKH,CAAN,CAA5B,EAAsC;AACpCe,UAAAA,CAAC,GAAGpT,EAAE,CAACwS,CAAH,CAAKH,CAAL,CAAOyK,UAAP,EAAJ;AACD;;AACD;;AACF,WAAKzyC,MAAL;AACE,YAAIvB,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,qCAAZ;AACD;;AACD,YAAIb,IAAI,CAACmD,KAAL,CAAW/W,EAAE,CAAC2S,CAAd,MAAqB3S,EAAE,CAAC2S,CAA5B,EAA+B;AAC7B,cAAI7pC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,4BAAZ;AACD;;AACDrB,UAAAA,CAAC,GAAGpT,EAAE,CAAC2S,CAAP;AACD;;AAfL;;AAiBA5K,IAAAA,OAAO;AACP,WAAOqL,CAAP;AACD,GAxBD,CA3rKU,CAqtKV;;;AACA9O,EAAAA,YAAY,GAAG,sBAASyP,CAAT,EAAY1iB,IAAZ,EAAkB;AAC/B,QAAI+rB,WAAJ,EAAiBC,GAAjB;AACAD,IAAAA,WAAW,GAAG,EAAd;AACAC,IAAAA,GAAG,GAAGzxB,wBAAwB,CAACmoB,CAAC,CAACpB,CAAH,CAA9B;;AACA,QAAIthB,IAAI,KAAK,CAAT,IAAcgsB,GAAG,KAAK,GAA1B,EAA+B;AAC7BD,MAAAA,WAAW,IAAIlY,SAAS,CAACmY,GAAG,GAAG,CAAP,CAAxB;AACD,KAFD,MAEO;AACLD,MAAAA,WAAW,IAAIlY,SAAS,CAACmY,GAAD,CAAxB;AACD;;AACD,WAAOD,WAAP;AACD,GAVD,CAttKU,CAkuKV;;;AACAh6B,EAAAA,mBAAmB,GAAG,6BAASwxB,CAAT,EAAY;AAChC,QAAIvC,CAAJ,EAAOiL,QAAP,EAAiBC,KAAjB,CADgC,CAEhC;AACA;;AACA/U,IAAAA,IAAI;AACJ8U,IAAAA,QAAQ,GAAG,CAAX;AACAC,IAAAA,KAAK,GAAG3I,CAAC,CAAC0I,QAAD,CAAT;;AACA,QAAIC,KAAK,KAAK,GAAV,IAAiBA,KAAK,KAAK,GAA/B,EAAoC;AAClCD,MAAAA,QAAQ;AACT,KAT+B,CAUhC;;;AACAjL,IAAAA,CAAC,GAAGtvB,MAAM,CAAC6xB,CAAC,CAAC4I,SAAF,CAAYF,QAAZ,CAAD,CAAV;AACAtd,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASA,CAAT;AACArS,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASvvB,MAAM,CAAC,CAAD,CAAf;AACA+iB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,QAAIud,KAAK,KAAK,GAAd,EAAmB;AACjBxf,MAAAA,MAAM;AACP;;AACD,WAAOgK,OAAO,EAAd;AACD,GArBD,CAnuKU,CA0vKV;;;AACA5kB,EAAAA,iBAAiB,GAAG,2BAASyxB,CAAT,EAAY;AAC9B,WAAO3O,WAAW,CAACwX,UAAU,CAAC7I,CAAD,CAAX,CAAlB;AACD,GAFD,CA3vKU,CA+vKV;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA5P,EAAAA,YAAY,GAAG,sBAAS+O,CAAT,EAAY2J,MAAZ,EAAoB;AACjC,QAAIC,SAAJ,EAAeP,WAAf,EAA4BC,GAA5B,EAAiCO,iBAAjC;AACAR,IAAAA,WAAW,GAAG,EAAd;AACAQ,IAAAA,iBAAiB,GAAG,EAApB;AACAP,IAAAA,GAAG,GAAG,EAAN;;AACA,YAAQtJ,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACEulC,QAAAA,SAAS,GAAG5J,CAAC,CAACvB,CAAF,CAAIH,CAAJ,CAAM8B,QAAN,EAAZ;;AACA,YAAI,CAACuJ,MAAL,EAAa;AACX,cAAIC,SAAS,CAAC,CAAD,CAAT,KAAiB,GAArB,EAA0B;AACxBA,YAAAA,SAAS,GAAGA,SAAS,CAACH,SAAV,CAAoB,CAApB,CAAZ;AACD;AACF;;AACD,YAAIvb,SAAS,KAAKzoB,eAAd,IAAiC2d,UAAU,CAAC4c,CAAD,CAA/C,EAAoD;AAClD4J,UAAAA,SAAS,GAAG,YAAYA,SAAZ,GAAwB,IAApC;AACD;;AACDP,QAAAA,WAAW,IAAIO,SAAf;;AACA,YAAIxmB,UAAU,CAAC4c,CAAD,CAAd,EAAmB;AACjB,cAAI9R,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,YAAAA,WAAW,IAAI,GAAf;AACD;;AACDQ,UAAAA,iBAAiB,GAAG7J,CAAC,CAACvB,CAAF,CAAIF,CAAJ,CAAM6B,QAAN,EAApB;;AACA,cAAIlS,SAAS,KAAKzoB,eAAlB,EAAmC;AACjCokC,YAAAA,iBAAiB,IAAI,GAArB;AACD;;AACDR,UAAAA,WAAW,IAAIQ,iBAAf;AACD;;AACD;;AACF,WAAKvzC,MAAL;AACEszC,QAAAA,SAAS,GAAG/xB,wBAAwB,CAACmoB,CAAC,CAACpB,CAAH,CAApC;;AACA,YAAI,CAAC+K,MAAL,EAAa;AACX,cAAIC,SAAS,CAAC,CAAD,CAAT,KAAiB,GAArB,EAA0B;AACxBA,YAAAA,SAAS,GAAGA,SAAS,CAACH,SAAV,CAAoB,CAApB,CAAZ;AACD;AACF;;AACDJ,QAAAA,WAAW,IAAIO,SAAf;AA9BJ;;AAgCA,WAAOP,WAAP;AACD,GAtCD;;AAwCAlrB,EAAAA,WAAW,GAAG,uBAAW;AACvBsW,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAHuB,CAIvB;AACA;;AACAnB,IAAAA,EAAE,GAAG,IAAIhiB,CAAJ,EAAL;AACAgiB,IAAAA,EAAE,CAAC0S,CAAH,GAAOx6B,GAAP;AACA8nB,IAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAASpW,IAAI,CAAC+D,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASpS,EAAE,CAACuS,CAAH,CAAKH,CAAd,CAAb;AACAnS,IAAAA,EAAE,CAACsS,CAAH,CAAKF,CAAL,GAASrW,IAAI,CAAC+D,EAAE,CAACwS,CAAH,CAAKF,CAAN,EAASrS,EAAE,CAACuS,CAAH,CAAKF,CAAd,CAAb;AACApS,IAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAAStI,SAAS,CAAC7J,EAAE,CAACsS,CAAH,CAAKH,CAAN,EAAS,CAAT,CAAlB;AACAvM,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,WAAO6H,OAAO,EAAd;AACD,GAbD;;AAeAzG,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIqR,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACAnK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,YAAQrB,EAAE,CAAC4S,CAAX;AACE,WAAKx6B,GAAL;AACEu6B,QAAAA,CAAC,GAAG7qB,0BAA0B,CAACkY,EAAD,CAA9B;AACA;;AACF,WAAK31B,MAAL;AACEsoC,QAAAA,CAAC,GAAG3S,EAAE,CAAC2S,CAAP;AACA;;AACF;AACEA,QAAAA,CAAC,GAAG,GAAJ;AARJ;;AAUA5K,IAAAA,OAAO;AACP,WAAO4K,CAAP;AACD,GAjBD;;AAmBA1vB,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAI0vB,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACAA,IAAAA,CAAC,GAAG7qB,0BAA0B,CAACuZ,GAAG,EAAJ,CAA9B;AACA,WAAO4E,WAAW,CAAC0M,CAAD,CAAlB;AACD,GALD,CAh1KU,CAu1KV;AAEA;;;AACA3vB,EAAAA,gBAAgB,GAAG,0BAASowB,CAAT,EAAY;AAC7B5K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASxzB,WAAW,CAACu0B,CAAD,CAApB;AACApT,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASvvB,MAAM,CAAC,CAAD,CAAf;AACA+iB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GARD,CA11KU,CAo2KV;;;AACAlpB,EAAAA,WAAW,GAAG,qBAASu0B,CAAT,EAAY;AACxB,QAAIf,CAAJ,EAAOC,CAAP,EAAUmB,CAAV,EAAalU,CAAb,EAAgBmI,GAAhB,EAAqBuN,CAArB;AACAxB,IAAAA,CAAC,GAAG,CAAJ,CAFwB,CAGxB;;AACA,QAAIL,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EAAwB;AACtBf,MAAAA,CAAC,GAAGtvB,MAAM,CAAC,CAAD,CAAV;AACA,aAAOsvB,CAAP;AACD;;AACDA,IAAAA,CAAC,GAAGtvB,MAAM,CAAC,CAAD,CAAV;AACAuvB,IAAAA,CAAC,GAAGvvB,MAAM,CAAC,CAAD,CAAV;;AACA,QAAI,KAAKqwB,CAAT,EAAY;AACV,WAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,IAAImI,GAAhB,GAAsBnI,CAAC,IAAImI,GAArD,EAA2D+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAlF,EAAqF;AACnF+S,QAAAA,CAAC,GAAGvvB,MAAM,CAAC0wB,CAAD,CAAV;AACAwB,QAAAA,CAAC,GAAG5Y,IAAI,CAACgW,CAAD,EAAIC,CAAJ,CAAR;AACAD,QAAAA,CAAC,GAAG4C,CAAJ;AACD;AACF;;AACD,WAAO5C,CAAP;AACD,GAlBD;;AAoBA1W,EAAAA,IAAI,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC,EAAiD,UAAjD,EAA6D,UAA7D,EAAyE,UAAzE,EAAqF,UAArF,EAAiG,UAAjG,EAA6G,UAA7G,EAAyH,UAAzH,EAAqI,UAArI,EAAiJ,UAAjJ,EAA6J,UAA7J,EAAyK,UAAzK,EAAqL,UAArL,EAAiM,UAAjM,EAA6M,UAA7M,EAAyN,UAAzN,EAAqO,UAArO,EAAiP,UAAjP,EAA6P,UAA7P,EAAyQ,UAAzQ,EAAqR,UAArR,EAAiS,UAAjS,EAA6S,UAA7S,EAAyT,UAAzT,EAAqU,UAArU,EAAiV,UAAjV,EAA6V,UAA7V,EAAyW,UAAzW,EAAqX,UAArX,CAAP,CAz3KU,CA23KV;;AACAkB,EAAAA,UAAU,GAAG,oBAASiX,CAAT,EAAYlB,CAAZ,EAAe;AAC1B2B,IAAAA,OAAO,CAACE,GAAR,CAAY,qBAAZ;AACA;AACA,WAAOX,CAAC,CAAClB,CAAC,GAAG,EAAL,CAAD,IAAajX,IAAI,CAACiX,CAAC,GAAG,EAAL,CAAxB;AACD,GAJD,CA53KU,CAk4KV;;;AACAlW,EAAAA,UAAU,GAAG,oBAASoX,CAAT,EAAYlB,CAAZ,EAAe;AAC1B2B,IAAAA,OAAO,CAACE,GAAR,CAAY,qBAAZ;AACA;AACA,WAAOX,CAAC,CAAClB,CAAC,GAAG,EAAL,CAAD,IAAa,CAACjX,IAAI,CAACiX,CAAC,GAAG,EAAL,CAAzB;AACD,GAJD,CAn4KU,CAy4KV;;;AACA3V,EAAAA,WAAW,GAAG,qBAASoV,CAAT,EAAY;AACxB,WAAOA,CAAC,GAAGA,CAAC,CAACwL,UAAF,EAAX;AACD,GAFD,CA14KU,CA84KV;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACApxC,EAAAA,aAAa,GAAG,yBAAW;AACzBq5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO+X,QAAQ,EAAf;AACD,GAND;;AAQAA,EAAAA,QAAQ,GAAG,oBAAW;AACpBilB,IAAAA,IAAI;AACJgH,IAAAA,SAAS;AACT,WAAOzH,OAAO,EAAd;AACD,GAJD,CAj6KU,CAu6KV;AACA;;;AACAyH,EAAAA,SAAS,GAAG,qBAAW;AACrBvP,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIh6B,gBAAgB,OAAO,CAA3B,EAA8B;AAC5By+B,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACDjM,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAzP,IAAAA,SAAS;AACTuV,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA1P,IAAAA,SAAS;AACTtF,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAyM,IAAAA,QAAQ;AACRnc,IAAAA,SAAS;AACT,WAAOtF,MAAM,EAAb;AACD,GAjBD;;AAmBA5jB,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAIiuB,aAAa,CAAC0K,EAAD,CAAb,IAAqBjF,KAAK,CAACiF,EAAD,EAAK+R,IAAL,CAA9B,EAA0C;AACxC,aAAO,CAAP;AACD,KAFD,MAEO,IAAIzc,aAAa,CAAC2K,EAAD,CAAb,IAAqBlF,KAAK,CAACkF,EAAD,EAAK8R,IAAL,CAA9B,EAA0C;AAC/C,aAAO,CAAP;AACD,KAFM,MAEA,IAAIzc,aAAa,CAAC0K,EAAD,CAAb,IAAqB1K,aAAa,CAAC2K,EAAD,CAAlC,IAA0ClF,KAAK,CAACiF,EAAD,EAAKC,EAAL,CAAnD,EAA6D;AAClE,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GAVD;;AAYAvzB,EAAAA,YAAY,GAAG,wBAAW;AACxBo5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO2Z,OAAO,EAAd;AACD,GAJD;;AAMAA,EAAAA,OAAO,GAAG,mBAAW;AACnBqjB,IAAAA,IAAI;AACJ4H,IAAAA,SAAS;AACT,WAAOrI,OAAO,EAAd;AACD,GAJD;;AAMAqI,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIuC,CAAJ,EAAOiD,SAAP;AACAjD,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAAC/L,aAAa,CAAC0K,EAAD,CAAlB,EAAwB;AACtBuG,MAAAA,WAAW,CAAC1+B,OAAD,CAAX;AACAi+B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAInE,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACJ,IAAL,CAAUxT,EAAE,CAAC2S,CAAb,CAAJ;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAIlb,SAAS,CAACuI,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACDE,IAAAA,EAAE,GAAG,IAAIhiB,CAAJ,EAAL;AACAgiB,IAAAA,EAAE,CAAC0S,CAAH,GAAOx6B,GAAP;AACA8nB,IAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAASvW,IAAI,CAACkE,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASrS,EAAE,CAACwS,CAAH,CAAKF,CAAd,CAAb;AACApS,IAAAA,EAAE,CAACsS,CAAH,CAAKF,CAAL,GAASnW,IAAI,CAAC,CAAD,CAAb;AACA2J,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACA,QAAI9H,gBAAgB,CAAC4H,EAAD,CAApB,EAA0B;AACxB,aAAO4V,SAAS,GAAG,CAAnB;AACD,KAFD,MAEO;AACLvP,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA,aAAO1mB,GAAG,EAAV;AACD;AACF,GA9BD;;AAgCA/S,EAAAA,WAAW,GAAG,uBAAW;AACvBk5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOma,MAAM,EAAb;AACD,GAND,CAp/KU,CA4/KV;AAEA;AACA;;;AACAA,EAAAA,MAAM,GAAG,kBAAW;AAClB6iB,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIzb,iBAAiB,OAAO,CAA5B,EAA+B;AAC7BygB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA0B,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAzP,IAAAA,SAAS;AACTuV,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA1P,IAAAA,SAAS;AACTtF,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAyM,IAAAA,QAAQ;AACRnc,IAAAA,SAAS;AACTtF,IAAAA,MAAM;AACN,WAAO8c,OAAO,EAAd;AACD,GApBD;;AAsBAniB,EAAAA,iBAAiB,GAAG,6BAAW;AAC7B,QAAI0P,aAAa,CAAC0K,EAAD,CAAb,IAAqBjF,KAAK,CAACiF,EAAD,EAAK+R,IAAL,CAA9B,EAA0C;AACxC,aAAO,CAAP;AACD,KAFD,MAEO,IAAIzc,aAAa,CAAC2K,EAAD,CAAb,IAAqBlF,KAAK,CAACkF,EAAD,EAAK8R,IAAL,CAA9B,EAA0C;AAC/C,aAAO,CAAP;AACD,KAFM,MAEA,IAAIzc,aAAa,CAAC0K,EAAD,CAAb,IAAqB1K,aAAa,CAAC2K,EAAD,CAAlC,IAA0ClF,KAAK,CAACiF,EAAD,EAAKC,EAAL,CAAnD,EAA6D;AAClE,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GAVD;;AAYApzB,EAAAA,YAAY,GAAG,wBAAW;AACxBi5B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;;AACJqa,IAAAA,QAAO,GAHiB,CAIxB;;;AACA,WAAOra,IAAI,EAAX;AACD,GAND;;AAQAqa,EAAAA,QAAO,GAAG,mBAAW;AACnB,QAAIqtB,CAAJ,EAAOO,CAAP,EAAUlU,CAAV,EAAamI,GAAb;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAP,IAAAA,CAAC,GAAG,CAAJ;AACA1K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAClkC,GAAD,CAAtB,EAA6B;AAC3Bm9B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA5Q,MAAAA,MAAM;AACN2Y,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAChyB,GAAD,CAAtB,EAA6B;AAC3BirB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAzQ,MAAAA,MAAM;AACNwY,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACpwB,GAAD,CAAtB,EAA6B;AAC3BujB,MAAAA,EAAE,GAAG1b,IAAI,CAAC0b,EAAD,CAAT;AACA8F,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAyR,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,MAAAA,QAAQ;AACRhO,MAAAA,WAAW;AACX4Q,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAyR,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,MAAAA,QAAQ;AACRU,MAAAA,MAAM;AACN1O,MAAAA,WAAW;AACX6Q,MAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAyM,MAAAA,QAAQ;AACR5G,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAgJ,MAAAA,QAAQ;AACRyI,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAvgB,MAAAA,GAAG;AACHsL,MAAAA,MAAM;AACN8c,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACjkC,IAAD,CAAtB,EAA8B;AAC5Bo3B,MAAAA,EAAE,GAAG1b,IAAI,CAAC0b,EAAD,CAAT;AACA8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3Q,MAAAA,WAAW;AACXyW,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN1O,MAAAA,WAAW;AACX1P,MAAAA,GAAG;AACH2mB,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,MAAAA,QAAQ;AACR0K,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/xB,IAAD,CAAtB,EAA8B;AAC5BklB,MAAAA,EAAE,GAAG1b,IAAI,CAAC0b,EAAD,CAAT;AACA8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3Q,MAAAA,WAAW;AACXyW,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN1O,MAAAA,WAAW;AACXqd,MAAAA,QAAQ;AACRpG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,MAAAA,QAAQ;AACR0K,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACnwB,IAAD,CAAtB,EAA8B;AAC5BsjB,MAAAA,EAAE,GAAG1b,IAAI,CAAC0b,EAAD,CAAT;AACA8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACRhO,MAAAA,WAAW;AACX2Q,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAqG,MAAAA,QAAQ;AACR5G,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA1mB,MAAAA,GAAG;AACHsL,MAAAA,MAAM;AACN8c,MAAAA,OAAO;AACP;AACD;;AACD,QAAIpR,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACdkT,MAAAA,CAAC,GAAG7E,GAAJ;;AACA,aAAO1X,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACAna,QAAAA,QAAO;;AACPma,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACAnL,MAAAA,OAAO;AACP;AACD;;AACD,QAAI/H,EAAE,CAAC4S,CAAH,KAASh2B,MAAb,EAAqB;AACnBkpB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjY,MAAAA,WAAW;AACXiY,MAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,WAAKoS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG1H,EAAE,CAACyN,MAAH,CAAUwF,KAAhC,EAAwC,KAAKvL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAjE,EAAuE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA9F,EAAiG;AAC/FuG,QAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;;AACA5tB,QAAAA,QAAO;;AACPma,QAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACDyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAhHD;;AAkHAh7B,EAAAA,aAAa,GAAG,yBAAW;AACzBye,IAAAA,WAAW;AACX,WAAOsa,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAHD;;AAKA8T,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIqiB,SAAS,KAAK,CAAlB,EAAqB;AACnB5nB,MAAAA,UAAU;AACX;;AACDsF,IAAAA,gBAAgB;AAChBvF,IAAAA,aAAa;AACbgE,IAAAA,IAAI;AACJ,WAAOvD,OAAO,GAAG,KAAjB;AACD,GARD,CAjqLU,CA2qLV;;;AACAP,EAAAA,QAAQ,GAAG,oBAAW;AACpB,WAAOoiB,GAAG,CAAC,UAAD,CAAV;AACD,GAFD,CA5qLU,CAgrLV;AACA;;;AACAviB,EAAAA,kDAAkD,GAAG,8DAAW;AAC9D,QAAI0tB,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV,EAAeqL,OAAf;AACAA,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG2F,MAAM,CAACvS,MAA7B,EAAsC,KAAK4M,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAA/D,EAAqE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA5F,EAA+F;AAC7F,UAAI8N,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAAV,CAAoBqL,OAApB,CAA4B,uCAA5B,MAAyE,CAAC,CAA9E,EAAiF;AAC/E;AACAzQ,QAAAA,MAAM,CAACoG,CAAD,CAAN,CAAUb,CAAV,GAAct3B,GAAd;AACA+xB,QAAAA,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAAV,GAAsB,EAAtB;AACAnvB,QAAAA,OAAO,CAACmwB,CAAD,CAAP,GAAapG,MAAM,CAACoG,CAAD,CAAnB;AACAV,QAAAA,OAAO,CAACjN,IAAR,CAAanQ,mBAAmB,CAAC8d,CAAD,CAAnB,GAAyB,IAAtC;AACD,OAND,MAMO;AACLV,QAAAA,OAAO,CAACjN,IAAR,CAAa,KAAK,CAAlB;AACD;AACF;;AACD,WAAOiN,OAAP;AACD,GAfD;;AAiBAjmC,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIixC,UAAJ,EAAgBC,mBAAhB;AACA/d,IAAAA,EAAE,GAAG/a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjB+d,MAAAA,mBAAmB,GAAGx5B,GAAG,CAACyb,EAAD,CAAzB,CADiB,CAEjB;;AACA,UAAI+d,mBAAmB,CAACpL,CAApB,KAA0Bt3B,GAA9B,EAAmC;AACjC+wB,QAAAA,IAAI,CAAC,cAAD,CAAJ;AACD,OALgB,CAMjB;AACA;AACA;;;AACA0R,MAAAA,UAAU,GAAG1Q,MAAM,CAACyQ,OAAP,CAAeE,mBAAf,CAAb;AACA3Q,MAAAA,MAAM,CAAC0Q,UAAD,CAAN,CAAmBnL,CAAnB,GAAuBt3B,GAAvB;AACA+xB,MAAAA,MAAM,CAAC0Q,UAAD,CAAN,CAAmBtL,SAAnB,GAA+B,EAA/B;AACAnvB,MAAAA,OAAO,CAACy6B,UAAD,CAAP,GAAsB1Q,MAAM,CAAC0Q,UAAD,CAA5B;AACApoB,MAAAA,mBAAmB,CAACooB,UAAD,CAAnB,GAAkC,IAAlC;AACA9d,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACD,WAAO6F,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GApBD;AAsBA;AACF;AACA;AACA;AACA;AACA;AACA;AAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAzO,EAAAA,eAAe,GAAG,KAAlB;;AAEAgE,EAAAA,UAAU,GAAG,sBAAW;AACtB64B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO2a,SAAS,EAAhB;AACD,GAJD;;AAMAA,EAAAA,SAAS,GAAG,qBAAW;AACrBqiB,IAAAA,IAAI,GADiB,CAErB;;AACAxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAzgB,IAAAA,GAAG;;AACH,QAAItW,eAAJ,EAAqB;AACnBsrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBzU,EAAvB,GAA4B,KAA5B,GAAoCgM,KAAK,CAACqC,GAAG,GAAG,CAAP,CAArD;AACD,KARoB,CASrB;AACA;AACA;AACA;;;AACA9H,IAAAA,WAAW,CAACztB,KAAD,CAAX;AACAutB,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA1d,IAAAA,GAAG;;AACH,QAAIrZ,eAAJ,EAAqB;AACnBsrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBzU,EAAvB,GAA4B,KAA5B,GAAoCgM,KAAK,CAACqC,GAAG,GAAG,CAAP,CAArD;AACD;;AACD,QAAI5f,kBAAJ,EAAwB;AACtBwX,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,KAFD,MAEO;AACLktB,MAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACDqS,IAAAA,MAAM;;AACN,QAAIhiB,eAAJ,EAAqB;AACnBsrC,MAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA1C;AACD;;AACDpT,IAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,QAAIhyB,eAAJ,EAAqB;AACnBsrC,MAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAzC;AACD;;AACDhR,IAAAA,QAAQ;;AACR,QAAIp0B,eAAJ,EAAqB;AACnBsrC,MAAAA,OAAO,CAACE,GAAR,CAAY,2BAA2BzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA5C;AACD,KApCoB,CAqCrB;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;;AACA,WAAOtG,OAAO,EAAd;AACD,GApDD;AAsDA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKE;AACA;AACA;;;AACA76B,EAAAA,UAAU,GAAG,sBAAW;AACtB44B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJ00B,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAInB,EAAE,KAAK2M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AAAE;AACxBwoB,MAAAA,EAAE,GAAGD,EAAL;AACAA,MAAAA,EAAE,GAAG4M,MAAM,CAACxwB,QAAD,CAAX,CAFsB,CAEC;AACxB;;AACDypB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAuB,IAAAA,KAAK;AACLxW,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAOtP,MAAM,EAAb;AACD,GArBD,CA7zLU,CAo1LV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACAjK,EAAAA,KAAK,GAAG,eAASu3B,QAAT,EAAmBC,UAAnB,EAA+B;AACrC,QAAIC,WAAJ,EAAiBC,QAAjB,EAA2BC,yBAA3B,EAAsDC,cAAtD;;AACA,QAAIx1C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,YAAYwJ,QAAZ,GAAuB,GAAvB,GAA6BC,UAAzC;AACD,KAJoC,CAKrC;AACA;AACA;AACA;AACA;AACA;;;AACAC,IAAAA,WAAW,GAAG,CAAd;;AACA,WAAO,IAAP,EAAa;AACXrY,MAAAA,IAAI,CAACoY,UAAD,CAAJ;AACApY,MAAAA,IAAI,CAACmY,QAAD,CAAJ;AACAnY,MAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACAtF,MAAAA,MAAK;;AACLjhC,MAAAA,IAAI;AACJ4yC,MAAAA,QAAQ,GAAG/c,GAAG,EAAd,CANW,CAQX;;AACAyE,MAAAA,IAAI,CAACsY,QAAD,CAAJ;AACAD,MAAAA,WAAW;AACXrY,MAAAA,IAAI,CAACoY,UAAD,CAAJ;AACApY,MAAAA,IAAI,CAACsY,QAAD,CAAJ;AACA1R,MAAAA,QAAQ;AACR2R,MAAAA,yBAAyB,GAAGhd,GAAG,EAA/B;;AACA,UAAIlT,KAAK,CAACkwB,yBAAD,EAA4BtM,IAA5B,CAAT,EAA4C;AAC1C,YAAIjpC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,oBAAoB0J,WAAhC;AACD;;AACD,eAAOA,WAAP;AACD;;AACDrY,MAAAA,IAAI,CAACuY,yBAAD,CAAJ;AACAvY,MAAAA,IAAI,CAACmY,QAAD,CAAJ;AACAK,MAAAA,cAAc,GAAGnvB,SAAjB;AACAA,MAAAA,SAAS,GAAG,CAAZ;AACAlE,MAAAA,MAAM;AACNkE,MAAAA,SAAS,GAAGmvB,cAAZ,CA1BW,CA2BX;AACA;;AACAJ,MAAAA,UAAU,GAAG7c,GAAG,EAAhB;AACD;AACF,GA3CD;;AA6CAl0B,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIyoC,SAAJ,EAAenC,CAAf,EAAkBC,CAAlB,EAAqBN,CAArB;AACAK,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;AACAtN,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIrH,QAAQ,CAACiG,EAAD,CAAR,IAAgBA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,KAAmB,CAAnC,IAAwC/S,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,MAAqB7S,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAjE,EAAmF;AACjF8C,MAAAA,SAAS,GAAG,CAAZ;AACD,KAFD,MAEO;AACLvJ,MAAAA,IAAI,CAAC,2CAAD,CAAJ;AACD;;AACD+G,IAAAA,CAAC,GAAGnT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAJ;AACAhN,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJioC,IAAAA,CAAC,GAAGjS,WAAW,EAAf;;AACA,QAAIiS,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGL,CAAjB,EAAoB;AAClB/G,MAAAA,IAAI,CAAC,uCAAD,CAAJ;AACD;;AACDvG,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJkoC,IAAAA,CAAC,GAAGlS,WAAW,EAAf;;AACA,QAAIkS,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGN,CAAjB,EAAoB;AAClB/G,MAAAA,IAAI,CAAC,0CAAD,CAAJ;AACD;;AACD,WAAO1lB,QAAQ,CAACsZ,EAAD,EAAKmT,CAAL,EAAQK,CAAC,GAAG,CAAZ,EAAeC,CAAC,GAAG,CAAnB,CAAf;AACD,GA3BD;;AA6BA/sB,EAAAA,QAAQ,GAAG,kBAASotB,CAAT,EAAYX,CAAZ,EAAemL,GAAf,EAAoBC,GAApB,EAAyB;AAClC,QAAI/K,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcnU,CAAd,EAAiBmI,GAAjB,EAAsBC,IAAtB;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKD,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,YAAIsf,CAAC,KAAK8K,GAAN,IAAa7K,CAAC,KAAK8K,GAAvB,EAA4B;AAC1B1Y,UAAAA,IAAI,CAACiO,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAcymB,CAAC,GAAGK,CAAJ,GAAQC,CAAtB,CAAD,CAAJ;AACD;AACF;AACF;;AACDjpB,IAAAA,WAAW,CAAC2oB,CAAC,GAAG,CAAL,CAAX;;AACA,QAAI,CAACmL,GAAG,GAAGC,GAAP,IAAc,CAAlB,EAAqB;AACnB,aAAOzgB,MAAM,EAAb;AACD;AACF,GAfD,CA36LU,CA47LV;;;AACA3wB,EAAAA,aAAa,GAAG,yBAAW;AACzB04B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO3C,QAAQ,EAAf;AACD,GAJD;;AAMAA,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIy1C,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACAqZ,IAAAA,IAAI;AACJ6H,IAAAA,UAAU;AACVtI,IAAAA,OAAO;AACP,WAAO5Y,SAAS,GAAGmvB,cAAnB;AACD,GARD;;AAUAjO,EAAAA,UAAU,GAAG,sBAAW;AACtB;AACArQ,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B4/B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD,KANqB,CAOtB;;;AACAE,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACAA,IAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;;AACA,WAAOvJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB4F,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;;AACA,UAAIp3B,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8BzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAnC,GAA+C,OAA/C,GAAyDrC,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA1E;AACD;;AACDrc,MAAAA,GAAG;;AACH,UAAIlpB,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,kBAAkBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAnC;AACD;;AACDnO,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACD,QAAIp3B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,iDAAiDzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlE;AACD,KAxBqB,CAyBtB;;;AACAnZ,IAAAA,OAAO;AACP+K,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA7R,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB4F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ,CAFiB,CAGjB;;AACAtC,MAAAA,iBAAiB;AACjBje,MAAAA,GAAG;AACHugB,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD,KArCqB,CAsCtB;AAEA;AACA;;;AACA2Q,IAAAA,QAAQ,GA1Cc,CA2CtB;;AACA/K,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAOhV,MAAM,EAAb;AACD,GA9CD;;AAgDA5d,EAAAA,SAAS,GAAG,qBAAW;AACrBy4B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,QAAI,CAACnrB,KAAI,CAACmrB,EAAD,EAAK3L,aAAL,CAAT,EAA8B;AAAE;AAC9B6M,MAAAA,KAAK;AACLzZ,MAAAA,SAAS;AACT,aAAOtB,SAAS,EAAhB;AACD,KAJD,MAIO;AACL,aAAOsB,SAAS,EAAhB;AACD;AACF,GAZD,CA7/LU,CA2gMV;AACA;;;AACAA,EAAAA,SAAS,GAAG,qBAAW;AACrBqe,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAyR,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA0J,IAAAA,MAAM;;AACN0O,IAAAA,MAAK;;AACL,WAAOjhC,IAAI,EAAX;AACD,GAND,CA7gMU,CAqhMV;;;AACAmc,EAAAA,SAAS,GAAG,CAAZ;;AAEAD,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAIqsB,CAAJ;AACApsB,IAAAA,SAAS;;AACT,QAAI7e,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,eAAepG,GAAf,GAAqB,KAArB,GAA6B1mB,SAAzC;AACD,KALe,CAMhB;AACA;AACA;;;AACAosB,IAAAA,CAAC,GAAG,IAAI71B,CAAJ,EAAJ;AACA61B,IAAAA,CAAC,CAACnB,CAAF,GAAMnqC,IAAN;AACAsrC,IAAAA,CAAC,CAACrsB,IAAF,CAAOxC,GAAP,GAAamc,GAAG,EAAhB;;AACA,QAAI0S,CAAC,KAAKA,CAAC,CAACrsB,IAAF,CAAOxC,GAAjB,EAAsB;AACpB;AACAqvB,MAAAA,OAAO,CAACE,GAAR,CAAY,8BAAZ;AACD;;AACDV,IAAAA,CAAC,CAACrsB,IAAF,CAAOlD,GAAP,GAAa6c,GAAG,EAAhB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,WAAOyE,IAAI,CAACiO,CAAD,CAAX;AACD,GAxBD;;AA0BAxmC,EAAAA,aAAa,GAAG,yBAAW;AACzBu4B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;;AACJ,QAAIyZ,IAAI,CAAC+a,EAAD,CAAJ,KAAa6M,MAAM,CAACn1B,GAAD,CAAvB,EAA8B;AAC5B2uB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAA,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,KAHD,MAGO;AACLP,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,MAAAA,IAAI;AACJs6B,MAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,MAAAA,IAAI;AACL;;AACD,WAAOoc,QAAQ,EAAf;AACD,GAbD;;AAeAA,EAAAA,QAAQ,GAAG,oBAAW;AACpB4gB,IAAAA,IAAI;AACJ8H,IAAAA,UAAU;AACV,WAAOvI,OAAO,EAAd;AACD,GAJD;;AAMAuI,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAI+B,CAAJ,EAAOoM,EAAP,EAAWC,EAAX,EAAepM,CAAf,EAAkBY,CAAlB,EAAqBO,CAArB,EAAwBtf,EAAxB,EAA4Buf,CAA5B,EAA+BpZ,EAA/B,EAAmCsY,CAAnC,EAAsC+L,CAAtC,EAAyCzJ,EAAzC,EAA6C0J,CAA7C,EAAgDzJ,EAAhD,EAAoD/B,CAApD,EAAuD6G,EAAvD,EAA2DjH,IAA3D,EAAiEC,KAAjE,EAAwE1T,CAAxE,EAA2E4a,EAA3E,EAA+EzS,GAA/E,EAAoFC,IAApF,EAA0FyN,IAA1F,EAAgGC,IAAhG,EAAsGC,IAAtG,EAA4GC,IAA5G,EAAkHC,IAAlH;AACAtC,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAxL,IAAAA,CAAC,GAAG,CAAJ;AACAJ,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR;AACAwL,IAAAA,EAAE,GAAG,EAAL;AACAC,IAAAA,EAAE,GAAG,EAAL;AACAxe,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAACrH,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AACjB,UAAI,CAACnK,kBAAkB,CAACmK,EAAD,CAAvB,EAA6B;AAC3BqM,QAAAA,IAAI,CAAC,oDAAD,CAAJ;AACD;;AACDvG,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACDjM,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA0e,IAAAA,CAAC,GAAGnd,WAAW,EAAf;AACAsE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA0e,IAAAA,CAAC,GAAGpd,WAAW,EAAf;AACAwR,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;;AACA,QAAI2L,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG3L,IAAb,IAAqB4L,CAAC,GAAG,CAAzB,IAA8BA,CAAC,GAAG5L,IAAlC,IAA0C2L,CAAC,KAAKC,CAAhD,IAAqD5e,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc6L,CAAC,GAAG,CAAlB,MAAyB3e,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc8L,CAAC,GAAG,CAAlB,CAAlF,EAAwG;AACtGvS,MAAAA,IAAI,CAAC,8BAAD,CAAJ;AACD;;AACDsS,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACDxL,IAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc6L,CAAd,CAAJ,CAjCsB,CAkCtB;;AACA1L,IAAAA,KAAK,GAAG,CAAR;;AACA,SAAKQ,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGsL,IAAtB,EAA6B,KAAKtL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAtD,EAA4D+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAnF,EAAsF;AACpF,UAAIkU,CAAC,KAAKkL,CAAN,IAAWlL,CAAC,KAAKmL,CAArB,EAAwB;AACtB3L,QAAAA,KAAK,IAAIjT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAT;AACD;AACF,KAxCqB,CAyCtB;;;AACAxT,IAAAA,EAAE,GAAG7f,YAAY,CAAC6yB,KAAD,CAAjB,CA1CsB,CA2CtB;;AACAhT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiBA,IAAI,GAAG,CAAxB;AACAU,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKD,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGqL,IAAxB,EAA+B,KAAKrL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAA5D,EAAmE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9F,UAAIsf,CAAC,KAAKkL,CAAN,IAAWlL,CAAC,KAAKmL,CAArB,EAAwB;AACtB3e,QAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcY,CAAC,EAAf,IAAqB1T,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAArB;AACD;AACF;;AACDpB,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGrS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd,CApDsB,CAqD1B;AACA;;AACI,SAAK8mB,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGpC,IAAxB,EAA+B,KAAKoC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9FmkB,MAAAA,EAAE,CAAChL,CAAD,CAAF,GAAQ,CAAR;AACAiL,MAAAA,EAAE,CAACjL,CAAD,CAAF,GAAQzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAR;AACD;;AACD,SAAKA,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGpC,KAAxB,EAAgC,KAAKoC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAA7D,EAAoE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FpP,MAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,WAAK2B,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGlC,CAAxB,EAA4B,KAAKkC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FsJ,QAAAA,EAAE,CAACE,CAAD,CAAF,GAAQjL,CAAR;AACA+K,QAAAA,EAAE,CAACG,CAAD,CAAF,GAAQlL,CAAR;AACAR,QAAAA,CAAC,GAAG,CAAJ;;AACA,aAAKN,CAAC,GAAGqH,EAAE,GAAG,CAAT,EAAY1E,IAAI,GAAGvC,IAAxB,EAA+B,KAAKuC,IAAL,GAAY0E,EAAE,GAAG1E,IAAjB,GAAwB0E,EAAE,GAAG1E,IAA5D,EAAmE3C,CAAC,GAAG,KAAK2C,IAAL,GAAY,EAAE0E,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9F/G,UAAAA,CAAC,GAAIA,CAAC,GAAGwL,EAAE,CAAC9L,CAAD,CAAP,GAAc6L,EAAE,CAAC7L,CAAD,CAApB;AACD;;AACD9M,QAAAA,IAAI,CAACuM,CAAC,CAACa,CAAD,CAAF,CAAJ,CAP2F,CAQ3F;;AACAvzB,QAAAA,GAAG;AACJ,OAZ8F,CAa/F;;;AACA2yB,MAAAA,CAAC,CAACmB,CAAD,CAAD,GAAOpS,GAAG,EAAV,CAd+F,CAerG;;AACM,WAAKqS,CAAC,GAAGyG,EAAE,GAAG3E,IAAI,GAAGxC,IAAI,GAAG,CAA5B,EAAgCwC,IAAI,IAAI,CAAR,GAAY2E,EAAE,IAAI,CAAlB,GAAsBA,EAAE,IAAI,CAA5D,EAAgEzG,CAAC,GAAG8B,IAAI,IAAI,CAAR,GAAY,EAAE2E,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,YAAIzG,CAAC,KAAKiL,CAAN,IAAWjL,CAAC,KAAKkL,CAArB,EAAwB;AACtB;AACD;;AACD,YAAI,EAAEH,EAAE,CAAC/K,CAAD,CAAJ,GAAUgL,EAAE,CAAChL,CAAD,CAAhB,EAAqB;AACnB;AACD;;AACD+K,QAAAA,EAAE,CAAC/K,CAAD,CAAF,GAAQ,CAAR;AACD;AACF;;AACD,QAAIT,KAAK,KAAK,CAAd,EAAiB;AACf,aAAOnN,IAAI,CAACwM,CAAC,CAAC,CAAD,CAAF,CAAX;AACD,KAFD,MAEO;AACL,aAAOxM,IAAI,CAAC7F,EAAD,CAAX;AACD;AACF,GA1FD,CAvkMU,CAmqMV;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKEzyB,EAAAA,QAAQ,GAAG,oBAAW;AACpBs4B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOwc,MAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,MAAM,GAAG,kBAAW;AAClBwgB,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3BgiB,MAAAA,mBAAmB;AACpB,KAFD,MAEO;AACLD,MAAAA,eAAe;AAChB;;AACD,WAAO8f,OAAO,EAAd;AACD,GATD,CAzrMU,CAosMV;AAEA;AACA;;;AACA7f,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B+X,IAAAA,EAAE,GAAG/a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjBE,MAAAA,EAAE,GAAG3b,GAAG,CAACyb,EAAD,CAAR;;AACA,UAAI1H,KAAK,CAAC4H,EAAD,CAAT,EAAe;AAAE;AACf2F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAuM,QAAAA,QAAQ;AACRxM,QAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAlY,QAAAA,MAAM;AACN8d,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAnY,QAAAA,MAAM;AACNqV,QAAAA,QAAQ;AACRyI,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAuL,QAAAA,IAAI;AACJ3F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAsL,QAAAA,IAAI;AACJpO,QAAAA,QAAQ;AACRqP,QAAAA,QAAQ;AACR;AACD;;AACDzM,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACD,WAAOhY,eAAe,EAAtB;AACD,GAzBD;;AA2BAA,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAI0qB,CAAJ,EAAOS,CAAP;;AACA,QAAI5uB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACvmC,MAAD,CAAtB,EAAgC;AAC9Bw/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA;AACD;;AACD,QAAIlJ,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACiL,GAAL,CAAS7e,EAAE,CAAC2S,CAAZ,CAAJ;;AACA,UAAIiB,IAAI,CAACr0B,GAAL,CAASozB,CAAT,IAAc,KAAlB,EAAyB;AACvBA,QAAAA,CAAC,GAAG,GAAJ;AACD;;AACD1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD,KAb0B,CAc3B;;;AACA,QAAIxa,UAAU,CAAC6H,EAAD,CAAd,EAAoB;AAClB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACNiC,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD,KAnB0B,CAoB3B;AAEA;;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACnmC,MAAD,CAAtB,EAAgC;AAC9B2/B,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,MAAAA,KAAK;AACL9hB,MAAAA,GAAG;AACH2mB,MAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,MAAAA,KAAK;AACL;AACD,KAhC0B,CAiC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAqE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,IAAAA,YAAY,CAAC,GAAD,CAAZ;AACAhJ,IAAAA,QAAQ;;AACR,QAAI5O,kBAAJ,EAAwB;AACtBwX,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,KAFD,MAEO;AACL2tB,MAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACDqS,IAAAA,MAAM;AACNmoB,IAAAA,CAAC,GAAG5R,WAAW,EAAf,CAnD2B,CAoD3B;AACA;AACA;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAAS0D,KAAK,CAAC1D,CAAD,CAAlB,EAAuB;AACrBtN,MAAAA,IAAI,CAAC+G,MAAM,CAAClkC,GAAD,CAAP,CAAJ;AACAm9B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,YAAQmY,CAAC,GAAG,GAAZ;AACE,WAAK,EAAL;AACA,WAAK,GAAL;AACE,eAAO/M,YAAY,CAAC,CAAD,CAAnB;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACE,eAAOC,aAAa,CAAC,CAAD,EAAI,CAAJ,CAApB;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,eAAOA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAApB;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACEA,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACEiJ,QAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACEiJ,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACEiJ,QAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,CAAL;AACE,eAAOgJ,YAAY,CAAC,CAAD,CAAnB;;AACF,WAAK,GAAL;AACE,eAAOA,YAAY,CAAC,CAAC,CAAF,CAAnB;;AACF;AACEP,QAAAA,IAAI,CAAC+G,MAAM,CAAClkC,GAAD,CAAP,CAAJ;AACAm9B,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,eAAO/E,IAAI,CAAC,CAAD,CAAX;AA7CJ;AA+CD,GA5GD;;AA8GAxtB,EAAAA,SAAS,GAAG,qBAAW;AACrBq4B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOikC,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjBjH,IAAAA,IAAI;AACJ+H,IAAAA,MAAM;AACN,WAAOxI,OAAO,EAAd;AACD,GAJD;;AAMAwI,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIoC,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACtmC,OAAD,CAAtB,EAAiC;AAC/Bu/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA;AACD;;AACD,QAAIlJ,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACkL,IAAL,CAAU9e,EAAE,CAAC2S,CAAb,CAAJ;;AACA,UAAIiB,IAAI,CAACr0B,GAAL,CAASozB,CAAT,IAAc,KAAlB,EAAyB;AACvBA,QAAAA,CAAC,GAAG,GAAJ;AACD;;AACD1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAI9c,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA;AACD;;AACD+G,IAAAA,WAAW,CAAC39B,IAAD,CAAX;AACAk9B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GAvBD,CA71MU,CAs3MV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACAvtB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIwlC,CAAJ;AACA1K,IAAAA,IAAI;AACJ+L,IAAAA,OAAO,CAACE,GAAR,CAAY,iDAAZ;AACAvB,IAAAA,CAAC,GAAG7E,GAAJ;AACAvI,IAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACAouB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACDrW,IAAAA,OAAM,CAAC,KAAD,CAAN;;AACAsR,IAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACA,WAAOnL,OAAO,EAAd;AACD,GAnBD;;AAqBAhC,EAAAA,qBAAqB,GAAG,+BAASgZ,UAAT,EAAqB;AAC3C,QAAI1Q,GAAG,GAAG,CAAV,EAAa;AACX,UAAIvlC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,eAAesK,UAAf,GAA4B,OAA5B,GAAsC/S,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAvD;AACD;;AACD,UAAIlgB,KAAK,CAAC4wB,UAAD,EAAa/S,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlB,CAAT,EAAuC;AACrC,YAAIvlC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,cAAcsK,UAAd,GAA2B,iCAAvC;AACD;;AACD;AACD;AACF;;AACD,WAAOjZ,IAAI,CAACiZ,UAAD,CAAX;AACD,GAbD,CAx5MU,CAu6MV;;;AACAp1B,EAAAA,OAAM,GAAG,gBAASq1B,gBAAT,EAA2B;AAClCxW,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBzU,EAA7B;AACD,KANiC,CAOlC;;;AACA,QAAIgf,gBAAJ,EAAsB;AACpB,UAAI,CAACroB,MAAM,CAACqJ,EAAD,CAAX,EAAiB;AACf,YAAIl3B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,oBAAoBzU,EAAhC;AACD;;AACD+F,QAAAA,qBAAqB,CAAC/F,EAAD,CAArB;AACA+H,QAAAA,OAAO;AACP;AACD;AACF,KATD,MASO;AACL,UAAIlzB,KAAI,CAACmrB,EAAD,EAAKC,EAAL,CAAJ,KAAiB,CAArB,EAAwB;AACtB,YAAIn3B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,gCAAZ;AACD;;AACD1O,QAAAA,qBAAqB,CAAC/F,EAAD,CAArB,CAJsB,CAKtB;AACA;;AACA+H,QAAAA,OAAO;AACP;AACD;AACF,KA5BiC,CA6BlC;;;AACA,QAAI1R,KAAK,CAAC2J,EAAD,CAAT,EAAe;AACbnW,MAAAA,UAAU,CAACm1B,gBAAD,CAAV;AACAjX,MAAAA,OAAO;AACP;AACD,KAlCiC,CAmClC;;;AACA,QAAI7P,UAAU,CAAC8H,EAAD,CAAd,EAAoB;AAClBpW,MAAAA,cAAc,CAACo1B,gBAAD,CAAd;AACAjX,MAAAA,OAAO;AACP;AACD,KAxCiC,CAyClC;;;AACA,QAAIj/B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ;AACD;;AACDvU,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,QAAIl3B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBvU,EAA7B;AACD;;AACD,WAAOvJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB;AACA;AACA;AACA;AACA,UAAI8e,gBAAJ,EAAsB;AACpBlZ,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACD;;AACD,UAAIp3B,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACD;;AACD3O,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;;AACA,UAAIp3B,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,cAAcjwB,GAAG,CAAC0b,EAAD,CAA7B;AACD;;AACD4F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACA,UAAIn3B,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,SAASxU,EAArB;AACD;;AACDtW,MAAAA,OAAM,CAACq1B,gBAAD,CAAN;;AACA9e,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACD,WAAO6H,OAAO,EAAd;AACD,GAxED;;AA0EAle,EAAAA,UAAU,GAAG,oBAASm1B,gBAAT,EAA2B;AACtC,QAAI9L,CAAJ;;AACA,QAAIpqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;AACD;;AACDvB,IAAAA,CAAC,GAAG,CAAJ,CALsC,CAMtC;;AACAhT,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB,UAAIrrB,KAAI,CAAC2P,GAAG,CAAC0b,EAAD,CAAJ,EAAUD,EAAV,CAAJ,IAAqB+e,gBAAzB,EAA2C;AACzClZ,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA4F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACAtW,QAAAA,OAAM,CAACq1B,gBAAD,CAAN;AACD;;AACD9e,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD,KAfqC,CAgBtC;;;AACAgT,IAAAA,CAAC,GAAG7E,GAAJ;AACAnO,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB,UAAIrrB,KAAI,CAAC2P,GAAG,CAAC0b,EAAD,CAAJ,EAAUD,EAAV,CAAJ,KAAsB,CAA1B,EAA6B;AAC3B8F,QAAAA,qBAAqB,CAACvhB,GAAG,CAAC0b,EAAD,CAAJ,CAArB;AACD;;AACDA,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACD,QAAImO,GAAG,GAAG6E,CAAV,EAAa;AACXpzB,MAAAA,OAAO,CAACuuB,GAAG,GAAG6E,CAAP,CAAP;AACAhT,MAAAA,EAAE,GAAGmB,GAAG,EAAR;AACA0E,MAAAA,qBAAqB,CAAC7F,EAAD,CAArB;AACA4F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,aAAOnC,MAAM,EAAb,CALW,CAKM;AAClB;AACF,GAhCD;;AAkCAnU,EAAAA,cAAc,GAAG,wBAASo1B,gBAAT,EAA2B;AAC1C,QAAI9L,CAAJ;;AACA,QAAIpqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,2BAAZ;AACD;;AACDvB,IAAAA,CAAC,GAAG,CAAJ,CAL0C,CAM1C;;AACAhT,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB,UAAIrrB,KAAI,CAAC2P,GAAG,CAAC0b,EAAD,CAAJ,EAAUD,EAAV,CAAJ,IAAqB+e,gBAAzB,EAA2C;AACzClZ,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA4F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACAtW,QAAAA,OAAM,CAACq1B,gBAAD,CAAN;AACD;;AACD9e,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD,KAfyC,CAgB1C;;;AACAgT,IAAAA,CAAC,GAAG7E,GAAJ;AACAnO,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB,UAAIrrB,KAAI,CAAC2P,GAAG,CAAC0b,EAAD,CAAJ,EAAUD,EAAV,CAAJ,KAAsB,CAA1B,EAA6B;AAC3B8F,QAAAA,qBAAqB,CAACvhB,GAAG,CAAC0b,EAAD,CAAJ,CAArB;AACD;;AACDA,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACD,QAAImO,GAAG,GAAG6E,CAAV,EAAa;AACX,aAAO5V,YAAY,CAAC+Q,GAAG,GAAG6E,CAAP,CAAnB;AACD;AACF,GA5BD,CAphNU,CAkjNV;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AACAnpB,EAAAA,oBAAoB,GAAG,gCAAW;AAChCmW,IAAAA,EAAE,GAAGvc,KAAK,CAACqc,EAAD,CAAV;AACAG,IAAAA,EAAE,GAAGzb,KAAK,CAACsb,EAAD,CAAV;AACAI,IAAAA,EAAE,GAAG/b,KAAK,CAAC2b,EAAD,CAAV;;AACA,QAAI,CAAClG,QAAQ,CAACoG,EAAD,CAAb,EAAmB;AAAE;AACnBmM,MAAAA,IAAI,CAAC,gBAAD,CAAJ;AACD,KAN+B,CAOhC;;;AACA,QAAI7nB,GAAG,CAAC4b,EAAD,CAAH,KAAYyM,MAAM,CAAC1hC,IAAD,CAAtB,EAA8B;AAAE;AAC9B26B,MAAAA,IAAI,CAACxhB,IAAI,CAAC8b,EAAD,CAAL,CAAJ;AACA50B,MAAAA,IAAI;AACJ40B,MAAAA,EAAE,GAAGiB,GAAG,EAAR,CAH4B,CAGhB;AACb,KAZ+B,CAchC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAkF,IAAAA,WAAW,CAAC3xB,QAAD,CAAX;AACAkxB,IAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAlF,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACAmF,IAAAA,EAAE,GAAGiB,GAAG,EAAR;AACA2I,IAAAA,WAAW,CAAC9J,EAAD,EAAKE,EAAL,CAAX;AACA,WAAOmG,WAAW,CAAC7uB,GAAD,CAAlB;AACD,GAjCD;;AAmCArI,EAAAA,uBAAuB,GAAG,mCAAW;AACnC,WAAOy2B,IAAI,CAAC9F,EAAD,CAAX;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKE;AACA;AACA;AACA;;;AACAryB,EAAAA,WAAW,GAAG,uBAAW;AACvBm4B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR,CAHuB,CAGX;;AACZrB,IAAAA,EAAE,GAAG/a,IAAI,CAAC+a,EAAD,CAAT,CAJuB,CAKvB;AACA;AACA;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAx0B,MAAAA,IAAI;AACJ00B,MAAAA,EAAE,GAAGmB,GAAG,EAAR,CAJiB,CAIL;;AACZyE,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAx0B,MAAAA,IAAI;AACJ20B,MAAAA,EAAE,GAAGkB,GAAG,EAAR,CARiB,CAQL;;AACZyE,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAx0B,MAAAA,IAAI;AACJ40B,MAAAA,EAAE,GAAGiB,GAAG,EAAR,CAZiB,CAYL;AAEZ;AACA;AACA;AACA;AACA;;AACAyE,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACArL,MAAAA,QAAQ;AACRoL,MAAAA,EAAE,GAAGoB,GAAG,EAAR,CAtBiB,CAsBL;AAEZ;;AACAyE,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;;AACAqM,MAAAA,MAAK;;AACLjhC,MAAAA,IAAI,GA7Ba,CA8BjB;;AACAs6B,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;;AACAsM,MAAAA,MAAK;;AACLjhC,MAAAA,IAAI,GAnCa,CAoCjB;AACA;AACA;AACA;AACA;AACA;AACA;;AACAkhC,MAAAA,QAAQ;AACRzM,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACD;;AACD,WAAOyE,IAAI,CAAC7F,EAAD,CAAX;AACD,GAvDD;;AAyDAryB,EAAAA,WAAW,GAAG,uBAAW;AACvBk4B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD,WAAO9V,MAAM,EAAb;AACD,GAZD,CA/sNU,CA6tNV;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;AACAA,EAAAA,MAAM,GAAG,kBAAW;AAClBse,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAnB,IAAAA,EAAE,GAAG6R,IAAL;;AACAvB,IAAAA,SAAQ,CAACxQ,EAAD,CAAR;;AACA8F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,WAAO6H,OAAO,EAAd;AACD,GARD;;AAUAyI,EAAAA,SAAQ,GAAG,kBAASuD,CAAT,EAAY;AACrB,QAAIhB,OAAJ;;AACA,QAAI5kB,KAAK,CAAC4lB,CAAD,EAAI9T,EAAJ,CAAT,EAAkB;AAChB,UAAIpK,kBAAkB,CAACqK,EAAD,CAAtB,EAA4B;AAC1B,eAAOA,EAAE,GAAGV,GAAZ;AACD;AACF,KAJD,MAIO,IAAIhb,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAArB,EAA8B;AACnC,UAAIqV,KAAK,CAAC7J,IAAI,CAACyvB,CAAD,CAAL,EAAU9T,EAAV,CAAL,IAAsB3K,aAAa,CAACjR,KAAK,CAAC0vB,CAAD,CAAN,CAAnC,IAAiDhZ,KAAK,CAACmF,EAAD,EAAK7b,KAAK,CAAC0vB,CAAD,CAAV,CAA1D,EAA0E;AACxE,eAAO7T,EAAE,GAAG7b,KAAK,CAAC0vB,CAAD,CAAjB;AACD;AACF,KAJM,MAIA,IAAIpd,MAAM,CAACod,CAAD,CAAV,EAAe;AACpBA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,MAAAA,OAAO,GAAG,EAAV;;AACA,aAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBvD,QAAAA,SAAQ,CAAChsB,GAAG,CAACuvB,CAAD,CAAJ,CAAR;;AACAhB,QAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,aAAOhB,OAAP;AACD;AACF,GAnBD;;AAqBAllC,EAAAA,gBAAgB,GAAG,4BAAW;AAC5Bi4B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO2e,YAAW,EAAlB;AACD,GAJD;;AAMAA,EAAAA,YAAW,GAAG,uBAAW;AACvB,QAAI+oB,CAAJ,EAAOoB,WAAP;AACApB,IAAAA,CAAC,GAAG,CAAJ;AACAoB,IAAAA,WAAW,GAAGjT,GAAG,EAAjB,CAHuB,CAIvB;;AACA,QAAI7c,GAAG,CAAC8vB,WAAD,CAAH,KAAqBzH,MAAM,CAAC3mC,GAAD,CAA/B,EAAsC;AACpC4/B,MAAAA,IAAI,CAACwO,WAAD,CAAJ;AACAnN,MAAAA,WAAW;AACXmN,MAAAA,WAAW,GAAGjT,GAAG,EAAjB;AACD;;AACD,QAAI7c,GAAG,CAAC8vB,WAAD,CAAH,KAAqBzH,MAAM,CAACt1B,QAAD,CAA3B,IAAyC,CAACqhB,SAAS,CAACpU,GAAG,CAACU,GAAG,CAACovB,WAAD,CAAJ,CAAJ,CAAvD,EAAgF;AAC9EpB,MAAAA,CAAC,GAAG7E,GAAJ;AACAiG,MAAAA,WAAW,GAAGpvB,GAAG,CAACovB,WAAD,CAAjB;;AACA,aAAO3d,MAAM,CAAC2d,WAAD,CAAb,EAA4B;AAC1BxO,QAAAA,IAAI,CAACthB,GAAG,CAAC8vB,WAAD,CAAJ,CAAJ;;AACAnqB,QAAAA,YAAW;;AACXmqB,QAAAA,WAAW,GAAGpvB,GAAG,CAACovB,WAAD,CAAjB;AACD;;AACD,aAAOhX,YAAY,CAAC+Q,GAAG,GAAG6E,CAAP,CAAnB;AACD,KATD,MASO,IAAIzZ,UAAU,CAAC6a,WAAD,CAAd,EAA6B;AAClCxO,MAAAA,IAAI,CAACwO,WAAD,CAAJ;AACA,aAAO3X,cAAc,EAArB;AACD,KAHM,MAGA,IAAInY,GAAG,CAAC8vB,WAAD,CAAH,KAAqBzH,MAAM,CAAC/zB,KAAD,CAA3B,IAAsCuf,cAAc,CAAChU,KAAK,CAACiwB,WAAD,CAAN,CAAxD,EAA8E;AACnFxO,MAAAA,IAAI,CAACwO,WAAD,CAAJ;AACA,aAAOhN,WAAW,EAAlB;AACD,KAHM,MAGA;AACL,aAAOxB,IAAI,CAACtG,GAAD,CAAX;AACD;AACF,GA5BD,CApxNU,CAkzNV;AAEA;AACA;AACA;;;AACA1xB,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAI8nC,SAAJ,EAAenC,CAAf,EAAkBtf,EAAlB,EAAsBif,CAAtB,EAAyB7T,CAAzB,EAA4BmI,GAA5B,EAAiCC,IAAjC,CAD2B,CAE3B;;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAzT,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI,GANuB,CAO3B;AAEA;AAEA;AACA;AACA;AACA;AACA;;AACAw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACLsS,MAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACD,KAHD,MAGO,IAAI4d,aAAa,CAAC2K,EAAD,CAAjB,EAAuB;AAC5BzM,MAAAA,KAAK;AACLsS,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD,KAHM,MAGA;AACL6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAD,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACL;;AACD40B,IAAAA,EAAE,GAAGiB,GAAG,EAAR;AACAlB,IAAAA,EAAE,GAAGkB,GAAG,EAAR;AACAnB,IAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,WAAO,CAAP,EAAU;AACR;AACA,UAAI/L,aAAa,CAAC8K,EAAD,CAAjB,EAAuB;AAAE;AACvB0F,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACAgT,QAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,YAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ/G,UAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD;AACF,OAND,MAMO;AACL+G,QAAAA,CAAC,GAAG,CAAJ;AACD;;AACDtN,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACA,UAAIkT,CAAC,IAAI,CAAT,EAAY;AACV,aAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFuG,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA7V,UAAAA,UAAU;AACX;AACF,OALD,MAKO;AACL8oB,QAAAA,CAAC,GAAG,CAACA,CAAL;;AACA,aAAKK,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAtL,UAAAA,QAAQ;AACT;AACF;;AACDqL,MAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,UAAIjB,EAAE,KAAKyM,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AAAE;AACxB;AACD,OA3BO,CA4BR;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AACA,UAAI4d,aAAa,CAAC8K,EAAD,CAAjB,EAAuB;AAAE;AACvBJ,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,QAAAA,IAAI;AACJ40B,QAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,YAAIjB,EAAE,KAAKyM,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AAAE;AACxB,gBADsB,CACf;AACR;;AACD,YAAI4d,aAAa,CAAC8K,EAAD,CAAjB,EAAuB;AAAE;AACvBwV,UAAAA,SAAS,GAAG,CAAZ,CADqB,CACN;AAChB,SAFD,MAEO;AACLzV,UAAAA,EAAE,GAAGC,EAAL;AACAJ,UAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,UAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,UAAAA,IAAI;AACJ40B,UAAAA,EAAE,GAAGiB,GAAG,EAAR,CALK,CAKO;AACb;AACF,OAjBD,MAiBO;AACLlB,QAAAA,EAAE,GAAGC,EAAL;AACAJ,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,QAAAA,IAAI;AACJ40B,QAAAA,EAAE,GAAGiB,GAAG,EAAR,CALK,CAKO;AACb;AACF;;AACD,WAAOyE,IAAI,CAAC5F,EAAD,CAAX,CAnG2B,CAmGV;AAClB,GApGD;;AAsGA5V,EAAAA,UAAU,GAAG,sBAAW;AACtBke,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI/L,aAAa,CAAC2K,EAAD,CAAjB,EAAuB;AACrBoM,MAAAA,IAAI,CAAC,oBAAD,CAAJ;AACD;;AACD,QAAIrS,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChB,UAAIhG,QAAQ,CAACiG,EAAD,CAAZ,EAAkB;AAChBrX,QAAAA,eAAe;AAChB,OAFD,MAEO;AACLD,QAAAA,eAAe;AAChB;AACF,KAND,MAMO;AACL,UAAIqR,QAAQ,CAACiG,EAAD,CAAZ,EAAkB;AAChBvX,QAAAA,eAAe;AAChB,OAFD,MAEO;AACLF,QAAAA,eAAe;AAChB;AACF;;AACD,WAAOuf,OAAO,EAAd;AACD,GArBD;;AAuBAvf,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIsR,QAAQ,CAACmG,EAAD,CAAZ,EAAkB;AAChB,aAAOxX,iBAAiB,EAAxB;AACD,KAFD,MAEO;AACL;AACA;AACAqd,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;;AACAmyB,MAAAA,MAAK;;AACL3G,MAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACAgQ,MAAAA,UAAU;AACVwb,MAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACAwrB,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,aAAOwM,MAAK,EAAZ,CAXK,CAWW;AACjB;AACF,GAhBD;;AAkBAhkB,EAAAA,iBAAiB,GAAG,6BAAW;AAC7B;AACA,QAAI0F,KAAK,CAAC6R,EAAD,EAAKC,EAAL,CAAT,EAAmB;AACjB6F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA;AACD;;AACD,QAAI,CAAC7I,MAAM,CAACqJ,EAAD,CAAX,EAAiB;AACf8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACD,QAAI1b,KAAK,CAAC2J,EAAD,CAAT,EAAe;AACb3T,MAAAA,IAAI;AACJ;AACD;;AACD,QAAI7H,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCwU,MAAAA,QAAQ;AACR;AACD;;AACD,QAAIvH,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BgT,MAAAA,MAAM;AACN;AACD;;AACD,QAAItH,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAChjC,UAAD,CAAtB,EAAoC;AAClC6f,MAAAA,EAAE;AACF;AACD;;AACD,QAAIlF,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt2B,GAAD,CAAtB,EAA6B;AAC3B+U,MAAAA,IAAI;AACJ;AACD;;AACD,QAAI9G,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAChyB,GAAD,CAAtB,EAA6B;AAC3BsR,MAAAA,IAAI;AACJ;AACD;;AACD,QAAI3H,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAClkC,GAAD,CAAtB,EAA6B;AAC3B6gB,MAAAA,IAAI;AACJ;AACD;;AACD,QAAIhF,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACpwB,GAAD,CAAtB,EAA6B;AAC3B6P,MAAAA,IAAI;AACJ;AACD;;AACD,QAAI9H,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACrmC,MAAD,CAAtB,EAAgC;AAC9BwiB,MAAAA,OAAO;AACP;AACD;;AACD,QAAIxE,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACvmC,MAAD,CAAtB,EAAgC;AAC9BwiB,MAAAA,OAAO;AACP;AACD;;AACD,QAAItE,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACnmC,MAAD,CAAtB,EAAgC;AAC9BwiB,MAAAA,OAAO;AACP;AACD;;AACD,QAAI1E,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/xB,IAAD,CAAtB,EAA8B;AAC5BsR,MAAAA,KAAK;AACL;AACD;;AACD,QAAI5H,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACjkC,IAAD,CAAtB,EAA8B;AAC5B6gB,MAAAA,KAAK;AACL;AACD;;AACD,QAAIjF,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACnwB,IAAD,CAAtB,EAA8B;AAC5B6P,MAAAA,KAAK;AACL;AACD;;AACD,QAAI/H,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACpmC,OAAD,CAAtB,EAAiC;AAC/BwiB,MAAAA,QAAQ;AACR;AACD;;AACD,QAAIzE,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACtmC,OAAD,CAAtB,EAAiC;AAC/BwiB,MAAAA,QAAQ;AACR;AACD;;AACD,QAAIvE,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAClmC,OAAD,CAAtB,EAAiC;AAC/BwiB,MAAAA,QAAQ;AACR;AACD;;AACD,QAAI3E,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC5mC,GAAD,CAAtB,EAA6B;AAC3B4iB,MAAAA,IAAI;AACJ;AACD;;AACD,QAAIrE,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACpyB,GAAD,CAAtB,EAA6B;AAC3ByR,MAAAA,IAAI;AACJ;AACD;;AACD,QAAI1H,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC73B,OAAD,CAAtB,EAAiC;AAC/B4V,MAAAA,QAAQ;AACR;AACD;;AACD,QAAIpG,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC5hC,GAAD,CAAtB,EAA6B;AAC3Bmf,MAAAA,IAAI;AACJ;AACD;;AACD,QAAI5F,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3hC,IAAD,CAAtB,EAA8B;AAC5Bmf,MAAAA,KAAK;AACL;AACD;;AACD,QAAI7F,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC5lC,OAAD,CAAtB,EAAiC;AAC/B,UAAI4uB,kBAAkB,CAACxR,KAAK,CAAC2b,EAAD,CAAN,CAAtB,EAAmC;AACjC5W,QAAAA,SAAS;AACV,OAFD,MAEO;AACLC,QAAAA,SAAS;AACV;;AACD;AACD;;AACD,QAAI7E,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3lC,OAAD,CAAtB,EAAiC;AAC/B,UAAI2uB,kBAAkB,CAACxR,KAAK,CAAC2b,EAAD,CAAN,CAAtB,EAAmC;AACjC1W,QAAAA,SAAS;AACV,OAFD,MAEO;AACLC,QAAAA,SAAS;AACV;;AACD;AACD;;AACD,QAAI/E,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACx3B,QAAD,CAAlB,IAAgCgP,KAAK,CAAC2b,EAAD,CAAL,KAAcC,EAAlD,EAAsD;AACpD1V,MAAAA,sBAAsB;AACtB;AACD;;AACD,WAAOI,SAAS,EAAhB;AACD,GAvHD;;AAyHA0B,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAI6mB,CAAJ;AACAA,IAAAA,CAAC,GAAG7E,GAAJ;AACArO,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,MAAAA,UAAU;AACV0V,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAOlgB,OAAO,CAACuuB,GAAG,GAAG6E,CAAP,CAAd;AACD,GAXD;;AAaAnnB,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI0nB,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcN,CAAd,EAAiB7T,CAAjB,EAAoBmI,GAApB,EAAyBC,IAAzB;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;AACAA,IAAAA,CAAC,GAAGtY,MAAM,CAACkF,EAAD,CAAN,GAAa,CAAjB;;AACA,SAAKyT,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFW,MAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAK0T,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;;AACA,YAAIuT,CAAC,KAAKC,CAAV,EAAa;AACX5N,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,UAAAA,UAAU;AACX;;AACD4V,QAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACD5C,MAAAA,YAAY,CAAC8V,CAAD,CAAZ;AACD;;AACD,WAAOtzB,OAAO,CAACszB,CAAD,CAAd;AACD,GAnBD,CA5kOU,CAimOV;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AACAtnB,EAAAA,MAAM,GAAG,kBAAW;AAClBga,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA8F,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA/U,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV+S,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA7E,IAAAA,SAAS;AACT2K,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV+S,IAAAA,QAAQ;AACR1d,IAAAA,GAAG;AACHmmB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO3C,QAAQ,EAAf;AACD,GAjBD;;AAmBA/R,EAAAA,IAAI,GAAG,gBAAW;AAChBwa,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA,WAAO/U,MAAM,EAAb;AACD,GAND,CApoOU,CA4oOV;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACAvB,EAAAA,EAAE,GAAG,cAAW;AACd;AACAoc,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV4V,IAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAAC0b,EAAD,CAAH,KAAY2M,MAAM,CAAChjC,UAAD,CAAtB,EAAoC;AAClC;AACA08B,MAAAA,WAAW,CAAC18B,UAAD,CAAX;AACA08B,MAAAA,WAAW,CAAC18B,UAAD,CAAX;AACAi8B,MAAAA,IAAI,CAACxhB,IAAI,CAAC4b,EAAD,CAAL,CAAJ;;AACA,UAAInF,KAAK,CAAC1W,KAAK,CAAC6b,EAAD,CAAN,EAAY7b,KAAK,CAAC2b,EAAD,CAAjB,CAAT,EAAiC;AAC/B8F,QAAAA,IAAI,CAACzhB,KAAK,CAAC6b,EAAD,CAAN,CAAJ;AACAjF,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACA6K,QAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACD,OAJD,MAIO;AACL8F,QAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA/E,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACA6K,QAAAA,IAAI,CAACzhB,KAAK,CAAC6b,EAAD,CAAN,CAAJ;AACD;;AACD,aAAOjF,IAAI,CAAC,CAAD,CAAX;AACD,KAfD,MAeO;AACL6K,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA,aAAO1V,UAAU,EAAjB;AACD;AACF,GA1BD,CAvpOU,CAmrOV;;;AACAK,EAAAA,SAAS,GAAG,qBAAW;AACrBuV,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,QAAIE,EAAE,KAAK2M,MAAM,CAACn1B,GAAD,CAAb,IAAsB7C,KAAI,CAACqrB,EAAD,EAAKD,EAAL,CAA9B,EAAwC;AACtCsG,MAAAA,WAAW,CAAC18B,UAAD,CAAX;AACAi8B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,aAAOhF,IAAI,CAAC,CAAD,CAAX;AACD,KALD,MAKO;AACL,aAAO6K,IAAI,CAACiM,IAAD,CAAX;AACD;AACF,GAVD;;AAYA5lB,EAAAA,IAAI,GAAG,gBAAW;AAChB2Z,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAhY,IAAAA,MAAM;AACN,WAAOqV,QAAQ,EAAf;AACD,GAPD;;AASA7T,EAAAA,IAAI,GAAG,gBAAW;AAChBsc,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAyL,IAAAA,IAAI;AACJpO,IAAAA,QAAQ;AACR,WAAOU,MAAM,EAAb;AACD,GARD;;AAUAzR,EAAAA,IAAI,GAAG,gBAAW;AAChBwZ,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAhY,IAAAA,MAAM;AACNqe,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA5E,IAAAA,KAAK;AACL,WAAOpE,QAAQ,EAAf;AACD,GATD;;AAWArU,EAAAA,OAAO,GAAG,mBAAW;AACnB8c,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV+b,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACLiL,IAAAA,QAAQ;AACRpG,IAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,IAAAA,KAAK;AACL,WAAOpE,QAAQ,EAAf;AACD,GAZD;;AAcAvU,EAAAA,OAAO,GAAG,mBAAW;AACnBgd,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV+b,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACLiL,IAAAA,QAAQ;AACRpG,IAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,IAAAA,KAAK;AACLpE,IAAAA,QAAQ;AACR,WAAOU,MAAM,EAAb;AACD,GAbD,CA5uOU,CA2vOV;AAEA;AAEA;;;AACA7U,EAAAA,OAAO,GAAG,mBAAW;AACnB4c,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV+b,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACL9hB,IAAAA,GAAG;AACHuV,IAAAA,OAAO;AACPmI,IAAAA,QAAQ;AACR,WAAOwN,QAAQ,EAAf;AACD,GAZD;;AAcAze,EAAAA,KAAK,GAAG,iBAAW;AACjB0Z,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAyP,IAAAA,KAAK;AACL,WAAOpS,QAAQ,EAAf;AACD,GAPD;;AASA5T,EAAAA,KAAK,GAAG,iBAAW;AACjBqc,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAgQ,IAAAA,KAAK;AACL,WAAO3S,QAAQ,EAAf;AACD,GAPD;;AASA9Q,EAAAA,KAAK,GAAG,iBAAW;AACjBuZ,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAyP,IAAAA,KAAK;AACLpJ,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA5E,IAAAA,KAAK;AACL,WAAOpE,QAAQ,EAAf;AACD,GATD;;AAWApU,EAAAA,QAAQ,GAAG,oBAAW;AACpB6c,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACL4E,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA1mB,IAAAA,GAAG;AACH2mB,IAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,IAAAA,KAAK;AACL,WAAOpE,QAAQ,EAAf;AACD,GAZD;;AAcAtU,EAAAA,QAAQ,GAAG,oBAAW;AACpB+c,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACL4E,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,IAAAA,GAAG;AACH2mB,IAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,IAAAA,KAAK;AACL,WAAOpE,QAAQ,EAAf;AACD,GAZD;;AAcAlU,EAAAA,QAAQ,GAAG,oBAAW;AACpB2c,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV+b,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACLiL,IAAAA,QAAQ;AACRxX,IAAAA,OAAO;AACP,WAAOmI,QAAQ,EAAf;AACD,GAXD;;AAaAxU,EAAAA,IAAI,GAAG,gBAAW;AAChBid,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqK,IAAAA,GAAG;AACH,WAAOhN,QAAQ,EAAf;AACD,GAPD;;AASAnR,EAAAA,IAAI,GAAG,gBAAW;AAChB4Z,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAnV,IAAAA,KAAK;AACLwS,IAAAA,QAAQ;AACRgJ,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA,WAAOhJ,QAAQ,EAAf;AACD,GATD;;AAWAzS,EAAAA,QAAQ,GAAG,oBAAW;AACpBkb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV+b,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA3C,IAAAA,QAAQ;AACRA,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,IAAAA,GAAG;AACHsU,IAAAA,OAAO;AACP,WAAOoJ,QAAQ,EAAf;AACD,GAdD;;AAgBAjT,EAAAA,IAAI,GAAG,gBAAW;AAChB0b,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACL4E,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,IAAAA,QAAQ;AACRhO,IAAAA,WAAW;;AACX,QAAIZ,kBAAJ,EAAwB;AACtBwX,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,KAFD,MAEO;AACL2tB,MAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACD0tB,IAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,IAAAA,KAAK;AACLpE,IAAAA,QAAQ;AACRgJ,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV,WAAO+S,QAAQ,EAAf;AACD,GArBD;;AAuBAhT,EAAAA,KAAK,GAAG,iBAAW;AACjByb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,IAAAA,KAAK;AACL4E,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,IAAAA,QAAQ;AACRhO,IAAAA,WAAW;;AACX,QAAIZ,kBAAJ,EAAwB;AACtBwX,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,KAFD,MAEO;AACL2tB,MAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACD0tB,IAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,IAAAA,KAAK;AACLpE,IAAAA,QAAQ;AACRgJ,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACV,WAAO+S,QAAQ,EAAf;AACD,GArBD;;AAuBAjU,EAAAA,SAAS,GAAG,qBAAW;AACrB0c,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAxjB,IAAAA,OAAO;AACPwa,IAAAA,QAAQ;AACRgJ,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA,WAAOhJ,QAAQ,EAAf;AACD,GAVD;;AAYAhU,EAAAA,SAAS,GAAG,qBAAW;AACrByc,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,IAAAA,GAAG;AACHkD,IAAAA,OAAO;AACPijB,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA/U,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAnd,IAAAA,OAAO;AACPwa,IAAAA,QAAQ;AACR1d,IAAAA,GAAG;AACH,WAAO0d,QAAQ,EAAf;AACD,GApBD;;AAsBA/T,EAAAA,SAAS,GAAG,qBAAW;AACrBwc,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAxjB,IAAAA,OAAO;AACPwa,IAAAA,QAAQ;AACRgJ,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA,WAAOhJ,QAAQ,EAAf;AACD,GAVD;;AAYA9T,EAAAA,SAAS,GAAG,qBAAW;AACrBuc,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,IAAAA,UAAU;AACVwb,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,IAAAA,GAAG;AACHmD,IAAAA,OAAO;AACPgjB,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAqG,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA/U,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAld,IAAAA,OAAO;AACPua,IAAAA,QAAQ;AACR1d,IAAAA,GAAG;AACH,WAAO0d,QAAQ,EAAf;AACD,GApBD;;AAsBA9S,EAAAA,sBAAsB,GAAG,kCAAW;AAClC,WAAOub,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAX;AACD,GAFD;;AAIAj2B,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI,CAACiwB,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AACjB,aAAO,CAAP;AACD,KAFD,MAEO,IAAIA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,KAAmB,CAAvB,EAA0B;AAC/B,aAAO,CAAP;AACD,KAFM,MAEA,IAAIhT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,MAAqB9S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAzB,EAA2C;AAChD,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GAVD;;AAYAtoB,EAAAA,GAAG,GAAG,eAAW;AACf,QAAI6nB,CAAJ,EAAOoB,CAAP,EAAUtf,EAAV,EAAcif,CAAd,EAAiB7T,CAAjB,EAAoBmI,GAApB,EAAyBC,IAAzB;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ,CAHe,CAIf;;AACA5K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIt3B,aAAa,OAAO,CAAxB,EAA2B;AACzBw8B,MAAAA,WAAW,CAACz8B,GAAD,CAAX;AACAg8B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACDqL,IAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUwF,KAAd;AACAZ,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;;AACA,SAAK8mB,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF,UAAI,CAACjK,aAAa,CAAC+c,CAAC,CAACoB,CAAD,CAAF,CAAlB,EAA0B;AACxB;AACD;AACF;;AACD,QAAIA,CAAC,KAAKL,CAAV,EAAa;AACX3C,MAAAA,MAAM;AACP,KAFD,MAEO;AACL,WAAKgD,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG3H,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKtL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAvE,EAA8E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG2R,QAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACD;;AACDhpB,MAAAA,WAAW,CAACuV,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAD,CAAX;AACD;;AACD,WAAO/K,OAAO,EAAd;AACD,GA9BD,CA1/OU,CA0hPV;;;AACAtd,EAAAA,WAAW,GAAG,qBAAS2oB,CAAT,EAAY;AACxB,QAAIf,CAAJ,EAAO4M,oBAAP,EAA6B/L,CAA7B,EAAgCO,CAAhC,EAAmCtf,EAAnC,EAAuCuf,CAAvC,EAA0Cd,CAA1C,EAA6CrT,CAA7C,EAAgDiT,CAAhD,EAAmD9K,GAAnD,EAAwDC,IAAxD,EAA8DiN,CAA9D,EAAiE2I,KAAjE,EAAwEtI,CAAxE;AACA/B,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACAJ,IAAAA,CAAC,GAAG,CAAJ;AACAoC,IAAAA,CAAC,GAAG,CAAJ;AACA2I,IAAAA,KAAK,GAAG,CAAR;AACAtI,IAAAA,CAAC,GAAG,CAAJ;AACA5C,IAAAA,CAAC,GAAG,EAAJ,CAVwB,CAWxB;;AACAa,IAAAA,CAAC,GAAG7E,GAAG,GAAG+E,CAAC,GAAGA,CAAd,CAZwB,CAa5B;AAEI;AACJ;;AACI,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF8S,MAAAA,CAAC,CAACoB,CAAD,CAAD,GAAOA,CAAP;AACApB,MAAAA,CAAC,CAACoB,CAAC,GAAGL,CAAL,CAAD,GAAW,CAAX;AACAf,MAAAA,CAAC,CAACoB,CAAC,GAAGL,CAAJ,GAAQA,CAAT,CAAD,GAAe,CAAf;AACD;;AACDmK,IAAAA,KAAK,GAAG,CAAR;AACAzX,IAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,WAAO,CAAP,EAAU;AACR,UAAIwL,KAAK,KAAK,CAAd,EAAiB;AACflX,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACD;;AACD,WAAKoN,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3Fye,QAAAA,CAAC,GAAGQ,CAAC,GAAGf,CAAC,CAACoB,CAAD,CAAL,GAAWA,CAAf;AACA3N,QAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAC,GAAGN,CAAL,CAAN,CAAJ;AACAvV,QAAAA,QAAQ,GAHmF,CAG/E;AACb;;AACD1d,MAAAA,GAAG,GAXK,CAYR;;AACA+zB,MAAAA,CAAC,GAAGN,CAAC,GAAG,CAAR;AACAwB,MAAAA,CAAC,GAAG,CAAJ;AACAqK,MAAAA,oBAAoB,GAAG,KAAvB;;AACA,aAAO,CAAP,EAAU;AACRzM,QAAAA,CAAC,GAAGH,CAAC,CAACe,CAAC,GAAGM,CAAL,CAAD,GAAWrB,CAAC,CAACe,CAAC,GAAGA,CAAJ,GAAQM,CAAT,CAAhB;;AACA,YAAIlB,CAAC,GAAG,CAAR,EAAW;AACTH,UAAAA,CAAC,CAACe,CAAC,GAAGA,CAAJ,GAAQM,CAAT,CAAD,GAAe,CAACrB,CAAC,CAACe,CAAC,GAAGA,CAAJ,GAAQM,CAAT,CAAjB;AACAA,UAAAA,CAAC;AACD;AACD;;AACD,YAAIlB,CAAC,KAAKkB,CAAC,GAAG,CAAd,EAAiB;AACf,cAAIA,CAAC,KAAK,CAAV,EAAa;AACXuL,YAAAA,oBAAoB,GAAG,IAAvB;AACA;AACD;;AACDrK,UAAAA,CAAC;AACDvC,UAAAA,CAAC,CAACe,CAAC,GAAGA,CAAJ,GAAQM,CAAT,CAAD,GAAe,CAACrB,CAAC,CAACe,CAAC,GAAGA,CAAJ,GAAQM,CAAT,CAAjB;AACAA,UAAAA,CAAC;AACD;AACD;;AACD;AACD;;AACD,UAAIuL,oBAAJ,EAA0B;AACxB;AACD;;AACDhK,MAAAA,CAAC,GAAG5C,CAAC,CAACqB,CAAC,GAAGrB,CAAC,CAACe,CAAC,GAAGM,CAAL,CAAL,GAAekB,CAAhB,CAAL;AACAvC,MAAAA,CAAC,CAACqB,CAAC,GAAGrB,CAAC,CAACe,CAAC,GAAGM,CAAL,CAAL,GAAekB,CAAhB,CAAD,GAAsBvC,CAAC,CAACqB,CAAC,GAAGlB,CAAJ,GAAQoC,CAAT,CAAvB;AACAvC,MAAAA,CAAC,CAACqB,CAAC,GAAGlB,CAAJ,GAAQoC,CAAT,CAAD,GAAeK,CAAf;AACA5C,MAAAA,CAAC,CAACe,CAAC,GAAGM,CAAL,CAAD,GAAWlB,CAAX;AACA+K,MAAAA,KAAK,GAAG,CAACA,KAAT;AACD;;AACDvR,IAAAA,KAAK,CAACkH,CAAD,CAAL,GAAWlH,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAhB;AACA,WAAO5R,OAAO,CAACyW,CAAC,GAAG,CAAL,CAAd;AACD,GAtED,CA3hPU,CAmmPV;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;;;AACAxoB,EAAAA,IAAI,GAAG,gBAAW;AAChB8d,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIt3B,aAAa,OAAO,CAAxB,EAA2B;AACzBw8B,MAAAA,WAAW,CAACz8B,GAAD,CAAX;AACAg8B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACD0I,IAAAA,MAAM;AACN,WAAO1I,OAAO,EAAd;AACD,GAZD;;AAcA0I,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIgD,CAAJ,EAAOL,CAAP,EAAU7T,CAAV,EAAamI,GAAb;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;AACAA,IAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAJ;;AACA,SAAKW,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAC,GAAGA,CAA1B,EAA8B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAvD,EAA6D+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAApF,EAAuF;AACrFuG,MAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACD;;AACDnY,IAAAA,SAAS,CAAC8X,CAAD,CAAT;AACA3W,IAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAC,GAAGA,CAAX,CAAP;AACA,WAAOtN,IAAI,CAAC9F,EAAD,CAAX;AACD,GAXD,CA/nPU,CA4oPV;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACAvpB,EAAAA,CAAC,GAAG,WAASy8B,CAAT,EAAYE,CAAZ,EAAeK,CAAf,EAAkBC,CAAlB,EAAqB;AACvB,WAAO1H,KAAK,CAACkH,CAAC,GAAGE,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAZ;AACD,GAFD;;AAIA5J,EAAAA,IAAI,GAAG,cAASoJ,CAAT,EAAYE,CAAZ,EAAeK,CAAf,EAAkBC,CAAlB,EAAqB2H,KAArB,EAA4B;AACjC,WAAOrP,KAAK,CAACkH,CAAC,GAAGE,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAL,GAAuB2H,KAA9B;AACD,GAFD;;AAIA/f,EAAAA,SAAS,GAAG,mBAAS8X,CAAT,EAAY;AACtB,QAAIT,CAAJ,EAAOO,CAAP,EAAUO,CAAV,EAAatf,EAAb,EAAiBuf,CAAjB,EAAoBpZ,EAApB,EAAwB4a,EAAxB,EAA4BC,EAA5B,EAAgC5V,CAAhC,EAAmCmI,GAAnC,EAAwCC,IAAxC,EAA8CyN,IAA9C,EAAoDC,IAApD,EAA0DC,IAA1D,EAAgEC,IAAhE,EAAsEC,IAAtE,EAA4EC,IAA5E,EAAkFC,IAAlF;AACA/C,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAR,IAAAA,CAAC,GAAG7E,GAAG,GAAG+E,CAAC,GAAGA,CAAd;AACApT,IAAAA,EAAE,GAAGR,GAAL;;AACA,SAAKmT,CAAC,GAAGpT,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAC,GAAG,CAA1B,EAA8B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAvD,EAA6DiL,CAAC,GAAG,KAAKjL,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAApF,EAAuF;AACrF;AACA,UAAIpR,KAAK,CAAC1X,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOT,CAAP,EAAUA,CAAV,CAAF,EAAgBZ,IAAhB,CAAT,EAAgC;AACtC;AACQ,aAAK0B,CAAC,GAAGtf,EAAE,GAAGwT,IAAI,GAAGgL,CAAC,GAAG,CAApB,EAAuByC,IAAI,GAAGhC,CAAnC,EAAuCzL,IAAI,IAAIyN,IAAR,GAAejhB,EAAE,GAAGihB,IAApB,GAA2BjhB,EAAE,GAAGihB,IAAvE,EAA8E3B,CAAC,GAAG9L,IAAI,IAAIyN,IAAR,GAAe,EAAEjhB,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5G,cAAI,CAAChG,KAAK,CAAC1X,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOK,CAAP,EAAUd,CAAV,CAAF,EAAgBZ,IAAhB,CAAV,EAAiC;AAC/B;AACD;AACF;;AACD,YAAI0B,CAAC,KAAKL,CAAV,EAAa;AACXpT,UAAAA,EAAE,GAAG+R,IAAL;AACA;AACD,SAV6B,CAWtC;;;AACQ,aAAK2B,CAAC,GAAGpZ,EAAE,GAAG+a,IAAI,GAAG1C,CAAhB,EAAmB2C,IAAI,GAAGlC,CAA/B,EAAmCiC,IAAI,IAAIC,IAAR,GAAehb,EAAE,GAAGgb,IAApB,GAA2Bhb,EAAE,GAAGgb,IAAnE,EAA0E5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEhb,EAAjB,GAAsB,EAAEA,EAAtG,EAA0G;AACxG2F,UAAAA,EAAE,GAAGxpB,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOT,CAAP,EAAUe,CAAV,CAAN;AACA5J,UAAAA,IAAI,CAACoJ,CAAD,EAAIE,CAAJ,EAAOT,CAAP,EAAUe,CAAV,EAAaj9B,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOK,CAAP,EAAUC,CAAV,CAAd,CAAJ;AACA5J,UAAAA,IAAI,CAACoJ,CAAD,EAAIE,CAAJ,EAAOK,CAAP,EAAUC,CAAV,EAAazT,EAAb,CAAJ;AACD,SAhB6B,CAiB9B;;;AACA6F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,QAAAA,MAAM;AACNiC,QAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD,OAvBoF,CAwBrF;;;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAACrvB,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOT,CAAP,EAAUA,CAAV,CAAF,CAAJ;AACAtV,MAAAA,QAAQ;AACR2C,MAAAA,EAAE,GAAGqB,GAAG,EAAR,CA5BqF,CA6B3F;;AACM,WAAKoS,CAAC,GAAGyB,EAAE,GAAGK,IAAI,GAAG5C,CAAC,GAAG,CAApB,EAAuB6C,IAAI,GAAGpC,CAAnC,EAAuCmC,IAAI,IAAIC,IAAR,GAAeN,EAAE,GAAGM,IAApB,GAA2BN,EAAE,GAAGM,IAAvE,EAA8E/B,CAAC,GAAG8B,IAAI,IAAIC,IAAR,GAAe,EAAEN,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5G;AACApP,QAAAA,IAAI,CAACrvB,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOK,CAAP,EAAUd,CAAV,CAAF,CAAJ;AACA7M,QAAAA,IAAI,CAACrvB,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOT,CAAP,EAAUA,CAAV,CAAF,CAAJ;AACA1nB,QAAAA,MAAM;AACN8S,QAAAA,MAAM;AACNkC,QAAAA,EAAE,GAAGoB,GAAG,EAAR,CAN4G,CAO5G;;AACAyI,QAAAA,IAAI,CAACoJ,CAAD,EAAIE,CAAJ,EAAOK,CAAP,EAAUd,CAAV,EAAaZ,IAAb,CAAJ;;AACA,aAAK2B,CAAC,GAAGyB,EAAE,GAAGM,IAAI,GAAG9C,CAAC,GAAG,CAApB,EAAuB+C,IAAI,GAAGtC,CAAnC,EAAuCqC,IAAI,IAAIC,IAAR,GAAeP,EAAE,GAAGO,IAApB,GAA2BP,EAAE,GAAGO,IAAvE,EAA8EhC,CAAC,GAAG+B,IAAI,IAAIC,IAAR,GAAe,EAAEP,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5GrP,UAAAA,IAAI,CAACrvB,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOT,CAAP,EAAUe,CAAV,CAAF,CAAJ;AACA5N,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACrvB,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOK,CAAP,EAAUC,CAAV,CAAF,CAAJ;AACA/zB,UAAAA,GAAG;AACHmqB,UAAAA,IAAI,CAACoJ,CAAD,EAAIE,CAAJ,EAAOK,CAAP,EAAUC,CAAV,EAAarS,GAAG,EAAhB,CAAJ;AACD;AACF;AACF,KAxDqB,CAyDtB;;;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAACrvB,CAAC,CAACy8B,CAAD,EAAIE,CAAJ,EAAOA,CAAC,GAAG,CAAX,EAAcA,CAAC,GAAG,CAAlB,CAAF,CAAJ;AACA/V,IAAAA,QAAQ;AACR,WAAO2C,EAAE,GAAGqB,GAAG,EAAf;AACD,GA9DD,CA/pPU,CA+tPV;AAEA;AAEA;AACA;AACA;AACA;;;AACApzB,EAAAA,UAAU,GAAG,sBAAW;AACtB63B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOqf,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjB2d,IAAAA,IAAI;AACJkH,IAAAA,MAAM;AACN,WAAO3H,OAAO,EAAd;AACD,GAJD,CA7uPU,CAmvPV;;;AACA2H,EAAAA,MAAM,GAAG,kBAAW;AAClB1P,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvK,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB,UAAIA,EAAE,CAAC2S,CAAH,KAAS,CAAb,EAAgB;AACdtM,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,OAHD,MAGO;AACLA,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD;AACF;;AACD,QAAI5M,UAAU,CAACuG,EAAD,CAAd,EAAoB;AAClB,UAAIxoB,KAAK,CAAC6kB,IAAI,CAAC2D,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASrS,EAAE,CAACwS,CAAH,CAAKF,CAAd,CAAL,CAAT,EAAiC;AAC/BjM,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,OAHD,MAGO;AACLA,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD;AACF;;AACD,QAAI7hB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BytB,MAAAA,WAAW,CAACt8B,KAAD,CAAX;AACA67B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAI5C,cAAc,CAAC2H,EAAD,CAAlB,EAAwB;AACtBuG,MAAAA,WAAW,CAACt8B,KAAD,CAAX;AACA67B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN9C,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAI5C,cAAc,CAAC2H,EAAD,CAAd,IAAuBxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAlB,IAA2BmyB,cAAc,CAAC/T,IAAI,CAAC0b,EAAD,CAAL,CAApE,EAAiF;AAC/E8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACNiC,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACDkF,IAAAA,WAAW,CAACt8B,KAAD,CAAX;AACA67B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GAzCD,CApvPU,CA+xPV;AAEA;AAEA;AAEA;AAEA;;;AACA9P,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI+nB,CAAJ,EAAOO,CAAP,EAAUL,CAAV,EAAa7T,CAAb,EAAgBmI,GAAhB,EAAqBmN,aAArB;AACApB,IAAAA,CAAC,GAAG,CAAJ;AACAP,IAAAA,CAAC,GAAG,CAAJ;AACAE,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI;AACJ0K,IAAAA,CAAC,GAAG7E,GAAG,GAAG,CAAV;AACAjjB,IAAAA,gBAAgB;AAChBgoB,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV,CARoB,CASpB;;AACA2B,IAAAA,aAAa,GAAG7I,KAAK,CAAC8I,KAAN,CAAY5B,CAAZ,EAAeA,CAAC,GAAGE,CAAnB,CAAhB;AACAyB,IAAAA,aAAa,CAACE,IAAd,CAAmBzuB,SAAnB;AACA0lB,IAAAA,KAAK,GAAGA,KAAK,CAAC8I,KAAN,CAAY,CAAZ,EAAe5B,CAAf,EAAkB8B,MAAlB,CAAyBH,aAAzB,EAAwCG,MAAxC,CAA+ChJ,KAAK,CAAC8I,KAAN,CAAY5B,CAAC,GAAGE,CAAhB,CAA/C,CAAR;AACApT,IAAAA,EAAE,GAAG5f,YAAY,CAACgzB,CAAD,CAAjB;AACApT,IAAAA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAhT,IAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFS,MAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzH,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAzB;AACD;;AACDhX,IAAAA,OAAO,CAACyW,CAAD,CAAP;AACApN,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAtBD;;AAwBA3c,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAI8nB,CAAJ,EAAOO,CAAP,EAAUb,CAAV,EAAaQ,CAAb,EAAgB7T,CAAhB,EAAmBmI,GAAnB;AACAwL,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,CAAJ;AACAQ,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA6R,IAAAA,CAAC,GAAG7E,GAAJ,CAR4B,CAS5B;;AACA,QAAI/Y,aAAa,CAAC0K,EAAD,CAAjB,EAAuB;AACrB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3P,MAAAA,mBAAmB;AACpB,KAHD,MAGO,IAAI7L,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAClC4/B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAphB,MAAAA,YAAY,GAFsB,CAGpC;AACA;AACA;AACA;;AACC,KAPM,MAOA,IAAI4F,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AACvCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,UAAI1K,aAAa,CAAC9Q,GAAG,CAACwb,EAAD,CAAJ,CAAjB,EAA4B;AAC1B8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA3P,QAAAA,mBAAmB;AACnB2P,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBC,QAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,YAAIxb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BgtB,UAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;AACA6F,UAAAA,IAAI,CAACzhB,KAAK,CAAC4b,EAAD,CAAN,CAAJ;AACD,SAHD,MAGO;AACL6F,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,UAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD;;AACDQ,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KAlBM,MAkBA,IAAIxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AACpCgtB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACD,KAHM,MAGA;AACL8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD;;AACDoT,IAAAA,CAAC,GAAGvE,GAAJ,CA7C4B,CA8C5B;;AACAvI,IAAAA,IAAI,CAACtG,GAAD,CAAJ;;AACA9M,IAAAA,IAAG,CAACwgB,CAAD,EAAIN,CAAJ,CAAH,CAhD4B,CAiD5B;;;AACAQ,IAAAA,CAAC,GAAG/E,GAAG,GAAGuE,CAAV;;AACA,SAAKa,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFyM,MAAAA,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAL,GAAezH,KAAK,CAAC4G,CAAC,GAAGa,CAAL,CAApB;AACD;;AACDhX,IAAAA,OAAO,CAACyW,CAAC,GAAGE,CAAL,CAAP;AACA,WAAOrL,OAAO,EAAd;AACD,GAxDD,CAh0PU,CA03PV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACArV,EAAAA,IAAG,GAAG,aAASwgB,CAAT,EAAYN,CAAZ,EAAe;AACnB,QAAIiK,IAAJ,EAAUpJ,CAAV,EAAalU,CAAb,EAAgBmI,GAAhB;AACAmV,IAAAA,IAAI,GAAG,CAAP;AACApJ,IAAAA,CAAC,GAAG,CAAJ;AACAjL,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI6R,CAAC,KAAKN,CAAV,EAAa;AACX9M,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD9H,IAAAA,EAAE,GAAG+L,KAAK,CAACkH,CAAC,GAAG,CAAL,CAAV;AACAhT,IAAAA,EAAE,GAAG8L,KAAK,CAACkH,CAAC,GAAG,CAAL,CAAV;AACApN,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA2c,IAAAA,IAAI,GAAGrb,WAAW,EAAlB;;AACA,QAAI,CAACsV,KAAK,CAAC+F,IAAD,CAAV,EAAkB;AAChB,WAAKpJ,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGkM,IAAI,CAACr0B,GAAL,CAASs9B,IAAT,CAAtB,EAAuC,KAAKnV,GAAL,GAAWnI,CAAC,IAAImI,GAAhB,GAAsBnI,CAAC,IAAImI,GAAlE,EAAwE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA/F,EAAkG;AAChGuG,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAoG,QAAAA,YAAY,CAACmE,IAAI,CAACqS,IAAD,CAAJ,GAAapJ,CAAd,CAAZ;AACAhS,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;;AACR3K,QAAAA,IAAG,CAACwgB,CAAC,GAAG,CAAL,EAAQN,CAAR,CAAH;AACD;AACF;;AACD,WAAO7K,OAAO,EAAd;AACD,GA1BD,CAp5PU,CAg7PV;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;;;AACAnpB,EAAAA,YAAY,GAAG,wBAAW;AACxB4pB,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAFwB,CAGxB;;AACAnB,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACAA,IAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;;AACA,WAAOvJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB4F,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACAlO,MAAAA,GAAG;AACHkO,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD,KAXuB,CAYxB;;;AACAD,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIzI,SAAS,CAACqH,EAAD,CAAb,EAAmB;AACjB6F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAuI,MAAAA,OAAO;AACP;AACD,KAnBuB,CAoBxB;;;AACA,QAAIzS,aAAa,CAAC2K,EAAD,CAAjB,EAAuB;AACrB6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5P,MAAAA,mBAAmB;AACpB,KAHD,MAGO,IAAI7L,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AACvC2oB,MAAAA,EAAE,GAAGhb,GAAG,CAAC+a,EAAD,CAAR;;AACA,UAAI3K,aAAa,CAAC9Q,GAAG,CAAC0b,EAAD,CAAJ,CAAjB,EAA4B;AAC1B4F,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA7P,QAAAA,mBAAmB;AACpB,OAHD,MAGO;AACLyV,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA4F,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD;;AACDU,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;;AACA,aAAOvJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB4F,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA4F,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAU,QAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;AACF,KAfM,MAeA;AACL4F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD,KA1CuB,CA2CxB;;;AACAsG,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA/K,IAAAA,OAAO;AACP+K,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA7R,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB4F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA7C,MAAAA,QAAQ;AACR1d,MAAAA,GAAG;AACHugB,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACD4F,IAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA,WAAOuI,OAAO,EAAd;AACD,GA1DD,CA57PU,CAw/PV;;;AACAlc,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAIwmB,CAAJ,EAAOC,CAAP,EAAU4M,IAAV,EAAgBrC,IAAhB,EAAsBrF,MAAtB,EAA8B2H,KAA9B;AACA9M,IAAAA,CAAC,GAAG,GAAJ;AACAC,IAAAA,CAAC,GAAG,GAAJ;AACA4M,IAAAA,IAAI,GAAG,GAAP;AACArC,IAAAA,IAAI,GAAG,GAAP;AACArF,IAAAA,MAAM,GAAG,GAAT;AACA2H,IAAAA,KAAK,GAAG,GAAR;AACAtC,IAAAA,IAAI,GAAGvb,UAAU,EAAjB;AACA4d,IAAAA,IAAI,GAAG5d,UAAU,EAAjB,CATgB,CAUhB;;AACA,QAAI4d,IAAI,KAAK,GAAT,IAAgBrC,IAAI,GAAG,GAA3B,EAAgC;AAC9BxQ,MAAAA,IAAI,CAAC,gBAAD,CAAJ;AACD,KAbe,CAchB;;;AACA,QAAI6S,IAAI,IAAI,GAAR,IAAgBrC,IAAI,GAAG,GAAR,KAAiB,GAApC,EAAyC;AACvCrF,MAAAA,MAAM,GAAG5D,IAAI,CAACwC,GAAL,CAAS8I,IAAT,EAAerC,IAAf,CAAT;AACA5W,MAAAA,WAAW,CAACuR,MAAD,CAAX;AACA;AACD;;AACDA,IAAAA,MAAM,GAAG5D,IAAI,CAACwC,GAAL,CAASxC,IAAI,CAACr0B,GAAL,CAAS2/B,IAAT,CAAT,EAAyBrC,IAAzB,CAAT;AACAsC,IAAAA,KAAK,GAAGvL,IAAI,CAACh7B,EAAL,GAAUikC,IAAlB,CArBgB,CAsBhB;;AACA,QAAKA,IAAI,GAAG,GAAR,KAAiB,GAArB,EAA0B;AACxBxK,MAAAA,CAAC,GAAG,GAAJ;AACAC,MAAAA,CAAC,GAAGsB,IAAI,CAACwE,GAAL,CAAS+G,KAAT,CAAJ;AACD,KAHD,MAGO;AACL9M,MAAAA,CAAC,GAAGuB,IAAI,CAACiL,GAAL,CAASM,KAAT,CAAJ;AACA7M,MAAAA,CAAC,GAAGsB,IAAI,CAACwE,GAAL,CAAS+G,KAAT,CAAJ;AACD;;AACDlZ,IAAAA,WAAW,CAACoM,CAAC,GAAGmF,MAAL,CAAX;AACAvR,IAAAA,WAAW,CAACqM,CAAC,GAAGkF,MAAL,CAAX;AACA1R,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAgJ,IAAAA,QAAQ;AACR,WAAO1d,GAAG,EAAV;AACD,GAnCD;AAqCA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiCE;AACA;;;AACA9U,EAAAA,KAAK,GAAG,CAAR;AAEAE,EAAAA,QAAQ,GAAG,EAAX;AAEAC,EAAAA,QAAQ,GAAG,EAAX;;AAEAqD,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIvD,aAAa,OAAO,CAAxB,EAA2B;AACzBuhC,MAAAA,IAAI,CAAC,wCAAD,CAAJ;AACD;;AACD5f,IAAAA,KAAK,CAAC/hB,KAAD,CAAL;AACAs1B,IAAAA,EAAE,GAAGoP,UAAU,CAAC,GAAD,CAAf;AACApF,IAAAA,WAAW,CAAChK,EAAD,EAAKC,EAAL,CAAX;AACAD,IAAAA,EAAE,GAAGoP,UAAU,CAAC,GAAD,CAAf;AACApF,IAAAA,WAAW,CAAChK,EAAD,EAAKE,EAAL,CAAX;AACA,WAAO4F,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAVD;;AAYApJ,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIxD,aAAa,OAAO,CAAxB,EAA2B;AACzBy7B,MAAAA,WAAW,CAAC57B,QAAD,CAAX;AACAm7B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACDxO,IAAAA,KAAK,CAAC9hB,QAAD,CAAL;AACA,WAAOm7B,IAAI,CAAC7F,EAAD,CAAX;AACD,GATD;;AAWA1xB,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIzD,aAAa,OAAO,CAAxB,EAA2B;AACzBy7B,MAAAA,WAAW,CAAC37B,QAAD,CAAX;AACAk7B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACDxO,IAAAA,KAAK,CAAC7hB,QAAD,CAAL;AACA,WAAOk7B,IAAI,CAAC5F,EAAD,CAAX;AACD,GATD;;AAWAp1B,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI2oC,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcpZ,EAAd,EAAkB4a,EAAlB,EAAsB3V,CAAtB,EAAyBmI,GAAzB,EAA8BC,IAA9B,EAAoCyN,IAApC,EAA0CC,IAA1C,EAAgDC,IAAhD;AACA7B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACA5N,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;;AACJulC,IAAAA,QAAO;;AACPvlC,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAACrH,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AACjB,aAAO,CAAP;AACD;;AACD,QAAIA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,KAAmB,CAAnB,IAAwBhT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,MAAqB9S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAjD,EAAmE;AACjEzG,MAAAA,IAAI,CAAC,wCAAD,CAAJ;AACD;;AACDxhC,IAAAA,KAAK,GAAGm1B,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAR;;AACA,SAAKW,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG78B,KAAtB,EAA8B,KAAK68B,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAvD,EAA6D+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAApF,EAAuF;AACrF,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG98B,KAAxB,EAAgC,KAAK88B,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAA7D,EAAoE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/F,YAAI,CAAC2C,QAAQ,CAACkJ,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG4oC,CAAR,GAAYC,CAA3B,CAAD,CAAb,EAA8C;AAC5CrH,UAAAA,IAAI,CAAC,gCAAD,CAAJ;AACD;AACF;AACF;;AACD,SAAKoH,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGvqC,KAAK,GAAG,CAAhC,EAAoC,KAAKuqC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAjE,EAAwE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAjG,EAAqG;AACnG,WAAKoZ,CAAC,GAAGwB,EAAE,GAAGG,IAAI,GAAG5B,CAAC,GAAG,CAApB,EAAuB6B,IAAI,GAAGzqC,KAAnC,EAA2CwqC,IAAI,IAAIC,IAAR,GAAeJ,EAAE,GAAGI,IAApB,GAA2BJ,EAAE,GAAGI,IAA3E,EAAkF5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEJ,EAAjB,GAAsB,EAAEA,EAA9G,EAAkH;AAChH,YAAItB,IAAI,CAACr0B,GAAL,CAASygB,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG4oC,CAAR,GAAYC,CAA3B,EAA8Bf,CAA9B,GAAkC3S,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG6oC,CAAR,GAAYD,CAA3B,EAA8Bd,CAAzE,IAA8E,KAAlF,EAAyF;AACvFtG,UAAAA,IAAI,CAAC,kCAAD,CAAJ;AACD;AACF;AACF;;AACD,WAAO,CAAP;AACD,GA/BD,CAvpQU,CAwrQV;AAEA;AAEA;AAEA;AAEA;;;AACA5f,EAAAA,KAAK,GAAG,eAAS2yB,EAAT,EAAa;AACnB,QAAI3L,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcpZ,EAAd,EAAkB4a,EAAlB,EAAsBC,EAAtB,EAA0B8E,EAA1B,EAA8B1a,CAA9B,EAAiC4a,EAAjC,EAAqCG,EAArC,EAAyCE,EAAzC,EAA6C9S,GAA7C,EAAkDC,IAAlD,EAAwD0X,KAAxD,EAA+DjK,IAA/D,EAAqEC,IAArE,EAA2EC,IAA3E,EAAiFC,IAAjF,EAAuFC,IAAvF,EAA6FC,IAA7F,EAAmGC,IAAnG,EAAyGC,IAAzG,EAA+G5C,OAA/G,EAAwH8H,EAAxH;AACApH,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ,CAHmB,CAIvB;AAEI;;AACA,SAAKD,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG78B,KAAK,GAAGA,KAA9B,EAAsC,KAAK68B,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAA/D,EAAqE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA5F,EAA+F;AAC7Fx0B,MAAAA,QAAQ,CAAC0oC,CAAD,CAAR,GAAc,GAAd;AACD,KATkB,CAUvB;AACA;AAEI;;;AACA,SAAKA,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG98B,KAAK,GAAGA,KAAhC,EAAwC,KAAK88B,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAArE,EAA4E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAArG,EAAyG;AACvGnpB,MAAAA,QAAQ,CAACyoC,CAAD,CAAR,GAAc,GAAd;AACD,KAhBkB,CAiBvB;AACA;AAEI;;;AACA,SAAKA,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGvqC,KAAxB,EAAgC,KAAKuqC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA7D,EAAoE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FvvB,MAAAA,QAAQ,CAACF,KAAK,GAAG4oC,CAAR,GAAYA,CAAb,CAAR,GAA0BzT,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG4oC,CAAR,GAAYA,CAA3B,EAA8Bd,CAAxD;;AACA,WAAKe,CAAC,GAAGwB,EAAE,GAAGG,IAAI,GAAG5B,CAAC,GAAG,CAApB,EAAuB6B,IAAI,GAAGzqC,KAAnC,EAA2CwqC,IAAI,IAAIC,IAAR,GAAeJ,EAAE,GAAGI,IAApB,GAA2BJ,EAAE,GAAGI,IAA3E,EAAkF5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEJ,EAAjB,GAAsB,EAAEA,EAA9G,EAAkH;AAChHnqC,QAAAA,QAAQ,CAACF,KAAK,GAAG4oC,CAAR,GAAYC,CAAb,CAAR,GAA0B1T,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG4oC,CAAR,GAAYC,CAA3B,EAA8Bf,CAAxD;AACA5nC,QAAAA,QAAQ,CAACF,KAAK,GAAG6oC,CAAR,GAAYD,CAAb,CAAR,GAA0BzT,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG4oC,CAAR,GAAYC,CAA3B,EAA8Bf,CAAxD;AACD;AACF,KA3BkB,CA4BvB;;;AACI,SAAKc,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYI,IAAI,GAAG1qC,KAAxB,EAAgC,KAAK0qC,IAAL,GAAYJ,EAAE,GAAGI,IAAjB,GAAwBJ,EAAE,GAAGI,IAA7D,EAAoE9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAEJ,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FnqC,MAAAA,QAAQ,CAACH,KAAK,GAAG4oC,CAAR,GAAYA,CAAb,CAAR,GAA0B,GAA1B;;AACA,WAAKC,CAAC,GAAGuG,EAAE,GAAGzE,IAAI,GAAG/B,CAAC,GAAG,CAApB,EAAuBgC,IAAI,GAAG5qC,KAAnC,EAA2C2qC,IAAI,IAAIC,IAAR,GAAewE,EAAE,GAAGxE,IAApB,GAA2BwE,EAAE,GAAGxE,IAA3E,EAAkF/B,CAAC,GAAG8B,IAAI,IAAIC,IAAR,GAAe,EAAEwE,EAAjB,GAAsB,EAAEA,EAA9G,EAAkH;AAChHjvC,QAAAA,QAAQ,CAACH,KAAK,GAAG4oC,CAAR,GAAYC,CAAb,CAAR,GAA0B,GAA1B;AACA1oC,QAAAA,QAAQ,CAACH,KAAK,GAAG6oC,CAAR,GAAYD,CAAb,CAAR,GAA0B,GAA1B;AACD;AACF,KAnCkB,CAoCvB;;;AACI,SAAKA,CAAC,GAAG0G,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,GAAtB,EAA2B1G,CAAC,GAAG,EAAE0G,EAAjC,EAAqC;AACnC,UAAIhO,IAAI,OAAO,CAAf,EAAkB;AAChB;AACD;AACF;;AACD,QAAIsH,CAAC,KAAK,GAAV,EAAe;AACb6L,MAAAA,QAAQ,CAAC,kCAAD,CAAR;AACD,KA5CkB,CA6CnB;;;AACA,QAAIF,EAAE,KAAK10C,KAAP,IAAgB00C,EAAE,KAAKz0C,QAA3B,EAAqC;AACnCm7B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjY,MAAAA,WAAW;AACXkY,MAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,WAAKoS,CAAC,GAAG6G,EAAE,GAAG,CAAT,EAAY5E,IAAI,GAAG7qC,KAAxB,EAAgC,KAAK6qC,IAAL,GAAY4E,EAAE,GAAG5E,IAAjB,GAAwB4E,EAAE,GAAG5E,IAA7D,EAAoEjC,CAAC,GAAG,KAAKiC,IAAL,GAAY,EAAE4E,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/F,aAAK5G,CAAC,GAAG8G,EAAE,GAAG,CAAT,EAAY7E,IAAI,GAAG9qC,KAAxB,EAAgC,KAAK8qC,IAAL,GAAY6E,EAAE,GAAG7E,IAAjB,GAAwB6E,EAAE,GAAG7E,IAA7D,EAAoEjC,CAAC,GAAG,KAAKiC,IAAL,GAAY,EAAE6E,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FvU,UAAAA,WAAW,CAACl7B,QAAQ,CAACF,KAAK,GAAG4oC,CAAR,GAAYC,CAAb,CAAT,CAAX;AACAzT,UAAAA,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG4oC,CAAR,GAAYC,CAA3B,IAAgCrS,GAAG,EAAnC;AACD;AACF;AACF,KAxDkB,CAyDnB;;;AACA,QAAI+d,EAAE,KAAK10C,KAAP,IAAgB00C,EAAE,KAAKx0C,QAA3B,EAAqC;AACnCk7B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjY,MAAAA,WAAW;AACXmY,MAAAA,EAAE,GAAGmB,GAAG,EAAR;AACA0R,MAAAA,OAAO,GAAG,EAAV;;AACA,WAAKU,CAAC,GAAGoH,EAAE,GAAG,CAAT,EAAYwE,KAAK,GAAGx0C,KAAzB,EAAiC,KAAKw0C,KAAL,GAAaxE,EAAE,GAAGwE,KAAlB,GAA0BxE,EAAE,GAAGwE,KAAhE,EAAwE5L,CAAC,GAAG,KAAK4L,KAAL,GAAa,EAAExE,EAAf,GAAoB,EAAEA,EAAlG,EAAsG;AACpG9H,QAAAA,OAAO,CAACjN,IAAR,CAAc,YAAW;AACvB,cAAIyZ,KAAJ,EAAWC,QAAX,EAAqBzE,EAArB;AACAyE,UAAAA,QAAQ,GAAG,EAAX;;AACA,eAAK9L,CAAC,GAAGqH,EAAE,GAAG,CAAT,EAAYwE,KAAK,GAAG10C,KAAzB,EAAiC,KAAK00C,KAAL,GAAaxE,EAAE,GAAGwE,KAAlB,GAA0BxE,EAAE,GAAGwE,KAAhE,EAAwE7L,CAAC,GAAG,KAAK6L,KAAL,GAAa,EAAExE,EAAf,GAAoB,EAAEA,EAAlG,EAAsG;AACpG9U,YAAAA,WAAW,CAACj7B,QAAQ,CAACH,KAAK,GAAG4oC,CAAR,GAAYC,CAAb,CAAT,CAAX;AACA8L,YAAAA,QAAQ,CAAC1Z,IAAT,CAAc5F,EAAE,CAACuN,MAAH,CAAU9gB,IAAV,CAAe9hB,KAAK,GAAG4oC,CAAR,GAAYC,CAA3B,IAAgCrS,GAAG,EAAjD;AACD;;AACD,iBAAOme,QAAP;AACD,SARY,EAAb;AASD;;AACD,aAAOzM,OAAP;AACD;AACF,GA5ED,CAjsQU,CA+wgBAAW;AAChB,QAAIhkB,KAAJ,EAAWsrB,CAAX,EAActf,EAAd,EAAkBuf,CAAlB,EAAqBnU,CAArB,EAAwBmI,GAAxB,EAA6BC,IAA7B,EAAmCyN,IAAnC;AACA3B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAvrB,IAAAA,KAAK,GAAG,CAAR,CAJgB,CAKpB;;AACI,SAAKsrB,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG78B,KAAK,GAAG,CAA9B,EAAkC,KAAK68B,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAA3D,EAAiE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAxF,EAA2F;AACzF,WAAKmU,CAAC,GAAGvf,EAAE,GAAGwT,IAAI,GAAG8L,CAAC,GAAG,CAApB,EAAuB2B,IAAI,GAAGvqC,KAAnC,EAA2C88B,IAAI,IAAIyN,IAAR,GAAejhB,EAAE,GAAGihB,IAApB,GAA2BjhB,EAAE,GAAGihB,IAA3E,EAAkF1B,CAAC,GAAG/L,IAAI,IAAIyN,IAAR,GAAe,EAAEjhB,EAAjB,GAAsB,EAAEA,EAA9G,EAAkH;AAChH,YAAIppB,QAAQ,CAACF,KAAK,GAAG4oC,CAAR,GAAYC,CAAb,CAAR,KAA4B,GAAhC,EAAqC;AACnCtH,UAAAA,KAAK,CAACqH,CAAD,EAAIC,CAAJ,CAAL;AACAvrB,UAAAA,KAAK;AACN;AACF;AACF;;AACD,WAAOA,KAAP;AACD,GAfD;;AAiBAikB,EAAAA,KAAK,GAAG,eAAS2H,CAAT,EAAYvB,CAAZ,EAAe;AACrB,QAAIuG,CAAJ,EAAO0G,EAAP,EAAWtrB,EAAX,EAAemG,EAAf,EAAmBsY,CAAnB,EAAsBrT,CAAtB,EAAyBmI,GAAzB,EAA8BC,IAA9B,EAAoCyN,IAApC,EAA0CR,CAA1C,EAA6C8K,EAA7C,EAAiDzK,CAAjD,EAAoDkK,KAApD;AACAvM,IAAAA,CAAC,GAAG,CAAJ;AACAqC,IAAAA,CAAC,GAAG,GAAJ;AACAkK,IAAAA,KAAK,GAAG,GAAR;AACApG,IAAAA,CAAC,GAAG,GAAJ;AACA0G,IAAAA,EAAE,GAAG,GAAL;AACA7K,IAAAA,CAAC,GAAG,GAAJ;AACA8K,IAAAA,EAAE,GAAG,GAAL,CARqB,CASrB;AAEA;;AACAP,IAAAA,KAAK,GAAG,OAAOp0C,QAAQ,CAACF,KAAK,GAAGkpC,CAAR,GAAYA,CAAb,CAAR,GAA0BhpC,QAAQ,CAACF,KAAK,GAAG2nC,CAAR,GAAYA,CAAb,CAAzC,IAA4DznC,QAAQ,CAACF,KAAK,GAAGkpC,CAAR,GAAYvB,CAAb,CAA5E;AACAyC,IAAAA,CAAC,GAAG,OAAOrB,IAAI,CAACr0B,GAAL,CAAS4/B,KAAT,IAAkBvL,IAAI,CAACC,IAAL,CAAUsL,KAAK,GAAGA,KAAR,GAAgB,GAA1B,CAAzB,CAAJ;;AACA,QAAIA,KAAK,GAAG,GAAZ,EAAiB;AACflK,MAAAA,CAAC,GAAG,CAACA,CAAL;AACD;;AACD8D,IAAAA,CAAC,GAAG,MAAMnF,IAAI,CAACC,IAAL,CAAUoB,CAAC,GAAGA,CAAJ,GAAQ,GAAlB,CAAV;AACAL,IAAAA,CAAC,GAAGK,CAAC,GAAG8D,CAAR,CAlBqB,CAmBzB;AAEI;;AACA,SAAKnG,CAAC,GAAGrT,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG78B,KAAtB,EAA8B,KAAK68B,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAvD,EAA6DkL,CAAC,GAAG,KAAKlL,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAApF,EAAuF;AACrFkgB,MAAAA,EAAE,GAAG10C,QAAQ,CAACF,KAAK,GAAGkpC,CAAR,GAAYnB,CAAb,CAAb;AACA8M,MAAAA,EAAE,GAAG30C,QAAQ,CAACF,KAAK,GAAG2nC,CAAR,GAAYI,CAAb,CAAb;AACA7nC,MAAAA,QAAQ,CAACF,KAAK,GAAGkpC,CAAR,GAAYnB,CAAb,CAAR,GAA0BmG,CAAC,GAAG0G,EAAJ,GAAS7K,CAAC,GAAG8K,EAAvC;AACA30C,MAAAA,QAAQ,CAACF,KAAK,GAAG2nC,CAAR,GAAYI,CAAb,CAAR,GAA0BmG,CAAC,GAAG2G,EAAJ,GAAS9K,CAAC,GAAG6K,EAAvC;AACD,KA3BoB,CA4BzB;AAEI;;;AACA,SAAK7M,CAAC,GAAGze,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG98B,KAAxB,EAAgC,KAAK88B,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAA7D,EAAoEiL,CAAC,GAAG,KAAKjL,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FsrB,MAAAA,EAAE,GAAG10C,QAAQ,CAACF,KAAK,GAAG+nC,CAAR,GAAYmB,CAAb,CAAb;AACA2L,MAAAA,EAAE,GAAG30C,QAAQ,CAACF,KAAK,GAAG+nC,CAAR,GAAYJ,CAAb,CAAb;AACAznC,MAAAA,QAAQ,CAACF,KAAK,GAAG+nC,CAAR,GAAYmB,CAAb,CAAR,GAA0BgF,CAAC,GAAG0G,EAAJ,GAAS7K,CAAC,GAAG8K,EAAvC;AACA30C,MAAAA,QAAQ,CAACF,KAAK,GAAG+nC,CAAR,GAAYJ,CAAb,CAAR,GAA0BuG,CAAC,GAAG2G,EAAJ,GAAS9K,CAAC,GAAG6K,EAAvC;AACD,KApCoB,CAqCzB;AAEI;;;AACA,SAAK7M,CAAC,GAAGtY,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGvqC,KAAxB,EAAgC,KAAKuqC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA7D,EAAoExC,CAAC,GAAG,KAAKwC,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FmlB,MAAAA,EAAE,GAAGz0C,QAAQ,CAACH,KAAK,GAAGkpC,CAAR,GAAYnB,CAAb,CAAb;AACA8M,MAAAA,EAAE,GAAG10C,QAAQ,CAACH,KAAK,GAAG2nC,CAAR,GAAYI,CAAb,CAAb;AACA5nC,MAAAA,QAAQ,CAACH,KAAK,GAAGkpC,CAAR,GAAYnB,CAAb,CAAR,GAA0BmG,CAAC,GAAG0G,EAAJ,GAAS7K,CAAC,GAAG8K,EAAvC;AACA10C,MAAAA,QAAQ,CAACH,KAAK,GAAG2nC,CAAR,GAAYI,CAAb,CAAR,GAA0BmG,CAAC,GAAG2G,EAAJ,GAAS9K,CAAC,GAAG6K,EAAvC;AACD;;AACD10C,IAAAA,QAAQ,CAACF,KAAK,GAAGkpC,CAAR,GAAYvB,CAAb,CAAR,GAA0B,GAA1B;AACA,WAAOznC,QAAQ,CAACF,KAAK,GAAG2nC,CAAR,GAAYuB,CAAb,CAAR,GAA0B,GAAjC;AACD,GAhDD;;AAkDAvlC,EAAAA,QAAQ,GAAG,oBAAW;AACpBs3B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOmkC,IAAI,EAAX;AACD,GAJD;;AAMAA,EAAAA,IAAI,GAAG,gBAAW;AAChBnH,IAAAA,IAAI;AACJmI,IAAAA,KAAK;AACL,WAAO5I,OAAO,EAAd;AACD,GAJD;;AAMA4I,EAAAA,KAAK,GAAG,iBAAW;AACjB,QAAIgC,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvK,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAG,MAAMrkB,IAAI,CAAC0R,EAAE,CAAC2S,CAAJ,CAAd;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAI9c,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACD,QAAI1Z,cAAc,CAAC2H,EAAD,CAAlB,EAAwB;AACtBuG,MAAAA,WAAW,CAACt7B,GAAD,CAAX;AACA66B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN9C,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8C,MAAAA,MAAM;AACN;AACD;;AACDwI,IAAAA,WAAW,CAACt7B,GAAD,CAAX;AACA66B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,GAxBD,CApiRU,CA8jRV;AAEA;AAEA;AAEA;AAEA;;;AACAxsB,EAAAA,SAAS,GAAG,qBAAW;AACrBq3B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOokC,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjBpH,IAAAA,IAAI;AACJoI,IAAAA,MAAM;AACN,WAAO7I,OAAO,EAAd;AACD,GAJD;;AAMA6I,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAI+B,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvK,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGrkB,IAAI,CAAC0R,EAAE,CAAC2S,CAAJ,CAAR;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAI9c,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA;AACD;;AACD+G,IAAAA,WAAW,CAACr7B,IAAD,CAAX;AACA46B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,GAhBD,CAnlRU,CAqmRV;;;AACA3M,EAAAA,IAAI,GAAG,cAASwlB,CAAT,EAAY;AACjB,QAAI6L,GAAJ,EAAS1K,CAAT,EAAY+G,CAAZ;;AACA,QAAIlI,CAAC,KAAK,CAAV,EAAa;AACX,aAAO,GAAP;AACD;;AACDmB,IAAAA,CAAC,GAAG,GAAJ;AACA+G,IAAAA,CAAC,GAAG,GAAJ;AACA2D,IAAAA,GAAG,GAAG,GAAN;AACA3D,IAAAA,CAAC,GAAGpI,IAAI,CAACr0B,GAAL,CAASu0B,CAAT,CAAJ;AACAmB,IAAAA,CAAC,GAAG,OAAO,MAAM,MAAM+G,CAAnB,CAAJ;AACA2D,IAAAA,GAAG,GAAG1K,CAAC,GAAGrB,IAAI,CAACgM,GAAL,CAAS,CAAC5D,CAAD,GAAKA,CAAL,GAAS,UAAT,GAAsB/G,CAAC,IAAI,aAAaA,CAAC,IAAI,aAAaA,CAAC,IAAI,aAAaA,CAAC,IAAI,CAAC,UAAD,GAAcA,CAAC,IAAI,aAAaA,CAAC,IAAI,CAAC,UAAD,GAAcA,CAAC,IAAI,aAAaA,CAAC,IAAI,CAAC,UAAD,GAAcA,CAAC,GAAG,UAAtB,CAAlB,CAAnB,CAAlB,CAAnB,CAAlB,CAAlB,CAAlB,CAAhC,CAAV;;AACA,QAAInB,CAAC,IAAI,GAAT,EAAc;AACZ,aAAO6L,GAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMA,GAAb;AACD;AACF,GAhBD,CAtmRU,CAwnRV;AAEA;AACA;AACA;;;AACAn0C,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAIq0C,oBAAJ;AACAr6B,IAAAA,cAAc;AACdgjB,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,IAAI,IAAV,EAAgB;AACd;AACD;;AACD,QAAI,CAACvR,kBAAD,IAAuByI,WAAU,CAAC8I,EAAD,CAArC,EAA2C;AACzC6f,MAAAA,oBAAoB,GAAG,IAAvB;AACApxB,MAAAA,kBAAkB;AACnB;;AACD,YAAQuR,EAAE,CAAC4S,CAAX;AACE,WAAKnqC,IAAL;AACE6E,QAAAA,SAAS;AACT;;AACF,WAAK8K,GAAL;AACE,YAAIqW,kBAAJ,EAAwB;AACtBwX,UAAAA,WAAW,CAACne,0BAA0B,CAACkY,EAAD,CAA3B,CAAX;AACD,SAFD,MAEO;AACL8F,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD;;AACF,WAAK31B,MAAL;AACA,WAAK8Q,GAAL;AACE2qB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;;AACF,WAAKpjB,MAAL;AACEpJ,QAAAA,WAAW;AACX;;AACF,WAAK8H,GAAL;AACEnI,QAAAA,QAAQ;AACR;;AACF;AACEk5B,QAAAA,IAAI,CAAC,OAAD,CAAJ;AAtBJ;;AAwBA,QAAIwT,oBAAJ,EAA0B;AACxBpxB,MAAAA,kBAAkB;AACnB;;AACD,WAAOsZ,OAAO,EAAd;AACD,GAxCD;;AA0CA50B,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI2sC,WAAJ,EAAiBrM,CAAjB,EAAoBlU,CAApB,EAAuBwgB,qCAAvB,EAA8DrY,GAA9D,EAAmEC,IAAnE,CADoB,CAEpB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,QAAI9P,SAAS,CAACmI,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC+G,MAAM,CAACh3B,IAAD,CAAP,CAAJ;AACAolB,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACAzvB,MAAAA,IAAI;AACJ;AACD,KAND,MAMO,IAAIw0B,EAAE,KAAK6M,MAAM,CAACj0B,EAAD,CAAb,IAAqB6V,kBAAzB,EAA6C;AAClDwX,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACA;AACD,KApBmB,CAqBpB;;;AACAqnB,IAAAA,EAAE,GAAGpN,WAAW,CAACmN,EAAD,CAAhB;;AACA,QAAIl3B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBzU,EAAhB,GAAqB,mBAArB,GAA2CC,EAAvD;AACD;;AACD6F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ,CA1BoB,CA2BpB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAID,EAAE,KAAKC,EAAX,EAAe;AACb;AACA;AACA;AACA;AACA;AACA8f,MAAAA,qCAAqC,GAAG36B,4CAA4C,CAAC04B,OAA7C,CAAqD9d,EAArD,CAAxC;;AACA,UAAI+f,qCAAqC,KAAK,CAAC,CAA/C,EAAkD;AAChDD,QAAAA,WAAW,GAAG,EAAd;;AACA,aAAKrM,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGqY,qCAAd,EAAqDpY,IAAI,GAAGviB,4CAA4C,CAAC0V,MAA9G,EAAuH4M,GAAG,IAAIC,IAAP,GAAcpI,CAAC,GAAGoI,IAAlB,GAAyBpI,CAAC,GAAGoI,IAApJ,EAA2J8L,CAAC,GAAG/L,GAAG,IAAIC,IAAP,GAAc,EAAEpI,CAAhB,GAAoB,EAAEA,CAArL,EAAwL;AACtLugB,UAAAA,WAAW,IAAI16B,4CAA4C,CAACquB,CAAD,CAA5C,CAAgDhB,SAAhD,GAA4D,MAA3E;AACD;;AACDqN,QAAAA,WAAW,IAAI9f,EAAE,CAACyS,SAAlB;AACApG,QAAAA,IAAI,CAAC,sCAAsCyT,WAAvC,CAAJ;AACA;AACD;;AACD16B,MAAAA,4CAA4C,CAAC0gB,IAA7C,CAAkD9F,EAAlD;AACAx0B,MAAAA,IAAI;AACJ,aAAO4Z,4CAA4C,CAACic,GAA7C,EAAP;AACD;AACF,GAtDD;;AAwDA/zB,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAI0yC,SAAJ;AACAA,IAAAA,SAAS,GAAGx7B,GAAG,CAACwb,EAAD,CAAf,CAFqB,CAGrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIxb,GAAG,CAACw7B,SAAD,CAAH,KAAmBnT,MAAM,CAAC1hC,IAAD,CAA7B,EAAqC;AACnC8I,MAAAA,kBAAkB;AAClB;AACD;;AACD,QAAI,CAAC6lB,QAAQ,CAACkmB,SAAD,CAAb,EAA0B;AACxB3T,MAAAA,IAAI,CAAC,OAAD,CAAJ;AACD;;AACD,YAAQe,MAAM,CAAC4S,SAAD,CAAd;AACE,WAAK/5C,GAAL;AACE,eAAOyF,QAAQ,EAAf;;AACF,WAAKxF,GAAL;AACE,eAAOyF,QAAQ,EAAf;;AACF,WAAKxF,GAAL;AACE,eAAOyF,QAAQ,EAAf;;AACF,WAAKxF,GAAL;AACE,eAAOyF,QAAQ,EAAf;;AACF,WAAKvF,MAAL;AACE,eAAOyF,WAAW,EAAlB;;AACF,WAAKxF,OAAL;AACE,eAAOyF,YAAY,EAAnB;;AACF,WAAKxF,MAAL;AACE,eAAOyF,WAAW,EAAlB;;AACF,WAAKxF,OAAL;AACE,eAAOyF,YAAY,EAAnB;;AACF,WAAKxF,MAAL;AACE,eAAOyF,WAAW,EAAlB;;AACF,WAAKxF,OAAL;AACE,eAAOyF,YAAY,EAAnB;;AACF,WAAKxF,GAAL;AACE,eAAOyF,QAAQ,EAAf;;AACF,WAAKvF,OAAL;AACE,eAAOm5C,YAAY,EAAnB;;AACF,WAAKh5C,OAAL;AACE,eAAOqF,YAAY,EAAnB;;AACF,WAAKpF,OAAL;AACE,eAAOqF,YAAY,EAAnB;;AACF,WAAKpF,OAAL;AACE,eAAOqF,YAAY,EAAnB;;AACF,WAAKpF,QAAL;AACE,eAAOqF,aAAa,EAApB;;AACF,WAAK5E,OAAL;AACE,eAAO6E,YAAY,EAAnB;;AACF,WAAK5E,KAAL;AACE,eAAO6E,UAAU,EAAjB;;AACF,WAAK5E,MAAL;AACE,eAAO6E,WAAW,EAAlB;;AACF,WAAK5E,OAAL;AACE,eAAO6E,YAAY,EAAnB;;AACF,WAAK5E,KAAL;AACE,eAAO6E,UAAU,EAAjB;;AACF,WAAK5E,QAAL;AACE,eAAO6E,aAAa,EAApB;;AACF,WAAK5E,aAAL;AACE,eAAO6E,kBAAkB,EAAzB;;AACF,WAAK5E,KAAL;AACE,eAAO6E,UAAU,EAAjB;;AACF,WAAK5E,KAAL;AACE,eAAO6E,UAAU,EAAjB;;AACF,WAAK5E,QAAL;AACE,eAAO6E,aAAa,EAApB;;AACF,WAAK5E,QAAL;AACE,eAAO6E,aAAa,EAApB;;AACF,WAAK5E,IAAL;AACE,eAAO6E,SAAS,EAAhB;;AACF,WAAK3E,QAAL;AACE,eAAO6E,aAAa,EAApB;;AACF,WAAK5E,GAAL;AACE,eAAO6E,QAAQ,EAAf;;AACF,WAAK5E,IAAL;AACE,eAAO6E,SAAS,EAAhB;;AACF,WAAKhE,MAAL;AACE,eAAOiE,WAAW,EAAlB;;AACF,WAAK/D,MAAL;AACE,eAAOiE,WAAW,EAAlB;;AACF,WAAKlE,MAAL;AACE,eAAOiE,WAAW,EAAlB;;AACF,WAAK/D,WAAL;AACE,eAAOiE,gBAAgB,EAAvB;;AACF,WAAKhE,UAAL;AACE,eAAOiE,eAAe,EAAtB;;AACF,WAAKhE,GAAL;AACE,eAAOiE,QAAQ,EAAf;;AACF,WAAK/D,GAAL;AACE,eAAOgE,QAAQ,EAAf;;AACF,WAAK/D,KAAL;AACE,eAAOgE,UAAU,EAAjB;;AACF,WAAK/D,QAAL;AACE,eAAOgE,aAAa,EAApB;;AACF,WAAK/D,EAAL;AACE,eAAOgE,OAAO,EAAd;;AACF,WAAK/D,GAAL;AACE,eAAOwF,WAAU,EAAjB;;AACF,WAAKtF,IAAL;AACE,eAAO41C,SAAS,EAAhB;;AACF,WAAK11C,MAAL;AACE,eAAO4D,WAAW,EAAlB;;AACF,WAAK1D,KAAL;AACE,eAAO2D,UAAU,EAAjB;;AACF,WAAK1D,QAAL;AACE,eAAO2D,aAAa,EAApB;;AACF,WAAK1D,QAAL;AACE,eAAO2D,aAAa,EAApB;;AACF,WAAKtD,GAAL;AACE,eAAOuD,QAAQ,EAAf;;AACF,WAAKtD,IAAL;AACE,eAAOuD,SAAS,EAAhB;;AACF,WAAKtD,IAAL;AACE,eAAOM,SAAS,EAAhB;;AACF,WAAKL,GAAL;AACE,eAAOsD,QAAQ,EAAf;;AACF,WAAKrD,MAAL;AACE,eAAOsD,WAAW,EAAlB;;AACF,WAAKrD,MAAL;AACE,eAAOsD,WAAW,EAAlB;;AACF,WAAKrD,MAAL;AACE,eAAOsD,WAAW,EAAlB;;AACF,WAAKuF,MAAL;AACE,eAAOtF,WAAW,EAAlB;;AACF,WAAKuF,SAAL;AACE,eAAOtF,cAAc,EAArB;;AACF,WAAKuF,UAAL;AACE,eAAOtF,eAAe,EAAtB;;AACF,WAAKuF,MAAL;AACE,eAAOtF,WAAW,EAAlB;;AACF,WAAKuF,MAAL;AACE,eAAOtF,UAAU,EAAjB;;AACF,WAAK7I,WAAL;AACE,eAAOyF,gBAAgB,EAAvB;;AACF,WAAK2I,KAAL;AACE,eAAOtF,UAAU,EAAjB;;AACF,WAAKuF,GAAL;AACE,eAAOtF,QAAQ,EAAf;AACF;AACA;AACA;AACA;;AACA,WAAKwF,QAAL;AACE,eAAOvF,uBAAuB,EAA9B;;AACF,WAAKyF,KAAL;AACE,eAAOxF,UAAU,EAAjB;;AACF,WAAKyF,GAAL;AACE,eAAOxF,QAAQ,EAAf;;AACF,WAAKyF,OAAL;AACE,eAAOxF,YAAY,EAAnB;;AACF,WAAKyF,OAAL;AACE,eAAOxF,YAAY,EAAnB;;AACF,WAAKyF,IAAL;AACE,eAAOxF,SAAS,EAAhB;;AACF,WAAKyF,KAAL;AACE,eAAOxF,UAAU,EAAjB;;AACF,WAAKyF,KAAL;AACE,eAAOxF,WAAU,EAAjB;;AACF,WAAKyF,QAAL;AACE,eAAOxF,aAAa,EAApB;;AACF,WAAKyF,GAAL;AACE,eAAOxF,QAAQ,EAAf;;AACF,WAAKyF,IAAL;AACE,eAAOxF,SAAS,EAAhB;;AACF,WAAK2F,SAAL;AACE,eAAO1F,cAAc,EAArB;;AACF,WAAK2F,OAAL;AACE,eAAO1F,YAAY,EAAnB;;AACF,WAAK2F,QAAL;AACE,eAAO1F,aAAa,EAApB;AACF;;AACA,WAAKkG,GAAL;AACE,eAAOjG,QAAQ,EAAf;;AACF,WAAKkG,OAAL;AACE,eAAOjG,YAAY,EAAnB;;AACF,WAAKkG,QAAL;AACE,eAAOjG,aAAa,EAApB;;AACF,WAAKkG,GAAL;AACE,eAAOjG,QAAQ,EAAf;;AACF,WAAKkG,MAAL;AACE,eAAOjG,WAAW,EAAlB;;AACF,WAAK8G,GAAL;AACE,eAAO7G,QAAQ,EAAf;;AACF,WAAK+G,QAAL;AACE,eAAO9G,aAAa,EAApB;;AACF,WAAKkH,GAAL;AACE,eAAOhH,QAAQ,EAAf;;AACF,WAAKiH,MAAL;AACE,eAAOhH,WAAW,EAAlB;;AACF,WAAKyH,MAAL;AACE,eAAOxH,WAAW,EAAlB;;AACF,WAAKyH,SAAL;AACE,eAAOxH,cAAc,EAArB;;AACF,WAAKyH,QAAL;AACE,eAAOxH,aAAa,EAApB;;AACF,WAAKyH,EAAL;AACE,eAAOxH,OAAO,EAAd;;AACF,WAAKyH,KAAL;AACE,eAAOxH,UAAU,EAAjB;;AACF,WAAKyH,OAAL;AACE,eAAOxH,YAAY,EAAnB;;AACF,WAAKyH,YAAL;AACE,eAAOxH,iBAAiB,EAAxB;;AACF,WAAK0H,KAAL;AACE,eAAOzH,UAAU,EAAjB;;AACF,WAAK0H,KAAL;AACE,eAAOzH,UAAU,EAAjB;;AACF,WAAK0H,KAAL;AACE,eAAOxH,UAAU,EAAjB;;AACF,WAAKyH,KAAL;AACE,eAAOxH,UAAU,EAAjB;;AACF,WAAKyH,YAAL;AACE,eAAOxH,iBAAiB,EAAxB;;AACF,WAAKyH,SAAL;AACE,eAAOxH,kBAAkB,EAAzB;;AACF,WAAKyH,UAAL;AACE,eAAOvH,eAAe,EAAtB;;AACF,WAAKwH,SAAL;AACE,eAAOvH,cAAc,EAArB;;AACF,WAAK8H,UAAL;AACE,eAAOhI,eAAe,EAAtB;;AACF,WAAKmI,OAAL;AACE,eAAOhI,YAAY,EAAnB;;AACF,WAAKiI,KAAL;AACE,eAAOhI,UAAU,EAAjB;;AACF,WAAKiI,QAAL;AACE,eAAOhI,aAAa,EAApB;;AACF,WAAKiI,IAAL;AACE,eAAOhI,SAAS,EAAhB;;AACF,WAAKiI,WAAL;AACE,eAAOhI,gBAAgB,EAAvB;;AACF,WAAKiI,IAAL;AACE,eAAOhI,SAAS,EAAhB;;AACF,WAAKkI,KAAL;AACE,eAAO/H,UAAU,EAAjB;;AACF,WAAKkM,MAAL;AACE,eAAOpM,SAAS,EAAhB;;AACF,WAAKgI,KAAL;AACE,eAAO/H,UAAU,EAAjB;;AACF,WAAKmI,IAAL;AACE,eAAOjI,SAAS,EAAhB;;AACF,WAAKkI,GAAL;AACE,eAAOjI,QAAQ,EAAf;;AACF,WAAKmI,aAAL;AACE,eAAOjI,kBAAkB,EAAzB;;AACF,WAAKkI,QAAL;AACE,eAAOhI,aAAa,EAApB;;AACF,WAAKiI,GAAL;AACE,eAAOhI,QAAQ,EAAf;;AACF,WAAKiI,IAAL;AACE,eAAOhI,SAAS,EAAhB;;AACF,WAAK4H,KAAL;AACE,eAAOjI,UAAU,EAAjB;;AACF,WAAKwI,IAAL;AACE,eAAOlI,SAAS,EAAhB;;AACF,WAAKmI,IAAL;AACE,eAAOlI,SAAS,EAAhB;;AACF,WAAKoI,KAAL;AACE,eAAOnI,UAAU,EAAjB;;AACF,WAAKoI,GAAL;AACE,eAAOnI,QAAQ,EAAf;;AACF,WAAKqI,WAAL;AACE,eAAOnI,gBAAgB,EAAvB;;AACF,WAAKqJ,GAAL;AACE,eAAOpJ,QAAQ,EAAf;;AACF,WAAKqJ,IAAL;AACE,eAAOpJ,SAAS,EAAhB;;AACF,WAAKqJ,MAAL;AACE,eAAOpJ,WAAW,EAAlB;;AACF,WAAKsJ,IAAL;AACE,eAAOpJ,SAAS,EAAhB;;AACF,WAAKqJ,MAAL;AACE,eAAOpJ,WAAW,EAAlB;;AACF,WAAKqJ,MAAL;AACE,eAAOpJ,WAAW,EAAlB;;AACF,WAAKqJ,MAAL;AACE,eAAOpJ,WAAW,EAAlB;;AACF,WAAKqJ,MAAL;AACE,eAAOpJ,WAAW,EAAlB;;AACF,WAAKqJ,MAAL;AACE,eAAOpJ,WAAW,EAAlB;;AACF,WAAKwJ,SAAL;AACE,eAAOvJ,cAAc,EAArB;;AACF,WAAKoK,IAAL;AACE,eAAOnK,SAAS,EAAhB;;AACF,WAAKyK,IAAL;AACE,eAAOvK,SAAS,EAAhB;;AACF;AACE,eAAOD,kBAAkB,EAAzB;AAnRJ;AAqRD,GAxSD;;AA0SAzH,EAAAA,YAAY,GAAG,wBAAW;AACxB,WAAOs5B,IAAI,CAACjT,WAAW,CAACvO,IAAI,CAAC0b,EAAD,CAAL,CAAZ,CAAX;AACD,GAFD;;AAIArzB,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIwzC,WAAJ,CADsB,CAEtB;;AACAA,IAAAA,WAAW,GAAGrqB,qCAAqC,CAACxR,IAAI,CAAC0b,EAAD,CAAL,CAAnD;;AACA,QAAImgB,WAAW,IAAI,IAAnB,EAAyB;AACvB;AACA;AACA,aAAOra,IAAI,CAAC9F,EAAD,CAAX;AACD,KAJD,MAIO;AACL;AACA,aAAOqG,YAAY,CAAC8Z,WAAD,CAAnB;AACD;AACF,GAZD;;AAcApyC,EAAAA,QAAQ,GAAG,oBAAW;AACpB+3B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOgf,GAAG,EAAV;AACD,GAJD;;AAMAxc,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIolC,CAAJ,CADoB,CAEpB;;AACAtN,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAI1K,MAAM,CAAC1R,IAAI,CAAC+a,EAAD,CAAL,CAAV,EAAsB;AACpB8F,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,MAAAA,IAAI;AACJ4nC,MAAAA,CAAC,GAAG5R,WAAW,EAAf;AACD,KAJD,MAIO;AACL4R,MAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,QAAI,CAACpZ,QAAQ,CAACiG,EAAD,CAAb,EAAmB;AACjB,aAAOoG,YAAY,CAAC,CAAD,CAAnB,CADiB,CACO;AACzB,KAFD,MAEO,IAAI+M,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGnT,EAAE,CAACwN,MAAH,CAAUuF,IAA3B,EAAiC;AACtC,aAAOlN,IAAI,CAAC9F,EAAD,CAAX;AACD,KAFM,MAEA;AACL,aAAOqG,YAAY,CAACpG,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcM,CAAC,GAAG,CAAlB,CAAD,CAAnB;AACD;AACF,GApBD;;AAsBAllC,EAAAA,aAAa,GAAG,yBAAW;AACzB43B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO2f,QAAQ,EAAf;AACD,GAJD;;AAMAhd,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAI4kC,OAAJ;AACAjN,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBqB,MAAAA,GAAG;AACHyE,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJunC,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAZD;;AAcA3kC,EAAAA,WAAW,GAAG,uBAAW;AACvB03B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO40C,MAAM,EAAb;AACD,GARD,CA3kSU,CAqlSV;;;AACA30C,EAAAA,SAAS,GAAG,qBAAW;AACrBq6B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG/a,IAAI,CAAC+a,EAAD,CAAT;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJs6B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,MAAAA,IAAI;;AACJihC,MAAAA,MAAK;;AACLzM,MAAAA,EAAE,GAAG/a,IAAI,CAAC+a,EAAD,CAAT;AACD;;AACD,WAAOx0B,IAAI,EAAX;AACD,GAbD,CAtlSU,CAqmSV;AACA;;;AACAkD,EAAAA,QAAQ,GAAG,oBAAW;AACpBo3B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO6jB,WAAW,EAAlB;AACD,GAJD;;AAMAtgB,EAAAA,cAAc,GAAG,0BAAW;AAC1B+2B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO+kB,SAAS,EAAhB;AACD,GAJD;;AAMAvhB,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAI+jC,OAAJ;AACA/S,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJglB,IAAAA,UAAU;AACVwP,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJglB,MAAAA,UAAU;AACVuiB,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAlBD;;AAoBAvjC,EAAAA,YAAY,GAAG,wBAAW;AACxBs2B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOyoB,OAAO,EAAd;AACD,GAND;;AAQAxkB,EAAAA,YAAY,GAAG,wBAAW;AACxBq2B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO0oB,OAAO,EAAd;AACD,GAJD;;AAMAvkB,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIujC,CAAJ,EAAOmN,IAAP,EAAaC,SAAb;AACApN,IAAAA,CAAC,GAAG7E,GAAJ;AACAgS,IAAAA,IAAI,GAAGrgB,EAAP,CAHsB,CAKtB;AACA;;AACAA,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJ80C,IAAAA,SAAS,GAAGtU,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAjB;;AACA,QAAI/Y,aAAa,CAACgrB,SAAD,CAAjB,EAA8B;AAC5BjU,MAAAA,IAAI,CAAC,uCAAD,CAAJ;AACD;;AACD,QAAI,CAACrS,QAAQ,CAACsmB,SAAD,CAAb,EAA0B;AACxB;AACA;AACA7jB,MAAAA,OAAO,CAACyW,CAAD,CAAP;AACApN,MAAAA,IAAI,CAACua,IAAD,CAAJ;AACA;AACD,KApBqB,CAqBtB;AACA;AACA;;;AACArgB,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;;AACJ,UAAI,CAACmsB,uBAAuB,CAACqU,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA5B,EAA8C;AAC5C;AACA;AACA5R,QAAAA,OAAO,CAACyW,CAAD,CAAP;AACApN,QAAAA,IAAI,CAACua,IAAD,CAAJ;AACA;AACD;;AACDrgB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAO1L,cAAc,CAAC+Z,GAAG,GAAG6E,CAAP,CAArB;AACD,GAtCD;;AAwCApjC,EAAAA,QAAQ,GAAG,oBAAW;AACpBg2B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOypB,IAAG,EAAV;AACD,GAJD;;AAMAllB,EAAAA,SAAS,GAAG,qBAAW;AACrB+1B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO4pB,IAAI,EAAX;AACD,GAJD;;AAMAplB,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAIojC,CAAJ;AACAtN,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI5H,UAAU,CAACuG,EAAD,CAAd,EAAoB;AAClB,UAAIvI,SAAS,CAACuI,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD,OAFD,MAEO;AACLsG,QAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD;AACD;;AACD,QAAIjb,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChBoT,MAAAA,CAAC,GAAGQ,IAAI,CAACmD,KAAL,CAAW/W,EAAE,CAAC2S,CAAd,CAAJ;;AACA,UAAIS,CAAC,KAAKpT,EAAE,CAAC2S,CAAb,EAAgB;AACd7M,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD,OAFD,MAEO;AACLsG,QAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD;AACD;;AACDxL,IAAAA,WAAW,CAAC7wB,SAAD,CAAX;AACAowB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GAzBD;;AA2BApqB,EAAAA,WAAW,GAAG,uBAAW;AACvBi1B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,CAAC4S,CAAH,KAASx6B,GAAT,IAAgB4nB,EAAE,CAAC4S,CAAH,KAASvoC,MAA7B,EAAqC;AACnC,aAAOg8B,YAAY,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOA,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GATD;;AAWAt1B,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAImiC,CAAJ;AACAA,IAAAA,CAAC,GAAG7E,GAAJ;AACA9H,IAAAA,WAAW,CAAChuB,QAAD,CAAX;AACAynB,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJw0B,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAO/E,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAX;AACD,GAXD,CA/uSU,CA4vSV;;;AACAnhC,EAAAA,UAAU,GAAG,sBAAW;AACtB,WAAO+zB,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAX;AACD,GAFD,CA7vSU,CAiwSV;;;AACA/tB,EAAAA,SAAS,GAAG,qBAAW;AACrB6zB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrH,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChB,aAAOqG,YAAY,CAACrG,EAAE,CAACyN,MAAH,CAAUuF,IAAX,CAAnB;AACD,KAFD,MAEO;AACL,aAAOlN,IAAI,CAACiM,IAAD,CAAX;AACD;AACF,GATD,CAlwSU,CA6wSV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAx/B,EAAAA,SAAS,GAAG,qBAAW;AACrB;AACA,QAAIoR,KAAK,CAACqc,EAAD,CAAL,KAAc6M,MAAM,CAAC13B,KAAD,CAAxB,EAAiC;AAC/B+0B,MAAAA,YAAY;AACZ;AACD,KALoB,CAMrB;;;AACA,QAAIvT,MAAM,CAACrS,IAAI,CAAC0b,EAAD,CAAL,CAAV,EAAsB;AACpBjW,MAAAA,oBAAoB;AACpB;AACD;;AACD,QAAI,CAAC+P,QAAQ,CAACxV,IAAI,CAAC0b,EAAD,CAAL,CAAb,EAAyB;AACvBqM,MAAAA,IAAI,CAAC,oCAAD,CAAJ;AACD;;AACDvG,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACA2I,IAAAA,WAAW,CAAC1lB,IAAI,CAAC0b,EAAD,CAAL,EAAWC,EAAX,CAAX,CAjBqB,CAkBrB;AACA;AACA;AACA;AACA;;AACA,WAAO6F,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAxBD,CA9xSU,CAwzSV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AACAwyB,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIgJ,CAAJ;AACA/S,IAAAA,EAAE,GAAGrc,MAAM,CAACkc,EAAD,CAAX;;AACA,QAAI,CAAClG,QAAQ,CAACqG,EAAD,CAAb,EAAmB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACAkM,MAAAA,IAAI,CAAC,4CAAD,CAAJ;AACD;;AACD6G,IAAAA,CAAC,GAAG7E,GAAJ;AACAvI,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGvb,KAAK,CAACsb,EAAD,CAAV;;AACA,WAAOrJ,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjB6F,MAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACAz0B,MAAAA,IAAI;AACJy0B,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACDgK,IAAAA,aAAa,CAACoE,GAAG,GAAG6E,CAAP,CAAb;AACAhT,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACA2I,IAAAA,WAAW,CAAC7J,EAAD,EAAKD,EAAL,CAAX;AACA,WAAO4F,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GA9BD;;AAgCA3E,EAAAA,SAAS,GAAG,qBAAW;AACrB+yB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ86B,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA,WAAO7E,KAAK,EAAZ;AACD,GALD;;AAOAzuB,EAAAA,SAAS,GAAG,qBAAW;AACrB,WAAOq5B,IAAI,CAAC,WAAD,CAAX;AACD,GAFD;;AAIAp5B,EAAAA,UAAU,GAAG,sBAAW;AACtB6yB,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;;AACJihC,IAAAA,MAAK;;AACL,WAAOjhC,IAAI,EAAX,CARsB,CAQP;AAChB,GATD,CAz3SU,CAq4SV;AACA;AACA;;;AACAwI,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIy/B,CAAJ,EAAOL,CAAP,EAAU7T,CAAV,EAAamI,GAAb;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;AACAtN,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ4nC,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZtN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACD,QAAIoT,CAAC,GAAG,CAAR,EAAW;AACTtN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACDA,IAAAA,EAAE,GAAG5f,YAAY,CAACgzB,CAAC,GAAGA,CAAL,CAAjB;AACApT,IAAAA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAhT,IAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;AACApT,IAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFS,MAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAeymB,CAAC,GAAGK,CAAJ,GAAQA,CAAvB,IAA4BjU,GAA5B;AACD;;AACD9Z,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACA,WAAO8F,IAAI,CAAC9F,EAAD,CAAX;AACD,GAxBD;;AA0BAtvB,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI4tC,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACA3jB,IAAAA,IAAI;AACJ,WAAO2jB,SAAS,GAAGmvB,cAAnB;AACD,GAND,CAl6SU,CA06SV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhtC,EAAAA,cAAc,GAAG,0BAAW;AAC1Bk3B,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGmO,GAAG,EAAR;;AACA,QAAI3pB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACryB,IAAD,CAAtB,EAA8B;AAC5B;AACA;AACA6mB,MAAAA,GAAG;AACHkF,MAAAA,WAAW,CAACzpB,MAAD,CAAX;AACAgpB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACDzvB,IAAAA,IAAI;AACJ,WAAOu8B,OAAO,EAAd;AACD,GAdD,CAx7SU,CAw8SV;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;AACAp5B,EAAAA,WAAW,GAAG,uBAAW;AACvB;AACAm3B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI,GAHmB,CAIvB;;AACAs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;;AACD,WAAOrR,OAAM,EAAb;AACD,GAdD,CAl9SU,CAk+SV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,EAAAA,OAAM,GAAG,kBAAW;AAClB,QAAI0vB,cAAJ;AACA9V,IAAAA,IAAI;AACJhI,IAAAA,EAAE,GAAGa,GAAG,EAAR;AACAjB,IAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,QAAIrH,QAAQ,CAACoG,EAAD,CAAZ,EAAkB;AAChBlR,MAAAA,aAAa;AACb6Y,MAAAA,OAAO;AACP;AACD,KATiB,CAUlB;;;AACA,QAAIvjB,GAAG,CAAC4b,EAAD,CAAH,KAAYyM,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3BmgC,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACArG,MAAAA,EAAE,GAAG9a,GAAG,CAACkb,EAAD,CAAR;;AACA,aAAOzJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,QAAAA,IAAI,CAACtF,EAAD,CAAJ;;AACA5R,QAAAA,OAAM;;AACNjP,QAAAA,GAAG;AACHqgB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD+H,MAAAA,OAAO;AACP;AACD,KAvBiB,CAwBlB;;;AACAjC,IAAAA,IAAI,CAAC1F,EAAD,CAAJ;;AACAf,IAAAA,UAAS;;AACTa,IAAAA,EAAE,GAAGmB,GAAG,EAAR,CA3BkB,CA4BlB;;AACAyE,IAAAA,IAAI,CAAC1F,EAAD,CAAJ;;AACAjW,IAAAA,YAAW;;AACX8V,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAwG,IAAAA,yBAAyB,GAhCP,CAiClB;;AACA/B,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAACtF,EAAD,CAAJ,CApCkB,CAqClB;AACA;AACA;;AACA,QAAIhI,KAAK,CAAC0H,EAAD,CAAL,IAAa1H,KAAK,CAACyH,EAAD,CAAtB,EAA4B;AAC1B,UAAI,CAACnH,kBAAkB,CAACmH,EAAD,EAAKO,EAAL,CAAnB,IAA+BhI,KAAK,CAACyH,EAAD,CAAxC,EAA8C;AAC5CoB,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHyE,QAAAA,IAAI,CAAC1F,EAAD,CAAJ,CAJ4C,CAK5C;;AACA2H,QAAAA,OAAO;AACP;AACD;AACF;;AACD1c,IAAAA,OAAO;AACPiV,IAAAA,EAAE,GAAGe,GAAG,EAAR,CApDkB,CAqDlB;;AACAyE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,IAAAA,QAAQ;AACRqP,IAAAA,QAAQ;AACRxM,IAAAA,EAAE,GAAGmB,GAAG,EAAR,CA3DkB,CA4DlB;;AACA,QAAIxL,kBAAkB,CAACqK,EAAD,CAAtB,EAA4B;AAC1B4F,MAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAyH,MAAAA,OAAO;AACP;AACD,KAjEiB,CAkElB;AAEA;;;AACAjC,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAACtF,EAAD,CAAJ;AACAhQ,IAAAA,UAAU;AACVyP,IAAAA,EAAE,GAAGoB,GAAG,EAAR,CAxEkB,CAyElB;;AACArS,IAAAA,YAAY;AACZD,IAAAA,YAAY;AACZF,IAAAA,YAAY;;AACZ,QAAImL,QAAQ,CAACmG,EAAD,CAAZ,EAAkB;AAChB2F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAme,MAAAA,cAAc,GAAGnvB,SAAjB;AACAA,MAAAA,SAAS,GAAG,CAAZ;;AACA8F,MAAAA,IAAG;;AACH9F,MAAAA,SAAS,GAAGmvB,cAAZ;AACAxY,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACAxL,MAAAA,MAAK;;AACLoR,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACAvL,MAAAA,MAAK;AACN,KAVD,MAUO;AACLoR,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAme,MAAAA,cAAc,GAAGnvB,SAAjB;AACAA,MAAAA,SAAS,GAAG,CAAZ;AACAlE,MAAAA,MAAM;AACNkE,MAAAA,SAAS,GAAGmvB,cAAZ;AACAxY,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,MAAAA,QAAQ;AACT;;AACDyI,IAAAA,IAAI,CAACxF,EAAD,CAAJ;AACA3gB,IAAAA,GAAG;AACH,WAAOooB,OAAO,EAAd;AACD,GApGD;;AAsGA7Y,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIukB,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACA3N,IAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACArY,IAAAA,WAAW;AACXqY,IAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,SAAKoS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGtH,EAAE,CAACqN,MAAH,CAAUwF,KAAhC,EAAwC,KAAKvL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAjE,EAAuE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA9F,EAAiG;AAC/FuG,MAAAA,IAAI,CAAC1F,EAAE,CAACqN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACA3N,MAAAA,IAAI,CAACtF,EAAD,CAAJ;;AACA5R,MAAAA,OAAM;;AACNwR,MAAAA,EAAE,CAACqN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACD,WAAOyE,IAAI,CAAC1F,EAAD,CAAX;AACD,GAbD;;AAeAyH,EAAAA,yBAAyB,GAAG,qCAAW;AACrC,QAAIqL,CAAJ,EAAOO,CAAP,EAAUC,CAAV,EAAad,CAAb,EAAgBQ,CAAhB,EAAmB7T,CAAnB,EAAsBmI,GAAtB;AACAwL,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACAQ,IAAAA,CAAC,GAAG,CAAJ;AACAF,IAAAA,CAAC,GAAG7E,GAAJ;AACA5d,IAAAA,OAAO,CAACwP,EAAD,CAAP;AACAxP,IAAAA,OAAO,CAACyP,EAAD,CAAP;AACAkT,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV,CAVqC,CAWrC;;AACAQ,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKD,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFS,MAAAA,EAAE,GAAGgM,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAV;;AACA,UAAIjvB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7B;AACD;;AACD,UAAIwL,IAAI,CAAC0b,EAAD,CAAJ,KAAaQ,EAAjB,EAAqB;AACnB;AACD;;AACDsF,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA4S,MAAAA,CAAC,GAAGpR,WAAW,EAAf;;AACA,UAAIsV,KAAK,CAAClE,CAAD,CAAT,EAAc;AACZ;AACD;;AACD,UAAIA,CAAC,GAAGc,CAAR,EAAW;AACTA,QAAAA,CAAC,GAAGd,CAAJ;AACD;AACF;;AACDnW,IAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,QAAIQ,CAAC,KAAK,CAAV,EAAa;AACX;AACD,KAjCoC,CAkCrC;;;AACA5N,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA6F,IAAAA,YAAY,CAAC,CAACqN,CAAF,CAAZ;AACAjS,IAAAA,KAAK;AACLpE,IAAAA,QAAQ;AACR4C,IAAAA,EAAE,GAAGoB,GAAG,EAAR,CAxCqC,CAyCrC;;AACAyE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,IAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA6F,IAAAA,YAAY,CAAC,CAACqN,CAAF,CAAZ;AACAjS,IAAAA,KAAK;AACLpE,IAAAA,QAAQ;AACR,WAAO6C,EAAE,GAAGmB,GAAG,EAAf;AACD,GAhDD,CA/lTU,CAipTV;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;;;AACArS,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIqjB,CAAJ,EAAOa,CAAP,EAAUO,CAAV,EAAatf,EAAb,EAAiBuf,CAAjB,EAAoBN,CAApB,EAAuB7T,CAAvB,EAA0B+e,cAA1B,EAA0C5W,GAA1C,EAA+CC,IAA/C;AACAuL,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ,CALwB,CAMxB;;AACAF,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,QAAI7pB,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC+a,EAAD,CAAR;;AACA,aAAOtJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBI,QAAAA,EAAE,GAAG5b,GAAG,CAACwb,EAAD,CAAR;AACA/Q,QAAAA,aAAa;AACb+Q,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KAPD,MAOO;AACLI,MAAAA,EAAE,GAAGH,EAAL;AACAhR,MAAAA,aAAa;AACd;;AACDmkB,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;;AACA,QAAIE,CAAC,KAAK,CAAV,EAAa;AACXjT,MAAAA,EAAE,GAAGkB,GAAG,EAAR;AACA;AACD;;AACDlB,IAAAA,EAAE,GAAG/f,YAAY,CAACgzB,CAAC,GAAGA,CAAL,CAAjB;AACAjT,IAAAA,EAAE,CAACsN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACA7S,IAAAA,EAAE,CAACsN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;AACAjT,IAAAA,EAAE,CAACsN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;AACAf,IAAAA,CAAC,GAAGa,CAAJ;;AACA,SAAKO,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,QAAAA,IAAI,CAACkG,KAAK,CAACqG,CAAC,GAAGqB,CAAL,CAAN,CAAJ;AACA5N,QAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA6F,QAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,QAAAA,KAAK;AACL6c,QAAAA,cAAc,GAAGnvB,SAAjB;AACAA,QAAAA,SAAS,GAAG,CAAZ;AACAlE,QAAAA,MAAM;AACNkE,QAAAA,SAAS,GAAGmvB,cAAZ;AACAxY,QAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA7P,QAAAA,MAAM;AACNwP,QAAAA,EAAE,CAACsN,MAAH,CAAU9gB,IAAV,CAAeymB,CAAC,GAAGK,CAAJ,GAAQC,CAAvB,IAA4BrS,GAAG,EAA/B;AACD;AACF;;AACD,WAAO5E,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAd;AACD,GA7CD,CAxsTU,CAuvTV;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACAnkB,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI0jB,CAAJ,EAAOc,CAAP,EAAUC,CAAV,EAAaN,CAAb,EAAgB7T,CAAhB,EAAmB+e,cAAnB,EAAmC5W,GAAnC,EAAwCqL,OAAxC;AACAJ,IAAAA,CAAC,GAAG,CAAJ;AACAc,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI,CAACv+B,KAAI,CAACurB,EAAD,EAAKI,EAAL,CAAT,EAAmB;AACjB;AACD;;AACD8d,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACAuf,IAAAA,cAAc;AACdvf,IAAAA,SAAS,GAAGmvB,cAAZ;;AACA,QAAI95B,GAAG,CAAC4b,EAAD,CAAH,KAAYyM,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BgtB,MAAAA,IAAI,CAACzhB,KAAK,CAAC+b,EAAD,CAAN,CAAJ;AACAgT,MAAAA,CAAC,GAAG5R,WAAW,EAAf;AACAnB,MAAAA,EAAE,GAAG/b,IAAI,CAAC8b,EAAD,CAAT;AACD,KAJD,MAIO;AACLgT,MAAAA,CAAC,GAAG,CAAJ;AACA/S,MAAAA,EAAE,GAAGD,EAAL;AACD;;AACD0F,IAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAyF,IAAAA,IAAI,CAACtF,EAAD,CAAJ;AACAtW,IAAAA,MAAM;AACNyoB,IAAAA,CAAC,GAAGnR,WAAW,EAAf;AACAuR,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFwT,MAAAA,OAAO,CAACjN,IAAR,CAAc,YAAW;AACvB,YAAI3R,EAAJ,EAAQwT,IAAR,EAAc6X,QAAd;AACAA,QAAAA,QAAQ,GAAG,EAAX;;AACA,aAAK9L,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGgL,CAAxB,EAA4B,KAAKhL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,UAAAA,IAAI,CAACvF,EAAD,CAAJ;AACAuF,UAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAgG,UAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,UAAAA,KAAK;AACL6c,UAAAA,cAAc,GAAGnvB,SAAjB;AACAA,UAAAA,SAAS,GAAG,CAAZ;AACAkO,UAAAA,QAAQ;AACRlO,UAAAA,SAAS,GAAGmvB,cAAZ;AACAxY,UAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA6F,UAAAA,YAAY,CAACqN,CAAD,CAAZ;AACAjS,UAAAA,KAAK;AACL6c,UAAAA,cAAc,GAAGnvB,SAAjB;AACAA,UAAAA,SAAS,GAAG,CAAZ;AACAkO,UAAAA,QAAQ;AACRmiB,UAAAA,QAAQ,CAAC1Z,IAAT,CAAc3W,SAAS,GAAGmvB,cAA1B;AACD;;AACD,eAAOkB,QAAP;AACD,OArBY,EAAb;AAsBD;;AACD,WAAOzM,OAAP;AACD,GAnDD,CAvzTU,CA42TV;;;AACArE,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAIwE,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI1uB,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC27B,MAAAA,CAAC,GAAG7E,GAAJ;AACAtO,MAAAA,EAAE,GAAG7a,GAAG,CAAC+a,EAAD,CAAR;;AACA,aAAOtJ,MAAM,CAACoJ,EAAD,CAAb,EAAmB;AACjB,YAAI,CAAC5R,KAAK,CAAC3J,GAAG,CAACub,EAAD,CAAJ,EAAUK,EAAV,CAAV,EAAyB;AACvB0F,UAAAA,IAAI,CAACthB,GAAG,CAACub,EAAD,CAAJ,CAAJ;AACAv0B,UAAAA,IAAI,GAFmB,CAEf;AACT;;AACDu0B,QAAAA,EAAE,GAAG7a,GAAG,CAAC6a,EAAD,CAAR;AACD;;AACDzC,MAAAA,YAAY,CAAC+Q,GAAG,GAAG6E,CAAP,CAAZ;AACD,KAXD,MAWO;AACL7M,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD;;AACD,WAAO9F,EAAE,GAAGc,GAAG,EAAf;AACD,GAlBD,CA72TU,CAi4TV;;;AACAtS,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAI0kB,CAAJ,EAAOL,CAAP,EAAU7T,CAAV,EAAa+e,cAAb,EAA6B5W,GAA7B;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI,CAACpZ,QAAQ,CAACmG,EAAD,CAAb,EAAmB;AACjB;AACD;;AACDiT,IAAAA,CAAC,GAAGjT,EAAE,CAACsN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAJ;AACAvS,IAAAA,EAAE,GAAGngB,YAAY,CAACgzB,CAAD,CAAjB;AACA7S,IAAAA,EAAE,CAACkN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAzS,IAAAA,EAAE,CAACkN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFuG,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA6F,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,MAAAA,KAAK;AACL6c,MAAAA,cAAc,GAAGnvB,SAAjB;AACAA,MAAAA,SAAS,GAAG,CAAZ;AACAlE,MAAAA,MAAM;AACNkE,MAAAA,SAAS,GAAGmvB,cAAZ;AACAxY,MAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA7P,MAAAA,MAAM;AACN4P,MAAAA,EAAE,CAACkN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACD,WAAOnB,EAAE,GAAGK,EAAZ;AACD,GAzBD,CAl4TU,CA65TV;;;AACA1R,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIqkB,CAAJ,EAAOO,CAAP,EAAUL,CAAV,EAAa7T,CAAb,EAAgBmI,GAAhB;AACAwL,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI,CAACpZ,QAAQ,CAACmG,EAAD,CAAb,EAAmB;AACjB2F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAqH,MAAAA,WAAW;AACXrH,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACA;AACD;;AACD6R,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,QAAI7pB,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCgpB,MAAAA,EAAE,GAAGrb,GAAG,CAAC+a,EAAD,CAAR;;AACA,aAAOtJ,MAAM,CAAC4J,EAAD,CAAb,EAAmB;AACjBH,QAAAA,EAAE,GAAG5b,GAAG,CAAC+b,EAAD,CAAR;AACAzR,QAAAA,aAAa;AACbyR,QAAAA,EAAE,GAAGrb,GAAG,CAACqb,EAAD,CAAR;AACD;AACF,KAPD,MAOO;AACLH,MAAAA,EAAE,GAAGH,EAAL;AACAnR,MAAAA,aAAa;AACd;;AACDskB,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;AACA3S,IAAAA,EAAE,GAAGngB,YAAY,CAACgzB,CAAD,CAAjB;AACA7S,IAAAA,EAAE,CAACkN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAzS,IAAAA,EAAE,CAACkN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFgB,MAAAA,EAAE,CAACkN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzH,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAzB;AACD;;AACDhX,IAAAA,OAAO,CAACyW,CAAD,CAAP;AACA,WAAOjT,EAAE,GAAGM,EAAZ;AACD,GAhCD;;AAkCAzR,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI6jB,CAAJ,EAAOc,CAAP,EAAUC,CAAV,EAAaN,CAAb,EAAgB7T,CAAhB,EAAmBmI,GAAnB,EAAwBqL,OAAxB;AACAJ,IAAAA,CAAC,GAAG,CAAJ;AACAc,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI,CAACv+B,KAAI,CAACurB,EAAD,EAAKI,EAAL,CAAT,EAAmB;AACjB;AACD;;AACD,QAAIhc,GAAG,CAAC4b,EAAD,CAAH,KAAYyM,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BgtB,MAAAA,IAAI,CAACzhB,KAAK,CAAC+b,EAAD,CAAN,CAAJ;AACAgT,MAAAA,CAAC,GAAG5R,WAAW,EAAf;AACApB,MAAAA,EAAE,GAAG9b,IAAI,CAAC8b,EAAD,CAAT;AACD;;AACD0F,IAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,IAAAA,IAAI,CAACtF,EAAD,CAAJ;AACAtW,IAAAA,MAAM;AACNyoB,IAAAA,CAAC,GAAGnR,WAAW,EAAf;AACAuR,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAG0L,CAAnB,EAAuB1L,GAAG,IAAI,CAAP,GAAWnI,CAAC,GAAG,CAAf,GAAmBA,CAAC,GAAG,CAA9C,EAAkDkU,CAAC,GAAG/L,GAAG,IAAI,CAAP,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAzE,EAA4E;AAC1EwT,MAAAA,OAAO,CAACjN,IAAR,CAAc,YAAW;AACvB,YAAI3R,EAAJ,EAAQwT,IAAR,EAAc6X,QAAd;AACAA,QAAAA,QAAQ,GAAG,EAAX;;AACA,aAAK9L,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGgL,CAAxB,EAA4B,KAAKhL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,UAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACAiG,UAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,UAAAA,KAAK;AACL6F,UAAAA,WAAW;AACXxB,UAAAA,IAAI,CAACtF,EAAD,CAAJ;AACA6F,UAAAA,YAAY,CAACqN,CAAD,CAAZ;AACAjS,UAAAA,KAAK;AACL+d,UAAAA,QAAQ,CAAC1Z,IAAT,CAAczI,QAAQ,EAAtB;AACD;;AACD,eAAOmiB,QAAP;AACD,OAdY,EAAb;AAeD;;AACD,WAAOzM,OAAP;AACD,GArCD,CAh8TU,CAu+TV;;;AACAnkC,EAAAA,WAAW,GAAG,uBAAW;AACvBk3B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO4jB,MAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,MAAM,GAAG,kBAAW;AAClBoZ,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAyR,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,IAAAA,QAAQ;AACRhO,IAAAA,WAAW;AACXiX,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA0J,IAAAA,MAAM;AACN+H,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,IAAAA,QAAQ;AACRhO,IAAAA,WAAW;AACXiX,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,IAAAA,QAAQ;AACR1d,IAAAA,GAAG;AACH,WAAOooB,OAAO,EAAd;AACD,GAlBD,CA9+TU,CAkgUV;;;AACAl5B,EAAAA,WAAW,GAAG,uBAAW;AACvBi3B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO+jB,MAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,MAAM,GAAG,kBAAW;AAClBiZ,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAyR,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,IAAAA,QAAQ;AACRhO,IAAAA,WAAW;AACXyW,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACApJ,IAAAA,MAAM;AACNqb,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA0J,IAAAA,MAAM;AACN+H,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,IAAAA,QAAQ;AACRhO,IAAAA,WAAW;AACXyW,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACApJ,IAAAA,MAAM;AACNqb,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,IAAAA,QAAQ;AACRqP,IAAAA,QAAQ;AACR,WAAO3E,OAAO,EAAd;AACD,GAtBD,CAzgUU,CAiiUV;;;AACAj5B,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIikC,OAAJ;AACAjN,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;;AACDjQ,IAAAA,MAAM,GAZiB,CAavB;;AACAgQ,IAAAA,EAAE,GAAGhb,KAAK,CAACgb,EAAD,CAAV;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJ0kB,MAAAA,YAAY;AACZ6iB,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAvBD;;AAyBA7iB,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIgjB,CAAJ,EAAOE,CAAP;AACA5K,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA6R,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,QAAI7pB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3P,QAAAA,WAAW;AACX0P,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KARD,MAQO;AACL8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3P,MAAAA,WAAW;AACZ;;AACD8iB,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;;AACA,QAAIE,CAAC,GAAG,CAAR,EAAW;AACT7V,MAAAA,qBAAqB,CAAC6V,CAAD,CAArB;AACD;;AACD,WAAOrL,OAAO,EAAd;AACD,GAxBD;;AA0BAzX,EAAAA,WAAW,GAAG,uBAAW;AACvBkY,IAAAA,IAAI;AACJhY,IAAAA,UAAU;AACVwP,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KAND,MAMO;AACL8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD,WAAO+H,OAAO,EAAd;AACD,GAdD;;AAgBA/X,EAAAA,MAAM,GAAG,kBAAW;AAClBwY,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI5J,SAAS,CAACuI,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA5P,MAAAA,aAAa,GAFI,CAEA;AAClB,KAHD,MAGO;AACL0V,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAzP,MAAAA,UAAU;AACX;;AACD,WAAOuX,OAAO,EAAd;AACD,GAbD,CArmUU,CAonUV;;;AACA1X,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B,QAAIsiB,CAAJ,EAAOkK,IAAP,EAAapJ,CAAb,EAAgBL,CAAhB,EAAmB7T,CAAnB,EAAsBmI,GAAtB;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAjL,IAAAA,IAAI;AACJ4K,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ/G,MAAAA,IAAI,CAAC,0BAAD,CAAJ;AACD;;AACD,QAAI+G,CAAC,GAAG,CAAR,EAAW;AACTA,MAAAA,CAAC,GAAG,CAACA,CAAL;AACD;;AACD,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG/wB,WAAtB,EAAoC,KAAK+wB,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAA7D,EAAmE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA1F,EAA6F;AAC3FoT,MAAAA,CAAC,GAAG5Q,QAAQ,CAAC0R,CAAD,CAAZ;;AACA,UAAId,CAAC,GAAGS,CAAC,GAAGT,CAAZ,EAAe;AACb;AACD;;AACDkK,MAAAA,IAAI,GAAG,CAAP;;AACA,aAAOzJ,CAAC,GAAGT,CAAJ,KAAU,CAAjB,EAAoB;AAClBS,QAAAA,CAAC,IAAIT,CAAL;AACAkK,QAAAA,IAAI;AACL;;AACD,UAAIA,IAAJ,EAAU;AACRxW,QAAAA,YAAY,CAACsM,CAAD,CAAZ;AACAtM,QAAAA,YAAY,CAACwW,IAAD,CAAZ;AACD;AACF;;AACD,QAAIzJ,CAAC,GAAG,CAAR,EAAW;AACT/M,MAAAA,YAAY,CAAC+M,CAAD,CAAZ;AACA/M,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD;;AACD,WAAO0B,OAAO,EAAd;AACD,GA/BD;;AAiCAxX,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAI6iB,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAoT,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAAS0D,KAAK,CAAC1D,CAAD,CAAlB,EAAuB;AACrB7M,MAAAA,WAAW,CAAClyB,SAAD,CAAX;AACAyxB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACD/kB,IAAAA,gBAAgB,CAACowB,CAAD,CAAhB;AACA,WAAOrL,OAAO,EAAd;AACD,GAhBD,CAtpUU,CAwqUV;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AACAyD,EAAAA,mBAAkB,GAAG,8BAAW;AAC9B,QAAIsI,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAtL,IAAAA,IAAI;AACJsL,IAAAA,CAAC,GAAG3kB,SAAJ;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACA6Q,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B4/B,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA/R,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACAwL,QAAAA,mBAAkB;;AAClB7rB,QAAAA,GAAG;AACHqgB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD7Q,MAAAA,SAAS,GAAG2kB,CAAZ;AACA/L,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvjB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC4yB,MAAAA,YAAY;AACZhb,MAAAA,SAAS,GAAG2kB,CAAZ;AACA/L,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA7Q,IAAAA,SAAS,GAAG2kB,CAAZ;AACA,WAAO/L,OAAO,EAAd;AACD,GA7BD;;AA+BAoC,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIsJ,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcpZ,EAAd,EAAkB8Y,CAAlB,EAAqB7T,CAArB,EAAwBmI,GAAxB,EAA6BC,IAA7B,EAAmCyN,IAAnC,EAAyCC,IAAzC,EAA+CT,CAA/C;AACAnB,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;AACAwB,IAAAA,CAAC,GAAGvG,GAAJ;AACArO,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAoT,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAOzc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAoT,MAAAA,CAAC;AACF;;AACD,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAC,GAAG,CAA1B,EAA8B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAvD,EAA6D+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAApF,EAAuF;AACrF,UAAIyM,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAL,KAAiB5G,MAAM,CAACn1B,GAAD,CAA3B,EAAkC;AAChC;AACD;;AACD,WAAKg8B,CAAC,GAAGvf,EAAE,GAAGwT,IAAI,GAAG8L,CAAC,GAAG,CAApB,EAAuB2B,IAAI,GAAGhC,CAAnC,EAAuCzL,IAAI,IAAIyN,IAAR,GAAejhB,EAAE,GAAGihB,IAApB,GAA2BjhB,EAAE,GAAGihB,IAAvE,EAA8E1B,CAAC,GAAG/L,IAAI,IAAIyN,IAAR,GAAe,EAAEjhB,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5G,YAAI6X,KAAK,CAAC4I,CAAC,GAAGlB,CAAL,CAAL,KAAiB7G,MAAM,CAACn1B,GAAD,CAA3B,EAAkC;AAChC;AACD;;AACD0yB,QAAAA,cAAc,CAACwK,CAAD,EAAInB,CAAJ,EAAOC,CAAP,CAAd;AACD;AACF;;AACD5N,IAAAA,IAAI,CAACtG,GAAD,CAAJ;;AACA,SAAKiU,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY+a,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAY/a,EAAE,GAAG+a,IAAjB,GAAwB/a,EAAE,GAAG+a,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAE/a,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,UAAI0R,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAL,KAAiB5G,MAAM,CAACn1B,GAAD,CAA3B,EAAkC;AAChC;AACD;;AACDouB,MAAAA,IAAI,CAACkG,KAAK,CAAC4I,CAAC,GAAGnB,CAAL,CAAN,CAAJ;AACApW,MAAAA,QAAQ;AACT;;AACD2C,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA5E,IAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAP;AACA,WAAOtN,IAAI,CAAC9F,EAAD,CAAX;AACD,GAnCD;;AAqCAoK,EAAAA,cAAc,GAAG,wBAASwK,CAAT,EAAYvC,CAAZ,EAAeC,CAAf,EAAkB;AACjC,QAAImB,CAAJ,EAAOL,CAAP,EAAU7T,CAAV,EAAamI,GAAb;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;AACApT,IAAAA,EAAE,GAAGgM,KAAK,CAAC4I,CAAC,GAAGvC,CAAL,CAAV;AACApS,IAAAA,EAAE,GAAG+L,KAAK,CAAC4I,CAAC,GAAGtC,CAAL,CAAV;;AACA,QAAI/Y,OAAO,CAACyG,EAAD,CAAX,EAAiB;AACfE,MAAAA,EAAE,GAAG7b,KAAK,CAAC2b,EAAD,CAAV;AACAA,MAAAA,EAAE,GAAG1b,IAAI,CAAC0b,EAAD,CAAT;AACD,KAHD,MAGO;AACLE,MAAAA,EAAE,GAAGV,GAAL;AACD;;AACD,QAAIjG,OAAO,CAAC0G,EAAD,CAAX,EAAiB;AACfE,MAAAA,EAAE,GAAG9b,KAAK,CAAC4b,EAAD,CAAV;AACAA,MAAAA,EAAE,GAAG3b,IAAI,CAAC2b,EAAD,CAAT;AACD,KAHD,MAGO;AACLE,MAAAA,EAAE,GAAGX,GAAL;AACD;;AACD,QAAIvI,WAAW,CAAC+I,EAAD,CAAX,IAAmB/I,WAAW,CAACgJ,EAAD,CAAlC,EAAwC;AACtC;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAxgB,MAAAA,GAAG;AACHkxB,MAAAA,QAAQ;AACRuC,MAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,UAAI4R,CAAC,KAAK,CAAV,EAAa;AACX;AACD,OATqC,CAUtC;AAEA;;;AACAtN,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,MAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;AACAyM,MAAAA,QAAQ;AACRmE,MAAAA,QAAQ;AACRuC,MAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,UAAI4R,CAAC,KAAK,CAAN,IAAW0D,KAAK,CAAC1D,CAAD,CAApB,EAAyB;AACvB;AACD;;AACD,UAAIA,CAAC,GAAG,CAAR,EAAW;AACTA,QAAAA,CAAC,GAAG,CAACA,CAAL;AACAhT,QAAAA,EAAE,GAAGJ,EAAL;AACAA,QAAAA,EAAE,GAAGC,EAAL;AACAA,QAAAA,EAAE,GAAGG,EAAL;AACAA,QAAAA,EAAE,GAAGF,EAAL;AACAA,QAAAA,EAAE,GAAGC,EAAL;AACAA,QAAAA,EAAE,GAAGC,EAAL;AACD;;AACD0F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;;AACA,WAAKiU,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,IAAImI,GAAhB,GAAsBnI,CAAC,IAAImI,GAArD,EAA2D+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAlF,EAAqF;AACnFuG,QAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;AACAoG,QAAAA,YAAY,CAACoN,CAAD,CAAZ;AACA9zB,QAAAA,GAAG;AACHmmB,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAuB,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;AACT;;AACD2O,MAAAA,KAAK,CAAC4I,CAAC,GAAGvC,CAAL,CAAL,GAAehR,GAAG,EAAlB;AACA,aAAO2K,KAAK,CAAC4I,CAAC,GAAGtC,CAAL,CAAL,GAAezF,MAAM,CAACn1B,GAAD,CAA5B;AACD;AACF,GA5DD,CA/vUU,CA6zUV;;;AACA8Y,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAI0tB,UAAJ,EAAgBD,QAAhB;;AACA,QAAIn1C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAjB,GAA6C,GAA7C,GAAmDnI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA/D;AACD;;AACD3L,IAAAA,IAAI;AACJyV,IAAAA,QAAQ,GAAG5c,GAAG,EAAd;AACA6c,IAAAA,UAAU,GAAG7c,GAAG,EAAhB;;AACA,QAAI,CAACxsB,KAAI,CAACqpC,UAAD,EAAaD,QAAb,CAAL,IAA+B,CAACnlB,kBAAkB,CAAColB,UAAD,EAAaD,QAAb,CAAlD,IAA4E,CAACnkB,QAAQ,CAACmkB,QAAD,CAAzF,EAAqG;AACnGnY,MAAAA,IAAI,CAACoY,UAAD,CAAJ;AACD,KAFD,MAEO;AACLpN,MAAAA,YAAY,CAACmN,QAAD,EAAWC,UAAX,CAAZ;AACD;;AACD,WAAOnW,OAAO,EAAd;AACD,GAdD,CA9zUU,CA80UV;AAEA;AAEA;AAEA;AAEA;;;AACA+I,EAAAA,YAAY,GAAG,sBAASmN,QAAT,EAAmBC,UAAnB,EAA+B;AAC5C,QAAIqC,CAAJ,EAAOC,OAAP,EAAgBC,CAAhB,EAAmBC,mBAAnB,EAAwCC,QAAxC,EAAkDC,aAAlD,EAAiEC,UAAjE,EAA6EC,gBAA7E,EAA+FC,aAA/F,EAA8G7N,CAA9G,EAAiHO,CAAjH,EAAoHtf,EAApH,EAAwHmG,EAAxH,EAA4H4a,EAA5H,EAAgI3V,CAAhI,EAAmIyhB,6BAAnI,EAAkKC,SAAlK,EAA6K3C,cAA7K,EAA6L4C,qBAA7L,EAAoNxZ,GAApN,EAAyNC,IAAzN,EAA+NyN,IAA/N,EAAqOC,IAArO,EAA2O8L,aAA3O,EAA0PC,iBAA1P,EAA6QC,WAA7Q,EAA0RC,sBAA1R;;AACA,QAAIx4C,KAAJ,EAAW;AACT+3C,MAAAA,UAAU,GAAG5C,QAAb;AACAoD,MAAAA,WAAW,GAAGnD,UAAd;AACA3J,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAlD;AACD;;AACD7Y,IAAAA,IAAI;AACJ0K,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,QAAInX,WAAU,CAACgnB,UAAD,CAAd,EAA4B;AAC1B7R,MAAAA,IAAI,CAAC,sCAAD,CAAJ;AACD;;AACD4U,IAAAA,SAAS,GAAG5S,GAAZ;AACAuS,IAAAA,aAAa,GAAGl6B,KAAK,CAACu3B,QAAD,EAAWC,UAAX,CAAL,GAA8B,CAA9C;;AACA,QAAIp1C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,kDAApD,GAAyGT,aAArH;AACD;;AACDI,IAAAA,6BAA6B,GAAG5Z,wBAAwB,CAAC8L,CAAD,CAAxD;;AACA,QAAIpqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,kDAApD,GAAyGT,aAArH;AACD,KApB2C,CAqB5C;;;AACAU,IAAAA,sBAAsB,GAAG,MAAzB;AACAH,IAAAA,aAAa,GAAG,IAAhB;;AACA,WAAOP,aAAa,GAAG,CAAvB,EAA0B;AACxB,UAAI93C,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,oCAApD,GAA2FT,aAAvG;AACD;;AACD,UAAI/qB,kBAAkB,CAACmW,KAAK,CAACiV,SAAS,GAAG,CAAb,CAAN,CAAtB,EAA8C;AAC5C,YAAIn4C,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,qBAAhE;AACD;;AACDd,QAAAA,CAAC,GAAG/gB,GAAJ;AACAihB,QAAAA,CAAC,GAAG1O,IAAJ;AACD,OAND,MAMO;AACL;AACA,YAAIuP,sBAAsB,KAAK,MAA/B,EAAuC;AAAA,sCACbvuB,yBAAyB,CAACkrB,QAAD,EAAW2C,aAAX,EAA0BK,SAA1B,CADZ;;AAAA;;AACpCF,UAAAA,aADoC;AACrBR,UAAAA,CADqB;AAClBE,UAAAA,CADkB;AAEtC,SAFD,MAEO,IAAIa,sBAAsB,KAAK,SAA/B,EAA0C;AAAA,sCACvBxuB,4BAA4B,CAACquB,aAAD,EAAgBP,aAAhB,EAA+BK,SAA/B,CADL;;AAAA;;AAC9CH,UAAAA,gBAD8C;AAC5BP,UAAAA,CAD4B;AAEhD;AACF;;AACD,UAAIe,sBAAsB,KAAK,MAA/B,EAAuC;AACrC,YAAIP,aAAa,KAAK,CAAtB,EAAyB;AACvBO,UAAAA,sBAAsB,GAAG,SAAzB;AACA;AACD,SAHD,MAGO;AACL;AACA;AACAxb,UAAAA,IAAI,CAACya,CAAD,CAAJ,CAHK,CAGI;;AACTza,UAAAA,IAAI,CAACmY,QAAD,CAAJ,CAJK,CAIW;;AAChB5gB,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC2a,CAAD,CAAJ,CANK,CAMI;;AACT9gC,UAAAA,GAAG;AACH6gC,UAAAA,OAAO,GAAGnf,GAAG,EAAb;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,mBAApD,GAA0Eb,OAAtF;AACD,WAXI,CAYL;AACA;;AACA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACU;AAEA;AACA;AACA;AACA;;;AACA1a,UAAAA,IAAI,CAACkb,6BAAD,CAAJ;AACAlb,UAAAA,IAAI,CAAC0a,OAAD,CAAJ;AACA5iB,UAAAA,iBAAiB;AACjBojB,UAAAA,6BAA6B,GAAG3f,GAAG,EAAnC,CAhCK,CAiCL;AACA;AACA;AACA;AACA;;AACAqP,UAAAA,SAAS,CAACkQ,aAAD,EAAgBK,SAAhB,EAA2BV,CAA3B,EAA8BE,CAA9B,CAAT;;AACA,iBAAOG,aAAa,IAAI/qB,kBAAkB,CAACmW,KAAK,CAACiV,SAAS,GAAGL,aAAb,CAAN,CAA1C,EAA8E;AAC5EA,YAAAA,aAAa;AACd;;AACD9a,UAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,eAAK0B,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGkZ,aAAtB,EAAsC,KAAKlZ,GAAL,GAAWnI,CAAC,IAAImI,GAAhB,GAAsBnI,CAAC,IAAImI,GAAjE,EAAuE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA9F,EAAiG;AAC/FuG,YAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGxN,CAAb,CAAN,CAAJ;AACA3N,YAAAA,IAAI,CAACmY,QAAD,CAAJ,CAF+F,CAE/E;;AAChB5X,YAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,YAAAA,KAAK;AACLpE,YAAAA,QAAQ;AACR1d,YAAAA,GAAG;AACJ;;AACDwhC,UAAAA,aAAa,GAAG9f,GAAG,EAAnB;AACD,SAxDoC,CAyDvC;;AACC,OA1DD,MA0DO,IAAIigB,sBAAsB,KAAK,SAA/B,EAA0C;AAC/C,YAAIR,gBAAgB,KAAK,CAAzB,EAA4B;AAC1B;AACD,SAFD,MAEO;AACL;AACA;AACAhb,UAAAA,IAAI,CAACya,CAAD,CAAJ,CAHK,CAGI;;AACTza,UAAAA,IAAI,CAACmY,QAAD,CAAJ,CAJK,CAIW;;AAChBvR,UAAAA,QAAQ,GALH,CAML;;AACA5G,UAAAA,IAAI,CAACya,CAAD,CAAJ,CAPK,CAOI;;AACT94B,UAAAA,SAAS;AACTqe,UAAAA,IAAI,CAACmY,QAAD,CAAJ,CATK,CASW;;AAChBvR,UAAAA,QAAQ,GAVH,CAWL;;AACArP,UAAAA,QAAQ,GAZH,CAaL;AACA;AACA;;AACA+jB,UAAAA,iBAAiB,GAAG/f,GAAG,EAAvB;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,mBAApD,GAA0ED,iBAAtF;AACD,WAnBI,CAoBL;AACA;;AACA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACU;AAEA;AACA;AACA;AACA;;;AACAtb,UAAAA,IAAI,CAACkb,6BAAD,CAAJ;AACAE,UAAAA,qBAAqB,GAAG7f,GAAG,EAA3B,CAtCK,CAuCL;;AACAyE,UAAAA,IAAI,CAACkb,6BAAD,CAAJ;AACAlb,UAAAA,IAAI,CAACsb,iBAAD,CAAJ;AACAxjB,UAAAA,iBAAiB;AACjBojB,UAAAA,6BAA6B,GAAG3f,GAAG,EAAnC;;AACA,cAAI8f,aAAa,IAAI,IAArB,EAA2B;AACzBrb,YAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,iBAAK0B,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGiZ,aAAxB,EAAwC,KAAKjZ,IAAL,GAAYxT,EAAE,IAAIwT,IAAlB,GAAyBxT,EAAE,IAAIwT,IAAvE,EAA8E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG2R,cAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGxN,CAAb,CAAN,CAAJ;AACA3N,cAAAA,IAAI,CAACmY,QAAD,CAAJ,CAFyG,CAEzF;;AAChB5X,cAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,cAAAA,KAAK;AACLpE,cAAAA,QAAQ;AACR1d,cAAAA,GAAG;AACJ;;AACDwhC,YAAAA,aAAa,GAAG9f,GAAG,EAAnB;AACD,WAvDI,CAwDL;;;AACAsf,UAAAA,QAAQ,GAAGQ,aAAX,CAzDK,CA0DL;AACA;AACA;;AACArb,UAAAA,IAAI,CAAC6a,QAAD,CAAJ,CA7DK,CA8DL;;AACA7a,UAAAA,IAAI,CAACsb,iBAAD,CAAJ,CA/DK,CA+DoB;;AACzBtb,UAAAA,IAAI,CAACmY,QAAD,CAAJ,CAhEK,CAgEW;;AAChB5yB,UAAAA,OAAO;AACP81B,UAAAA,aAAa,GAAG9f,GAAG,EAAnB;AACAyE,UAAAA,IAAI,CAACqb,aAAD,CAAJ;AACArb,UAAAA,IAAI,CAACsb,iBAAD,CAAJ,CApEK,CAoEoB;;AACzB/jB,UAAAA,QAAQ;AACRqjB,UAAAA,mBAAmB,GAAGrf,GAAG,EAAzB;;AACA,cAAI,CAAClT,KAAK,CAACuyB,mBAAD,EAAsBC,QAAtB,CAAV,EAA2C;AACzC;AACA;AACA;AACA,gBAAI73C,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,mGAAZ;AACD;;AACD,gBAAI3rC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,6DAA6DyM,qBAA7D,GAAqF,KAArF,GAA6FP,QAAzG;AACD;;AACD7a,YAAAA,IAAI,CAACob,qBAAD,CAAJ;AACApb,YAAAA,IAAI,CAAC6a,QAAD,CAAJ;AACArC,YAAAA,cAAc,GAAGnvB,SAAjB;AACAA,YAAAA,SAAS,GAAG,CAAZ;AACAkhB,YAAAA,UAAU;AACVlhB,YAAAA,SAAS,GAAGmvB,cAAZ;AACA1gB,YAAAA,iBAAiB;AACjBojB,YAAAA,6BAA6B,GAAG3f,GAAG,EAAnC;AACA2K,YAAAA,KAAK,CAACkH,CAAD,CAAL,GAAW8N,6BAAX;AACAvkB,YAAAA,OAAO,CAACyW,CAAC,GAAG,CAAL,CAAP;AACAnL,YAAAA,OAAO;AACP;AACD,WA7FI,CA8Ff;AAEU;AACV;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU,eAAK0L,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGwL,aAAxB,EAAwC,KAAKxL,IAAL,GAAY9a,EAAE,IAAI8a,IAAlB,GAAyB9a,EAAE,IAAI8a,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG+G,YAAAA,GAAG;AACJ;;AACD3a,UAAAA,KAAK,CAACu3B,QAAD,EAAWkD,aAAX,CAAL;AACAP,UAAAA,aAAa,IAAI,CAAjB;AACD;AACF;AACF,KA1N2C,CA2N5C;;;AACA,QAAI93C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,2DAAhE;AACD;;AACDvb,IAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,SAAK0B,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGuL,aAAxB,EAAwC,KAAKvL,IAAL,GAAYH,EAAE,IAAIG,IAAlB,GAAyBH,EAAE,IAAIG,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGpP,MAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGxN,CAAb,CAAN,CAAJ;AACA3N,MAAAA,IAAI,CAACmY,QAAD,CAAJ,CAFyG,CAEzF;;AAChB5X,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,MAAAA,KAAK;AACLpE,MAAAA,QAAQ;AACR1d,MAAAA,GAAG;AACJ;;AACDu+B,IAAAA,UAAU,GAAG7c,GAAG,EAAhB;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,gDAApD,GAAuGnD,UAAU,CAAC/J,QAAX,EAAnH;AACD;;AACDrO,IAAAA,IAAI,CAACoY,UAAD,CAAJ;AACAI,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACAkhB,IAAAA,UAAU;AACVlhB,IAAAA,SAAS,GAAGmvB,cAAZ;AACAJ,IAAAA,UAAU,GAAG7c,GAAG,EAAhB;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,0CAApD,GAAiGnD,UAAU,CAAC/J,QAAX,EAA7G;AACD,KApP2C,CAqP5C;AAEA;;;AACA,QAAIyM,aAAa,GAAG,CAAhB,IAAqBvoB,cAAc,CAAC2T,KAAK,CAACiV,SAAS,GAAGL,aAAb,CAAN,CAAvC,EAA2E;AACzE9a,MAAAA,IAAI,CAACoY,UAAD,CAAJ,CADyE,CAEzE;AACA;;AACAngB,MAAAA,MAAM,GAJmE,CAKzE;;AACAmgB,MAAAA,UAAU,GAAG7c,GAAG,EAAhB;AACAyE,MAAAA,IAAI,CAACkb,6BAAD,CAAJ;AACA/iB,MAAAA,eAAe;AACf+iB,MAAAA,6BAA6B,GAAG3f,GAAG,EAAnC;AACD;;AACDyE,IAAAA,IAAI,CAACkb,6BAAD,CAAJ;AACAlb,IAAAA,IAAI,CAACoY,UAAD,CAAJ;AACAtgB,IAAAA,iBAAiB;AACjBojB,IAAAA,6BAA6B,GAAG3f,GAAG,EAAnC;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoM,UAAnB,GAAgC,GAAhC,GAAsCQ,WAAtC,GAAoD,WAApD,GAAkEL,6BAA9E;AACD;;AACDhV,IAAAA,KAAK,CAACkH,CAAD,CAAL,GAAW8N,6BAAX;AACAvkB,IAAAA,OAAO,CAACyW,CAAC,GAAG,CAAL,CAAP;AACA,WAAOnL,OAAO,EAAd;AACD,GA7QD;;AA+QAX,EAAAA,wBAAwB,GAAG,kCAAS8L,CAAT,EAAY;AACrC,QAAIO,CAAJ,EAAOtf,EAAP,EAAWoL,CAAX,EAAcgY,KAAd,EAAqBgK,YAArB,EAAmC7Z,GAAnC,EAAwCC,IAAxC,EAA8CyN,IAA9C,EAAoDC,IAApD,CADqC,CAErC;;AACAkC,IAAAA,KAAK,GAAG/X,GAAR;;AACA,SAAKiU,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGwL,CAAd,EAAiBvL,IAAI,GAAG0G,GAA7B,EAAmC3G,GAAG,IAAIC,IAAP,GAAcpI,CAAC,GAAGoI,IAAlB,GAAyBpI,CAAC,GAAGoI,IAAhE,EAAuE8L,CAAC,GAAG/L,GAAG,IAAIC,IAAP,GAAc,EAAEpI,CAAhB,GAAoB,EAAEA,CAAjG,EAAoG;AAClGuG,MAAAA,IAAI,CAACkG,KAAK,CAACyH,CAAD,CAAN,CAAJ;;AACAtpB,MAAAA,YAAW;;AACX2b,MAAAA,IAAI,CAACyR,KAAD,CAAJ;AACA5c,MAAAA,GAAG;AACH4c,MAAAA,KAAK,GAAGlW,GAAG,EAAX;AACD,KAVoC,CAWzC;;;AACI,SAAKoS,CAAC,GAAGtf,EAAE,GAAGihB,IAAI,GAAGlC,CAAhB,EAAmBmC,IAAI,GAAGhH,GAA/B,EAAqC+G,IAAI,IAAIC,IAAR,GAAelhB,EAAE,GAAGkhB,IAApB,GAA2BlhB,EAAE,GAAGkhB,IAArE,EAA4E5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAElhB,EAAjB,GAAsB,EAAEA,EAAxG,EAA4G;AAC1G2R,MAAAA,IAAI,CAACyR,KAAD,CAAJ;AACAzR,MAAAA,IAAI,CAACkG,KAAK,CAACyH,CAAD,CAAN,CAAJ;AACApW,MAAAA,QAAQ;AACR2O,MAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACD,KAjBoC,CAkBrC;;;AACAyE,IAAAA,IAAI,CAACyR,KAAD,CAAJ;AACAjQ,IAAAA,WAAW;AACXia,IAAAA,YAAY,GAAGlgB,GAAG,EAAlB;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,sCAAsC8M,YAAY,CAACpN,QAAb,EAAlD;AACD;;AACD,WAAOoN,YAAP;AACD,GA1BD;;AA4BAxuB,EAAAA,yBAAyB,GAAG,mCAASkrB,QAAT,EAAmB2C,aAAnB,EAAkCK,SAAlC,EAA6C;AACvE,QAAIO,EAAJ,EAAQ9C,EAAR,EAAY+C,cAAZ,EAA4BvO,CAA5B,EAA+BO,CAA/B,EAAkCtf,EAAlC,EAAsCuf,CAAtC,EAAyCpZ,EAAzC,EAA6C4a,EAA7C,EAAiDC,EAAjD,EAAqDuM,GAArD,EAA0DC,GAA1D,EAA+DpiB,CAA/D,EAAkE2e,UAAlE,EAA8ExW,GAA9E,EAAmFC,IAAnF,EAAyFyN,IAAzF,EAA+FC,IAA/F,EAAqGC,IAArG,EAA2GsM,YAA3G,EAAyHC,YAAzH,EAAuIC,eAAvI,EAAwJC,aAAxJ,EAAuKC,SAAvK;;AACA,QAAIl5C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,2BAAZ;AACD;;AACDhB,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAR,IAAAA,CAAC,GAAG,CAAJ;AACAsO,IAAAA,EAAE,GAAG,CAAL;AACA9C,IAAAA,EAAE,GAAG,CAAL;AACAgD,IAAAA,GAAG,GAAG,CAAN;AACAC,IAAAA,GAAG,GAAG,CAAN;;AACA,QAAI74C,KAAJ,EAAW;AACTg9B,MAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,WAAK0B,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGkZ,aAAtB,EAAsC,KAAKlZ,GAAL,GAAWnI,CAAC,IAAImI,GAAhB,GAAsBnI,CAAC,IAAImI,GAAjE,EAAuE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA9F,EAAiG;AAC/FuG,QAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGxN,CAAb,CAAN,CAAJ;AACA3N,QAAAA,IAAI,CAACmY,QAAD,CAAJ;AACA5X,QAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAhS,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;AACR1d,QAAAA,GAAG;AACJ;;AACDu+B,MAAAA,UAAU,GAAG7c,GAAG,EAAhB;AACAkT,MAAAA,OAAO,CAACE,GAAR,CAAY,UAAUyJ,UAAtB;AACD;;AACDhL,IAAAA,CAAC,GAAG7E,GAAJ;AACAqQ,IAAAA,EAAE,GAAGrQ,GAAL;AACAvI,IAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGL,aAAb,CAAN,CAAJ;AACAx1B,IAAAA,gBAAgB;AAChBu2B,IAAAA,GAAG,GAAGtT,GAAG,GAAGqQ,EAAZ;AACA8C,IAAAA,EAAE,GAAGnT,GAAL;AACAvI,IAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAG,CAAb,CAAN,CAAJ;AACA71B,IAAAA,gBAAgB;AAChBs2B,IAAAA,GAAG,GAAGrT,GAAG,GAAGmT,EAAZ;;AACA,QAAI14C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAZ;;AACA,WAAKhB,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG+Z,GAAxB,EAA8B,KAAK/Z,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAA3D,EAAkE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7FogB,QAAAA,OAAO,CAACE,GAAR,CAAY,OAAOzI,KAAK,CAACwV,EAAE,GAAG/N,CAAN,CAAxB;AACD;;AACDc,MAAAA,OAAO,CAACE,GAAR,CAAY,0BAAZ;;AACA,WAAKhB,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGuM,GAAxB,EAA8B,KAAKvM,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA3D,EAAkE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7Fia,QAAAA,OAAO,CAACE,GAAR,CAAY,OAAOzI,KAAK,CAAC0S,EAAE,GAAGjL,CAAN,CAAxB;AACD;AACF,KA3CsE,CA4C3E;;;AACI,SAAKmO,YAAY,GAAG1M,EAAE,GAAG,CAApB,EAAuBG,IAAI,GAAGsM,GAAnC,EAAyC,KAAKtM,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAtE,EAA6EuM,YAAY,GAAG,KAAKvM,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAjH,EAAqH;AACnH,WAAK2M,YAAY,GAAG1M,EAAE,GAAG,CAApB,EAAuBG,IAAI,GAAGoM,GAAnC,EAAyC,KAAKpM,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAtE,EAA6EuM,YAAY,GAAG,KAAKvM,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAjH,EAAqH;AACnH;AACA4M,QAAAA,aAAa,GAAG/V,KAAK,CAAC0S,EAAE,GAAGkD,YAAN,CAArB;AACAE,QAAAA,eAAe,GAAG9V,KAAK,CAACwV,EAAE,GAAGK,YAAN,CAAvB;AACA/b,QAAAA,IAAI,CAACgc,eAAD,CAAJ;AACAhc,QAAAA,IAAI,CAACic,aAAD,CAAJ;AACA92B,QAAAA,MAAM;AACN8S,QAAAA,MAAM;AACNikB,QAAAA,SAAS,GAAG3gB,GAAG,EAAf;AACAogB,QAAAA,cAAc,GAAGttC,QAAQ,CAACysC,aAAD,EAAgBK,SAAhB,EAA2Be,SAA3B,CAAzB;;AACA,YAAIl5C,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,WAAWsN,aAAvB;AACAxN,UAAAA,OAAO,CAACE,GAAR,CAAY,SAASqN,eAArB;AACAvN,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAYwJ,QAAxB;AACA1J,UAAAA,OAAO,CAACE,GAAR,CAAY,WAAWuN,SAAvB;AACAzN,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAYuN,SAAxB;AACAzN,UAAAA,OAAO,CAACE,GAAR,CAAY,OAAOgN,cAAnB;AACD;;AACD,YAAI5rB,kBAAkB,CAAC4rB,cAAD,CAAtB,EAAwC;AACtChlB,UAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,cAAIpqC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,uCAAZ;AACD;;AACD,iBAAO,CAAC,CAAD,EAAIsN,aAAJ,EAAmBD,eAAnB,CAAP;AACD;;AACDhc,QAAAA,IAAI,CAACgc,eAAD,CAAJ;AACA/jB,QAAAA,MAAM;AACN+jB,QAAAA,eAAe,GAAGzgB,GAAG,EAArB;AACAyE,QAAAA,IAAI,CAACkc,SAAD,CAAJ;AACAjkB,QAAAA,MAAM;AACNikB,QAAAA,SAAS,GAAG3gB,GAAG,EAAf;AACAogB,QAAAA,cAAc,GAAGttC,QAAQ,CAACysC,aAAD,EAAgBK,SAAhB,EAA2Be,SAA3B,CAAzB;;AACA,YAAIl5C,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,WAAWsN,aAAvB;AACAxN,UAAAA,OAAO,CAACE,GAAR,CAAY,SAASqN,eAArB;AACAvN,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAYwJ,QAAxB;AACA1J,UAAAA,OAAO,CAACE,GAAR,CAAY,WAAWuN,SAAvB;AACAzN,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAYuN,SAAxB;AACAzN,UAAAA,OAAO,CAACE,GAAR,CAAY,OAAOgN,cAAnB;AACD;;AACD,YAAI5rB,kBAAkB,CAAC4rB,cAAD,CAAtB,EAAwC;AACtChlB,UAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,cAAIpqC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,uCAAZ;AACD;;AACD,iBAAO,CAAC,CAAD,EAAIsN,aAAJ,EAAmBD,eAAnB,CAAP;AACD;AACF;AACF;;AACDrlB,IAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,QAAIpqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,qCAAZ;AACD;;AACD,WAAO,CAAC,CAAD,EAAI,IAAJ,EAAU,IAAV,CAAP;AACD,GApGD;;AAsGA3hB,EAAAA,4BAA4B,GAAG,sCAASquB,aAAT,EAAwBP,aAAxB,EAAuCK,SAAvC,EAAkD;AAC/E,QAAIO,EAAJ,EAAQ9C,EAAR,EAAY+C,cAAZ,EAA4BvO,CAA5B,EAA+BO,CAA/B,EAAkCtf,EAAlC,EAAsCuf,CAAtC,EAAyCgO,GAAzC,EAA8CC,GAA9C,EAAmDpiB,CAAnD,EAAsDqiB,YAAtD,EAAoEC,YAApE,EAAkFG,SAAlF;AACAvO,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAR,IAAAA,CAAC,GAAG,CAAJ;AACAsO,IAAAA,EAAE,GAAG,CAAL;AACA9C,IAAAA,EAAE,GAAG,CAAL;AACAgD,IAAAA,GAAG,GAAG,CAAN;AACAC,IAAAA,GAAG,GAAG,CAAN;;AACA,QAAIf,aAAa,IAAI,CAArB,EAAwB;AACtB,UAAI93C,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,8EAAZ;AACD;;AACD,aAAO,CAAC,CAAD,EAAI,IAAJ,CAAP;AACD;;AACD,QAAI3rC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mCAAmC0M,aAA/C;AACD;;AACDjO,IAAAA,CAAC,GAAG7E,GAAJ;AACAqQ,IAAAA,EAAE,GAAGrQ,GAAL,CAnB+E,CAoB/E;AACA;;AACAhI,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAC,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,IAAAA,KAAK;;AACL8F,IAAAA,KAAI;;AACJya,IAAAA,SAAS,GAAG3gB,GAAG,EAAf;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuCuN,SAAnD;AACD;;AACDlc,IAAAA,IAAI,CAACkc,SAAD,CAAJ;AACAP,IAAAA,cAAc,GAAGttC,QAAQ,CAACysC,aAAD,EAAgBK,SAAhB,EAA2Be,SAA3B,CAAzB;;AACA,QAAIl5C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkCgN,cAA9C;AACD;;AACD,QAAI5rB,kBAAkB,CAAC4rB,cAAD,CAAtB,EAAwC;AACtChlB,MAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,UAAIpqC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,0CAAZ;AACD;;AACD,aAAO,CAAC,CAAD,EAAIuN,SAAJ,CAAP;AACD,KAzC8E,CA0C/E;AACA;AACA;;;AACA3b,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,IAAAA,KAAK;;AACL8F,IAAAA,KAAI;;AACJya,IAAAA,SAAS,GAAG3gB,GAAG,EAAf;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuCuN,SAAnD;AACD;;AACDlc,IAAAA,IAAI,CAACkc,SAAD,CAAJ;AACAP,IAAAA,cAAc,GAAGttC,QAAQ,CAACysC,aAAD,EAAgBK,SAAhB,EAA2Be,SAA3B,CAAzB;;AACA,QAAIl5C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkCgN,cAA9C;AACD;;AACD,QAAI5rB,kBAAkB,CAAC4rB,cAAD,CAAtB,EAAwC;AACtChlB,MAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,UAAIpqC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,0CAAZ;AACD;;AACD,aAAO,CAAC,CAAD,EAAIuN,SAAJ,CAAP;AACD,KAhE8E,CAiEnF;AACA;;;AACI,SAAKJ,YAAY,GAAGriB,CAAC,GAAG,CAAC,EAAzB,EAA6BA,CAAC,IAAI,EAAlC,EAAsCqiB,YAAY,GAAG,EAAEriB,CAAvD,EAA0D;AACxD,WAAKsiB,YAAY,GAAG1tB,EAAE,GAAG,CAAzB,EAA4BA,EAAE,IAAI,CAAlC,EAAqC0tB,YAAY,GAAG,EAAE1tB,EAAtD,EAA0D;AACxDkS,QAAAA,YAAY,CAACub,YAAD,CAAZ;AACAvb,QAAAA,YAAY,CAACwb,YAAD,CAAZ;AACA/b,QAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAgJ,QAAAA,QAAQ;AACR1d,QAAAA,GAAG;;AACH4nB,QAAAA,KAAI;;AACJya,QAAAA,SAAS,GAAG3gB,GAAG,EAAf;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,6DAA6DuN,SAAzE;AACD;;AACDlc,QAAAA,IAAI,CAACkc,SAAD,CAAJ;AACAP,QAAAA,cAAc,GAAGttC,QAAQ,CAACysC,aAAD,EAAgBK,SAAhB,EAA2Be,SAA3B,CAAzB,CAZwD,CAaxD;;AACA,YAAInsB,kBAAkB,CAAC4rB,cAAD,CAAtB,EAAwC;AACtChlB,UAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,cAAIpqC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBgN,cAArC;AACD;;AACD,iBAAO,CAAC,CAAD,EAAIO,SAAJ,CAAP;AACD;AACF;AACF;;AACDvlB,IAAAA,OAAO,CAACyW,CAAD,CAAP;;AACA,QAAIpqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,0CAAZ;AACD;;AACD,WAAO,CAAC,CAAD,EAAI,IAAJ,CAAP;AACD,GAhGD,CAxuVU,CA00VV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACA/D,EAAAA,SAAS,GAAG,mBAASkQ,aAAT,EAAwBK,SAAxB,EAAmCV,CAAnC,EAAsCE,CAAtC,EAAyC;AACnD,QAAIwB,CAAJ,EAAOxO,CAAP,EAAUlU,CAAV,EAAamI,GAAb;AACAua,IAAAA,CAAC,GAAGlQ,IAAJ;;AACA,SAAK0B,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGkZ,aAAnB,EAAmClZ,GAAG,IAAI,CAAP,GAAWnI,CAAC,GAAG,CAAf,GAAmBA,CAAC,GAAG,CAA1D,EAA8DkU,CAAC,GAAG/L,GAAG,IAAI,CAAP,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAArF,EAAwF;AACtFuG,MAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGxN,CAAb,CAAN,CAAJ;AACAzH,MAAAA,KAAK,CAACiV,SAAS,GAAGxN,CAAb,CAAL,GAAuBwO,CAAvB;AACAnc,MAAAA,IAAI,CAACya,CAAD,CAAJ;AACAt1B,MAAAA,MAAM;AACNg3B,MAAAA,CAAC,GAAG5gB,GAAG,EAAP;AACAyE,MAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGxN,CAAZ,GAAgB,CAAjB,CAAN,CAAJ;AACA3N,MAAAA,IAAI,CAACmc,CAAD,CAAJ;AACAnc,MAAAA,IAAI,CAAC2a,CAAD,CAAJ;AACApjB,MAAAA,QAAQ;AACRqP,MAAAA,QAAQ;AACRV,MAAAA,KAAK,CAACiV,SAAS,GAAGxN,CAAZ,GAAgB,CAAjB,CAAL,GAA2BpS,GAAG,EAA9B;AACD;;AACD2K,IAAAA,KAAK,CAACiV,SAAS,GAAG,CAAb,CAAL,GAAuBgB,CAAvB;;AACA,QAAIn5C,KAAJ,EAAW;AACT,aAAOyrC,OAAO,CAACE,GAAR,CAAY,kBAAkBwN,CAAC,CAAC9N,QAAF,EAA9B,CAAP;AACD;AACF,GApBD;;AAsBAhgC,EAAAA,QAAQ,GAAG,kBAASysC,aAAT,EAAwBK,SAAxB,EAAmCiB,UAAnC,EAA+C;AACxD,QAAIzO,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV;AACA5B,IAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,SAAK0B,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGkZ,aAAnB,EAAmClZ,GAAG,IAAI,CAAP,GAAWnI,CAAC,IAAI,CAAhB,GAAoBA,CAAC,IAAI,CAA5D,EAAgEkU,CAAC,GAAG/L,GAAG,IAAI,CAAP,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAvF,EAA0F;AACxFuG,MAAAA,IAAI,CAACoc,UAAD,CAAJ;AACA7kB,MAAAA,QAAQ;AACRyI,MAAAA,IAAI,CAACkG,KAAK,CAACiV,SAAS,GAAGxN,CAAb,CAAN,CAAJ,CAHwF,CAIxF;AACA;AACA;;AACA9zB,MAAAA,GAAG;AACJ;;AACD,WAAO0hB,GAAG,EAAV;AACD,GAbD,CA/2VU,CA83VV;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AACA5Q,EAAAA,OAAO,GAAG,iBAASsjB,CAAT,EAAY;AACpB,QAAIb,CAAJ;AACAA,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,QAAI7pB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAArB,EAA4B;AAC1B6tC,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBvN,QAAAA,iBAAiB,CAAChiB,GAAG,CAACuvB,CAAD,CAAJ,CAAjB;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,KAND,MAMO;AACLvN,MAAAA,iBAAiB,CAACuN,CAAD,CAAjB;AACD;;AACD,WAAO1F,GAAG,GAAG6E,CAAb;AACD,GAbD,CAh5VU,CA+5VV;;;AACA1M,EAAAA,iBAAiB,GAAG,2BAASuN,CAAT,EAAY;AAC9B,QAAIhB,OAAJ;;AACA,QAAIvuB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/Bw8B,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,MAAAA,OAAO,GAAG,EAAV;;AACA,aAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBjO,QAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACAhB,QAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,aAAOhB,OAAP;AACD,KARD,MAQO;AACL,aAAOjN,IAAI,CAACiO,CAAD,CAAX;AACD;AACF,GAbD;;AAeA9kC,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAI8jC,OAAJ;AACA/S,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJmlB,MAAAA,MAAM;AACNoiB,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAdD;;AAgBApiB,EAAAA,MAAM,GAAG,kBAAW;AAClB6X,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAzQ,IAAAA,WAAW;AACX,WAAOmX,OAAO,EAAd;AACD,GAND;;AAQAnX,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIpM,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B,aAAO2qB,UAAU,EAAjB;AACD,KAFD,MAEO,IAAImJ,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AACvB,aAAOlP,aAAa,EAApB;AACD,KAFM,MAEA,IAAIjc,KAAI,CAACmrB,EAAD,EAAKC,EAAL,CAAR,EAAkB;AACvB,aAAOoG,YAAY,CAAC,CAAD,CAAnB;AACD,KAFM,MAEA;AACL,aAAOP,IAAI,CAAC9F,EAAD,CAAX;AACD;AACF,GAVD;;AAYAnP,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIkiB,OAAJ;AACA1M,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACArG,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAtP,MAAAA,MAAM;AACNhR,MAAAA,GAAG;AACHozB,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAbD;;AAeAjiB,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI2iB,CAAJ,EAAOtf,EAAP,EAAWif,CAAX,EAAc7T,CAAd,EAAiBmI,GAAjB,EAAsBC,IAAtB;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;AACAA,IAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUwF,KAAd;AACA/S,IAAAA,EAAE,GAAG9f,YAAY,CAACgzB,CAAD,CAAjB;AACAlT,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBhT,EAAE,CAACyN,MAAH,CAAUuF,IAA3B;;AACA,SAAKS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG1H,EAAE,CAACyN,MAAH,CAAUuF,IAAhC,EAAuC,KAAKtL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAhE,EAAsE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA7F,EAAgG;AAC9FW,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACD,SAAKA,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,MAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACA3N,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAtP,MAAAA,MAAM;AACNuP,MAAAA,EAAE,CAACuN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACD,WAAOyE,IAAI,CAAC5F,EAAD,CAAX;AACD,GAjBD;;AAmBAhxB,EAAAA,UAAU,GAAG,sBAAW;AACtBuf,IAAAA,kBAAkB;AAClBqX,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;;AACJulC,IAAAA,QAAO;;AACPvlC,IAAAA,IAAI;AACJ,WAAOijB,kBAAkB,EAAzB;AACD,GAPD;;AASAlJ,EAAAA,gCAAgC,GAAG,0CAAS48B,WAAT,EAAsB;AACvD,QAAIC,UAAJ,EAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,cAA5C,EAA4DC,YAA5D;AACAD,IAAAA,cAAc,GAAGn6B,yBAAwB,CAACykB,MAAM,CAAC/zB,KAAD,CAAP,EAAgBqpC,WAAhB,CAAzC;AACAG,IAAAA,WAAW,GAAGl6B,yBAAwB,CAACykB,MAAM,CAACj0B,EAAD,CAAP,EAAaupC,WAAb,CAAtC;AACAC,IAAAA,UAAU,GAAGh6B,yBAAwB,CAACykB,MAAM,CAACpiC,CAAD,CAAP,EAAY03C,WAAZ,CAArC;AACAE,IAAAA,aAAa,GAAGj6B,yBAAwB,CAACykB,MAAM,CAACt1B,QAAD,CAAP,EAAmB4qC,WAAnB,CAAxC;AACAK,IAAAA,YAAY,GAAGp6B,yBAAwB,CAACykB,MAAM,CAAC3mC,GAAD,CAAP,EAAci8C,WAAd,CAAvC;;AACA,QAAIr5C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8B8N,cAA1C;AACAhO,MAAAA,OAAO,CAACE,GAAR,CAAY,2BAA2B6N,WAAvC;AACA/N,MAAAA,OAAO,CAACE,GAAR,CAAY,0BAA0B2N,UAAtC;AACA7N,MAAAA,OAAO,CAACE,GAAR,CAAY,6BAA6B4N,aAAzC;AACA9N,MAAAA,OAAO,CAACE,GAAR,CAAY,4BAA4B+N,YAAxC;AACD;;AACD,QAAID,cAAc,GAAG,CAAjB,IAAsBD,WAAW,GAAG,CAApC,IAAyCF,UAAU,GAAG,CAAtD,IAA2DC,aAAa,GAAG,CAA3E,IAAgFG,YAAY,GAAG,CAAnG,EAAsG;AACpG,aAAOnW,IAAI,CAAC,oCAAoC8V,WAArC,CAAX;AACD;AACF,GAjBD;;AAmBAnQ,EAAAA,OAAO,GAAG,mBAAW;AACnBxJ,IAAAA,IAAI;AACJ/Z,IAAAA,kBAAkB,GAFC,CAGnB;AACA;AACA;;AACAjjB,IAAAA,IAAI;;AACJulC,IAAAA,QAAO;;AACPvlC,IAAAA,IAAI;AACJijB,IAAAA,kBAAkB;AAClB,WAAOsZ,OAAO,EAAd;AACD,GAXD,CAjhWU,CA8hWV;AACA;AACA;AACA;AACA;AACA;;;AACAgJ,EAAAA,QAAO,GAAG,mBAAW;AACnB,QAAImC,CAAJ,EAAOO,CAAP,EAAUlU,CAAV,EAAamI,GAAb;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAP,IAAAA,CAAC,GAAG,CAAJ;AACAzkB,IAAAA,kBAAkB;AAClB+Z,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI1K,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACdkT,MAAAA,CAAC,GAAG7E,GAAJ;;AACA,aAAO1X,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACA+Q,QAAAA,QAAO;;AACP/Q,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACD,KARD,MAQO,IAAIlT,EAAE,CAAC4S,CAAH,KAASh2B,MAAb,EAAqB;AAC1BkpB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjY,MAAAA,WAAW;AACXiY,MAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,WAAKoS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG1H,EAAE,CAACyN,MAAH,CAAUwF,KAAhC,EAAwC,KAAKvL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAjE,EAAuE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA9F,EAAiG;AAC/FuG,QAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;;AACA1C,QAAAA,QAAO;;AACP/Q,QAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACDyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD,KAVM,MAUA,IAAIA,EAAE,CAAC4S,CAAH,KAASx6B,GAAb,EAAkB;AACvB0tB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/c,MAAAA,YAAY;AACb,KAHM,MAGA,IAAI+c,EAAE,KAAK6M,MAAM,CAACj0B,EAAD,CAAjB,EAAuB;AAC5BqtB,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,KAFM,MAEA,IAAIonB,EAAE,KAAK6M,MAAM,CAACpiC,CAAD,CAAjB,EAAsB;AAC3Bw7B,MAAAA,WAAW,CAAC2N,IAAI,CAACnpC,CAAN,CAAX;AACD,KAFM,MAEA;AACLq7B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD+H,IAAAA,OAAO;AACP,WAAOtZ,kBAAkB,EAAzB;AACD,GArCD;;AAuCAtf,EAAAA,UAAU,GAAG,sBAAW;AACtB22B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOqkC,MAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,MAAM,GAAG,kBAAW;AAClBrH,IAAAA,IAAI;AACJwI,IAAAA,OAAO;AACP,WAAOjJ,OAAO,EAAd;AACD,GAJD;;AAMAiJ,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAI2B,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAAC/L,aAAa,CAAC0K,EAAD,CAAlB,EAAwB;AACtBuG,MAAAA,WAAW,CAAC9xB,KAAD,CAAX;AACAqxB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAInE,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACmD,KAAL,CAAW/W,EAAE,CAAC2S,CAAd,CAAJ;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAIlb,SAAS,CAACuI,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACDE,IAAAA,EAAE,GAAG,IAAIhiB,CAAJ,EAAL;AACAgiB,IAAAA,EAAE,CAAC0S,CAAH,GAAOx6B,GAAP;AACA8nB,IAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAASvW,IAAI,CAACkE,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASrS,EAAE,CAACwS,CAAH,CAAKF,CAAd,CAAb;AACApS,IAAAA,EAAE,CAACsS,CAAH,CAAKF,CAAL,GAASnW,IAAI,CAAC,CAAD,CAAb;AACA2J,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACA,QAAI9H,gBAAgB,CAAC4H,EAAD,CAApB,EAA0B;AACxBqG,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA,aAAO1mB,GAAG,EAAV;AACD;AACF,GA5BD,CAvlWU,CAqnWV;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACA;AACA;AACA;;;AACAvQ,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIqkC,CAAJ,EAAOC,CAAP,EAAUd,CAAV,EAAa6P,eAAb,EAA8BljB,CAA9B,EAAiCmI,GAAjC,EAAsCC,IAAtC;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACA6P,IAAAA,eAAe,GAAGp+B,KAAK,CAAC2b,EAAD,CAAvB;;AACA,QAAI,CAAClG,QAAQ,CAAC2oB,eAAD,CAAb,EAAgC;AAC9BpW,MAAAA,IAAI,CAAC,kDAAD,CAAJ;AACD;;AACDvG,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJkoC,IAAAA,CAAC,GAAGlS,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAACpD,CAAD,CAAT,EAAc;AACZ5N,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACD8F,IAAAA,IAAI,CAAC3hB,OAAO,CAAC6b,EAAD,CAAR,CAAJ;AACAx0B,IAAAA,IAAI;AACJonC,IAAAA,CAAC,GAAGpR,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAClE,CAAD,CAAT,EAAc;AACZ9M,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD,KAtBmB,CAuBpB;AACA;;;AACAG,IAAAA,EAAE,GAAGtN,WAAW,CAAC4vB,eAAD,CAAhB;;AACA,SAAKhP,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGgM,CAAd,EAAiB/L,IAAI,GAAGiL,CAA7B,EAAiClL,GAAG,IAAIC,IAAP,GAAcpI,CAAC,IAAIoI,IAAnB,GAA0BpI,CAAC,IAAIoI,IAAhE,EAAuE8L,CAAC,GAAG/L,GAAG,IAAIC,IAAP,GAAc,EAAEpI,CAAhB,GAAoB,EAAEA,CAAjG,EAAoG;AAClG8G,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACArT,MAAAA,EAAE,GAAGiB,GAAG,EAAR;AACA2I,MAAAA,WAAW,CAACyY,eAAD,EAAkBriB,EAAlB,CAAX;AACA0F,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,MAAAA,IAAI;AACJ61B,MAAAA,GAAG;AACJ,KAjCmB,CAkCpB;;;AACA2I,IAAAA,WAAW,CAACyY,eAAD,EAAkBtiB,EAAlB,CAAX,CAnCoB,CAoCpB;;AACA,WAAOoG,WAAW,CAAC7uB,GAAD,CAAlB;AACD,GAtCD,CAxoWU,CAgrWV;AAEA;AAEA;AAEA;;;AACApI,EAAAA,UAAU,GAAG,sBAAW;AACtBw2B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOqmB,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjB2W,IAAAA,IAAI;AACJzW,IAAAA,MAAM;AACN,WAAOgW,OAAO,EAAd;AACD,GAJD;;AAMAhW,EAAAA,MAAM,GAAG,kBAAW;AAClB;AACAiO,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI5H,UAAU,CAACuG,EAAD,CAAV,IAAkBhpB,MAAM,CAACgpB,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAAS,CAAT,CAAxB,IAAuCr7B,MAAM,CAACgpB,EAAE,CAACwS,CAAH,CAAKF,CAAN,EAAS,CAAT,CAAjD,EAA8D;AAC5D,UAAI7jB,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACL2tB,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACD0tB,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,MAAAA,KAAK;AACL;AACD;;AACD,QAAIhI,UAAU,CAACuG,EAAD,CAAV,IAAkBhpB,MAAM,CAACgpB,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAAS,CAAT,CAAxB,IAAuCr7B,MAAM,CAACgpB,EAAE,CAACwS,CAAH,CAAKF,CAAN,EAAS,CAAT,CAAjD,EAA8D;AAC5D,UAAI7jB,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACL2tB,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACD0tB,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,MAAAA,KAAK;AACL6E,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,MAAAA,QAAQ;AACR;AACD,KAxBiB,CA0BlB;AACA;AACA;AACA;AACA;;;AACA,QAAIhF,cAAc,CAAC2H,EAAD,CAAlB,EAAwB;AACtB,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACL2tB,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACDytB,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,MAAAA,QAAQ;;AACR,UAAI5O,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACL2tB,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACDktB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,MAAAA,QAAQ;AACRoO,MAAAA,IAAI;AACJ3F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,MAAAA,QAAQ;AACRyI,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACNlM,MAAAA,KAAK;AACLwL,MAAAA,QAAQ;AACRpS,MAAAA,MAAM;AACN;AACD;;AACD,QAAIzG,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B4rB,MAAAA,YAAY;AACZ;AACD;;AACDyU,IAAAA,WAAW,CAACzxB,KAAD,CAAX;AACAgxB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,GA/DD;;AAiEAnJ,EAAAA,YAAY,GAAG,wBAAW;AACxBoO,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;;AACA,QAAIvG,UAAU,CAACjV,GAAG,CAAC0b,EAAD,CAAJ,CAAV,IAAuBlpB,MAAM,CAACwN,GAAG,CAAC0b,EAAD,CAAH,CAAQsS,CAAR,CAAUH,CAAX,EAAc,CAAd,CAA7B,IAAiDr7B,MAAM,CAACwN,GAAG,CAAC0b,EAAD,CAAH,CAAQsS,CAAR,CAAUF,CAAX,EAAc,CAAd,CAA3D,EAA6E;AAC3ExM,MAAAA,IAAI,CAACxhB,IAAI,CAAC4b,EAAD,CAAL,CAAJ;AACA4F,MAAAA,IAAI,CAACxhB,IAAI,CAAC4b,EAAD,CAAL,CAAJ;AACArO,MAAAA,KAAK;AACL,aAAOwL,QAAQ,EAAf;AACD,KALD,MAKO;AACL,UAAI5D,UAAU,CAACjV,GAAG,CAAC0b,EAAD,CAAJ,CAAV,IAAuBlpB,MAAM,CAACwN,GAAG,CAAC0b,EAAD,CAAH,CAAQsS,CAAR,CAAUH,CAAX,EAAc,CAAC,CAAf,CAA7B,IAAkDr7B,MAAM,CAACwN,GAAG,CAAC0b,EAAD,CAAH,CAAQsS,CAAR,CAAUF,CAAX,EAAc,CAAd,CAA5D,EAA8E;AAC5ExM,QAAAA,IAAI,CAACxhB,IAAI,CAAC4b,EAAD,CAAL,CAAJ;AACArO,QAAAA,KAAK;AACLiU,QAAAA,IAAI,CAACxhB,IAAI,CAAC4b,EAAD,CAAL,CAAJ;AACAmG,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,QAAAA,GAAG;AACH,eAAOsL,MAAM,EAAb;AACD,OAPD,MAOO;AACLsb,QAAAA,WAAW,CAACzxB,KAAD,CAAX;AACAgxB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;AACF;AACF,GArBD,CApwWU,CA2xWV;AACA;AACA;AACA;;;AACA1rB,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIwjC,OAAJ;AACA/S,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJwmB,MAAAA,GAAG;AACH+gB,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAdD;;AAgBA/gB,EAAAA,GAAG,GAAG,eAAW;AACf,QAAIssB,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAqZ,IAAAA,IAAI;AACJvW,IAAAA,QAAQ;AACR8V,IAAAA,OAAO;AACP,WAAO5Y,SAAS,GAAGmvB,cAAnB;AACD,GAPD;;AASArsB,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIywB,OAAJ;AACAvzB,IAAAA,SAAS,GAAG,CAAZ;AACA8Q,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBzU,EAAnB,GAAwB,OAAxB,GAAkCC,EAA9C;AACD;;AACD,QAAI9R,KAAK,CAAC6R,EAAD,EAAKC,EAAL,CAAT,EAAmB;AACjB6F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACD,QAAIvG,UAAU,CAACuG,EAAD,CAAV,IAAkBvG,UAAU,CAACwG,EAAD,CAAhC,EAAsC;AACpC6F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA/N,MAAAA,WAAW;AACX;AACD;;AACD,QAAKwwB,OAAO,GAAGrgC,oCAAoC,CAAC2d,EAAD,EAAKC,EAAL,CAAnD,EAA8D;AAC5D9N,MAAAA,SAAS,CAACuwB,OAAD,CAAT;AACA;AACD;;AACD,QAAIl+B,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAlB,IAA2Bse,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC3mC,GAAD,CAAjD,EAAwD;AACtDusB,MAAAA,WAAW;AACX;AACD;;AACD,QAAIjO,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3BqsB,MAAAA,OAAO,CAACyN,EAAD,CAAP;AACAA,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACD,QAAI7c,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3BqsB,MAAAA,OAAO,CAAC0N,EAAD,CAAP;AACAA,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACD;;AACD,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCib,MAAAA,eAAe;AACf;AACD;;AACD,QAAIhO,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC+a,MAAAA,eAAe;AACf;AACD;;AACD,QAAI9N,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgCiN,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtD,EAAkE;AAChE8a,MAAAA,mBAAmB;AACnB;AACD;;AACD,WAAOD,yBAAyB,EAAhC;AACD,GA/CD;;AAiDA/P,EAAAA,oCAAoC,GAAG,8CAAS2d,EAAT,EAAaC,EAAb,EAAiB;AACtD,QAAIyiB,OAAJ;;AACA,QAAI55C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,+CAA+CzU,EAA/C,GAAoD,OAApD,GAA8DC,EAA1E;AACD;;AACD,QAAIyiB,OAAO,GAAGvoB,kCAAkC,CAAC6F,EAAD,CAAhD,EAAsD;AACpD,UAAI7F,kCAAkC,CAAC8F,EAAD,EAAKyiB,OAAL,CAAtC,EAAqD;AACnD,eAAOA,OAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAXD;;AAaAvwB,EAAAA,SAAS,GAAG,mBAASuwB,OAAT,EAAkB;AAC5B,QAAI55C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,oBAAoBzU,EAApB,GAAyB,YAAzB,GAAwC0iB,OAApD;AACD,KAH2B,CAI5B;;;AACA5c,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC4c,OAAD,CAAJ;AACAlyB,IAAAA,UAAU;AACVwP,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAAC4c,OAAD,CAAJ;AACAlyB,IAAAA,UAAU;AACVyP,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,sBAAZ;AACD;;AACD,QAAI3rC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,UAAUzU,EAAE,CAACmU,QAAH,EAAtB;AACD;;AACD,QAAIrrC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,UAAUxU,EAAE,CAACkU,QAAH,EAAtB;AACD,KArB2B,CAsB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAI3vB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgCiN,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtD,EAAkE;AAChE;AACA;AACA;AACA,UAAIiN,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCgvB,QAAAA,WAAW,CAAChvB,QAAD,CAAX;AACAuuB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAvE,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACA+E,QAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACD,UAAI7c,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCgvB,QAAAA,WAAW,CAAChvB,QAAD,CAAX;AACAuuB,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAvE,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACAgF,QAAAA,EAAE,GAAGoB,GAAG,EAAR;AACD;AACF;;AACD,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgCiN,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtD,EAAkE;AAChE8a,MAAAA,mBAAmB;AACnB;AACD;;AACDD,IAAAA,yBAAyB;AACzB,WAAO,IAAP;AACD,GA1DD;;AA4DAC,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B,QAAI0gB,OAAJ;AACAjN,IAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAU,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjBC,MAAAA,EAAE,GAAGjb,GAAG,CAAC+a,EAAD,CAAR;;AACA,aAAOtJ,MAAM,CAACwJ,EAAD,CAAb,EAAmB;AACjB2F,QAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA4F,QAAAA,IAAI,CAACthB,GAAG,CAAC2b,EAAD,CAAJ,CAAJ;AACAnO,QAAAA,GAAG;AACHqL,QAAAA,QAAQ;AACR8C,QAAAA,EAAE,GAAGjb,GAAG,CAACib,EAAD,CAAR;AACD;;AACD4S,MAAAA,OAAO,CAACjN,IAAR,CAAa5F,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAArB;AACD;;AACD,WAAO6S,OAAP;AACD,GAjBD;;AAmBA3gB,EAAAA,yBAAyB,GAAG,qCAAW;AACrC,QAAI5N,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BonB,MAAAA,EAAE,GAAG7b,KAAK,CAAC2b,EAAD,CAAV,CAD6B,CACb;;AAChBA,MAAAA,EAAE,GAAG1b,IAAI,CAAC0b,EAAD,CAAT,CAF6B,CAEd;AAChB,KAHD,MAGO;AACLE,MAAAA,EAAE,GAAGV,GAAL;AACD;;AACD,QAAIhb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BqnB,MAAAA,EAAE,GAAG9b,KAAK,CAAC4b,EAAD,CAAV,CAD6B,CACb;;AAChBA,MAAAA,EAAE,GAAG3b,IAAI,CAAC2b,EAAD,CAAT,CAF6B,CAEd;AAChB,KAHD,MAGO;AACLE,MAAAA,EAAE,GAAGX,GAAL;AACD;;AACD,QAAI,CAACrR,KAAK,CAAC6R,EAAD,EAAKC,EAAL,CAAV,EAAoB;AAClB6F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA;AACD,KAhBoC,CAiBrC;;;AACA,QAAIlK,aAAa,CAAC4K,EAAD,CAAb,IAAqB5K,aAAa,CAAC6K,EAAD,CAAtC,EAA4C;AAC1C2F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,UAAIjF,KAAK,CAACmF,EAAD,EAAKC,EAAL,CAAT,EAAmB;AACjB2F,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACD,OAFD,MAEO;AACL4F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACD;;AACDsB,MAAAA,KAAK;AACL;AACD,KA3BoC,CA4BrC;;;AACAqE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAlV,IAAAA,MAAM;AACNmV,IAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,QAAI/L,aAAa,CAAC8K,EAAD,CAAjB,EAAuB;AACrB0F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ,CADqB,CAErB;;AACA,UAAIxb,GAAG,CAAC0b,EAAD,CAAH,KAAY2M,MAAM,CAACt1B,QAAD,CAAlB,IAAgC+d,aAAa,CAAChR,IAAI,CAAC4b,EAAD,CAAL,CAAjD,EAA6D;AAC3DE,QAAAA,EAAE,GAAG9b,IAAI,CAAC4b,EAAD,CAAT;AACD,OAFD,MAEO;AACLE,QAAAA,EAAE,GAAGZ,GAAL;AACD;;AACD,UAAIhb,GAAG,CAAC2b,EAAD,CAAH,KAAY0M,MAAM,CAACt1B,QAAD,CAAlB,IAAgC+d,aAAa,CAAChR,IAAI,CAAC6b,EAAD,CAAL,CAAjD,EAA6D;AAC3DE,QAAAA,EAAE,GAAG/b,IAAI,CAAC6b,EAAD,CAAT;AACD,OAFD,MAEO;AACLE,QAAAA,EAAE,GAAGb,GAAL;AACD;;AACD,UAAIzE,KAAK,CAACqF,EAAD,EAAKC,EAAL,CAAT,EAAmB;AACjByF,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACD,OAFD,MAEO;AACL4F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACD;;AACDsB,MAAAA,KAAK;AACL;AACD;;AACDqE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAuM,IAAAA,QAAQ;AACRtM,IAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,QAAI,CAAC/L,aAAa,CAAC8K,EAAD,CAAlB,EAAwB;AACtB0F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA;AACD,KA7DoC,CA8DrC;;;AACAsG,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,QAAI5H,gBAAgB,CAACgI,EAAD,CAApB,EAA0B;AACxB0F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACD,KAFD,MAEO;AACL4F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACD;;AACD,WAAOsB,KAAK,EAAZ;AACD,GAtED,CAr8WU,CA6gXV;;;AACAhP,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIqI,MAAM,CAACkF,EAAD,CAAN,KAAelF,MAAM,CAACmF,EAAD,CAAzB,EAA+B;AAC7B6F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA;AACD;;AACDU,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACAA,IAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;;AACA,WAAOvJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB4F,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACAlO,MAAAA,GAAG;AACHkO,MAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACDA,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAlB,IAAAA,EAAE,GAAGjb,GAAG,CAAC+a,EAAD,CAAR;AACA6F,IAAAA,IAAI,CAACthB,GAAG,CAAC2b,EAAD,CAAJ,CAAJ;AACAA,IAAAA,EAAE,GAAGjb,GAAG,CAACib,EAAD,CAAR;;AACA,WAAOxJ,MAAM,CAACwJ,EAAD,CAAb,EAAmB;AACjB2F,MAAAA,IAAI,CAACthB,GAAG,CAAC2b,EAAD,CAAJ,CAAJ;AACAnO,MAAAA,GAAG;AACHmO,MAAAA,EAAE,GAAGjb,GAAG,CAACib,EAAD,CAAR;AACD;;AACDA,IAAAA,EAAE,GAAGkB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjV,IAAAA,MAAM;AACNmV,IAAAA,EAAE,GAAGiB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAlV,IAAAA,MAAM;AACNoV,IAAAA,EAAE,GAAGgB,GAAG,EAAR;;AACA,QAAIlT,KAAK,CAACiS,EAAD,EAAKC,EAAL,CAAT,EAAmB;AACjByF,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAnO,MAAAA,GAAG;AACH,aAAOqL,QAAQ,EAAf;AACD,KAND,MAMO;AACL,aAAOyI,IAAI,CAACtG,GAAD,CAAX;AACD;AACF,GAxCD;;AA0CAjN,EAAAA,OAAO,GAAG,iBAASwhB,CAAT,EAAY;AACpB,QAAIhB,OAAJ;AACAgB,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAjO,IAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACAA,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBjO,MAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACA/hB,MAAAA,GAAG;AACH+gB,MAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,WAAOhB,OAAP;AACD,GAZD;;AAcAvgB,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIugB,OAAJ;AACAjN,IAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAU,IAAAA,EAAE,GAAGhb,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB4F,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACA4F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAjO,MAAAA,GAAG;AACHqL,MAAAA,QAAQ;AACR0V,MAAAA,OAAO,CAACjN,IAAR,CAAa5F,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAArB;AACD;;AACD,WAAO6S,OAAP;AACD,GAbD;;AAeAzgB,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIygB,OAAJ;AACAjN,IAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAW,IAAAA,EAAE,GAAGjb,GAAG,CAAC+a,EAAD,CAAR;AACA8S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACwJ,EAAD,CAAb,EAAmB;AACjB2F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAACthB,GAAG,CAAC2b,EAAD,CAAJ,CAAJ;AACAnO,MAAAA,GAAG;AACHqL,MAAAA,QAAQ;AACR0V,MAAAA,OAAO,CAACjN,IAAR,CAAa3F,EAAE,GAAGjb,GAAG,CAACib,EAAD,CAArB;AACD;;AACD,WAAO4S,OAAP;AACD,GAbD,CArlXU,CAomXV;;;AACAvf,EAAAA,KAAK,GAAG,iBAAW;AACjB,QAAIugB,CAAJ;AACAA,IAAAA,CAAC,GAAG1S,GAAG,EAAP;AACAyE,IAAAA,IAAI,CAACiO,CAAD,CAAJ;;AACA,QAAIl/B,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAACxwB,QAAD,CAAV,CAAR,EAA+B;AAC7B,aAAOkqB,WAAW,CAAClqB,QAAD,CAAlB;AACD,KAFD,MAEO,IAAIxH,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAACtwB,QAAD,CAAV,CAAR,EAA+B;AACpC,aAAOgqB,WAAW,CAAChqB,QAAD,CAAlB;AACD,KAFM,MAEA,IAAI1H,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAACrwB,QAAD,CAAV,CAAR,EAA+B;AACpC,aAAO+pB,WAAW,CAAC/pB,QAAD,CAAlB;AACD,KAFM,MAEA,IAAI3H,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAACzwB,QAAD,CAAV,CAAR,EAA+B;AACpC,aAAOmqB,WAAW,CAACnqB,QAAD,CAAlB;AACD,KAFM,MAEA,IAAIvH,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAAC1wB,QAAD,CAAV,CAAR,EAA+B;AACpC,aAAOoqB,WAAW,CAACpqB,QAAD,CAAlB;AACD,KAFM,MAEA;AACL,aAAOoqB,WAAW,CAAClqB,QAAD,CAAlB;AACD;AACF,GAjBD,CArmXU,CAwnXV;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACA4X,EAAAA,OAAO,GAAG,mBAAW;AACnBuU,IAAAA,IAAI;AACJyI,IAAAA,SAAS;AACT,WAAOlJ,OAAO,EAAd;AACD,GAJD,CAnoXU,CAyoXV;AAEA;AACA;AACA;AACA;AACA;;;AACAkJ,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAImC,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAnT,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAAS0D,KAAK,CAAC1D,CAAD,CAAlB,EAAuB;AACrB7M,MAAAA,WAAW,CAACvxB,OAAD,CAAX;AACA8wB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAInB,QAAQ,CAACkG,EAAD,CAAZ,EAAkB;AAChB,aAAOkR,UAAU,CAACkC,CAAD,CAAjB;AACD,KAFD,MAEO;AACLlT,MAAAA,EAAE,GAAGF,EAAL;AACAA,MAAAA,EAAE,GAAG6M,MAAM,CAACvyB,OAAD,CAAX;AACA42B,MAAAA,UAAU,CAACkC,CAAD,CAAV;AACApT,MAAAA,EAAE,GAAGE,EAAL;AACA4F,MAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACAwrB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAyM,MAAAA,MAAK;;AACL,aAAOjhC,IAAI,EAAX;AACD;AACF,GA1BD;;AA4BA0lC,EAAAA,UAAU,GAAG,oBAASkC,CAAT,EAAY;AACvB,QAAIK,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV,EAAeqL,OAAf;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACApN,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAA,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAlG,IAAAA,EAAE,GAAGkB,GAAG,EAAR;AACA0R,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFa,MAAAA,EAAE,GAAGD,EAAL;AACAA,MAAAA,EAAE,GAAGkB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA9C,MAAAA,QAAQ;AACRgJ,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACA3N,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ;AACRqP,MAAAA,QAAQ;AACRrG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA0M,MAAAA,OAAO,CAACjN,IAAR,CAAazI,QAAQ,EAArB;AACD;;AACD,WAAO0V,OAAP;AACD,GArBD,CA5qXU,CAmsXV;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;AACA7e,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIuf,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcN,CAAd,EAAiB7T,CAAjB,EAAoBmI,GAApB,EAAyBC,IAAzB;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAI4R,CAAC,GAAG,CAAR,EAAW;AACT7M,MAAAA,WAAW,CAACtxB,OAAD,CAAX;AACA6wB,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACDrB,IAAAA,gBAAgB,CAAC0M,CAAD,EAAIA,CAAJ,CAAhB;AACApT,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,SAAKoS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FkS,QAAAA,YAAY,CAACoN,CAAC,GAAGC,CAAJ,GAAQ,CAAT,CAAZ;AACAxe,QAAAA,OAAO;AACP8K,QAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAC,GAAGL,CAAJ,GAAQM,CAAvB,IAA4BrS,GAAG,EAA/B;AACD;AACF;;AACDyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GA3BD;;AA6BA7+B,EAAAA,UAAU,GAAG,KAAb;;AAEAwG,EAAAA,SAAS,GAAG,qBAAW;AACrBo2B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO4oB,IAAI,EAAX;AACD,GAJD;;AAMAA,EAAAA,IAAI,GAAG,gBAAW;AAChBoU,IAAAA,IAAI;;AACJjB,IAAAA,KAAI;;AACJvH,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIn4B,UAAJ,EAAgB;AACdqrC,MAAAA,OAAO,CAACE,GAAR,CAAY,cAAczU,EAA1B;AACD;;AACD8F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAvY,IAAAA,SAAS;;AACT,QAAIve,UAAJ,EAAgB;AACdqrC,MAAAA,OAAO,CAACE,GAAR,CAAY,+BAA+BzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAhD;AACD;;AACD3B,IAAAA,QAAQ;AACRrG,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,IAAAA,MAAM;;AACN,QAAI/hB,UAAJ,EAAgB;AACdqrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gCAAgCzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAjD;AACD;;AACDvI,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACApJ,IAAAA,MAAM;;AACN,QAAI/hB,UAAJ,EAAgB;AACdqrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gCAAgCzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAjD;AACD;;AACD,WAAOtG,OAAO,EAAd;AACD,GAzBD,CA3vXU,CAsxXV;AACA;AAEA;;;AACAzT,EAAAA,cAAc,GAAG,wBAAS8e,CAAT,EAAY;AAC3B,QAAIK,CAAJ,EAAOtf,EAAP,EAAWmG,EAAX,EAAesY,CAAf,EAAkBsC,EAAlB,EAAsB0J,CAAtB,EAAyBzJ,EAAzB,EAA6BnC,IAA7B,EAAmCC,KAAnC,EAA0C1T,CAA1C,EAA6CmI,GAA7C,EAAkDC,IAAlD,EAAwDyN,IAAxD,EAA8DC,IAA9D,EAAoEC,IAApE,EAA0EC,IAA1E,EAAgFC,IAAhF,EAAsFC,IAAtF,EAA4Fb,CAA5F,EAA+FK,CAA/F;AACAxB,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,CAAJ;AACAgM,IAAAA,CAAC,GAAG,CAAJ;AACA5L,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR;AACAgC,IAAAA,CAAC,GAAG,CAAJ;AACAzM,IAAAA,IAAI;AACJoM,IAAAA,CAAC,GAAGvG,GAAG,GAAG+E,CAAV;AACApT,IAAAA,EAAE,GAAGgM,KAAK,CAAC4I,CAAD,CAAV;AACA5B,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;AACA4L,IAAAA,CAAC,GAAGxL,CAAC,GAAG,CAAR;;AACA,QAAIwL,CAAC,GAAG5L,IAAR,EAAc;AACZ3G,MAAAA,IAAI,CAAC,6BAAD,CAAJ;AACD;;AACDuG,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKa,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGkX,CAAtB,EAA0B,KAAKlX,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFuG,MAAAA,IAAI,CAACkG,KAAK,CAAC4I,CAAC,GAAGnB,CAAJ,GAAQ,CAAT,CAAN,CAAJ;AACAwB,MAAAA,CAAC,GAAGzT,WAAW,EAAf;;AACA,UAAIyT,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGjV,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAjB,EAAmC;AACjCpH,QAAAA,IAAI,CAAC,oBAAD,CAAJ;AACD;;AACDuG,MAAAA,CAAC,GAAGA,CAAC,GAAG5S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAJ,GAAuBwB,CAAvB,GAA2B,CAA/B;AACD;;AACD,QAAIjC,IAAI,KAAK4L,CAAb,EAAgB;AACdniB,MAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAP;AACAtN,MAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAeimB,CAAf,CAAD,CAAJ;AACA7K,MAAAA,OAAO;AACP;AACD;;AACD,SAAK0L,CAAC,GAAGtf,EAAE,GAAGwT,IAAI,GAAGiX,CAAhB,EAAmBxJ,IAAI,GAAGpC,IAA/B,EAAsCrL,IAAI,IAAIyN,IAAR,GAAejhB,EAAE,GAAGihB,IAApB,GAA2BjhB,EAAE,GAAGihB,IAAtE,EAA6E3B,CAAC,GAAG9L,IAAI,IAAIyN,IAAR,GAAe,EAAEjhB,EAAjB,GAAsB,EAAEA,EAAzG,EAA6G;AAC3Gye,MAAAA,CAAC,GAAGA,CAAC,GAAG5S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAJ,GAAuB,CAA3B;AACD;;AACDR,IAAAA,KAAK,GAAG,CAAR;;AACA,SAAKQ,CAAC,GAAGnZ,EAAE,GAAG+a,IAAI,GAAGuJ,CAAhB,EAAmBtJ,IAAI,GAAGtC,IAA/B,EAAsCqC,IAAI,IAAIC,IAAR,GAAehb,EAAE,GAAGgb,IAApB,GAA2Bhb,EAAE,GAAGgb,IAAtE,EAA6E7B,CAAC,GAAG4B,IAAI,IAAIC,IAAR,GAAe,EAAEhb,EAAjB,GAAsB,EAAEA,EAAzG,EAA6G;AAC3G2Y,MAAAA,KAAK,IAAIjT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAT;AACD;;AACDxT,IAAAA,EAAE,GAAG7f,YAAY,CAAC6yB,KAAD,CAAjB;AACAhT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiBA,IAAI,GAAG4L,CAAxB;;AACA,SAAKnL,CAAC,GAAGyB,EAAE,GAAGK,IAAI,GAAGqJ,CAAhB,EAAmBpJ,IAAI,GAAGxC,IAA/B,EAAsCuC,IAAI,IAAIC,IAAR,GAAeN,EAAE,GAAGM,IAApB,GAA2BN,EAAE,GAAGM,IAAtE,EAA6E/B,CAAC,GAAG8B,IAAI,IAAIC,IAAR,GAAe,EAAEN,EAAjB,GAAsB,EAAEA,EAAzG,EAA6G;AAC3GjV,MAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAC,GAAGmL,CAAlB,IAAuB5e,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAvB;AACD;;AACD,SAAKA,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYM,IAAI,GAAGxC,KAAxB,EAAgC,KAAKwC,IAAL,GAAYN,EAAE,GAAGM,IAAjB,GAAwBN,EAAE,GAAGM,IAA7D,EAAoEhC,CAAC,GAAG,KAAKgC,IAAL,GAAY,EAAEN,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FlV,MAAAA,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzT,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAeimB,CAAC,GAAGa,CAAnB,CAApB;AACD;;AACD/tB,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACAta,IAAAA,uBAAuB,CAACua,EAAD,CAAvB;AACAxD,IAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAP;AACAtN,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAnDD,CA1xXU,CA+0XV;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;;;AACAkC,EAAAA,aAAa,GAAG,uBAASmJ,CAAT,EAAY;AAC1B,QAAIK,CAAJ,EAAOtf,EAAP,EAAWmG,EAAX,EAAesY,CAAf,EAAkBsC,EAAlB,EAAsB0J,CAAtB,EAAyBzJ,EAAzB,EAA6B8E,EAA7B,EAAiCjH,IAAjC,EAAuCzT,CAAvC,EAA0CmI,GAA1C,EAA+CC,IAA/C,EAAqDyN,IAArD,EAA2DC,IAA3D,EAAiEC,IAAjE,EAAuEC,IAAvE,EAA6EC,IAA7E,EAAmFZ,CAAnF,EAAsFK,CAAtF;AACAxB,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,CAAJ;AACAgM,IAAAA,CAAC,GAAG,CAAJ;AACA5L,IAAAA,IAAI,GAAG,CAAP;AACAiC,IAAAA,CAAC,GAAG,CAAJ;AACAzM,IAAAA,IAAI;;AACJ,QAAI4K,CAAC,GAAG,CAAR,EAAW;AACT/G,MAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD;;AACDuI,IAAAA,CAAC,GAAGvG,GAAG,GAAG+E,CAAV;AACAnT,IAAAA,EAAE,GAAG+L,KAAK,CAAC4I,CAAD,CAAV;AACA5U,IAAAA,EAAE,GAAGgM,KAAK,CAAC4I,CAAC,GAAG,CAAL,CAAV;;AACA,QAAI,CAAC5a,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AAAE;AACnBqM,MAAAA,IAAI,CAAC,sEAAD,CAAJ;AACD;;AACD2G,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;AACA4L,IAAAA,CAAC,GAAGxL,CAAC,GAAG,CAAR;;AACA,QAAIwL,CAAC,GAAG5L,IAAR,EAAc;AACZ3G,MAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD;;AACDuG,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKa,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGkX,CAAtB,EAA0B,KAAKlX,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFuG,MAAAA,IAAI,CAACkG,KAAK,CAAC4I,CAAC,GAAGnB,CAAJ,GAAQ,CAAT,CAAN,CAAJ;AACAwB,MAAAA,CAAC,GAAGzT,WAAW,EAAf;;AACA,UAAIyT,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGjV,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAjB,EAAmC;AACjCpH,QAAAA,IAAI,CAAC,2BAAD,CAAJ;AACD;;AACDuG,MAAAA,CAAC,GAAGA,CAAC,GAAG5S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAJ,GAAuBwB,CAAvB,GAA2B,CAA/B;AACD;;AACD,SAAKxB,CAAC,GAAGtf,EAAE,GAAGwT,IAAI,GAAGiX,CAAhB,EAAmBxJ,IAAI,GAAGpC,IAA/B,EAAsCrL,IAAI,IAAIyN,IAAR,GAAejhB,EAAE,GAAGihB,IAApB,GAA2BjhB,EAAE,GAAGihB,IAAtE,EAA6E3B,CAAC,GAAG9L,IAAI,IAAIyN,IAAR,GAAe,EAAEjhB,EAAjB,GAAsB,EAAEA,EAAzG,EAA6G;AAC3Gye,MAAAA,CAAC,GAAGA,CAAC,GAAG5S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAJ,GAAuB,CAA3B;AACD,KAjCyB,CAkC1B;;;AACAvT,IAAAA,EAAE,GAAG9f,YAAY,CAAC4f,EAAE,CAACyN,MAAH,CAAUwF,KAAX,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBhT,EAAE,CAACyN,MAAH,CAAUuF,IAA3B;;AACA,SAAKS,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY+a,IAAI,GAAGrV,EAAE,CAACyN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKqC,IAAL,GAAY/a,EAAE,GAAG+a,IAAjB,GAAwB/a,EAAE,GAAG+a,IAAtE,EAA6E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAE/a,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG4F,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACD,SAAKA,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYI,IAAI,GAAGtV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKqC,IAAL,GAAYJ,EAAE,GAAGI,IAAjB,GAAwBJ,EAAE,GAAGI,IAAvE,EAA8E7B,CAAC,GAAG,KAAK6B,IAAL,GAAY,EAAEJ,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGhV,MAAAA,EAAE,CAACuN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzT,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAApB;AACD;;AACD/tB,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACAta,IAAAA,uBAAuB,CAACwa,EAAD,CAAvB;AACAF,IAAAA,EAAE,GAAGE,EAAL;;AACA,QAAI8S,IAAI,KAAK4L,CAAb,EAAgB;AACd,UAAI5kB,QAAQ,CAACiG,EAAD,CAAZ,EAAkB;AAAE;AAClBoM,QAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD;;AACDrM,MAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAeimB,CAAf,IAAoB3S,EAApB;AACAva,MAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACAvD,MAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAP;AACAtN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAI,CAAC/N,QAAQ,CAACiG,EAAD,CAAb,EAAmB;AAAE;AACnBoM,MAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD;;AACD,QAAI2G,IAAI,GAAG4L,CAAP,KAAa3e,EAAE,CAACwN,MAAH,CAAUuF,IAA3B,EAAiC;AAAE;AACjC3G,MAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD,KA9DyB,CA+D9B;;;AACI,SAAKoH,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYI,IAAI,GAAGtV,EAAE,CAACwN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKuC,IAAL,GAAYJ,EAAE,GAAGI,IAAjB,GAAwBJ,EAAE,GAAGI,IAAtE,EAA6E9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAEJ,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG,UAAInV,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc8L,CAAC,GAAGnL,CAAlB,MAAyBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAA7B,EAA+C;AAC7CpH,QAAAA,IAAI,CAAC,yBAAD,CAAJ;AACD;AACF,KApEyB,CAqE9B;AACA;;;AACI,SAAKoH,CAAC,GAAGwG,EAAE,GAAG,CAAT,EAAYzE,IAAI,GAAGvV,EAAE,CAACwN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKuC,IAAL,GAAYyE,EAAE,GAAGzE,IAAjB,GAAwByE,EAAE,GAAGzE,IAAvE,EAA8E/B,CAAC,GAAG,KAAK+B,IAAL,GAAY,EAAEyE,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGja,MAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAeimB,CAAC,GAAGa,CAAnB,IAAwBxT,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAxB;AACD;;AACD/tB,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACAta,IAAAA,uBAAuB,CAACua,EAAD,CAAvB;AACAxD,IAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAP;AACAtN,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GA/ED;;AAiFAn4B,EAAAA,WAAU,GAAG,sBAAW;AACtB,QAAI+yC,UAAJ,EAAgBlP,CAAhB,EAAmBtf,EAAnB,EAAuBmG,EAAvB,EAA2B4a,EAA3B,EAA+B0N,gBAA/B,EAAiDrjB,CAAjD,EAAoDsjB,QAApD,EAA8Dnb,GAA9D,EAAmEC,IAAnE,EAAyEyN,IAAzE,EAA+EC,IAA/E,EAAqFyN,eAArF,EAAsG/P,OAAtG,EAA+GgQ,cAA/G,EAA+HC,KAA/H,EAAsIC,YAAtI,CADsB,CAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,IAAAA,YAAY,GAAG,EAAf;AACAA,IAAAA,YAAY,CAACnd,IAAb,CAAkBthB,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAArB;AACA+iB,IAAAA,cAAc,GAAGv+B,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAApB;;AACA,QAAI+iB,cAAc,KAAKlW,MAAM,CAACn1B,GAAD,CAA7B,EAAoC;AAClC20B,MAAAA,IAAI,CAAC,6DAAD,CAAJ;AACD;;AACDuW,IAAAA,gBAAgB,GAAG19B,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAtB;;AACA,WAAO4iB,gBAAgB,KAAK/V,MAAM,CAACn1B,GAAD,CAAlC,EAAyC;AACvCurC,MAAAA,YAAY,CAACnd,IAAb,CAAkBthB,GAAG,CAACo+B,gBAAD,CAArB;AACAA,MAAAA,gBAAgB,GAAG19B,GAAG,CAAC09B,gBAAD,CAAtB;AACD,KArBqB,CAsBtB;;;AACA,QAAIK,YAAY,CAACnoB,MAAb,GAAsB,CAA1B,EAA6B;AAC3ByL,MAAAA,WAAW,CAACnxB,KAAD,CAAX;AACA0wB,MAAAA,IAAI,CAACmd,YAAY,CAACA,YAAY,CAACnoB,MAAb,GAAsB,CAAvB,CAAb,CAAJ;AACAgL,MAAAA,IAAI,CAACmd,YAAY,CAACA,YAAY,CAACnoB,MAAb,GAAsB,CAAvB,CAAb,CAAJ;AACAG,MAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,WAAKwY,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGub,YAAY,CAACnoB,MAAnC,EAA4C,KAAK4M,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAArE,EAA2E+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAlG,EAAqG;AACnGgH,QAAAA,WAAW,CAACnxB,KAAD,CAAX;AACAw3B,QAAAA,IAAI;AACJ9G,QAAAA,IAAI,CAACmd,YAAY,CAACA,YAAY,CAACnoB,MAAb,GAAsB2Y,CAAtB,GAA0B,CAA3B,CAAb,CAAJ;AACA7G,QAAAA,IAAI;AACJ3R,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACD+E,MAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACAzxB,MAAAA,WAAU;;AACV;AACD,KAtCqB,CAuCtB;AACA;AACA;;;AACAizC,IAAAA,QAAQ,GAAG,EAAX;;AACA7vB,IAAAA,sBAAqB,CAACgN,EAAD,EAAK6iB,QAAL,CAArB,CA3CsB,CA4CtB;AACA;AACA;;;AACAC,IAAAA,eAAe,GAAG,EAAlB,CA/CsB,CAgD1B;;AACI,SAAKrP,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGkb,QAAQ,CAAC/nB,MAAjC,EAA0C,KAAK6M,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAvE,EAA8E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG,UAAI0uB,QAAQ,CAACpP,CAAD,CAAR,KAAgB5G,MAAM,CAAC9wB,sBAAD,CAA1B,EAAoD;AAClD;AACD,OAFD,MAEO;AACL+mC,QAAAA,eAAe,CAAChd,IAAhB,CAAqB+c,QAAQ,CAACpP,CAAD,CAA7B;AACD;AACF;;AACDoP,IAAAA,QAAQ,GAAGC,eAAX;AACAA,IAAAA,eAAe,GAAG,EAAlB;;AACA,QAAID,QAAQ,CAAC/nB,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACA;AACA;AACA;AACA;AACAkoB,MAAAA,KAAK,GAAG,CAAR;;AACA,WAAKvP,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGyN,QAAQ,CAAC/nB,MAAjC,EAA0C,KAAKsa,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG;AACA,YAAKmZ,CAAC,GAAGuP,KAAJ,GAAY,CAAb,IAAoBH,QAAQ,CAAC/nB,MAAT,GAAkB,CAA1C,EAA8C;AAC5C,cAAI,EAAEvF,sBAAqB,CAACstB,QAAQ,CAACpP,CAAC,GAAGuP,KAAL,CAAT,CAArB,IAA8CztB,sBAAqB,CAACstB,QAAQ,CAACpP,CAAC,GAAGuP,KAAJ,GAAY,CAAb,CAAT,CAArE,CAAJ,EAAqG;AACnGld,YAAAA,IAAI,CAAC+c,QAAQ,CAACpP,CAAC,GAAGuP,KAAL,CAAT,CAAJ;AACAx3C,YAAAA,IAAI;;AACJypB,YAAAA,IAAG;;AACH6Q,YAAAA,IAAI,CAAC+c,QAAQ,CAACpP,CAAC,GAAGuP,KAAJ,GAAY,CAAb,CAAT,CAAJ;AACAx3C,YAAAA,IAAI;AACJkhC,YAAAA,QAAQ;AACRiW,YAAAA,UAAU,GAAGthB,GAAG,EAAhB,CAPmG,CAQnG;;AACA,gBAAIxL,kBAAkB,CAAC8sB,UAAD,CAAtB,EAAoC;AAClCK,cAAAA,KAAK,IAAI,CAAT;AACD,aAFD,MAEO;AACLF,cAAAA,eAAe,CAAChd,IAAhB,CAAqB+c,QAAQ,CAACpP,CAAC,GAAGuP,KAAL,CAA7B;AACD;AACF,WAdD,MAcO;AACLF,YAAAA,eAAe,CAAChd,IAAhB,CAAqB+c,QAAQ,CAACpP,CAAC,GAAGuP,KAAL,CAA7B;AACD;AACF,SAlBD,MAkBO;AACL;AACD,SAtBwG,CAuBzG;;;AACA,YAAIvP,CAAC,GAAGuP,KAAJ,KAAcH,QAAQ,CAAC/nB,MAAT,GAAkB,CAApC,EAAuC;AACrC;AACAgoB,UAAAA,eAAe,CAAChd,IAAhB,CAAqB+c,QAAQ,CAACA,QAAQ,CAAC/nB,MAAT,GAAkB,CAAnB,CAA7B;AACD;;AACD,YAAI2Y,CAAC,GAAGuP,KAAJ,IAAaH,QAAQ,CAAC/nB,MAAT,GAAkB,CAAnC,EAAsC;AACpC;AACD;AACF;;AACD+nB,MAAAA,QAAQ,GAAGC,eAAX;AACD,KAlGqB,CAmGtB;AACA;AACA;AAEA;AAEA;AACA;;;AACAhd,IAAAA,IAAI,CAAC+G,MAAM,CAACz3B,KAAD,CAAP,CAAJ,CA3GsB,CA4GtB;;AACA,QAAIytC,QAAQ,CAAC/nB,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAK2Y,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGwN,QAAQ,CAAC/nB,MAAjC,EAA0C,KAAKua,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG;AACApP,QAAAA,IAAI,CAAC+c,QAAQ,CAACpP,CAAD,CAAT,CAAJ;AACD;AACF,KALD,MAKO;AACLpS,MAAAA,GAAG;AACHyE,MAAAA,IAAI,CAAC+G,MAAM,CAAC9wB,sBAAD,CAAP,CAAJ;AACA;AACD,KAtHqB,CAuHtB;;;AACAkf,IAAAA,IAAI,CAAC4nB,QAAQ,CAAC/nB,MAAT,GAAkB,CAAnB,CAAJ;AACAkF,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;;AACJkpB,MAAAA,MAAK;;AACLqe,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAtID,CAv7XU,CA+jYV;;;AACAre,EAAAA,MAAK,GAAG,iBAAW;AACjB,QAAIwuB,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,iBAAtB;AACA7a,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAJiB,CAKjB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIhJ,cAAc,CAAC4H,EAAD,CAAd,IAAsB5H,cAAc,CAAC2H,EAAD,CAAxC,EAA8C;AAC5C8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAlC,MAAAA,MAAM;AACNkC,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACNiC,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD,KAnBgB,CAoBjB;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI7J,YAAY,CAACwI,EAAD,CAAhB,EAAsB;AACpBkjB,MAAAA,IAAI,GAAG1+B,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAV,CADoB,CACC;;AACrBmjB,MAAAA,IAAI,GAAG3+B,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAV,CAFoB,CAEM;;AAC1BojB,MAAAA,IAAI,GAAGnjB,EAAP;AACAD,MAAAA,EAAE,GAAGkjB,IAAL;AACApd,MAAAA,IAAI,CAACqd,IAAD,CAAJ;AACArd,MAAAA,IAAI,CAACsd,IAAD,CAAJ;;AACA1uB,MAAAA,MAAK;;AACLuL,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACD,KAnCgB,CAoCjB;AACA;AACA;;;AACA,QAAIrB,EAAE,KAAK6M,MAAM,CAAC9wB,sBAAD,CAAjB,EAA2C;AACzC+pB,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA8H,MAAAA,OAAO;AACP;AACD,KAJD,MAIO,IAAI9H,EAAE,KAAK4M,MAAM,CAAC9wB,sBAAD,CAAjB,EAA2C;AAChD+pB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAI/N,QAAQ,CAACgG,EAAD,CAAR,IAAgBhG,QAAQ,CAACiG,EAAD,CAA5B,EAAkC;AAChCtL,MAAAA,OAAO;AACR,KAFD,MAEO;AACL,UAAI,EAAEY,sBAAqB,CAACyK,EAAD,CAArB,IAA6BzK,sBAAqB,CAAC0K,EAAD,CAApD,CAAJ,EAA+D;AAC7D6F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACAhL,QAAAA,IAAG;;AACHyX,QAAAA,QAAQ;AACR2W,QAAAA,iBAAiB,GAAGhiB,GAAG,EAAvB;;AACA,YAAIxL,kBAAkB,CAACwtB,iBAAD,CAAtB,EAA2C;AACzC9c,UAAAA,WAAW,CAACxqB,sBAAD,CAAX;AACAgsB,UAAAA,OAAO;AACP;AACD;AACF,OAZI,CAaL;AACA;;;AACA,UAAI5Y,SAAS,IAAIkH,KAAK,CAAC2J,EAAD,CAAtB,EAA4B;AAC1BA,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,QAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,eAAOpb,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,UAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACAvL,UAAAA,MAAK;;AACL/U,UAAAA,GAAG;AACHqgB,UAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD+H,QAAAA,OAAO;AACP;AACD;;AACD,UAAI5Y,SAAS,IAAIkH,KAAK,CAAC4J,EAAD,CAAtB,EAA4B;AAC1BA,QAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACA6F,QAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,eAAOpb,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjB6F,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,UAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;;AACAvL,UAAAA,MAAK;;AACL/U,UAAAA,GAAG;AACHsgB,UAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACD8H,QAAAA,OAAO;AACP;AACD;;AACDjC,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ,CA1CK,CA2CL;AACA;AACA;AACA;;AACA,UAAIjG,QAAQ,CAACgG,EAAD,CAAR,IAAgB1K,aAAa,CAAC2K,EAAD,CAAjC,EAAuC;AACrC;AACA;AACA0N,QAAAA,mBAAmB;AACpB,OAJD,MAIO,IAAIrY,aAAa,CAAC0K,EAAD,CAAb,IAAqBhG,QAAQ,CAACiG,EAAD,CAAjC,EAAuC;AAC5C;AACA;AACAyI,QAAAA,mBAAmB;AACpB,OAJM,MAIA;AACL,YAAIpT,aAAa,CAAC0K,EAAD,CAAb,IAAqB1K,aAAa,CAAC2K,EAAD,CAAtC,EAA4C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA5C,UAAAA,QAAQ;AACT,SARD,MAQO;AACL;AACA;AACA;AACA;AACA;AACA;AACAgE,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHkF,UAAAA,WAAW,CAACnxB,KAAD,CAAX;AACA0wB,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,UAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,UAAAA,OAAO;AACP;AACD;AACF;AACF;;AACD,WAAOA,OAAO,EAAd;AACD,GArID,CAhkYU,CAusYV;;;AACApT,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAI0d,CAAJ,EAAOiR,EAAP,EAAWhR,CAAX,EAAciR,EAAd,EAAkBxK,CAAlB,EAAqBtF,CAArB,EAAwBtf,EAAxB,EAA4Buf,CAA5B,EAA+BpZ,EAA/B,EAAmCsY,CAAnC,EAAsCsC,EAAtC,EAA0CC,EAA1C,EAA8C/B,CAA9C,EAAiD6G,EAAjD,EAAqDjH,IAArD,EAA2DzT,CAA3D,EAA8D4a,EAA9D,EAAkEzS,GAAlE,EAAuEC,IAAvE,EAA6EyN,IAA7E,EAAmFC,IAAnF,EAAyFC,IAAzF,EAA+FC,IAA/F,EAAqGC,IAArG;AACA/B,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc9S,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAA/B,CAAJ;;AACA,QAAII,CAAC,KAAKnT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAV,EAA4B;AAC1B;AACAzG,MAAAA,IAAI,CAAC,+BAAD,CAAJ;AACD;;AACD2G,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB/S,EAAE,CAACwN,MAAH,CAAUuF,IAA3B,GAAkC,CAAzC;;AACA,QAAIA,IAAI,GAAGt8B,MAAX,EAAmB;AACjB21B,MAAAA,IAAI,CAAC,uCAAD,CAAJ;AACD;;AACDgG,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGrS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd,CAbmB,CAcnB;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;AACA22B,IAAAA,EAAE,GAAG,CAAL;;AACA,SAAK7P,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG1H,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAvC,EAA2C,KAAKtL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAApE,EAA0E+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAjG,EAAoG;AAClG+jB,MAAAA,EAAE,IAAItjB,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAN;AACD;;AACD8P,IAAAA,EAAE,GAAG,CAAL;;AACA,SAAK9P,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG1H,EAAE,CAACwN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKrL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAtE,EAA6E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxGovB,MAAAA,EAAE,IAAItjB,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAN;AACD;;AACDvT,IAAAA,EAAE,GAAG9f,YAAY,CAACkjC,EAAE,GAAGC,EAAN,CAAjB;AACAxK,IAAAA,CAAC,GAAG7Y,EAAE,CAACuN,MAAH,CAAU9gB,IAAd,CAtCmB,CAuCvB;;AACI,SAAK8mB,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGkO,EAAxB,EAA6B,KAAKlO,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA1D,EAAiE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA1F,EAA8F;AAC5F,WAAKoZ,CAAC,GAAGwB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,YAAIrf,kBAAkB,CAACwc,CAAC,CAACoB,CAAC,GAAGL,CAAJ,GAAQM,CAAT,CAAF,CAAtB,EAAsC;AACpC;AACD;;AACD,aAAKd,CAAC,GAAGuC,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGiO,EAAxB,EAA6B,KAAKjO,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAA1D,EAAiE1C,CAAC,GAAG,KAAK0C,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAA1F,EAA8F;AAC5FrP,UAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAC,GAAGL,CAAJ,GAAQM,CAAT,CAAF,CAAJ;AACA5N,UAAAA,IAAI,CAACwM,CAAC,CAACoB,CAAC,GAAG6P,EAAJ,GAAS3Q,CAAV,CAAF,CAAJ;AACAvV,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACiT,CAAC,CAACtF,CAAC,GAAG8P,EAAJ,GAAS3Q,CAAV,CAAF,CAAJ;AACAjzB,UAAAA,GAAG;AACHo5B,UAAAA,CAAC,CAACtF,CAAC,GAAG8P,EAAJ,GAAS3Q,CAAV,CAAD,GAAgBvR,GAAG,EAAnB;AACD;AACF;AACF,KAtDkB,CAuDnB;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAI2R,IAAI,KAAK,CAAb,EAAgB;AACd,aAAOlN,IAAI,CAAC5F,EAAE,CAACuN,MAAH,CAAU9gB,IAAV,CAAe,CAAf,CAAD,CAAX;AACD,KAFD,MAEO;AACLuT,MAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;AACAU,MAAAA,CAAC,GAAG,CAAJ;;AACA,WAAKD,CAAC,GAAGwG,EAAE,GAAG,CAAT,EAAY1E,IAAI,GAAGvV,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAzC,EAA6C,KAAKuC,IAAL,GAAY0E,EAAE,GAAG1E,IAAjB,GAAwB0E,EAAE,GAAG1E,IAA1E,EAAiF9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAE0E,EAAd,GAAmB,EAAEA,EAA1G,EAA8G;AAC5G/Z,QAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACDC,MAAAA,CAAC,GAAG1T,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAArB;;AACA,WAAKS,CAAC,GAAG0G,EAAE,GAAG,CAAT,EAAY3E,IAAI,GAAGvV,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiB,CAAzC,EAA6C,KAAKwC,IAAL,GAAY2E,EAAE,GAAG3E,IAAjB,GAAwB2E,EAAE,GAAG3E,IAA1E,EAAiF/B,CAAC,GAAG,KAAK+B,IAAL,GAAY,EAAE2E,EAAd,GAAmB,EAAEA,EAA1G,EAA8G;AAC5Gja,QAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcY,CAAC,GAAGD,CAAlB,IAAuBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAC,GAAG,CAAlB,CAAvB;AACD;;AACD,aAAO3N,IAAI,CAAC5F,EAAD,CAAX;AACD;AACF,GA/FD,CAxsYU,CAyyYV;AACA;AACA;;;AACAlN,EAAAA,sBAAqB,GAAG,+BAASwwB,IAAT,EAAeC,mBAAf,EAAoC;AAC1D,QAAI,CAAC9sB,MAAM,CAAC6sB,IAAD,CAAX,EAAmB;AACjBzjC,MAAAA,yBAAyB,CAACyjC,IAAD,EAAOC,mBAAP,CAAzB;AACA;AACD;;AACD,QAAIv+B,GAAG,CAACs+B,IAAD,CAAH,KAAc3W,MAAM,CAACn1B,GAAD,CAAxB,EAA+B;AAC7B8rC,MAAAA,IAAI,GAAGxwB,sBAAqB,CAACxO,GAAG,CAACg/B,IAAD,CAAJ,EAAYC,mBAAZ,CAA5B;AACA;AACD;;AACD,QAAIjsB,YAAY,CAACgsB,IAAD,CAAhB,EAAwB;AACtB;AACAxwB,MAAAA,sBAAqB,CAACxO,GAAG,CAACU,GAAG,CAACs+B,IAAD,CAAJ,CAAJ,EAAiBC,mBAAjB,CAArB;;AACAzwB,MAAAA,sBAAqB,CAAC9N,GAAG,CAACA,GAAG,CAACs+B,IAAD,CAAJ,CAAJ,EAAiBC,mBAAjB,CAArB;;AACA;AACD;;AACD,WAAO1jC,yBAAyB,CAACyjC,IAAD,EAAOC,mBAAP,CAAhC;AACD,GAhBD;;AAkBA1jC,EAAAA,yBAAyB,GAAG,mCAASyjC,IAAT,EAAeC,mBAAf,EAAoC;AAC9D,QAAID,IAAI,KAAK3W,MAAM,CAACn1B,GAAD,CAAnB,EAA0B;AACxB;AACA,aAAO+rC,mBAAmB,CAAC3d,IAApB,CAAyB0d,IAAzB,CAAP;AACD;AACF,GALD;;AAOAppB,EAAAA,IAAI,GAAG,CACL;AACA,YAFK,EAGL;AACA,iBAJK,EAKL;AACA,wBANK,EAOL;AACA;AACA;AACA;AACA,qBAXK,EAYL,uBAZK,EAaL,wBAbK,EAcL,YAdK,EAeL,cAfK,EAgBL;AACA,4BAjBK,EAkBL,8BAlBK,EAmBL,kCAnBK,EAoBL,sCApBK,EAqBL;AACA,4BAtBK,EAuBL;AACA,4CAxBK,EAyBL;AACA,mEA1BK,EA2BL;AACA,6CA5BK,EA6BL;AACA,wCA9BK,EA+BL;AACA,uCAhCK,EAiCL;AACA,+BAlCK,EAmCL;AACA,iCApCK,EAqCL;AACA,uCAtCK,EAuCL;AACA,qCAxCK,EAyCL;AACA,+CA1CK,EA2CL;AACA,mEA5CK,EA6CL;AACA,6DA9CK,EA+CL;AACA,qEAhDK,EAiDL;AACA,wCAlDK,EAmDL;AACA,yDApDK,EAqDL;AACA,uEAtDK,EAuDL;AACA,oDAxDK,EAyDL;AACA,mEA1DK,EA2DL;AACA,0EA5DK,EA6DL;AACA,+EA9DK,EA+DL;AACA,qGAhEK,EAiEL;AACA;AACA,uCAnEK,EAoEL;AACA,oDArEK,EAsEL;AACA,sEAvEK,EAwEL;AACA;AACA,iDA1EK,EA2EL;AACA,6DA5EK,EA6EL;AACA,oIA9EK,EA+EL;AACA,yCAhFK,EAiFL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFA3FK,EA4FL;AACA,qGA7FK,EA8FL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAxGK,EAyGL;AACA,0CA1GK,EA2GL;AACA,0DA5GK,EA6GL;AACA,4EA9GK,EA+GL;AACA,kEAhHK,EAiHL;AACA,uEAlHK,EAmHL;AACA,oCApHK,EAqHL;AACA,mDAtHK,EAuHL;AACA,qEAxHK,EAyHL;AACA,0GA1HK,EA2HL;AACA,mFA5HK,EA6HL;AACA,iFA9HK,EA+HL;AACA,2DAhIK,EAiIL;AACA,uCAlIK,EAmIL;AACA,2EApIK,EAqIL;AACA,uFAtIK,EAuIL;AACA,4FAxIK,EAyIL;AACA,mFA1IK,EA2IL;AACA,gCA5IK,EA6IL;AACA,wCA9IK,EA+IL;AACA,iJAhJK,EAiJL;AACA,kJAlJK,EAmJL;AACA,4EApJK,EAqJL;AACA,qEAtJK,EAuJL;AACA,0EAxJK,EAyJL;AACA,2FA1JK,EA2JL;AACA,0EA5JK,EA6JL;AACA,+EA9JK,EA+JL;AACA,iEAhKK,EAiKL;AACA,wDAlKK,EAmKL;AACA,2CApKK,EAqKL;AACA,iHAtKK,EAuKL;AACA,2GAxKK,EAyKL;AACA,2MA1KK,EA2KL;AACA,4MA5KK,EA6KL;AACA,qIA9KK,EA+KL;AACA,sIAhLK,EAiLL;AACA,mDAlLK,EAmLL;AACA,kDApLK,EAqLL;AACA,+DAtLK,EAuLL;AACA;AACA,uFAzLK,EA0LL;AACA,4FA3LK,EA4LL;AACA,iCA7LK,EA8LL;AACA,yCA/LK,EAgML;AACA,4GAjMK,EAkML;AACA,+EAnMK,EAoML;AACA,oFArMK,EAsML;AACA,kEAvMK,EAwML;AACA,8EAzMK,EA0ML;AACA,2GA3MK,EA4ML;AACA,wEA7MK,EA8ML;AACA,kGA/MK,EAgNL;AACA,2FAjNK,EAkNL;AACA,2BAnNK,EAoNL;AACA,0BArNK,EAsNL;AACA,gCAvNK,EAwNL;AACA,iCAzNK,EA0NL;AACA,wCA3NK,EA4NL;AACA,mCA7NK,EA8NL;AACA,sCA/NK,EAgOL;AACA,gDAjOK,EAkOL;AACA,0DAnOK,EAoOL;AACA,sCArOK,EAsOL;AACA,+CAvOK,EAwOL;AACA,0DAzOK,EA0OL;AACA,mCA3OK,EA4OL;AACA,8BA7OK,EA8OL;AACA,yCA/OK,EAgPL;AACA,mDAjPK,EAkPL;AACA,yCAnPK,EAoPL;AACA,4DArPK,EAsPL;AACA,0CAvPK,EAwPL;AACA,4CAzPK,EA0PL;AACA,6DA3PK,EA4PL;AACA,kEA7PK,EA8PL;AACA,kDA/PK,EAgQL;AACA,+BAjQK,EAkQL;AACA,8BAnQK,EAoQL;AACA,4CArQK,EAsQL;AACA,2CAvQK,EAwQL;AACA,sCAzQK,EA0QL;AACA,yCA3QK,EA4QL;AACA,4GA7QK,EA6QuG;AAC5G;AACA,4GA/QK,EA+QuG;AAC5G;AACA,2CAjRK,EAkRL;AACA,6DAnRK,EAoRL;AACA,2CArRK,EAsRL;AACA,6DAvRK,EAwRL;AACA,kDAzRK,EA0RL;AACA,kDA3RK,EA4RL;AACA,qDA7RK,EA8RL;AACA;AACA;AACA;AACA,sCAlSK,EAmSL;AACA,0CApSK,EAqSL;AACA,yCAtSK,EAuSL;AACA,qCAxSK,EAySL;AACA,wCA1SK,EA2SL;AACA,uDA5SK,EA6SL;AACA,sBA9SK,EA+SL;AACA,sBAhTK,EAiTL;AACA,2BAlTK,EAmTL;AACA,kCApTK,EAqTL;AACA,kCAtTK,EAuTL;AACA,gCAxTK,EAyTL;AACA,0BA1TK,EA2TL;AACA,gCA5TK,EA6TL;AACA,kDA9TK,EA+TL;AACA,2DAhUK,EAiUL;AACA,wDAlUK,EAmUL;AACA,mDApUK,EAqUL;AACA,yEAtUK,EAuUL,mFAvUK,EAwUL,+EAxUK,EAyUL,sCAzUK,EA0UL,0CA1UK,EA2UL,kDA3UK,EA4UL,sDA5UK,EA6UL,6DA7UK,EA8UL,mEA9UK,EA+UL,CA/UK,CAAP,CAr0YU,CAupZV;AACA;AACA;;AACAvqB,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI+lC,SAAJ,EAAenC,CAAf,EAAkBtf,EAAlB,EAAsBif,CAAtB,EAAyB7T,CAAzB,EAA4BmI,GAA5B,EAAiCC,IAAjC;AACA8L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ,CAHyB,CAIzB;;AACApT,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI,GAPqB,CAQzB;AAEA;AAEA;AACA;AACA;AACA;AACA;;AACAw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACLsS,MAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACD,KAHD,MAGO,IAAI4d,aAAa,CAAC2K,EAAD,CAAjB,EAAuB;AAC5BzM,MAAAA,KAAK;AACLsS,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD,KAHM,MAGA;AACL6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAD,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACL;;AACD40B,IAAAA,EAAE,GAAGiB,GAAG,EAAR;AACAlB,IAAAA,EAAE,GAAGkB,GAAG,EAAR;AACAnB,IAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,WAAO,CAAP,EAAU;AACR;AACA,UAAI/L,aAAa,CAAC8K,EAAD,CAAjB,EAAuB;AACrB0F,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACAgT,QAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,YAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ/G,UAAAA,IAAI,CAAC,uBAAD,CAAJ;AACD;AACF,OAND,MAMO;AACL+G,QAAAA,CAAC,GAAG,CAAJ;AACD;;AACDtN,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACA,UAAIkT,CAAC,IAAI,CAAT,EAAY;AACV,aAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFuG,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAtL,UAAAA,QAAQ;AACT;AACF,OALD,MAKO;AACLue,QAAAA,CAAC,GAAG,CAACA,CAAL;;AACA,aAAKK,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA7V,UAAAA,UAAU;AACX;AACF;;AACD4V,MAAAA,EAAE,GAAGmB,GAAG,EAAR,CAxBQ,CAyBR;;AACA,UAAIjB,EAAE,KAAKyM,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB;AACD,OA5BO,CA6BR;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AACA,UAAI4d,aAAa,CAAC8K,EAAD,CAAjB,EAAuB;AACrBJ,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,QAAAA,IAAI;AACJ40B,QAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,YAAIjB,EAAE,KAAKyM,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB,gBADsB,CACf;AACR;;AACD,YAAI4d,aAAa,CAAC8K,EAAD,CAAjB,EAAuB;AACrBwV,UAAAA,SAAS,GAAG,CAAZ,CADqB,CACN;AAChB,SAFD,MAEO;AACLzV,UAAAA,EAAE,GAAGC,EAAL;AACAJ,UAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,UAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,UAAAA,IAAI;AACJ40B,UAAAA,EAAE,GAAGiB,GAAG,EAAR,CALK,CAKO;AACb;AACF,OAjBD,MAiBO;AACLlB,QAAAA,EAAE,GAAGC,EAAL;AACAJ,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,QAAAA,IAAI;AACJ40B,QAAAA,EAAE,GAAGiB,GAAG,EAAR,CALK,CAKO;AACb;AACF;;AACD,WAAOyE,IAAI,CAAC5F,EAAD,CAAX,CArGyB,CAqGR;AAClB,GAtGD;;AAwGArL,EAAAA,QAAQ,GAAG,oBAAW;AACpB2T,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B8uB,MAAAA,eAAe;AAChB,KAFD,MAEO,IAAIxQ,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AACvCwd,MAAAA,mBAAmB;AACpB,KAFM,MAEA;AACLD,MAAAA,gBAAgB;AACjB;;AACDkL,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIxsB,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAACx3B,QAAD,CAAX,CAAR,EAAgC;AAC9Bg3B,MAAAA,IAAI,CAAC,4CAAD,CAAJ;AACD;;AACDvG,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA6K,IAAAA,QAAQ;AACRr/B,IAAAA,IAAI;AACJ,WAAOu8B,OAAO,EAAd;AACD,GAnBD;;AAqBA/S,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAI+d,OAAJ;AACA/S,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACApL,IAAAA,QAAQ;AACRmL,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACApL,MAAAA,QAAQ;AACRlV,MAAAA,GAAG;AACHozB,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAhBD;;AAkBAhe,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B+Q,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAa,IAAAA,SAAS;AACTd,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAvM,IAAAA,gBAAgB;AAChB,WAAOuI,QAAQ,EAAf,CAN+B,CAMZ;AACpB,GAPD;;AASAvI,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAI4uB,EAAJ,EAAQC,GAAR;AACAD,IAAAA,EAAE,GAAGrpB,cAAc,CAAC2F,EAAD,EAAKC,EAAL,CAAd,CAAuByb,OAAvB,CAA+B,CAA/B,CAAL;AACAiI,IAAAA,GAAG,GAAG3vB,WAAW,CAAC0vB,EAAD,CAAjB;;AACA,QAAI,CAACC,GAAL,EAAU;AACR;AACA;AACApd,MAAAA,WAAW,CAAClxB,QAAD,CAAX;AACAywB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD6K,IAAAA,IAAI,CAAC9F,EAAD,CAAJ,CAb4B,CAalB;;AACV8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ,CAd4B,CAclB;;AACVqO,IAAAA,UAAS,CAACqV,GAAD,EAAM,KAAN,CAAT;;AACAzjB,IAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,QAAInB,EAAE,KAAK2M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB6uB,MAAAA,WAAW,CAAClxB,QAAD,CAAX;AACAywB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,aAAOhF,IAAI,CAAC,CAAD,CAAX;AACD,KALD,MAKO;AACL,aAAO6K,IAAI,CAAC5F,EAAD,CAAX;AACD;AACF,GAzBD,CAlzZU,CA60ZV;AACA;AACA;AAEA;AACA;;;AACAnM,EAAAA,eAAe,GAAG;AAChB,SAAK,OADW;AAEhB,gBAAY,OAFI;AAGhB,gBAAY,mBAHI;AAIhB,iBAAa,mBAJG;AAKhB,WAAO,mBALS;AAMhB,cAAU,kBANM;AAOhB,WAAO,oBAPS;AAQhB,cAAU,kBARM;AAShB,WAAO,mBATS;AAUhB,cAAU,kBAVM;AAWhB,YAAQ,kBAXQ;AAYhB,YAAQ,kBAZQ;AAahB,YAAQ,kBAbQ;AAchB,WAAO,mBAdS;AAehB,WAAO;AAfS,GAAlB;;AAkBAsG,EAAAA,cAAc,GAAG,wBAASupB,CAAT,EAAY9P,CAAZ,EAAe;AAC9B,QAAI+P,IAAJ;;AACA,QAAI/pB,QAAQ,CAAC8pB,CAAD,CAAZ,EAAiB;AACf,UAAIz1B,KAAK,CAACy1B,CAAD,EAAI9P,CAAJ,CAAT,EAAiB;AACf,eAAO/f,eAAe,CAAC+f,CAAvB;AACD,OAFD,MAEO;AACL,eAAO/f,eAAe,CAACqqB,QAAvB;AACD;AACF,KAND,MAMO,IAAIznB,MAAM,CAACitB,CAAD,CAAV,EAAe;AACpB,cAAQxW,MAAM,CAAC5oB,GAAG,CAACo/B,CAAD,CAAJ,CAAd;AACE,aAAK19C,GAAL;AACE,iBAAOytB,aAAa,CAACzO,GAAG,CAAC0+B,CAAD,CAAJ,EAAS9P,CAAT,CAApB;;AACF,aAAKv8B,QAAL;AACE,iBAAOsc,mBAAmB,CAAC3O,GAAG,CAAC0+B,CAAD,CAAJ,EAAS9P,CAAT,CAA1B;;AACF,aAAKh7B,KAAL;AACE,iBAAOgb,UAAU,CAACxP,IAAI,CAACs/B,CAAD,CAAL,EAAUv/B,KAAK,CAACu/B,CAAD,CAAf,EAAoB9P,CAApB,CAAjB;;AACF,aAAK1oC,GAAL;AACE,iBAAO0oB,UAAU,CAAC+Y,MAAM,CAACpiC,CAAD,CAAP,EAAY6Z,IAAI,CAACs/B,CAAD,CAAhB,EAAqB9P,CAArB,CAAjB;;AACF,aAAK74B,IAAL;AACEgrB,UAAAA,WAAW,CAAC,GAAD,CAAX;AACA4d,UAAAA,IAAI,GAAGxiB,GAAG,EAAV;AACA,iBAAOvN,UAAU,CAACxP,IAAI,CAACs/B,CAAD,CAAL,EAAUC,IAAV,EAAgB/P,CAAhB,CAAjB;;AACF;AACE,iBAAOlgB,aAAa,CAACgwB,CAAD,EAAI9P,CAAJ,CAApB;AAdJ;AAgBD;;AACD,WAAO/f,eAAe,CAACqqB,QAAvB;AACD,GA3BD;;AA6BAxqB,EAAAA,aAAa,GAAG,uBAASgwB,CAAT,EAAY9P,CAAZ,EAAe;AAC7B,QAAIgQ,QAAJ,EAAc5E,IAAd,EAAoB6E,IAApB;;AACA,QAAI,CAAClvC,KAAI,CAACyP,IAAI,CAACs/B,CAAD,CAAL,EAAU9P,CAAV,CAAT,EAAuB;AACrB,aAAO/f,eAAe,CAACqqB,QAAvB;AACD;;AACD2F,IAAAA,IAAI,GAAGv/B,GAAG,CAACo/B,CAAD,CAAV;AACAE,IAAAA,QAAQ,GAAGzpB,cAAc,CAAC/V,IAAI,CAACs/B,CAAD,CAAL,EAAU9P,CAAV,CAAzB;AACAoL,IAAAA,IAAI,GAAGnrB,eAAe,CAACgwB,IAAI,CAACtR,SAAN,CAAtB;;AACA,QAAI,CAACyM,IAAL,EAAW;AACT,YAAM,IAAI8E,KAAJ,CAAU,0BAA0BD,IAAI,CAACtR,SAAzC,CAAN;AACD;;AACD,WAAOmB,IAAI,CAACwC,GAAL,CAAS8I,IAAT,EAAe4E,QAAf,CAAP;AACD,GAZD;;AAcAnwB,EAAAA,aAAa,GAAG,uBAASswB,KAAT,EAAgBnQ,CAAhB,EAAmB;AACjC,QAAIlB,CAAJ,EAAOsR,GAAP,EAAYC,IAAZ,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,CAAvC;AACAD,IAAAA,QAAQ,GAAG,EAAX;;AACA,WAAO1tB,MAAM,CAACstB,KAAD,CAAb,EAAsB;AACpBE,MAAAA,IAAI,GAAG3/B,GAAG,CAACy/B,KAAD,CAAV;AACAA,MAAAA,KAAK,GAAG/+B,GAAG,CAAC++B,KAAD,CAAX;AACAG,MAAAA,SAAS,GAAG,CAAZ;;AACA,UAAIvvC,KAAI,CAACsvC,IAAD,EAAOrQ,CAAP,CAAR,EAAmB;AACjBsQ,QAAAA,SAAS,GAAG/pB,cAAc,CAAC8pB,IAAD,EAAOrQ,CAAP,CAA1B;AACD,OAFD,MAEO;AACL;AACA;AACA;AACAsQ,QAAAA,SAAS,GAAGrwB,eAAe,CAACqqB,QAA5B;AACD;;AACDiG,MAAAA,QAAQ,CAACD,SAAS,CAAC1I,OAAV,CAAkB,CAAlB,CAAD,CAAR,GAAiC,IAAjC;AACD;;AACDwI,IAAAA,GAAG,GAAG,CAAN;;AACA,SAAKtR,CAAL,IAAUyR,QAAV,EAAoB;AAClB,UAAI,CAACpS,OAAO,CAACM,IAAR,CAAa8R,QAAb,EAAuBzR,CAAvB,CAAL,EAAgC;AAChC0R,MAAAA,CAAC,GAAGD,QAAQ,CAACzR,CAAD,CAAZ;AACAsR,MAAAA,GAAG,GAAGA,GAAG,GAAGzG,UAAU,CAAC7K,CAAD,EAAI,EAAJ,CAAtB;AACD;;AACD,WAAOsR,GAAP;AACD,GAxBD;;AA0BArwB,EAAAA,mBAAmB,GAAG,6BAASowB,KAAT,EAAgBnQ,CAAhB,EAAmB;AACvC,QAAIyQ,OAAJ,EAAaJ,IAAb;AACAI,IAAAA,OAAO,GAAG,CAAV;;AACA,WAAO5tB,MAAM,CAACstB,KAAD,CAAb,EAAsB;AACpBE,MAAAA,IAAI,GAAG3/B,GAAG,CAACy/B,KAAD,CAAV;AACAA,MAAAA,KAAK,GAAG/+B,GAAG,CAAC++B,KAAD,CAAX;;AACA,UAAIpvC,KAAI,CAACsvC,IAAD,EAAOrQ,CAAP,CAAR,EAAmB;AACjByQ,QAAAA,OAAO,GAAGA,OAAO,GAAGlqB,cAAc,CAAC8pB,IAAD,EAAOrQ,CAAP,CAAlC;AACD;AACF;;AACD,WAAOyQ,OAAP;AACD,GAXD;;AAaAzwB,EAAAA,UAAU,GAAG,oBAASorB,IAAT,EAAezd,KAAf,EAAsBqS,CAAtB,EAAyB;AACpC,QAAI0Q,SAAJ,EAAeC,QAAf;AACAD,IAAAA,SAAS,GAAGzwB,eAAe,CAACqqB,QAA5B;AACAqG,IAAAA,QAAQ,GAAG1wB,eAAe,CAAC2wB,QAA3B;;AACA,QAAI7vC,KAAI,CAACqqC,IAAD,EAAOpL,CAAP,CAAR,EAAmB;AACjB0Q,MAAAA,SAAS,GAAGnqB,cAAc,CAAC6kB,IAAD,EAAOpL,CAAP,CAA1B;AACD;;AACD,QAAIj/B,KAAI,CAAC4sB,KAAD,EAAQqS,CAAR,CAAR,EAAoB;AAClB2Q,MAAAA,QAAQ,GAAGpqB,cAAc,CAACoH,KAAD,EAAQqS,CAAR,CAAzB;AACD,KAFD,MAEO;AACL;AACA,UAAI0Q,SAAS,KAAKzwB,eAAe,CAACqqB,QAAlC,EAA4C;AAC1C,eAAOrqB,eAAe,CAACqqB,QAAvB;AACD;;AACD,UAAItmB,UAAU,CAAC2J,KAAD,CAAd,EAAuB;AACrBgjB,QAAAA,QAAQ,GAAG,CAAC,CAAZ;AACD,OAFD,MAEO,IAAI9rB,YAAY,CAAC8I,KAAD,CAAhB,EAAyB;AAC9BgjB,QAAAA,QAAQ,GAAG,GAAX;AACD,OAFM,MAEA,IAAIzsB,iBAAiB,CAACyJ,KAAD,CAArB,EAA8B;AACnCgjB,QAAAA,QAAQ,GAAG,CAAC,GAAZ;AACD,OAFM,MAEA,IAAIp2B,MAAM,CAACoT,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAV,EAAyB;AAC9BgjB,QAAAA,QAAQ,GAAG,CAAX;AACD,OAFM,MAEA,IAAIp2B,MAAM,CAACoT,KAAD,EAAQ,CAAC,CAAT,EAAY,CAAZ,CAAV,EAA0B;AAC/BgjB,QAAAA,QAAQ,GAAG,CAAC,CAAZ;AACD;AACF;;AACD,WAAO7Q,IAAI,CAACwC,GAAL,CAASoO,SAAT,EAAoBC,QAApB,CAAP;AACD,GA3BD;;AA6BA/oB,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAIipB,CAAJ,EAAOzR,CAAP,EAAU0R,GAAV,EAAexN,GAAf,EAAoB7X,CAApB,EAAuBqV,CAAvB,EAA0B+O,GAA1B,EAA+BC,CAA/B;AACAD,IAAAA,GAAG,GAAG,EAAN;;AACA,SAAKpkB,CAAC,GAAG,CAAJ,EAAO6X,GAAG,GAAGhd,IAAI,CAACU,MAAvB,EAA+ByE,CAAC,GAAG6X,GAAnC,EAAwC7X,CAAC,EAAzC,EAA6C;AAC3CqV,MAAAA,CAAC,GAAGxa,IAAI,CAACmF,CAAD,CAAR;;AACA,UAAI,CAACqV,CAAL,EAAQ;AACN;AACD;;AACD1L,MAAAA,SAAS,CAAC0L,CAAD,CAAT;AACA+P,MAAAA,CAAC,GAAGtjB,GAAG,EAAP;AACAuiB,MAAAA,CAAC,GAAGt/B,IAAI,CAACqgC,CAAD,CAAR;AACAzR,MAAAA,CAAC,GAAG7Y,cAAc,CAACupB,CAAD,EAAI/W,MAAM,CAAC11B,KAAD,CAAV,CAAlB;AACAytC,MAAAA,GAAG,GAAG1R,CAAC,CAACwI,OAAF,CAAU,CAAV,CAAN;;AACA,UAAI,CAACiI,GAAG,CAACiB,GAAD,CAAR,EAAe;AACbjB,QAAAA,GAAG,CAACiB,GAAD,CAAH,GAAW,EAAX;AACD;;AACDjB,MAAAA,GAAG,CAACiB,GAAD,CAAH,CAAS9e,IAAT,CAAc8O,CAAd;AACD;;AACDL,IAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBoQ,IAAI,CAACC,SAAL,CAAenB,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAA/B;AACA,WAAOA,GAAP;AACD,GApBD;;AAsBA39C,EAAAA,CAAC,CAAC01B,gBAAF,GAAqBA,gBAArB,CA1+ZU,CA4+ZV;AACA;AACA;AACA;;AACA1H,EAAAA,WAAW,GAAG;AACZ,gBAAY,CAAC,UAAD,CADA;AAEZ,gBAAY,CAAC,eAAD,CAFA;AAGZ,gBAAY,CAAC,sBAAD,CAHA;AAIZ,gBAAY,CAAC,mBAAD,CAJA;AAKZ,gBAAY,CAAC,uBAAD,CALA;AAMZ,gBAAY,CAAC,wBAAD,CANA;AAOZ,gBAAY,CAAC,YAAD,CAPA;AAQZ,gBAAY,CAAC,cAAD,CARA;AASZ,gBAAY,CAAC,0BAAD,EAA6B,0CAA7B,CATA;AAUZ,gBAAY,CAAC,8BAAD,CAVA;AAWZ,gBAAY,CAAC,kCAAD,CAXA;AAYZ,gBAAY,CAAC,sCAAD,CAZA;AAaZ,gBAAY,CAAC,0BAAD,CAbA;AAcZ,gBAAY,CAAC,iEAAD,EAAoE,2CAApE,EAAiH,6EAAjH,EAAgM,mGAAhM,CAdA;AAeZ,gBAAY,CAAC,sCAAD,EAAyC,qCAAzC,EAAgF,qCAAhF,CAfA;AAgBZ,gBAAY,CAAC,6BAAD,CAhBA;AAiBZ,gBAAY,CAAC,+BAAD,CAjBA;AAkBZ,gBAAY,CAAC,qCAAD,CAlBA;AAmBZ,gBAAY,CAAC,mCAAD,CAnBA;AAoBZ,gBAAY,CAAC,6CAAD,CApBA;AAqBZ,gBAAY,CAAC,iEAAD,CArBA;AAsBZ,gBAAY,CAAC,2DAAD,CAtBA;AAuBZ,gBAAY,CAAC,mEAAD,CAvBA;AAwBZ,gBAAY,CAAC,sCAAD,CAxBA;AAyBZ,gBAAY,CAAC,uDAAD,CAzBA;AA0BZ,gBAAY,CAAC,qEAAD,CA1BA;AA2BZ,gBAAY,CAAC,kDAAD,CA3BA;AA4BZ,gBAAY,CAAC,iEAAD,CA5BA;AA6BZ,gBAAY,CAAC,wEAAD,CA7BA;AA8BZ,gBAAY,CAAC,qCAAD,CA9BA;AA+BZ,gBAAY,CAAC,kDAAD,CA/BA;AAgCZ,gBAAY,CAAC,oEAAD,CAhCA;AAiCZ,gBAAY,CAAC,+CAAD,CAjCA;AAkCZ,gBAAY,CAAC,2DAAD,CAlCA;AAmCZ,gBAAY,CAAC,kIAAD,CAnCA;AAoCZ,gBAAY,CAAC,uCAAD,CApCA;AAqCZ,gBAAY,CAAC,iFAAD,EAAoF,mGAApF,CArCA;AAsCZ,gBAAY,CAAC,uCAAD,CAtCA;AAuCZ,gBAAY,CAAC,wCAAD,CAvCA;AAwCZ,gBAAY,CAAC,wDAAD,CAxCA;AAyCZ,gBAAY,CAAC,0EAAD,CAzCA;AA0CZ,gBAAY,CAAC,gEAAD,CA1CA;AA2CZ,gBAAY,CAAC,qEAAD,CA3CA;AA4CZ,gBAAY,CAAC,kCAAD,CA5CA;AA6CZ,gBAAY,CAAC,iDAAD,CA7CA;AA8CZ,gBAAY,CAAC,mEAAD,CA9CA;AA+CZ,gBAAY,CAAC,wGAAD,EAA2G,iFAA3G,CA/CA;AAgDZ,gBAAY,CAAC,+EAAD,CAhDA;AAiDZ,gBAAY,CAAC,yDAAD,EAA4D,6DAA5D,EAA2H,gGAA3H,EAA6N,yFAA7N,CAjDA;AAkDZ,gBAAY,CAAC,yEAAD,EAA4E,qFAA5E,EAAmK,qFAAnK,CAlDA;AAmDZ,gBAAY,CAAC,0FAAD,EAA6F,iFAA7F,EAAgL,0FAAhL,CAnDA;AAoDZ,gBAAY,CAAC,8BAAD,EAAiC,+BAAjC,CApDA;AAqDZ,gBAAY,CAAC,sCAAD,EAAyC,uCAAzC,CArDA;AAsDZ,gBAAY,CAAC,+IAAD,EAAkJ,gJAAlJ,CAtDA;AAuDZ,gBAAY,CAAC,0EAAD,CAvDA;AAwDZ,gBAAY,CAAC,mEAAD,CAxDA;AAyDZ,gBAAY,CAAC,wEAAD,CAzDA;AA0DZ,gBAAY,CAAC,yFAAD,EAA4F,0GAA5F,CA1DA;AA2DZ,gBAAY,CAAC,wEAAD,EAA2E,6EAA3E,EAA0J,6EAA1J,EAAyO,yGAAzO,EAAoV,sEAApV,CA3DA;AA4DZ,gBAAY,CAAC,+DAAD,EAAkE,kFAAlE,CA5DA;AA6DZ,gBAAY,CAAC,sDAAD,EAAyD,+GAAzD,EAA0K,yGAA1K,CA7DA;AA8DZ,gBAAY,CAAC,yCAAD,EAA4C,gEAA5C,CA9DA;AA+DZ,gBAAY,CAAC,yMAAD,EAA4M,0MAA5M,CA/DA;AAgEZ,gBAAY,CAAC,mIAAD,EAAsI,oIAAtI,CAhEA;AAiEZ,gBAAY,CAAC,iDAAD,EAAoD,gDAApD,CAjEA;AAkEZ,gBAAY,CAAC,4EAAD,CAlEA;AAmEZ,gBAAY,CAAC,yBAAD,CAnEA;AAoEZ,gBAAY,CAAC,wBAAD,CApEA;AAqEZ,gBAAY,CAAC,8BAAD,CArEA;AAsEZ,gBAAY,CAAC,+BAAD,CAtEA;AAuEZ,gBAAY,CAAC,sCAAD,CAvEA;AAwEZ,gBAAY,CAAC,iCAAD,CAxEA;AAyEZ,gBAAY,CAAC,oCAAD,CAzEA;AA0EZ,gBAAY,CAAC,8CAAD,EAAiD,wDAAjD,CA1EA;AA2EZ,gBAAY,CAAC,oCAAD,CA3EA;AA4EZ,gBAAY,CAAC,6CAAD,EAAgD,wDAAhD,CA5EA;AA6EZ,gBAAY,CAAC,iCAAD,CA7EA;AA8EZ,gBAAY,CAAC,4BAAD,CA9EA;AA+EZ,gBAAY,CAAC,uCAAD,CA/EA;AAgFZ,gBAAY,CAAC,iDAAD,CAhFA;AAiFZ,gBAAY,CAAC,uCAAD,CAjFA;AAkFZ,gBAAY,CAAC,0DAAD,CAlFA;AAmFZ,gBAAY,CAAC,wCAAD,CAnFA;AAoFZ,gBAAY,CAAC,0CAAD,CApFA;AAqFZ,gBAAY,CAAC,2DAAD,CArFA;AAsFZ,gBAAY,CAAC,gEAAD,CAtFA;AAuFZ,gBAAY,CAAC,gDAAD,CAvFA;AAwFZ,gBAAY,CAAC,6BAAD,CAxFA;AAyFZ,gBAAY,CAAC,4BAAD,CAzFA;AA0FZ,gBAAY,CAAC,0CAAD,EAA6C,yCAA7C,EAAwF,0GAAxF,CA1FA;AA2FZ,gBAAY,CAAC,oCAAD,EAAuC,uCAAvC,EAAgF,0GAAhF,CA3FA;AA4FZ,gBAAY,CAAC,yCAAD,CA5FA;AA6FZ,gBAAY,CAAC,2DAAD,CA7FA;AA8FZ,gBAAY,CAAC,yCAAD,CA9FA;AA+FZ,gBAAY,CAAC,2DAAD,CA/FA;AAgGZ,gBAAY,CAAC,gDAAD,CAhGA;AAiGZ,gBAAY,CAAC,gDAAD,CAjGA;AAkGZ,gBAAY,CAAC,mDAAD,CAlGA;AAmGZ,gBAAY,CAAC,oCAAD,CAnGA;AAoGZ,gBAAY,CAAC,wCAAD,CApGA;AAqGZ,gBAAY,CAAC,uCAAD,CArGA;AAsGZ,gBAAY,CAAC,mCAAD,CAtGA;AAuGZ,gBAAY,CAAC,sCAAD,CAvGA;AAwGZ,gBAAY,CAAC,qDAAD,CAxGA;AAyGZ,gBAAY,CAAC,oBAAD,CAzGA;AA0GZ,gBAAY,CAAC,oBAAD,CA1GA;AA2GZ,gBAAY,CAAC,yBAAD,CA3GA;AA4GZ,gBAAY,CAAC,gCAAD,CA5GA;AA6GZ,gBAAY,CAAC,gCAAD,CA7GA;AA8GZ,gBAAY,CAAC,8BAAD,CA9GA;AA+GZ,gBAAY,CAAC,wBAAD,CA/GA;AAgHZ,gBAAY,CAAC,8BAAD,CAhHA;AAiHZ,gBAAY,CAAC,gDAAD,CAjHA;AAkHZ,gBAAY,CAAC,yDAAD,CAlHA;AAmHZ,gBAAY,CAAC,sDAAD,CAnHA;AAoHZ,gBAAY,CAAC,iDAAD,CApHA;AAqHZ,gBAAY,CAAC,uEAAD,EAA0E,mFAA1E,CArHA;AAsHZ,gBAAY,CAAC,+EAAD,CAtHA;AAuHZ,gBAAY,CAAC,sCAAD,CAvHA;AAwHZ,gBAAY,CAAC,0CAAD,CAxHA;AAyHZ,gBAAY,CAAC,kDAAD,CAzHA;AA0HZ,gBAAY,CAAC,sDAAD,CA1HA;AA2HZ,gBAAY,CAAC,6DAAD,CA3HA;AA4HZ,gBAAY,CAAC,mEAAD;AA5HA,GAAd,CAh/ZU,CA+maV;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;AACAxe,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI,CAACwkB,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AACjB,aAAO,CAAP;AACD,KAFD,MAEO,IAAIA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,KAAmB,CAAvB,EAA0B;AAC/B,aAAO,CAAP;AACD,KAFM,MAEA,IAAIhT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,MAAqB9S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAzB,EAA2C;AAChD,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GAVD;;AAYA7d,EAAAA,IAAG,GAAG,eAAW;AACf,QAAImoB,WAAJ,EAAiB2H,SAAjB,EAA4BtR,CAA5B,EAA+BL,CAA/B,EAAkC7T,CAAlC,EAAqCmI,GAArC;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ,CAHe,CAIf;;AACA5K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CANe,CAOf;AACA;;AACA,QAAIzJ,KAAK,CAACoI,EAAD,CAAT,EAAe;AACb8F,MAAAA,IAAI,CAACthB,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD,KAbc,CAcf;AACA;;;AACA,QAAI3Q,gBAAgB,CAAC4I,EAAD,CAApB,EAA0B;AACxB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD,KApBc,CAqBf;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI5Y,SAAS,IAAIqI,YAAY,CAACwI,EAAD,CAA7B,EAAmC;AACjCA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAod,MAAAA,WAAW,GAAG,EAAd;;AACA,aAAOzmB,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBod,QAAAA,WAAW,CAACtX,IAAZ,CAAiBthB,GAAG,CAACwb,EAAD,CAApB;AACAA,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAK+kB,SAAS,GAAGxlB,CAAC,GAAGmI,GAAG,GAAG0V,WAAW,CAACtiB,MAAZ,GAAqB,CAAhD,EAAoD4M,GAAG,IAAI,CAAP,GAAWnI,CAAC,IAAI,CAAhB,GAAoBA,CAAC,IAAI,CAA7E,EAAiFwlB,SAAS,GAAGrd,GAAG,IAAI,CAAP,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhH,EAAmH;AACjHuG,QAAAA,IAAI,CAACsX,WAAW,CAAC2H,SAAD,CAAZ,CAAJ;;AACA9vB,QAAAA,IAAG;;AACH,YAAI8vB,SAAS,KAAK3H,WAAW,CAACtiB,MAAZ,GAAqB,CAAvC,EAA0C;AACxCpG,UAAAA,MAAK;AACN;AACF;;AACDqT,MAAAA,OAAO;AACP;AACD;;AACD,QAAIvyB,aAAa,OAAO,CAAxB,EAA2B;AACzB+wB,MAAAA,WAAW,CAACjxB,GAAD,CAAX;AACAwwB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACD,QAAIxS,sBAAqB,CAACyK,EAAD,CAAzB,EAA+B;AAC7BmR,MAAAA,MAAM;AACP,KAFD,MAEO;AACLrL,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA7f,MAAAA,GAAG;AACH2lB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAxV,MAAAA,GAAG;AACHyV,MAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,UAAIxL,kBAAkB,CAACoK,EAAD,CAAtB,EAA4B;AAC1BoM,QAAAA,IAAI,CAAC,4BAAD,CAAJ;AACD;;AACDvG,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhV,MAAAA,MAAM;AACP;;AACD,WAAO8c,OAAO,EAAd;AACD,GAlED;;AAoEA3S,EAAAA,IAAI,GAAG,gBAAW;AAChBoT,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7rB,aAAa,OAAO,CAAxB,EAA2B;AACzB+wB,MAAAA,WAAW,CAAChxB,IAAD,CAAX;AACAuwB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACDoJ,IAAAA,MAAM;AACN,WAAOpJ,OAAO,EAAd;AACD,GAZD,CAptaU,CAkuaV;;;AACAoJ,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAI+B,CAAJ,EAAOO,CAAP,EAAUtf,EAAV,EAAcuf,CAAd,EAAiBpZ,EAAjB,EAAqB4a,EAArB,EAAyB9B,CAAzB,EAA4B7T,CAA5B,EAA+BmI,GAA/B,EAAoCC,IAApC,EAA0CyN,IAA1C,EAAgDC,IAAhD;AACAnC,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;AACAA,IAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAJ;AACAI,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,SAAKoF,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF,WAAKmU,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,YAAIsf,CAAC,KAAKC,CAAV,EAAa;AACX5N,UAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD,SAFD,MAEO;AACLsG,UAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;AACF;AACF;;AACD,SAAK0B,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGhC,CAAC,GAAGA,CAA5B,EAAgC,KAAKgC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA7D,EAAoE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FwL,MAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACD;;AACDh+B,IAAAA,UAAU,CAAC29B,CAAD,CAAV;AACApT,IAAAA,EAAE,GAAG5f,YAAY,CAACgzB,CAAC,GAAGA,CAAL,CAAjB;AACApT,IAAAA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAhT,IAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;AACApT,IAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGjC,CAAC,GAAGA,CAA5B,EAAgC,KAAKiC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAA7D,EAAoE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FlV,MAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzH,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAzB;AACD;;AACDhX,IAAAA,OAAO,CAAC4R,GAAG,GAAG,IAAI+E,CAAJ,GAAQA,CAAf,CAAP;AACA,WAAOtN,IAAI,CAAC9F,EAAD,CAAX;AACD,GA9BD,CAnuaU,CAmwaV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;;AACAvqB,EAAAA,UAAU,GAAG,oBAAS29B,CAAT,EAAY;AACvB,QAAIf,CAAJ,EAAOM,CAAP,EAAUc,CAAV,EAAatf,EAAb,EAAiBuf,CAAjB,EAAoBpZ,EAApB,EAAwB4a,EAAxB,EAA4B3V,CAA5B,EAA+BmI,GAA/B,EAAoCC,IAApC,EAA0CyN,IAA1C,EAAgDC,IAAhD,EAAsDC,IAAtD,EAA4DvC,OAA5D,EAAqE6Q,CAArE;AACAvR,IAAAA,CAAC,GAAG,CAAJ;AACAM,IAAAA,CAAC,GAAG,CAAJ;AACAc,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAkQ,IAAAA,CAAC,GAAG,CAAJ;AACAvR,IAAAA,CAAC,GAAGhE,GAAG,GAAG+E,CAAC,GAAGA,CAAd;AACAwQ,IAAAA,CAAC,GAAGvR,CAAC,GAAGe,CAAC,GAAGA,CAAZ;AACAL,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKJ,CAAC,GAAGpT,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyDiL,CAAC,GAAG,KAAKjL,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF;AACA,UAAIpR,KAAK,CAAC6d,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGT,CAAR,GAAYA,CAAb,CAAN,EAAuBZ,IAAvB,CAAT,EAAuC;AAC7C;AACQ,aAAK0B,CAAC,GAAGtf,EAAE,GAAGwT,IAAI,GAAGgL,CAAC,GAAG,CAApB,EAAuByC,IAAI,GAAGhC,CAAnC,EAAuCzL,IAAI,IAAIyN,IAAR,GAAejhB,EAAE,GAAGihB,IAApB,GAA2BjhB,EAAE,GAAGihB,IAAvE,EAA8E3B,CAAC,GAAG9L,IAAI,IAAIyN,IAAR,GAAe,EAAEjhB,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5G,cAAI,CAAChG,KAAK,CAAC6d,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGK,CAAR,GAAYd,CAAb,CAAN,EAAuBZ,IAAvB,CAAV,EAAwC;AACtC;AACD;AACF;;AACD,YAAI0B,CAAC,KAAKL,CAAV,EAAa;AACX/G,UAAAA,IAAI,CAAC,4BAAD,CAAJ;AACD,SAToC,CAU7C;;;AACQ,aAAKqH,CAAC,GAAGpZ,EAAE,GAAG,CAAT,EAAY+a,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAY/a,EAAE,GAAG+a,IAAjB,GAAwB/a,EAAE,GAAG+a,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE/a,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2F,UAAAA,EAAE,GAAG+L,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAV;AACA1H,UAAAA,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAL,GAAuB1H,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAA5B;AACA1H,UAAAA,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAL,GAAuBzT,EAAvB;AACAA,UAAAA,EAAE,GAAG+L,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAV;AACA1H,UAAAA,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAL,GAAuB1H,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAA5B;AACA1H,UAAAA,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAL,GAAuBzT,EAAvB;AACD;AACF,OArBgF,CAsBjF;;;AACAA,MAAAA,EAAE,GAAG+L,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGT,CAAR,GAAYA,CAAb,CAAV;;AACA,WAAKe,CAAC,GAAGwB,EAAE,GAAG,CAAT,EAAYI,IAAI,GAAGlC,CAAxB,EAA4B,KAAKkC,IAAL,GAAYJ,EAAE,GAAGI,IAAjB,GAAwBJ,EAAE,GAAGI,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEJ,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,YAAIxB,CAAC,GAAGf,CAAR,EAAW;AACT7M,UAAAA,IAAI,CAACkG,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAN,CAAJ;AACA5N,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhV,UAAAA,MAAM;AACN+gB,UAAAA,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAL,GAAuBrS,GAAG,EAA1B;AACD;;AACDyE,QAAAA,IAAI,CAACkG,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAN,CAAJ;AACA5N,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhV,QAAAA,MAAM;AACN+gB,QAAAA,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAL,GAAuBrS,GAAG,EAA1B;AACD;;AACD0R,MAAAA,OAAO,CAACjN,IAAR,CAAc,YAAW;AACvB,YAAIqP,EAAJ,EAAQI,IAAR,EAAciK,QAAd,CADuB,CAE/B;;AACQA,QAAAA,QAAQ,GAAG,EAAX;;AACA,aAAK/L,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYI,IAAI,GAAGnC,CAAxB,EAA4B,KAAKmC,IAAL,GAAYJ,EAAE,GAAGI,IAAjB,GAAwBJ,EAAE,GAAGI,IAAzD,EAAgE9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAEJ,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,cAAI1B,CAAC,KAAKd,CAAV,EAAa;AACX;AACD,WAH0F,CAI3F;;;AACA1S,UAAAA,EAAE,GAAG+L,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGK,CAAR,GAAYd,CAAb,CAAV;AACA6M,UAAAA,QAAQ,CAAC1Z,IAAT,CAAe,YAAW;AACxB,gBAAImU,EAAJ,EAAQzE,IAAR,EAAcwP,QAAd,CADwB,CAEpC;;AACYA,YAAAA,QAAQ,GAAG,EAAX;;AACA,iBAAKtR,CAAC,GAAGuG,EAAE,GAAG,CAAT,EAAYzE,IAAI,GAAGpC,CAAxB,EAA4B,KAAKoC,IAAL,GAAYyE,EAAE,GAAGzE,IAAjB,GAAwByE,EAAE,GAAGzE,IAAzD,EAAgE9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAEyE,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,kBAAIvG,CAAC,GAAGf,CAAR,EAAW;AACT7M,gBAAAA,IAAI,CAACkG,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAN,CAAJ;AACA5N,gBAAAA,IAAI,CAACkG,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAN,CAAJ;AACA5N,gBAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,gBAAAA,QAAQ;AACRqP,gBAAAA,QAAQ;AACRV,gBAAAA,KAAK,CAACqG,CAAC,GAAGe,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAL,GAAuBrS,GAAG,EAA1B;AACD;;AACDyE,cAAAA,IAAI,CAACkG,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAN,CAAJ;AACA5N,cAAAA,IAAI,CAACkG,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGT,CAAR,GAAYe,CAAb,CAAN,CAAJ;AACA5N,cAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,cAAAA,QAAQ;AACRqP,cAAAA,QAAQ;AACRsY,cAAAA,QAAQ,CAAClf,IAAT,CAAckG,KAAK,CAAC4X,CAAC,GAAGxQ,CAAC,GAAGK,CAAR,GAAYC,CAAb,CAAL,GAAuBrS,GAAG,EAAxC;AACD;;AACD,mBAAO2jB,QAAP;AACD,WArBa,EAAd;AAsBD;;AACD,eAAOxF,QAAP;AACD,OAlCY,EAAb;AAmCD;;AACD,WAAOzM,OAAP;AACD,GAnFD;;AAqFA5pC,EAAAA,QAAQ,GAAG,KAAX,CAx2aU,CA02aV;AACA;AAEA;AACA;AACA;AACA;;AACAysB,EAAAA,UAAU,GAAG,oBAASme,CAAT,EAAY;AACvB,YAAQA,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,eAAOZ,KAAK,CAACu8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,CAAZ;;AACF,WAAKhoC,MAAL;AACE,eAAO0pC,CAAC,CAACpB,CAAF,KAAQ,GAAf;;AACF;AACE,eAAO,KAAP;AANJ;AAQD,GATD,CAj3aU,CA43aV;AACA;AACA;AACA;;;AACA5c,EAAAA,YAAY,GAAG,sBAASge,CAAT,EAAY;AACzB,QAAIN,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV;;AACA,QAAIqM,CAAC,CAACnB,CAAF,KAAQh2B,MAAZ,EAAoB;AAClB,aAAO,CAAP;AACD;;AACD,SAAK62B,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGqM,CAAC,CAACtG,MAAF,CAASwF,KAA/B,EAAuC,KAAKvL,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAhE,EAAsE+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA7F,EAAgG;AAC9F,UAAI,CAAC1J,kBAAkB,CAACke,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,CAAD,CAAvB,EAA2C;AACzC,eAAO,CAAP;AACD;AACF;;AACD,WAAO,CAAP;AACD,GAXD,CAh4aU,CA64aV;AACA;AACA;AACA;;;AACA5d,EAAAA,kBAAkB,GAAG,4BAASke,CAAT,EAAY;AAC/B,WAAOne,UAAU,CAACme,CAAD,CAAV,IAAiBhe,YAAY,CAACge,CAAD,CAApC;AACD,GAFD,CAj5aU,CAq5aV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAje,EAAAA,qCAAqC,GAAG,+CAASmvB,gBAAT,EAA2B;AACjE,QAAIC,eAAJ,CADiE,CAEjE;;AACApf,IAAAA,IAAI,CAACmf,gBAAD,CAAJ,CAHiE,CAIjE;AACA;;AACA3zC,IAAAA,cAAc;AACd4zC,IAAAA,eAAe,GAAG7jB,GAAG,EAArB,CAPiE,CAQjE;AACA;;AACA,QAAIxL,kBAAkB,CAACqvB,eAAD,CAAtB,EAAyC;AACvC,aAAO,CAAP;AACD,KAZgE,CAajE;AACA;AACA;AACA;AACA;;;AACA,QAAI3vB,sBAAqB,CAAC2vB,eAAD,CAAzB,EAA4C;AAC1C,aAAO,CAAP;AACD,KApBgE,CAqBjE;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApf,IAAAA,IAAI,CAACof,eAAD,CAAJ;AACAlT,IAAAA,OAAO;AACPkT,IAAAA,eAAe,GAAG7jB,GAAG,EAArB,CA9BiE,CA+BjE;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,QAAIxL,kBAAkB,CAACqvB,eAAD,CAAtB,EAAyC;AACvC,aAAO,CAAP;AACD;;AACD,QAAI3vB,sBAAqB,CAAC2vB,eAAD,CAAzB,EAA4C;AAC1C,aAAO,CAAP;AACD,KAhDgE,CAiDjE;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,QAAIrwC,KAAI,CAACqwC,eAAD,EAAkB7wB,aAAlB,CAAR,EAA0C;AACxCyR,MAAAA,IAAI,CAACof,eAAD,CAAJ;AACA1lC,MAAAA,WAAW;AACXlO,MAAAA,cAAc;AACd4zC,MAAAA,eAAe,GAAG7jB,GAAG,EAArB,CAJwC,CAKxC;;AACA,UAAIxL,kBAAkB,CAACqvB,eAAD,CAAtB,EAAyC;AACvC,eAAO,CAAP;AACD;;AACD,UAAI3vB,sBAAqB,CAAC2vB,eAAD,CAAzB,EAA4C;AAC1C,eAAO,CAAP;AACD;AACF,KArEgE,CAsEjE;AACA;AACA;AACA;AACA;;;AACA,WAAO,IAAP;AACD,GA5ED,CA95aU,CA4+aV;;;AACA9sB,EAAAA,gBAAgB,GAAG,0BAAS2b,CAAT,EAAY;AAC7B,YAAQA,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,YAAId,KAAK,CAACy8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,CAAL,KAAiB,CAAC,CAAtB,EAAyB;AACvB,iBAAO,CAAP;AACD;;AACD;;AACF,WAAKhoC,MAAL;AACE,YAAI0pC,CAAC,CAACpB,CAAF,GAAM,GAAV,EAAe;AACb,iBAAO,CAAP;AACD;;AATL;;AAWA,WAAO,CAAP;AACD,GAbD,CA7+aU,CA4/aV;;;AACArZ,EAAAA,gBAAgB,GAAG,0BAASya,CAAT,EAAY;AAC7B,YAAQA,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,YAAId,KAAK,CAACy8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,CAAL,KAAiB,CAArB,EAAwB;AACtB,iBAAO,CAAP;AACD;;AACD;;AACF,WAAKhoC,MAAL;AACE,YAAI0pC,CAAC,CAACpB,CAAF,GAAM,GAAV,EAAe;AACb,iBAAO,CAAP;AACD;;AATL;;AAWA,WAAO,CAAP;AACD,GAbD,CA7/aU,CA4gbV;;;AACA9Z,EAAAA,SAAS,GAAG,mBAASkb,CAAT,EAAY;AACtB,YAAQA,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,YAAIpB,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,EAAQ,CAAR,CAAN,IAAoBr7B,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQ,CAAR,CAA9B,EAA0C;AACxC,iBAAO,CAAP;AACD;;AACD;;AACF,WAAKjoC,MAAL;AACE,YAAI0pC,CAAC,CAACpB,CAAF,KAAQ,GAAZ,EAAiB;AACf,iBAAO,CAAP;AACD;;AATL;;AAWA,WAAO,CAAP;AACD,GAbD,CA7gbU,CA4hbV;;;AACA/Z,EAAAA,SAAS,GAAG,mBAASmb,CAAT,EAAY;AACtB,YAAQA,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,YAAIpB,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,EAAQ,CAAR,CAAN,IAAoBr7B,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQ,CAAR,CAA9B,EAA0C;AACxC,iBAAO,CAAP;AACD;;AACD;;AACF,WAAKjoC,MAAL;AACE,YAAI0pC,CAAC,CAACpB,CAAF,KAAQ,GAAZ,EAAiB;AACf,iBAAO,CAAP;AACD;;AATL;;AAWA,WAAO,CAAP;AACD,GAbD;;AAeA7a,EAAAA,UAAU,GAAG,oBAASic,CAAT,EAAY;AACvB,YAAQA,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,YAAIpB,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,EAAQ,CAAC,CAAT,CAAN,IAAqBr7B,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQ,CAAR,CAA/B,EAA2C;AACzC,iBAAO,CAAP;AACD;;AACD;;AACF,WAAKjoC,MAAL;AACE,YAAI0pC,CAAC,CAACpB,CAAF,KAAQ,CAAC,GAAb,EAAkB;AAChB,iBAAO,CAAP;AACD;;AATL;;AAWA,WAAO,CAAP;AACD,GAbD;;AAeAna,EAAAA,KAAK,GAAG,eAASub,CAAT,EAAY;AAClB,WAAOnb,SAAS,CAACmb,CAAD,CAAT,IAAgBjc,UAAU,CAACic,CAAD,CAAjC;AACD,GAFD;;AAIAtc,EAAAA,SAAS,GAAG,mBAASsc,CAAT,EAAY;AACtB,QAAIA,CAAC,CAACnB,CAAF,KAAQx6B,GAAR,IAAepB,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQ,CAAR,CAAzB,EAAqC;AACnC,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQA3a,EAAAA,uBAAuB,GAAG,iCAASoc,CAAT,EAAY;AACpC,QAAIA,CAAC,CAACnB,CAAF,KAAQvoC,MAAZ,EAAoB;AAClB,UAAI0pC,CAAC,CAACpB,CAAF,KAAQiB,IAAI,CAAC+D,KAAL,CAAW5D,CAAC,CAACpB,CAAb,CAAZ,EAA6B;AAC3B,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD;;AACD,WAAOlb,SAAS,CAACsc,CAAD,CAAhB;AACD,GARD;;AAUAzb,EAAAA,oBAAoB,GAAG,8BAASyb,CAAT,EAAY;AACjC,QAAIta,UAAU,CAACsa,CAAD,CAAV,IAAiB/8B,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQ,CAAR,CAAvB,IAAqCh7B,KAAK,CAACy8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,CAAL,KAAiB,CAA1D,EAA6D;AAC3D,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQAhZ,EAAAA,QAAQ,GAAG,kBAAS0a,CAAT,EAAY;AACrB,QAAItc,SAAS,CAACsc,CAAD,CAAT,IAAgBz8B,KAAK,CAACy8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,CAAL,KAAiB,CAArC,EAAwC;AACtC,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND,CAzlbU,CAimbV;;;AACAlY,EAAAA,kCAAkC,GAAG,4CAAS4Z,CAAT,EAAYD,CAAZ,EAAe;AAClD,QAAIhrC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,4CAA4CV,CAA5C,GAAgD,MAAhD,GAAyDD,CAArE;AACD;;AACD,QAAIA,CAAC,IAAI,IAAT,EAAe;AACbhO,MAAAA,IAAI,CAACiO,CAAD,CAAJ;AACAvgB,MAAAA,KAAK;AACLsgB,MAAAA,CAAC,GAAGzS,GAAG,EAAP;AACAA,MAAAA,GAAG;AACJ;;AACD,QAAInI,4BAA4B,CAAC6a,CAAD,EAAID,CAAJ,CAA5B,IAAuCj/B,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAACxwB,QAAD,CAAV,CAAJ,GAA4BxH,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAACtwB,QAAD,CAAV,CAAhC,GAAwD1H,KAAI,CAACk/B,CAAD,EAAIlH,MAAM,CAACrwB,QAAD,CAAV,CAA5D,KAAsF,CAAjI,EAAqI;AACnI,aAAOs3B,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAfD,CAlmbU,CAmnbV;AACA;AACA;AACA;;;AACA5a,EAAAA,4BAA4B,GAAG,sCAAS6a,CAAT,EAAYD,CAAZ,EAAe;AAC5C,WAAO3a,mCAAmC,CAAC4a,CAAD,EAAID,CAAJ,CAA1C;AACD,GAFD;;AAIA3a,EAAAA,mCAAmC,GAAG,6CAAS4a,CAAT,EAAYD,CAAZ,EAAe;AACnD,QAAItvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/Bw8B,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,YAAIjrC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,iDAAiDjwB,GAAG,CAACuvB,CAAD,CAAhE;AACD;;AACD,YAAI,CAAC3a,kCAAkC,CAAC5U,GAAG,CAACuvB,CAAD,CAAJ,EAASD,CAAT,CAAvC,EAAoD;AAClD,cAAIhrC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBjwB,GAAG,CAACuvB,CAAD,CAAxC;AACD;;AACD,iBAAO,CAAP;AACD;;AACDA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KAfD,MAeO;AACL,aAAO3a,kCAAkC,CAAC2a,CAAD,EAAID,CAAJ,CAAzC;AACD;AACF,GAnBD;;AAqBA1a,EAAAA,kCAAkC,GAAG,4CAAS2a,CAAT,EAAYD,CAAZ,EAAe;AAClD,QAAItvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAArB,EAA8B;AAC5B,UAAIhQ,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,6DAA6Dpb,QAAQ,CAAChV,KAAK,CAAC0vB,CAAD,CAAN,CAAR,EAAoBjrC,KAAK,GAAGyrC,OAAO,CAACE,GAAR,CAAY,6EAA6E1b,uBAAuB,CAACzU,IAAI,CAACyvB,CAAD,CAAL,EAAUD,CAAV,CAAhH,CAAH,GAAmI,KAAK,CAA9N,CAAZ;AACD;;AACD,aAAOza,QAAQ,CAAChV,KAAK,CAAC0vB,CAAD,CAAN,CAAR,IAAsBhb,uBAAuB,CAACzU,IAAI,CAACyvB,CAAD,CAAL,EAAUD,CAAV,CAApD;AACD,KALD,MAKO;AACL,UAAIhrC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,kFAAkFV,CAA9F;AACD;;AACD,aAAOhb,uBAAuB,CAACgb,CAAD,EAAID,CAAJ,CAA9B;AACD;AACF,GAZD,CAhpbU,CA8pbV;;;AACAhb,EAAAA,kBAAkB,GAAG,4BAASib,CAAT,EAAYD,CAAZ,EAAe;AAClC,QAAIj/B,KAAI,CAACk/B,CAAD,EAAID,CAAJ,CAAR,EAAgB;AACd,aAAO/a,uBAAuB,CAACgb,CAAD,EAAID,CAAJ,CAA9B;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQA/a,EAAAA,uBAAuB,GAAG,iCAASgb,CAAT,EAAYD,CAAZ,EAAe;AACvC,QAAItvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAArB,EAA4B;AAC1B6tC,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,YAAI,CAAC9a,uBAAuB,CAACzU,GAAG,CAACuvB,CAAD,CAAJ,EAASD,CAAT,CAA5B,EAAyC;AACvC,iBAAO,CAAP;AACD;;AACDC,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KATD,MASO;AACL,aAAO9a,uBAAuB,CAAC8a,CAAD,EAAID,CAAJ,CAA9B;AACD;AACF,GAbD;;AAeA7a,EAAAA,uBAAuB,GAAG,iCAAS8a,CAAT,EAAYD,CAAZ,EAAe;AACvC,QAAItvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/Bw8B,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,YAAI,CAAC/a,yBAAyB,CAACxU,GAAG,CAACuvB,CAAD,CAAJ,EAASD,CAAT,CAA9B,EAA2C;AACzC,iBAAO,CAAP;AACD;;AACDC,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KATD,MASO;AACL,aAAO/a,yBAAyB,CAAC+a,CAAD,EAAID,CAAJ,CAAhC;AACD;AACF,GAbD;;AAeA9a,EAAAA,yBAAyB,GAAG,mCAAS+a,CAAT,EAAYD,CAAZ,EAAe;AACzC,QAAI3lB,KAAK,CAAC4lB,CAAD,EAAID,CAAJ,CAAT,EAAiB;AACf,aAAO,CAAP;AACD;;AACD,QAAItvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4BqV,KAAK,CAAC7J,IAAI,CAACyvB,CAAD,CAAL,EAAUD,CAAV,CAArC,EAAmD;AACjD,UAAIza,QAAQ,CAAChV,KAAK,CAAC0vB,CAAD,CAAN,CAAZ,EAAwB;AACtB,eAAO,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF;;AACD,QAAIl/B,KAAI,CAACk/B,CAAD,EAAID,CAAJ,CAAR,EAAgB;AACd,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAhBD,CArsbU,CAutbV;;;AACAzb,EAAAA,cAAc,GAAG,wBAAS0b,CAAT,EAAY;AAC3B,QAAI3b,gBAAgB,CAAC2b,CAAD,CAApB,EAAyB;AACvB,aAAO,CAAP;AACD,KAFD,MAEO,IAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+B6gB,gBAAgB,CAAC9T,IAAI,CAACyvB,CAAD,CAAL,CAAnD,EAA8D;AACnE,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARD;;AAUArgB,EAAAA,2BAA2B,GAAG,qCAASqgB,CAAT,EAAY;AACxC,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4B2gB,UAAU,CAACjV,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAJ,CAAtC,IAA4D3b,gBAAgB,CAAC5T,GAAG,CAACU,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAhF,EAA+F;AAC7F,UAAI5qC,QAAJ,EAAc;AACZorC,QAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkCV,CAAC,CAACI,QAAF,EAAlC,GAAiD,0BAA7D;AACD;;AACD,aAAO,CAAP;AACD,KALD,MAKO;AACL,UAAIhrC,QAAJ,EAAc;AACZorC,QAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkCV,CAAC,CAACI,QAAF,EAAlC,GAAiD,6BAA7D;AACD;;AACD,aAAO,CAAP;AACD;AACF,GAZD;;AAcA7c,EAAAA,uBAAuB,GAAG,iCAASyc,CAAT,EAAY;AACpC,QAAKvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+BujB,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAA7C,IAAkDjd,QAAQ,CAACxS,IAAI,CAACyvB,CAAD,CAAL,CAA1D,IAAuErgB,2BAA2B,CAACrP,KAAK,CAAC0vB,CAAD,CAAN,CAAnG,IAAkH5lB,KAAK,CAAC4lB,CAAD,EAAI1f,aAAJ,CAA3H,EAA+I;AAC7I,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQAgD,EAAAA,iBAAiB,GAAG,2BAAS0c,CAAT,EAAY;AAC9B,QAAKvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+BujB,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAA7C,IAAkDze,aAAa,CAAChR,IAAI,CAACyvB,CAAD,CAAL,CAA/D,IAA4E5lB,KAAK,CAAC9J,KAAK,CAAC0vB,CAAD,CAAN,EAAW1f,aAAX,CAAlF,IAAgHlG,KAAK,CAAC4lB,CAAD,EAAI1f,aAAJ,CAArH,IAA2IX,2BAA2B,CAACrP,KAAK,CAAC0vB,CAAD,CAAN,CAA1K,EAAsL;AACpL,UAAI5qC,QAAJ,EAAc;AACZorC,QAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwBV,CAAC,CAACI,QAAF,EAAxB,GAAuC,sBAAnD;AACD;;AACD,aAAO,CAAP;AACD,KALD,MAKO;AACL,UAAIhrC,QAAJ,EAAc;AACZorC,QAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwBV,CAAC,CAACI,QAAF,EAAxB,GAAuC,4BAAnD;AACD;;AACD,aAAO,CAAP;AACD;AACF,GAZD;;AAcAzd,EAAAA,qBAAqB,GAAG,+BAASqd,CAAT,EAAY;AAClC,QAAKvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAAjB,IAA0B40B,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAAxC,IAA6Cjd,QAAQ,CAACxS,IAAI,CAACyvB,CAAD,CAAL,CAArD,IAAkEzc,uBAAuB,CAACjT,KAAK,CAAC0vB,CAAD,CAAN,CAA1F,IAAyGzc,uBAAuB,CAACyc,CAAD,CAApI,EAAyI;AACvI,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQAtd,EAAAA,eAAe,GAAG,yBAASsd,CAAT,EAAY;AAC5B,QAAI5qC,QAAJ,EAAc;AACZ;AACD;;AACD,QAAKqb,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAAjB,IAA0B40B,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAAxC,IAA6Cze,aAAa,CAAChR,IAAI,CAACyvB,CAAD,CAAL,CAA1D,IAAuE1c,iBAAiB,CAAChT,KAAK,CAAC0vB,CAAD,CAAN,CAAzF,IAAwG1c,iBAAiB,CAAC0c,CAAD,CAA7H,EAAkI;AAChI,UAAIjrC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsBV,CAAC,CAACI,QAAF,EAAtB,GAAqC,sBAAjD;AACD;;AACD,aAAO,CAAP;AACD,KALD,MAKO;AACL,UAAIrrC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsBV,CAAC,CAACI,QAAF,EAAtB,GAAqC,sBAAjD;AACD;;AACD,aAAO,CAAP;AACD;AACF,GAfD;;AAiBApd,EAAAA,aAAa,GAAG,uBAASgd,CAAT,EAAY;AAC1B,QAAItc,SAAS,CAACsc,CAAD,CAAT,IAAgBA,CAAC,CAACvB,CAAF,CAAIH,CAAJ,CAAM8S,MAAN,EAApB,EAAoC;AAClC,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQAhtB,EAAAA,UAAU,GAAG,oBAAS4b,CAAT,EAAY;AACvB,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAAjB,IAA0BmyB,cAAc,CAAC/T,IAAI,CAACyvB,CAAD,CAAL,CAA5C,EAAuD;AACrD,aAAO,CAAP;AACD,KAFD,MAEO,IAAI1b,cAAc,CAAC0b,CAAD,CAAlB,EAAuB;AAC5B,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARD,CAvybU,CAizbV;AACA;AACA;AACA;AACA;AACA;;;AACAha,EAAAA,WAAU,GAAG,oBAASga,CAAT,EAAY;AACvB,QAAIja,QAAQ,CAACia,CAAD,CAAZ,EAAiB;AACf,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,YAAIha,WAAU,CAACvV,GAAG,CAACuvB,CAAD,CAAJ,CAAd,EAAwB;AACtB,iBAAO,CAAP;AACD;;AACDA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,aAAO,CAAP;AACD;AACF,GAZD,CAvzbU,CAq0bV;;;AACArc,EAAAA,eAAe,GAAG,yBAASqc,CAAT,EAAY;AAC5B,WAAOtc,SAAS,CAACsc,CAAD,CAAT,IAAgBvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4B2e,SAAS,CAACnT,IAAI,CAACyvB,CAAD,CAAL,CAArC,IAAkDtc,SAAS,CAACpT,KAAK,CAAC0vB,CAAD,CAAN,CAAlF;AACD,GAFD;;AAIA1e,EAAAA,wBAAwB,GAAG,kCAAS0e,CAAT,EAAY;AACrC,WAAO5c,UAAU,CAAC4c,CAAD,CAAV,IAAiB/8B,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIH,CAAJ,CAAM9yB,GAAN,EAAD,EAAc,CAAd,CAA9B;AACD,GAFD;;AAIAkZ,EAAAA,SAAS,GAAG,mBAASsb,CAAT,EAAY;AACtB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4Bgf,UAAU,CAACzT,KAAK,CAAC0vB,CAAD,CAAN,CAA7C;AACD,GAFD;;AAIA5c,EAAAA,UAAU,GAAG,oBAAS4c,CAAT,EAAY;AACvB,WAAOA,CAAC,CAACnB,CAAF,KAAQx6B,GAAR,IAAe,CAACpB,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQ,CAAR,CAA7B;AACD,GAFD,CAl1bU,CAs1bV;;;AACAlkB,EAAAA,MAAM,GAAG,gBAAS2lB,CAAT,EAAYX,CAAZ,EAAe;AACtB,YAAQW,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,eAAOpB,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,EAAQe,CAAR,CAAN,IAAoBp8B,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQ,CAAR,CAAjC;;AACF,WAAKjoC,MAAL;AACE,eAAO0pC,CAAC,CAACpB,CAAF,KAAQS,CAAf;;AACF;AACE,eAAO,KAAP;AANJ;AAQD,GATD,CAv1bU,CAk2bV;;;AACA/kB,EAAAA,MAAM,GAAG,gBAAS0lB,CAAT,EAAY1B,CAAZ,EAAeC,CAAf,EAAkB;AACzB,YAAQyB,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACE,eAAOpB,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIH,CAAL,EAAQA,CAAR,CAAN,IAAoBr7B,MAAM,CAAC+8B,CAAC,CAACvB,CAAF,CAAIF,CAAL,EAAQA,CAAR,CAAjC;;AACF,WAAKjoC,MAAL;AACE,eAAO0pC,CAAC,CAACpB,CAAF,KAAQN,CAAC,GAAGC,CAAnB;;AACF;AACE,eAAO,KAAP;AANJ;AAQD,GATD,CAn2bU,CA82bV;;;AACA3Z,EAAAA,YAAY,GAAG,sBAASob,CAAT,EAAY;AACzB,WAAO1lB,MAAM,CAAC0lB,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;AACD,GAFD,CA/2bU,CAm3bV;;;AACA/b,EAAAA,iBAAiB,GAAG,2BAAS+b,CAAT,EAAY;AAC9B,WAAO1lB,MAAM,CAAC0lB,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAb;AACD,GAFD,CAp3bU,CAw3bV;;;AACArb,EAAAA,gBAAgB,GAAG,0BAASqb,CAAT,EAAY;AAC7B,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4BsV,MAAM,CAAC9J,IAAI,CAACyvB,CAAD,CAAL,EAAU,CAAV,CAAlC,IAAkD1lB,MAAM,CAAChK,KAAK,CAAC0vB,CAAD,CAAN,EAAW,CAAC,CAAZ,EAAe,CAAf,CAA/D;AACD,GAFD,CAz3bU,CA63bV;;;AACAhc,EAAAA,qBAAqB,GAAG,+BAASgc,CAAT,EAAY;AAClC,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+B6W,MAAM,CAAC9J,IAAI,CAACyvB,CAAD,CAAL,EAAU,CAAC,CAAX,CAArC,IAAsDrb,gBAAgB,CAACrU,KAAK,CAAC0vB,CAAD,CAAN,CAAtE,IAAoFjZ,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAAzG;AACD,GAFD,CA93bU,CAk4bV;;;AACAna,EAAAA,kBAAkB,GAAG,4BAASma,CAAT,EAAY;AAC/B,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+BohB,YAAY,CAACrU,IAAI,CAACyvB,CAAD,CAAL,CAA3C,IAAwDpa,WAAW,CAACtV,KAAK,CAAC0vB,CAAD,CAAN,CAAnE,IAAiFjZ,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAAtG;AACD,GAFD,CAn4bU,CAu4bV;;;AACA9b,EAAAA,uBAAuB,GAAG,iCAAS8b,CAAT,EAAY;AACpC,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+BygB,iBAAiB,CAAC1T,IAAI,CAACyvB,CAAD,CAAL,CAAhD,IAA6Dpa,WAAW,CAACtV,KAAK,CAAC0vB,CAAD,CAAN,CAAxE,IAAsFjZ,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAA3G;AACD,GAFD,CAx4bU,CA44bV;;;AACApa,EAAAA,WAAW,GAAG,qBAASoa,CAAT,EAAY;AACxB,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4BsV,MAAM,CAAC9J,IAAI,CAACyvB,CAAD,CAAL,EAAU,CAAV,CAAlC,IAAkDpb,YAAY,CAACtU,KAAK,CAAC0vB,CAAD,CAAN,CAArE;AACD,GAFD;;AAIA7c,EAAAA,WAAU,GAAG,oBAAS6c,CAAT,EAAY;AACvB,QAAIA,CAAC,CAACnB,CAAF,KAAQvoC,MAAR,IAAkB0pC,CAAC,KAAKlH,MAAM,CAACr4B,MAAD,CAAlC,EAA4C;AAC1C,aAAO,CAAP;AACD;;AACD,WAAOmiB,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,UAAI7c,WAAU,CAAC1S,GAAG,CAACuvB,CAAD,CAAJ,CAAd,EAAwB;AACtB,eAAO,CAAP;AACD;;AACDA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAXD;;AAaAxc,EAAAA,eAAe,GAAG,yBAASwc,CAAT,EAAY;AAC5B,QAAI5lB,KAAK,CAAC4lB,CAAD,EAAI1f,aAAJ,CAAT,EAA6B;AAC3B,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND,CA95bU,CAs6bV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACAmF,EAAAA,aAAa,GAAG,uBAASua,CAAT,EAAY;AAC1B,QAAIqR,SAAJ,EAAehS,CAAf;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAgS,IAAAA,SAAS,GAAG,CAAZ;;AACA,QAAI5gC,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/B,aAAO,CAAP;AACD;;AACD,QAAI4W,KAAK,CAAC7J,IAAI,CAACyvB,CAAD,CAAL,EAAU1f,aAAV,CAAT,EAAmC;AACjC,UAAIhQ,KAAK,CAAC0vB,CAAD,CAAL,KAAalH,MAAM,CAACj0B,EAAD,CAAvB,EAA6B;AAC3B,eAAO,CAAP;AACD;;AACD,UAAIkiB,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnB,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD;;AACD,QAAI,CAACze,aAAa,CAAChR,IAAI,CAACyvB,CAAD,CAAL,CAAlB,EAA6B;AAC3B,aAAO,CAAP;AACD;;AACD,QAAI,CAAC5lB,KAAK,CAAC9J,KAAK,CAAC0vB,CAAD,CAAN,EAAW1f,aAAX,CAAV,EAAqC;AACnC,aAAO,CAAP;AACD;;AACD,QAAIjQ,MAAM,CAAC2vB,CAAD,CAAN,KAAclH,MAAM,CAACj0B,EAAD,CAAxB,EAA8B;AAC5B,aAAO,CAAP;AACD;;AACD,QAAIkiB,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnB,aAAO,CAAP;AACD;;AACDjO,IAAAA,IAAI,CAACxhB,IAAI,CAACyvB,CAAD,CAAL,CAAJ;AACA1N,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,IAAAA,QAAQ;AACR+V,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ,aAAO,CAAP;AACD;;AACD,QAAIA,CAAC,GAAG,CAAR,EAAW;AACTgS,MAAAA,SAAS,GAAG,CAAZ;AACAhS,MAAAA,CAAC,GAAG,CAACA,CAAL;AACD;;AACD,YAAQA,CAAC,GAAG,CAAZ;AACE,WAAK,CAAL;AACEA,QAAAA,CAAC,GAAG,CAAJ;AACA;;AACF,WAAK,CAAL;AACE,YAAIgS,SAAJ,EAAe;AACbhS,UAAAA,CAAC,GAAG,CAAJ;AACD,SAFD,MAEO;AACLA,UAAAA,CAAC,GAAG,CAAJ;AACD;;AACD;;AACF,WAAK,CAAL;AACEA,QAAAA,CAAC,GAAG,CAAJ;AACA;;AACF,WAAK,CAAL;AACE,YAAIgS,SAAJ,EAAe;AACbhS,UAAAA,CAAC,GAAG,CAAJ;AACD,SAFD,MAEO;AACLA,UAAAA,CAAC,GAAG,CAAJ;AACD;;AAnBL;;AAqBA,WAAOA,CAAP;AACD,GA7DD,CAn7bU,CAk/bV;AAEA;AAEA;AAEA;;;AACA7a,EAAAA,KAAK,GAAG,eAASwb,CAAT,EAAY;AAClB,QAAI6B,SAAJ,EAAexC,CAAf;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIW,CAAC,KAAKlH,MAAM,CAACj0B,EAAD,CAAhB,EAAsB;AACpB,aAAO,CAAP;AACD;;AACD,QAAI4L,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+B+d,aAAa,CAAChR,IAAI,CAACyvB,CAAD,CAAL,CAA5C,IAAyD1vB,KAAK,CAAC0vB,CAAD,CAAL,KAAalH,MAAM,CAACj0B,EAAD,CAA5E,IAAoFkiB,MAAM,CAACiZ,CAAD,CAAN,KAAc,CAAtG,EAAyG;AACvG6B,MAAAA,SAAS,GAAG,CAAZ;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;;AACD9P,IAAAA,IAAI,CAACxhB,IAAI,CAACyvB,CAAD,CAAL,CAAJ;AACA1N,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,IAAAA,QAAQ;AACR+V,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ,aAAO,CAAP;AACD;;AACD,QAAIA,CAAC,GAAG,CAAR,EAAW;AACTA,MAAAA,CAAC,GAAG,IAAK,CAACA,CAAF,GAAO,CAAf;AACD,KAFD,MAEO;AACLA,MAAAA,CAAC,GAAG,IAAI,CAACA,CAAC,GAAG,CAAL,IAAU,CAAlB;AACD;;AACD,WAAOA,CAAP;AACD,GAxBD;;AA0BAptC,EAAAA,CAAC,CAAC6vB,kBAAF,GAAuBA,kBAAvB;AAEA7vB,EAAAA,CAAC,CAACoyB,gBAAF,GAAqBA,gBAArB;AAEApyB,EAAAA,CAAC,CAAC4yB,SAAF,GAAcA,SAAd;AAEA5yB,EAAAA,CAAC,CAAC8xB,UAAF,GAAeA,UAAf;AAEA9xB,EAAAA,CAAC,CAACyxB,SAAF,GAAcA,SAAd;AAEAzxB,EAAAA,CAAC,CAACsyB,oBAAF,GAAyBA,oBAAzB;AAEAtyB,EAAAA,CAAC,CAACqzB,QAAF,GAAaA,QAAb;AAEArzB,EAAAA,CAAC,CAACqyB,cAAF,GAAmBA,cAAnB;AAEAryB,EAAAA,CAAC,CAACqxB,iBAAF,GAAsBA,iBAAtB;AAEArxB,EAAAA,CAAC,CAACywB,eAAF,GAAoBA,eAApB;AAEAzwB,EAAAA,CAAC,CAAC+wB,aAAF,GAAkBA,aAAlB;AAEA/wB,EAAAA,CAAC,CAACmyB,UAAF,GAAeA,UAAf;AAEAnyB,EAAAA,CAAC,CAAC+zB,UAAF,GAAeA,WAAf;AAEA/zB,EAAAA,CAAC,CAAC0xB,eAAF,GAAoBA,eAApB;AAEA1xB,EAAAA,CAAC,CAACyyB,SAAF,GAAcA,SAAd;AAEAzyB,EAAAA,CAAC,CAACmxB,UAAF,GAAeA,UAAf;AAEAnxB,EAAAA,CAAC,CAAC0yB,gBAAF,GAAqBA,gBAArB;AAEA1yB,EAAAA,CAAC,CAAC+xB,qBAAF,GAA0BA,qBAA1B;AAEA/xB,EAAAA,CAAC,CAACkxB,UAAF,GAAeA,WAAf;AAEAlxB,EAAAA,CAAC,CAACuxB,eAAF,GAAoBA,eAApB;AAEAvxB,EAAAA,CAAC,CAACwzB,aAAF,GAAkBA,aAAlB;AAEAxzB,EAAAA,CAAC,CAACuyB,KAAF,GAAUA,KAAV;;AAEAtoB,EAAAA,YAAY,GAAG,wBAAW;AACxB61B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI/I,oBAAoB,CAAC0H,EAAD,CAApB,IAA4BjD,MAAM,CAACiD,EAAE,CAACwS,CAAH,CAAKH,CAAN,CAAtC,EAAgD;AAC9C,aAAOhM,YAAY,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOA,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GATD;;AAWAn2B,EAAAA,aAAa,GAAG,yBAAW;AACzB;AACA41B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI,GAHqB,CAIzB;;AACAs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI,GANqB,CAOzB;;AACAs6B,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB2uB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,KAFD,MAEO;AACLP,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;;AACD,WAAO1F,QAAQ,EAAf;AACD,GAjBD,CA1kcU,CA6lcV;AACA;AACA;AACA;AACA;AACA;;;AACAA,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI6Y,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI;AACJtI,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAAS0D,KAAK,CAAC1D,CAAD,CAAlB,EAAuB;AACrB7M,MAAAA,WAAW,CAAC3wB,QAAD,CAAX;AACAkwB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjO,QAAQ,CAACkG,EAAD,CAAZ,EAAkB;AAChBxF,MAAAA,SAAS,CAAC4Y,CAAD,CAAT;AACD,KAFD,MAEO;AACLjT,MAAAA,EAAE,GAAGH,EAAL;AACAA,MAAAA,EAAE,GAAG6M,MAAM,CAACvyB,OAAD,CAAX;AACAkgB,MAAAA,SAAS,CAAC4Y,CAAD,CAAT;AACApT,MAAAA,EAAE,GAAGG,EAAL;AACA2F,MAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACAwrB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAyM,MAAAA,MAAK;;AACLjhC,MAAAA,IAAI;AACL;;AACD,WAAOu8B,OAAO,EAAd;AACD,GA/BD;;AAiCAvN,EAAAA,SAAS,GAAG,mBAAS4Y,CAAT,EAAY;AACtB,QAAIK,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV,EAAeqL,OAAf;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACApN,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAA,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhG,IAAAA,EAAE,GAAGgB,GAAG,EAAR;AACA0R,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFa,MAAAA,EAAE,GAAGC,EAAL;AACAA,MAAAA,EAAE,GAAGgB,GAAG,EAAR;AACAgF,MAAAA,YAAY,CAAC,IAAIoN,CAAJ,GAAQ,CAAT,CAAZ;AACA3N,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA0M,MAAAA,QAAQ;AACR5G,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAvgB,MAAAA,GAAG;AACHmmB,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,MAAAA,QAAQ;AACRgJ,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACA3N,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAvgB,MAAAA,GAAG;AACHmmB,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ;AACRqP,MAAAA,QAAQ;AACRrG,MAAAA,YAAY,CAACoN,CAAC,GAAG,CAAL,CAAZ;AACAV,MAAAA,OAAO,CAACjN,IAAR,CAAa7a,MAAM,EAAnB;AACD;;AACD,WAAO8nB,OAAP;AACD,GA3BD,CApocU,CAiqcV;;;AACA5iC,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI4iC,OAAJ;AACA/S,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJmvB,MAAAA,GAAG;AACHoY,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAdD;;AAgBApY,EAAAA,GAAG,GAAG,eAAW;AACf,QAAI2jB,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAqZ,IAAAA,IAAI;AACJ4I,IAAAA,KAAK;AACLrJ,IAAAA,OAAO;AACP,WAAO5Y,SAAS,GAAGmvB,cAAnB;AACD,GAPD;;AASAlN,EAAAA,KAAK,GAAG,iBAAW;AACjBjiB,IAAAA,SAAS,GAAG,CAAZ;AACA8Q,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAjO,IAAAA,GAAG;AACH8T,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/U,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhV,IAAAA,MAAM;AACN,WAAOiK,OAAO,EAAd;AACD,GAZD;;AAcA9kB,EAAAA,YAAY,GAAG,wBAAW;AACxB01B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD,WAAOpF,OAAO,EAAd;AACD,GAZD,CAzscU,CAutcV;AACA;AACA;;;AACAA,EAAAA,OAAO,GAAG,mBAAW;AACnB4N,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ,CAJmB,CAIT;;AACV8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA/V,IAAAA,MAAM;AACNgW,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ,CARmB,CAQT;;AACV8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAuB,IAAAA,KAAK;AACLxW,IAAAA,MAAM;AACN6a,IAAAA,IAAI,CAAC7F,EAAD,CAAJ,CAbmB,CAaT;;AACVtP,IAAAA,MAAM;AACN,WAAOoX,OAAO,EAAd;AACD,GAhBD;;AAkBA13B,EAAAA,aAAa,GAAG,yBAAW;AACzB;AACAy1B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI,GAHqB,CAIzB;;AACAs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI,GANqB,CAOzB;;AACAs6B,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB2uB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,KAFD,MAEO;AACLP,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;;AACD,WAAOpF,QAAQ,EAAf;AACD,GAjBD,CA5ucU,CA+vcV;AACA;AACA;AACA;AACA;AACA;;;AACAA,EAAAA,QAAQ,GAAG,oBAAW;AACpB2N,IAAAA,IAAI;;AACJvpB,IAAAA,UAAU;;AACV,WAAO8oB,OAAO,EAAd;AACD,GAJD;;AAMA9oB,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAI2/B,CAAJ,EAAOxL,CAAP;AACAwL,IAAAA,CAAC,GAAG,CAAJ;AACAxL,IAAAA,CAAC,GAAG,CAAJ;AACAlT,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,IAAAA,CAAC,GAAG5R,WAAW,EAAf;AACAsE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA0e,IAAAA,CAAC,GAAGpd,WAAW,EAAf;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAAS0D,KAAK,CAAC1D,CAAD,CAAd,IAAqBwL,CAAC,GAAG,CAAzB,IAA8B9H,KAAK,CAAC8H,CAAD,CAAvC,EAA4C;AAC1CrY,MAAAA,WAAW,CAACjwB,QAAD,CAAX;AACAwvB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAInB,QAAQ,CAACkG,EAAD,CAAZ,EAAkB;AAChB9gB,MAAAA,WAAW,CAACk0B,CAAD,EAAIwL,CAAJ,CAAX;AACD,KAFD,MAEO;AACLze,MAAAA,EAAE,GAAGH,EAAL;AACAA,MAAAA,EAAE,GAAG6M,MAAM,CAACvyB,OAAD,CAAX;;AACA4E,MAAAA,WAAW,CAACk0B,CAAD,EAAIwL,CAAJ,CAAX;;AACA5e,MAAAA,EAAE,GAAGG,EAAL;AACA2F,MAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACAwrB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAyM,MAAAA,MAAK;;AACLjhC,MAAAA,IAAI;AACL;;AACD,WAAO2T,WAAW,CAACy/B,CAAD,CAAlB;AACD,GAhCD;;AAkCA1/B,EAAAA,WAAW,GAAG,qBAASk0B,CAAT,EAAYwL,CAAZ,EAAe;AAC3B,QAAInL,CAAJ,EAAOtf,EAAP,EAAWoL,CAAX,EAAcmI,GAAd,EAAmBC,IAAnB,EAAyBoL,OAAzB;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACApN,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAA,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhG,IAAAA,EAAE,GAAGgB,GAAG,EAAR,CAL2B,CAM/B;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACI,SAAKoS,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFa,MAAAA,EAAE,GAAGC,EAAL;AACAA,MAAAA,EAAE,GAAGgB,GAAG,EAAR;AACAgF,MAAAA,YAAY,CAAC,IAAIoN,CAAJ,GAAQ,CAAT,CAAZ;AACA3N,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,MAAAA,QAAQ;AACRyI,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,MAAAA,QAAQ;AACRgJ,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACA3N,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ;AACRqP,MAAAA,QAAQ;AACRrG,MAAAA,YAAY,CAACoN,CAAC,GAAG,CAAL,CAAZ;AACAxoB,MAAAA,MAAM;AACP;;AACD8nB,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGiX,CAAxB,EAA4B,KAAKjX,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+S,MAAAA,OAAO,CAACjN,IAAR,CAAaxb,UAAU,EAAvB;AACD;;AACD,WAAOyoB,OAAP;AACD,GAtCD,CA7ycU,CAq1cV;;;AACA5zB,EAAAA,WAAW,GAAG,qBAASy/B,CAAT,EAAY;AACxB,QAAIA,CAAC,KAAK,CAAV,EAAa;AACX;AACD;;AACD,QAAIp6B,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAClkC,GAAD,CAAtB,EAA6B;AAC3Bm9B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAyL,MAAAA,IAAI;AACJK,MAAAA,MAAM;AACP,KAJD,MAIO,IAAItnB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAChyB,GAAD,CAAtB,EAA6B;AAClCirB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAhY,MAAAA,MAAM;AACN8jB,MAAAA,MAAM;AACP,KAJM,MAIA;AACLzF,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8L,MAAAA,MAAM;AACNY,MAAAA,QAAQ;AACT;;AACDrG,IAAAA,YAAY,CAACuY,CAAD,CAAZ;AACAtY,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,IAAAA,QAAQ;AACRoE,IAAAA,KAAK;AACLpE,IAAAA,QAAQ;;AACR,QAAIuhB,CAAC,GAAG,CAAR,EAAW;AACT,aAAO7gB,MAAM,EAAb;AACD;AACF,GA1BD,CAt1cU,CAk3cV;AAEA;;;AACA9C,EAAAA,IAAI,GAAG,cAASmY,CAAT,EAAY;AACjB,QAAIiS,YAAJ,EAAkB9lB,CAAlB,EAAqBmI,GAArB,EAA0BqL,OAA1B;AACAsS,IAAAA,YAAY,GAAG,CAAf;AACAvf,IAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACAq7B,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKsS,YAAY,GAAG9lB,CAAC,GAAG,CAAnB,EAAsBmI,GAAG,GAAG0L,CAAjC,EAAqC,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAA9D,EAAoE2d,YAAY,GAAG,KAAK3d,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAtG,EAAyG;AACvGwT,MAAAA,OAAO,CAACjN,IAAR,CAAape,IAAI,EAAjB;AACD;;AACD,WAAOqrB,OAAP;AACD,GATD,CAr3cU,CAg4cV;AAEA;AACA;AAEA;AACA;AACA;;;AACAziC,EAAAA,QAAQ,GAAG,oBAAW;AACpBw1B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO2vB,SAAS,EAAhB;AACD,GAJD;;AAMAA,EAAAA,SAAS,GAAG,qBAAW;AACrBqN,IAAAA,IAAI;AACJ6I,IAAAA,KAAK;AACL,WAAOtJ,OAAO,EAAd;AACD,GAJD;;AAMAsJ,EAAAA,KAAK,GAAG,iBAAW;AACjB,QAAIsB,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,KAAK6M,MAAM,CAACpiC,CAAD,CAAjB,EAAsB;AACpB47B,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD;;AACD,QAAIjY,MAAM,CAAC4R,EAAD,EAAK,CAAL,CAAV,EAAmB;AACjBqG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD;;AACD,QAAIjO,gBAAgB,CAAC4H,EAAD,CAApB,EAA0B;AACxB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN5C,MAAAA,SAAS;AACT2K,MAAAA,IAAI,CAACzR,aAAD,CAAJ;;AACA,UAAI5F,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,OAFD,MAEO;AACL2tB,QAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACDykB,MAAAA,QAAQ;AACR1d,MAAAA,GAAG;AACH;AACD;;AACD,QAAImX,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACa,GAAL,CAASzU,EAAE,CAAC2S,CAAZ,CAAJ;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD,KA9BgB,CA+BjB;;;AACA,QAAIxb,UAAU,CAAC6I,EAAD,CAAd,EAAoB;AAClB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAX,MAAAA,UAAS;;AACTlE,MAAAA,SAAS;AACT2K,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA7V,MAAAA,YAAW;;AACXgR,MAAAA,SAAS;AACTuR,MAAAA,QAAQ;AACR;AACD,KAzCgB,CA0CjB;;;AACA,QAAIloB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BgtB,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA8F,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA7E,MAAAA,SAAS;AACTkC,MAAAA,QAAQ;AACR;AACD,KAjDgB,CAkDjB;;;AACA,QAAI7Y,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC8uB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACArG,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA7E,QAAAA,SAAS;AACTxb,QAAAA,GAAG;AACHqgB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD;AACD;;AACDuG,IAAAA,WAAW,CAAChwB,GAAD,CAAX;AACAuvB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GAjED,CAp5cU,CAu9cqB,EAAAA,WAAW,GAAG,uBAAW;AACvByvB,IAAAA,EAAE,GAAG1b,IAAI,CAAC0b,EAAD,CAAT;;AACA,QAAI,CAACrJ,MAAM,CAACqJ,EAAD,CAAP,IAAe1b,IAAI,CAAC0b,EAAD,CAAJ,CAAS4S,CAAT,KAAet3B,GAAlC,EAAuC;AACrC0kB,MAAAA,EAAE,GAAGnN,WAAW,CAACmN,EAAD,CAAhB;AACD;;AACD,WAAO8F,IAAI,CAAC9F,EAAD,CAAX,CALuB,CAKN;AAClB,GAND,CAxkdU,CAildV;AACA;AACA;;;AACAzE,EAAAA,IAAI,GAAG,cAAS8W,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAAC1yB,GAAF,CAAM2yB,CAAN,CAAP;AACD,GAFD;;AAIApV,EAAAA,IAAI,GAAG,cAASmV,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAAC3F,QAAF,CAAW4F,CAAX,CAAP;AACD,GAFD;;AAIApyB,EAAAA,IAAI,GAAG,cAASmyB,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAAC1yB,GAAF,CAAM2yB,CAAN,CAAP;AACD,GAFD;;AAIA9F,EAAAA,IAAI,GAAG,cAAS6F,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAAC3F,QAAF,CAAW4F,CAAX,CAAP;AACD,GAFD,CAhmdU,CAomdV;;;AACAzD,EAAAA,IAAI,GAAG,cAASwD,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAACiT,UAAF,CAAahT,CAAb,CAAP;AACD,GAFD,CArmdU,CAymdV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACArW,EAAAA,IAAI,GAAG,cAAS2nB,CAAT,EAAYU,CAAZ,EAAe;AACpB,WAAOvhC,MAAM,CAACiP,GAAP,CAAW4xB,CAAX,EAAcU,CAAd,CAAP;AACD,GAFD,CA1ndU,CA8ndV;AAEA;;;AACAlmB,EAAAA,UAAU,GAAG,oBAASwW,CAAT,EAAY;AACvB,QAAI2Q,YAAJ;AACAA,IAAAA,YAAY,GAAG,IAAIrnC,CAAJ,EAAf;AACAqnC,IAAAA,YAAY,CAAC3S,CAAb,GAAiBz3B,GAAjB;AACAoqC,IAAAA,YAAY,CAAC7S,GAAb,GAAmBkC,CAAnB;AACA,WAAO2Q,YAAP;AACD,GAND;;AAQA1lB,EAAAA,aAAa,GAAG,yBAAW;AACzB,WAAOwM,IAAI,CAAC,eAAD,CAAX;AACD,GAFD,CAzodU,CA6odV;;;AACA3F,EAAAA,gBAAgB,GAAG,0BAAS+M,CAAT,EAAYC,CAAZ,EAAe;AAChC5N,IAAAA,IAAI,CAAC1lB,YAAY,CAACqzB,CAAC,GAAGC,CAAL,CAAb,CAAJ;AACA1H,IAAAA,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAeZ,MAAf,CAAsBuF,IAAtB,GAA6B,CAA7B;AACAhH,IAAAA,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAeZ,MAAf,CAAsBqF,GAAtB,CAA0B,CAA1B,IAA+BW,CAA/B;AACA,WAAOzH,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAeZ,MAAf,CAAsBqF,GAAtB,CAA0B,CAA1B,IAA+BY,CAAtC;AACD,GALD;;AAOAtN,EAAAA,oBAAoB,GAAG,8BAASgN,CAAT,EAAY;AACjC,QAAIK,CAAJ,EAAOlU,CAAP,EAAUmI,GAAV;AACAhB,IAAAA,gBAAgB,CAAC0M,CAAD,EAAIA,CAAJ,CAAhB;;AACA,SAAKK,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFyM,MAAAA,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAeZ,MAAf,CAAsB9gB,IAAtB,CAA2B8mB,CAAC,GAAGL,CAAJ,GAAQK,CAAnC,IAAwCjU,GAAxC;AACD;;AACD,WAAO9Z,uBAAuB,CAACsmB,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA9B;AACD,GAPD;;AASArI,EAAAA,SAAS,GAAG,mBAAS+N,CAAT,EAAY;AACtB,QAAIhB,OAAJ;AACAA,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBjO,MAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACAhB,MAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,WAAOhB,OAAP;AACD,GARD,CA9pdU,CAwqdV;AACA;AACA;AACA;AACA;;;AACA5kB,EAAAA,KAAK,GAAG,eAAS6R,EAAT,EAAaC,EAAb,EAAiB;AACvB,QAAI3Z,SAAQ,CAAC0Z,EAAD,EAAKC,EAAL,CAAR,KAAqB,CAAzB,EAA4B;AAC1B,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQAlF,EAAAA,KAAK,GAAG,eAASiF,EAAT,EAAaC,EAAb,EAAiB;AACvB,QAAI3Z,SAAQ,CAAC0Z,EAAD,EAAKC,EAAL,CAAR,GAAmB,CAAvB,EAA0B;AACxB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQAuK,EAAAA,IAAI,GAAG,cAAS4I,CAAT,EAAY;AACjB,QAAIA,CAAC,GAAG,CAAR,EAAW;AACT,aAAO,CAAC,CAAR;AACD,KAFD,MAEO,IAAIA,CAAC,GAAG,CAAR,EAAW;AAChB,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARD,CA7rdU,CAusdV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9sB,EAAAA,SAAQ,GAAG,kBAAS0Z,EAAT,EAAaC,EAAb,EAAiB;AAC1B,QAAImT,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIpT,EAAE,KAAKC,EAAX,EAAe;AACb,aAAO,CAAP;AACD;;AACD,QAAID,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB,aAAO,CAAC,CAAR;AACD;;AACD,QAAIuoB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB,aAAO,CAAP;AACD;;AACD,QAAI4d,aAAa,CAAC0K,EAAD,CAAb,IAAqB1K,aAAa,CAAC2K,EAAD,CAAtC,EAA4C;AAC1C,aAAOuK,IAAI,CAACtjB,eAAe,CAAC8Y,EAAD,EAAKC,EAAL,CAAhB,CAAX;AACD;;AACD,QAAI3K,aAAa,CAAC0K,EAAD,CAAjB,EAAuB;AACrB,aAAO,CAAC,CAAR;AACD;;AACD,QAAI1K,aAAa,CAAC2K,EAAD,CAAjB,EAAuB;AACrB,aAAO,CAAP;AACD;;AACD,QAAIpG,KAAK,CAACmG,EAAD,CAAL,IAAanG,KAAK,CAACoG,EAAD,CAAtB,EAA4B;AAC1B,aAAOuK,IAAI,CAAC8B,MAAM,CAACtM,EAAE,CAAC0S,GAAJ,EAASzS,EAAE,CAACyS,GAAZ,CAAP,CAAX;AACD;;AACD,QAAI7Y,KAAK,CAACmG,EAAD,CAAT,EAAe;AACb,aAAO,CAAC,CAAR;AACD;;AACD,QAAInG,KAAK,CAACoG,EAAD,CAAT,EAAe;AACb,aAAO,CAAP;AACD;;AACD,QAAInG,QAAQ,CAACkG,EAAD,CAAR,IAAgBlG,QAAQ,CAACmG,EAAD,CAA5B,EAAkC;AAChC,aAAOuK,IAAI,CAAC8B,MAAM,CAACpZ,aAAa,CAAC8M,EAAD,CAAd,EAAoB9M,aAAa,CAAC+M,EAAD,CAAjC,CAAP,CAAX;AACD;;AACD,QAAInG,QAAQ,CAACkG,EAAD,CAAZ,EAAkB;AAChB,aAAO,CAAC,CAAR;AACD;;AACD,QAAIlG,QAAQ,CAACmG,EAAD,CAAZ,EAAkB;AAChB,aAAO,CAAP;AACD;;AACD,QAAIjG,QAAQ,CAACgG,EAAD,CAAR,IAAgBhG,QAAQ,CAACiG,EAAD,CAA5B,EAAkC;AAChC,aAAO7Y,eAAe,CAAC4Y,EAAD,EAAKC,EAAL,CAAtB;AACD;;AACD,QAAIjG,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChB,aAAO,CAAC,CAAR;AACD;;AACD,QAAIhG,QAAQ,CAACiG,EAAD,CAAZ,EAAkB;AAChB,aAAO,CAAP;AACD,KA/CyB,CAgD1B;;;AACA,WAAOtJ,MAAM,CAACqJ,EAAD,CAAN,IAAcrJ,MAAM,CAACsJ,EAAD,CAA3B,EAAiC;AAC/BmT,MAAAA,CAAC,GAAG9sB,SAAQ,CAAC9B,GAAG,CAACwb,EAAD,CAAJ,EAAUxb,GAAG,CAACyb,EAAD,CAAb,CAAZ;;AACA,UAAImT,CAAC,KAAK,CAAV,EAAa;AACX,eAAOA,CAAP;AACD;;AACDpT,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAC,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACD,QAAItJ,MAAM,CAACsJ,EAAD,CAAV,EAAgB;AACd,aAAO,CAAC,CAAR;AACD;;AACD,QAAItJ,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACd,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAhED;;AAkEAlF,EAAAA,MAAM,GAAG,gBAASiZ,CAAT,EAAY;AACnB,QAAIX,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAOzc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAX,MAAAA,CAAC;AACF;;AACD,WAAOA,CAAP;AACD,GARD;;AAUArE,EAAAA,MAAM,GAAG,gBAASgF,CAAT,EAAY;AACnBvL,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAG6M,MAAM,CAACn1B,GAAD,CAAX;AACAuoB,IAAAA,EAAE,GAAG4M,MAAM,CAACn1B,GAAD,CAAX;;AACAs3B,IAAAA,SAAQ,CAAC+E,CAAD,CAAR;;AACA,QAAI9T,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtBsoB,MAAAA,EAAE,GAAG6M,MAAM,CAACn1B,GAAD,CAAX;AACD;;AACDq8B,IAAAA,CAAC,GAAG/T,EAAJ;AACA+H,IAAAA,OAAO;AACP,WAAOgM,CAAP;AACD,GAXD;;AAaA/E,EAAAA,SAAQ,GAAG,kBAAS+E,CAAT,EAAY;AACrB,QAAIla,KAAK,CAACka,CAAD,CAAT,EAAc;AACZ,UAAI/T,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtBsoB,QAAAA,EAAE,GAAG+T,CAAL;AACD,OAFD,MAEO,IAAIA,CAAC,KAAK/T,EAAV,EAAc;AACnBC,QAAAA,EAAE,GAAG8T,CAAL;AACD;;AACD;AACD;;AACD,WAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB/E,MAAAA,SAAQ,CAACxqB,GAAG,CAACuvB,CAAD,CAAJ,CAAR;;AACA,UAAI9T,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB;AACD;;AACDq8B,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,GAhBD;;AAkBAhI,EAAAA,KAAK,GAAG,iBAAW;AACjBzF,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA,WAAO7E,KAAK,EAAZ;AACD,GAHD;;AAKAoP,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIyN,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACA3jB,IAAAA,IAAI;AACJ,WAAO2jB,SAAS,GAAGmvB,cAAnB;AACD,GAND;;AAQAjvB,EAAAA,WAAW,GAAG,uBAAW;AACvBkX,IAAAA,WAAW,CAAC97B,CAAD,CAAX;AACAmiC,IAAAA,IAAI;AACJ,WAAOnL,KAAK,EAAZ;AACD,GAJD;;AAMAqK,EAAAA,MAAM,GAAG,kBAAW;AAClBzF,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACA,WAAO5E,KAAK,EAAZ;AACD,GAHD,CAl1dU,CAu1dV;AACA;AAEA;;;AACAoK,EAAAA,UAAU,GAAG,oBAASuH,CAAT,EAAY;AACvB,QAAIF,CAAJ,EAAO2B,aAAP,CADuB,CAEvB;;AACA3B,IAAAA,CAAC,GAAG7E,GAAG,GAAG+E,CAAV;AACAyB,IAAAA,aAAa,GAAG7I,KAAK,CAAC8I,KAAN,CAAY5B,CAAZ,EAAeA,CAAC,GAAGE,CAAnB,CAAhB;AACAyB,IAAAA,aAAa,CAACE,IAAd,CAAmBzuB,SAAnB;AACA,WAAO0lB,KAAK,GAAGA,KAAK,CAAC8I,KAAN,CAAY,CAAZ,EAAe5B,CAAf,EAAkB8B,MAAlB,CAAyBH,aAAzB,EAAwCG,MAAxC,CAA+ChJ,KAAK,CAAC8I,KAAN,CAAY5B,CAAC,GAAGE,CAAhB,CAA/C,CAAf;AACD,GAPD;;AASAptC,EAAAA,CAAC,CAACmoB,KAAF,GAAUA,KAAV;AAEAnoB,EAAAA,CAAC,CAAC80B,MAAF,GAAWA,MAAX,CAt2dU,CAw2dV;;AACAuB,EAAAA,IAAI,GAAG,cAASgW,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAAChV,QAAF,CAAWiV,CAAX,CAAP;AACD,GAFD;;AAIAxW,EAAAA,IAAI,GAAG,cAASuW,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAACpnB,MAAF,CAASqnB,CAAT,CAAP;AACD,GAFD,CA72dU,CAi3dV;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMElW,EAAAA,IAAI,GAAG,cAASiW,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAAC/V,GAAF,CAAMgW,CAAN,CAAP;AACD,GAFD,CA95dU,CAk6dV;AACA;AACA;;;AACAvW,EAAAA,OAAO,GAAG,iBAASsW,CAAT,EAAYC,CAAZ,EAAe;AACvB,QAAIkT,QAAJ;AACAA,IAAAA,QAAQ,GAAGnT,CAAC,CAAC2K,MAAF,CAAS1K,CAAT,CAAX;AACA,WAAO,CAACkT,QAAQ,CAACvI,QAAV,EAAoBuI,QAAQ,CAACtI,SAA7B,CAAP;AACD,GAJD,CAr6dU,CA26dV;AAEA;;;AACA1sC,EAAAA,QAAQ,GAAG,oBAAW;AACpBs1B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO8wB,GAAG,EAAV;AACD,GAND;;AAQAA,EAAAA,GAAG,GAAG,eAAW;AACf,QAAI8W,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIxL,kBAAkB,CAACoK,EAAD,CAAtB,EAA4B;AAC1BoM,MAAAA,IAAI,CAAC,8BAAD,CAAJ;AACD;;AACD,QAAI,CAAC/W,aAAa,CAAC0K,EAAD,CAAd,IAAsB,CAAC1K,aAAa,CAAC2K,EAAD,CAAxC,EAA8C;AAC5CsG,MAAAA,WAAW,CAAClvB,GAAD,CAAX;AACAyuB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACD,QAAIjR,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAoT,MAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,UAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ/G,QAAAA,IAAI,CAAC,qDAAD,CAAJ;AACD;;AACDhG,MAAAA,YAAY,CAAC+M,CAAD,CAAZ;AACApT,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACD,QAAIvK,QAAQ,CAACmJ,EAAD,CAAZ,EAAkB;AAChB6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,MAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,UAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ/G,QAAAA,IAAI,CAAC,qDAAD,CAAJ;AACD;;AACDhG,MAAAA,YAAY,CAAC+M,CAAD,CAAZ;AACAnT,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACD;;AACD,QAAI,CAAC5J,SAAS,CAACuI,EAAD,CAAV,IAAkB,CAACvI,SAAS,CAACwI,EAAD,CAAhC,EAAsC;AACpCoM,MAAAA,IAAI,CAAC,0CAAD,CAAJ;AACD;;AACDnM,IAAAA,EAAE,GAAG,IAAIhiB,CAAJ,EAAL;AACAgiB,IAAAA,EAAE,CAAC0S,CAAH,GAAOx6B,GAAP;AACA8nB,IAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAASjW,IAAI,CAAC4D,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASpS,EAAE,CAACuS,CAAH,CAAKH,CAAd,CAAb;AACAnS,IAAAA,EAAE,CAACsS,CAAH,CAAKF,CAAL,GAASnW,IAAI,CAAC,CAAD,CAAb;AACA2J,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,WAAO6H,OAAO,EAAd;AACD,GA5CD,CAt7dU,CAo+dV;AAEA;;;AACAjL,EAAAA,IAAI,GAAG,cAASuV,CAAT,EAAYe,CAAZ,EAAe;AACpB,WAAOf,CAAC,CAAC+D,GAAF,CAAMhD,CAAN,CAAP;AACD,GAFD,CAv+dU,CA2+dV;AAEA;AAEA;AACA;;;AACArW,EAAAA,MAAM,GAAG,gBAASqW,CAAT,EAAY;AACnB,WAAOA,CAAC,CAACqS,eAAF,EAAP;AACD,GAFD,CAj/dU,CAq/dV;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACAzoB,EAAAA,KAAK,GAAG,eAASoW,CAAT,EAAYsS,KAAZ,EAAmB;AACzB,QAAIjS,CAAJ,EAAOC,CAAP,EAAUd,CAAV,EAAarT,CAAb,EAAgBmI,GAAhB,EAAqBoM,CAArB,EAAwBiI,CAAxB,CADyB,CAEzB;AACA;AAEA;;AACA3I,IAAAA,CAAC,GAAGA,CAAC,CAAC7zB,GAAF,EAAJ;AACAk0B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI8S,KAAK,KAAK,CAAd,EAAiB;AACfrZ,MAAAA,IAAI,CAAC,oBAAD,CAAJ;AACD,KAZwB,CAazB;;;AACAuG,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAOQ,CAAC,CAACyK,UAAF,CAAajL,CAAb,IAAkB,CAAzB,EAA4B;AAC1BA,MAAAA,CAAC;AACF;;AACD,QAAIA,CAAC,KAAK,CAAV,EAAa;AACX,aAAOzW,IAAI,CAAC,CAAD,CAAX;AACD,KApBwB,CAqBzB;;;AACAyW,IAAAA,CAAC,GAAGgB,IAAI,CAACmD,KAAL,CAAW,CAACnE,CAAC,GAAG,CAAL,IAAU8S,KAArB,CAAJ;AACAhS,IAAAA,CAAC,GAAGE,IAAI,CAACmD,KAAL,CAAWnE,CAAC,GAAG,EAAJ,GAAS,CAApB,CAAJ;AACAkB,IAAAA,CAAC,GAAG/wB,MAAM,CAAC2wB,CAAD,CAAV;;AACA,SAAKD,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAGgM,CAAtB,EAA0B,KAAKhM,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjF;AACAuU,MAAAA,CAAC,GAAGA,CAAC,CAAC6R,GAAF,CAAM5iC,MAAM,CAAC,CAAD,CAAN,CAAU6iC,SAAV,CAAoBnS,CAApB,EAAuBoS,GAAvB,EAAN,CAAJ;AACD;;AACD,WAAOjT,CAAC,IAAI,CAAZ,EAAe;AACb;AACAkB,MAAAA,CAAC,GAAGA,CAAC,CAACgS,EAAF,CAAK/iC,MAAM,CAAC,CAAD,CAAN,CAAU6iC,SAAV,CAAoBhT,CAApB,CAAL,CAAJ;AACAmJ,MAAAA,CAAC,GAAGjf,IAAI,CAACgX,CAAD,EAAI4R,KAAJ,CAAR;;AACA,cAAQ9pB,IAAI,CAACmgB,CAAD,EAAI3I,CAAJ,CAAZ;AACE,aAAK,CAAL;AACE,iBAAOU,CAAP;;AACF,aAAK,CAAL;AACE;AACA;AACAA,UAAAA,CAAC,GAAGA,CAAC,CAAC6R,GAAF,CAAM5iC,MAAM,CAAC,CAAD,CAAN,CAAU6iC,SAAV,CAAoBhT,CAApB,EAAuBiT,GAAvB,EAAN,CAAJ;AANJ;;AAQAjT,MAAAA,CAAC;AACF;;AACD,WAAO,CAAP;AACD,GA5CD,CAhgeU,CA8ieV;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACAxpC,EAAAA,cAAc,GAAG,KAAjB;;AAEAqH,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIsiC,OAAJ;AACAjN,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG/a,IAAI,CAAC+a,EAAD,CAAT;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJ6xB,MAAAA,QAAQ;AACR0V,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAbD,CA9jeU,CA6keV;AACA;AACA;;;AACA1V,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI7O,QAAJ,EAAc;AACZ6d,MAAAA,IAAI,CAAC,iBAAD,CAAJ;AACD;;AACD,QAAI/W,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAb,IAAiC/Y,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAlD,EAAoE;AAClE,aAAOxQ,gBAAgB,EAAvB;AACD,KAFD,MAEO;AACL2K,MAAAA,IAAI;AACJ8I,MAAAA,UAAU;AACV,aAAOvJ,OAAO,EAAd;AACD;AACF,GAXD;;AAaAuJ,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAI4B,CAAJ,EAAOO,CAAP,EAAUL,CAAV,EAAa7T,CAAb,EAAgBmI,GAAhB,EAAqBC,IAArB;AACAuL,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ,CAJsB,CAKtB;;AACAnT,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA6R,IAAAA,CAAC,GAAG7E,GAAJ,CARsB,CAStB;;AACA,QAAIzY,UAAU,CAACoK,EAAD,CAAV,IAAkBpK,UAAU,CAACqK,EAAD,CAAhC,EAAsC;AACpC,UAAIxR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD;AACD,KAjBqB,CAkBtB;AAEA;;;AACA,QAAI5iB,SAAS,IAAIkH,KAAK,CAAC2J,EAAD,CAAtB,EAA4B;AAC1BA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,UAAIvR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD,aAAOpb,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,QAAAA,QAAQ;AACR1d,QAAAA,GAAG;AACHqgB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD;AACD;;AACD,QAAI7Q,SAAS,IAAIkH,KAAK,CAAC4J,EAAD,CAAtB,EAA4B;AAC1BA,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;;AACA,UAAIxR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,CAACiM,IAAD,CAAJ;AACD;;AACD,aAAOpb,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjB6F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACA5C,QAAAA,QAAQ;AACR1d,QAAAA,GAAG;AACHsgB,QAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACD;AACD;;AACD,QAAI,CAACjG,QAAQ,CAACgG,EAAD,CAAT,IAAiBhG,QAAQ,CAACiG,EAAD,CAA7B,EAAmC;AACjC6F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAyI,MAAAA,mBAAmB;AACnB;AACD,KA1DqB,CA2DtB;;;AACA,QAAI1O,QAAQ,CAACgG,EAAD,CAAR,IAAgB,CAAChG,QAAQ,CAACiG,EAAD,CAA7B,EAAmC;AACjC6F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA0N,MAAAA,mBAAmB;AACnB;AACD,KAjEqB,CAkEtB;;;AACA,QAAInpB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD,KAFD,MAEO;AACL8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA+E,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACD,QAAI7c,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChC0oB,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD,KAFD,MAEO;AACL6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACAgF,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACD,KAhFqB,CAiFtB;;;AACA,QAAI/L,aAAa,CAAC9Q,GAAG,CAACwb,EAAD,CAAJ,CAAb,IAA0B1K,aAAa,CAAC9Q,GAAG,CAACyb,EAAD,CAAJ,CAA3C,EAAsD;AACpD6F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,MAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACApC,MAAAA,gBAAgB;AAChBmC,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAC,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD,KAND,MAMO,IAAI3K,aAAa,CAAC9Q,GAAG,CAACwb,EAAD,CAAJ,CAAjB,EAA4B;AACjC8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD,KAHM,MAGA,IAAI1K,aAAa,CAAC9Q,GAAG,CAACyb,EAAD,CAAJ,CAAjB,EAA4B;AACjC6F,MAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD,KAHM,MAGA;AACL,UAAIxR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD;AACF;;AACDmB,IAAAA,QAAQ;AACRC,IAAAA,QAAQ;;AACR,WAAOjK,MAAM,CAACqJ,EAAD,CAAN,IAAcrJ,MAAM,CAACsJ,EAAD,CAA3B,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIrc,IAAI,CAACoc,EAAD,CAAJ,KAAa6M,MAAM,CAACt0B,QAAD,CAAnB,IAAiCqL,IAAI,CAACqc,EAAD,CAAJ,KAAa4M,MAAM,CAACt0B,QAAD,CAAxD,EAAoE;AAClEguB,QAAAA,WAAW,CAAChuB,QAAD,CAAX;AACAutB,QAAAA,IAAI,CAACnhB,IAAI,CAACqb,EAAD,CAAL,CAAJ;AACA8F,QAAAA,IAAI,CAACnhB,IAAI,CAACsb,EAAD,CAAL,CAAJ;AACA8lB,QAAAA,MAAM;AACNr+B,QAAAA,IAAI;AACJsY,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAC,QAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACAU,QAAAA,QAAQ;AACRC,QAAAA,QAAQ;AACR;AACD;;AACD,cAAQta,SAAQ,CAAC4Z,EAAD,EAAKC,EAAL,CAAhB;AACE,aAAK,CAAC,CAAN;AACE2F,UAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,UAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAW,UAAAA,QAAQ;AACR;;AACF,aAAK,CAAL;AACEmF,UAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACAA,UAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACAW,UAAAA,QAAQ;AACR;;AACF,aAAK,CAAL;AACE9Z,UAAAA,eAAe,CAACosB,CAAD,CAAf;AACAlT,UAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAC,UAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACAU,UAAAA,QAAQ;AACRC,UAAAA,QAAQ;AACR;;AACF;AACEyL,UAAAA,IAAI,CAAC,kBAAD,CAAJ;AAnBJ;AAqBD,KAjJqB,CAkJtB;;;AACA,WAAO1V,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAOrJ,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjB6F,MAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD,KA1JqB,CA2JtB;AAEA;AAEA;AAEA;;;AACA7gB,IAAAA,2BAA2B,CAAC8zB,CAAD,CAA3B,CAlKsB,CAmKtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI/jB,SAAJ,EAAe;AACb,WAAKskB,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGwL,CAAd,EAAiBvL,IAAI,GAAG0G,GAA7B,EAAmC3G,GAAG,IAAIC,IAAP,GAAcpI,CAAC,GAAGoI,IAAlB,GAAyBpI,CAAC,GAAGoI,IAAhE,EAAuE8L,CAAC,GAAG/L,GAAG,IAAIC,IAAP,GAAc,EAAEpI,CAAhB,GAAoB,EAAEA,CAAjG,EAAoG;AAClG,YAAIlJ,KAAK,CAAC2V,KAAK,CAACyH,CAAD,CAAN,CAAT,EAAqB;AACnBnW,UAAAA,YAAY,CAAC+Q,GAAG,GAAG6E,CAAP,CAAZ;AACA;AACD;AACF;AACF,KAlLqB,CAmLtB;;;AACAE,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;;AACA,QAAIE,CAAC,KAAK,CAAV,EAAa;AACX;AACD,KAvLqB,CAwLtB;;;AACA,QAAI3Z,UAAU,CAACuS,KAAK,CAACkH,CAAD,CAAN,CAAV,IAAwB9kB,MAAM,CAAC4d,KAAK,CAACkH,CAAD,CAAN,EAAW,CAAX,CAAlC,EAAiD;AAC/C,UAAIE,CAAC,KAAK,CAAV,EAAa;AACX9S,QAAAA,EAAE,GAAGe,GAAG,EAAR;AACAA,QAAAA,GAAG;AACHyE,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACD,OAJD,MAIO;AACL0L,QAAAA,KAAK,CAACkH,CAAD,CAAL,GAAWrG,MAAM,CAACt1B,QAAD,CAAjB;AACA0jB,QAAAA,IAAI,CAACmY,CAAD,CAAJ;AACD;;AACD;AACD;;AACDnY,IAAAA,IAAI,CAACmY,CAAD,CAAJ;AACA9S,IAAAA,EAAE,GAAGe,GAAG,EAAR;AACAkF,IAAAA,WAAW,CAAChvB,QAAD,CAAX;AACAuuB,IAAAA,IAAI,CAACxF,EAAD,CAAJ;AACA,WAAO5Y,IAAI,EAAX;AACD,GAzMD,CA7leU,CAwyeV;AAEA;AAEA;AAEA;;;AACAiZ,EAAAA,QAAQ,GAAG,oBAAW;AACpBT,IAAAA,EAAE,GAAG1b,GAAG,CAACwb,EAAD,CAAR;AACAI,IAAAA,EAAE,GAAG3R,kBAAkB,GAAGiR,aAAH,GAAmBF,GAA1C;;AACA,QAAIhb,GAAG,CAAC0b,EAAD,CAAH,KAAY2M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BsnB,MAAAA,EAAE,GAAG/b,KAAK,CAAC6b,EAAD,CAAV;AACA,aAAOA,EAAE,GAAG5b,IAAI,CAAC4b,EAAD,CAAhB;AACD;AACF,GAPD,CA/yeU,CAwzeV;AAEA;AAEA;AAEA;;;AACAU,EAAAA,QAAQ,GAAG,oBAAW;AACpBT,IAAAA,EAAE,GAAG3b,GAAG,CAACyb,EAAD,CAAR;AACAI,IAAAA,EAAE,GAAG5R,kBAAkB,GAAGiR,aAAH,GAAmBF,GAA1C;;AACA,QAAIhb,GAAG,CAAC2b,EAAD,CAAH,KAAY0M,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7BunB,MAAAA,EAAE,GAAGhc,KAAK,CAAC8b,EAAD,CAAV;AACA,aAAOA,EAAE,GAAG7b,IAAI,CAAC6b,EAAD,CAAhB;AACD;AACF,GAPD,CA/zeU,CAw0eV;;;AACArZ,EAAAA,eAAe,GAAG,yBAASosB,CAAT,EAAY;AAC5BpN,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,IAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,IAAAA,IAAI,CAACzF,EAAD,CAAJ;AACA1gB,IAAAA,GAAG;AACH8hB,IAAAA,KAAK;AACLnB,IAAAA,EAAE,GAAGe,GAAG,EAAR;;AACA,QAAI/L,aAAa,CAACgL,EAAD,CAAjB,EAAuB;AACrBwF,MAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAD,CAAN,CAAJ;AACApN,MAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAzC,MAAAA,gBAAgB;AAChB,aAAOmO,KAAK,CAACkH,CAAD,CAAL,GAAW7R,GAAG,EAArB;AACD,KALD,MAKO,IAAI7c,GAAG,CAAC8b,EAAD,CAAH,KAAYuM,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AACvC;AACA,UAAI+d,aAAa,CAAChR,IAAI,CAACgc,EAAD,CAAL,CAAb,IAA2Btb,KAAK,CAACsb,EAAD,CAAL,KAAcuM,MAAM,CAACn1B,GAAD,CAAnD,EAA0D;AACxDouB,QAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAD,CAAN,CAAJ;AACApN,QAAAA,IAAI,CAACxhB,IAAI,CAACgc,EAAD,CAAL,CAAJ;AACAzC,QAAAA,gBAAgB;AAChBmO,QAAAA,KAAK,CAACkH,CAAD,CAAL,GAAW7R,GAAG,EAAd;AACA,eAAOyE,IAAI,CAACzhB,KAAK,CAACic,EAAD,CAAN,CAAX;AACD,OAND,MAMO;AACL,eAAOwF,IAAI,CAACxF,EAAD,CAAX;AACD;AACF,KAXM,MAWA;AACL,aAAOwF,IAAI,CAACxF,EAAD,CAAX;AACD;AACF,GA1BD;;AA4BA/M,EAAAA,EAAE,GAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAD,EAAsD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,CAAtD,EAA2G,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAC,CAAvB,EAA0B,CAAC,CAA3B,EAA8B,CAAC,CAA/B,EAAkC,EAAlC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,CAAC,EAA/C,EAAmD,CAAnD,EAAsD,EAAtD,EAA0D,EAA1D,EAA8D,CAAC,EAA/D,CAA3G,EAA+K,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,EAAf,EAAmB,EAAnB,EAAuB,CAAC,CAAxB,EAA2B,CAAC,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,CAAC,CAAzC,EAA4C,CAA5C,EAA+C,CAAC,CAAhD,EAAmD,EAAnD,EAAuD,CAAC,CAAxD,EAA2D,CAA3D,EAA8D,CAAC,EAA/D,CAA/K,EAAmP,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB,EAAsB,EAAtB,EAA0B,CAAC,CAA3B,EAA8B,CAAC,EAA/B,EAAmC,CAAnC,EAAsC,EAAtC,EAA0C,CAAC,CAA3C,EAA8C,CAAC,EAA/C,EAAmD,CAAnD,EAAsD,EAAtD,EAA0D,CAAC,CAA3D,EAA8D,CAAC,EAA/D,CAAnP,EAAuT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,EAAX,EAAe,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAC,EAAvB,EAA2B,EAA3B,EAA+B,CAAC,CAAhC,EAAmC,CAAC,CAApC,EAAuC,CAAvC,EAA0C,EAA1C,EAA8C,CAAC,EAA/C,EAAmD,CAAC,CAApD,EAAuD,CAAvD,EAA0D,EAA1D,EAA8D,CAAC,EAA/D,CAAvT,EAA2X,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,CAAC,EAAlB,EAAsB,CAAtB,EAAyB,EAAzB,EAA6B,CAAC,EAA9B,EAAkC,EAAlC,EAAsC,CAAC,CAAvC,EAA0C,CAA1C,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,CAAC,CAAtD,EAAyD,CAAzD,EAA4D,CAA5D,CAA3X,EAA2b,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,EAAX,EAAe,CAAf,EAAkB,EAAlB,EAAsB,CAAC,EAAvB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,EAApC,EAAwC,CAAC,CAAzC,EAA4C,EAA5C,EAAgD,CAAhD,EAAmD,EAAnD,EAAuD,CAAC,CAAxD,EAA2D,EAA3D,CAA3b,EAA2f,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,CAAC,EAAf,EAAmB,CAAnB,EAAsB,EAAtB,EAA0B,CAAC,CAA3B,EAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAArC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,CAAC,CAAjD,EAAoD,CAApD,EAAuD,EAAvD,EAA2D,EAA3D,CAA3f,EAA2jB,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,CAAC,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,EAA0B,CAAC,CAA3B,EAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAAC,EAAtC,EAA0C,EAA1C,EAA8C,CAAC,CAA/C,EAAkD,CAAC,CAAnD,EAAsD,CAAC,EAAvD,EAA2D,EAA3D,EAA+D,CAAC,CAAhE,CAA3jB,EAA+nB,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,EAAc,EAAd,EAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,EAAzB,EAA6B,CAAC,CAA9B,EAAiC,EAAjC,EAAqC,CAAC,CAAtC,EAAyC,CAAC,CAA1C,EAA6C,CAAC,CAA9C,EAAiD,EAAjD,EAAqD,CAAC,CAAtD,EAAyD,CAAC,EAA1D,EAA8D,CAAC,CAA/D,CAA/nB,EAAksB,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAC,CAAZ,EAAe,CAAf,EAAkB,EAAlB,EAAsB,CAAC,CAAvB,EAA0B,CAA1B,EAA6B,EAA7B,EAAiC,CAAC,EAAlC,EAAsC,CAAtC,EAAyC,CAAC,CAA1C,EAA6C,CAAC,CAA9C,EAAiD,CAAC,EAAlD,EAAsD,EAAtD,EAA0D,CAAC,CAA3D,EAA8D,CAAC,CAA/D,CAAlsB,EAAqwB,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAC,CAAZ,EAAe,CAAC,EAAhB,EAAoB,CAAC,EAArB,EAAyB,CAAC,EAA1B,EAA8B,CAAC,EAA/B,EAAmC,CAAC,EAApC,EAAwC,CAAC,CAAzC,EAA4C,CAAC,CAA7C,EAAgD,CAAC,CAAjD,EAAoD,CAApD,EAAuD,CAAC,CAAxD,EAA2D,CAAC,CAA5D,EAA+D,CAAC,CAAhE,EAAmE,CAAnE,CAArwB,EAA40B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,EAAX,EAAe,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAC,EAAvB,EAA2B,CAA3B,EAA8B,CAAC,CAA/B,EAAkC,CAAC,CAAnC,EAAsC,CAAC,EAAvC,EAA2C,EAA3C,EAA+C,CAA/C,EAAkD,CAAC,CAAnD,EAAsD,CAAC,EAAvD,EAA2D,EAA3D,EAA+D,CAA/D,CAA50B,EAA+4B,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAC,CAAZ,EAAe,CAAC,EAAhB,EAAoB,CAApB,EAAuB,CAAC,CAAxB,EAA2B,CAAC,EAA5B,EAAgC,CAAhC,EAAmC,EAAnC,EAAuC,CAAC,CAAxC,EAA2C,CAAC,EAA5C,EAAgD,CAAhD,EAAmD,EAAnD,EAAuD,CAAC,CAAxD,EAA2D,CAAC,CAA5D,EAA+D,CAA/D,CAA/4B,EAAk9B,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,EAAnB,EAAuB,CAAvB,EAA0B,CAAC,CAA3B,EAA8B,CAAC,EAA/B,EAAmC,CAAC,EAApC,EAAwC,EAAxC,EAA4C,CAAC,CAA7C,EAAgD,CAAhD,EAAmD,CAAC,EAApD,EAAwD,CAAxD,EAA2D,CAAC,CAA5D,EAA+D,CAA/D,CAAl9B,EAAqhC,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,CAAC,CAAnC,EAAsC,CAAC,CAAvC,EAA0C,CAAC,CAA3C,EAA8C,CAAC,CAA/C,EAAkD,CAAC,CAAnD,EAAsD,CAAC,CAAvD,EAA0D,CAAC,CAA3D,EAA8D,CAAC,CAA/D,CAArhC,CAAL,CAr2eU,CAu2eV;AAEA;;AACAxM,EAAAA,cAAc,GAAG,wBAASmsB,CAAT,EAAY;AAC3B,QAAIE,CAAJ;AACAA,IAAAA,CAAC,GAAG7f,EAAE,CAACqgB,IAAI,CAACmD,KAAL,CAAW/W,EAAE,CAACnO,KAAd,CAAD,CAAF,CAAyB+hB,IAAI,CAACmD,KAAL,CAAW9W,EAAE,CAACpO,KAAd,CAAzB,CAAJ;;AACA,QAAIuhB,CAAC,GAAG,CAAR,EAAW;AACTA,MAAAA,CAAC,GAAG,CAACA,CAAL;AACAtN,MAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAD,CAAN,CAAJ;AACAnV,MAAAA,MAAM;AACNiO,MAAAA,KAAK,CAACkH,CAAD,CAAL,GAAW7R,GAAG,EAAd;AACD;;AACD,QAAI+R,CAAC,GAAG,CAAR,EAAW;AACT,aAAOtN,IAAI,CAACkgB,MAAM,CAAC5S,CAAD,CAAP,CAAX;AACD;AACF,GAZD,CA12eU,CAw3eV;AACA;AACA;AACA;AACA;;;AACAxV,EAAAA,iBAAiB,GAAG,6BAAW;AAC7B,QAAI0gB,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACAkO,IAAAA,QAAQ;AACR,WAAOlO,SAAS,GAAGmvB,cAAnB;AACD,GAND,CA73eU,CAq4eV;AAEA;;;AACAhhB,EAAAA,YAAY,GAAG,sBAAS8V,CAAT,EAAY;AACzB,QAAIF,CAAJ,EAAOO,CAAP,EAAUlU,CAAV,EAAamI,GAAb;AACA+L,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIL,CAAC,KAAK,CAAV,EAAa;AACX;AACD;;AACD,QAAIA,CAAC,KAAK,CAAV,EAAa;AACXtN,MAAAA,IAAI,CAACrX,kBAAkB,GAAGiR,aAAH,GAAmBF,GAAtC,CAAJ;AACA;AACD;;AACD0T,IAAAA,CAAC,GAAG7E,GAAG,GAAG+E,CAAV;AACAtN,IAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAD,CAAN,CAAJ;;AACA,SAAKO,CAAC,GAAGlU,CAAC,GAAG,CAAR,EAAWmI,GAAG,GAAG0L,CAAtB,EAA0B,KAAK1L,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAnD,EAAyD+L,CAAC,GAAG,KAAK/L,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAAhF,EAAmF;AACjFuG,MAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAN,CAAJ;AACApW,MAAAA,QAAQ;AACT;;AACD2O,IAAAA,KAAK,CAACkH,CAAD,CAAL,GAAW7R,GAAG,EAAd;AACA,WAAO5E,OAAO,CAACyW,CAAC,GAAG,CAAL,CAAd;AACD,GAlBD,CAx4eU,CA45eV;;;AACA3V,EAAAA,qBAAqB,GAAG,+BAAS6V,CAAT,EAAY;AAClC,QAAIkL,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACAmO,IAAAA,YAAY,CAAC8V,CAAD,CAAZ;AACA,WAAOjkB,SAAS,GAAGmvB,cAAnB;AACD,GAND,CA75eU,CAq6eV;AAEA;AAEA;AAEA;AAEA;;;AACArzB,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIqK,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAb,IAAiC/Y,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAlD,EAAoE;AAClE,aAAOnjB,cAAc,EAArB;AACD,KAFD,MAEO;AACLgK,MAAAA,OAAO;AACP,aAAOmI,QAAQ,EAAf;AACD;AACF,GAPD,CA96eU,CAu7eV;;;AACAnI,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAII,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAjB,EAAmC;AACjC,aAAOlZ,aAAa,EAApB;AACD,KAFD,MAEO;AACLkR,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA,aAAO5E,KAAK,EAAZ;AACD;AACF,GAPD;;AASA6F,EAAAA,WAAW,GAAG,uBAAW;AACvB,WAAOpS,OAAO,EAAd;AACD,GAFD;;AAIA6I,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIzI,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAjB,EAAmC;AACjC,aAAOnQ,aAAa,EAApB;AACD,KAFD,MAEO;AACL,UAAIzP,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,CAAC,GAAF,CAAX;AACD,OAFD,MAEO;AACLI,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACD;;AACD,aAAOhJ,QAAQ,EAAf;AACD;AACF,GAXD;;AAaAW,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIsgB,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACA4O,IAAAA,MAAM;AACN,WAAO5O,SAAS,GAAGmvB,cAAnB;AACD,GAND;;AAQArgB,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIqgB,cAAJ;AACAA,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACA4O,IAAAA,MAAM;AACN,WAAO5O,SAAS,GAAGmvB,cAAnB;AACD,GAND,CA19eU,CAk+eV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;;;AACAl/B,EAAAA,2BAA2B,GAAG,qCAAS8zB,CAAT,EAAY;AACxC,QAAIO,CAAJ,EAAOtf,EAAP,EAAWmG,EAAX,EAAeiF,CAAf,EAAkBmI,GAAlB,EAAuBC,IAAvB,EAA6ByN,IAA7B,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+CC,IAA/C;AACA9B,IAAAA,CAAC,GAAG,CAAJ,CAFwC,CAGxC;;AACA,QAAI7a,SAAS,CAACoT,KAAK,CAACkH,CAAD,CAAN,CAAT,IAAuBpb,UAAU,CAACkU,KAAK,CAACkH,CAAD,CAAN,CAAjC,IAA+Cpc,QAAQ,CAACkV,KAAK,CAACkH,CAAD,CAAN,CAA3D,EAAuE;AACrE;AACD,KANuC,CAO5C;;;AACI,SAAKO,CAAC,GAAGlU,CAAC,GAAGmI,GAAG,GAAGwL,CAAC,GAAG,CAAlB,EAAqBvL,IAAI,GAAG0G,GAAjC,EAAuC3G,GAAG,IAAIC,IAAP,GAAcpI,CAAC,GAAGoI,IAAlB,GAAyBpI,CAAC,GAAGoI,IAApE,EAA2E8L,CAAC,GAAG/L,GAAG,IAAIC,IAAP,GAAc,EAAEpI,CAAhB,GAAoB,EAAEA,CAArG,EAAwG;AACtG,UAAIxgB,mBAAmB,CAACitB,KAAK,CAACyH,CAAD,CAAN,CAAvB,EAAmC;AACjC;AACD;AACF;;AACD,QAAIA,CAAC,KAAKpF,GAAV,EAAe;AACb;AACD,KAfuC,CAgBxC;;;AACA7F,IAAAA,IAAI,GAjBoC,CAkBxC;;AACA1C,IAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAD,CAAN,CAAJ;AACAtW,IAAAA,YAAY;;AACZ,QAAIxzB,cAAJ,EAAoB;AAClBmrC,MAAAA,OAAO,CAACE,GAAR,CAAY,4CAA4CzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA7D;AACD;;AACDrO,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,SAAKoS,CAAC,GAAGtf,EAAE,GAAGihB,IAAI,GAAGlC,CAAC,GAAG,CAApB,EAAuBmC,IAAI,GAAGhH,GAAnC,EAAyC+G,IAAI,IAAIC,IAAR,GAAelhB,EAAE,GAAGkhB,IAApB,GAA2BlhB,EAAE,GAAGkhB,IAAzE,EAAgF5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAElhB,EAAjB,GAAsB,EAAEA,EAA5G,EAAgH;AAC9G,UAAIyE,SAAS,CAACoH,EAAD,CAAT,IAAiBlI,UAAU,CAACkI,EAAD,CAA/B,EAAqC;AAAE;AACrC;AACD;;AACD,UAAI,CAACjhB,mBAAmB,CAACitB,KAAK,CAACyH,CAAD,CAAN,CAAxB,EAAoC;AAClC;AACD;;AACDvT,MAAAA,EAAE,GAAG5b,IAAI,CAAC0nB,KAAK,CAACyH,CAAD,CAAN,CAAT;AACAtT,MAAAA,EAAE,GAAG9b,KAAK,CAAC2nB,KAAK,CAACyH,CAAD,CAAN,CAAV;;AACA,UAAI,CAACrb,gBAAgB,CAAC+H,EAAD,CAArB,EAA2B;AAAE;AAC3B;AACD,OAX6G,CAY9G;;;AACA2F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjV,MAAAA,MAAM;AACNmV,MAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,UAAI,CAAC5J,SAAS,CAAC2I,EAAD,CAAd,EAAoB;AAAE;AACpB;AACD,OAnB6G,CAoB9G;;;AACAJ,MAAAA,EAAE,GAAGI,EAAL;AACAmG,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAACrX,kBAAkB,GAAGiR,aAAH,GAAmBF,GAAtC,CAAJ;AACAsG,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAxgB,MAAAA,GAAG;AACHsb,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA+Q,MAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACD,KAtDuC,CAuDxC;;;AACAyE,IAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAD,CAAN,CAAJ;AACAvW,IAAAA,cAAc;;AACd,QAAIvzB,cAAJ,EAAoB;AAClBmrC,MAAAA,OAAO,CAACE,GAAR,CAAY,8CAA8CzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA/D;AACD;;AACDpO,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,SAAKoS,CAAC,GAAGnZ,EAAE,GAAGgb,IAAI,GAAGpC,CAAC,GAAG,CAApB,EAAuBqC,IAAI,GAAGlH,GAAnC,EAAyCiH,IAAI,IAAIC,IAAR,GAAejb,EAAE,GAAGib,IAApB,GAA2Bjb,EAAE,GAAGib,IAAzE,EAAgF9B,CAAC,GAAG6B,IAAI,IAAIC,IAAR,GAAe,EAAEjb,EAAjB,GAAsB,EAAEA,EAA5G,EAAgH;AAC9G,UAAI1B,SAAS,CAACqH,EAAD,CAAb,EAAmB;AAAE;AACnB;AACD;;AACD,UAAI,CAAClhB,mBAAmB,CAACitB,KAAK,CAACyH,CAAD,CAAN,CAAxB,EAAoC;AAClC;AACD;;AACDvT,MAAAA,EAAE,GAAG5b,IAAI,CAAC0nB,KAAK,CAACyH,CAAD,CAAN,CAAT;AACAtT,MAAAA,EAAE,GAAG9b,KAAK,CAAC2nB,KAAK,CAACyH,CAAD,CAAN,CAAV;;AACA,UAAIrb,gBAAgB,CAAC+H,EAAD,CAApB,EAA0B;AAAE;AAC1B;AACD,OAX6G,CAY9G;;;AACA2F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjV,MAAAA,MAAM;AACNmV,MAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,UAAI,CAAC5J,SAAS,CAAC2I,EAAD,CAAd,EAAoB;AAAE;AACpB;AACD;;AACD,UAAIh3B,cAAJ,EAAoB;AAClBmrC,QAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBrU,EAAE,CAAC+T,QAAH,EAAnC;AACD;;AACD,UAAI/qC,cAAJ,EAAoB;AAClBmrC,QAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8BzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA/C;AACD,OAzB6G,CA0B9G;;;AACApO,MAAAA,EAAE,GAAGG,EAAL;AACAmG,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;;AACA,UAAI/2B,cAAJ,EAAoB;AAClBmrC,QAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBvU,EAAE,CAACiU,QAAH,EAAnC;AACD;;AACD,UAAI/qC,cAAJ,EAAoB;AAClBmrC,QAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBtU,EAAE,CAACgU,QAAH,EAAnC;AACD;;AACDrO,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAkN,MAAAA,QAAQ;;AACR,UAAIhhB,2DAAJ,EAAiE;AAC/D,YAAI+L,SAAS,CAACyI,EAAD,CAAT,IAAiB,CAACzI,SAAS,CAACuU,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA3B,IAA+CjW,gBAAgB,CAAC4T,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAnE,EAAqF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACAhN,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHyE,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjV,UAAAA,MAAM;AACN+U,UAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA;AACD;AACF;;AACD,UAAIj4B,cAAJ,EAAoB;AAClBmrC,QAAAA,OAAO,CAACE,GAAR,CAAY,6BAA6BzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA9C;AACD;;AACDpT,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA+Q,MAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACD,KA7HuC,CA8HxC;;;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhV,IAAAA,MAAM;AACN+gB,IAAAA,KAAK,CAACkH,CAAD,CAAL,GAAW7R,GAAG,EAAd;AACA,WAAO0G,OAAO,EAAd;AACD,GApID,CAngfU,CAyofV;AACA;AACA;;;AACAhpB,EAAAA,mBAAmB,GAAG,6BAASg1B,CAAT,EAAY;AAChC;AACA,WAAOvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4Bwc,aAAa,CAAChR,IAAI,CAACyvB,CAAD,CAAL,CAAzC,IAAsD5c,UAAU,CAAC9S,KAAK,CAAC0vB,CAAD,CAAN,CAAhE,IAA8E,CAACjc,UAAU,CAACxT,IAAI,CAACyvB,CAAD,CAAL,CAAhG;AACD,GAHD,CA5ofU,CAipfV;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;;;AACA97B,EAAAA,WAAW,GAAG,GAAd;AAEAH,EAAAA,YAAY,GAAG,MAAf;AAEAC,EAAAA,cAAc,GAAG,MAAjB;;AAEAF,EAAAA,UAAU,GAAG,oBAASmkC,CAAT,EAAY;AACvB,WAAOpI,IAAI,CAACC,IAAL,CAAUmI,CAAC,CAACiK,CAAF,GAAMjK,CAAC,CAACiK,CAAR,GAAYjK,CAAC,CAACvI,CAAF,GAAMuI,CAAC,CAACvI,CAA9B,CAAP;AACD,GAFD,CA1qfU,CA8qfV;;;AACA1F,EAAAA,SAAS,GAAG,GAAZ;;AAEA/1B,EAAAA,aAAa,GAAG,yBAAW;AACzB;AACA;AACA,WAAO,MAAM47B,IAAI,CAACsS,MAAL,EAAN,GAAsB,GAA7B;AACD,GAJD;;AAMA5mB,EAAAA,uBAAuB,GAAI,YAAW;AAAA,QAC9BA,uBAD8B;AAAA;;AAAA;AAAA;;AACJ;AAEhCA,IAAAA,uBAAuB,CAAC8S,SAAxB,CAAkC6T,CAAlC,GAAsC,GAAtC;AAEA3mB,IAAAA,uBAAuB,CAAC8S,SAAxB,CAAkCqB,CAAlC,GAAsC,GAAtC;AAEA,WAAOnU,uBAAP;AAED,GATyB,CASvBiT,IATuB,CASlB,IATkB,CAA1B;;AAWA7T,EAAAA,QAAQ,GAAG,IAAIY,uBAAJ,EAAX;AAEAX,EAAAA,QAAQ,GAAG,IAAIW,uBAAJ,EAAX;AAEAL,EAAAA,QAAQ,GAAG,IAAIK,uBAAJ,EAAX;AAEAJ,EAAAA,QAAQ,GAAG,IAAII,uBAAJ,EAAX;AAEAP,EAAAA,SAAS,GAAG,IAAIO,uBAAJ,EAAZ;AAEAN,EAAAA,SAAS,GAAG,IAAIM,uBAAJ,EAAZ;AAEAR,EAAAA,SAAS,GAAG,IAAIQ,uBAAJ,EAAZ;AAEAT,EAAAA,SAAS,GAAG,IAAIS,uBAAJ,EAAZ;AAEAV,EAAAA,QAAQ,GAAG,EAAX;;AAEA,OAAKpK,UAAU,GAAG+K,CAAC,GAAG,CAAjB,EAAoBmI,GAAG,GAAGzvB,WAA/B,EAA6C,KAAKyvB,GAAL,GAAWnI,CAAC,GAAGmI,GAAf,GAAqBnI,CAAC,GAAGmI,GAAtE,EAA4ElT,UAAU,GAAG,KAAKkT,GAAL,GAAW,EAAEnI,CAAb,GAAiB,EAAEA,CAA5G,EAA+G;AAC7GX,IAAAA,QAAQ,CAACpK,UAAD,CAAR,GAAuB,IAAI8K,uBAAJ,EAAvB;AACD;;AAED1uB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIsiC,CAAJ,EAAOO,CAAP,EAAUtf,EAAV,EAAcmG,EAAd,EAAkBsY,CAAlB,EAAqBsC,EAArB,EAAyB9B,CAAzB,EAA4BzL,IAA5B,EAAkCyN,IAAlC,EAAwCC,IAAxC;AACAnC,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,CAAJ;AACAQ,IAAAA,CAAC,GAAG,CAAJ;AACAtN,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;;AACDA,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAACvI,kBAAkB,CAACkH,EAAD,EAAKC,EAAL,CAAvB,EAAiC;AAC/BoM,MAAAA,IAAI,CAAC,qBAAD,CAAJ;AACD,KApBsB,CAqBvB;;;AACA6G,IAAAA,CAAC,GAAG7E,GAAJ,CAtBuB,CAuBvB;;AACA+E,IAAAA,CAAC,GAAG1sB,KAAK,CAACuZ,EAAD,EAAKD,EAAL,CAAT;;AACA,QAAIoT,CAAC,GAAGn7B,WAAR,EAAqB;AACnBo0B,MAAAA,IAAI,CAAC,iBAAD,CAAJ;AACD,KA3BsB,CA4B3B;;;AACI,SAAKoH,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F2R,MAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAN,CAAJ;AACApM,MAAAA,IAAI;;AACJ0J,MAAAA,QAAO;;AACPvlC,MAAAA,IAAI;AACJw0B,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAACkG,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAN,CAAJ;AACArf,MAAAA,IAAI;;AACJ2c,MAAAA,QAAO;;AACPvlC,MAAAA,IAAI;AACJy0B,MAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,UAAI,CAACvK,QAAQ,CAACkJ,EAAD,CAAT,IAAiB,CAAClJ,QAAQ,CAACmJ,EAAD,CAA9B,EAAoC;AAClCoM,QAAAA,IAAI,CAAC,uBAAD,CAAJ;AACD;;AACDzN,MAAAA,QAAQ,CAAC6U,CAAD,CAAR,CAAYwS,CAAZ,GAAgBjmB,EAAE,CAAC2S,CAAnB;AACA/T,MAAAA,QAAQ,CAAC6U,CAAD,CAAR,CAAYA,CAAZ,GAAgBxT,EAAE,CAAC0S,CAAnB;AACD,KA7CsB,CA8CvB;;;AACAlW,IAAAA,OAAO,CAACyW,CAAD,CAAP,CA/CuB,CAgDvB;;AACA3W,IAAAA,KAAK,CAAC6W,CAAD,CAAL;;AACA,SAAKR,CAAC,GAAGtY,EAAE,GAAG8a,IAAI,GAAGhC,CAArB,EAAwB9Y,EAAE,GAAG,CAA7B,EAAgCsY,CAAC,GAAGtY,EAAE,IAAI,CAAC,CAA3C,EAA8C;AAC5CpJ,MAAAA,QAAQ,CAAC0hB,CAAD,CAAR;;AACA,UAAIgB,IAAI,CAACr0B,GAAL,CAASmf,QAAQ,CAACunB,CAAlB,IAAuBnuC,YAA3B,EAAyC;AACvC4mB,QAAAA,QAAQ,CAACunB,CAAT,GAAa,GAAb;AACD;;AACD,UAAIrS,IAAI,CAACr0B,GAAL,CAASmf,QAAQ,CAAC+U,CAAlB,IAAuB37B,YAA3B,EAAyC;AACvC4mB,QAAAA,QAAQ,CAAC+U,CAAT,GAAa,GAAb;AACD;;AACDxN,MAAAA,WAAW,CAACvH,QAAQ,CAACunB,CAAV,CAAX;AACAhgB,MAAAA,WAAW,CAACvH,QAAQ,CAAC+U,CAAV,CAAX;AACA3N,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAgJ,MAAAA,QAAQ;AACR1d,MAAAA,GAAG;AACHzH,MAAAA,cAAc,CAAC06B,CAAD,CAAd;AACD,KAhEsB,CAiEvB;;;AACAQ,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;;AACA,QAAIE,CAAC,GAAG,CAAR,EAAW;AACTvH,MAAAA,UAAU,CAACuH,CAAD,CAAV;AACApT,MAAAA,EAAE,GAAG5f,YAAY,CAACgzB,CAAD,CAAjB;AACApT,MAAAA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAhT,MAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,WAAKK,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FlV,QAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzH,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAzB;AACD;;AACDhX,MAAAA,OAAO,CAACyW,CAAD,CAAP;AACA,aAAOpN,IAAI,CAAC9F,EAAD,CAAX;AACD;AACF,GA9ED,CAxtfU,CAwyfV;;;AACAzD,EAAAA,KAAK,GAAG,eAAS6W,CAAT,EAAY;AAClB,QAAIjf,EAAJ,EAAQye,CAAR,EAAWjL,IAAX,EAAiBsN,CAAjB;AACArC,IAAAA,CAAC,GAAG,CAAJ;AACAqC,IAAAA,CAAC,GAAG,GAAJ;AACA/V,IAAAA,QAAQ,CAAC+mB,CAAT,GAAarnB,QAAQ,CAACwU,CAAC,GAAG,CAAL,CAAR,CAAgB6S,CAA7B;AACA/mB,IAAAA,QAAQ,CAACuU,CAAT,GAAa7U,QAAQ,CAACwU,CAAC,GAAG,CAAL,CAAR,CAAgBK,CAA7B;AACAwB,IAAAA,CAAC,GAAG/V,QAAQ,CAAC+mB,CAAT,GAAa/mB,QAAQ,CAAC+mB,CAAtB,GAA0B/mB,QAAQ,CAACuU,CAAT,GAAavU,QAAQ,CAACuU,CAApD;;AACA,SAAKb,CAAC,GAAGze,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAC,GAAG,CAA5B,EAAgC,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAA7D,EAAoEiL,CAAC,GAAG,KAAKjL,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FyK,MAAAA,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgB,CAACrnB,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgB/mB,QAAQ,CAAC+mB,CAAzB,GAA6BrnB,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgBvU,QAAQ,CAACuU,CAAvD,IAA4DwB,CAA5E;AACArW,MAAAA,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgB,CAAC7U,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgBvU,QAAQ,CAAC+mB,CAAzB,GAA6BrnB,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgB/mB,QAAQ,CAACuU,CAAvD,IAA4DwB,CAA5E;AACD;;AACDrW,IAAAA,QAAQ,CAACwU,CAAC,GAAG,CAAL,CAAR,CAAgB6S,CAAhB,GAAoB,GAApB;AACA,WAAOrnB,QAAQ,CAACwU,CAAC,GAAG,CAAL,CAAR,CAAgBK,CAAhB,GAAoB,GAA3B;AACD,GAbD,CAzyfU,CAwzfV;;;AACAviB,EAAAA,QAAQ,GAAG,kBAASkiB,CAAT,EAAY;AACrB,QAAIjf,EAAJ,EAAQuf,CAAR,EAAWpZ,EAAX,EAAesY,CAAf,EAAkBuT,KAAlB,EAAyBlR,CAAzB;AACAvB,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACAqC,IAAAA,CAAC,GAAG,GAAJ;;AACA,QAAIp9B,UAAU,CAAC+mB,QAAQ,CAAC,CAAD,CAAT,CAAV,GAA0B9mB,YAA9B,EAA4C;AAC1C4mB,MAAAA,QAAQ,CAACunB,CAAT,GAAa,GAAb;AACAvnB,MAAAA,QAAQ,CAAC+U,CAAT,GAAa,GAAb;AACA;AACD;;AACD,SAAKC,CAAC,GAAGvf,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,GAAtB,EAA2Buf,CAAC,GAAG,EAAEvf,EAAjC,EAAqC;AACnCuK,MAAAA,QAAQ,CAACunB,CAAT,GAAajuC,aAAa,EAA1B;AACA0mB,MAAAA,QAAQ,CAAC+U,CAAT,GAAaz7B,aAAa,EAA1B;AACAwP,MAAAA,UAAU,CAAC4rB,CAAD,CAAV;AACAzU,MAAAA,QAAQ,CAACsnB,CAAT,GAAavnB,QAAQ,CAACunB,CAAtB;AACAtnB,MAAAA,QAAQ,CAAC8U,CAAT,GAAa/U,QAAQ,CAAC+U,CAAtB;AACAzU,MAAAA,SAAS,CAACinB,CAAV,GAAclnB,SAAS,CAACknB,CAAxB;AACAjnB,MAAAA,SAAS,CAACyU,CAAV,GAAc1U,SAAS,CAAC0U,CAAxB;AACA/U,MAAAA,QAAQ,CAACunB,CAAT,GAAajuC,aAAa,EAA1B;AACA0mB,MAAAA,QAAQ,CAAC+U,CAAT,GAAaz7B,aAAa,EAA1B;;AACA,WAAK46B,CAAC,GAAGtY,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,IAAtB,EAA4BsY,CAAC,GAAG,EAAEtY,EAAlC,EAAsC;AACpC9S,QAAAA,UAAU,CAAC4rB,CAAD,CAAV;AACA+S,QAAAA,KAAK,GAAGtuC,UAAU,CAACknB,SAAD,CAAlB;;AACA,YAAIj2B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,YAAY0R,KAAxB;AACD;;AACD,YAAIA,KAAK,GAAGpuC,cAAZ,EAA4B;AAC1B;AACD;;AACD,YAAIF,UAAU,CAACknB,SAAD,CAAV,GAAwBlnB,UAAU,CAACmnB,SAAD,CAAtC,EAAmD;AACjDC,UAAAA,QAAQ,CAACgnB,CAAT,GAAavnB,QAAQ,CAACunB,CAAtB;AACAhnB,UAAAA,QAAQ,CAACwU,CAAT,GAAa/U,QAAQ,CAAC+U,CAAtB;AACA/U,UAAAA,QAAQ,CAACunB,CAAT,GAAatnB,QAAQ,CAACsnB,CAAtB;AACAvnB,UAAAA,QAAQ,CAAC+U,CAAT,GAAa9U,QAAQ,CAAC8U,CAAtB;AACA9U,UAAAA,QAAQ,CAACsnB,CAAT,GAAahnB,QAAQ,CAACgnB,CAAtB;AACAtnB,UAAAA,QAAQ,CAAC8U,CAAT,GAAaxU,QAAQ,CAACwU,CAAtB;AACAxU,UAAAA,QAAQ,CAACgnB,CAAT,GAAalnB,SAAS,CAACknB,CAAvB;AACAhnB,UAAAA,QAAQ,CAACwU,CAAT,GAAa1U,SAAS,CAAC0U,CAAvB;AACA1U,UAAAA,SAAS,CAACknB,CAAV,GAAcjnB,SAAS,CAACinB,CAAxB;AACAlnB,UAAAA,SAAS,CAAC0U,CAAV,GAAczU,SAAS,CAACyU,CAAxB;AACAzU,UAAAA,SAAS,CAACinB,CAAV,GAAchnB,QAAQ,CAACgnB,CAAvB;AACAjnB,UAAAA,SAAS,CAACyU,CAAV,GAAcxU,QAAQ,CAACwU,CAAvB;AACD,SAtBmC,CAuBpC;;;AACA3U,QAAAA,SAAS,CAACmnB,CAAV,GAActnB,QAAQ,CAACsnB,CAAT,GAAavnB,QAAQ,CAACunB,CAApC;AACAnnB,QAAAA,SAAS,CAAC2U,CAAV,GAAc9U,QAAQ,CAAC8U,CAAT,GAAa/U,QAAQ,CAAC+U,CAApC,CAzBoC,CA0BpC;;AACA5U,QAAAA,SAAS,CAAConB,CAAV,GAAcjnB,SAAS,CAACinB,CAAV,GAAclnB,SAAS,CAACknB,CAAtC;AACApnB,QAAAA,SAAS,CAAC4U,CAAV,GAAczU,SAAS,CAACyU,CAAV,GAAc1U,SAAS,CAAC0U,CAAtC,CA5BoC,CA6BpC;;AACAwB,QAAAA,CAAC,GAAGpW,SAAS,CAAConB,CAAV,GAAcpnB,SAAS,CAAConB,CAAxB,GAA4BpnB,SAAS,CAAC4U,CAAV,GAAc5U,SAAS,CAAC4U,CAAxD;;AACA,YAAIwB,CAAC,KAAK,GAAV,EAAe;AACb;AACD;;AACD/V,QAAAA,QAAQ,CAAC+mB,CAAT,GAAa,CAACnnB,SAAS,CAACmnB,CAAV,GAAcpnB,SAAS,CAAConB,CAAxB,GAA4BnnB,SAAS,CAAC2U,CAAV,GAAc5U,SAAS,CAAC4U,CAArD,IAA0DwB,CAAvE;AACA/V,QAAAA,QAAQ,CAACuU,CAAT,GAAa,CAAC3U,SAAS,CAAC2U,CAAV,GAAc5U,SAAS,CAAConB,CAAxB,GAA4BnnB,SAAS,CAACmnB,CAAV,GAAcpnB,SAAS,CAAC4U,CAArD,IAA0DwB,CAAvE,CAnCoC,CAoCpC;;AACAvW,QAAAA,QAAQ,CAACunB,CAAT,GAAatnB,QAAQ,CAACsnB,CAAT,IAAc/mB,QAAQ,CAAC+mB,CAAT,GAAajnB,SAAS,CAACinB,CAAvB,GAA2B/mB,QAAQ,CAACuU,CAAT,GAAazU,SAAS,CAACyU,CAAhE,CAAb;AACA/U,QAAAA,QAAQ,CAAC+U,CAAT,GAAa9U,QAAQ,CAAC8U,CAAT,IAAcvU,QAAQ,CAAC+mB,CAAT,GAAajnB,SAAS,CAACyU,CAAvB,GAA2BvU,QAAQ,CAACuU,CAAT,GAAazU,SAAS,CAACinB,CAAhE,CAAb;AACD;AACF;;AACD,WAAO5Z,IAAI,CAAC,2BAAD,CAAX;AACD,GA9DD;;AAgEA7kB,EAAAA,UAAU,GAAG,oBAAS4rB,CAAT,EAAY;AACvB,QAAIjf,EAAJ,EAAQye,CAAR,EAAWjL,IAAX,EAAiBoL,OAAjB,EAA0BkC,CAA1B;AACArC,IAAAA,CAAC,GAAG,CAAJ;AACAqC,IAAAA,CAAC,GAAG,GAAJ,CAHuB,CAIvB;;AACAhW,IAAAA,QAAQ,CAACgnB,CAAT,GAAavnB,QAAQ,CAACunB,CAAtB;AACAhnB,IAAAA,QAAQ,CAACwU,CAAT,GAAa/U,QAAQ,CAAC+U,CAAtB,CANuB,CAOvB;;AACA1U,IAAAA,SAAS,CAACknB,CAAV,GAAcrnB,QAAQ,CAAC,CAAD,CAAR,CAAYqnB,CAAZ,GAAgBrnB,QAAQ,CAAC,CAAD,CAAR,CAAYqnB,CAAZ,GAAgBhnB,QAAQ,CAACgnB,CAAzC,GAA6CrnB,QAAQ,CAAC,CAAD,CAAR,CAAY6U,CAAZ,GAAgBxU,QAAQ,CAACwU,CAApF;AACA1U,IAAAA,SAAS,CAAC0U,CAAV,GAAc7U,QAAQ,CAAC,CAAD,CAAR,CAAY6U,CAAZ,GAAgB7U,QAAQ,CAAC,CAAD,CAAR,CAAYqnB,CAAZ,GAAgBhnB,QAAQ,CAACwU,CAAzC,GAA6C7U,QAAQ,CAAC,CAAD,CAAR,CAAY6U,CAAZ,GAAgBxU,QAAQ,CAACgnB,CAApF;AACAlT,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKH,CAAC,GAAGze,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGyL,CAAxB,EAA4B,KAAKzL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgEiL,CAAC,GAAG,KAAKjL,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F;AACA8gB,MAAAA,CAAC,GAAGvW,QAAQ,CAACunB,CAAT,GAAahnB,QAAQ,CAACgnB,CAAtB,GAA0BvnB,QAAQ,CAAC+U,CAAT,GAAaxU,QAAQ,CAACwU,CAApD;AACAxU,MAAAA,QAAQ,CAACwU,CAAT,GAAa/U,QAAQ,CAACunB,CAAT,GAAahnB,QAAQ,CAACwU,CAAtB,GAA0B/U,QAAQ,CAAC+U,CAAT,GAAaxU,QAAQ,CAACgnB,CAA7D;AACAhnB,MAAAA,QAAQ,CAACgnB,CAAT,GAAahR,CAAb,CAJ2F,CAK3F;;AACAlW,MAAAA,SAAS,CAACknB,CAAV,IAAernB,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgBhnB,QAAQ,CAACgnB,CAAzB,GAA6BrnB,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgBxU,QAAQ,CAACwU,CAArE;AACAV,MAAAA,OAAO,CAACjN,IAAR,CAAa/G,SAAS,CAAC0U,CAAV,IAAe7U,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgBhnB,QAAQ,CAACwU,CAAzB,GAA6B7U,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgBxU,QAAQ,CAACgnB,CAAlF;AACD;;AACD,WAAOlT,OAAP;AACD,GArBD,CAz3fU,CAg5fV;;;AACA76B,EAAAA,cAAc,GAAG,wBAASk7B,CAAT,EAAY;AAC3B,QAAIjf,EAAJ,EAAQmG,EAAR,EAAYsY,CAAZ,EAAejL,IAAf,EAAqByN,IAArB,EAA2BrC,OAA3B;AACAH,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKA,CAAC,GAAGze,EAAE,GAAGwT,IAAI,GAAGyL,CAAC,GAAG,CAAzB,EAA6BzL,IAAI,IAAI,CAAR,GAAYxT,EAAE,GAAG,CAAjB,GAAqBA,EAAE,GAAG,CAAvD,EAA2Dye,CAAC,GAAGjL,IAAI,IAAI,CAAR,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAApF,EAAwF;AACtFyK,MAAAA,QAAQ,CAACgU,CAAC,GAAG,CAAL,CAAR,CAAgBqT,CAAhB,IAAqBrnB,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgBvnB,QAAQ,CAACunB,CAAzB,GAA6BrnB,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgB/U,QAAQ,CAAC+U,CAA3E;AACA7U,MAAAA,QAAQ,CAACgU,CAAC,GAAG,CAAL,CAAR,CAAgBa,CAAhB,IAAqB7U,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgB/U,QAAQ,CAACunB,CAAzB,GAA6BrnB,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgBvnB,QAAQ,CAAC+U,CAA3E;AACD;;AACD,QAAI57B,UAAU,CAAC+mB,QAAQ,CAAC,CAAD,CAAT,CAAV,GAA0B9mB,YAA9B,EAA4C;AAC1Cu0B,MAAAA,IAAI,CAAC,wBAAD,CAAJ;AACD;;AACD0G,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKH,CAAC,GAAGtY,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGhC,CAAC,GAAG,CAA5B,EAAgC,KAAKgC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA7D,EAAoExC,CAAC,GAAG,KAAKwC,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FsE,MAAAA,QAAQ,CAACgU,CAAD,CAAR,CAAYqT,CAAZ,GAAgBrnB,QAAQ,CAACgU,CAAC,GAAG,CAAL,CAAR,CAAgBqT,CAAhC;AACAlT,MAAAA,OAAO,CAACjN,IAAR,CAAalH,QAAQ,CAACgU,CAAD,CAAR,CAAYa,CAAZ,GAAgB7U,QAAQ,CAACgU,CAAC,GAAG,CAAL,CAAR,CAAgBa,CAA7C;AACD;;AACD,WAAOV,OAAP;AACD,GAhBD;;AAkBAjiC,EAAAA,cAAc,GAAG,0BAAW;AAC1Bg1B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO6zB,UAAS,EAAhB;AACD,GAJD;;AAMAA,EAAAA,UAAS,GAAG,qBAAW;AACrB,QAAI6T,CAAJ,EAAOoB,WAAP;AACApB,IAAAA,CAAC,GAAG,CAAJ;AACAoB,IAAAA,WAAW,GAAGjT,GAAG,EAAjB;;AACA,QAAI7c,GAAG,CAAC8vB,WAAD,CAAH,KAAqBzH,MAAM,CAAC3mC,GAAD,CAA/B,EAAsC;AACpC4/B,MAAAA,IAAI,CAACwO,WAAD,CAAJ,CADoC,CAEpC;;AACAnN,MAAAA,WAAW;AACXmN,MAAAA,WAAW,GAAGjT,GAAG,EAAjB;AACD,KAToB,CAUrB;;;AACA,QAAI7c,GAAG,CAAC8vB,WAAD,CAAH,KAAqBzH,MAAM,CAACt1B,QAAD,CAA3B,IAAyC,CAACqhB,SAAS,CAACpU,GAAG,CAACU,GAAG,CAACovB,WAAD,CAAJ,CAAJ,CAAvD,EAAgF;AAC9EpB,MAAAA,CAAC,GAAG7E,GAAJ;AACAiG,MAAAA,WAAW,GAAGpvB,GAAG,CAACovB,WAAD,CAAjB,CAF8E,CAG9E;AACA;;AACA,aAAO3d,MAAM,CAAC2d,WAAD,CAAb,EAA4B;AAC1BxO,QAAAA,IAAI,CAACthB,GAAG,CAAC8vB,WAAD,CAAJ,CAAJ;;AACAjV,QAAAA,UAAS;;AACTiV,QAAAA,WAAW,GAAGpvB,GAAG,CAACovB,WAAD,CAAjB;AACD;;AACD,aAAOhX,YAAY,CAAC+Q,GAAG,GAAG6E,CAAP,CAAnB;AACD,KAXD,MAWO,IAAIzZ,UAAU,CAAC6a,WAAD,CAAd,EAA6B;AAClCxO,MAAAA,IAAI,CAACwO,WAAD,CAAJ;AACA,aAAO1X,YAAY,EAAnB;AACD,KAHM,MAGA,IAAIpY,GAAG,CAAC8vB,WAAD,CAAH,KAAqBzH,MAAM,CAAC/zB,KAAD,CAA3B,IAAsCuf,cAAc,CAAChU,KAAK,CAACiwB,WAAD,CAAN,CAAxD,EAA8E;AACnF,aAAOxO,IAAI,CAACtG,GAAD,CAAX;AACD,KAFM,MAEA;AACL,aAAOsG,IAAI,CAACwO,WAAD,CAAX;AACD;AACF,GA9BD,CAz6fU,CAy8fV;;;AACArjC,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAI8hC,OAAJ;AACA/S,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,WAAOpc,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,MAAAA,IAAI;AACJs0B,MAAAA,KAAK;AACLiT,MAAAA,OAAO,CAACjN,IAAR,CAAa9F,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAArB;AACD;;AACD,WAAO+S,OAAP;AACD,GAdD;;AAgBAjT,EAAAA,KAAK,GAAG,iBAAW;AACjB0I,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrH,QAAQ,CAACgG,EAAD,CAAR,IAAgBhG,QAAQ,CAACiG,EAAD,CAA5B,EAAkC;AAChCsR,MAAAA,OAAO;AACR,KAFD,MAEO;AACLzL,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;;AACA,UAAIjG,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChB2N,QAAAA,mBAAmB;AACpB,OAFD,MAEO,IAAI3T,QAAQ,CAACiG,EAAD,CAAZ,EAAkB;AACvByI,QAAAA,mBAAmB;AACpB,OAFM,MAEA;AACLrL,QAAAA,QAAQ;AACT;AACF;;AACD,WAAO0K,OAAO,EAAd;AACD,GAlBD;;AAoBAwJ,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIkC,CAAJ,EAAOtf,EAAP,EAAWuf,CAAX,EAAcpZ,EAAd,EAAkBsY,CAAlB,EAAqBsC,EAArB,EAAyBC,EAAzB,EAA6BnC,IAA7B,EAAmCC,KAAnC,EAA0CtL,IAA1C,EAAgDyN,IAAhD,EAAsDC,IAAtD,EAA4DC,IAA5D;AACA7B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACAI,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR;AACAD,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB/S,EAAE,CAACwN,MAAH,CAAUuF,IAAlC;;AACA,QAAIA,IAAI,GAAGt8B,MAAX,EAAmB;AACjB21B,MAAAA,IAAI,CAAC,uCAAD,CAAJ;AACD;;AACD4G,IAAAA,KAAK,GAAGjT,EAAE,CAACyN,MAAH,CAAUwF,KAAV,GAAkBhT,EAAE,CAACwN,MAAH,CAAUwF,KAApC;AACA/S,IAAAA,EAAE,GAAG9f,YAAY,CAAC6yB,KAAD,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;;AACA,SAAKS,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAG3H,EAAE,CAACyN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKrL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAtE,EAA6E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG+L,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACDC,IAAAA,CAAC,GAAGD,CAAJ;;AACA,SAAKA,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGnV,EAAE,CAACwN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKoC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG4F,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcY,CAAC,GAAGD,CAAlB,IAAuBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAvB;AACD;;AACDb,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKa,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGrV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKoC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG,WAAKxB,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGrV,EAAE,CAACwN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKqC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGrP,QAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACA3N,QAAAA,IAAI,CAAC7F,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe+mB,CAAf,CAAD,CAAJ;AACArW,QAAAA,QAAQ;AACR6C,QAAAA,EAAE,CAACuN,MAAH,CAAU9gB,IAAV,CAAeimB,CAAC,EAAhB,IAAsBvR,GAAG,EAAzB;AACD;AACF;;AACD,WAAOyE,IAAI,CAAC5F,EAAD,CAAX;AACD,GA/BD;;AAiCAY,EAAAA,SAAS,GAAG,qBAAW;AACrB0H,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAgF,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAnG,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAlB,IAAAA,EAAE,GAAGD,EAAL;AACAF,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB,UAAInrB,KAAI,CAAC2P,GAAG,CAACwb,EAAD,CAAJ,EAAUC,EAAV,CAAR,EAAuB;AACrB6F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA3C,QAAAA,QAAQ;AACR8C,QAAAA,EAAE,GAAGkB,GAAG,EAAR;AACD,OALD,MAKO;AACLyE,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA3C,QAAAA,QAAQ;AACR6C,QAAAA,EAAE,GAAGmB,GAAG,EAAR;AACD;;AACDrB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD8F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA,WAAO4H,OAAO,EAAd;AACD,GAzBD;AA2BA;AACF;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;;;AACAr1B,EAAAA,kBAAkB,GAAG,8BAAW;AAC9BxB,IAAAA,YAAY;AACZmwB,IAAAA,GAAG;AACH,WAAOkF,WAAW,CAAC7uB,GAAD,CAAlB;AACD,GAJD;;AAMAxG,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIk1C,aAAJ,EAAmBC,eAAnB,EAAoCtD,cAApC,EAAoDuD,SAApD,EAA+DC,aAA/D;;AACA,QAAI,CAAC5vB,MAAM,CAACzR,GAAG,CAAC8a,EAAD,CAAJ,CAAX,EAAsB;AACpBqM,MAAAA,IAAI,CAAC,6DAAD,CAAJ;AACD;;AACD+Z,IAAAA,aAAa,GAAG5hC,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAnB;AACA+iB,IAAAA,cAAc,GAAGv+B,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAApB;;AACA,QAAI+iB,cAAc,KAAKlW,MAAM,CAACn1B,GAAD,CAA7B,EAAoC;AAClC20B,MAAAA,IAAI,CAAC,6DAAD,CAAJ;AACD;;AACD,QAAI,CAAC1V,MAAM,CAACzR,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAX,EAA2B;AACzBumB,MAAAA,aAAa,GAAG1Z,MAAM,CAACn1B,GAAD,CAAtB;AACD,KAFD,MAEO;AACL6uC,MAAAA,aAAa,GAAG/hC,GAAG,CAACU,GAAG,CAACA,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAnB;AACD;;AACD,QAAI7R,KAAK,CAACi4B,aAAD,EAAgBrD,cAAhB,CAAT,EAA0C;AACxC1W,MAAAA,IAAI,CAAC,mBAAD,CAAJ;AACD,KAjBuB,CAkBxB;AACA;AACA;AACA;;;AACAia,IAAAA,SAAS,GAAG,eAAexhB,WAAU,CAACshB,aAAD,CAArC;AACAE,IAAAA,SAAS,IAAI,aAAaxhB,WAAU,CAACyhB,aAAD,CAApC;;AACA,QAAIz9C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwB6R,SAApC;AACD;;AACDD,IAAAA,eAAe,GAAGlX,+BAA+B,CAAC2O,OAAhC,CAAwCwI,SAAxC,CAAlB,CA3BwB,CA4BxB;;AACA,QAAID,eAAe,KAAK,CAAC,CAAzB,EAA4B;AAC1B;AACAlX,MAAAA,+BAA+B,CAACrJ,IAAhC,CAAqCwgB,SAArC;AACApX,MAAAA,6BAA6B,CAACpJ,IAA9B,CAAmC5gB,GAAG,CAAC8a,EAAD,CAAtC;AACD,KAJD,MAIO;AACL,UAAIl3B,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,wCAAwCvvB,GAAG,CAAC8a,EAAD,CAAvD;AACD;;AACDmP,MAAAA,+BAA+B,CAACkX,eAAD,CAA/B,GAAmDC,SAAnD;AACApX,MAAAA,6BAA6B,CAACmX,eAAD,CAA7B,GAAiDnhC,GAAG,CAAC8a,EAAD,CAApD;AACD,KAvCuB,CAwCxB;AACA;;;AACAuG,IAAAA,WAAW,CAAC7tB,OAAD,CAAX;AACAotB,IAAAA,IAAI,CAAC5gB,GAAG,CAAC8a,EAAD,CAAJ,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GA7CD;;AA+CA1P,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B2jB,IAAAA,6BAA6B,GAAG,EAAhC;AACA,WAAOC,+BAA+B,GAAG,EAAzC;AACD,GAHD;;AAKAniC,EAAAA,kBAAkB,GAAG,8BAAW;AAC9B;AACA;AACA;AACAue,IAAAA,gBAAgB,GAJc,CAM9B;;AACA,WAAOgb,WAAW,CAAC7uB,GAAD,CAAlB;AACD,GARD;;AAUAvG,EAAAA,iBAAiB,GAAG,6BAAW;AAC7B,QAAIq1C,uBAAJ;AACAA,IAAAA,uBAAuB,GAAGxlB,YAAY,EAAtC;;AACA,QAAIwlB,uBAAuB,KAAK,EAAhC,EAAoC;AAClC,aAAO1gB,IAAI,CAAC1H,UAAU,CAACooB,uBAAD,CAAX,CAAX;AACD,KAFD,MAEO;AACL,aAAOjgB,WAAW,CAAC7uB,GAAD,CAAlB;AACD;AACF,GARD;;AAUAspB,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIyS,CAAJ,EAAOtf,EAAP,EAAWijB,GAAX,EAAgBoP,uBAAhB;AACAA,IAAAA,uBAAuB,GAAG,EAA1B;;AACA,SAAKryB,EAAE,GAAG,CAAL,EAAQijB,GAAG,GAAGlI,6BAA6B,CAACpU,MAAjD,EAAyD3G,EAAE,GAAGijB,GAA9D,EAAmEjjB,EAAE,EAArE,EAAyE;AACvEsf,MAAAA,CAAC,GAAGvE,6BAA6B,CAAC/a,EAAD,CAAjC;AACAqyB,MAAAA,uBAAuB,IAAItX,6BAA6B,GAAG,IAA3D;AACD;;AACD,WAAOsX,uBAAP;AACD,GARD;;AAUAp1C,EAAAA,UAAU,GAAG,sBAAW;AACtB00B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO01B,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjB;AACA;AACA;AACA;AACAxS,IAAAA,eAAe;AACf8Z,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAzgB,IAAAA,GAAG;AACHumB,IAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAyR,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA1d,IAAAA,GAAG;AACH+a,IAAAA,QAAQ;AACRhO,IAAAA,WAAW;AACXgO,IAAAA,QAAQ;AACR3O,IAAAA,eAAe;AACf,WAAOqZ,OAAO,EAAd;AACD,GAlBD,CAlpgBU,CAsqgBV;;;AACAjK,EAAAA,eAAe,GAAG,CAAlB;;AAEA1N,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAI8iB,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA1K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAJyB,CAKzB;;AACA,QAAIjT,MAAM,CAAC4R,EAAD,EAAK,CAAL,CAAN,IAAiB5R,MAAM,CAAC4R,EAAD,EAAK,CAAL,CAAvB,IAAkC5R,MAAM,CAAC4R,EAAD,EAAK,CAAC,CAAN,CAA5C,EAAsD;AACpD8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACDjK,IAAAA,eAAe,GAAGkC,EAAE,CAACwS,CAAH,CAAKH,CAAvB;AACAa,IAAAA,CAAC,GAAG7E,GAAJ;AACApe,IAAAA,QAAQ;;AACR,QAAIoe,GAAG,GAAG6E,CAAN,GAAU,CAAd,EAAiB;AACfjY,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACA3M,MAAAA,WAAW,CAAChvB,QAAD,CAAX;AACAq1B,MAAAA,IAAI;AACJllB,MAAAA,IAAI;AACL;;AACD,WAAOqgB,OAAO,EAAd;AACD,GArBD,CAzqgBU,CAgsgBV;AAEA;;;AACA9X,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIkE,EAAJ,EAAQye,CAAR;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI9U,eAAe,CAACye,UAAhB,EAAJ,EAAkC;AAChCze,MAAAA,eAAe,GAAGiM,SAAS,CAACjM,eAAD,EAAkB,CAAlB,CAA3B;AACAuI,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACD;;AACD,SAAKuM,CAAC,GAAGze,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,KAAtB,EAA6Bye,CAAC,GAAG,EAAEze,EAAnC,EAAuC;AACrCwa,MAAAA,aAAa,CAACiE,CAAD,CAAb,CADqC,CAErC;;AACA,UAAI9U,eAAe,CAAC2oB,OAAhB,CAAwB,CAAxB,MAA+B,CAAnC,EAAsC;AACpC;AACD;AACF;;AACD,WAAOt2B,QAAQ,EAAf;AACD,GAfD;;AAiBAwe,EAAAA,aAAa,GAAG,uBAASiE,CAAT,EAAY;AAC1B,QAAIzqB,KAAJ,EAAWwqB,CAAX,EAAcH,CAAd,EAAiByT,CAAjB;AACA99B,IAAAA,KAAK,GAAG,CAAR;AACAwqB,IAAAA,CAAC,GAAGxW,IAAI,CAAC4F,QAAQ,CAAC6Q,CAAD,CAAT,CAAR;AACAzqB,IAAAA,KAAK,GAAG,CAAR;;AACA,WAAO,CAAP,EAAU;AACR;AACA,UAAI2V,eAAe,CAAC2oB,OAAhB,CAAwB,CAAxB,MAA+B,CAAnC,EAAsC;AACpC,YAAIt+B,KAAJ,EAAW;AACT+d,UAAAA,WAAW,CAACyM,CAAD,EAAIxqB,KAAJ,CAAX;AACD;;AACD;AACD;;AAPO,qBAQC4T,OAAO,CAAC+B,eAAD,EAAkB6U,CAAlB,CARR;;AAAA;;AAQPH,MAAAA,CARO;AAQJyT,MAAAA,CARI;;AASR;AACA,UAAIA,CAAC,CAAC/R,MAAF,EAAJ,EAAgB;AACd/rB,QAAAA,KAAK;AACL2V,QAAAA,eAAe,GAAG0U,CAAlB;AACD,OAHD,MAGO;AACL;AACD;AACF;;AACD,QAAIrqB,KAAJ,EAAW;AACT+d,MAAAA,WAAW,CAACyM,CAAD,EAAIxqB,KAAJ,CAAX;AACD,KAxByB,CAyB1B;AACA;;;AACA,QAAIyT,IAAI,CAAC4W,CAAD,EAAIG,CAAJ,CAAJ,KAAe,CAAC,CAApB,EAAuB;AACrBzM,MAAAA,WAAW,CAACpI,eAAD,EAAkB,CAAlB,CAAX;AACA,aAAOA,eAAe,GAAG3B,IAAI,CAAC,CAAD,CAA7B;AACD;AACF,GA/BD,CAptgBU,CAqvgBV;;;AACAhM,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIu2B,UAAJ,EAAgBC,CAAhB,EAAmB/T,CAAnB,EAAsB+L,CAAtB,EAAyB1J,CAAzB,EAA4BnB,CAA5B,EAA+B8S,MAA/B;AACAhU,IAAAA,CAAC,GAAG,CAAJ;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACA+H,IAAAA,UAAU,GAAGvqB,IAAI,CAAC,CAAD,CAAjB;AACA2X,IAAAA,CAAC,GAAG3X,IAAI,CAAC,CAAD,CAAR;AACAyqB,IAAAA,MAAM,GAAGzqB,IAAI,CAAC,CAAD,CAAb;AACAyW,IAAAA,CAAC,GAAG,CAAJ;AACA+L,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAO,CAAP,EAAU;AACR,UAAI5hB,MAAM,CAACe,eAAD,CAAV,EAA6B;AAC3BoI,QAAAA,WAAW,CAACpI,eAAD,EAAkB,CAAlB,CAAX;AACA,eAAO,CAAP;AACD;;AACD,aAAO,CAAP,EAAU;AACR,YAAItP,QAAJ,EAAc;AACZ6d,UAAAA,IAAI,CAAC,KAAD,CAAJ;AACD,SAHO,CAIR;;;AACA4I,QAAAA,CAAC,GAAG/X,IAAI,CAAC0pB,MAAD,EAAS9S,CAAT,CAAR;AACAmB,QAAAA,CAAC,GAAGlL,SAAS,CAACkL,CAAD,EAAI,CAAJ,CAAb;AACA0R,QAAAA,CAAC,GAAG1qB,IAAI,CAACgZ,CAAD,EAAInX,eAAJ,CAAR;;AACA,YAAI9mB,MAAM,CAAC2vC,CAAD,EAAI,CAAJ,CAAV,EAAkB;AAChB,cAAI,EAAE/T,CAAF,KAAQ,CAAZ,EAAe;AACbgU,YAAAA,MAAM,GAAG9S,CAAT;AACA6K,YAAAA,CAAC,IAAI,CAAL;AACA/L,YAAAA,CAAC,GAAG+L,CAAJ;AACD,WALe,CAMhB;;;AACA1J,UAAAA,CAAC,GAAG5Y,IAAI,CAACyX,CAAD,EAAIA,CAAJ,CAAR;AACAA,UAAAA,CAAC,GAAGvY,IAAI,CAAC0Z,CAAD,EAAIyR,UAAJ,CAAR;AACAzR,UAAAA,CAAC,GAAG7Y,IAAI,CAAC0X,CAAD,EAAIhW,eAAJ,CAAR;AACAgW,UAAAA,CAAC,GAAGmB,CAAJ;AACA;AACD;;AACD/O,QAAAA,WAAW,CAACygB,CAAD,EAAI,CAAJ,CAAX;;AACA,YAAI/qB,IAAI,CAAC+qB,CAAD,EAAI7oB,eAAJ,CAAJ,KAA6B,CAAjC,EAAoC;AAClC,iBAAO,CAAC,CAAR;AACD,SAxBO,CAyBR;;;AACAmX,QAAAA,CAAC,GAAGnZ,IAAI,CAACgC,eAAD,EAAkB6oB,CAAlB,CAAR;AACA7oB,QAAAA,eAAe,GAAGmX,CAAlB,CA3BQ,CA4BR;;AACAA,QAAAA,CAAC,GAAG7Y,IAAI,CAAC0X,CAAD,EAAIhW,eAAJ,CAAR;AACAgW,QAAAA,CAAC,GAAGmB,CAAJ,CA9BQ,CA+BR;;AACAA,QAAAA,CAAC,GAAG7Y,IAAI,CAACwqB,MAAD,EAAS9oB,eAAT,CAAR;AACA8oB,QAAAA,MAAM,GAAG3R,CAAT;AACA;AACD;AACF;AACF,GAnDD;;AAqDA/O,EAAAA,WAAW,GAAG,qBAASyM,CAAT,EAAYxqB,KAAZ,EAAmB;AAC/B6X,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASM,CAAT;AACA3S,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASnW,IAAI,CAAC,CAAD,CAAb;AACA2J,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,QAAI7X,KAAK,GAAG,CAAZ,EAAe;AACboe,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACA8zB,MAAAA,IAAI;AACJ5M,MAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,MAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,MAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASlW,IAAI,CAAChU,KAAD,CAAb;AACA6X,MAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASnW,IAAI,CAAC,CAAD,CAAb;AACA2J,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,aAAO/E,IAAI,CAAC,CAAD,CAAX;AACD;AACF,GAhBD;;AAkBA5xB,EAAAA,WAAW,GAAG,KAAd;;AAEAgI,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAIhI,WAAJ,EAAiB;AACf;AACD;;AACDy8B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOi2B,KAAK,EAAZ;AACD,GATD;;AAWAA,EAAAA,KAAK,GAAG,iBAAW;AACjB+G,IAAAA,IAAI;AACJgJ,IAAAA,OAAO;AACP,WAAOzJ,OAAO,EAAd;AACD,GAJD;;AAMAyJ,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIqV,2BAAJ,EAAiCC,mBAAjC,EAAsDC,SAAtD,EAAiEC,QAAjE,EAA2EC,SAA3E,EAAsFC,iBAAtF,EAAyG9T,CAAzG;;AACA,QAAI/pC,WAAJ,EAAiB;AACf;AACD;;AACD+pC,IAAAA,CAAC,GAAG,CAAJ;AACAnT,IAAAA,EAAE,GAAGoB,GAAG,EAAR,CANmB,CAMP;;AACZrB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAPmB,CAOP;;AACZ2lB,IAAAA,QAAQ,GAAG/mB,EAAX;AACA8mB,IAAAA,SAAS,GAAG/mB,EAAZ,CATmB,CAUnB;;AACA,QAAI32B,WAAJ,EAAiB;AACfkrC,MAAAA,OAAO,CAACE,GAAR,CAAY,YAAYzU,EAAZ,GAAiB,KAAjB,GAAyBC,EAArC;AACD,KAbkB,CAcnB;AAEA;AACA;;;AACA,QAAI9R,KAAK,CAAC6R,EAAD,EAAKR,GAAL,CAAL,IAAkB3J,kBAAkB,CAACoK,EAAD,CAAxC,EAA8C;AAC5C,UAAIxR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD;;AACD,UAAIn2B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KA5BkB,CA6BnB;;;AACA,QAAIlgB,KAAK,CAAC8R,EAAD,EAAKT,GAAL,CAAT,EAAoB;AAClBsG,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,UAAI32B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KApCkB,CAqCnB;;;AACA,QAAIvW,UAAU,CAACkI,EAAD,CAAV,IAAkBlI,UAAU,CAACmI,EAAD,CAAhC,EAAsC;AACpC,UAAIxR,kBAAJ,EAAwB;AACtBwX,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,CAACtG,GAAD,CAAJ;AACD;;AACDzB,MAAAA,MAAM;;AACN,UAAI10B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KAjDkB,CAkDnB;;;AACA,QAAIvW,UAAU,CAACkI,EAAD,CAAV,IAAmBrH,YAAY,CAACsH,EAAD,CAAnC,EAA0C;AACxC6F,MAAAA,IAAI,CAACzR,aAAD,CAAJ;;AACA,UAAIhrB,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KAzDkB,CA0DnB;;;AACA,QAAIvW,UAAU,CAACkI,EAAD,CAAV,IAAkBhI,iBAAiB,CAACiI,EAAD,CAAvC,EAA6C;AAC3C6F,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA0J,MAAAA,MAAM;;AACN,UAAI10B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KAlEkB,CAmEnB;;;AACA,QAAIvW,UAAU,CAACkI,EAAD,CAAV,IAAkB,CAAClJ,QAAQ,CAACkJ,EAAD,CAA3B,IAAmCvG,UAAU,CAACwG,EAAD,CAA7C,IAAqD,CAACxI,SAAS,CAACwI,EAAD,CAA/D,IAAuE3G,gBAAgB,CAAC2G,EAAD,CAAvF,IAA+F,CAACxR,kBAApG,EAAwH;AACtH,UAAIplB,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACD;;AACD,UAAIprC,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,6BAA6BxU,EAAE,CAACuS,CAAH,CAAKH,CAAlC,GAAsC,KAAtC,GAA8CpS,EAAE,CAACuS,CAAH,CAAKF,CAA/D;AACD;;AACD,UAAIrS,EAAE,CAACuS,CAAH,CAAKH,CAAL,GAASpS,EAAE,CAACuS,CAAH,CAAKF,CAAlB,EAAqB;AACnB/L,QAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,OALD,MAKO;AACLsL,QAAAA,WAAW,CAAChvB,QAAD,CAAX;AACAuuB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAuG,QAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAsG,QAAAA,aAAa,CAACrG,EAAE,CAACuS,CAAH,CAAKH,CAAL,CAAO/V,GAAP,CAAW2D,EAAE,CAACuS,CAAH,CAAKF,CAAhB,CAAD,EAAqBrS,EAAE,CAACuS,CAAH,CAAKF,CAA1B,CAAb;AACArX,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACAA,QAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,YAAI5xB,WAAJ,EAAiB;AACfkrC,UAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAvC;AACD;AACF,OAvBqH,CAwBtH;AACA;AACA;;;AACA9G,MAAAA,KAAI;;AACJ,UAAIl+B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KApGkB,CAqGnB;;;AACA,QAAI5U,UAAU,CAACuG,EAAD,CAAV,IAAkBvG,UAAU,CAACwG,EAAD,CAAhC,EAAsC;AACpC,UAAI52B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,4CAAZ;AACD;;AACD3O,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6G,MAAAA,IAAI;;AACJ,UAAIz9B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KAjHkB,CAkHnB;;;AACA,QAAI/Y,aAAa,CAAC0K,EAAD,CAAb,IAAqB1K,aAAa,CAAC2K,EAAD,CAAtC,EAA4C;AAC1C,UAAI52B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iEAAZ;AACD;;AACD,UAAIprC,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,gDAAZ;AACD;;AACD3O,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACApU,MAAAA,IAAI;;AACJ,UAAIxiB,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD;;AACD,QAAIrU,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChB,UAAI32B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACD;;AACD7S,MAAAA,YAAY;;AACZ,UAAIv4B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KA3IkB,CA4InB;AACA;;;AACA,QAAI7pB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC5mC,GAAD,CAAlB,IAA2B8wB,aAAa,CAACkJ,EAAD,CAAxC,IAAgD,CAACpK,kBAAkB,CAAChD,WAAW,CAACga,MAAM,CAAChmC,qBAAD,CAAP,CAAZ,CAAvE,EAAqH;AACnH,UAAIwC,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iDAAZ;AACD;;AACD3O,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAwB,MAAAA,KAAK;;AACL,UAAIp4B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KAzJkB,CA0JnB;;;AACA,QAAIrO,EAAE,KAAK6M,MAAM,CAACpiC,CAAD,CAAb,IAAoB+Z,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt2B,GAAD,CAA1C,EAAiD;AAC/CuvB,MAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;;AACA,UAAI52B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KAjKkB,CAkKnB;;;AACA,QAAIrO,EAAE,KAAK6M,MAAM,CAACpiC,CAAD,CAAb,IAAoBqsB,QAAQ,CAACmJ,EAAD,CAAhC,EAAsC;AACpC,UAAI52B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,4CAAZ;AACD;;AACDxO,MAAAA,WAAW,CAAC2N,IAAI,CAACgM,GAAL,CAAS3f,EAAE,CAAC0S,CAAZ,CAAD,CAAX;;AACA,UAAItpC,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KA5KkB,CA6KnB;AACA;AACA;;;AACA,QAAIrO,EAAE,KAAK6M,MAAM,CAACpiC,CAAD,CAAb,IAAoBoK,KAAI,CAACorB,EAAD,EAAK5L,aAAL,CAAJ,KAA4B,CAAhD,IAAqDxf,KAAI,CAACorB,EAAD,EAAK4M,MAAM,CAACj0B,EAAD,CAAX,CAAJ,KAAyB,CAA9E,IAAmF,CAAC8V,eAAxF,EAAyG;AACvG6X,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,UAAI5xB,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,oDAAoDzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAArE;AACD;;AACD9G,MAAAA,KAAI;;AACJuf,MAAAA,mBAAmB,GAAGzlB,GAAG,EAAzB;;AACA,UAAIxsB,KAAI,CAACiyC,mBAAD,EAAsBja,MAAM,CAACj0B,EAAD,CAA5B,CAAJ,KAA0C,CAA9C,EAAiD;AAC/C,YAAIvP,WAAJ,EAAiB;AACfkrC,UAAAA,OAAO,CAACE,GAAR,CAAY,mDAAmDqS,mBAA/D;AACD;;AACDhhB,QAAAA,IAAI,CAACghB,mBAAD,CAAJ;AACA;AACD;AACF,KAjMkB,CAkMnB;AACA;AACA;AACA;AACA;;;AACA,QAAItiC,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgCkgB,SAAS,CAACwI,EAAD,CAA7C,EAAmD;AACjD,UAAI52B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,+CAAZ;AACD;;AACDzU,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAwB,MAAAA,KAAK;AACLzB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAwB,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;AACR2C,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,UAAI32B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KA3NkB,CA4NnB;AACA;AACA;AACA;AACA;AAEA;;;AACA6Y,IAAAA,iBAAiB,GAAG,KAApB;;AACA,QAAI5xB,aAAa,CAAChR,IAAI,CAAC0b,EAAD,CAAL,CAAjB,EAA6B;AAC3BknB,MAAAA,iBAAiB,GAAG1c,IAAI,CAACtjB,eAAe,CAAC5C,IAAI,CAAC0b,EAAD,CAAL,EAAW+R,IAAX,CAAhB,CAAxB;AACD;;AACD,QAAIvtB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,KAA8B2e,SAAS,CAACwI,EAAD,CAAT,IAAiBinB,iBAA/C,CAAJ,EAAuE;AAAE;AACvEphB,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,MAAAA,QAAQ;AACRoE,MAAAA,KAAK;;AACL,UAAIp4B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD;;AACDwY,IAAAA,2BAA2B,GAAG,KAA9B;;AACA,QAAI9vB,aAAa,CAAC1S,KAAK,CAAC2b,EAAD,CAAN,CAAjB,EAA8B;AAC5B8F,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,MAAAA,QAAQ;AACR4pB,MAAAA,SAAS,GAAG5lB,GAAG,EAAf;;AACA,UAAI7I,KAAK,CAACyuB,SAAD,CAAT,EAAsB;AACpBJ,QAAAA,2BAA2B,GAAG,IAA9B;AACD;AACF;;AACD,QAAIriC,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6B+tC,2BAAjC,EAA8D;AAC5D,UAAIx9C,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,oEAAZ;AACD;;AACD3O,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAzgB,MAAAA,GAAG;;AACH,UAAIlW,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KAtQkB,CAuQnB;AACA;;;AACA,QAAIlf,SAAS,IAAIkH,KAAK,CAAC2J,EAAD,CAAlB,IAA0B1K,aAAa,CAAC2K,EAAD,CAA3C,EAAiD;AAC/C6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,MAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,UAAI4R,CAAC,GAAG,CAAJ,IAAS,CAAC0D,KAAK,CAAC1D,CAAD,CAAnB,EAAwB;AACtB,YAAI/pC,WAAJ,EAAiB;AACfkrC,UAAAA,OAAO,CAACE,GAAR,CAAY,wDAAZ;AACD;;AACD9S,QAAAA,SAAS,CAACyR,CAAD,CAAT;;AACA,YAAI/pC,WAAJ,EAAiB;AACfkrC,UAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD;AACF,KAtRkB,CAuRnB;;;AACA,QAAII,QAAQ,KAAK,CAAb,IAAkBjqB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAChyB,GAAD,CAApC,IAA6Ckc,aAAa,CAACkJ,EAAD,CAA9D,EAAoE;AAClE,UAAI52B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yEAAZ;AACD;;AACDpO,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAhY,MAAAA,MAAM;AACNqe,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,MAAAA,KAAK;AACLiL,MAAAA,QAAQ;AACR5G,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAqG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,MAAAA,QAAQ;AACRoE,MAAAA,KAAK;;AACL,UAAIp4B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KA1SkB,CA2SnB;;;AACA,QAAII,QAAQ,KAAK,CAAb,IAAkBjqB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAClkC,GAAD,CAApC,IAA6CouB,aAAa,CAACkJ,EAAD,CAA9D,EAAoE;AAClE,UAAI52B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yEAAZ;AACD;;AACDpO,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAyL,MAAAA,IAAI;AACJpF,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,MAAAA,KAAK;AACLiL,MAAAA,QAAQ;AACR5G,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAqG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,MAAAA,QAAQ;AACRoE,MAAAA,KAAK;;AACL,UAAIp4B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,KA9TkB,CA+TnB;;;AACA,QAAI5X,eAAe,CAACuJ,EAAD,CAAnB,EAAyB;AACvB,UAAI32B,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yCAAZ;AACD,OAHsB,CAIvB;AAEA;;;AACA,UAAIhd,SAAS,CAACwI,EAAD,CAAb,EAAmB;AACjB;AACA;AACA;AACA;AACA;AACA6F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAvY,QAAAA,SAAS;AACTyY,QAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,QAAAA,IAAI,CAAC5F,EAAD,CAAJ,CATiB,CAUjB;;AACA4F,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,QAAAA,QAAQ;AACRpS,QAAAA,MAAM;;AACN,YAAI,CAACuN,KAAK,CAACyH,EAAD,CAAV,EAAgB;AACd6F,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAlC,UAAAA,MAAM;AACN0D,UAAAA,KAAK;AACN;;AACD,YAAIp4B,WAAJ,EAAiB;AACfkrC,UAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD,OA/BsB,CAgCvB;;;AACA,UAAI/Y,aAAa,CAAC2K,EAAD,CAAjB,EAAuB;AACrB6F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAzgB,QAAAA,GAAG;AACHumB,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAwB,QAAAA,KAAK;AACL4E,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA1d,QAAAA,GAAG;AACHwjB,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,QAAAA,QAAQ;;AACR,YAAI5O,kBAAkB,IAAKiI,qBAAqB,CAACsJ,EAAD,CAArB,IAA6BlJ,QAAQ,CAACmJ,EAAD,CAAhE,EAAuE;AACrE;AACA;AACA;AACA;AACAgG,UAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,SAND,MAMO;AACL;AACAktB,UAAAA,IAAI,CAAC+G,MAAM,CAACj0B,EAAD,CAAP,CAAJ;AACD;;AACDqS,QAAAA,MAAM;AACNwW,QAAAA,KAAK;AACLpE,QAAAA,QAAQ,GAtBa,CAuBrB;AACA;AACA;AACA;AACA;;AACA,YAAI5a,iCAAJ,EAAuC;AACrC,cAAI5N,KAAI,CAACm3B,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,EAAiBxB,MAAM,CAACnmC,MAAD,CAAvB,CAAR,EAA0C;AACxC26B,YAAAA,GAAG;AACHkF,YAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,YAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,YAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,YAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;AACF;;AACD,YAAI5xB,WAAJ,EAAiB;AACfkrC,UAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE;AACD;;AACD;AACD;AACF,KA3YkB,CA6YnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAInD,cAAc,EAAlB,EAAsB;AACpB,UAAI7hC,WAAJ,EAAiB;AACfkrC,QAAAA,OAAO,CAACE,GAAR,CAAY,gCAAZ;AACD;;AACD;AACD;;AACD,QAAIprC,WAAJ,EAAiB;AACfkrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gCAAZ;AACD;;AACDlO,IAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,IAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,QAAI5xB,WAAJ,EAAiB;AACf,aAAOkrC,OAAO,CAACE,GAAR,CAAY,iBAAiBsS,SAAjB,GAA6B,KAA7B,GAAqCC,QAArC,GAAgD,IAAhD,GAAuDhb,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAxE,CAAP;AACD;AACF,GA3aD,CAh1gBU,CA6vhBV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;;AACA1M,EAAAA,SAAS,GAAG,mBAASyR,CAAT,EAAY;AACtB,QAAIf,CAAJ,EAAOoB,CAAP,EAAUtf,EAAV,EAAcuf,CAAd,EAAiBpZ,EAAjB,EAAqBsY,CAArB,EAAwBsC,EAAxB,EAA4BvN,IAA5B,EAAkCyN,IAAlC,EAAwCC,IAAxC;AACAhD,IAAAA,CAAC,GAAG,EAAJ;AACAoB,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ,CALsB,CAMtB;;AACAA,IAAAA,CAAC,GAAG9X,MAAM,CAACkF,EAAD,CAAN,GAAa,CAAjB,CAPsB,CAQtB;;AACAmG,IAAAA,UAAU,CAACyM,CAAC,IAAIQ,CAAC,GAAG,CAAR,CAAF,CAAV,CATsB,CAUtB;;AACApT,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,SAAKyT,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGiL,CAAxB,EAA4B,KAAKjL,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAzD,EAAgE8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,WAAKuf,CAAC,GAAGpZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAY9a,EAAE,IAAI8a,IAAlB,GAAyB9a,EAAE,IAAI8a,IAA3D,EAAkE1B,CAAC,GAAG,KAAK0B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7FwL,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAqG,QAAAA,YAAY,CAACqN,CAAD,CAAZ;AACAjS,QAAAA,KAAK;AACLuK,QAAAA,KAAK,CAACta,KAAK,GAAG+hB,CAAC,IAAIL,CAAC,GAAG,CAAR,CAAT,GAAsBM,CAAvB,CAAL,GAAiCrS,GAAG,EAApC;AACD;;AACDrB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACDqG,IAAAA,YAAY,CAAC+M,CAAD,CAAZ;AACA7iB,IAAAA,SAAS;AACTyP,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,SAAKoS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGzC,CAAxB,EAA4B,KAAKyC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F7C,MAAAA,CAAC,CAACoB,CAAD,CAAD,GAAO,CAAP;AACD;;AACD3N,IAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA3U,IAAAA,gBAAe,CAACwV,CAAD,EAAIQ,CAAJ,EAAOf,CAAP,EAAU,CAAV,EAAae,CAAb,CAAf;;AACA,WAAO7R,SAAS,CAACqR,CAAC,IAAIQ,CAAC,GAAG,CAAR,CAAF,CAAhB;AACD,GA9BD,CAtxhBU,CAszhBV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACAhW,EAAAA,gBAAe,GAAG,yBAASwV,CAAT,EAAYQ,CAAZ,EAAef,CAAf,EAAkBoB,CAAlB,EAAqBmL,CAArB,EAAwB;AACxC,QAAIzqB,EAAJ,EAAQuf,CAAR,EAAWpZ,EAAX,EAAe4a,EAAf,EAAmBvN,IAAnB,EAAyByN,IAAzB,EAA+BC,IAA/B;AACA3B,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAID,CAAC,GAAGb,CAAC,GAAG,CAAZ,EAAe;AACb,WAAKc,CAAC,GAAGvf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGiX,CAAxB,EAA4B,KAAKjX,IAAL,GAAYxT,EAAE,IAAIwT,IAAlB,GAAyBxT,EAAE,IAAIwT,IAA3D,EAAkE+L,CAAC,GAAG,KAAK/L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7Fke,QAAAA,CAAC,CAACoB,CAAD,CAAD,GAAOC,CAAP;;AACAtW,QAAAA,gBAAe,CAACwV,CAAD,EAAIQ,CAAJ,EAAOf,CAAP,EAAUoB,CAAC,GAAG,CAAd,EAAiBmL,CAAC,GAAGlL,CAArB,CAAf;AACD;;AACD;AACD;;AACDrB,IAAAA,CAAC,CAACoB,CAAD,CAAD,GAAOmL,CAAP,CAVwC,CAWxC;;AACA9Y,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,SAAK0T,CAAC,GAAGpZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGxC,CAAxB,EAA4B,KAAKwC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAzD,EAAgE1B,CAAC,GAAG,KAAK0B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F+L,MAAAA,YAAY,CAACgM,CAAC,CAACqB,CAAD,CAAF,CAAZ;AACAnjB,MAAAA,SAAS;AACTtF,MAAAA,MAAM;AACP,KAjBuC,CAkB5C;;;AACI,SAAKyoB,CAAC,GAAGwB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGzC,CAAxB,EAA4B,KAAKyC,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FpP,MAAAA,IAAI,CAACkG,KAAK,CAACta,KAAK,GAAGgiB,CAAC,IAAIN,CAAC,GAAG,CAAR,CAAT,GAAsBf,CAAC,CAACqB,CAAD,CAAxB,CAAN,CAAJ;AACArW,MAAAA,QAAQ;AACT;;AACD,WAAO1d,GAAG,EAAV;AACD,GAxBD,CAj1hBU,CA22hBV;AAEA;AAEA;;;AACAurB,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAI0K,SAAJ,EAAexC,CAAf;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAA,IAAAA,CAAC,GAAG5Z,aAAa,CAACyG,EAAD,CAAjB;;AACA,YAAQmT,CAAR;AACE,WAAK,CAAL;AACEwC,QAAAA,SAAS,GAAG,CAAZ;AACA;;AACF,WAAK,CAAL;AACEvP,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA,eAAO,CAAP;;AACF,WAAK,CAAL;AACEA,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA,eAAO,CAAP;;AACF,WAAK,CAAL;AACEP,QAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA,eAAO,CAAP;;AACF,WAAK,CAAL;AACEyR,QAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA0J,QAAAA,MAAM;AACN,eAAO,CAAP;AAhBJ;;AAkBA,QAAIvZ,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3Bg6B,MAAAA,EAAE,GAAGhb,GAAG,CAAC+a,EAAD,CAAR;;AACA,aAAOtJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjBkT,QAAAA,CAAC,GAAG5Z,aAAa,CAAChV,GAAG,CAAC0b,EAAD,CAAJ,CAAjB;;AACA,YAAIkT,CAAJ,EAAO;AACL;AACD;;AACDlT,QAAAA,EAAE,GAAGhb,GAAG,CAACgb,EAAD,CAAR;AACD;;AACD,cAAQkT,CAAR;AACE,aAAK,CAAL;AACE,iBAAO,CAAP;;AACF,aAAK,CAAL;AACE/M,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;;AACF,aAAK,CAAL;AACEA,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA;;AACF,aAAK,CAAL;AACEP,UAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA;;AACF,aAAK,CAAL;AACEyR,UAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA0J,UAAAA,MAAM;AAdV;;AAgBA+H,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAACthB,GAAG,CAAC0b,EAAD,CAAJ,CAAJ;AACAwM,MAAAA,QAAQ;AACRrd,MAAAA,WAAW;AACXgO,MAAAA,QAAQ;AACR,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAvDD,CAh3hBU,CAy6hBV;AAEA;AAEA;AAEA;AAEA;;;AACA9rB,EAAAA,UAAU,GAAG,sBAAW;AACtBu0B,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOs2B,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjB,QAAIsR,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAA,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGz8B,WAAjB,EAA8B;AAC5B01B,MAAAA,IAAI,CAAC,+BAAD,CAAJ;AACD;;AACD+G,IAAAA,CAAC,GAAGrR,QAAQ,CAACqR,CAAC,GAAG,CAAL,CAAZ;AACA,WAAO/M,YAAY,CAAC+M,CAAD,CAAnB;AACD,GATD;;AAWA1R,EAAAA,SAAS,GAAG,GAAZ;AAEAjb,EAAAA,OAAO,GAAG,KAAV,CAr8hBU,CAu8hBV;AACA;;AACAjV,EAAAA,UAAU,GAAG,sBAAW;AACtB+6B,IAAAA,6BAA6B,IAAIjtB,MAAM,CAAC4F,GAAG,CAAC8a,EAAD,CAAJ,EAAUiC,SAAV,CAAvC;AACA,WAAO6D,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAHD,CAz8hBU,CA88hBV;AACA;;;AACAjG,EAAAA,iBAAiB,GAAG,6BAAW;AAC7B86B,IAAAA,6BAA6B,IAAIjtB,MAAM,CAAC4F,GAAG,CAAC8a,EAAD,CAAJ,EAAU3mB,iBAAV,CAAvC;AACA,WAAOysB,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAHD,CAh9hBU,CAq9hBV;AACA;;;AACAhG,EAAAA,kBAAkB,GAAG,8BAAW;AAC9B66B,IAAAA,6BAA6B,IAAIjtB,MAAM,CAAC4F,GAAG,CAAC8a,EAAD,CAAJ,EAAU1mB,kBAAV,CAAvC;AACA,WAAOwsB,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAHD,CAv9hBU,CA49hBV;AACA;;;AACA9F,EAAAA,eAAe,GAAG,2BAAW;AAC3B26B,IAAAA,6BAA6B,IAAIjtB,MAAM,CAAC4F,GAAG,CAAC8a,EAAD,CAAJ,EAAUxmB,eAAV,CAAvC;AACA,WAAOssB,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAHD,CA99hBU,CAm+hBV;AACA;;;AACA/F,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIw1C,kBAAJ,CAD2B,CAE3B;AACA;AACA;;AACAA,IAAAA,kBAAkB,GAAGtZ,SAArB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACAtB,IAAAA,6BAA6B,IAAIjtB,MAAM,CAAC4F,GAAG,CAAC8a,EAAD,CAAJ,EAAUzmB,eAAV,CAAvC;AACAs0B,IAAAA,SAAS,GAAGsZ,kBAAZ;AACA,WAAOrhB,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GAVD,CAr+hBU,CAi/hBV;AACA;;;AACA7F,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAIu1C,WAAJ;AACAA,IAAAA,WAAW,GAAG9nC,MAAM,CAAC4F,GAAG,CAAC8a,EAAD,CAAJ,EAAUvmB,cAAV,CAApB;AACA8yB,IAAAA,6BAA6B,IAAI6a,WAAjC;AACA,WAAOthB,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD,GALD;;AAOA4H,EAAAA,MAAM,GAAG,gBAASy0B,CAAT,EAAYsT,eAAZ,EAA6B;AACpC,QAAIjK,WAAJ,EAAiBkK,aAAjB;AACAlK,IAAAA,WAAW,GAAG,EAAd;;AACA,WAAOzmB,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBjO,MAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACAvoC,MAAAA,IAAI;AACJy0B,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAimB,MAAAA,aAAa,GAAGrlB,SAAhB;;AACA,UAAIolB,eAAe,KAAK/tC,kBAAxB,EAA4C;AAC1C2oB,QAAAA,SAAS,GAAG3oB,kBAAZ;AACA8jC,QAAAA,WAAW,GAAGzX,SAAS,CAAC1F,EAAD,CAAvB;AACA2H,QAAAA,aAAa,CAACwV,WAAD,EAAcrnC,eAAd,CAAb;AACD,OAJD,MAIO,IAAIsxC,eAAe,KAAK9tC,eAAxB,EAAyC;AAC9C0oB,QAAAA,SAAS,GAAG1oB,eAAZ;AACA6jC,QAAAA,WAAW,GAAGzX,SAAS,CAAC1F,EAAD,CAAvB;AACA2H,QAAAA,aAAa,CAACwV,WAAD,EAAclnC,gBAAd,CAAb;AACD,OAJM,MAIA,IAAImxC,eAAe,KAAKhuC,iBAAxB,EAA2C;AAChD4oB,QAAAA,SAAS,GAAG5oB,iBAAZ;AACA+jC,QAAAA,WAAW,GAAGpb,YAAY,CAAC/B,EAAD,CAA1B;AACA2H,QAAAA,aAAa,CAACwV,WAAD,EAActnC,kBAAd,CAAb;AACD,OAJM,MAIA,IAAIuxC,eAAe,KAAK7tC,eAAxB,EAAyC;AAC9CyoB,QAAAA,SAAS,GAAGzoB,eAAZ;AACA4jC,QAAAA,WAAW,GAAGzX,SAAS,CAAC1F,EAAD,CAAvB;AACA2H,QAAAA,aAAa,CAACwV,WAAD,EAAcpnC,gBAAd,CAAb;AACD,OAJM,MAIA,IAAIqxC,eAAe,KAAK5tC,cAAxB,EAAwC;AAC7CwoB,QAAAA,SAAS,GAAGxoB,cAAZ;AACA2jC,QAAAA,WAAW,GAAGtY,WAAU,CAAC7E,EAAD,CAAxB;AACA2H,QAAAA,aAAa,CAACwV,WAAD,EAAcnnC,eAAd,CAAb;AACD;;AACDgsB,MAAAA,SAAS,GAAGqlB,aAAZ;AACAvT,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,QAAIjrC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gCAAgClI,6BAA5C;AACD;;AACD,WAAO6Q,WAAP;AACD,GApCD;;AAsCAxV,EAAAA,aAAa,GAAG,uBAAS2f,SAAT,EAAoBC,cAApB,EAAoC;AAClD,QAAIC,YAAJ;AACA9e,IAAAA,IAAI,CAAC,MAAM4e,SAAN,GAAkB,GAAnB,CAAJ;AACAE,IAAAA,YAAY,GAAGpmB,GAAG,EAAlB;AACA,WAAO2I,WAAW,CAAC6C,MAAM,CAAC2a,cAAD,CAAP,EAAyBC,YAAzB,CAAlB;AACD,GALD;;AAOAviB,EAAAA,SAAS,GAAG,mBAAS0P,CAAT,EAAY;AACtB,QAAI9rC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkClI,6BAA9C;AACD;;AACD,WAAOqI,CAAP;AACD,GALD;;AAOAxQ,EAAAA,UAAU,GAAG,oBAAS2U,CAAT,EAAY;AACvB,WAAOA,CAAP;AACD,GAFD;;AAIAnyB,EAAAA,iCAAiC,GAAG,2CAASmtB,CAAT,EAAY;AAC9C,QAAIuT,aAAJ,EAAmBI,eAAnB,EAAoCC,cAApC;AACAL,IAAAA,aAAa,GAAGrlB,SAAhB;AACAA,IAAAA,SAAS,GAAGzoB,eAAZ;AACAkuC,IAAAA,eAAe,GAAGjhC,OAAlB;AACAA,IAAAA,OAAO,GAAG,KAAV;AACAkhC,IAAAA,cAAc,GAAGljB,UAAU,CAACsP,CAAD,CAA3B,CAN8C,CAO9C;;AACA4T,IAAAA,cAAc,GAAGA,cAAc,CAACC,OAAf,CAAuB,IAAvB,EAA6B,KAA7B,CAAjB;AACA3lB,IAAAA,SAAS,GAAGqlB,aAAZ;AACA7gC,IAAAA,OAAO,GAAGihC,eAAV;;AACA,QAAI5+C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,0DAA0DlI,6BAAtE;AACD;;AACD,WAAOob,cAAP;AACD,GAfD;;AAiBAhiB,EAAAA,SAAS,GAAG,mBAASoO,CAAT,EAAY;AACtB,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACsP,CAAD,CAAzB;AACA,WAAOqJ,WAAP;AACD,GALD;;AAOAjZ,EAAAA,mBAAmB,GAAG,6BAASnE,EAAT,EAAa;AACjC,QAAIod,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAIjmB,UAAU,CAAC6I,EAAD,CAAV,IAAkBxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAApC,IAA6Cse,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAA/D,IAA6EiN,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAA/F,IAA0GiiB,KAAK,CAACiF,EAAD,EAAK+R,IAAL,CAAnH,EAA+H;AAAE;AAC/HqL,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACAgZ,MAAAA,WAAW,IAAI3Y,UAAU,CAACzE,EAAD,CAAzB;AACAod,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD,KAJD,MAIO;AACLgZ,MAAAA,WAAW,IAAI3Y,UAAU,CAACzE,EAAD,CAAzB,CADK,CAC0B;AAChC;;AACD,WAAOod,WAAP;AACD,GAXD;;AAaA7Y,EAAAA,mBAAmB,GAAG,6BAAStE,EAAT,EAAa;AACjC,QAAImd,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAIjmB,UAAU,CAAC8I,EAAD,CAAV,IAAkBzb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC3mC,GAAD,CAApC,IAA6Cse,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACt1B,QAAD,CAA/D,IAA6EiN,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/zB,KAAD,CAAnG,EAA4G;AAAE;AAC5GskC,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACAgZ,MAAAA,WAAW,IAAI3Y,UAAU,CAACxE,EAAD,CAAzB;AACAmd,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD,KAJD,MAIO;AACLgZ,MAAAA,WAAW,IAAI3Y,UAAU,CAACxE,EAAD,CAAzB,CADK,CAC0B;AAChC;;AACD,WAAOmd,WAAP;AACD,GAXD,CAvliBU,CAomiBV;AAEA;AAEA;AACA;;;AACA/Y,EAAAA,WAAW,GAAG,qBAAS0P,CAAT,EAAYpB,CAAZ,EAAe;AAC3B,QAAIyK,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACA5U,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAG1b,IAAI,CAACyvB,CAAD,CAAT;AACA9T,IAAAA,EAAE,GAAG5b,KAAK,CAAC0vB,CAAD,CAAV;;AACA,QAAIjc,UAAU,CAACmI,EAAD,CAAd,EAAoB;AAAE;AACpBmd,MAAAA,WAAW,IAAIjZ,mBAAmB,CAACnE,EAAD,CAAlC;AACA+H,MAAAA,OAAO;AACP,aAAOqV,WAAP;AACD;;AACD,QAAIzK,CAAC,KAAK,CAAV,EAAa;AAAE;AACbyK,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD,KAb0B,CAc3B;AACA;AACA;;;AACA0B,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAlC,IAAAA,MAAM;AACNkC,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACA+b,IAAAA,WAAW,IAAInY,YAAW,CAACjF,EAAD,EAAKC,EAAL,CAA1B;;AACA,QAAI0S,CAAC,KAAK,CAAV,EAAa;AACXyK,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD;;AACD2D,IAAAA,OAAO;AACP,WAAOqV,WAAP;AACD,GA1BD,CA1miBU,CAsoiBV;AACA;;;AACAnZ,EAAAA,cAAc,GAAG,wBAAS8P,CAAT,EAAY;AAC3B,QAAIqJ,WAAJ,EAAiBzK,CAAjB,EAAoBiD,SAApB,EAA+BxC,CAA/B;AACAgK,IAAAA,WAAW,GAAG,EAAd;AACA/rB,IAAAA,IAAI,GAAG,CAAP;AACA+hB,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,CAAC,GAAG,CAAJ;AACAnK,IAAAA,IAAI,GANuB,CAO3B;;AACA4K,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,CAAC,GAAG,CAAJ;AACA3S,IAAAA,EAAE,GAAG9a,GAAG,CAAC6uB,CAAD,CAAR;AACA9T,IAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,QAAIvG,UAAU,CAACwG,EAAD,CAAd,EAAoB;AAClB6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACArD,MAAAA,YAAY;;AACZnd,MAAAA,OAAM;;AACNygB,MAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAtD,MAAAA,cAAc;AACdwD,MAAAA,EAAE,GAAGkB,GAAG,EAAR;;AACA,UAAI,CAACzI,SAAS,CAACsH,EAAD,CAAd,EAAoB;AAAE;AACpBkT,QAAAA,CAAC;AACF;;AACD,UAAI,CAACxa,SAAS,CAACuH,EAAD,CAAd,EAAoB;AAAE;AACpBwS,QAAAA,CAAC;AACF;;AACD3S,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD,KAfD,MAeO;AACLE,MAAAA,EAAE,GAAGV,GAAL;AACAW,MAAAA,EAAE,GAAGX,GAAL,CAFK,CAEK;AACX;;AACD,WAAO7I,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBC,MAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,UAAIhK,cAAc,CAACiK,EAAD,CAAlB,EAAwB;AACtB0S,QAAAA,CAAC;AACF,OAFD,MAEO;AACLS,QAAAA,CAAC;AACF;;AACDpT,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD,KAvC0B,CAwC3B;;;AACA,QAAIiC,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,MAAAA,WAAW,IAAIlY,SAAS,CAAC,SAAD,CAAxB;AACD;;AACD,QAAIkO,CAAC,KAAK,CAAV,EAAa;AACXgK,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD,KAFD,MAEO;AACL/S,MAAAA,IAAI,GAAG,CAAP;AACA2O,MAAAA,EAAE,GAAG9a,GAAG,CAAC6uB,CAAD,CAAR;;AACA,UAAIta,UAAU,CAACjV,GAAG,CAACwb,EAAD,CAAJ,CAAd,EAAyB;AACvBA,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,UAAI,CAACpH,SAAS,CAACsH,EAAD,CAAd,EAAoB;AAAE;AACpBkd,QAAAA,WAAW,IAAI1Y,aAAY,CAACxE,EAAD,CAA3B;AACA7O,QAAAA,IAAI,GAAG,CAAP;AACD;;AACD,aAAOsF,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBC,QAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,YAAIhK,cAAc,CAACiK,EAAD,CAAlB,EAAwB;AACtB2V,UAAAA,SAAS,GAAG,CAAZ;AACD,SAFD,MAEO;AACL,cAAIvkB,IAAJ,EAAU;AACR+rB,YAAAA,WAAW,IAAIrY,mBAAmB,EAAlC;AACD;;AACDqY,UAAAA,WAAW,IAAI1Y,aAAY,CAACzE,EAAD,CAA3B;AACA5O,UAAAA,IAAI,GAAG,CAAP;AACD;;AACD2O,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF;;AACD,QAAIiC,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,MAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACD,KAFD,MAEO,IAAIjD,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AACtDuP,MAAAA,WAAW,IAAIlY,SAAS,CAAC,KAAD,CAAxB;AACD,KAFM,MAEA;AACLkY,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,QAAIyN,CAAC,GAAG,CAAJ,IAAS1Q,SAAS,KAAKzoB,eAA3B,EAA4C;AAC1C4jC,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD;;AACD/S,IAAAA,IAAI,GAAG,CAAP;AACA2O,IAAAA,EAAE,GAAG9a,GAAG,CAAC6uB,CAAD,CAAR;;AACA,QAAIta,UAAU,CAACjV,GAAG,CAACwb,EAAD,CAAJ,CAAd,EAAyB;AACvBA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,QAAI,CAACpH,SAAS,CAACuH,EAAD,CAAd,EAAoB;AAAE;AACpBid,MAAAA,WAAW,IAAI1Y,aAAY,CAACvE,EAAD,CAA3B;AACA9O,MAAAA,IAAI,GAAG,CAAP;AACD;;AACD,WAAOsF,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBC,MAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,UAAIhK,cAAc,CAACiK,EAAD,CAAlB,EAAwB;AACtB,YAAI5O,IAAJ,EAAU;AACR+rB,UAAAA,WAAW,IAAIrY,mBAAmB,EAAlC;AACD;;AACDqY,QAAAA,WAAW,IAAI/Y,WAAW,CAACpE,EAAD,EAAK0S,CAAL,CAA1B;AACAthB,QAAAA,IAAI,GAAG,CAAP;AACD;;AACD2O,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,QAAI2S,CAAC,GAAG,CAAJ,IAAS1Q,SAAS,KAAKzoB,eAA3B,EAA4C;AAC1C4jC,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD;;AACD,QAAInC,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD6C,IAAAA,OAAO;AACP,WAAOqV,WAAP;AACD,GA5GD;;AA8GA3Y,EAAAA,UAAU,GAAG,oBAASsP,CAAT,EAAY;AACvB,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAI/mB,KAAK,CAAC0d,CAAD,CAAT,EAAc;AACZA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,UAAItJ,YAAY,CAACjmB,GAAG,CAACuvB,CAAD,CAAJ,CAAZ,KAAyB,GAA7B,EAAkC;AAChCqJ,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,MAAAA,WAAW,IAAI5X,UAAU,CAAChhB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,YAAItJ,YAAY,CAACjmB,GAAG,CAACuvB,CAAD,CAAJ,CAAZ,KAAyB,GAA7B,EAAkC;AAChC,cAAI9R,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AAC/CuP,YAAAA,WAAW,IAAIlY,SAAS,CAAC,KAAD,CAAxB;AACD,WAFD,MAEO;AACLkY,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;AACF,SAND,MAMO;AACL,cAAIjD,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AAC/CuP,YAAAA,WAAW,IAAIlY,SAAS,CAAC,KAAD,CAAxB;AACD,WAFD,MAEO;AACLkY,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;AACF;;AACDkY,QAAAA,WAAW,IAAI5X,UAAU,CAAChhB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,KAxBD,MAwBO;AACL,UAAItJ,YAAY,CAACsJ,CAAD,CAAZ,KAAoB,GAAxB,EAA6B;AAC3BqJ,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,MAAAA,WAAW,IAAI5X,UAAU,CAACuO,CAAD,CAAzB;AACD;;AACD,WAAOqJ,WAAP;AACD,GAlCD;;AAoCA3S,EAAAA,YAAY,GAAG,sBAASsJ,CAAT,EAAY;AACzB,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+B+d,aAAa,CAAChR,IAAI,CAACyvB,CAAD,CAAL,CAA5C,IAAyDhZ,KAAK,CAACzW,IAAI,CAACyvB,CAAD,CAAL,EAAUhC,IAAV,CAAlE,EAAmF;AACjFqL,MAAAA,WAAW,IAAI,GAAf;AACD,KAFD,MAEO,IAAI9nB,aAAa,CAACye,CAAD,CAAb,IAAoBhZ,KAAK,CAACgZ,CAAD,EAAIhC,IAAJ,CAA7B,EAAwC;AAC7CqL,MAAAA,WAAW,IAAI,GAAf;AACD,KAFM,MAEA;AACLA,MAAAA,WAAW,IAAI,GAAf;AACD;;AACD,WAAOA,WAAP;AACD,GAXD;;AAaA5X,EAAAA,UAAU,GAAG,oBAASuO,CAAT,EAAY;AACvB,QAAIqJ,WAAJ,EAAiByK,KAAjB,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,wBAAjE;AACA5K,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+B+I,gBAAgB,CAACyzB,CAAD,CAAnD,EAAwD;AACtDqJ,MAAAA,WAAW,IAAInZ,cAAc,CAAC8P,CAAD,CAA7B;AACA,aAAOqJ,WAAP;AACD;;AACD,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/Bw8B,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP,CAD+B,CAE/B;;AACA,UAAIjc,UAAU,CAACtT,GAAG,CAACuvB,CAAD,CAAJ,CAAd,EAAwB;AACtB;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACDiU,MAAAA,wBAAwB,GAAG,KAA3B,CAP+B,CAQ/B;;AACA,UAAI1yB,aAAa,CAAC9Q,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzBiU,QAAAA,wBAAwB,GAAG,IAA3B;AACD,OAX8B,CAY/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,MAAAA,sBAAsB,GAAG,KAAzB;;AACA,UAAI7lB,SAAS,KAAKzoB,eAAd,IAAiCmd,MAAM,CAACzR,GAAG,CAAC6uB,CAAD,CAAJ,CAAvC,IAAmD1e,wBAAwB,CAAC7Q,GAAG,CAACuvB,CAAD,CAAJ,CAA/E,EAAyF;AACvF+T,QAAAA,sBAAsB,GAAG,IAAzB;AACAD,QAAAA,KAAK,GAAGrjC,GAAG,CAACuvB,CAAD,CAAH,CAAOvB,CAAP,CAASF,CAAT,CAAW6B,QAAX,EAAR;AACD;;AACD,UAAI2T,sBAAJ,EAA4B;AAC1BC,QAAAA,eAAe,GAAG3K,WAAlB;AACAA,QAAAA,WAAW,GAAG,EAAd;AACD,OAHD,MAGO;AACLA,QAAAA,WAAW,IAAI1Y,aAAY,CAAClgB,GAAG,CAACuvB,CAAD,CAAJ,CAA3B;AACD;;AACDA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP,CApC+B,CAqC/B;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB;AACA;AACA;AACA;AACA,YAAI9R,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC,cAAIwuC,wBAAJ,EAA8B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAIpkC,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAAC/zB,KAAD,CAAtB,EAA+B;AAC7B,kBAAIwc,aAAa,CAAC9Q,GAAG,CAACU,GAAG,CAACV,GAAG,CAACuvB,CAAD,CAAJ,CAAJ,CAAJ,CAAjB,EAAqC;AACnC,oBAAI,CAAC5c,UAAU,CAAC3S,GAAG,CAACU,GAAG,CAACA,GAAG,CAACV,GAAG,CAACuvB,CAAD,CAAJ,CAAJ,CAAJ,CAAJ,CAAf,EAAwC;AACtCqJ,kBAAAA,WAAW,IAAI,UAAf;AACD;AACF;AACF;AACF;AACF;;AACDA,QAAAA,WAAW,IAAIrY,mBAAmB,EAAlC;AACAqY,QAAAA,WAAW,IAAI1Y,aAAY,CAAClgB,GAAG,CAACuvB,CAAD,CAAJ,EAAS,KAAT,EAAgB,IAAhB,CAA3B;AACAiU,QAAAA,wBAAwB,GAAG,KAA3B;;AACA,YAAI1yB,aAAa,CAAC9Q,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzBiU,UAAAA,wBAAwB,GAAG,IAA3B;AACD;;AACDjU,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,UAAI+T,sBAAJ,EAA4B;AAC1B1K,QAAAA,WAAW,GAAG2K,eAAe,GAAG,SAAlB,GAA8B3K,WAA9B,GAA4C,IAA5C,GAAmDyK,KAAnD,GAA2D,GAAzE;AACD;AACF,KAvED,MAuEO;AACLzK,MAAAA,WAAW,IAAI1Y,aAAY,CAACqP,CAAD,CAA3B;AACD;;AACD,WAAOqJ,WAAP;AACD,GAlFD;;AAoFAjY,EAAAA,aAAa,GAAG,uBAAS4O,CAAT,EAAY;AAC1B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACAgZ,IAAAA,WAAW,IAAI3Y,UAAU,CAACsP,CAAD,CAAzB;AACAqJ,IAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACA,WAAOgZ,WAAP;AACD,GAPD;;AASAzY,EAAAA,wBAAwB,GAAG,kCAASoP,CAAT,EAAY;AACrC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACArJ,IAAAA,CAAC,GAAGzvB,IAAI,CAACyvB,CAAD,CAAR;;AACA,QAAI5c,UAAU,CAAC4c,CAAD,CAAV,IAAiBvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAAlC,IAA2Cse,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAA5D,IAA0EiN,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAA3F,IAAsG0L,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACx4B,SAAD,CAA3H,EAAwI;AACtI+oC,MAAAA,WAAW,IAAIjY,aAAa,CAAC4O,CAAD,CAA5B;AACD,KAFD,MAEO;AACLqJ,MAAAA,WAAW,IAAI3Y,UAAU,CAACsP,CAAD,CAAzB;AACD;;AACDqJ,IAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACA,WAAOgZ,WAAP;AACD,GAXD;;AAaAlb,EAAAA,eAAe,GAAG,yBAAS6R,CAAT,EAAY;AAC5B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,UAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,YAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAPD;;AASA9a,EAAAA,oBAAoB,GAAG,8BAASyR,CAAT,EAAY;AACjC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,UAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GATD;;AAWA1a,EAAAA,eAAe,GAAG,yBAASqR,CAAT,EAAY;AAC5B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,UAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACA,WAAOqJ,WAAP;AACD,GAPD;;AASA3a,EAAAA,iBAAiB,GAAG,2BAASsR,CAAT,EAAY;AAC9B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,MAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,IAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GARD;;AAUAla,EAAAA,iBAAiB,GAAG,2BAAS6Q,CAAT,EAAY;AAC9B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,WAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAND;;AAQA7a,EAAAA,iBAAiB,GAAG,2BAASwR,CAAT,EAAY;AAC9B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,WAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAND;;AAQA9Z,EAAAA,iBAAiB,GAAG,2BAASyQ,CAAT,EAAY;AAC9B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,WAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAND;;AAQAhb,EAAAA,oBAAoB,GAAG,8BAAS2R,CAAT,EAAY;AACjC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,YAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAND;;AAQAjb,EAAAA,oBAAoB,GAAG,8BAAS4R,CAAT,EAAY;AACjC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,YAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAND;;AAQA/a,EAAAA,oBAAoB,GAAG,8BAAS0R,CAAT,EAAY;AACjC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,YAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAND;;AAQAja,EAAAA,gBAAgB,GAAG,0BAAS4Q,CAAT,EAAY;AAC7B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,SAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAPD;;AASArZ,EAAAA,qBAAqB,GAAG,+BAASgQ,CAAT,EAAY;AAClC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;;AACA,QAAIvO,MAAM,CAACrS,IAAI,CAACyvB,CAAD,CAAL,CAAV,EAAqB;AACnBqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;;AACA,QAAIpd,MAAM,CAACrS,IAAI,CAACyvB,CAAD,CAAL,CAAV,EAAqB;AACnBqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAdD;;AAgBAtZ,EAAAA,uBAAuB,GAAG,iCAASiQ,CAAT,EAAY;AACpC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,YAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAPD;;AASApZ,EAAAA,kBAAkB,GAAG,4BAAS+P,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,WAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAPD;;AASAta,EAAAA,eAAe,GAAG,yBAASiR,CAAT,EAAY;AAC5B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;;AACA,QAAIvO,MAAM,CAACrS,IAAI,CAACyvB,CAAD,CAAL,CAAV,EAAqB;AACnBqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;;AACA,QAAIpd,MAAM,CAACrS,IAAI,CAACyvB,CAAD,CAAL,CAAV,EAAqB;AACnBqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAIlY,SAAS,CAAC,OAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAdD;;AAgBAva,EAAAA,iBAAiB,GAAG,2BAASkR,CAAT,EAAY;AAC9B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACAkY,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAPD;;AASA5a,EAAAA,kBAAkB,GAAG,4BAASuR,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ,EAAiB6K,YAAjB,EAA+BxU,CAA/B,EAAkCtf,EAAlC,EAAsC+zB,iBAAtC,EAAyDC,gBAAzD,EAA2ExgB,IAA3E,EAAiFygB,WAAjF,EAA8FC,WAA9F;AACAjL,IAAAA,WAAW,GAAG,EAAd;AACA6K,IAAAA,YAAY,GAAGzjC,GAAG,CAACU,GAAG,CAAC6uB,CAAD,CAAJ,CAAlB;AACAA,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAoU,IAAAA,gBAAgB,GAAGpU,CAAnB;AACAmU,IAAAA,iBAAiB,GAAG,CAApB;;AACA,WAAOvxB,MAAM,CAACzR,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAJ,CAAb,EAA4B;AAC1BmU,MAAAA,iBAAiB;AACjBE,MAAAA,WAAW,GAAGljC,GAAG,CAACA,GAAG,CAAC6uB,CAAD,CAAJ,CAAjB;AACAqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,SAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACU,GAAG,CAACkjC,WAAD,CAAJ,CAAJ,CAAzB;AACAhL,MAAAA,WAAW,IAAIlY,SAAS,CAAC,KAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAAC4jC,WAAD,CAAJ,CAAzB;AACAhL,MAAAA,WAAW,IAAIlY,SAAS,CAAC,QAAD,CAAxB;AACA6O,MAAAA,CAAC,GAAG7uB,GAAG,CAACkjC,WAAD,CAAP;AACD;;AACDhL,IAAAA,WAAW,IAAI3Y,UAAU,CAACwjB,YAAD,CAAzB;AACA7K,IAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACA6O,IAAAA,CAAC,GAAGoU,gBAAJ;;AACA,SAAK1U,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGugB,iBAAxB,EAA4C,KAAKvgB,IAAL,GAAYxT,EAAE,IAAIwT,IAAlB,GAAyBxT,EAAE,IAAIwT,IAA3E,EAAkF8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAA3G,EAA+G;AAC7Gk0B,MAAAA,WAAW,GAAGnjC,GAAG,CAAC6uB,CAAD,CAAjB;AACAqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,eAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAAC6jC,WAAD,CAAJ,CAAzB;;AACA,UAAI5U,CAAC,GAAGyU,iBAAR,EAA2B;AACzB9K,QAAAA,WAAW,IAAIlY,SAAS,CAAC,OAAD,CAAxB;AACD;;AACD6O,MAAAA,CAAC,GAAG7uB,GAAG,CAACA,GAAG,CAACmjC,WAAD,CAAJ,CAAP;AACD;;AACD,WAAOjL,WAAP;AACD,GA9BD;;AAgCAhY,EAAAA,YAAY,GAAG,sBAAS2O,CAAT,EAAY;AACzB,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAI/X,oBAAkB,CAAC0O,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB,CAA4B,CAA5B,CAAf;AACA,WAAOqJ,WAAP;AACD,GALD,CA5kjBU,CAmljBV;AACA;AACA;;;AACA/X,EAAAA,oBAAkB,GAAG,4BAAS0O,CAAT,EAAYL,CAAZ,EAAed,CAAf,EAAkB;AACrC,QAAIwK,WAAJ,EAAiB3J,CAAjB,EAAoBtf,EAApB,EAAwBmG,EAAxB,EAA4BqN,IAA5B,EAAkCyN,IAAlC,EAAwCkT,SAAxC;AACAlL,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB,CAHqC,CAIrC;AACA;AACA;AACA;AAEA;AACA;;AACA,QAAIwO,CAAC,GAAGK,CAAC,CAACtG,MAAF,CAASuF,IAAT,GAAgB,CAAxB,EAA2B;AACzB,WAAKS,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGoM,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,CAAxB,EAA0C,KAAK/L,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAvE,EAA8E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AAAA,kCACxFkR,oBAAkB,CAAC0O,CAAD,EAAIL,CAAC,GAAG,CAAR,EAAWd,CAAX,CADsE;;AAAA;;AACxGA,QAAAA,CADwG;AACrG0V,QAAAA,SADqG;AAEzGlL,QAAAA,WAAW,IAAIkL,SAAf,CAFyG,CAGzG;AACA;;AACA,YAAI7U,CAAC,KAAKM,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,IAAkB,CAA5B,EAA+B;AAC7B0J,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;AACF;AACF,KAVD,MAUO;AACX;AACA;AACM,WAAKuO,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,CAAxB,EAA0C,KAAK0B,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG8iB,QAAAA,WAAW,IAAI3Y,UAAU,CAACsP,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAcimB,CAAd,CAAD,CAAzB,CADyG,CAEzG;AACA;;AACA,YAAIa,CAAC,KAAKM,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,IAAkB,CAA5B,EAA+B;AAC7B0J,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD0N,QAAAA,CAAC;AACF;AACF;;AACDwK,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,WAAO,CAAC0N,CAAD,EAAIwK,WAAJ,CAAP;AACD,GApCD;;AAsCA7X,EAAAA,kBAAkB,GAAG,4BAASwO,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAIrJ,CAAC,CAACtG,MAAF,CAASuF,IAAT,IAAiB,CAArB,EAAwB;AACtBoK,MAAAA,WAAW,IAAI9X,yBAAwB,CAAC,IAAD,EAAOyO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAxB,CAAwC,CAAxC,CAAf;AACD;;AACD,WAAOqJ,WAAP;AACD,GAPD,CA5njBU,CAqojBV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9X,EAAAA,yBAAwB,GAAG,kCAASijB,UAAT,EAAqBxU,CAArB,EAAwBL,CAAxB,EAA2Bd,CAA3B,EAA8B;AACvD,QAAIwK,WAAJ,EAAiB3J,CAAjB,EAAoBtf,EAApB,EAAwBmG,EAAxB,EAA4BqN,IAA5B,EAAkCyN,IAAlC,EAAwCkT,SAAxC;AACAlL,IAAAA,WAAW,GAAG,EAAd,CAFuD,CAGvD;;AACA,QAAImL,UAAJ,EAAgB;AACdnL,MAAAA,WAAW,IAAI,mBAAf;AACD,KANsD,CAOvD;AACA;AACA;AACA;AAEA;AACA;;;AACA,QAAI1J,CAAC,GAAGK,CAAC,CAACtG,MAAF,CAASuF,IAAT,GAAgB,CAAxB,EAA2B;AACzB,WAAKS,CAAC,GAAGtf,EAAE,GAAG,CAAT,EAAYwT,IAAI,GAAGoM,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,CAAxB,EAA0C,KAAK/L,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAvE,EAA8E8L,CAAC,GAAG,KAAK9L,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AAAA,oCACxFmR,yBAAwB,CAAC,CAAD,EAAIyO,CAAJ,EAAOL,CAAC,GAAG,CAAX,EAAcd,CAAd,CADgE;;AAAA;;AACxGA,QAAAA,CADwG;AACrG0V,QAAAA,SADqG;AAEzGlL,QAAAA,WAAW,IAAIkL,SAAf;;AACA,YAAI7U,CAAC,KAAKM,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,IAAkB,CAA5B,EAA+B;AAC7B;AACA0J,UAAAA,WAAW,IAAIlY,SAAS,CAAC,QAAD,CAAxB;AACD;AACF;AACF,KATD,MASO;AACX;AACA;AACM,WAAKuO,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,CAAxB,EAA0C,KAAK0B,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG8iB,QAAAA,WAAW,IAAI3Y,UAAU,CAACsP,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAcimB,CAAd,CAAD,CAAzB,CADyG,CAEzG;;AACA,YAAIa,CAAC,KAAKM,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,IAAkB,CAA5B,EAA+B;AAC7B0J,UAAAA,WAAW,IAAIlY,SAAS,CAAC,KAAD,CAAxB;AACD;;AACD0N,QAAAA,CAAC;AACF;AACF,KAlCsD,CAmCvD;;;AACA,QAAI2V,UAAJ,EAAgB;AACdnL,MAAAA,WAAW,IAAI,iBAAf;AACD;;AACD,WAAO,CAACxK,CAAD,EAAIwK,WAAJ,CAAP;AACD,GAxCD;;AA0CA/Z,EAAAA,eAAe,GAAG,yBAAS0Q,CAAT,EAAY;AAC5B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,SAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACrgB,MAAM,CAAC2vB,CAAD,CAAP,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,KAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACtgB,OAAO,CAAC4vB,CAAD,CAAR,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,IAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAZD;;AAcAha,EAAAA,iBAAiB,GAAG,2BAAS2Q,CAAT,EAAY;AAC9B,QAAIqJ,WAAJ,EAAiBoL,IAAjB,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CzK,QAA/C;AACAuK,IAAAA,IAAI,GAAGlkC,IAAI,CAACyvB,CAAD,CAAX;AACAkK,IAAAA,QAAQ,GAAG55B,KAAK,CAAC0vB,CAAD,CAAhB;AACA0U,IAAAA,UAAU,GAAGrkC,MAAM,CAAC2vB,CAAD,CAAnB;AACA2U,IAAAA,UAAU,GAAGvkC,OAAO,CAAC4vB,CAAD,CAApB;AACAqJ,IAAAA,WAAW,GAAG,iBAAiB,OAAjB,GAA2Ba,QAA3B,GAAsC,IAAtC,GAA6C,sBAA7C,GAAsE,oBAAtE,GAA6FxZ,UAAU,CAACgkB,UAAD,CAAvG,GAAsH,IAAtH,GAA6H,oBAA7H,GAAoJhkB,UAAU,CAACikB,UAAD,CAA9J,GAA6K,IAA7K,GAAoL,QAApL,GAA+LzK,QAA/L,GAA0M,iBAA1M,GAA8NA,QAA9N,GAAyO,iBAAzO,GAA6PA,QAA7P,GAAwQ,QAAxQ,GAAmR,kBAAnR,GAAwSxZ,UAAU,CAAC+jB,IAAD,CAAlT,GAA2T,GAA3T,GAAiU,KAAjU,GAAyU,oBAAzU,GAAgW,MAA9W;AACA,WAAOpL,WAAP;AACD,GARD;;AAUAvZ,EAAAA,gBAAgB,GAAG,0BAASkQ,CAAT,EAAY;AAC7B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,8BAAd;AACArJ,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,WAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB;AACA;AACA;AACA,UAAI7uB,GAAG,CAAC6uB,CAAD,CAAH,KAAWlH,MAAM,CAACn1B,GAAD,CAArB,EAA4B;AAC1B0lC,QAAAA,WAAW,IAAI,GAAf;AACAA,QAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAqJ,QAAAA,WAAW,IAAI,gBAAf;AACAA,QAAAA,WAAW,IAAI,WAAf;AACA;AACD;;AACDA,MAAAA,WAAW,IAAI,GAAf;AACAA,MAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,MAAAA,WAAW,IAAI,WAAf;AACAA,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAqJ,MAAAA,WAAW,IAAI,WAAf,CAfgB,CAgBhB;AACA;;AACArJ,MAAAA,CAAC,GAAG9uB,IAAI,CAAC8uB,CAAD,CAAR;AACD;;AACDqJ,IAAAA,WAAW,GAAGA,WAAW,CAACI,SAAZ,CAAsB,CAAtB,EAAyBJ,WAAW,CAACtiB,MAAZ,GAAqB,CAA9C,CAAd;AACA,WAAOsiB,WAAW,IAAI,uBAAtB;AACD,GA1BD;;AA4BAxZ,EAAAA,kBAAkB,GAAG,4BAASmQ,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ,EAAiBuL,UAAjB;AACAvL,IAAAA,WAAW,GAAG,cAAd;AACArJ,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACA4U,IAAAA,UAAU,GAAG,CAAb;;AACA,WAAOhyB,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB;AACA;AACA;AACA,UAAI7uB,GAAG,CAAC6uB,CAAD,CAAH,KAAWlH,MAAM,CAACn1B,GAAD,CAArB,EAA4B;AAC1B0lC,QAAAA,WAAW,IAAI,QAAf;AACAA,QAAAA,WAAW,IAAI,aAAa3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAvB,GAAkC,IAAjD;AACAqJ,QAAAA,WAAW,IAAI,GAAf;AACA;AACD;;AACD,UAAIuL,UAAJ,EAAgB;AACdvL,QAAAA,WAAW,IAAI,QAAf;AACD;;AACDA,MAAAA,WAAW,IAAI,SAAS3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAnB,GAA8B,IAA7C;AACAqJ,MAAAA,WAAW,IAAI,aAAa3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAvB,GAAmC,IAAlD;AACAqJ,MAAAA,WAAW,IAAI,GAAf,CAfgB,CAgBhB;AACA;;AACAuL,MAAAA,UAAU;AACV5U,MAAAA,CAAC,GAAG9uB,IAAI,CAAC8uB,CAAD,CAAR;AACD;;AACDqJ,IAAAA,WAAW,IAAI,MAAf;AACA,WAAOA,WAAP;AACD,GA5BD;;AA8BAzZ,EAAAA,kBAAkB,GAAG,4BAASoQ,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,GAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI,KAAf;AACAA,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACA,WAAOqJ,WAAW,IAAI,GAAtB;AACD,GATD;;AAWA1Z,EAAAA,kBAAkB,GAAG,4BAASqQ,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,GAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI,SAAf;AACAA,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACA,WAAOqJ,WAAW,IAAI,GAAtB;AACD,GATD;;AAWA3Z,EAAAA,kBAAkB,GAAG,4BAASsQ,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,GAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI,KAAf;AACAA,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACA,WAAOqJ,WAAW,IAAI,GAAtB;AACD,GATD;;AAWA5Z,EAAAA,kBAAkB,GAAG,4BAASuQ,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,GAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI,SAAf;AACAA,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACA,WAAOqJ,WAAW,IAAI,GAAtB;AACD,GATD;;AAWA7Z,EAAAA,kBAAkB,GAAG,4BAASwQ,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,GAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI,KAAf;AACAA,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACA,WAAOqJ,WAAW,IAAI,GAAtB;AACD,GATD;;AAWAxa,EAAAA,iBAAiB,GAAG,2BAASmR,CAAT,EAAY;AAC9B,QAAIqJ,WAAJ,EAAiBoL,IAAjB,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CzK,QAA/C;AACAuK,IAAAA,IAAI,GAAGlkC,IAAI,CAACyvB,CAAD,CAAX;AACAkK,IAAAA,QAAQ,GAAG55B,KAAK,CAAC0vB,CAAD,CAAhB;AACA0U,IAAAA,UAAU,GAAGrkC,MAAM,CAAC2vB,CAAD,CAAnB;AACA2U,IAAAA,UAAU,GAAGvkC,OAAO,CAAC4vB,CAAD,CAApB;AACAqJ,IAAAA,WAAW,GAAG,iBAAiB,OAAjB,GAA2Ba,QAA3B,GAAsC,IAAtC,GAA6C,oBAA7C,GAAoExZ,UAAU,CAACgkB,UAAD,CAA9E,GAA6F,IAA7F,GAAoG,oBAApG,GAA2HhkB,UAAU,CAACikB,UAAD,CAArI,GAAoJ,IAApJ,GAA2J,QAA3J,GAAsKzK,QAAtK,GAAiL,iBAAjL,GAAqMA,QAArM,GAAgN,iBAAhN,GAAoOA,QAApO,GAA+O,QAA/O,GAA0P,KAA1P,GAAkQxZ,UAAU,CAAC+jB,IAAD,CAA5Q,GAAqR,KAArR,GAA6R,MAA3S;AACA,WAAOpL,WAAP;AACD,GARD;;AAUAza,EAAAA,gBAAgB,GAAG,0BAASoR,CAAT,EAAY;AAC7B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACArJ,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,WAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBqJ,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAOqJ,WAAP;AACD,GATD;;AAWAna,EAAAA,kBAAkB,GAAG,4BAAS8Q,CAAT,EAAY;AAC/B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,KAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,IAAf;AACA,WAAOA,WAAP;AACD,GARD;;AAUApa,EAAAA,mBAAmB,GAAG,6BAAS+Q,CAAT,EAAY;AAChC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,UAAd;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACrgB,MAAM,CAAC2vB,CAAD,CAAP,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,KAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACtgB,OAAO,CAAC4vB,CAAD,CAAR,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,IAAf;AACAA,IAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,IAAAA,WAAW,IAAI,GAAf;AACA,WAAOA,WAAP;AACD,GAZD;;AAcAra,EAAAA,qBAAqB,GAAG,+BAASgR,CAAT,EAAY;AAClC,QAAIqJ,WAAJ,EAAiBoL,IAAjB,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CzK,QAA/C;AACAuK,IAAAA,IAAI,GAAGlkC,IAAI,CAACyvB,CAAD,CAAX;AACAkK,IAAAA,QAAQ,GAAG55B,KAAK,CAAC0vB,CAAD,CAAhB;AACA0U,IAAAA,UAAU,GAAGrkC,MAAM,CAAC2vB,CAAD,CAAnB;AACA2U,IAAAA,UAAU,GAAGvkC,OAAO,CAAC4vB,CAAD,CAApB;AACAqJ,IAAAA,WAAW,GAAG,iBAAiB,OAAjB,GAA2Ba,QAA3B,GAAsC,IAAtC,GAA6C,0BAA7C,GAA0E,oBAA1E,GAAiGxZ,UAAU,CAACgkB,UAAD,CAA3G,GAA0H,IAA1H,GAAiI,oBAAjI,GAAwJhkB,UAAU,CAACikB,UAAD,CAAlK,GAAiL,IAAjL,GAAwL,QAAxL,GAAmMzK,QAAnM,GAA8M,iBAA9M,GAAkOA,QAAlO,GAA6O,iBAA7O,GAAiQA,QAAjQ,GAA4Q,QAA5Q,GAAuR,sBAAvR,GAAgTxZ,UAAU,CAAC+jB,IAAD,CAA1T,GAAmU,GAAnU,GAAyU,KAAzU,GAAiV,wBAAjV,GAA4W,MAA1X;AACA,WAAOpL,WAAP;AACD,GARD;;AAUAlZ,EAAAA,UAAU,GAAG,oBAAS6P,CAAT,EAAY;AACvB,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAI/mB,KAAK,CAAC/R,IAAI,CAACyvB,CAAD,CAAL,CAAL,IAAkBpwB,KAAK,CAACowB,CAAD,CAAL,KAAalH,MAAM,CAACt1B,QAAD,CAArC,IAAmDoM,KAAK,CAACowB,CAAD,CAAL,KAAalH,MAAM,CAAC/zB,KAAD,CAAtE,IAAiFsf,gBAAgB,CAAC9T,IAAI,CAACyvB,CAAD,CAAL,CAArG,EAAgH;AAC9GqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,KAJD,MAIO,IAAI5P,aAAa,CAAChR,IAAI,CAACyvB,CAAD,CAAL,CAAb,KAA2BhZ,KAAK,CAACzW,IAAI,CAACyvB,CAAD,CAAL,EAAUhC,IAAV,CAAL,IAAwB5a,UAAU,CAAC7S,IAAI,CAACyvB,CAAD,CAAL,CAA7D,CAAJ,EAA6E;AAClFqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAI1Y,aAAY,CAACpgB,IAAI,CAACyvB,CAAD,CAAL,CAA3B;AACAqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,KAJM,MAIA;AACLkY,MAAAA,WAAW,IAAI1Y,aAAY,CAACpgB,IAAI,CAACyvB,CAAD,CAAL,CAA3B;AACD;;AACD,WAAOqJ,WAAP;AACD,GAfD;;AAiBA5Y,EAAAA,cAAc,GAAG,wBAASuP,CAAT,EAAY;AAC3B,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAIzmB,MAAM,CAACtS,KAAK,CAAC0vB,CAAD,CAAN,CAAN,IAAoB5c,UAAU,CAAC9S,KAAK,CAAC0vB,CAAD,CAAN,CAA9B,IAA6Cze,aAAa,CAACjR,KAAK,CAAC0vB,CAAD,CAAN,CAAb,IAA2BhZ,KAAK,CAAC1W,KAAK,CAAC0vB,CAAD,CAAN,EAAWhC,IAAX,CAAjF,EAAoG;AAClGqL,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACAqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,KAJD,MAIO;AACLkY,MAAAA,WAAW,IAAI1Y,aAAY,CAACrgB,KAAK,CAAC0vB,CAAD,CAAN,CAA3B;AACD;;AACD,WAAOqJ,WAAP;AACD,GAXD;;AAaAnY,EAAAA,YAAW,GAAG,qBAASia,IAAT,EAAe0J,QAAf,EAAyB;AACrC,QAAIxL,WAAJ,EAAiByL,aAAjB,EAAgCC,WAAhC,EAA6CC,WAA7C;AACA3L,IAAAA,WAAW,GAAG,EAAd,CAFqC,CAGrC;;AACA,QAAIt0C,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiByK,IAAjB,GAAwB,GAAxB,GAA8B,aAA9B,GAA8C0J,QAA1D;AACD,KANoC,CAOrC;;;AACA,QAAIjwB,YAAY,CAACiwB,QAAD,CAAhB,EAA4B;AAC1B,UAAIx6B,MAAM,CAAC8wB,IAAD,EAAO,CAAP,CAAV,EAAqB;AACnB,YAAIz4B,OAAJ,EAAa;AACX22B,UAAAA,WAAW,IAAIlY,SAAS,CAAC,YAAD,CAAxB;AACA,iBAAOkY,WAAP;AACD;AACF,OALD,MAKO;AACL,YAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,UAAAA,WAAW,IAAIlY,SAAS,CAAC,SAAD,CAAxB;AACAkY,UAAAA,WAAW,IAAI3Y,UAAU,CAACya,IAAD,CAAzB;AACA9B,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,iBAAOkY,WAAP;AACD,SALD,MAKO,IAAI32B,OAAJ,EAAa;AAClB22B,UAAAA,WAAW,IAAIlY,SAAS,CAAC,YAAD,CAAxB;AACAkY,UAAAA,WAAW,IAAI3Y,UAAU,CAACya,IAAD,CAAzB;AACA9B,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,iBAAOkY,WAAP;AACD;AACF;AACF;;AACD,QAAKhvB,MAAM,CAACyE,WAAW,CAACga,MAAM,CAACjzB,mBAAD,CAAP,CAAZ,EAA2C,CAA3C,CAAP,IAAyDslC,IAAI,KAAKrS,MAAM,CAACpiC,CAAD,CAA5E,EAAiF;AAC/E,UAAIgc,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIlY,SAAS,CAAC,WAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI7Y,mBAAmB,CAACqkB,QAAD,CAAlC;AACAxL,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,eAAOkY,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIlY,SAAS,CAAC,KAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI3Y,UAAU,CAACmkB,QAAD,CAAzB;AACAxL,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,OAJD,MAIO;AACLkY,QAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI3Y,UAAU,CAACmkB,QAAD,CAAzB;AACAxL,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,aAAOkY,WAAP;AACD;;AACD,QAAI32B,OAAJ,EAAa;AACX22B,MAAAA,WAAW,IAAIlY,SAAS,CAAC,WAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAIjZ,mBAAmB,CAAC+a,IAAD,CAAlC;AACA9B,MAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAI7Y,mBAAmB,CAACqkB,QAAD,CAAlC;AACAxL,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,aAAOkY,WAAP;AACD;;AACD,QAAKhvB,MAAM,CAACyE,WAAW,CAACga,MAAM,CAAChzB,mBAAD,CAAP,CAAZ,EAA2C,CAA3C,CAAP,IAAyDqlC,IAAI,CAACzM,SAAL,KAAmB,GAAhF,EAAqF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIyM,IAAI,KAAKrS,MAAM,CAACpiC,CAAD,CAAnB,EAAwB;AACtB,YAAIqtB,UAAU,CAAC8wB,QAAD,CAAd,EAA0B;AACxB,cAAI3mB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,YAAD,CAAxB;AACD,WAFD,MAEO,IAAIjD,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AACtDuP,YAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACD,WAFM,MAEA;AACLkY,YAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACD;;AACD,cAAIvO,MAAM,CAACuoB,IAAD,CAAN,IAAgBjd,SAAS,KAAKzoB,eAAlC,EAAmD;AACjD4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,YAAAA,WAAW,IAAI3Y,UAAU,CAACya,IAAD,CAAzB;AACA9B,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,WAJD,MAIO;AACLkY,YAAAA,WAAW,IAAI3Y,UAAU,CAACya,IAAD,CAAzB;AACD;;AACD,cAAIjd,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,iBAAOkY,WAAP;AACD;;AACD,YAAI/kB,cAAc,CAACuwB,QAAD,CAAlB,EAA8B;AAC5B,cAAI3mB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,YAAD,CAAxB;AACD,WAFD,MAEO,IAAIjD,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AACtDuP,YAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACD,WAFM,MAEA;AACLkY,YAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACD;;AACDY,UAAAA,IAAI,CAAC8iB,QAAD,CAAJ;AACAviB,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,UAAAA,QAAQ;AACRyrB,UAAAA,WAAW,GAAGznB,GAAG,EAAjB;;AACA,cAAI1K,MAAM,CAACuoB,IAAD,CAAN,IAAgBjd,SAAS,KAAKzoB,eAAlC,EAAmD;AACjD4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,YAAAA,WAAW,IAAInY,YAAW,CAACia,IAAD,EAAO4J,WAAP,CAA1B;AACA1L,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,WAJD,MAIO;AACLkY,YAAAA,WAAW,IAAInY,YAAW,CAACia,IAAD,EAAO4J,WAAP,CAA1B;AACD;;AACD,cAAI7mB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,iBAAOkY,WAAP;AACD;AACF;;AACD,UAAIjmB,UAAU,CAACyxB,QAAD,CAAV,IAAwB3mB,SAAS,KAAKzoB,eAA1C,EAA2D;AACzD4jC,QAAAA,WAAW,IAAIlY,SAAS,CAAC,QAAD,CAAxB;AACAY,QAAAA,IAAI,CAAC8iB,QAAD,CAAJ;;AACAz+B,QAAAA,YAAW;;AACX0+B,QAAAA,aAAa,GAAGxnB,GAAG,EAAnB;;AACA,YAAI,CAACxI,SAAS,CAACgwB,aAAD,CAAd,EAA+B;AAC7BzL,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,UAAAA,WAAW,IAAI3Y,UAAU,CAACokB,aAAD,CAAzB;AACAzL,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAY,QAAAA,IAAI,CAAC8iB,QAAD,CAAJ;;AACAvpB,QAAAA,UAAS;;AACT0pB,QAAAA,WAAW,GAAG1nB,GAAG,EAAjB;AACAunB,QAAAA,QAAQ,GAAGG,WAAX;AACA3L,QAAAA,WAAW,IAAInY,YAAW,CAACia,IAAD,EAAO0J,QAAP,CAA1B;AACAxL,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,eAAOkY,WAAP;AACD;AACF;;AACD,QAAInb,SAAS,KAAKzoB,eAAd,IAAiCof,SAAS,CAACgwB,QAAD,CAA9C,EAA0D;AACxD;AACA;AACA;AACA;AACA;AACA;AACAxL,MAAAA,WAAW,IAAI3Y,UAAU,CAACya,IAAD,CAAzB;AACD,KARD,MAQO;AACL;AACA;AACA;AACA,UAAI7oB,KAAK,CAAC6oB,IAAD,CAAL,IAAe9mB,gBAAgB,CAAC8mB,IAAD,CAAnC,EAA2C;AACzC9B,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI3Y,UAAU,CAACya,IAAD,CAAzB;AACA9B,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,OAJD,MAIO,IAAI1gB,GAAG,CAAC06B,IAAD,CAAH,KAAcrS,MAAM,CAACt1B,QAAD,CAApB,IAAkCiN,GAAG,CAAC06B,IAAD,CAAH,KAAcrS,MAAM,CAAC/zB,KAAD,CAA1D,EAAmE;AACxE,YAAImpB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,QAAAA,WAAW,IAAI1Y,aAAY,CAACwa,IAAD,EAAO,IAAP,CAA3B;;AACA,YAAIjd,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;AACF,OARM,MAQA,IAAI5P,aAAa,CAAC4pB,IAAD,CAAb,KAAwBnkB,KAAK,CAACmkB,IAAD,EAAOnN,IAAP,CAAL,IAAqB5a,UAAU,CAAC+nB,IAAD,CAAvD,CAAJ,EAAoE;AACzE9B,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI1Y,aAAY,CAACwa,IAAD,CAA3B;AACA9B,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,OAJM,MAIA;AACLkY,QAAAA,WAAW,IAAI1Y,aAAY,CAACwa,IAAD,CAA3B;AACD,OAtBI,CAuBL;AACA;;;AACA,UAAIjd,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AAC/C;AACAuP,QAAAA,WAAW,IAAIlY,SAAS,CAACxD,SAAD,CAAxB;AACD,OAHD,MAGO;AACL0b,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,OA9BI,CA+BL;;;AACA,UAAIjD,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC;AACA;AACA;AACA,YAAIirB,UAAU,CAACmkB,QAAD,CAAV,CAAqB9tB,MAArB,GAA8B,CAAlC,EAAqC;AACnCsiB,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,UAAAA,WAAW,IAAI3Y,UAAU,CAACmkB,QAAD,CAAzB;AACAxL,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,SAJD,MAIO;AACLkY,UAAAA,WAAW,IAAI3Y,UAAU,CAACmkB,QAAD,CAAzB;AACD;AACF,OAXD,MAWO,IAAIjyB,MAAM,CAACiyB,QAAD,CAAN,IAAoBzxB,UAAU,CAACyxB,QAAD,CAA9B,IAA6CtzB,aAAa,CAACszB,QAAD,CAAb,IAA2B7tB,KAAK,CAAC6tB,QAAD,EAAW7W,IAAX,CAAjF,EAAoG;AACzGqL,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI3Y,UAAU,CAACmkB,QAAD,CAAzB;AACAxL,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,OAJM,MAIA;AACLkY,QAAAA,WAAW,IAAI1Y,aAAY,CAACkkB,QAAD,CAA3B;AACD;AACF;;AACD,WAAOxL,WAAP;AACD,GA5LD;;AA8LAvY,EAAAA,oBAAoB,GAAG,8BAASkP,CAAT,EAAY;AACjC,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACArJ,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,QAAInwB,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAAC3mC,GAAD,CAAlB,IAA2B0d,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAACt1B,QAAD,CAA7C,IAA2DqM,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAAC/zB,KAAD,CAA7E,IAAwF8K,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAACx4B,SAAD,CAA9G,EAA2H;AACzH+oC,MAAAA,WAAW,IAAIjY,aAAa,CAAC3gB,GAAG,CAACuvB,CAAD,CAAJ,CAA5B;AACD,KAFD,MAEO;AACLqJ,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACD;;AACDqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA6O,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,QAAIpd,MAAM,CAACod,CAAD,CAAV,EAAe;AACbqJ,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBqJ,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF;;AACDqJ,IAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACA,WAAOkY,WAAP;AACD,GAtBD;;AAwBA1Y,EAAAA,aAAY,GAAG,sBAASqP,CAAT,EAAYiV,UAAZ,EAAwBC,eAAxB,EAAyC;AACtD,QAAI7L,WAAJ,EAAiB8B,IAAjB,EAAuB0J,QAAvB,EAAiCM,KAAjC,EAAwCC,UAAxC,EAAoDzO,QAApD,CADsD,CAEtD;;AACA0C,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAI9nB,aAAa,CAACye,CAAD,CAAjB,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIkV,eAAe,IAAIluB,KAAK,CAACgZ,CAAD,EAAIhC,IAAJ,CAA5B,EAAuC;AACrCqL,QAAAA,WAAW,IAAI,GAAf;AACD;;AACDA,MAAAA,WAAW,IAAIpY,YAAY,CAAC+O,CAAD,EAAIkV,eAAJ,CAA3B;;AACA,UAAIA,eAAe,IAAIluB,KAAK,CAACgZ,CAAD,EAAIhC,IAAJ,CAA5B,EAAuC;AACrCqL,QAAAA,WAAW,IAAI,GAAf;AACD;;AACD,aAAOA,WAAP;AACD;;AACD,QAAIvjB,KAAK,CAACka,CAAD,CAAT,EAAc;AACZqJ,MAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACAkY,MAAAA,WAAW,IAAIlY,SAAS,CAAC6O,CAAC,CAACrB,GAAH,CAAxB;AACA0K,MAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACA,aAAOkY,WAAP;AACD;;AACD,QAAIpjB,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,UAAI9R,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI7X,kBAAkB,CAACwO,CAAD,CAAjC;AACD,OAFD,MAEO;AACLqJ,QAAAA,WAAW,IAAIhY,YAAY,CAAC2O,CAAD,CAA3B;AACD;;AACD,aAAOqJ,WAAP;AACD;;AACD,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/B,UAAI,CAACyxC,UAAL,EAAiB;AACf,YAAIve,YAAY,CAACsJ,CAAD,CAAZ,KAAoB,GAApB,IAA2B9R,SAAS,KAAKzoB,eAA7C,EAA8D;AAC5D,cAAIyoB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,WAAD,CAAxB;AACD,WAFD,MAEO;AACLkY,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;AACF;AACF;;AACDkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACsP,CAAD,CAAzB;;AACA,UAAI,CAACiV,UAAL,EAAiB;AACf,YAAIve,YAAY,CAACsJ,CAAD,CAAZ,KAAoB,GAApB,IAA2B9R,SAAS,KAAKzoB,eAA7C,EAA8D;AAC5D,cAAIyoB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,YAAAA,WAAW,IAAIlY,SAAS,CAAC,aAAD,CAAxB;AACD,WAFD,MAEO;AACLkY,YAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;AACF;AACF;;AACD,aAAOkY,WAAP;AACD,KArBD,MAqBO,IAAI/mB,KAAK,CAAC0d,CAAD,CAAT,EAAc;AACnB,UAAI,CAACiV,UAAL,EAAiB;AACf5L,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACDkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACsP,CAAD,CAAzB;;AACA,UAAI,CAACiV,UAAL,EAAiB;AACf5L,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,aAAOkY,WAAP;AACD;;AACD,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAArB,EAA8B;AAC5BomC,MAAAA,IAAI,GAAG56B,IAAI,CAACyvB,CAAD,CAAX;AACA6U,MAAAA,QAAQ,GAAGvkC,KAAK,CAAC0vB,CAAD,CAAhB;AACAqJ,MAAAA,WAAW,IAAInY,YAAW,CAACia,IAAD,EAAO0J,QAAP,CAA1B;AACA,aAAOxL,WAAP;AACD,KA1EqD,CA2EtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACj4B,QAAD,CAArB,EAAiC;AAC/Bs0C,MAAAA,KAAK,GAAG5kC,IAAI,CAACyvB,CAAD,CAAZ;;AACA,UAAI,CAACttB,OAAL,EAAc;AACZ0iC,QAAAA,UAAU,GAAG9kC,KAAK,CAAC0vB,CAAD,CAAlB;AACAqJ,QAAAA,WAAW,IAAIlY,SAAS,CAAC,WAAD,CAAxB;;AACA,YAAIp8B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,qCAAqClI,6BAAjD;AACD;;AACDmO,QAAAA,QAAQ,GAAG5V,WAAU,CAACqkB,UAAD,CAArB;AACA/L,QAAAA,WAAW,IAAI1C,QAAf;AACA0C,QAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACD;;AACDkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACykB,KAAD,CAAzB;AACA,aAAO9L,WAAP;AACD;;AACD,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACn0B,OAAD,CAArB,EAAgC;AAC9B0kC,MAAAA,WAAW,IAAI3Y,UAAU,CAAC9gB,KAAK,CAACowB,CAAD,CAAN,CAAzB;;AACA,UAAI9R,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIlY,SAAS,CAAC,gBAAD,CAAxB;AACD,OAFD,MAEO;AACL,YAAIjD,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AAC/CuP,UAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACD,SAFD,MAEO;AACLkY,UAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACD;AACF;;AACDkY,MAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACU,GAAG,CAACZ,IAAI,CAACyvB,CAAD,CAAL,CAAJ,CAAJ,CAAzB;AACA,aAAOqJ,WAAP;AACD;;AACD,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC13B,KAAD,CAAjB,IAA4B2kB,QAAQ,CAACxV,IAAI,CAACyvB,CAAD,CAAL,CAAxC,EAAmD;AACjDqJ,MAAAA,WAAW,IAAIvY,oBAAoB,CAACkP,CAAD,CAAnC;AACA,aAAOqJ,WAAP;AACD;;AACD,QAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACx4B,SAAD,CAArB,EAAkC;AAChC+oC,MAAAA,WAAW,IAAIzY,wBAAwB,CAACoP,CAAD,CAAvC;AACA,aAAOqJ,WAAP;AACD,KAHD,MAGO,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC5mC,GAAD,CAAjB,IAA0Bg8B,SAAS,KAAKzoB,eAA5C,EAA6D;AAClE4jC,MAAAA,WAAW,IAAIlb,eAAe,CAAC6R,CAAD,CAA9B;AACA,aAAOqJ,WAAP;AACD,KAHM,MAGA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC5xB,IAAD,CAAjB,IAA2BgnB,SAAS,KAAKzoB,eAA7C,EAA8D;AACnE;AACA4jC,MAAAA,WAAW,IAAIja,gBAAgB,CAAC4Q,CAAD,CAA/B;AACA,aAAOqJ,WAAP;AACD,KAJM,MAIA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACvvB,SAAD,CAArB,EAAkC;AACvC,UAAI2kB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIrZ,qBAAqB,CAACgQ,CAAD,CAApC;AACA,eAAOqJ,WAAP;AACD,OAHD,MAGO,IAAI32B,OAAJ,EAAa;AAClB22B,QAAAA,WAAW,IAAItZ,uBAAuB,CAACiQ,CAAD,CAAtC;AACA,eAAOqJ,WAAP;AACD;AACF,KARM,MAQA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC1uB,IAAD,CAArB,EAA6B;AAClC,UAAIsI,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIpZ,kBAAkB,CAAC+P,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACv3B,GAAD,CAArB,EAA4B;AACjC,UAAI2sB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIta,eAAe,CAACiR,CAAD,CAA9B;AACA,eAAOqJ,WAAP;AACD,OAHD,MAGO,IAAI32B,OAAJ,EAAa;AAClB22B,QAAAA,WAAW,IAAIva,iBAAiB,CAACkR,CAAD,CAAhC;AACA,eAAOqJ,WAAP;AACD;AACF,KARM,MAQA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACzlC,QAAD,CAAjB,IAA+B66B,SAAS,KAAKzoB,eAAjD,EAAkE;AACvE4jC,MAAAA,WAAW,IAAI9a,oBAAoB,CAACyR,CAAD,CAAnC;AACA,aAAOqJ,WAAP;AACD,KAHM,MAGA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACnjC,MAAD,CAAjB,IAA6Bu4B,SAAS,KAAKzoB,eAA/C,EAAgE;AACrE4jC,MAAAA,WAAW,IAAI5a,kBAAkB,CAACuR,CAAD,CAAjC;AACA,aAAOqJ,WAAP;AACD,KAHM,MAGA,IAAI5lB,YAAY,CAACuc,CAAD,CAAhB,EAAqB;AAC1B,UAAI9R,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI1a,eAAe,CAACqR,CAAD,CAA9B;AACA,eAAOqJ,WAAP;AACD,OAHD,MAGO,IAAI32B,OAAJ,EAAa;AAClB22B,QAAAA,WAAW,IAAI3a,iBAAiB,CAACsR,CAAD,CAAhC;AACA,eAAOqJ,WAAP;AACD;AACF,KARM,MAQA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAChyB,GAAD,CAArB,EAA4B;AACjC,UAAI4L,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIla,iBAAiB,CAAC6Q,CAAD,CAAhC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAClkC,GAAD,CAArB,EAA4B;AACjC,UAAI8d,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI7a,iBAAiB,CAACwR,CAAD,CAAhC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACpwB,GAAD,CAArB,EAA4B;AACjC,UAAIgK,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI9Z,iBAAiB,CAACyQ,CAAD,CAAhC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACrmC,MAAD,CAArB,EAA+B;AACpC,UAAIigB,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIhb,oBAAoB,CAAC2R,CAAD,CAAnC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACvmC,MAAD,CAArB,EAA+B;AACpC,UAAImgB,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIjb,oBAAoB,CAAC4R,CAAD,CAAnC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACnmC,MAAD,CAArB,EAA+B;AACpC,UAAI+f,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI/a,oBAAoB,CAAC0R,CAAD,CAAnC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACxxB,GAAD,CAArB,EAA4B;AACjC,UAAI4mB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI/Z,eAAe,CAAC0Q,CAAD,CAA9B;AACA,eAAOqJ,WAAP;AACD,OAHD,MAGO,IAAI32B,OAAJ,EAAa;AAClB22B,QAAAA,WAAW,IAAIha,iBAAiB,CAAC2Q,CAAD,CAAhC;AACA,eAAOqJ,WAAP;AACD,OAPgC,CAQnC;AACA;AACA;AACA;;AACC,KAZM,MAYA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/yB,OAAD,CAArB,EAAgC;AACrC,UAAImoB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIpa,mBAAmB,CAAC+Q,CAAD,CAAlC;AACA,eAAOqJ,WAAP;AACD,OAHD,MAGO,IAAI32B,OAAJ,EAAa;AAClB22B,QAAAA,WAAW,IAAIra,qBAAqB,CAACgR,CAAD,CAApC;AACA,eAAOqJ,WAAP;AACD;AACF,KARM,MAQA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACn4B,GAAD,CAArB,EAA4B;AACjC,UAAI+R,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIxa,iBAAiB,CAACmR,CAAD,CAAhC;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC1iC,EAAD,CAArB,EAA2B;AAChC,UAAIsc,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIza,gBAAgB,CAACoR,CAAD,CAA/B;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAChwB,IAAD,CAArB,EAA6B;AAClC,UAAI4J,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIxZ,kBAAkB,CAACmQ,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIvZ,gBAAgB,CAACkQ,CAAD,CAA/B;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3vB,MAAD,CAArB,EAA+B;AACpC,UAAIuJ,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,OAAO3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAjB,GAA6B,OAA7B,GAAuCtP,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAjD,GAA8D,IAA7E;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIzZ,kBAAkB,CAACoQ,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC5vB,MAAD,CAArB,EAA+B;AACpC,UAAIwJ,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,OAAO3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAjB,GAA6B,QAA7B,GAAwCtP,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAlD,GAA+D,IAA9E;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI1Z,kBAAkB,CAACqQ,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC7vB,MAAD,CAArB,EAA+B;AACpC,UAAIyJ,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,OAAO3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAjB,GAA6B,OAA7B,GAAuCtP,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAjD,GAA8D,IAA7E;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI3Z,kBAAkB,CAACsQ,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC9vB,MAAD,CAArB,EAA+B;AACpC,UAAI0J,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,OAAO3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAjB,GAA6B,QAA7B,GAAwCtP,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAlD,GAA+D,IAA9E;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI5Z,kBAAkB,CAACuQ,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/vB,MAAD,CAArB,EAA+B;AACpC,UAAI2J,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,OAAO3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAjB,GAA6B,SAA7B,GAAyCtP,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAnD,GAAgE,IAA/E;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI7Z,kBAAkB,CAACwQ,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACp4B,KAAD,CAArB,EAA8B;AACnC,UAAIgS,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,gBAAgB3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAA1B,GAAsC,GAArD;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI,gBAAgB3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAA1B,GAAsC,aAArD;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAChlC,OAAD,CAArB,EAAgC;AACrC,UAAI4e,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,kBAAkB3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAA5B,GAAwC,GAAvD;AACA,eAAOqJ,WAAP;AACD;;AACD,UAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAI,eAAe3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB,GAAqC,YAApD;AACA,eAAOqJ,WAAP;AACD;AACF,KATM,MASA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACxyB,KAAD,CAArB,EAA8B;AACnC,UAAIoM,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAI,gBAAgB3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAA1B,GAAsC,GAArD;AACA,eAAOqJ,WAAP;AACD;AACF,KALM,MAKA,IAAI54B,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACryB,IAAD,CAArB,EAA6B;AAClC,UAAIiM,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIna,kBAAkB,CAAC8Q,CAAD,CAAjC;AACA,eAAOqJ,WAAP;AACD,OAHD,MAGO;AACLA,QAAAA,WAAW,IAAI3Y,UAAU,CAACngB,IAAI,CAACyvB,CAAD,CAAL,CAAzB;AACAqJ,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,QAAAA,WAAW,IAAI3Y,UAAU,CAACpgB,KAAK,CAAC0vB,CAAD,CAAN,CAAzB;AACA,eAAOqJ,WAAP;AACD;AACF;;AACD,QAAIzmB,MAAM,CAACod,CAAD,CAAV,EAAe;AACb;AACA;AACA;AACA;AACAqJ,MAAAA,WAAW,IAAI1Y,aAAY,CAAClgB,GAAG,CAACuvB,CAAD,CAAJ,CAA3B;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,UAAI,CAACiV,UAAL,EAAiB;AACf5L,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,UAAIvO,MAAM,CAACod,CAAD,CAAV,EAAe;AACbqJ,QAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,eAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBqJ,UAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACAkY,UAAAA,WAAW,IAAI3Y,UAAU,CAACjgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,UAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF;;AACD,UAAI,CAACiV,UAAL,EAAiB;AACf5L,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,aAAOkY,WAAP;AACD;;AACD,QAAIrJ,CAAC,KAAKlH,MAAM,CAAChjC,UAAD,CAAhB,EAA8B;AAC5BuzC,MAAAA,WAAW,IAAIhZ,UAAU,CAAC,GAAD,CAAzB;AACD,KAFD,MAEO,IAAI2P,CAAC,KAAKlH,MAAM,CAACpiC,CAAD,CAAhB,EAAqB;AAC1B,UAAIgc,OAAJ,EAAa;AACX22B,QAAAA,WAAW,IAAIlY,SAAS,CAAC,QAAD,CAAxB;AACD,OAFD,MAEO;AACLkY,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;AACF,KANM,MAMA,IAAI6O,CAAC,KAAKlH,MAAM,CAACj0B,EAAD,CAAhB,EAAsB;AAC3B,UAAIqpB,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC4jC,QAAAA,WAAW,IAAIlY,SAAS,CAAC,MAAD,CAAxB;AACD,OAFD,MAEO;AACLkY,QAAAA,WAAW,IAAIlY,SAAS,CAAC,IAAD,CAAxB;AACD;AACF,KANM,MAMA;AACLkY,MAAAA,WAAW,IAAIlY,SAAS,CAAChS,aAAa,CAAC6gB,CAAD,CAAd,CAAxB;AACD;;AACD,WAAOqJ,WAAP;AACD,GAtWD;;AAwWAtY,EAAAA,WAAU,GAAG,oBAASiP,CAAT,EAAY;AACvB,QAAIqJ,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,YAAQrJ,CAAC,CAACnB,CAAV;AACE,WAAKnqC,IAAL;AACE20C,QAAAA,WAAW,IAAI,GAAf;AACAA,QAAAA,WAAW,IAAItY,WAAU,CAACtgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;;AACA,YAAIA,CAAC,KAAK7uB,GAAG,CAAC6uB,CAAD,CAAT,IAAgBA,CAAC,KAAKlH,MAAM,CAACn1B,GAAD,CAAhC,EAAuC;AACrC68B,UAAAA,OAAO,CAACE,GAAR,CAAY,kBAAZ;AACA;AACD;;AACDV,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,eAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBqJ,UAAAA,WAAW,IAAI,GAAf;AACAA,UAAAA,WAAW,IAAItY,WAAU,CAACtgB,GAAG,CAACuvB,CAAD,CAAJ,CAAzB;AACAA,UAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,cAAIA,CAAC,KAAK7uB,GAAG,CAAC6uB,CAAD,CAAT,IAAgBA,CAAC,KAAKlH,MAAM,CAACn1B,GAAD,CAAhC,EAAuC;AACrC68B,YAAAA,OAAO,CAACE,GAAR,CAAY,kBAAZ;AACA;AACD;AACF;;AACD,YAAIV,CAAC,KAAKlH,MAAM,CAACn1B,GAAD,CAAhB,EAAuB;AACrB0lC,UAAAA,WAAW,IAAI,KAAf;AACAA,UAAAA,WAAW,IAAItY,WAAU,CAACiP,CAAD,CAAzB;AACD;;AACDqJ,QAAAA,WAAW,IAAI,GAAf;AACA;;AACF,WAAKjiC,GAAL;AACE;AACAiiC,QAAAA,WAAW,IAAIrJ,CAAC,CAACrB,GAAjB;AACA;AACF;;AACA,WAAKt6B,GAAL;AACA,WAAK/N,MAAL;AACE+yC,QAAAA,WAAW,IAAIpY,YAAY,CAAC+O,CAAD,EAAI,IAAJ,CAA3B;AACA;;AACF,WAAKz4B,GAAL;AACE8hC,QAAAA,WAAW,IAAIlqB,aAAa,CAAC6gB,CAAD,CAA5B;AACA;;AACF;AACEqJ,QAAAA,WAAW,IAAI,UAAf;AArCJ;;AAuCA,WAAOA,WAAP;AACD,GA3CD;;AA6CArY,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B,QAAIqY,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;;AACA,QAAInb,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC,UAAIyoB,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAtC,EAAiD;AAC/CuP,QAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,OAFD,MAEO;AACL,eAAOkY,WAAP;AACD;AACF;;AACD,QAAInb,SAAS,KAAK1oB,eAAd,IAAiC,CAACs0B,SAAlC,IAA+C,CAACpnB,OAApD,EAA6D;AAC3D22B,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD,KAFD,MAEO;AACLkY,MAAAA,WAAW,IAAIlY,SAAS,CAAC,GAAD,CAAxB;AACD;;AACD,WAAOkY,WAAP;AACD,GAhBD;;AAkBApnB,EAAAA,cAAc,GAAG,wBAAS+d,CAAT,EAAY;AAC3B,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4BwL,IAAI,CAACyvB,CAAD,CAAJ,KAAYlH,MAAM,CAACpiC,CAAD,CAA9C,IAAqD4tB,cAAc,CAAChU,KAAK,CAAC0vB,CAAD,CAAN,CAAvE,EAAmF;AACjF,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND,CAnhlBU,CA2hlBV;AACA;;;AACAzzB,EAAAA,gBAAgB,GAAG,0BAASyzB,CAAT,EAAY;AAC7B,QAAIvB,CAAJ;AACAuB,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP,CAF6B,CAG7B;AACA;;AACA,WAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBvB,MAAAA,CAAC,GAAGhuB,GAAG,CAACuvB,CAAD,CAAP;;AACA,UAAI/d,cAAc,CAACwc,CAAD,CAAlB,EAAuB;AACrB,eAAO,CAAP;AACD;;AACDuB,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAbD;AAeA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOE;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAz1B,EAAAA,IAAI,GAAG,KAAP;;AAEAgV,EAAAA,KAAK,GAAI,YAAW;AAAA,QACZA,KADY;AAAA;;AAAA;AAAA;;AACJ;AAEdA,IAAAA,KAAK,CAAC8e,SAAN,CAAgB2G,CAAhB,GAAoB,CAApB;AAEAzlB,IAAAA,KAAK,CAAC8e,SAAN,CAAgB0B,CAAhB,GAAoB,CAApB;AAEAxgB,IAAAA,KAAK,CAAC8e,SAAN,CAAgB2J,CAAhB,GAAoB,CAApB;AAEA,WAAOzoB,KAAP;AAED,GAXO,CAWLif,IAXK,CAWA,IAXA,CAAR,CArllBU,CAkmlBV;;;AACAjtB,EAAAA,OAAO,GAAG,EAAV;;AAEA,OAAKD,YAAY,GAAG8O,EAAE,GAAG,CAApB,EAAuBwT,IAAI,GAAGrpB,IAAnC,EAA0C,KAAKqpB,IAAL,GAAYxT,EAAE,GAAGwT,IAAjB,GAAwBxT,EAAE,GAAGwT,IAAvE,EAA8EtiB,YAAY,GAAG,KAAKsiB,IAAL,GAAY,EAAExT,EAAd,GAAmB,EAAEA,EAAlH,EAAsH;AACpH7O,IAAAA,OAAO,CAACD,YAAD,CAAP,GAAwB,IAAIiO,KAAJ,EAAxB;AACD;;AAEDwc,EAAAA,MAAM,GAAG,CAAT;AAEA9U,EAAAA,KAAK,GAAG,CAAR;AAEA9M,EAAAA,MAAM,GAAG,CAAT;AAEAoB,EAAAA,UAAU,GAAG,CAAb;AAEAvE,EAAAA,YAAY,GAAG,CAAf,CAjnlBU,CAmnlBV;AACA;AACA;;AACA2a,EAAAA,gBAAgB,GAAG,0BAAS0jB,SAAT,EAAoB;AACrC,QAAIhM,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,IAAIgM,SAAf;AACA,WAAOhM,WAAP;AACD,GALD;;AAOA3X,EAAAA,SAAS,GAAG,mBAAS2jB,SAAT,EAAoB;AAC9B,WAAO1jB,gBAAgB,CAAC0jB,SAAD,CAAvB;AACD,GAFD;;AAIApnB,EAAAA,YAAY,GAAG,sBAAS+R,CAAT,EAAY;AACzB,QAAIqT,WAAJ,EAAiBlU,CAAjB,EAAoBC,CAApB,EAAuB4I,CAAvB;AACA7I,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACA4I,IAAAA,CAAC,GAAG,CAAJ;AACAvT,IAAAA,IAAI;AACJsH,IAAAA,MAAM,GAAG,CAAT;AACA9U,IAAAA,KAAK,GAAG,CAAR;AACA9M,IAAAA,MAAM,GAAG,CAAT;AACAF,IAAAA,aAAa,CAAC+lB,CAAD,CAAb,CATyB,CAUzB;;AAVyB,oBAWb5gB,QAAQ,CAAC,CAAD,EAAI2c,MAAJ,CAXK;;AAAA;;AAWxBoD,IAAAA,CAXwB;AAWrBC,IAAAA,CAXqB;AAWlB4I,IAAAA,CAXkB;;AAYzB,QAAI5I,CAAC,GAAG,GAAR,EAAa;AACXxN,MAAAA,SAAS,CAACoO,CAAD,CAAT;AACAhM,MAAAA,OAAO;AACP;AACD;;AACDqf,IAAAA,WAAW,GAAGxiB,YAAY,EAA1B;AACAmD,IAAAA,OAAO;AACP,WAAOqf,WAAP;AACD,GApBD;;AAsBAp5B,EAAAA,aAAa,GAAG,uBAAS+lB,CAAT,EAAY;AAC1B,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACryB,IAAD,CAArB,EAA6B;AAC3BsS,MAAAA,SAAS,CAACxI,IAAI,CAACyvB,CAAD,CAAL,CAAT;;AACAp1B,MAAAA,UAAU,CAAC,KAAD,CAAV;;AACAmO,MAAAA,SAAS,CAACzI,KAAK,CAAC0vB,CAAD,CAAN,CAAT;AACA;AACD;;AACD,QAAI/Z,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,aAAOlmB,WAAW,CAACkmB,CAAD,CAAlB;AACD,KAFD,MAEO;AACL,aAAOjnB,SAAS,CAACinB,CAAD,CAAhB;AACD;AACF,GAZD;;AAcAxE,EAAAA,6BAA6B,GAAG,uCAASwE,CAAT,EAAY;AAC1C,QAAI/Y,KAAK,GAAG,CAAZ,EAAe;AACb,aAAO,CAAP;AACD;;AACD,QAAI7D,UAAU,CAAC4c,CAAD,CAAd,EAAmB;AACjB,aAAO,CAAP;AACD;;AACD,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/B,aAAO,CAAP;AACD;;AACD,QAAI4f,UAAU,CAAC7S,IAAI,CAACyvB,CAAD,CAAL,CAAd,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,WAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,UAAInd,aAAa,CAACpS,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzB,eAAO,CAAP;AACD;;AACDA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GApBD;;AAsBAjnB,EAAAA,SAAS,GAAG,mBAASinB,CAAT,EAAY;AACtB;AACA;AACA;AACA;AACAzkB,IAAAA,UAAU;;AACV,QAAI9K,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAArB,EAA4B;AAC1B6tC,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,UAAIj1B,aAAa,CAAC0F,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzBr1B,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACA,YAAI6wB,6BAA6B,CAAC/qB,GAAG,CAACuvB,CAAD,CAAJ,CAAjC,EAA2C;AACzCr1B,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;AACF;;AACDqP,MAAAA,SAAS,CAACvJ,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,YAAIj1B,aAAa,CAAC0F,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzBr1B,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD,SAJD,MAIO;AACLA,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACDqP,QAAAA,SAAS,CAACvJ,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,KAvBD,MAuBO;AACL,UAAIj1B,aAAa,CAACi1B,CAAD,CAAjB,EAAsB;AACpBr1B,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACA,YAAI6wB,6BAA6B,CAACwE,CAAD,CAAjC,EAAsC;AACpCr1B,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;AACF;;AACDqP,MAAAA,SAAS,CAACgmB,CAAD,CAAT;AACD;;AACD,WAAOzkB,UAAU,EAAjB;AACD,GAvCD;;AAyCArB,EAAAA,kBAAkB,GAAG,4BAAS8lB,CAAT,EAAY;AAC/B,QAAIhB,OAAJ;;AACA,QAAIvuB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAArB,EAA4B;AAC1B6tC,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP,CAD0B,CAE1B;AACA;;AACAhmB,MAAAA,SAAS,CAACvJ,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,MAAAA,OAAO,GAAG,EAAV;;AACA,aAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,YAAIj1B,aAAa,CAAC0F,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzBr1B,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD,SAJD,MAIO;AACLA,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACDqP,QAAAA,SAAS,CAACvJ,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAhB,QAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,aAAOhB,OAAP;AACD,KArBD,MAqBO;AACL;AACA;AACA,aAAOhlB,SAAS,CAACgmB,CAAD,CAAhB;AACD;AACF,GA5BD;;AA8BAj1B,EAAAA,aAAa,GAAG,uBAASi1B,CAAT,EAAY;AAC1B,QAAI3b,gBAAgB,CAAC2b,CAAD,CAApB,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+B6gB,gBAAgB,CAAC9T,IAAI,CAACyvB,CAAD,CAAL,CAAnD,EAA8D;AAC5D,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GARD;;AAUAhmB,EAAAA,SAAS,GAAG,mBAASgmB,CAAT,EAAY;AACtB,QAAIX,CAAJ;;AACA,QAAI5uB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/B67B,MAAAA,CAAC,GAAG/qB,kBAAkB,CAAC0rB,CAAD,CAAtB;;AACA,UAAIX,CAAC,IAAIpY,KAAK,KAAK,CAAnB,EAAsB;AACpB,eAAO9N,aAAa,CAAC6mB,CAAD,EAAIX,CAAJ,CAApB;AACD,OAFD,MAEO;AACL,eAAO/lB,aAAa,CAAC0mB,CAAD,EAAIX,CAAJ,CAApB;AACD;AACF,KAPD,MAOO;AACL,aAAOrmB,WAAW,CAACgnB,CAAD,CAAlB;AACD;AACF,GAZD;;AAcAnd,EAAAA,aAAa,GAAG,uBAASmd,CAAT,EAAY;AAC1B,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4BwL,IAAI,CAACyvB,CAAD,CAAJ,KAAYlH,MAAM,CAACpiC,CAAD,CAA9C,IAAqDqU,aAAa,CAACuF,KAAK,CAAC0vB,CAAD,CAAN,CAAtE,EAAkF;AAChF,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQA1rB,EAAAA,kBAAkB,GAAG,4BAAS0rB,CAAT,EAAY;AAC/B,QAAI5rB,KAAJ,EAAWqqB,CAAX;AACArqB,IAAAA,KAAK,GAAG,CAAR;AACA4rB,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP,CAH+B,CAI/B;AACA;AACA;AACA;;AACA,WAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBvB,MAAAA,CAAC,GAAGhuB,GAAG,CAACuvB,CAAD,CAAP;;AACA,UAAInd,aAAa,CAAC4b,CAAD,CAAjB,EAAsB;AACpBrqB,QAAAA,KAAK;AACN;;AACD4rB,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAO5rB,KAAP;AACD,GAhBD,CAlylBU,CAozlBV;;;AACAkF,EAAAA,aAAa,GAAG,uBAAS0mB,CAAT,EAAYX,CAAZ,EAAe;AAC7B,QAAIL,OAAJ;;AACA,QAAIK,CAAC,KAAK,CAAV,EAAa;AACXW,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,UAAInb,SAAS,CAACpU,GAAG,CAACuvB,CAAD,CAAJ,CAAT,IAAqBjc,UAAU,CAACtT,GAAG,CAACuvB,CAAD,CAAJ,CAAnC,EAA6C;AAC3CA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACDhnB,MAAAA,WAAW,CAACvI,GAAG,CAACuvB,CAAD,CAAJ,CAAX;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,MAAAA,OAAO,GAAG,EAAV;;AACA,aAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBr1B,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACAqO,QAAAA,WAAW,CAACvI,GAAG,CAACuvB,CAAD,CAAJ,CAAX;AACAhB,QAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,aAAOhB,OAAP;AACD,KAdD,MAcO;AACLxlB,MAAAA,eAAe,CAACwmB,CAAD,CAAf;;AACAr1B,MAAAA,WAAW,CAAC,GAAD,CAAX,CAFK,CAGL;;;AACA,UAAI00B,CAAC,GAAG,CAAJ,IAASjc,UAAU,CAAC7S,IAAI,CAACyvB,CAAD,CAAL,CAAvB,EAAkC;AAChCr1B,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACAmO,QAAAA,iBAAiB,CAACknB,CAAD,CAAjB;AACA,eAAOr1B,WAAW,CAAC,GAAD,CAAlB;AACD,OAJD,MAIO;AACL,eAAOmO,iBAAiB,CAACknB,CAAD,CAAxB;AACD;AACF;AACF,GA5BD,CArzlBU,CAm1lBV;AACA;AAEA;;;AACA7mB,EAAAA,aAAa,GAAG,uBAAS6mB,CAAT,EAAYpB,CAAZ,EAAe;AAC7B,QAAIxqB,KAAJ,EAAWytB,SAAX,EAAsByT,EAAtB,EAA0BC,EAA1B,EAA8BlW,CAA9B,EAAiCU,CAAjC;AACA3rB,IAAAA,KAAK,GAAG,CAAR;AACAkhC,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAlW,IAAAA,CAAC,GAAG,CAAJ;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACAtL,IAAAA,IAAI;AACJtI,IAAAA,EAAE,GAAGV,GAAL;AACAW,IAAAA,EAAE,GAAGX,GAAL;;AACA,QAAI/F,UAAU,CAACnV,IAAI,CAACyvB,CAAD,CAAL,CAAd,EAAyB;AACvBjO,MAAAA,IAAI,CAACxhB,IAAI,CAACyvB,CAAD,CAAL,CAAJ;AACAnX,MAAAA,YAAY;;AACZnd,MAAAA,OAAM;;AACNygB,MAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAACxhB,IAAI,CAACyvB,CAAD,CAAL,CAAJ;AACApX,MAAAA,cAAc;AACdwD,MAAAA,EAAE,GAAGkB,GAAG,EAAR,CAPuB,CAOX;AACb;;AACD,QAAIvK,QAAQ,CAACxS,IAAI,CAACyvB,CAAD,CAAL,CAAZ,EAAuB;AACrBjO,MAAAA,IAAI,CAACxhB,IAAI,CAACyvB,CAAD,CAAL,CAAJ;;AACAt0B,MAAAA,OAAM;;AACNygB,MAAAA,EAAE,GAAGmB,GAAG,EAAR,CAHqB,CAGT;AACb,KAvB4B,CAyB7B;;;AACA,QAAIzI,SAAS,CAACsH,EAAD,CAAb,EAAmB;AAAE;AACnBkT,MAAAA,CAAC,GAAG,CAAJ;AACD,KAFD,MAEO;AACLA,MAAAA,CAAC,GAAG,CAAJ;AACD;;AACDpT,IAAAA,EAAE,GAAG9a,GAAG,CAAC6uB,CAAD,CAAR;;AACA,QAAIze,aAAa,CAAC9Q,GAAG,CAACwb,EAAD,CAAJ,CAAjB,EAA4B;AAC1BA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBC,MAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,UAAIpJ,aAAa,CAACqJ,EAAD,CAAjB,EAAuB;AACrB2V,QAAAA,SAAS,GAAG,CAAZ;AACD,OAFD,MAEO;AACLxC,QAAAA,CAAC;AACF;;AACDpT,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD,KA3C4B,CA4C7B;;;AACA8T,IAAAA,CAAC,GAAG5lB,MAAJ;AACAm7B,IAAAA,EAAE,GAAGvZ,MAAL;AACA3nB,IAAAA,KAAK,GAAG,CAAR;;AACA,QAAI,CAACyQ,SAAS,CAACsH,EAAD,CAAd,EAAoB;AAAE;AACpB5S,MAAAA,WAAW,CAAC4S,EAAD,EAAK,CAAL,CAAX;AACA/X,MAAAA,KAAK;AACN,KAnD4B,CAoD7B;;;AACA6X,IAAAA,EAAE,GAAG9a,GAAG,CAAC6uB,CAAD,CAAR,CArD6B,CAsD7B;;AACA,QAAIze,aAAa,CAAC9Q,GAAG,CAACwb,EAAD,CAAJ,CAAjB,EAA4B;AAC1BA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBC,MAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,UAAIpJ,aAAa,CAACqJ,EAAD,CAAjB,EAAuB;AACrB2V,QAAAA,SAAS,GAAG,CAAZ;AACD,OAFD,MAEO;AACL,YAAIztB,KAAK,GAAG,CAAZ,EAAe;AACbzJ,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACD,YAAI00B,CAAC,KAAK,CAAV,EAAa;AACXtmB,UAAAA,SAAS,CAACmT,EAAD,CAAT;AACD,SAFD,MAEO;AACLlT,UAAAA,WAAW,CAACkT,EAAD,CAAX;AACD;;AACD9X,QAAAA,KAAK;AACN;;AACD6X,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,QAAI7X,KAAK,KAAK,CAAd,EAAiB;AACfzJ,MAAAA,WAAW,CAAC,GAAD,CAAX;AACD,KA7E4B,CA8E7B;;;AACA4qC,IAAAA,EAAE,GAAGxZ,MAAL;AACA3nB,IAAAA,KAAK,GAAG,CAAR;;AACA,QAAI,CAACyQ,SAAS,CAACuH,EAAD,CAAd,EAAoB;AAAE;AACpB7S,MAAAA,WAAW,CAAC6S,EAAD,EAAK,CAAL,CAAX;AACAhY,MAAAA,KAAK;AACLwqB,MAAAA,CAAC;AACF;;AACD3S,IAAAA,EAAE,GAAG9a,GAAG,CAAC6uB,CAAD,CAAR;;AACA,QAAIta,UAAU,CAACjV,GAAG,CAACwb,EAAD,CAAJ,CAAd,EAAyB;AACvBA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBC,MAAAA,EAAE,GAAGzb,GAAG,CAACwb,EAAD,CAAR;;AACA,UAAIpJ,aAAa,CAACqJ,EAAD,CAAjB,EAAuB;AACrB,YAAI9X,KAAK,GAAG,CAAZ,EAAe;AACbzJ,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACDkO,QAAAA,gBAAgB,CAACqT,EAAD,EAAK0S,CAAL,CAAhB;AACAxqB,QAAAA,KAAK;AACN;;AACD6X,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD7O,IAAAA,cAAc,CAAC2iB,CAAD,EAAIuV,EAAJ,EAAQC,EAAR,CAAd;AACA,WAAOvhB,OAAO,EAAd;AACD,GAvGD,CAv1lBU,CAg8lBV;;;AACAxa,EAAAA,eAAe,GAAG,yBAASwmB,CAAT,EAAY;AAC5B,QAAI6B,SAAJ,EAAexC,CAAf;AACA5K,IAAAA,IAAI;AACJ4K,IAAAA,CAAC,GAAG,CAAJ;AACApT,IAAAA,EAAE,GAAGR,GAAL;AACAuU,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,QAAIta,UAAU,CAACjV,GAAG,CAACuvB,CAAD,CAAJ,CAAd,EAAwB;AACtBjO,MAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACAnX,MAAAA,YAAY;;AACZnd,MAAAA,OAAM;;AACNugB,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA0S,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD,KAND,MAMO,IAAIjd,QAAQ,CAACtS,GAAG,CAACuvB,CAAD,CAAJ,CAAZ,EAAsB;AAC3BjO,MAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;;AACAt0B,MAAAA,OAAM;;AACNugB,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA0S,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACDX,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAI,CAACxa,SAAS,CAACoH,EAAD,CAAd,EAAoB;AAClB1S,MAAAA,WAAW,CAAC0S,EAAD,EAAK,CAAL,CAAX;AACAoT,MAAAA,CAAC;AACF;;AACD,WAAOzc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,UAAInd,aAAa,CAACpS,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzB6B,QAAAA,SAAS,GAAG,CAAZ;AACD,OAFD,MAEO;AACL,YAAIxC,CAAC,GAAG,CAAR,EAAW;AACT10B,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACDqO,QAAAA,WAAW,CAACvI,GAAG,CAACuvB,CAAD,CAAJ,CAAX;AACAX,QAAAA,CAAC;AACF;;AACDW,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,QAAIX,CAAC,KAAK,CAAV,EAAa;AACX10B,MAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACD,WAAOqpB,OAAO,EAAd;AACD,GAvCD,CAj8lBU,CA0+lBV;;;AACAlb,EAAAA,iBAAiB,GAAG,2BAASknB,CAAT,EAAY;AAC9B,QAAIX,CAAJ;AACA5K,IAAAA,IAAI;AACJ4K,IAAAA,CAAC,GAAG,CAAJ;AACAW,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,QAAI5c,UAAU,CAAC3S,GAAG,CAACuvB,CAAD,CAAJ,CAAd,EAAwB;AACtBjO,MAAAA,IAAI,CAACthB,GAAG,CAACuvB,CAAD,CAAJ,CAAJ;AACApX,MAAAA,cAAc;AACdqD,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA/T,MAAAA,WAAW,CAAC0S,EAAD,EAAK,CAAL,CAAX;AACAoT,MAAAA,CAAC;AACDW,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,UAAInd,aAAa,CAACpS,GAAG,CAACuvB,CAAD,CAAJ,CAAjB,EAA2B;AACzB,YAAIX,CAAC,GAAG,CAAR,EAAW;AACT10B,UAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACDkO,QAAAA,gBAAgB,CAACpI,GAAG,CAACuvB,CAAD,CAAJ,EAAS,CAAT,CAAhB;AACAX,QAAAA,CAAC;AACF;;AACDW,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAOhM,OAAO,EAAd;AACD,GAxBD;;AA0BAhb,EAAAA,WAAW,GAAG,qBAASgnB,CAAT,EAAY;AACxB,QAAI/Z,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,UAAI/Y,KAAK,KAAK,CAAd,EAAiB;AACf;AACA/N,QAAAA,gBAAgB,CAAC8mB,CAAD,CAAhB;AACD,OAHD,MAGO;AACL9mB,QAAAA,gBAAgB,CAAC8mB,CAAD,CAAhB;AACD;;AACD;AACD;;AACD,QAAIjd,QAAQ,CAACid,CAAD,CAAZ,EAAiB;AACfzmB,MAAAA,WAAW,CAACymB,CAAD,EAAI,CAAJ,CAAX;AACA;AACD;;AACD,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAAjB,IAA0Bse,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAA/C,EAA2D;AACzDoW,MAAAA,YAAY,CAAComB,CAAD,CAAZ;AACA;AACD;;AACD,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAArB,EAA8B;AAC5B2U,MAAAA,UAAU,CAACsmB,CAAD,CAAV;AACA;AACD;;AACD,QAAIpd,MAAM,CAACod,CAAD,CAAV,EAAe;AACb;AACA;AACA;AACA5mB,MAAAA,aAAa,CAAC4mB,CAAD,CAAb;AACA;AACD;;AACD,QAAIze,aAAa,CAACye,CAAD,CAAjB,EAAsB;AACpB,UAAI/Y,KAAK,KAAK,CAAd,EAAiB;AACfxN,QAAAA,uBAAuB,CAACumB,CAAD,CAAvB;AACD,OAFD,MAEO;AACLzmB,QAAAA,WAAW,CAACymB,CAAD,EAAI,CAAJ,CAAX;AACD;;AACD;AACD;;AACD,QAAIja,QAAQ,CAACia,CAAD,CAAZ,EAAiB;AACfnmB,MAAAA,WAAW,CAACmmB,CAAD,CAAX;AACA;AACD;;AACD,QAAIla,KAAK,CAACka,CAAD,CAAT,EAAc;AACZrmB,MAAAA,WAAW,CAACqmB,CAAD,CAAX;AACD;AACF,GA5CD;;AA8CAvmB,EAAAA,uBAAuB,GAAG,iCAASumB,CAAT,EAAY;AACpC,QAAIsV,EAAJ,EAAQC,EAAR,EAAYxV,CAAZ;AACAuV,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAxV,IAAAA,CAAC,GAAG,CAAJ;AACAtL,IAAAA,IAAI;AACJ1C,IAAAA,IAAI,CAACiO,CAAD,CAAJ;AACAnX,IAAAA,YAAY;;AACZnd,IAAAA,OAAM;;AACNygB,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAACiO,CAAD,CAAJ;AACApX,IAAAA,cAAc;AACdwD,IAAAA,EAAE,GAAGkB,GAAG,EAAR;;AACA,QAAIzI,SAAS,CAACuH,EAAD,CAAb,EAAmB;AAAE;AACnB7S,MAAAA,WAAW,CAAC4S,EAAD,EAAK,CAAL,CAAX;AACA6H,MAAAA,OAAO;AACP;AACD;;AACD+L,IAAAA,CAAC,GAAG5lB,MAAJ;AACAm7B,IAAAA,EAAE,GAAGvZ,MAAL;AACAxiB,IAAAA,WAAW,CAAC4S,EAAD,EAAK,CAAL,CAAX;AACAopB,IAAAA,EAAE,GAAGxZ,MAAL;AACAxiB,IAAAA,WAAW,CAAC6S,EAAD,EAAK,CAAL,CAAX,CAtBoC,CAsBhB;;AACpBhP,IAAAA,cAAc,CAAC2iB,CAAD,EAAIuV,EAAJ,EAAQC,EAAR,CAAd;AACA,WAAOvhB,OAAO,EAAd;AACD,GAzBD,CAnjmBU,CA8kmBV;;;AACA/Q,EAAAA,QAAQ,GAAG,kBAAS+c,CAAT,EAAY;AACrB,QAAIpd,MAAM,CAACod,CAAD,CAAN,IAAavvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAA9B,IAAuCse,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAxD,IAAsEiN,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAA3F,EAAoG;AAClG,aAAO,CAAP;AACD;;AACD,QAAIghB,QAAQ,CAACia,CAAD,CAAZ,EAAiB;AACf,aAAO,CAAP;AACD;;AACD,QAAI5c,UAAU,CAAC4c,CAAD,CAAd,EAAmB;AACjB,aAAO,CAAP;AACD;;AACD,QAAI3b,gBAAgB,CAAC2b,CAAD,CAApB,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,QAAIze,aAAa,CAACye,CAAD,CAAjB,EAAsB;AACpB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAjBD;;AAmBAtmB,EAAAA,UAAU,GAAG,oBAASsmB,CAAT,EAAY;AACvB,QAAIsV,EAAJ,EAAQC,EAAR,EAAYxV,CAAZ;AACAuV,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAxV,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIxvB,IAAI,CAACyvB,CAAD,CAAJ,KAAYlH,MAAM,CAACpiC,CAAD,CAAtB,EAA2B;AACzBkU,MAAAA,UAAU,CAAC,MAAD,CAAV;;AACAmO,MAAAA,SAAS,CAACzI,KAAK,CAAC0vB,CAAD,CAAN,CAAT;;AACAr1B,MAAAA,WAAW,CAAC,GAAD,CAAX;;AACA;AACD;;AACD,QAAIsc,KAAK,GAAG,CAAZ,EAAe;AACb,UAAIlD,UAAU,CAACzT,KAAK,CAAC0vB,CAAD,CAAN,CAAd,EAA0B;AACxBr1B,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACAA,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACA,YAAIsY,QAAQ,CAAC1S,IAAI,CAACyvB,CAAD,CAAL,CAAZ,EAAuB;AACrBhnB,UAAAA,WAAW,CAACzI,IAAI,CAACyvB,CAAD,CAAL,CAAX;AACD,SAFD,MAEO;AACLpmB,UAAAA,YAAY,CAACrJ,IAAI,CAACyvB,CAAD,CAAL,CAAZ;AACD;AACF,OARD,MAQO;AACL,YAAI/c,QAAQ,CAAC1S,IAAI,CAACyvB,CAAD,CAAL,CAAZ,EAAuB;AACrBhnB,UAAAA,WAAW,CAACzI,IAAI,CAACyvB,CAAD,CAAL,CAAX;AACD,SAFD,MAEO;AACLpmB,UAAAA,YAAY,CAACrJ,IAAI,CAACyvB,CAAD,CAAL,CAAZ;AACD;;AACDr1B,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACA,YAAIsY,QAAQ,CAAC3S,KAAK,CAAC0vB,CAAD,CAAN,CAAZ,EAAwB;AACtBhnB,UAAAA,WAAW,CAAC1I,KAAK,CAAC0vB,CAAD,CAAN,CAAX;AACD,SAFD,MAEO;AACLpmB,UAAAA,YAAY,CAACtJ,KAAK,CAAC0vB,CAAD,CAAN,CAAZ;AACD;AACF;;AACD;AACD,KAlCsB,CAmCvB;;;AACA,QAAIj1B,aAAa,CAACuF,KAAK,CAAC0vB,CAAD,CAAN,CAAjB,EAA6B;AAC3BD,MAAAA,CAAC,GAAG5lB,MAAJ;AACAm7B,MAAAA,EAAE,GAAGvZ,MAAL;;AACApxB,MAAAA,WAAW,CAAC,GAAD,CAAX;;AACA4qC,MAAAA,EAAE,GAAGxZ,MAAL,CAJ2B,CAK3B;;AACAljB,MAAAA,gBAAgB,CAACmnB,CAAD,EAAI,CAAJ,CAAhB,CAN2B,CAO3B;;AACA5iB,MAAAA,cAAc,CAAC2iB,CAAD,EAAIuV,EAAJ,EAAQC,EAAR,CAAd;AACA;AACD;;AACDD,IAAAA,EAAE,GAAGvZ,MAAL;;AACA,QAAI9Y,QAAQ,CAAC1S,IAAI,CAACyvB,CAAD,CAAL,CAAZ,EAAuB;AACrBhnB,MAAAA,WAAW,CAACzI,IAAI,CAACyvB,CAAD,CAAL,CAAX;AACD,KAFD,MAEO;AACLpmB,MAAAA,YAAY,CAACrJ,IAAI,CAACyvB,CAAD,CAAL,CAAZ;AACD;;AACDuV,IAAAA,EAAE,GAAGxZ,MAAL;AACA9U,IAAAA,KAAK;AACLlO,IAAAA,SAAS,CAACzI,KAAK,CAAC0vB,CAAD,CAAN,CAAT;AACA/Y,IAAAA,KAAK;AACL,WAAO5J,WAAW,CAACi4B,EAAD,EAAKC,EAAL,CAAlB;AACD,GA1DD,CAlmmBU,CA8pmBV;AAEA;;;AACA18B,EAAAA,gBAAgB,GAAG,0BAASmnB,CAAT,EAAYX,CAAZ,EAAe;AAChC,QAAIiW,EAAJ,EAAQC,EAAR;AACAD,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL,CAHgC,CAIhC;;AACA,QAAIxxB,UAAU,CAACzT,KAAK,CAAC0vB,CAAD,CAAN,CAAd,EAA0B;AACxB,UAAIX,CAAC,KAAK,CAAV,EAAa;AACXtmB,QAAAA,SAAS,CAACxI,IAAI,CAACyvB,CAAD,CAAL,CAAT;AACD,OAFD,MAEO;AACLhnB,QAAAA,WAAW,CAACzI,IAAI,CAACyvB,CAAD,CAAL,CAAX;AACD;;AACD;AACD;;AACDsV,IAAAA,EAAE,GAAGvZ,MAAL,CAbgC,CAchC;;AACA,QAAI9Y,QAAQ,CAAC1S,IAAI,CAACyvB,CAAD,CAAL,CAAZ,EAAuB;AACrBhnB,MAAAA,WAAW,CAACzI,IAAI,CAACyvB,CAAD,CAAL,CAAX;AACD,KAFD,MAEO;AACLpmB,MAAAA,YAAY,CAACrJ,IAAI,CAACyvB,CAAD,CAAL,CAAZ;AACD;;AACDuV,IAAAA,EAAE,GAAGxZ,MAAL,CApBgC,CAqBhC;;AACA9U,IAAAA,KAAK;AACL/M,IAAAA,kBAAkB,CAAC5J,KAAK,CAAC0vB,CAAD,CAAN,CAAlB;AACA/Y,IAAAA,KAAK;AACL,WAAO5J,WAAW,CAACi4B,EAAD,EAAKC,EAAL,CAAlB;AACD,GA1BD;;AA4BAn8B,EAAAA,aAAa,GAAG,uBAAS4mB,CAAT,EAAY;AAC1B,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC13B,KAAD,CAAjB,IAA4B2kB,QAAQ,CAACxV,IAAI,CAACyvB,CAAD,CAAL,CAAxC,EAAmD;AACjD3mB,MAAAA,mBAAmB,CAAC2mB,CAAD,CAAnB;AACA;AACD;;AACD,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACx4B,SAAD,CAArB,EAAkC;AAChC2Y,MAAAA,uBAAuB,CAAC+mB,CAAD,CAAvB;AACA;AACD;;AACD,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAChjC,UAAD,CAArB,EAAmC;AACjC6U,MAAAA,WAAW,CAAC,GAAD,CAAX;AACD,KAFD,MAEO;AACLkP,MAAAA,WAAW,CAACpJ,GAAG,CAACuvB,CAAD,CAAJ,CAAX;AACD;;AACDr1B,IAAAA,WAAW,CAAC,GAAD,CAAX;;AACAq1B,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,QAAIpd,MAAM,CAACod,CAAD,CAAV,EAAe;AACbjnB,MAAAA,SAAS,CAACtI,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBr1B,QAAAA,WAAW,CAAC,GAAD,CAAX,CADgB,CAEhB;;;AACAoO,QAAAA,SAAS,CAACtI,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF;;AACD,WAAOr1B,WAAW,CAAC,GAAD,CAAlB;AACD,GA3BD;;AA6BA0O,EAAAA,mBAAmB,GAAG,6BAAS2mB,CAAT,EAAY;AAChCA,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,QAAInwB,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAAC3mC,GAAD,CAAlB,IAA2B0d,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAACt1B,QAAD,CAA7C,IAA2DqM,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAAC/zB,KAAD,CAA7E,IAAwF8K,IAAI,CAACmwB,CAAD,CAAJ,KAAYlH,MAAM,CAACx4B,SAAD,CAA9G,EAA2H;AACzHsZ,MAAAA,YAAY,CAACnJ,GAAG,CAACuvB,CAAD,CAAJ,CAAZ;AACD,KAFD,MAEO;AACLjnB,MAAAA,SAAS,CAACtI,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACD;;AACDr1B,IAAAA,WAAW,CAAC,GAAD,CAAX;;AACAq1B,IAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,QAAIpd,MAAM,CAACod,CAAD,CAAV,EAAe;AACbjnB,MAAAA,SAAS,CAACtI,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;;AACA,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBr1B,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACAoO,QAAAA,SAAS,CAACtI,GAAG,CAACuvB,CAAD,CAAJ,CAAT;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF;;AACD,WAAOr1B,WAAW,CAAC,GAAD,CAAlB;AACD,GAnBD;;AAqBAsO,EAAAA,uBAAuB,GAAG,iCAAS+mB,CAAT,EAAY;AACpCA,IAAAA,CAAC,GAAGzvB,IAAI,CAACyvB,CAAD,CAAR;;AACA,QAAI5c,UAAU,CAAC4c,CAAD,CAAV,IAAiBvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAAlC,IAA2Cse,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAA5D,IAA0EiN,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAA3F,IAAsG0L,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACx4B,SAAD,CAA3H,EAAwI;AACtIsZ,MAAAA,YAAY,CAAComB,CAAD,CAAZ;AACD,KAFD,MAEO;AACLjnB,MAAAA,SAAS,CAACinB,CAAD,CAAT;AACD;;AACD,WAAOr1B,WAAW,CAAC,GAAD,CAAlB;AACD,GARD;;AAUAiP,EAAAA,YAAY,GAAG,sBAASomB,CAAT,EAAY;AACzBr1B,IAAAA,WAAW,CAAC,GAAD,CAAX;;AACAoO,IAAAA,SAAS,CAACinB,CAAD,CAAT;AACA,WAAOr1B,WAAW,CAAC,GAAD,CAAlB;AACD,GAJD;;AAMAkP,EAAAA,WAAW,GAAG,qBAASmmB,CAAT,EAAY;AACxB,QAAIN,CAAJ,EAAOnZ,EAAP,EAAWivB,UAAX,EAAuBnU,IAAvB,EAA6BrC,OAA7B;AACAU,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIM,CAAC,KAAKlH,MAAM,CAACpiC,CAAD,CAAhB,EAAqB;AACnBkU,MAAAA,UAAU,CAAC,QAAD,CAAV;;AACA;AACD;;AACD4qC,IAAAA,UAAU,GAAGr2B,aAAa,CAAC6gB,CAAD,CAA1B;AACAhB,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGmU,UAAU,CAACzuB,MAAnC,EAA4C,KAAKsa,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAzE,EAAgF3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAzG,EAA6G;AAC3GyY,MAAAA,OAAO,CAACjN,IAAR,CAAapnB,WAAW,CAAC6qC,UAAU,CAAC9V,CAAD,CAAX,CAAxB;AACD;;AACD,WAAOV,OAAP;AACD,GAbD;;AAeArlB,EAAAA,WAAW,GAAG,qBAASqmB,CAAT,EAAY;AACxB,QAAIN,CAAJ,EAAOnZ,EAAP,EAAWkvB,OAAX,EAAoBpU,IAApB;AACA3B,IAAAA,CAAC,GAAG,CAAJ;AACA+V,IAAAA,OAAO,GAAGzV,CAAC,CAACrB,GAAZ;;AACAh0B,IAAAA,WAAW,CAAC,GAAD,CAAX;;AACA,SAAK+0B,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGoU,OAAO,CAAC1uB,MAAhC,EAAyC,KAAKsa,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG5b,MAAAA,WAAW,CAAC8qC,OAAO,CAAC/V,CAAD,CAAR,CAAX;AACD;;AACD,WAAO/0B,WAAW,CAAC,GAAD,CAAlB;AACD,GATD;;AAWAyS,EAAAA,cAAc,GAAG,wBAAS2iB,CAAT,EAAYuV,EAAZ,EAAgBC,EAAhB,EAAoB;AACnC,QAAIG,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBnW,CAApB,EAAuBnZ,EAAvB,EAA2B8a,IAA3B,EAAiCrC,OAAjC,EAA0CI,CAA1C,EAA6C0W,EAA7C,EAAiDC,EAAjD,EAAqD/N,CAArD,EAAwDgO,EAAxD,EAA4DC,EAA5D;AACAP,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAjW,IAAAA,CAAC,GAAG,CAAJ;AACAN,IAAAA,CAAC,GAAG,CAAJ;AACA4I,IAAAA,CAAC,GAAG,CAAJ;AACA4N,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;AACAH,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;;AAZmC,qBAapB72B,QAAQ,CAACk2B,EAAD,EAAKC,EAAL,CAbY;;AAAA;;AAalCK,IAAAA,EAbkC;AAa9BE,IAAAA,EAb8B;AAa1BE,IAAAA,EAb0B;;AAAA,qBAcpB52B,QAAQ,CAACm2B,EAAD,EAAKxZ,MAAL,CAdY;;AAAA;;AAclC8Z,IAAAA,EAdkC;AAc9BE,IAAAA,EAd8B;AAc1BE,IAAAA,EAd0B;;AAenC,QAAIF,EAAE,GAAGD,EAAT,EAAa;AACXJ,MAAAA,EAAE,GAAG,CAACK,EAAE,GAAGD,EAAN,IAAY,CAAjB,CADW,CACS;AACrB,KAFD,MAEO;AACLJ,MAAAA,EAAE,GAAG,CAAL;AACD;;AACDA,IAAAA,EAAE,GApBiC,CAqBnC;;AACA1N,IAAAA,CAAC,GAAGgO,EAAE,GAAGJ,EAAL,GAAU,CAAd;AACAD,IAAAA,EAAE,GAAG,CAAC3N,CAAD,GAAK,CAAV;AACAvf,IAAAA,IAAI,CAAC6sB,EAAD,EAAKC,EAAL,EAASG,EAAT,EAAaC,EAAb,CAAJ;;AACA,QAAII,EAAE,GAAGD,EAAT,EAAa;AACXJ,MAAAA,EAAE,GAAG,CAACI,EAAN;AACD,KAFD,MAEO;AACLJ,MAAAA,EAAE,GAAG,CAACI,EAAD,GAAM,CAACA,EAAE,GAAGC,EAAN,IAAY,CAAvB;AACD;;AACDL,IAAAA,EAAE;AACFC,IAAAA,EAAE,GAAG,CAACM,EAAD,GAAM,CAAX;AACAxtB,IAAAA,IAAI,CAAC8sB,EAAD,EAAKxZ,MAAL,EAAa2Z,EAAb,EAAiBC,EAAjB,CAAJ;;AACA,QAAII,EAAE,GAAGD,EAAT,EAAa;AACX1W,MAAAA,CAAC,GAAG2W,EAAJ;AACD,KAFD,MAEO;AACL3W,MAAAA,CAAC,GAAG0W,EAAJ;AACD;;AACD1W,IAAAA,CAAC,IAAI,CAAL;AACAjlB,IAAAA,MAAM,GAAG4lB,CAAT;AACAf,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FyY,MAAAA,OAAO,CAACjN,IAAR,CAAapnB,WAAW,CAAC,GAAD,CAAxB;AACD;;AACD,WAAOq0B,OAAP;AACD,GA7CD;;AA+CA3hB,EAAAA,WAAW,GAAG,qBAASi4B,EAAT,EAAaC,EAAb,EAAiB;AAC7B,QAAII,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B;AACAN,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;AACAH,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;AACAE,IAAAA,EAAE,GAAG,CAAL;;AAR6B,qBASd72B,QAAQ,CAACk2B,EAAD,EAAKC,EAAL,CATM;;AAAA;;AAS5BK,IAAAA,EAT4B;AASxBE,IAAAA,EATwB;AASpBE,IAAAA,EAToB;;AAAA,qBAUd52B,QAAQ,CAACm2B,EAAD,EAAKxZ,MAAL,CAVM;;AAAA;;AAU5B8Z,IAAAA,EAV4B;AAUxBE,IAAAA,EAVwB;AAUpBE,IAAAA,EAVoB;AAW7B;AACAN,IAAAA,EAAE,GAAG,CAACM,EAAD,GAAMJ,EAAN,GAAW,CAAhB,CAZ6B,CAa7B;;AACAF,IAAAA,EAAE,IAAIK,EAAE,GAAG,CAAX;AACA,WAAOvtB,IAAI,CAAC8sB,EAAD,EAAKxZ,MAAL,EAAa,CAAb,EAAgB4Z,EAAhB,CAAX;AACD,GAhBD;;AAkBAltB,EAAAA,IAAI,GAAG,cAASkX,CAAT,EAAYd,CAAZ,EAAe6W,EAAf,EAAmBC,EAAnB,EAAuB;AAC5B,QAAIjW,CAAJ,EAAOnZ,EAAP,EAAW8a,IAAX,EAAiBC,IAAjB,EAAuBtC,OAAvB;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACAV,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGnZ,EAAE,GAAG8a,IAAI,GAAG1B,CAAhB,EAAmB2B,IAAI,GAAGzC,CAA/B,EAAmCwC,IAAI,IAAIC,IAAR,GAAe/a,EAAE,GAAG+a,IAApB,GAA2B/a,EAAE,GAAG+a,IAAnE,EAA0E5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAE/a,EAAjB,GAAsB,EAAEA,EAAtG,EAA0G;AACxGhV,MAAAA,OAAO,CAACmuB,CAAD,CAAP,CAAWK,CAAX,IAAgB2V,EAAhB;AACA1W,MAAAA,OAAO,CAACjN,IAAR,CAAaxgB,OAAO,CAACmuB,CAAD,CAAP,CAAWsI,CAAX,IAAgB2N,EAA7B;AACD;;AACD,WAAO3W,OAAP;AACD,GATD,CA11mBU,CAq2mBV;;;AACA5f,EAAAA,QAAQ,GAAG,kBAASugB,CAAT,EAAYd,CAAZ,EAAe;AACxB,QAAIM,CAAJ,EAAOO,CAAP,EAAUnZ,EAAV,EAAc2vB,KAAd,EAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,KAAnC,EAA0ChV,IAA1C,EAAgDC,IAAhD,EAAsDlC,CAAtD,EAAyD4I,CAAzD;AACAtI,IAAAA,CAAC,GAAG,CAAJ;AACA0W,IAAAA,KAAK,GAAG7kC,OAAO,CAACouB,CAAD,CAAP,CAAWI,CAAnB;AACAmW,IAAAA,KAAK,GAAG3kC,OAAO,CAACouB,CAAD,CAAP,CAAWI,CAAnB;AACAsW,IAAAA,KAAK,GAAG9kC,OAAO,CAACouB,CAAD,CAAP,CAAWqI,CAAnB;AACAmO,IAAAA,KAAK,GAAG5kC,OAAO,CAACouB,CAAD,CAAP,CAAWqI,CAAnB;;AACA,SAAKtI,CAAC,GAAGnZ,EAAE,GAAG8a,IAAI,GAAG1B,CAAC,GAAG,CAApB,EAAuB2B,IAAI,GAAGzC,CAAnC,EAAuCwC,IAAI,IAAIC,IAAR,GAAe/a,EAAE,GAAG+a,IAApB,GAA2B/a,EAAE,GAAG+a,IAAvE,EAA8E5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAE/a,EAAjB,GAAsB,EAAEA,EAA1G,EAA8G;AAC5G,UAAIhV,OAAO,CAACmuB,CAAD,CAAP,CAAWK,CAAX,GAAeqW,KAAnB,EAA0B;AACxBA,QAAAA,KAAK,GAAG7kC,OAAO,CAACmuB,CAAD,CAAP,CAAWK,CAAnB;AACD;;AACD,UAAIxuB,OAAO,CAACmuB,CAAD,CAAP,CAAWK,CAAX,GAAemW,KAAnB,EAA0B;AACxBA,QAAAA,KAAK,GAAG3kC,OAAO,CAACmuB,CAAD,CAAP,CAAWK,CAAnB;AACD;;AACD,UAAIxuB,OAAO,CAACmuB,CAAD,CAAP,CAAWsI,CAAX,GAAeqO,KAAnB,EAA0B;AACxBA,QAAAA,KAAK,GAAG9kC,OAAO,CAACmuB,CAAD,CAAP,CAAWsI,CAAnB;AACD;;AACD,UAAIz2B,OAAO,CAACmuB,CAAD,CAAP,CAAWsI,CAAX,GAAemO,KAAnB,EAA0B;AACxBA,QAAAA,KAAK,GAAG5kC,OAAO,CAACmuB,CAAD,CAAP,CAAWsI,CAAnB;AACD;AACF;;AACD7I,IAAAA,CAAC,GAAGgX,KAAK,GAAGE,KAAR,GAAgB,CAApB;AACAjX,IAAAA,CAAC,GAAG8W,KAAK,GAAGE,KAAR,GAAgB,CAApB;AACApO,IAAAA,CAAC,GAAGqO,KAAJ;AACA,WAAO,CAAClX,CAAD,EAAIC,CAAJ,EAAO4I,CAAP,CAAP;AACD,GAzBD;;AA2BA/wB,EAAAA,WAAW,GAAG,qBAAS+tB,CAAT,EAAY;AACxB,WAAOr6B,WAAW,CAACq6B,CAAD,CAAlB;AACD,GAFD;;AAIAr6B,EAAAA,WAAW,GAAG,qBAASq6B,CAAT,EAAY;AACxB,QAAIjJ,MAAM,KAAKxxB,IAAf,EAAqB;AACnB;AACD;;AACD,QAAIgH,OAAO,CAACwqB,MAAD,CAAP,IAAmB,IAAvB,EAA6B;AAC3B;AACD;;AACDxqB,IAAAA,OAAO,CAACwqB,MAAD,CAAP,CAAgBiJ,CAAhB,GAAoBA,CAApB;AACAzzB,IAAAA,OAAO,CAACwqB,MAAD,CAAP,CAAgBgE,CAAhB,GAAoB5lB,MAApB;AACA5I,IAAAA,OAAO,CAACwqB,MAAD,CAAP,CAAgBiM,CAAhB,GAAoB,CAApB;AACAjM,IAAAA,MAAM;AACN,WAAO5hB,MAAM,EAAb;AACD,GAZD;;AAcAvP,EAAAA,UAAU,GAAG,oBAASi2B,CAAT,EAAY;AACvB,QAAInB,CAAJ,EAAOnZ,EAAP,EAAW8a,IAAX,EAAiBrC,OAAjB;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACAV,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGR,CAAC,CAAC9Z,MAA1B,EAAmC,KAAKsa,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAhE,EAAuE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAhG,EAAoG;AAClGyY,MAAAA,OAAO,CAACjN,IAAR,CAAapnB,WAAW,CAACk2B,CAAC,CAACnB,CAAD,CAAF,CAAxB;AACD;;AACD,WAAOV,OAAP;AACD,GARD;;AAUAzlB,EAAAA,WAAW,GAAG,qBAASymB,CAAT,EAAYsW,SAAZ,EAAuB;AACnC,QAAI5W,CAAJ,EAAOnZ,EAAP,EAAW4a,EAAX,EAAeC,EAAf,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCvC,OAArC,EAA8CyM,QAA9C,EAAwD8K,SAAxD;AACAA,IAAAA,SAAS,GAAG,EAAZ;AACA7W,IAAAA,CAAC,GAAG,CAAJ;;AACA,YAAQM,CAAC,CAACnB,CAAV;AACE,WAAKx6B,GAAL;AACEkyC,QAAAA,SAAS,GAAGvW,CAAC,CAACvB,CAAF,CAAIH,CAAJ,CAAM8B,QAAN,EAAZ;;AACA,YAAImW,SAAS,CAAC,CAAD,CAAT,KAAiB,GAAjB,IAAwBD,SAAS,KAAK,CAA1C,EAA6C;AAC3CC,UAAAA,SAAS,GAAGA,SAAS,CAAC9M,SAAV,CAAoB,CAApB,CAAZ;AACD;;AACD,aAAK/J,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGkV,SAAS,CAACxvB,MAAlC,EAA2C,KAAKsa,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAAxE,EAA+E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAAxG,EAA4G;AAC1G5b,UAAAA,WAAW,CAAC4rC,SAAS,CAAC7W,CAAD,CAAV,CAAX;AACD;;AACD6W,QAAAA,SAAS,GAAGvW,CAAC,CAACvB,CAAF,CAAIF,CAAJ,CAAM6B,QAAN,EAAZ;;AACA,YAAImW,SAAS,KAAK,GAAlB,EAAuB;AACrB;AACD;;AACD5rC,QAAAA,WAAW,CAAC,GAAD,CAAX;;AACAq0B,QAAAA,OAAO,GAAG,EAAV;;AACA,aAAKU,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGiV,SAAS,CAACxvB,MAAlC,EAA2C,KAAKua,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAxE,EAA+E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAxG,EAA4G;AAC1GnC,UAAAA,OAAO,CAACjN,IAAR,CAAapnB,WAAW,CAAC4rC,SAAS,CAAC7W,CAAD,CAAV,CAAxB;AACD;;AACD,eAAOV,OAAP;AACA;;AACF,WAAK1oC,MAAL;AACEigD,QAAAA,SAAS,GAAG1+B,wBAAwB,CAACmoB,CAAC,CAACpB,CAAH,CAApC;;AACA,YAAI2X,SAAS,CAAC,CAAD,CAAT,KAAiB,GAAjB,IAAwBD,SAAS,KAAK,CAA1C,EAA6C;AAC3CC,UAAAA,SAAS,GAAGA,SAAS,CAAC9M,SAAV,CAAoB,CAApB,CAAZ;AACD;;AACDgC,QAAAA,QAAQ,GAAG,EAAX;;AACA,aAAK/L,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYG,IAAI,GAAGgV,SAAS,CAACxvB,MAAlC,EAA2C,KAAKwa,IAAL,GAAYH,EAAE,GAAGG,IAAjB,GAAwBH,EAAE,GAAGG,IAAxE,EAA+E7B,CAAC,GAAG,KAAK6B,IAAL,GAAY,EAAEH,EAAd,GAAmB,EAAEA,EAAxG,EAA4G;AAC1GqK,UAAAA,QAAQ,CAAC1Z,IAAT,CAAcpnB,WAAW,CAAC4rC,SAAS,CAAC7W,CAAD,CAAV,CAAzB;AACD;;AACD,eAAO+L,QAAP;AA7BJ;AA+BD,GAnCD,CA75mBU,CAk8mBV;;;AACAp5B,EAAAA,SAAS,GAAG,mBAASisB,CAAT,EAAYC,CAAZ,EAAe;AACzB,QAAID,CAAC,CAAC0J,CAAF,GAAMzJ,CAAC,CAACyJ,CAAZ,EAAe;AACb,aAAO,CAAC,CAAR;AACD;;AACD,QAAI1J,CAAC,CAAC0J,CAAF,GAAMzJ,CAAC,CAACyJ,CAAZ,EAAe;AACb,aAAO,CAAP;AACD;;AACD,QAAI1J,CAAC,CAACyB,CAAF,GAAMxB,CAAC,CAACwB,CAAZ,EAAe;AACb,aAAO,CAAC,CAAR;AACD;;AACD,QAAIzB,CAAC,CAACyB,CAAF,GAAMxB,CAAC,CAACwB,CAAZ,EAAe;AACb,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAdD;;AAgBAlP,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAIwY,WAAJ,EAAiB3J,CAAjB,EAAoBnZ,EAApB,EAAwB8a,IAAxB,EAA8BP,aAA9B,EAA6Cf,CAA7C,EAAgDiI,CAAhD;AACAtI,IAAAA,CAAC,GAAG,CAAJ;AACA2J,IAAAA,WAAW,GAAG,EAAd,CAHwB,CAKxB;AACA;AACA;AACA;AACA;;AACAvI,IAAAA,aAAa,GAAGvvB,OAAO,CAACwvB,KAAR,CAAc,CAAd,EAAiBhF,MAAjB,CAAhB;AACA+E,IAAAA,aAAa,CAACE,IAAd,CAAmB3uB,SAAnB;AACAd,IAAAA,OAAO,GAAG,GAAG0vB,MAAH,CAAUH,aAAV,EAAyBG,MAAzB,CAAgC1vB,OAAO,CAACwvB,KAAR,CAAchF,MAAd,CAAhC,CAAV;AACAgE,IAAAA,CAAC,GAAG,CAAJ;AACAiI,IAAAA,CAAC,GAAGz2B,OAAO,CAAC,CAAD,CAAP,CAAWy2B,CAAf;;AACA,SAAKtI,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGtF,MAAxB,EAAiC,KAAKsF,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA9D,EAAqE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA9F,EAAkG;AAChG,aAAOhV,OAAO,CAACmuB,CAAD,CAAP,CAAWsI,CAAX,GAAeA,CAAtB,EAAyB;AACvBqB,QAAAA,WAAW,IAAI3X,SAAS,CAAC,IAAD,CAAxB;AACAqO,QAAAA,CAAC,GAAG,CAAJ;AACAiI,QAAAA,CAAC;AACF;;AACD,aAAOz2B,OAAO,CAACmuB,CAAD,CAAP,CAAWK,CAAX,GAAeA,CAAtB,EAAyB;AACvBsJ,QAAAA,WAAW,IAAI1X,gBAAgB,CAAC,GAAD,CAA/B;AACAoO,QAAAA,CAAC;AACF;;AACDsJ,MAAAA,WAAW,IAAI1X,gBAAgB,CAACpgB,OAAO,CAACmuB,CAAD,CAAP,CAAWsF,CAAZ,CAA/B;AACAjF,MAAAA,CAAC;AACF;;AACD,WAAOsJ,WAAP;AACD,GA7BD;;AA+BA55B,EAAAA,MAAM,GAAG,EAAT;;AAEA6P,EAAAA,aAAa,GAAG,yBAAW;AACzByc,IAAAA,MAAM,GAAG,CAAT;AACA9U,IAAAA,KAAK,GAAG,CAAR;AACA9M,IAAAA,MAAM,GAAG,CAAT;AACApB,IAAAA,SAAS,CAACuU,GAAG,EAAJ,CAAT;AACA3Q,IAAAA,QAAQ;AACR,WAAOlN,MAAP;AACD,GAPD;;AASAkN,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI+iB,CAAJ,EAAOnZ,EAAP,EAAW8a,IAAX,EAAiBmV,MAAjB,EAAyB1V,aAAzB,EAAwC2V,SAAxC,EAAmD1W,CAAnD,EAAsDiI,CAAtD;AACAyO,IAAAA,SAAS,GAAGhnC,MAAZ;AACA+mC,IAAAA,MAAM,GAAG,CAAT;AACA9W,IAAAA,CAAC,GAAG,CAAJ,CAJoB,CAKpB;;AACAoB,IAAAA,aAAa,GAAGvvB,OAAO,CAACwvB,KAAR,CAAc,CAAd,EAAiBhF,MAAjB,CAAhB;AACA+E,IAAAA,aAAa,CAACE,IAAd,CAAmB3uB,SAAnB;AACAd,IAAAA,OAAO,GAAG,GAAG0vB,MAAH,CAAUH,aAAV,EAAyBG,MAAzB,CAAgC1vB,OAAO,CAACwvB,KAAR,CAAchF,MAAd,CAAhC,CAAV;AACAgE,IAAAA,CAAC,GAAG,CAAJ;AACAiI,IAAAA,CAAC,GAAGz2B,OAAO,CAAC,CAAD,CAAP,CAAWy2B,CAAf;;AACA,SAAKtI,CAAC,GAAGnZ,EAAE,GAAG,CAAT,EAAY8a,IAAI,GAAGtF,MAAxB,EAAiC,KAAKsF,IAAL,GAAY9a,EAAE,GAAG8a,IAAjB,GAAwB9a,EAAE,GAAG8a,IAA9D,EAAqE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAE9a,EAAd,GAAmB,EAAEA,EAA9F,EAAkG;AAChG,aAAOhV,OAAO,CAACmuB,CAAD,CAAP,CAAWsI,CAAX,GAAeA,CAAtB,EAAyB;AACvByO,QAAAA,SAAS,CAACD,MAAM,EAAP,CAAT,GAAsB,IAAtB;AACAzW,QAAAA,CAAC,GAAG,CAAJ;AACAiI,QAAAA,CAAC;AACF;;AACD,aAAOz2B,OAAO,CAACmuB,CAAD,CAAP,CAAWK,CAAX,GAAeA,CAAtB,EAAyB;AACvB0W,QAAAA,SAAS,CAACD,MAAM,EAAP,CAAT,GAAsB,GAAtB;AACAzW,QAAAA,CAAC;AACF;;AACD0W,MAAAA,SAAS,CAACD,MAAM,EAAP,CAAT,GAAsBjlC,OAAO,CAACmuB,CAAD,CAAP,CAAWsF,CAAjC;AACAjF,MAAAA,CAAC;AACF;;AACD,WAAO0W,SAAS,CAACD,MAAM,EAAP,CAAT,GAAsB,IAA7B;AACD,GAzBD;;AA2BA9yC,EAAAA,CAAC,GAAG,GAAJ;;AAEAgoB,EAAAA,UAAU,GAAI,YAAW;AAAA,QACjBA,UADiB;AAAA;;AAAA;AAAA;;AACJ;AAEnBA,IAAAA,UAAU,CAAC2S,SAAX,CAAqB0B,CAArB,GAAyB,CAAzB;AAEArU,IAAAA,UAAU,CAAC2S,SAAX,CAAqB2J,CAArB,GAAyB,CAAzB;AAEAtc,IAAAA,UAAU,CAAC2S,SAAX,CAAqBc,CAArB,GAAyB,CAAzB;AAEAzT,IAAAA,UAAU,CAAC2S,SAAX,CAAqBe,CAArB,GAAyB,CAAzB;AAEA1T,IAAAA,UAAU,CAAC2S,SAAX,CAAqBsT,KAArB,GAA6B,CAA7B;AAEAjmB,IAAAA,UAAU,CAAC2S,SAAX,CAAqBjqB,KAArB,GAA6B,CAA7B;AAEA,WAAOsX,UAAP;AAED,GAjBY,CAiBV8S,IAjBU,CAiBL,IAjBK,CAAb;;AAmBA5lB,EAAAA,IAAI,GAAG,EAAP;;AAEA,OAAKD,UAAU,GAAG4N,EAAE,GAAG,CAAvB,EAA0BA,EAAE,GAAG,KAA/B,EAAsC5N,UAAU,GAAG,EAAE4N,EAArD,EAAyD;AACvD3N,IAAAA,IAAI,CAACD,UAAD,CAAJ,GAAmB,IAAI+S,UAAJ,EAAnB;AACD;;AAED1kB,EAAAA,qBAAqB,GAAG,CAAxB;AAEAC,EAAAA,kBAAkB,GAAG,CAArB;;AAEA6S,EAAAA,WAAW,GAAG,qBAASkmB,CAAT,EAAY;AACxB,QAAIyK,GAAJ,EAASiL,EAAT,EAAaC,EAAb,EAAiBe,EAAjB,EAAqBC,EAArB,EAAyBxX,CAAzB,EAA4BO,CAA5B,EAA+ByB,EAA/B,EAAmCC,EAAnC,EAAuC/B,CAAvC,EAA0C6G,EAA1C,EAA8C0Q,IAA9C,EAAoDC,IAApD,EAA0DzQ,EAA1D,EAA8D/E,IAA9D,EAAoEC,IAApE,EAA0EC,IAA1E,EAAgFC,IAAhF,EAAsFgJ,GAAtF,EAA2FpL,CAA3F,EAA8FW,CAA9F,EAAiGiI,CAAjG;AACAtI,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;AACAwX,IAAAA,IAAI,GAAG,CAAP;AACAD,IAAAA,IAAI,GAAG,CAAP;AACA7W,IAAAA,CAAC,GAAG,CAAJ;AACAiI,IAAAA,CAAC,GAAG,CAAJ;AACA7I,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAsW,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAe,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;AACAnM,IAAAA,GAAG,GAAG,CAAN;AACAC,IAAAA,GAAG,GAAG,CAAN;;AACA,QAAIzK,CAAC,CAACtG,MAAF,CAASuF,IAAT,GAAgB,CAApB,EAAuB;AACrB/lB,MAAAA,gBAAgB,CAAC8mB,CAAD,CAAhB;AACA;AACD;;AACD6W,IAAAA,IAAI,GAAG7W,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAa,CAAb,CAAP;;AACA,QAAIiB,CAAC,CAACtG,MAAF,CAASuF,IAAT,KAAkB,CAAtB,EAAyB;AACvB2X,MAAAA,IAAI,GAAG5W,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAa,CAAb,CAAP;AACD,KAFD,MAEO;AACL6X,MAAAA,IAAI,GAAG,CAAP;AACD;;AACDvX,IAAAA,CAAC,GAAGwX,IAAI,GAAGD,IAAX;;AACA,QAAIvX,CAAC,GAAG37B,CAAR,EAAW;AACTwV,MAAAA,gBAAgB,CAAC8mB,CAAD,CAAhB;AACA;AACD,KA9BuB,CA+BxB;AAEA;AACA;AACA;;;AACAD,IAAAA,CAAC,GAAG5lB,MAAJ,CApCwB,CAqC5B;;AACI,SAAKulB,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FvoB,MAAAA,IAAI,CAAC8mB,CAAD,CAAJ,CAAQiS,KAAR,GAAgB5V,MAAhB;AACAnjB,MAAAA,IAAI,CAAC8mB,CAAD,CAAJ,CAAQK,CAAR,GAAY5lB,MAAZ;AACApB,MAAAA,SAAS,CAACinB,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,CAAD,CAAT;AACA9mB,MAAAA,IAAI,CAAC8mB,CAAD,CAAJ,CAAQtrB,KAAR,GAAgB2nB,MAAM,GAAGnjB,IAAI,CAAC8mB,CAAD,CAAJ,CAAQiS,KAAjC;;AAJ2F,wBAKvDvyB,QAAQ,CAACxG,IAAI,CAAC8mB,CAAD,CAAJ,CAAQiS,KAAT,EAAgB5V,MAAhB,CAL+C;;AAAA;;AAK1FnjB,MAAAA,IAAI,CAAC8mB,CAAD,CAAJ,CAAQP,CALkF;AAK/EvmB,MAAAA,IAAI,CAAC8mB,CAAD,CAAJ,CAAQN,CALuE;AAKpExmB,MAAAA,IAAI,CAAC8mB,CAAD,CAAJ,CAAQsI,CAL4D;AAM5F,KA5CuB,CA6CxB;;;AACA0O,IAAAA,EAAE,GAAG,CAAL;AACAC,IAAAA,EAAE,GAAG,CAAL;;AACA,SAAKjX,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,UAAIxoB,IAAI,CAAC8mB,CAAD,CAAJ,CAAQP,CAAR,GAAYuX,EAAhB,EAAoB;AAClBA,QAAAA,EAAE,GAAG99B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQP,CAAb;AACD;;AACD,UAAIvmB,IAAI,CAAC8mB,CAAD,CAAJ,CAAQN,CAAR,GAAYuX,EAAhB,EAAoB;AAClBA,QAAAA,EAAE,GAAG/9B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQN,CAAb;AACD;AACF,KAvDuB,CAwDxB;;;AACAD,IAAAA,CAAC,GAAG0X,IAAI,GAAGH,EAAP,GAAY,CAACG,IAAI,GAAG,CAAR,IAAa5vC,kBAA7B,CAzDwB,CA0DxB;;AACAm4B,IAAAA,CAAC,GAAGwX,IAAI,GAAGD,EAAP,GAAY,CAACC,IAAI,GAAG,CAAR,IAAa5vC,qBAA7B,CA3DwB,CA4DxB;;AACAghC,IAAAA,CAAC,GAAG,EAAE7I,CAAC,GAAG,CAAN,CAAJ,CA7DwB,CA8D5B;;AACI,SAAKqL,GAAG,GAAGtE,EAAE,GAAG,CAAX,EAAc3E,IAAI,GAAGsV,IAA1B,EAAiC,KAAKtV,IAAL,GAAY2E,EAAE,GAAG3E,IAAjB,GAAwB2E,EAAE,GAAG3E,IAA9D,EAAqEiJ,GAAG,GAAG,KAAKjJ,IAAL,GAAY,EAAE2E,EAAd,GAAmB,EAAEA,EAAhG,EAAoG;AAClG,WAAKuE,GAAG,GAAGrE,EAAE,GAAG,CAAX,EAAc5E,IAAI,GAAGoV,IAA1B,EAAiC,KAAKpV,IAAL,GAAY4E,EAAE,GAAG5E,IAAjB,GAAwB4E,EAAE,GAAG5E,IAA9D,EAAqEiJ,GAAG,GAAG,KAAKjJ,IAAL,GAAY,EAAE4E,EAAd,GAAmB,EAAEA,EAAhG,EAAoG;AAClG1G,QAAAA,CAAC,GAAG8K,GAAG,GAAGoM,IAAN,GAAanM,GAAjB,CADkG,CAElG;;AACAiL,QAAAA,EAAE,GAAG3V,CAAC,GAAGnnB,IAAI,CAAC8mB,CAAD,CAAJ,CAAQK,CAAjB;AACA4V,QAAAA,EAAE,GAAG3N,CAAC,GAAGpvB,IAAI,CAAC8mB,CAAD,CAAJ,CAAQsI,CAAjB;AACAvf,QAAAA,IAAI,CAAC7P,IAAI,CAAC8mB,CAAD,CAAJ,CAAQiS,KAAT,EAAgB/4B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQiS,KAAR,GAAgB/4B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQtrB,KAAxC,EAA+CshC,EAA/C,EAAmDC,EAAnD,CAAJ,CALkG,CAMlG;;AACAD,QAAAA,EAAE,GAAG,CAAL;;AACA,YAAIjL,GAAG,GAAG,CAAV,EAAa;AACXiL,UAAAA,EAAE,GAAGjL,GAAG,IAAIkM,EAAE,GAAG3vC,qBAAT,CAAR;AACD;;AACD2uC,QAAAA,EAAE,GAAG,CAAL;;AACA,YAAInL,GAAG,GAAG,CAAV,EAAa;AACXmL,UAAAA,EAAE,GAAGnL,GAAG,IAAIkM,EAAE,GAAGzvC,kBAAT,CAAR;AACD,SAdiG,CAelG;;;AACAyuC,QAAAA,EAAE,IAAI,CAACiB,EAAE,GAAG/9B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQN,CAAd,IAAmB,CAAzB,CAhBkG,CAiBlG;;AACAuW,QAAAA,EAAE,IAAI,CAACe,EAAE,GAAG99B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQP,CAAd,IAAmB,CAAzB;AACA1W,QAAAA,IAAI,CAAC7P,IAAI,CAAC8mB,CAAD,CAAJ,CAAQiS,KAAT,EAAgB/4B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQiS,KAAR,GAAgB/4B,IAAI,CAAC8mB,CAAD,CAAJ,CAAQtrB,KAAxC,EAA+CshC,EAA/C,EAAmDC,EAAnD,CAAJ;AACD;AACF;;AACD,WAAOx7B,MAAM,GAAG4lB,CAAC,GAAGX,CAApB;AACD,GAvFD;;AAyFAlmB,EAAAA,gBAAgB,GAAG,0BAAS8mB,CAAT,EAAY;AAC7B,WAAOjmB,kBAAiB,CAACimB,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxB;AACD,GAFD;;AAIAjmB,EAAAA,kBAAiB,GAAG,2BAASimB,CAAT,EAAYL,CAAZ,EAAed,CAAf,EAAkB;AACpC,QAAIa,CAAJ,EAAOyB,EAAP,EAAWE,IAAX;AACA3B,IAAAA,CAAC,GAAG,CAAJ;;AACA/0B,IAAAA,WAAW,CAAC,GAAD,CAAX;;AACA,SAAK+0B,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,CAAxB,EAA0C,KAAK0B,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG,UAAIxB,CAAC,GAAG,CAAJ,KAAUK,CAAC,CAACtG,MAAF,CAASuF,IAAvB,EAA6B;AAC3BlmB,QAAAA,SAAS,CAACinB,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAcimB,CAAd,CAAD,CAAT;AACAA,QAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD,OAHD,MAGO;AACLA,QAAAA,CAAC,GAAG9kB,kBAAiB,CAACimB,CAAD,EAAIL,CAAC,GAAG,CAAR,EAAWd,CAAX,CAArB;AACD;;AACD,UAAIa,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaY,CAAb,CAAZ,EAA6B;AAC3Bh1B,QAAAA,WAAW,CAAC,GAAD,CAAX;AACD;AACF;;AACDA,IAAAA,WAAW,CAAC,GAAD,CAAX;;AACA,WAAOk0B,CAAP;AACD,GAjBD,CAppnBU,CAuqnBV;AAEA;AACA;AACA;AACA;AAEA;;;AACA9gC,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAI02C,IAAJ,EAAU/U,CAAV,EAAaoX,aAAb,EAA4BnX,CAA5B,EAA+Bd,CAA/B,EAAkCsC,EAAlC,EAAsC4V,qBAAtC,EAA6D1V,IAA7D,EAAmEC,IAAnE;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ,CAJwB,CAKxB;;AACA4V,IAAAA,IAAI,GAAGlkC,IAAI,CAAC0b,EAAD,CAAX,CANwB,CAOxB;;AACA6qB,IAAAA,aAAa,GAAGxmC,KAAK,CAAC2b,EAAD,CAArB;;AACA,QAAI,CAAClG,QAAQ,CAAC+wB,aAAD,CAAb,EAA8B;AAC5Bxe,MAAAA,IAAI,CAAC,eAAD,CAAJ;AACD,KAXuB,CAYxB;;;AACAvG,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJkoC,IAAAA,CAAC,GAAGlS,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAACpD,CAAD,CAAT,EAAc;AACZ5N,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD,KAnBuB,CAoBxB;;;AACA8F,IAAAA,IAAI,CAAC3hB,OAAO,CAAC6b,EAAD,CAAR,CAAJ;AACAx0B,IAAAA,IAAI;AACJonC,IAAAA,CAAC,GAAGpR,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAClE,CAAD,CAAT,EAAc;AACZ9M,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD,KA3BuB,CA4BxB;AACA;;;AACA8qB,IAAAA,qBAAqB,GAAGj4B,WAAW,CAACg4B,aAAD,CAAnC;AACAxkB,IAAAA,YAAY,CAAC,CAAD,CAAZ;;AACA,SAAKoN,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAG1B,CAAhB,EAAmB2B,IAAI,GAAGzC,CAA/B,EAAmCwC,IAAI,IAAIC,IAAR,GAAeH,EAAE,IAAIG,IAArB,GAA4BH,EAAE,IAAIG,IAArE,EAA4E5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEH,EAAjB,GAAsB,EAAEA,EAAxG,EAA4G;AAC1G7O,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACArT,MAAAA,EAAE,GAAGiB,GAAG,EAAR;AACA2I,MAAAA,WAAW,CAAC6gB,aAAD,EAAgBzqB,EAAhB,CAAX;AACA0F,MAAAA,IAAI,CAAC0iB,IAAD,CAAJ;AACAh9C,MAAAA,IAAI;;AACJ,UAAI1C,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAArC;AACAI,QAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAArC;AACD;;AACD9W,MAAAA,QAAQ;;AACR,UAAIv0B,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAnC;AACD;AACF,KA9CuB,CA+CxB;;;AACA,WAAOnK,WAAW,CAAC6gB,aAAD,EAAgBC,qBAAhB,CAAlB;AACD,GAjDD,CA/qnBU,CAkunBV;AAEA;AAEA;AAEA;;;AACAnkB,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAIokB,iCAAJ,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyDC,gBAAzD,EAA2EC,UAA3E,EAAuFC,UAAvF,EAAmGC,cAAnG,EAAmHC,SAAnH,CADgB,CAEhB;AACA;AACA;;AACAF,IAAAA,UAAU,GAAG/pB,GAAG,EAAhB;AACA8pB,IAAAA,UAAU,GAAG9pB,GAAG,EAAhB;AACA2pB,IAAAA,OAAO,GAAG3uB,IAAI,CAAC8uB,UAAU,CAAC3Y,CAAX,CAAaH,CAAd,EAAiB+Y,UAAU,CAAC5Y,CAAX,CAAaF,CAA9B,CAAd;AACA2Y,IAAAA,OAAO,GAAG5uB,IAAI,CAAC8uB,UAAU,CAAC3Y,CAAX,CAAaF,CAAd,EAAiB8Y,UAAU,CAAC5Y,CAAX,CAAaH,CAA9B,CAAd;AACAgZ,IAAAA,cAAc,GAAG9vB,IAAI,CAACyvB,OAAD,EAAUC,OAAV,CAArB,CATgB,CAUhB;AACA;AAEA;;AACA,QAAIzzC,KAAK,CAAC6zC,cAAD,CAAT,EAA2B;AACzB;AACA;AACAvlB,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACDmZ,IAAAA,gBAAgB,GAAG7uB,IAAI,CAAC8uB,UAAU,CAAC3Y,CAAX,CAAaF,CAAd,EAAiB8Y,UAAU,CAAC5Y,CAAX,CAAaF,CAA9B,CAAvB;AACAyY,IAAAA,iCAAiC,GAAG9uB,IAAI,CAACovB,cAAD,EAAiBH,gBAAjB,CAAxC,CArBgB,CAsBhB;;AACAH,IAAAA,iCAAiC,GAAGtvB,cAAc,CAACsvB,iCAAD,EAAoCG,gBAApC,CAAlD,CAvBgB,CAwBhB;AACA;;AACAI,IAAAA,SAAS,GAAG,IAAIptC,CAAJ,EAAZ;AACAotC,IAAAA,SAAS,CAAC1Y,CAAV,GAAcx6B,GAAd;AACAkzC,IAAAA,SAAS,CAAC9Y,CAAV,CAAYH,CAAZ,GAAgBvW,IAAI,CAACuvB,cAAD,EAAiBN,iCAAjB,CAApB;AACAO,IAAAA,SAAS,CAAC9Y,CAAV,CAAYF,CAAZ,GAAgBxW,IAAI,CAACovB,gBAAD,EAAmBH,iCAAnB,CAApB,CA7BgB,CA8BhB;AACA;AAEA;AACA;AACA;;AACA,WAAOjlB,IAAI,CAACwlB,SAAD,CAAX;AACD,GArCD,CAzunBU,CAgxnBV;AAEA;AAEA;AAEA;AAEA;;;AACA1kB,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAI2kB,EAAJ,EAAQC,EAAR,EAAYzS,CAAZ;AACAvQ,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAJgB,CAKhB;;AACA,QAAI7pB,KAAK,CAACyoB,EAAE,CAACuS,CAAH,CAAKH,CAAN,CAAT,EAAmB;AACjBhG,MAAAA,IAAI,CAAC,gBAAD,CAAJ;AACD;;AACD,QAAI70B,KAAK,CAACwoB,EAAE,CAACwS,CAAH,CAAKH,CAAN,CAAT,EAAmB;AACjBvM,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACDwjB,IAAAA,EAAE,GAAGlvB,IAAI,CAAC2D,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASpS,EAAE,CAACuS,CAAH,CAAKF,CAAd,CAAT;AACAkZ,IAAAA,EAAE,GAAGnvB,IAAI,CAAC2D,EAAE,CAACwS,CAAH,CAAKF,CAAN,EAASrS,EAAE,CAACuS,CAAH,CAAKH,CAAd,CAAT;AACA0G,IAAAA,CAAC,GAAG9c,IAAI,CAACsvB,EAAD,EAAKC,EAAL,CAAR;AACAzS,IAAAA,CAAC,GAAGtd,cAAc,CAACsd,CAAD,EAAIyS,EAAJ,CAAlB;AACAxrB,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASvW,IAAI,CAACyvB,EAAD,EAAKxS,CAAL,CAAb;AACA/Y,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASxW,IAAI,CAAC0vB,EAAD,EAAKzS,CAAL,CAAb;AACAjT,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAxBD,CAzxnBU,CAmznBV;AAEA;AAEA;AAEA;;;AACAlB,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAI0kB,EAAJ,EAAQC,EAAR,EAAYzS,CAAZ;AACAvQ,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAJgB,CAKhB;;AACA,QAAI7pB,KAAK,CAACwoB,EAAE,CAACwS,CAAH,CAAKH,CAAN,CAAL,IAAiB76B,KAAK,CAACyoB,EAAE,CAACuS,CAAH,CAAKH,CAAN,CAA1B,EAAoC;AAClCvM,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACDwjB,IAAAA,EAAE,GAAGlvB,IAAI,CAAC2D,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASpS,EAAE,CAACuS,CAAH,CAAKH,CAAd,CAAT;AACAmZ,IAAAA,EAAE,GAAGnvB,IAAI,CAAC2D,EAAE,CAACwS,CAAH,CAAKF,CAAN,EAASrS,EAAE,CAACuS,CAAH,CAAKF,CAAd,CAAT;AACAyG,IAAAA,CAAC,GAAG9c,IAAI,CAACsvB,EAAD,EAAKC,EAAL,CAAR;AACAzS,IAAAA,CAAC,GAAGtd,cAAc,CAACsd,CAAD,EAAIyS,EAAJ,CAAlB;AACAxrB,IAAAA,EAAE,GAAG,IAAI9hB,CAAJ,EAAL;AACA8hB,IAAAA,EAAE,CAAC4S,CAAH,GAAOx6B,GAAP;AACA4nB,IAAAA,EAAE,CAACwS,CAAH,CAAKH,CAAL,GAASvW,IAAI,CAACyvB,EAAD,EAAKxS,CAAL,CAAb;AACA/Y,IAAAA,EAAE,CAACwS,CAAH,CAAKF,CAAL,GAASxW,IAAI,CAAC0vB,EAAD,EAAKzS,CAAL,CAAb,CAlBgB,CAmBhB;AACA;;AACAjT,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAvBD,CA1znBU,CAm1nBV;;;AACAjB,EAAAA,IAAI,GAAG,gBAAW;AAChB0B,IAAAA,IAAI;AACJzB,IAAAA,KAAK;AACL,WAAOgB,OAAO,EAAd;AACD,GAJD,CAp1nBU,CA01nBV;AACA;;;AACAhB,EAAAA,KAAK,GAAG,iBAAW;AACjB,QAAIsL,CAAJ,EAAOC,CAAP,EAAUuK,IAAV,EAAgB5H,CAAhB,EAAmBnB,CAAnB,EAAsBiI,CAAtB;AACAc,IAAAA,IAAI,GAAG,CAAP,CAFiB,CAGjB;;AACA5c,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIzI,SAAS,CAACoH,EAAD,CAAT,IAAiBnK,kBAAkB,CAACoK,EAAD,CAAvC,EAA6C;AAAE;AAC7CoG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,KATgB,CAUjB;;;AACA,QAAIvO,UAAU,CAACkI,EAAD,CAAV,IAAkBrH,YAAY,CAACsH,EAAD,CAAlC,EAAwC;AAAE;AACxC6F,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACA;AACD,KAdgB,CAejB;;;AACA,QAAIwB,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAAE;AAC5B,UAAI5H,gBAAgB,CAAC6H,EAAD,CAApB,EAA0B;AAAE;AAC1BoM,QAAAA,IAAI,CAAC,gBAAD,CAAJ;AACD;;AACDvG,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD,KAtBgB,CAuBjB;;;AACA,QAAInZ,SAAS,CAACqH,EAAD,CAAb,EAAmB;AAAE;AACnB6F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD,KA3BgB,CA4BjB;;;AACA,QAAIvI,SAAS,CAACwI,EAAD,CAAb,EAAmB;AAAE;AACnB6F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA4c,MAAAA,IAAI,GAAGrb,WAAW,EAAlB;;AACA,UAAIsV,KAAK,CAAC+F,IAAD,CAAT,EAAiB;AACf;AACAtW,QAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD6Y,MAAAA,CAAC,GAAGhX,IAAI,CAACkD,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASuB,IAAI,CAACr0B,GAAL,CAASs9B,IAAT,CAAT,CAAR;AACAd,MAAAA,CAAC,GAAGjf,IAAI,CAACkD,EAAE,CAACwS,CAAH,CAAKF,CAAN,EAASsB,IAAI,CAACr0B,GAAL,CAASs9B,IAAT,CAAT,CAAR;;AACA,UAAIA,IAAI,GAAG,CAAX,EAAc;AACZ5H,QAAAA,CAAC,GAAGnB,CAAJ;AACAA,QAAAA,CAAC,GAAGiI,CAAJ;AACAA,QAAAA,CAAC,GAAG9G,CAAJ;AACAnB,QAAAA,CAAC,GAAGrY,cAAc,CAACqY,CAAD,EAAIiI,CAAJ,CAAlB;AACAA,QAAAA,CAAC,GAAGvgB,YAAY,CAACugB,CAAD,CAAhB;AACD;;AACD7b,MAAAA,EAAE,GAAG,IAAIhiB,CAAJ,EAAL;AACAgiB,MAAAA,EAAE,CAAC0S,CAAH,GAAOx6B,GAAP;AACA8nB,MAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAASyB,CAAT;AACA5T,MAAAA,EAAE,CAACsS,CAAH,CAAKF,CAAL,GAASyJ,CAAT;AACAjW,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA;AACD,KAvDgB,CAwDjB;AAEA;;;AACA,QAAIpI,UAAU,CAACkI,EAAD,CAAd,EAAoB;AAAE;AACpB8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAxB,MAAAA,eAAe;AACf;AACD,KA/DgB,CAgEjB;;;AACA,QAAIrG,gBAAgB,CAAC4H,EAAD,CAApB,EAA0B;AAAE;AAC1B8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN+H,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6G,MAAAA,IAAI;AACJT,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6G,MAAAA,IAAI;AACJzJ,MAAAA,QAAQ;AACR;AACD;;AACD,QAAI,CAAC5F,SAAS,CAACuI,EAAD,CAAd,EAAoB;AAAE;AACpB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACApD,MAAAA,YAAY;AACZkJ,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6G,MAAAA,IAAI;AACJhB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACArD,MAAAA,cAAc;AACdmJ,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAlC,MAAAA,MAAM;AACN+I,MAAAA,IAAI;AACJzJ,MAAAA,QAAQ;AACR;AACD,KAxFgB,CAyFjB;AAEA;;;AACA,QAAInH,gBAAgB,CAAC8J,EAAD,CAApB,EAA0B;AAAE;AAC1B8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA+G,MAAAA,WAAW;AACX;AACD;;AACD,QAAI,CAACvR,OAAO,CAACwK,EAAE,CAACuS,CAAH,CAAKH,CAAN,CAAR,IAAoB,CAAC5c,OAAO,CAACwK,EAAE,CAACuS,CAAH,CAAKF,CAAN,CAAhC,EAA0C;AAAE;AAC1C/L,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ,CAFwC,CAE9B;;AACV8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACDoX,IAAAA,CAAC,GAAGpS,EAAE,CAACuS,CAAH,CAAKH,CAAT;AACAC,IAAAA,CAAC,GAAGrS,EAAE,CAACuS,CAAH,CAAKF,CAAT;AACAwB,IAAAA,CAAC,GAAG9W,KAAK,CAACgD,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASC,CAAT,CAAT;;AACA,QAAIwB,CAAC,KAAK,CAAV,EAAa;AACXvN,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD8gB,IAAAA,CAAC,GAAGjf,IAAI,CAACgX,CAAD,EAAIzB,CAAJ,CAAR,CAnHiB,CAoHjB;;AACAnS,IAAAA,EAAE,GAAG,IAAIhiB,CAAJ,EAAL;AACAgiB,IAAAA,EAAE,CAAC0S,CAAH,GAAOx6B,GAAP;;AACA,QAAI6nB,EAAE,CAACuS,CAAH,CAAKH,CAAL,CAAOkK,UAAP,EAAJ,EAAyB;AAAE;AACzBrc,MAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAAStvB,MAAM,CAAC,CAAD,CAAf;AACAmd,MAAAA,EAAE,CAACsS,CAAH,CAAKF,CAAL,GAASyJ,CAAT;AACD,KAHD,MAGO;AACL7b,MAAAA,EAAE,CAACsS,CAAH,CAAKH,CAAL,GAAS0J,CAAT;AACA7b,MAAAA,EAAE,CAACsS,CAAH,CAAKF,CAAL,GAASvvB,MAAM,CAAC,CAAD,CAAf;AACD;;AACD,WAAO+iB,IAAI,CAAC5F,EAAD,CAAX;AACD,GA/HD,CA51nBU,CA69nBV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACAzB,EAAAA,eAAe,GAAG,2BAAW;AAC3B+J,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI5J,SAAS,CAACuI,EAAD,CAAb,EAAmB;AAAE;AACnB,UAAIA,EAAE,CAACwS,CAAH,CAAKH,CAAL,CAAOoZ,KAAP,EAAJ,EAAoB;AAAE;AACpBplB,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ,CADkB,CACA;AACnB,OAFD,MAEO;AACLA,QAAAA,YAAY,CAAC,CAAD,CAAZ,CADK,CACY;AAClB;;AACD0B,MAAAA,OAAO;AACP;AACD,KAX0B,CAY3B;;;AACAjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3c,IAAAA,eAAe;AACf4c,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIjJ,gBAAgB,CAAC4H,EAAD,CAApB,EAA0B;AAAE;AAC1B8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ,CADwB,CACd;;AACVoG,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,MAAAA,GAAG;AACHsgB,MAAAA,EAAE,GAAGoB,GAAG,EAAR,CAJwB,CAIZ;AACb,KArB0B,CAuB3B;;;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAyM,IAAAA,QAAQ;AACRxM,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAkF,IAAAA,WAAW,CAACztB,KAAD,CAAX;AACAutB,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,IAAAA,IAAI,CAAC5F,EAAD,CAAJ,CA9B2B,CA8BjB;;AACVjF,IAAAA,IAAI,CAAC,CAAD,CAAJ,CA/B2B,CAgC3B;;AACA,QAAIgF,EAAE,CAACuS,CAAH,CAAKH,CAAL,CAAOoZ,KAAP,EAAJ,EAAoB;AAAE;AACpB1tB,MAAAA,MAAM;AACP;;AACD,WAAOgK,OAAO,EAAd;AACD,GArCD;;AAuCA7R,EAAAA,gBAAgB,GAAG,0BAAS6d,CAAT,EAAY;AAC7B,WAAOte,OAAO,CAACse,CAAC,CAACvB,CAAF,CAAIH,CAAL,CAAd;AACD,GAFD,CAtioBU,CA0ioBV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;;AACArL,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIkM,CAAJ,EAAOO,CAAP,EAAUyB,EAAV,EAAc9B,CAAd,EAAiBgC,IAAjB,EAAuBsW,UAAvB;AACAjY,IAAAA,CAAC,GAAG,CAAJ;AACAjL,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA6R,IAAAA,CAAC,GAAG7E,GAAJ;AACAvI,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3P,IAAAA,mBAAmB;AACnB+iB,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;AACAwY,IAAAA,UAAU,GAAGxY,CAAb;;AACA,SAAKO,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA2B8B,EAAE,GAAGE,IAAhC,EAAsC3B,CAAC,GAAGyB,EAAE,IAAI,CAAhD,EAAmD;AACjDpP,MAAAA,IAAI,CAACkG,KAAK,CAAC0f,UAAU,GAAGjY,CAAd,CAAN,CAAJ;AACA3N,MAAAA,IAAI,CAACkG,KAAK,CAAC0f,UAAU,GAAGjY,CAAb,GAAiB,CAAlB,CAAN,CAAJ;AACA3N,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,MAAAA,QAAQ;AACR4J,MAAAA,UAAU;AACX,KAjBsB,CAkBvB;AAEA;AAEA;;;AACA3J,IAAAA,YAAY,CAAC+Q,GAAG,GAAG6E,CAAN,GAAUE,CAAX,CAAZ;AACApT,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA5E,IAAAA,OAAO,CAACyW,CAAD,CAAP;AACApN,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GA5BD,CAxjoBU,CAsloBV;;;AACAd,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAI4V,IAAJ;AACAA,IAAAA,IAAI,GAAG,CAAP;AACArU,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5c,IAAAA,eAAe;AACf6c,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAwM,IAAAA,QAAQ;AACRvM,IAAAA,EAAE,GAAGkB,GAAG,EAAR;;AACA,QAAI,CAACxL,kBAAkB,CAACsK,EAAD,CAAvB,EAA6B;AAC3BoG,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAlF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACD6K,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA2c,IAAAA,IAAI,GAAGrb,WAAW,EAAlB;;AACA,QAAIsV,KAAK,CAAC+F,IAAD,CAAT,EAAiB;AACftW,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACD,QAAI8U,IAAI,KAAK,CAAb,EAAgB;AACd9U,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA9c,IAAAA,mBAAmB,CAAC25B,IAAD,CAAnB;AACA,WAAO9U,OAAO,EAAd;AACD,GApCD,CAvloBU,CA6noBV;AAEA;;;AACA/1B,EAAAA,aAAa,GAAG,yBAAW;AACzB8zB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrB,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtBsoB,MAAAA,EAAE,GAAG6M,MAAM,CAACxwB,QAAD,CAAX;AACD;;AACDypB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO3U,OAAO,EAAd;AACD,GAbD,CAhooBU,CA+ooBV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AACAA,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIs1B,QAAJ,EAAcgL,OAAd,EAAuBzY,CAAvB,EAA0BO,CAA1B,EAA6ByB,EAA7B,EAAiC0J,CAAjC,EAAoCxL,CAApC,EAAuCgC,IAAvC,EAA6CtB,CAA7C;AACAZ,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAmL,IAAAA,CAAC,GAAG,CAAJ;AACAxL,IAAAA,CAAC,GAAG,CAAJ;AACAU,IAAAA,CAAC,GAAG,CAAJ,CANmB,CAOnB;;AACAtL,IAAAA,IAAI;AACJtI,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA6R,IAAAA,CAAC,GAAG7E,GAAJ;AACAsS,IAAAA,QAAQ,GAAGtS,GAAX;AACAuQ,IAAAA,CAAC,GAAGl4B,KAAK,CAACwZ,EAAD,EAAKF,EAAL,CAAL,GAAgB,CAApB;AACA2rB,IAAAA,OAAO,GAAGtd,GAAV;AACA+E,IAAAA,CAAC,GAAG1sB,KAAK,CAACwZ,EAAD,EAAKD,EAAL,CAAL,GAAgB,CAApB;AACA6T,IAAAA,CAAC,GAAG8K,CAAC,GAAGxL,CAAR;AACA/M,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAjG,IAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,WAAOyS,CAAC,IAAI,CAAZ,EAAe;AACbhO,MAAAA,IAAI,CAACkG,KAAK,CAAC2U,QAAQ,GAAG/B,CAAZ,CAAN,CAAJ;AACA9Y,MAAAA,IAAI,CAACkG,KAAK,CAAC2f,OAAO,GAAGvY,CAAX,CAAN,CAAJ;AACAnoB,MAAAA,MAAM;AACNkV,MAAAA,EAAE,GAAGkB,GAAG,EAAR;;AACA,WAAKoS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAYF,EAAE,IAAIE,IAAlB,GAAyBF,EAAE,IAAIE,IAA3D,EAAkE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7FpP,QAAAA,IAAI,CAACkG,KAAK,CAAC2U,QAAQ,GAAG7M,CAAX,GAAeL,CAAhB,CAAN,CAAJ;AACA3N,QAAAA,IAAI,CAACkG,KAAK,CAAC2f,OAAO,GAAGlY,CAAX,CAAN,CAAJ;AACA3N,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA9C,QAAAA,QAAQ;AACRqP,QAAAA,QAAQ;AACRV,QAAAA,KAAK,CAAC2U,QAAQ,GAAG7M,CAAX,GAAeL,CAAhB,CAAL,GAA0BpS,GAAG,EAA7B;AACD;;AACDyE,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAmG,MAAAA,YAAY,CAACyN,CAAD,CAAZ;AACArS,MAAAA,KAAK;AACLpE,MAAAA,QAAQ;AACR1d,MAAAA,GAAG;AACHygB,MAAAA,EAAE,GAAGiB,GAAG,EAAR;AACAud,MAAAA,CAAC;AACD9K,MAAAA,CAAC;AACF;;AACDrX,IAAAA,OAAO,CAACyW,CAAD,CAAP;AACApN,IAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA,WAAO2H,OAAO,EAAd;AACD,GA/CD;;AAiDAz+B,EAAAA,iBAAiB,GAAG,KAApB;;AAEA4I,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B4zB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO27B,WAAW,EAAlB;AACD,GAJD;;AAMAA,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAI2M,CAAJ;AACAA,IAAAA,CAAC,GAAG3kB,SAAJ;AACAsiB,IAAAA,aAAa;AACb,WAAOtiB,SAAS,GAAG2kB,CAAnB;AACD,GALD;;AAOArC,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIma,iBAAJ,EAAuBC,QAAvB,EAAiCvX,WAAjC;AACAA,IAAAA,WAAW,GAAGjT,GAAG,EAAjB;;AACA,QAAIrH,QAAQ,CAACsa,WAAD,CAAZ,EAA2B;AACzBj1B,MAAAA,oBAAoB,CAACi1B,WAAD,CAApB;;AACA;AACD;;AACDnlB,IAAAA,SAAS,GAAG,CAAZ;;AACA,QAAI3K,GAAG,CAAC8vB,WAAD,CAAH,KAAqBzH,MAAM,CAAC3mC,GAAD,CAA/B,EAAsC;AACpC4/B,MAAAA,IAAI,CAACwO,WAAD,CAAJ;AACA;AACD;;AACD,QAAIhrC,iBAAJ,EAAuB;AACrBirC,MAAAA,OAAO,CAACE,GAAR,CAAY,0CAA0CH,WAAtD;AACD,KAdwB,CAezB;;;AACAxO,IAAAA,IAAI,CAACtG,GAAD,CAAJ;AACA/B,IAAAA,qBAAqB,CAAC6W,WAAD,CAArB;AACAsX,IAAAA,iBAAiB,GAAGvqB,GAAG,EAAvB;;AACA,QAAI/3B,iBAAJ,EAAuB;AACrBirC,MAAAA,OAAO,CAACE,GAAR,CAAY,+CAA+CmX,iBAA3D;AACD,KArBwB,CAsBzB;;;AACA9lB,IAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA8Z,IAAAA,QAAQ,GAAG3mC,GAAG,CAACovB,WAAD,CAAd;;AACA,WAAO3d,MAAM,CAACk1B,QAAD,CAAb,EAAyB;AACvB,UAAIviD,iBAAJ,EAAuB;AACrBirC,QAAAA,OAAO,CAACE,GAAR,CAAY,WAAWjwB,GAAG,CAACqnC,QAAD,CAA1B;AACD;;AACD/lB,MAAAA,IAAI,CAAC8lB,iBAAD,CAAJ;AACA9lB,MAAAA,IAAI,CAACthB,GAAG,CAACqnC,QAAD,CAAJ,CAAJ;AACAxuB,MAAAA,QAAQ;AACR1d,MAAAA,GAAG;AACHksC,MAAAA,QAAQ,GAAG3mC,GAAG,CAAC2mC,QAAD,CAAd;AACD;;AACD,QAAIviD,iBAAJ,EAAuB;AACrBirC,MAAAA,OAAO,CAACE,GAAR,CAAY,wDAAwDzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAzE;AACD,KArCwB,CAsCzB;;;AACAxlC,IAAAA,QAAQ;;AACR,QAAIS,iBAAJ,EAAuB;AACrBirC,MAAAA,OAAO,CAACE,GAAR,CAAY,mCAAmCzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAApD;AACD,KA1CwB,CA2CzB;;;AACAvI,IAAAA,IAAI,CAAC8lB,iBAAD,CAAJ;AACA3gC,IAAAA,MAAM;;AACN,QAAI3hB,iBAAJ,EAAuB;AACrB,aAAOirC,OAAO,CAACE,GAAR,CAAY,iEAAiEzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAlF,CAAP;AACD;AACF,GAjDD;;AAmDA5Q,EAAAA,qBAAqB,GAAG,+BAASsW,CAAT,EAAY;AAClC,QAAIhB,OAAJ;;AACA,QAAIvuB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAArB,EAA4B;AAC1B6tC,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,MAAAA,OAAO,GAAG,EAAV;;AACA,aAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBpW,QAAAA,0BAA0B,CAACnZ,GAAG,CAACuvB,CAAD,CAAJ,CAA1B;AACAhB,QAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,aAAOhB,OAAP;AACD,KARD,MAQO;AACL,aAAOpV,0BAA0B,CAACoW,CAAD,CAAjC;AACD;AACF,GAbD;;AAeApW,EAAAA,0BAA0B,GAAG,oCAASoW,CAAT,EAAY;AACvC,QAAIhB,OAAJ;;AACA,QAAIvuB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAArB,EAAiC;AAC/Bw8B,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACAhB,MAAAA,OAAO,GAAG,EAAV;;AACA,aAAOpc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBrW,QAAAA,4BAA4B,CAAClZ,GAAG,CAACuvB,CAAD,CAAJ,CAA5B;AACAhB,QAAAA,OAAO,CAACjN,IAAR,CAAaiO,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAApB;AACD;;AACD,aAAOhB,OAAP;AACD,KARD,MAQO;AACL,aAAOrV,4BAA4B,CAACqW,CAAD,CAAnC;AACD;AACF,GAbD;;AAeArW,EAAAA,4BAA4B,GAAG,sCAASqW,CAAT,EAAY;AACzC,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAArB,EAA8B;AAC5B;AACD;;AACDgtB,IAAAA,IAAI,CAACiO,CAAD,CAAJ;AACAA,IAAAA,CAAC,GAAG1vB,KAAK,CAAC0vB,CAAD,CAAT,CALyC,CAMzC;;AACA,QAAI3b,gBAAgB,CAAC2b,CAAD,CAApB,EAAyB;AACvB7e,MAAAA,OAAO;;AACPlW,MAAAA,KAAK;;AACL;AACD,KAXwC,CAYzC;;;AACA,QAAIwF,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAACt1B,QAAD,CAAjB,IAA+B6gB,gBAAgB,CAAC9T,IAAI,CAACyvB,CAAD,CAAL,CAAnD,EAA8D;AAC5D7e,MAAAA,OAAO;;AACPlW,MAAAA,KAAK;;AACL;AACD,KAjBwC,CAkBzC;;;AACA,WAAOqiB,GAAG,EAAV;AACD,GApBD;;AAsBAhiB,EAAAA,oBAAoB,GAAG,8BAASihC,SAAT,EAAoB;AACzC,QAAI7M,CAAJ,EAAOyB,EAAP,EAAW9B,CAAX,EAAcgC,IAAd;AACA3B,IAAAA,CAAC,GAAG,CAAJ;AACA3N,IAAAA,IAAI,CAACwa,SAAD,CAAJ;AACA90C,IAAAA,IAAI;AACJ80C,IAAAA,SAAS,GAAGjf,GAAG,EAAf;;AACA,QAAI,CAACrH,QAAQ,CAACsmB,SAAD,CAAb,EAA0B;AAAE;AAC1Bxa,MAAAA,IAAI,CAACwa,SAAD,CAAJ;AACA;AACD;;AACDlN,IAAAA,CAAC,GAAGkN,SAAS,CAAC7S,MAAV,CAAiBwF,KAArB;;AACA,SAAKQ,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FpP,MAAAA,IAAI,CAACwa,SAAS,CAAC7S,MAAV,CAAiB9gB,IAAjB,CAAsB8mB,CAAtB,CAAD,CAAJ;AACAtM,MAAAA,WAAW;AACXmZ,MAAAA,SAAS,CAAC7S,MAAV,CAAiB9gB,IAAjB,CAAsB8mB,CAAtB,IAA2BpS,GAAG,EAA9B;AACD;;AACD3b,IAAAA,uBAAuB,CAAC46B,SAAD,CAAvB;AACA,WAAOxa,IAAI,CAACwa,SAAD,CAAX;AACD,GAlBD;;AAoBAthC,EAAAA,KAAK,GAAG,iBAAW;AACjBwpB,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,IAAAA,QAAQ;AACRyI,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAjO,IAAAA,GAAG;AACH/G,IAAAA,MAAM;AACN,WAAO8c,OAAO,EAAd;AACD,GAZD;;AAcA51B,EAAAA,SAAS,GAAG,qBAAW;AACrB2zB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO67B,IAAI,EAAX;AACD,GAJD;;AAMAA,EAAAA,IAAI,GAAG,gBAAW;AAChBmB,IAAAA,IAAI;;AACJjB,IAAAA,KAAI;;AACJvH,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAvY,IAAAA,SAAS;AACT9H,IAAAA,GAAG;AACH0mB,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,IAAAA,MAAM;AACN,WAAO8c,OAAO,EAAd;AACD,GAXD;;AAaAx+B,EAAAA,UAAU,GAAG,KAAb;;AAEA6I,EAAAA,SAAS,GAAG,qBAAW;AACrB0zB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO+7B,KAAI,EAAX;AACD,GAJD;;AAMAA,EAAAA,KAAI,GAAG,gBAAW;AAChB,QAAIoN,KAAJ;AACAnM,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAsT,IAAAA,KAAK,GAAG3U,EAAR;;AACA,QAAIz2B,UAAJ,EAAgB;AACdgrC,MAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAzB;AACD;;AACD,QAAIprC,UAAJ,EAAgB;AACdgrC,MAAAA,OAAO,CAACE,GAAR,CAAY,0BAA0BE,KAA1B,GAAkC,KAAlC,GAA0C3jB,sBAAqB,CAAC2jB,KAAD,CAA3E;AACD,KAVe,CAWhB;AACA;AACA;AACA;;;AACA,QAAI7a,QAAQ,CAACkG,EAAD,CAAZ,EAAkB;AAChB,UAAIz2B,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,2BAA2BE,KAAvC;AACD;;AACD,UAAI,CAAC9e,kBAAkB,CAAChD,WAAW,CAACga,MAAM,CAAChmC,qBAAD,CAAP,CAAZ,CAAvB,EAAqE;AACnEi/B,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD,OAFD,MAEO;AACLuG,QAAAA,WAAW,CAAC/nB,MAAD,CAAX;AACAsnB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;AACF,KAXD,MAWO,IAAI,CAACpF,kBAAkB,CAAChD,WAAW,CAACga,MAAM,CAAChmC,qBAAD,CAAP,CAAZ,CAAnB,IAAmE,CAACoqB,4BAA2B,CAAC+O,EAAD,CAA/F,IAAuG,CAAChP,sBAAqB,CAACgP,EAAD,CAA7H,IAAqI,EAAEnrB,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAChyB,GAAD,CAAX,CAAJ,IAAyBhG,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAClkC,GAAD,CAAX,CAA7B,IAAkDkM,KAAI,CAACmrB,EAAD,EAAK3L,aAAL,CAAxD,CAAzI,EAAuN;AAAE;AAC9N,UAAI9qB,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,2BAA2BE,KAAvC;AACD;;AACD7O,MAAAA,IAAI,CAAC9F,EAAD,CAAJ,CAJ4N,CAK9N;AACC,KANM,MAMA,IAAIxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAlB,IAAgCggB,eAAe,CAACjT,IAAI,CAAC0b,EAAD,CAAL,CAA/C,IAA6D,CAACnK,kBAAkB,CAAChD,WAAW,CAACga,MAAM,CAAChmC,qBAAD,CAAP,CAAZ,CAApF,EAAkI;AACvIi/B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ,CADuI,CAEzI;AACC,KAHM,MAGA,IAAIxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAClC,UAAIqD,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,YAAjC;AACD;;AACDtO,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACArG,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACAuH,QAAAA,KAAI;;AACJ5nB,QAAAA,GAAG;AACHqgB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KAZM,MAYA;AACL;AACA;AACA;AACA,UAAIz2B,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,gBAAjC;AACD;;AACD7O,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAzgB,MAAAA,GAAG;;AACH,UAAIhW,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,QAArB,GAAgC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA5C;AACD;;AACDrO,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA1d,MAAAA,GAAG;;AACH,UAAI/Y,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,UAArB,GAAkC3U,EAAlC,GAAuC,KAAvC,GAA+CgM,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA3D;AACD;;AACDnU,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAhY,MAAAA,MAAM;;AACN,UAAIze,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,WAArB,GAAmC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA/C;AACD;;AACDrO,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAyR,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAyL,MAAAA,IAAI;;AACJ,UAAIliC,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,SAArB,GAAiC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA7C;AACD;;AACD9W,MAAAA,QAAQ;;AACR,UAAI9zB,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,aAArB,GAAqC3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAjD;AACD;;AACDx0B,MAAAA,GAAG;;AACH,UAAIpW,UAAJ,EAAgB;AACdgrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,mBAArB,GAA2C3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAvD;AACD;;AACD9W,MAAAA,QAAQ;AACT;;AACD0K,IAAAA,OAAO;;AACP,QAAIx+B,UAAJ,EAAgB;AACd,aAAOgrC,OAAO,CAACE,GAAR,CAAY,aAAaE,KAAb,GAAqB,KAArB,GAA6B3I,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA9C,CAAP;AACD;AACF,GA1FD,CAt4oBU,CAk+oBV;AACA;AACA;AACA;AACA;AACA;;;AACA9D,EAAAA,gBAAgB,GAAG,KAAnB;AAEAtJ,EAAAA,gBAAgB,GAAG,KAAnB;;AAEA5uB,EAAAA,UAAU,GAAG,sBAAW;AACtB;AACA;AACA;AACA;AACA4tB,IAAAA,EAAE,GAAG3b,IAAI,CAAC0b,EAAD,CAAT;;AACA,QAAIxb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACryB,IAAD,CAAlB,IAA4BgK,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/vB,MAAD,CAAlD,EAA4D;AAC1DgpB,MAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;AACAz0B,MAAAA,IAAI;AACJs6B,MAAAA,IAAI,CAACzhB,KAAK,CAAC4b,EAAD,CAAN,CAAJ;AACAz0B,MAAAA,IAAI;AACJkhC,MAAAA,QAAQ;AACT,KAND,MAMO;AACL5G,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAz0B,MAAAA,IAAI;AACJy0B,MAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,UAAI7c,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACryB,IAAD,CAAlB,IAA4BgK,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/vB,MAAD,CAAlD,EAA4D;AAC1DgpB,QAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;AACAz0B,QAAAA,IAAI;AACJs6B,QAAAA,IAAI,CAACzhB,KAAK,CAAC4b,EAAD,CAAN,CAAJ;AACAz0B,QAAAA,IAAI;AACJkhC,QAAAA,QAAQ;AACT,OAND,MAMO;AACL5G,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;AACF,KAzBqB,CA0BtB;;;AACA6F,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;;AACDA,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAACvI,kBAAkB,CAACkH,EAAD,EAAKC,EAAL,CAAvB,EAAiC;AAC/BoM,MAAAA,IAAI,CAAC,6DAA6DpM,EAA9D,CAAJ;AACD;;AACD6F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAOkI,KAAK,EAAZ;AACD,GA3CD;;AA6CA1U,EAAAA,iBAAiB,GAAG,2BAASmf,CAAT,EAAY;AAC9B,QAAIM,CAAJ,EAAOO,CAAP,EAAUqY,qBAAV,EAAiC5W,EAAjC,EAAqCE,IAArC,CAD8B,CAE9B;;AACA0W,IAAAA,qBAAqB,GAAG,KAAxB;AACA5Y,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,SAAKoF,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAGxC,CAArB,EAAwBsC,EAAE,GAAG,CAA7B,EAAgCzB,CAAC,GAAGyB,EAAE,IAAI,CAAC,CAA3C,EAA8C;AAC5C;AACA,UAAIze,eAAe,CAACuV,KAAK,CAACqC,GAAG,GAAGoF,CAAP,CAAN,CAAnB,EAAqC;AACnCqY,QAAAA,qBAAqB,GAAG,IAAxB;AACA;AACD;AACF;;AACD,WAAOA,qBAAP;AACD,GAbD;;AAeAt2B,EAAAA,YAAY,GAAG,sBAASod,CAAT,EAAY;AACzB,QAAIM,CAAJ,EAAOO,CAAP,EAAUsY,sBAAV,EAAkC7W,EAAlC,EAAsCE,IAAtC,CADyB,CAEzB;AAEA;AACA;;AACA,QAAIxC,CAAC,GAAG,CAAR,EAAW;AACTmZ,MAAAA,sBAAsB,GAAG,IAAzB;AACA7Y,MAAAA,CAAC,GAAG7E,GAAJ;;AACA,UAAIxY,kBAAkB,CAACmW,KAAK,CAACqC,GAAG,GAAGuE,CAAP,CAAN,CAAtB,EAAwC;AACtCmZ,QAAAA,sBAAsB,GAAG,KAAzB;AACD;;AACD,WAAKtY,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAGxC,CAAC,GAAG,CAAzB,EAA4BsC,EAAE,GAAG,CAAjC,EAAoCzB,CAAC,GAAGyB,EAAE,IAAI,CAAC,CAA/C,EAAkD;AAChD,YAAI,CAACrf,kBAAkB,CAACmW,KAAK,CAACqC,GAAG,GAAGoF,CAAP,CAAN,CAAvB,EAAyC;AACvCsY,UAAAA,sBAAsB,GAAG,KAAzB;AACA;AACD;AACF;AACF,KAZD,MAYO;AACLA,MAAAA,sBAAsB,GAAG,KAAzB;AACD;;AACD,WAAOA,sBAAP;AACD,GAtBD;;AAwBAvtB,EAAAA,eAAe,GAAG,yBAASyf,QAAT,EAAmBC,UAAnB,EAA+B;AAC/C,QAAI8N,QAAJ,EAAcvY,CAAd,EAAiBb,CAAjB,EAAoBsC,EAApB,EAAwBC,EAAxB,EAA4B8W,SAA5B,EAAuC7W,IAAvC,EAA6CC,IAA7C;AACAzC,IAAAA,CAAC,GAAGlsB,KAAK,CAACu3B,QAAD,EAAWC,UAAX,CAAT,CAF+C,CAG/C;;AACA8N,IAAAA,QAAQ,GAAGhgB,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAhB;AACA4d,IAAAA,SAAS,GAAG,EAAZ;;AACA,SAAKxY,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGxC,CAAxB,EAA4B,KAAKwC,IAAL,GAAYF,EAAE,IAAIE,IAAlB,GAAyBF,EAAE,IAAIE,IAA3D,EAAkE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7F+W,MAAAA,SAAS,CAACnmB,IAAV,CAAezE,GAAG,EAAlB;AACD,KAR8C,CASnD;;;AACI,SAAKoS,CAAC,GAAG0B,EAAE,GAAGE,IAAI,GAAGzC,CAAC,GAAG,CAAzB,EAA6ByC,IAAI,IAAI,CAAR,GAAYF,EAAE,IAAI,CAAlB,GAAsBA,EAAE,IAAI,CAAzD,EAA6D1B,CAAC,GAAG4B,IAAI,IAAI,CAAR,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtF,EAA0F;AACxFrP,MAAAA,IAAI,CAACmmB,SAAS,CAACxY,CAAD,CAAV,CAAJ;AACA3N,MAAAA,IAAI,CAACkmB,QAAD,CAAJ;AACA/gC,MAAAA,MAAM;AACP,KAd8C,CAe/C;;;AACA,WAAO2nB,CAAP;AACD,GAjBD,CAhkpBU,CAmlpBV;AACA;;;AACAzK,EAAAA,KAAK,GAAG,iBAAW;AACjB,QAAI+K,CAAJ,EAAOO,CAAP,EAAUb,CAAV,EAAasC,EAAb,EAAiBgX,SAAjB,EAA4BC,YAA5B,EAA0C/Y,CAA1C,EAA6CgC,IAA7C;AACAlC,IAAAA,CAAC,GAAG,CAAJ;AACAO,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAItqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,YAAYzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAZ,GAAwC,GAAxC,GAA8CnI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA1D;AACD;;AACD3L,IAAAA,IAAI,GARa,CASjB;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIhB,mCAAmC,GAAG,CAA1C,EAA6C;AAC3CnG,MAAAA,GAAG;AACHA,MAAAA,GAAG;AACHyE,MAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACAqwB,MAAAA,OAAO;AACP;AACD;;AACD9G,IAAAA,gBAAgB,GAAG,IAAnB;AACAiS,IAAAA,CAAC,GAAG7E,GAAG,GAAG,CAAV;;AACA,QAAIvlC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAvB,GAAmD,4BAA/D;AACD;;AACDlU,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA2S,IAAAA,CAAC,GAAGpU,eAAe,CAACyB,EAAD,EAAKD,EAAL,CAAnB;;AACA,QAAIxK,YAAY,CAACod,CAAD,CAAhB,EAAqB;AACnB,UAAI9pC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,UAAUzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAV,GAAsC,4BAAlD;AACD;;AACD+X,MAAAA,SAAS,GAAGlgB,KAAK,CAACqC,GAAG,GAAGuE,CAAP,CAAjB;AACAuZ,MAAAA,YAAY,GAAGngB,KAAK,CAACqC,GAAG,GAAG,CAAP,CAApB;AACA5R,MAAAA,OAAO,CAAC4R,GAAG,GAAGuE,CAAP,CAAP;AACAvR,MAAAA,GAAG;AACHA,MAAAA,GAAG;AACH1O,MAAAA,cAAc,CAACigB,CAAD,EAAIuZ,YAAJ,EAAkBD,SAAlB,CAAd;AACD,KAVD,MAUO;AACLzvB,MAAAA,OAAO,CAAC4R,GAAG,GAAGuE,CAAP,CAAP;AACAxK,MAAAA,MAAM;AACP;;AACDgL,IAAAA,CAAC,GAAG/E,GAAG,GAAG6E,CAAV;;AACA,QAAIE,CAAC,KAAK,CAAV,EAAa;AACX/G,MAAAA,IAAI,CAAC,qDAAD,CAAJ;AACD;;AACD,QAAI+G,CAAC,KAAK,CAAV,EAAa;AACXnS,MAAAA,gBAAgB,GAAG,KAAnB;AACA8G,MAAAA,OAAO;AACP;AACD;;AACD8D,IAAAA,UAAU,CAACuH,CAAD,CAAV;AACApT,IAAAA,EAAE,GAAG5f,YAAY,CAACgzB,CAAD,CAAjB;AACApT,IAAAA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAhT,IAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FlV,MAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzH,KAAK,CAACkH,CAAC,GAAGO,CAAL,CAAzB;AACD;;AACDhX,IAAAA,OAAO,CAACyW,CAAD,CAAP;AACApN,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,IAAAA,OAAO;AACP,WAAO9G,gBAAgB,GAAG,KAA1B;AACD,GAlED,CArlpBU,CAyppBV;AACA;AACA;AACA;AACA;AACA;;;AACAtO,EAAAA,cAAc,GAAG,wBAASygB,CAAT,EAAY+Y,YAAZ,EAA0BD,SAA1B,EAAqC;AACpD,QAAIE,IAAJ,EAAUC,UAAV,EAAsBnX,EAAtB,EAA0BC,EAA1B,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CiX,UAA1C;;AACA,QAAIxjD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gBAAZ;AACD;;AACDjM,IAAAA,IAAI,GALgD,CAMpD;AACA;;AACA4K,IAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACAtN,IAAAA,IAAI,CAAComB,SAAD,CAAJ;AACA5lB,IAAAA,aAAa,CAAC,CAAD,EAAI8M,CAAJ,CAAb;AACA3R,IAAAA,KAAK;AACLqE,IAAAA,IAAI,CAACqmB,YAAD,CAAJ;AACA7lB,IAAAA,aAAa,CAAC,CAAD,EAAI8M,CAAJ,CAAb;AACA3R,IAAAA,KAAK;AACLxW,IAAAA,MAAM;AACNohC,IAAAA,UAAU,GAAGhrB,GAAG,EAAhB;;AACA,QAAI+R,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACf,WAAKkZ,UAAU,GAAGpX,EAAE,GAAG,CAAlB,EAAqBE,IAAI,GAAGhC,CAAjC,EAAoC8B,EAAE,IAAIE,IAA1C,EAAgDkX,UAAU,GAAGpX,EAAE,IAAI,CAAnE,EAAsE;AACpEpP,QAAAA,IAAI,CAACumB,UAAD,CAAJ;AACAhmB,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAC,QAAAA,aAAa,CAACgmB,UAAD,EAAalZ,CAAb,CAAb;AACA3R,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;AACR+uB,QAAAA,IAAI,GAAG/qB,GAAG,EAAV;AACAyE,QAAAA,IAAI,CAACsmB,IAAD,CAAJ;AACAtmB,QAAAA,IAAI,CAACsmB,IAAD,CAAJ;AACAruB,QAAAA,MAAM;AACP;AACF,KAZD,MAYO;AACL,WAAKuuB,UAAU,GAAGnX,EAAE,GAAG,CAAlB,EAAqBE,IAAI,GAAGjC,CAAjC,EAAqC,KAAKiC,IAAL,GAAYF,EAAE,IAAIE,IAAlB,GAAyBF,EAAE,IAAIE,IAApE,EAA2EiX,UAAU,GAAG,KAAKjX,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA7G,EAAiH;AAC/GrP,QAAAA,IAAI,CAACumB,UAAD,CAAJ;AACAhmB,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAC,QAAAA,aAAa,CAACgmB,UAAD,EAAalZ,CAAb,CAAb;AACA3R,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;;AACR,YAAIivB,UAAU,GAAG,CAAb,KAAmB,CAAvB,EAA0B;AACxBvuB,UAAAA,MAAM;AACP;AACF;AACF;;AACD,WAAOgK,OAAO,EAAd;AACD,GA1CD;;AA4CAK,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIwK,CAAJ;AACApK,IAAAA,IAAI;;AACJ,QAAI1/B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,aAAazI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAb,GAAyC,GAAzC,GAA+CnI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA3D;AACD;;AACDlU,IAAAA,EAAE,GAAGoB,GAAG,EAAR,CANkB,CAMN;;AACZrB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAPkB,CAON;;AACZyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA2S,IAAAA,CAAC,GAAGpU,eAAe,CAACyB,EAAD,EAAKD,EAAL,CAAnB;;AACA,QAAI,CAACvM,iBAAiB,CAACmf,CAAD,CAAtB,EAA2B;AACzBnW,MAAAA,OAAO,CAAC4R,GAAG,GAAGuE,CAAP,CAAP;AACApiB,MAAAA,UAAU;AACVwP,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD,KAJD,MAIO;AACL5E,MAAAA,OAAO,CAAC4R,GAAG,GAAGuE,CAAP,CAAP;AACAvR,MAAAA,GAAG;AACHA,MAAAA,GAAG;AACJ;;AACD,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCyoB,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR,CADgC,CAEhC;AACA;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAoI,QAAAA,MAAM;AACNrI,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;AACF,KAVD,MAUO;AACL8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAoI,MAAAA,MAAM;AACP;;AACD,WAAON,OAAO,EAAd;AACD,GApCD;;AAsCAM,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAI+K,CAAJ;AACA5K,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6BggB,kBAAkB,CAACxU,IAAI,CAAC0b,EAAD,CAAL,EAAWC,EAAX,CAA/C,IAAiE5G,QAAQ,CAAChV,KAAK,CAAC2b,EAAD,CAAN,CAA7E,EAA0F;AACxFoT,MAAAA,CAAC,GAAG5U,eAAe,CAACyB,EAAD,EAAK3b,IAAI,CAAC0b,EAAD,CAAT,CAAnB;AACA9D,MAAAA,UAAU,CAACkX,CAAD,CAAV;AACD,KAHD,MAGO,IAAIta,kBAAkB,CAACkH,EAAD,EAAKC,EAAL,CAAtB,EAAgC;AACrCmT,MAAAA,CAAC,GAAG5U,eAAe,CAACyB,EAAD,EAAKD,EAAL,CAAnB;AACA9D,MAAAA,UAAU,CAACkX,CAAD,CAAV;AACD;;AACD,WAAOrL,OAAO,EAAd;AACD,GAbD,CAjvpBU,CAgwpBV;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;AACA7L,EAAAA,UAAU,GAAG,oBAASkX,CAAT,EAAY;AACvB,QAAImZ,qBAAJ,EAA2BC,qBAA3B,EAAkDC,YAAlD,EAAgEC,SAAhE,EAA2EC,MAA3E,EAAmFC,KAAnF,EAA0FC,OAA1F,EAAmGC,OAAnG,EAA4GC,WAA5G,EAAyHC,KAAzH,EAAgIC,OAAhI,EAAyIC,GAAzI,EAA8IC,WAA9I,EAA2JC,4BAA3J,EAAyLC,QAAzL,EAAmMC,iCAAnM,EAAsOC,0BAAtO,EAAkQC,QAAlQ,EAA4QC,GAA5Q,EAAiRC,4BAAjR,EAA+SC,GAA/S,EAAoTC,4BAApT,EAAkVC,IAAlV,EAAwVC,MAAxV,EAAgWC,OAAhW,EAAyWC,IAAzW,EAA+WC,OAA/W,EAAwXC,SAAxX,EAAmYC,KAAnY,EAA0YC,IAA1Y,EAAgZC,OAAhZ,EAAyZC,IAAzZ,EAA+ZC,MAA/Z,EAAuaC,IAAva,EAA6aC,IAA7a,EAAmbC,IAAnb,EAAybC,aAAzb,EAAwcC,sCAAxc,EAAgfC,IAAhf,EAAsfC,IAAtf,EAA4fC,GAA5f,EAAigBC,WAAjgB,EAA8gBC,SAA9gB,EAAyhBC,SAAzhB,EAAoiBC,UAApiB,EAAgjBC,aAAhjB,EAA+jBC,oBAA/jB,EAAqlBC,iBAArlB,EAAwmBC,GAAxmB,EAA6mBC,oBAA7mB,EAAmoBC,GAAnoB,EAAwoBC,UAAxoB,EAAopBC,GAAppB,EAAypBC,qBAAzpB,EAAgrBC,YAAhrB,EAA8rBC,mBAA9rB,EAAmtBC,oBAAntB,EAAyuBC,8BAAzuB,EAAywBC,MAAzwB,EAAixBC,MAAjxB,EAAyxBC,MAAzxB,EAAiyBC,kBAAjyB,EAAqzBC,YAArzB,EAAm0BC,uBAAn0B,EAA41BC,6BAA51B,EAA23BC,OAA33B,EAAo4Btb,EAAp4B,EAAw4BkC,GAAx4B,EAA64BQ,IAA74B,EAAm5B6B,IAAn5B,EAAy5BtE,EAAz5B,EAA65B8E,EAA75B,EAAi6BwW,iBAAj6B,EAAo7BC,gBAAp7B,EAAs8Btb,IAAt8B,EAA48BC,IAA58B,EAAk9BC,IAAl9B,EAAw9Bqb,uBAAx9B,EAAi/BC,aAAj/B,EAAggCC,WAAhgC,EAA6gCC,iBAA7gC,CADuB,CAEvB;;AACAtoB,IAAAA,IAAI,GAHmB,CAIvB;;AACA,QAAI4K,CAAC,KAAK,CAAV,EAAa;AACX;AACAlT,MAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAlB,MAAAA,EAAE,GAAGkB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjV,MAAAA,MAAM;AACN8S,MAAAA,MAAM;AACNgK,MAAAA,OAAO;AACP;AACD,KAfsB,CAgBvB;;;AACA,QAAIqL,CAAC,KAAK,CAAV,EAAa;AACX;AACAlT,MAAAA,EAAE,GAAGmB,GAAG,EAAR,CAFW,CAEC;;AACZlB,MAAAA,EAAE,GAAGkB,GAAG,EAAR,CAHW,CAGC;;AACZjB,MAAAA,EAAE,GAAGiB,GAAG,EAAR,CAJW,CAIC;AAEZ;;AACAyE,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAkG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,MAAAA,KAAK,GATM,CAUX;;AACA4E,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA7C,MAAAA,QAAQ;AACRyI,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ,GAfG,CAgBX;;AACAqP,MAAAA,QAAQ,GAjBG,CAkBX;;AACApG,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,MAAAA,KAAK,GApBM,CAqBX;;AACApB,MAAAA,EAAE,GAAGgB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAyF,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAuM,MAAAA,QAAQ,GAzBG,CAyBC;AAEZ;;AACA5G,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAmG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACRpS,MAAAA,MAAM,GA/BK,CAgCX;AACA;AACA;;AACA6a,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAyF,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAxgB,MAAAA,GAAG,GArCQ,CAsCX;AACA;;AACAoe,MAAAA,MAAM,GAxCK,CAyCX;AACA;AAEA;;AACA+H,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjV,MAAAA,MAAM;AACNqb,MAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,MAAAA,QAAQ,GAhDG,CAiDX;AACA;AACA;AACA;;AACA0K,MAAAA,OAAO;AACP;AACD,KAxEsB,CAyEvB;;;AACA,QAAIqL,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EAAwB;AACtBlT,MAAAA,EAAE,GAAGmB,GAAG,EAAR,CADsB,CACV;;AACZlB,MAAAA,EAAE,GAAGkB,GAAG,EAAR,CAFsB,CAEV;;AACZjB,MAAAA,EAAE,GAAGiB,GAAG,EAAR,CAHsB,CAGV;;AACZhB,MAAAA,EAAE,GAAGgB,GAAG,EAAR,CAJsB,CAIV;AAEZ;;AACAyE,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ;AACRmxB,MAAAA,IAAI,GAAGntB,GAAG,EAAV;AACAyE,MAAAA,IAAI,CAAC0oB,IAAD,CAAJ;AACA1oB,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ;AACRoxB,MAAAA,IAAI,GAAGptB,GAAG,EAAV,CAdsB,CAetB;;AACAyE,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA9C,MAAAA,QAAQ;AACR+wB,MAAAA,IAAI,GAAG/sB,GAAG,EAAV;AACAyE,MAAAA,IAAI,CAACsoB,IAAD,CAAJ;AACAtoB,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA9C,MAAAA,QAAQ;AACRixB,MAAAA,IAAI,GAAGjtB,GAAG,EAAV;AACAyE,MAAAA,IAAI,CAACwoB,IAAD,CAAJ;AACAxoB,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,MAAAA,QAAQ;AACRkxB,MAAAA,MAAM,GAAGltB,GAAG,EAAZ;AACAyE,MAAAA,IAAI,CAACyoB,MAAD,CAAJ;AACAloB,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,MAAAA,QAAQ;AACR6xB,MAAAA,SAAS,GAAG7tB,GAAG,EAAf;AACAyE,MAAAA,IAAI,CAACwoB,IAAD,CAAJ;AACAjoB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACRsvB,MAAAA,MAAM,GAAGtrB,GAAG,EAAZ,CAnCsB,CAoCtB;;AACAyE,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA7C,MAAAA,QAAQ;AACRwwB,MAAAA,IAAI,GAAGxsB,GAAG,EAAV;AACAyE,MAAAA,IAAI,CAAC+nB,IAAD,CAAJ;AACA/nB,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA7C,MAAAA,QAAQ;AACR2wB,MAAAA,IAAI,GAAG3sB,GAAG,EAAV;AACAgF,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA7C,MAAAA,QAAQ;AACRuvB,MAAAA,KAAK,GAAGvrB,GAAG,EAAX;AACAyE,MAAAA,IAAI,CAAC+nB,IAAD,CAAJ;AACA/nB,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,MAAAA,QAAQ;AACRywB,MAAAA,MAAM,GAAGzsB,GAAG,EAAZ;AACAyE,MAAAA,IAAI,CAACgoB,MAAD,CAAJ;AACAhoB,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,MAAAA,QAAQ;AACR0wB,MAAAA,OAAO,GAAG1sB,GAAG,EAAb;AACAyE,MAAAA,IAAI,CAACgoB,MAAD,CAAJ;AACAznB,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACRqvB,MAAAA,SAAS,GAAGrrB,GAAG,EAAf;AACAyE,MAAAA,IAAI,CAACioB,OAAD,CAAJ;AACA1nB,MAAAA,YAAY,CAAC,CAAC,EAAF,CAAZ;AACAhJ,MAAAA,QAAQ;AACR2xB,MAAAA,WAAW,GAAG3tB,GAAG,EAAjB;AACAyE,MAAAA,IAAI,CAAC8mB,KAAD,CAAJ;AACAvmB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACR2vB,MAAAA,KAAK,GAAG3rB,GAAG,EAAX,CApEsB,CAqEtB;;AACAyE,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ;AACR8wB,MAAAA,KAAK,GAAG9sB,GAAG,EAAX;AACAyE,MAAAA,IAAI,CAACqoB,KAAD,CAAJ;AACAroB,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA9C,MAAAA,QAAQ;AACR4wB,MAAAA,OAAO,GAAG5sB,GAAG,EAAb;AACAyE,MAAAA,IAAI,CAACmoB,OAAD,CAAJ;AACAnoB,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,MAAAA,QAAQ;AACR6wB,MAAAA,SAAS,GAAG7sB,GAAG,EAAf;AACAyE,MAAAA,IAAI,CAACqoB,KAAD,CAAJ;AACA9nB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACRyvB,MAAAA,OAAO,GAAGzrB,GAAG,EAAb;AACAgF,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC2oB,IAAD,CAAJ;AACApxB,MAAAA,QAAQ;AACRA,MAAAA,QAAQ;AACR4xB,MAAAA,SAAS,GAAG5tB,GAAG,EAAf;AACAyE,MAAAA,IAAI,CAACmoB,OAAD,CAAJ;AACA5nB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACRU,MAAAA,MAAM;AACNoxB,MAAAA,UAAU,GAAG9tB,GAAG,EAAhB;AACAyE,MAAAA,IAAI,CAACooB,SAAD,CAAJ;AACA7nB,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAhJ,MAAAA,QAAQ;AACRovB,MAAAA,YAAY,GAAGprB,GAAG,EAAlB;AACAyE,MAAAA,IAAI,CAACsoB,IAAD,CAAJ;AACAtoB,MAAAA,IAAI,CAACgnB,OAAD,CAAJ;AACApgB,MAAAA,QAAQ;AACR2gB,MAAAA,QAAQ,GAAGhsB,GAAG,EAAd;AACAyE,MAAAA,IAAI,CAACsoB,IAAD,CAAJ;AACAtoB,MAAAA,IAAI,CAAC0oB,IAAD,CAAJ;AACAnxB,MAAAA,QAAQ;AACRgxB,MAAAA,OAAO,GAAGhtB,GAAG,EAAb;AACAyE,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACApC,MAAAA,MAAM;AACN+H,MAAAA,IAAI,CAAC8mB,KAAD,CAAJ;AACA3hC,MAAAA,MAAM;AACNmkC,MAAAA,aAAa,GAAG/tB,GAAG,EAAnB;;AACA,UAAI+R,CAAC,KAAK,CAAV,EAAa;AACX,YAAItqC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,gEAAZ;AACD,SAHU,CAIX;AACA;AACA;AACA;;;AACA,YAAI3rC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgB4Y,QAAQ,CAAClZ,QAAT,EAA5B;AACD;;AACDrO,QAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAhnB,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,QAAAA,KAAK;AACL4E,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,QAAAA,QAAQ;AACR0vB,QAAAA,WAAW,GAAG1rB,GAAG,EAAjB;AACAyE,QAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAxiB,QAAAA,QAAQ;AACRrrB,QAAAA,WAAW;AACX+tC,QAAAA,0BAA0B,GAAGlsB,GAAG,EAAhC;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB8Y,0BAA0B,CAACpZ,QAA3B,EAArC;AACD,SAvBU,CAwBX;AACA;AAEA;;;AACArO,QAAAA,IAAI,CAAC2mB,YAAD,CAAJ;AACA3mB,QAAAA,IAAI,CAACopB,SAAD,CAAJ;AACAppB,QAAAA,IAAI,CAACuoB,OAAD,CAAJ;AACAvoB,QAAAA,IAAI,CAACmpB,SAAD,CAAJ;AACAnpB,QAAAA,IAAI,CAACkpB,WAAD,CAAJ;AACArvC,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHkrB,QAAAA,QAAQ;AACRrrB,QAAAA,WAAW;AACXmvC,QAAAA,aAAa,GAAGttB,GAAG,EAAnB;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBka,aAAa,CAACxa,QAAd,EAArC;AACD,SA1CU,CA2CX;;;AACArO,QAAAA,IAAI,CAAC6mB,MAAD,CAAJ;AACA7mB,QAAAA,IAAI,CAACqpB,UAAD,CAAJ;AACArpB,QAAAA,IAAI,CAAC4mB,SAAD,CAAJ;AACA/sC,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACH6tC,QAAAA,QAAQ,GAAGnsB,GAAG,EAAd;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgB+Y,QAAQ,CAACrZ,QAAT,EAA5B;AACD,SApDU,CAqDX;;;AACArO,QAAAA,IAAI,CAAC0nB,QAAD,CAAJ;AACAnnB,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,QAAAA,KAAK;AACLqE,QAAAA,IAAI,CAACinB,WAAD,CAAJ;AACArgB,QAAAA,QAAQ;AACRpG,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACLoJ,QAAAA,QAAQ;AACR4iB,QAAAA,GAAG,GAAGpsB,GAAG,EAAT;;AACA,YAAIxL,kBAAkB,CAAC84B,aAAD,CAAtB,EAAuC;AACrC,cAAI94B,kBAAkB,CAAC03B,0BAAD,CAAtB,EAAoD;AAClD,gBAAIzkD,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,gDAAZ;AACD;;AACD3O,YAAAA,IAAI,CAACspB,aAAD,CAAJ,CAJkD,CAI7B;;AACrBrnB,YAAAA,OAAO;AACP;AACD,WAPD,MAOO;AACL,gBAAIj/B,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,oDAAZ;AACD;;AACD3O,YAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,YAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAgG,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,YAAAA,QAAQ;AACRA,YAAAA,QAAQ;AACRyI,YAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,YAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,YAAAA,QAAQ;AACRqP,YAAAA,QAAQ;AACR5G,YAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAhnB,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,YAAAA,QAAQ;AACRpS,YAAAA,MAAM,GAhBD,CAgBK;;AACV2lC,YAAAA,aAAa,GAAGvvB,GAAG,EAAnB;AACAyE,YAAAA,IAAI,CAAC8qB,aAAD,CAAJ,CAlBK,CAkBgB;;AACrB9qB,YAAAA,IAAI,CAAC8qB,aAAD,CAAJ,CAnBK,CAoBL;AACA;;AACA9qB,YAAAA,IAAI,CAACmoB,OAAD,CAAJ;AACA5nB,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,YAAAA,QAAQ,GAxBH,CAyBL;;AACAyI,YAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,YAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,YAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAgG,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,YAAAA,QAAQ;AACRA,YAAAA,QAAQ;AACRA,YAAAA,QAAQ;AACRU,YAAAA,MAAM,GAjCD,CAkCL;;AACA+H,YAAAA,IAAI,CAACwoB,IAAD,CAAJ;AACAvwB,YAAAA,MAAM,GApCD,CAqCL;;AACApe,YAAAA,GAAG;AACHA,YAAAA,GAAG,GAvCE,CAwCL;;AACAmmB,YAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,YAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAhwB,YAAAA,QAAQ,GA3CH,CA4CL;;AACApS,YAAAA,MAAM;AACN8c,YAAAA,OAAO;AACP;AACD;AACF;;AACDwkB,QAAAA,qBAAqB,GAAG,KAAxB;AACA+D,QAAAA,uBAAuB,GAAG,KAA1B;;AACA,eAAO,CAAC/D,qBAAR,EAA+B;AAC7B;AACAzmB,UAAAA,IAAI,CAAC2nB,GAAD,CAAJ;;AACA,cAAI6C,uBAAJ,EAA6B;AAC3BvyB,YAAAA,MAAM;AACP;;AACD+H,UAAAA,IAAI,CAAC0nB,QAAD,CAAJ;AACA7tC,UAAAA,GAAG;AACH2mB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,UAAAA,QAAQ;AACRiJ,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLoJ,UAAAA,QAAQ;AACRqiB,UAAAA,GAAG,GAAG7rB,GAAG,EAAT;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,eAAeyY,GAAG,CAAC/Y,QAAJ,EAA3B;AACD;;AACDrO,UAAAA,IAAI,CAAConB,GAAD,CAAJ;AACAriB,UAAAA,QAAQ;AACRrrB,UAAAA,WAAW;AACX4tC,UAAAA,4BAA4B,GAAG/rB,GAAG,EAAlC;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,mCAAmC2Y,4BAA4B,CAACjZ,QAA7B,EAA/C;AACD;;AACD,cAAIte,kBAAkB,CAACu3B,4BAAD,CAAtB,EAAsD;AACpD,gBAAItkD,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,qCAAZ;AACD;;AACD6b,YAAAA,uBAAuB,GAAG,IAA1B;AACD,WALD,MAKO;AACL/D,YAAAA,qBAAqB,GAAG,IAAxB;AACD;AACF;;AACDzmB,QAAAA,IAAI,CAAConB,GAAD,CAAJ;AACApnB,QAAAA,IAAI,CAAC8mB,KAAD,CAAJ;AACAvvB,QAAAA,QAAQ;AACRwvB,QAAAA,OAAO,GAAGxrB,GAAG,EAAb;AACAyE,QAAAA,IAAI,CAAC+mB,OAAD,CAAJ;AACAxmB,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,QAAAA,QAAQ;AACR4vB,QAAAA,OAAO,GAAG5rB,GAAG,EAAb,CAnKW,CAoKX;;AACAyE,QAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAgS,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;AACRmzB,QAAAA,OAAO,GAAGnvB,GAAG,EAAb;AACAgF,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAAC0qB,OAAD,CAAJ;AACA7wC,QAAAA,GAAG;AACH+wC,QAAAA,gBAAgB,GAAGrvB,GAAG,EAAtB;AACAgF,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAAC0qB,OAAD,CAAJ;AACA9jB,QAAAA,QAAQ;AACR+jB,QAAAA,iBAAiB,GAAGpvB,GAAG,EAAvB;AACAyE,QAAAA,IAAI,CAAConB,GAAD,CAAJ;AACApnB,QAAAA,IAAI,CAAC8mB,KAAD,CAAJ;AACA3hC,QAAAA,MAAM;AACNkiC,QAAAA,WAAW,GAAG9rB,GAAG,EAAjB,CAtLW,CAuLX;;AACAyE,QAAAA,IAAI,CAACspB,aAAD,CAAJ,CAxLW,CAwLU;;AACrBtpB,QAAAA,IAAI,CAACqnB,WAAD,CAAJ;AACApvB,QAAAA,MAAM,GA1LK,CA0LD;;AACV+H,QAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAvnB,QAAAA,IAAI,CAAC+mB,OAAD,CAAJ;AACA5hC,QAAAA,MAAM;AACN8S,QAAAA,MAAM,GA9LK,CA8LD;AACV;;AACApe,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHkrB,QAAAA,QAAQ,GAlMG,CAmMX;;AACA/E,QAAAA,IAAI,CAACspB,aAAD,CAAJ,CApMW,CAoMU;;AACrBtpB,QAAAA,IAAI,CAACqnB,WAAD,CAAJ;AACArnB,QAAAA,IAAI,CAAC4qB,gBAAD,CAAJ;AACArzB,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,QAAAA,MAAM,GAzMK,CAyMD;;AACV6a,QAAAA,IAAI,CAAC2qB,iBAAD,CAAJ;AACA3qB,QAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAhwB,QAAAA,QAAQ;AACRyI,QAAAA,IAAI,CAACmnB,OAAD,CAAJ;AACAhiC,QAAAA,MAAM,GA9MK,CA8MD;AACV;;AACAtL,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHkrB,QAAAA,QAAQ,GAlNG,CAmNX;;AACA/E,QAAAA,IAAI,CAACspB,aAAD,CAAJ,CApNW,CAoNU;;AACrBtpB,QAAAA,IAAI,CAACqnB,WAAD,CAAJ;AACArnB,QAAAA,IAAI,CAAC2qB,iBAAD,CAAJ;AACApzB,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,QAAAA,MAAM,GAzNK,CAyND;;AACV6a,QAAAA,IAAI,CAAC4qB,gBAAD,CAAJ;AACA5qB,QAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAhwB,QAAAA,QAAQ;AACRyI,QAAAA,IAAI,CAACmnB,OAAD,CAAJ;AACAhiC,QAAAA,MAAM,GA9NK,CA8ND;AACV;;AACAtL,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHkrB,QAAAA,QAAQ;AACR9C,QAAAA,OAAO;AACP;AACD,OAvVqB,CAwVtB;AACA;;;AACA,UAAIqL,CAAC,KAAK,CAAV,EAAa;AACX,YAAItqC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,kEAAZ;AACD;;AACDnU,QAAAA,EAAE,GAAGe,GAAG,EAAR,CAJW,CAIC;;AACZ,YAAIxL,kBAAkB,CAACsK,EAAD,CAAlB,IAA0BtK,kBAAkB,CAACwK,EAAD,CAA5C,IAAoD,CAACxK,kBAAkB,CAACuK,EAAD,CAAvE,IAA+E,CAACvK,kBAAkB,CAACyK,EAAD,CAAtG,EAA4G;AAC1G,cAAIx3B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,kBAAZ;AACD;;AACD3O,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+iB,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACxF,EAAD,CAAJ;AACA3gB,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHmmB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA6tB,UAAAA,KAAK;AACL4nB,UAAAA,oBAAoB,GAAG1uB,GAAG,EAA1B;AACA+T,UAAAA,IAAI,GAAG2a,oBAAoB,CAACtiB,MAArB,CAA4B9gB,IAAnC;;AACA,eAAKuoB,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAGhC,IAAI,CAACta,MAAxB,EAAgCoa,EAAE,GAAGkC,GAArC,EAA0ClC,EAAE,EAA5C,EAAgD;AAC9Cmb,YAAAA,YAAY,GAAGjb,IAAI,CAACF,EAAD,CAAnB;AACApP,YAAAA,IAAI,CAACuqB,YAAD,CAAJ;AACA/pB,YAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,YAAAA,KAAK;AACLoJ,YAAAA,QAAQ;AACR/E,YAAAA,IAAI,CAACuqB,YAAD,CAAJ;AACA/pB,YAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,YAAAA,KAAK;AACL1D,YAAAA,MAAM;AACN8M,YAAAA,QAAQ;AACT;;AACD9C,UAAAA,OAAO;AACP;AACD,SAtCU,CAuCX;;;AACAjC,QAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAyF,QAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,QAAAA,QAAQ;AACRqxB,QAAAA,IAAI,GAAGrtB,GAAG,EAAV,CA3CW,CA4CX;;AACAyE,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAwF,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRwxB,QAAAA,IAAI,GAAGxtB,GAAG,EAAV;AACAyE,QAAAA,IAAI,CAAC+oB,IAAD,CAAJ;AACA/oB,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRyxB,QAAAA,IAAI,GAAGztB,GAAG,EAAV,CApDW,CAqDX;;AACAgF,QAAAA,YAAY,CAAC,GAAD,CAAZ;AACAP,QAAAA,IAAI,CAACkoB,IAAD,CAAJ;AACAloB,QAAAA,IAAI,CAACgpB,IAAD,CAAJ;AACAzxB,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GA1DG,CA0DC;;AACZgJ,QAAAA,YAAY,CAAC,CAAC,GAAF,CAAZ;AACAP,QAAAA,IAAI,CAACgoB,MAAD,CAAJ;AACAhoB,QAAAA,IAAI,CAAC+oB,IAAD,CAAJ;AACA/oB,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA9C,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAjEG,CAiEC;;AACZgJ,QAAAA,YAAY,CAAC,CAAC,GAAF,CAAZ;AACAP,QAAAA,IAAI,CAAC+nB,IAAD,CAAJ;AACA/nB,QAAAA,IAAI,CAAC0oB,IAAD,CAAJ;AACA1oB,QAAAA,IAAI,CAAC+oB,IAAD,CAAJ;AACAxxB,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAxEG,CAwEC;;AACZgJ,QAAAA,YAAY,CAAC,GAAD,CAAZ;AACAP,QAAAA,IAAI,CAACioB,OAAD,CAAJ;AACAjoB,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GA/EG,CA+EC;;AACZyI,QAAAA,IAAI,CAACkpB,WAAD,CAAJ;AACAlpB,QAAAA,IAAI,CAAC4oB,IAAD,CAAJ;AACArxB,QAAAA,QAAQ,GAlFG,CAkFC;;AACZgJ,QAAAA,YAAY,CAAC,GAAD,CAAZ;AACAP,QAAAA,IAAI,CAACmoB,OAAD,CAAJ;AACAnoB,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,QAAAA,IAAI,CAAC+oB,IAAD,CAAJ;AACAxxB,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAzFG,CAyFC;;AACZgJ,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAACsoB,IAAD,CAAJ;AACAtoB,QAAAA,IAAI,CAAC4oB,IAAD,CAAJ;AACA5oB,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAlGG,CAkGC;;AACZgJ,QAAAA,YAAY,CAAC,CAAC,EAAF,CAAZ;AACAP,QAAAA,IAAI,CAACooB,SAAD,CAAJ;AACApoB,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAzGG,CAyGC;;AACZgJ,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,QAAAA,IAAI,CAACooB,SAAD,CAAJ;AACApoB,QAAAA,IAAI,CAAC4oB,IAAD,CAAJ;AACArxB,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GA9GG,CA8GC;;AACZgJ,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,QAAAA,IAAI,CAACqoB,KAAD,CAAJ;AACAroB,QAAAA,IAAI,CAAC2oB,IAAD,CAAJ;AACA3oB,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GArHG,CAqHC;;AACZgJ,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAACqoB,KAAD,CAAJ;AACAroB,QAAAA,IAAI,CAAC0oB,IAAD,CAAJ;AACA1oB,QAAAA,IAAI,CAAC4oB,IAAD,CAAJ;AACArxB,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GA5HG,CA4HC;;AACZgJ,QAAAA,YAAY,CAAC,CAAC,EAAF,CAAZ;AACAP,QAAAA,IAAI,CAACwoB,IAAD,CAAJ;AACAxoB,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,QAAAA,IAAI,CAAC+oB,IAAD,CAAJ;AACAxxB,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAnIG,CAmIC;;AACZgJ,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,QAAAA,IAAI,CAACyoB,MAAD,CAAJ;AACAzoB,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GA1IG,CA0IC;;AACZyI,QAAAA,IAAI,CAACopB,SAAD,CAAJ;AACAppB,QAAAA,IAAI,CAAC4oB,IAAD,CAAJ;AACArxB,QAAAA,QAAQ,GA7IG,CA6IC;;AACZgJ,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAACuoB,OAAD,CAAJ;AACAvoB,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GApJG,CAoJC;;AACZyI,QAAAA,IAAI,CAACuoB,OAAD,CAAJ;AACAvoB,QAAAA,IAAI,CAAC4oB,IAAD,CAAJ;AACArxB,QAAAA,QAAQ,GAvJG,CAuJC;AAEZ;AACA;;AACA1d,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHgvC,QAAAA,aAAa,GAAGttB,GAAG,EAAnB;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,oBAAoBka,aAAa,CAACxa,QAAd,EAAhC;AACD,SA7KU,CA8KX;;;AACArO,QAAAA,IAAI,CAAC0oB,IAAD,CAAJ,CA/KW,CA+KC;;AACZnoB,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,QAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GApLG,CAoLC;;AACZgJ,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAzLG,CAyLC;AAEZ;;AACA1d,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACH0tC,QAAAA,QAAQ,GAAGhsB,GAAG,EAAd;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,eAAe4Y,QAAQ,CAAClZ,QAAT,EAA3B;AACD,SAjMU,CAkMX;;;AACA9N,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAAC2oB,IAAD,CAAJ;AACApxB,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,QAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAhD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,QAAAA,IAAI,CAACsoB,IAAD,CAAJ;AACAtoB,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,QAAAA,IAAI,CAAC4oB,IAAD,CAAJ;AACArxB,QAAAA,QAAQ;AACRA,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,CAAC,EAAF,CAAZ;AACAP,QAAAA,IAAI,CAACqoB,KAAD,CAAJ;AACAroB,QAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GA3NG,CA4NX;;AACA1d,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACH6tC,QAAAA,QAAQ,GAAGnsB,GAAG,EAAd;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,eAAe+Y,QAAQ,CAACrZ,QAAT,EAA3B;AACD,SApOU,CAqOX;;;AACA9N,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAACqoB,KAAD,CAAJ;AACA9wB,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAACsoB,IAAD,CAAJ;AACA/wB,QAAAA,QAAQ;AACR1d,QAAAA,GAAG;AACH0mB,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAAC+nB,IAAD,CAAJ;AACAxwB,QAAAA,QAAQ;AACRpS,QAAAA,MAAM;AACNskC,QAAAA,GAAG,GAAGluB,GAAG,EAAT;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,QAAQ8a,GAAG,CAACpb,QAAJ,EAApB;AACD,SApPU,CAqPX;;;AACArO,QAAAA,IAAI,CAACwoB,IAAD,CAAJ;AACAjoB,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAACmoB,OAAD,CAAJ;AACA5wB,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAACgoB,MAAD,CAAJ;AACAzwB,QAAAA,QAAQ;AACR1d,QAAAA,GAAG;AACHA,QAAAA,GAAG;AACH0mB,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAACkoB,IAAD,CAAJ;AACA3wB,QAAAA,QAAQ;AACRpS,QAAAA,MAAM;AACNwkC,QAAAA,GAAG,GAAGpuB,GAAG,EAAT;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,QAAQgb,GAAG,CAACtb,QAAJ,EAApB;AACD;;AACD,YAAIrrC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,WAAWpG,GAAvB;AACD;;AACD,YAAI,CAACxY,kBAAkB,CAACsK,EAAD,CAAvB,EAA6B;AAC3B,cAAIr3B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,WAAWpG,GAAvB;AACD;;AACDhI,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,UAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA7C,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAkG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACH0mB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAmG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRpS,UAAAA,MAAM;AACNskC,UAAAA,GAAG,GAAGluB,GAAG,EAAT;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8B8a,GAAG,CAACpb,QAAJ,EAA1C;AACD;;AACDrO,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAkG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACL4E,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA2F,UAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,UAAAA,IAAI,CAACzF,EAAD,CAAJ;AACAyF,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAmG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACH0mB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAmG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRpS,UAAAA,MAAM;AACNwkC,UAAAA,GAAG,GAAGpuB,GAAG,EAAT;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8Bgb,GAAG,CAACtb,QAAJ,EAA1C;AACD,WArD0B,CAsD3B;;;AACArO,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAkG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACL4E,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,GAAD,CAAZ;AACAP,UAAAA,IAAI,CAACkoB,IAAD,CAAJ;AACAloB,UAAAA,IAAI,CAACxF,EAAD,CAAJ;AACAjD,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,CAAC,EAAF,CAAZ;AACAP,UAAAA,IAAI,CAACgoB,MAAD,CAAJ;AACAhoB,UAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACA9C,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,UAAAA,IAAI,CAACsoB,IAAD,CAAJ;AACAtoB,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,UAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACH0mB,UAAAA,YAAY,CAAC,GAAD,CAAZ;AACAP,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAmG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRpS,UAAAA,MAAM;AACN0kC,UAAAA,GAAG,GAAGtuB,GAAG,EAAT;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8Bkb,GAAG,CAACxb,QAAJ,EAA1C;AACD;;AACD,cAAIrrC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,WAAWpG,GAAvB;AACD;;AACDvI,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;;AACL,cAAI34B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,cAAczI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA1B;AACD;;AACDrO,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAzpB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;;AACR,cAAIv0B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA5B;AACD;;AACDrO,UAAAA,IAAI,CAAC2pB,GAAD,CAAJ;AACA3pB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+iB,UAAAA,QAAQ;;AACR,cAAIv0B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,cAAczI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA1B;AACD;;AACDrO,UAAAA,IAAI,CAAC6pB,GAAD,CAAJ;;AACA,cAAI7mD,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,UAAUzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAtB;AACD;;AACDx0B,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHkrB,UAAAA,QAAQ;;AACR,cAAI/hC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,gCAAgCzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA5C;AACD;;AACDrO,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA6tB,UAAAA,KAAK;AACLioB,UAAAA,kBAAkB,GAAG/uB,GAAG,EAAxB;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB2b,kBAArC;AACD;;AACD/a,UAAAA,IAAI,GAAG+a,kBAAkB,CAAC3iB,MAAnB,CAA0B9gB,IAAjC;;AACA,eAAKwoB,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAGvC,IAAI,CAACva,MAAzB,EAAiCqa,EAAE,GAAGyC,IAAtC,EAA4CzC,EAAE,EAA9C,EAAkD;AAChDkb,YAAAA,YAAY,GAAGhb,IAAI,CAACF,EAAD,CAAnB;AACArP,YAAAA,IAAI,CAACuqB,YAAD,CAAJ;AACAvqB,YAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAkG,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,YAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA7C,YAAAA,QAAQ;AACRpS,YAAAA,MAAM;AACNyhB,YAAAA,QAAQ;AACR7B,YAAAA,QAAQ;;AACR,gBAAI/hC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8BzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAA1C;AACD;AACF;;AACDpM,UAAAA,OAAO;AACP;AACD,SAnJD,MAmJO;AACLwnB,UAAAA,GAAG,GAAGnvB,EAAN;AACAqvB,UAAAA,GAAG,GAAGpvB,EAAN;AACAsvB,UAAAA,GAAG,GAAGrvgG,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAR,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAlyB,UAAAA,QAAQ;AACR4yB,UAAAA,MAAM,GAAG5uB,GAAG,EAAZ;AACAgF,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAlpB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC6pB,GAAD,CAAJ;AACAjjB,UAAAA,QAAQ;AACRwjB,UAAAA,MAAM,GAAG7uB,GAAG,EAAZ;AACAyE,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAlpB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACL4E,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,UAAAA,MAAM;AACNqb,UAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAR,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAzpB,UAAAA,IAAI,CAAC6pB,GAAD,CAAJ;AACAtyB,UAAAA,QAAQ;AACRA,UAAAA,QAAQ;AACRiJ,UAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAR,UAAAA,IAAI,CAAC2pB,GAAD,CAAJ;AACAppB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHwwC,UAAAA,MAAM,GAAG9uB,GAAG,EAAZ;AACAyE,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLqE,UAAAA,IAAI,CAACmqB,MAAD,CAAJ;AACAnqB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACoqB,MAAD,CAAJ;AACApqB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+iB,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACqqB,MAAD,CAAJ;AACAxwC,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHA,UAAAA,GAAG;;AACH,cAAI7W,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,qBAAqBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAjC;AACD;;AACDrO,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA6tB,UAAAA,KAAK;AACLwoB,UAAAA,uBAAuB,GAAGtvB,GAAG,EAA7B;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8Bkc,uBAA1C;AACD;;AACD5B,UAAAA,GAAG,GAAG,IAAN;AACAzZ,UAAAA,IAAI,GAAGqb,uBAAuB,CAACljB,MAAxB,CAA+B9gB,IAAtC,CA3MK,CA4ML;;AACA,eAAKstB,EAAE,GAAG,CAAL,EAAQR,IAAI,GAAGnE,IAAI,CAACxa,MAAzB,EAAiCmf,EAAE,GAAGR,IAAtC,EAA4CQ,EAAE,EAA9C,EAAkD;AAChDoW,YAAAA,YAAY,GAAG/a,IAAI,CAAC2E,EAAD,CAAnB;;AACA,gBAAInxC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB4b,YAArC;AACD;;AACDvqB,YAAAA,IAAI,CAACuqB,YAAD,CAAJ;AACAhqB,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,YAAAA,QAAQ;AACRyI,YAAAA,IAAI,CAACypB,GAAD,CAAJ;AACA5vC,YAAAA,GAAG;AACHH,YAAAA,WAAW;AACXsxC,YAAAA,iBAAiB,GAAGzvB,GAAG,EAAvB;;AACA,gBAAIv4B,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmB4b,YAA/B;AACD;;AACD,gBAAI,CAACx6B,kBAAkB,CAACi7B,iBAAD,CAAvB,EAA4C;AAC1C/B,cAAAA,GAAG,GAAGsB,YAAN;AACA;AACD;AACF;;AACD,cAAIvnD,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsBsa,GAAlC;AACD;;AACDjpB,UAAAA,IAAI,CAACipB,GAAD,CAAJ;AACA1oB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACA5vC,UAAAA,GAAG;AACH2mB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLoJ,UAAAA,QAAQ;AACRgmB,UAAAA,WAAW,GAAGxvB,GAAG,EAAjB;AACAyE,UAAAA,IAAI,CAAC2pB,GAAD,CAAJ;AACAppB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC+qB,WAAD,CAAJ;AACA5lC,UAAAA,MAAM;AACN4f,UAAAA,QAAQ;AACRilB,UAAAA,mBAAmB,GAAGzuB,GAAG,EAAzB;AACAyE,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAlpB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACipB,GAAD,CAAJ;AACA1oB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACHkwC,UAAAA,YAAY,GAAGxuB,GAAG,EAAlB,CA3PK,CA4PL;;AACAyE,UAAAA,IAAI,CAAC+qB,WAAD,CAAJ;AACA/qB,UAAAA,IAAI,CAAC+pB,YAAD,CAAJ;AACA/pB,UAAAA,IAAI,CAACgqB,mBAAD,CAAJ;AACAnwC,UAAAA,GAAG;AACHoe,UAAAA,MAAM;AACNuI,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLoJ,UAAAA,QAAQ;AACRlrB,UAAAA,GAAG;AACH0mB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,UAAAA,MAAM,GAvQD,CAwQL;;AACA6a,UAAAA,IAAI,CAAC+qB,WAAD,CAAJ;AACA/qB,UAAAA,IAAI,CAAC+pB,YAAD,CAAJ;AACA/pB,UAAAA,IAAI,CAACgqB,mBAAD,CAAJ;AACAnwC,UAAAA,GAAG;AACHoe,UAAAA,MAAM;AACNuI,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLoJ,UAAAA,QAAQ;AACR6B,UAAAA,QAAQ;AACRrG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,UAAAA,MAAM,GAnRD,CAoRL;;AACA6a,UAAAA,IAAI,CAAC+qB,WAAD,CAAJ;AACA9yB,UAAAA,MAAM;AACN+H,UAAAA,IAAI,CAAC+pB,YAAD,CAAJ;AACA/pB,UAAAA,IAAI,CAACgqB,mBAAD,CAAJ;AACApjB,UAAAA,QAAQ;AACR3O,UAAAA,MAAM;AACNuI,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLoJ,UAAAA,QAAQ;AACRlrB,UAAAA,GAAG;AACH0mB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,UAAAA,MAAM,GAhSD,CAiSL;;AACA6a,UAAAA,IAAI,CAAC+qB,WAAD,CAAJ;AACA9yB,UAAAA,MAAM;AACN+H,UAAAA,IAAI,CAAC+pB,YAAD,CAAJ;AACA/pB,UAAAA,IAAI,CAACgqB,mBAAD,CAAJ;AACApjB,UAAAA,QAAQ;AACR3O,UAAAA,MAAM;AACNuI,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLoJ,UAAAA,QAAQ;AACR6B,UAAAA,QAAQ;AACRrG,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,UAAAA,MAAM;AACN8c,UAAAA,OAAO;AACP;AACD,SA7sBU,CA8sBX;;;AACAjC,QAAAA,IAAI,CAAC6oB,aAAD,CAAJ;AACA9jB,QAAAA,QAAQ;AACRrrB,QAAAA,WAAW;AACXovC,QAAAA,sCAAsC,GAAGvtB,GAAG,EAA5C;AACAyE,QAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAxiB,QAAAA,QAAQ;AACRrrB,QAAAA,WAAW;AACX8tC,QAAAA,iCAAiC,GAAGjsB,GAAG,EAAvC;AACAuuB,QAAAA,qBAAqB,GAAG,KAAxB;AACAI,QAAAA,8BAA8B,GAAG,CAAjC;;AACA,eAAO,CAACJ,qBAAR,EAA+B;AAC7BpD,UAAAA,qBAAqB,GAAG,KAAxB;AACA+D,UAAAA,6BAA6B,GAAG,KAAhC;;AACA,iBAAO,CAAC/D,qBAAR,EAA+B;AAC7B;AACA1mB,YAAAA,IAAI,CAAC0nB,QAAD,CAAJ,CAF6B,CAG7B;;AACA1nB,YAAAA,IAAI,CAAC0nB,QAAD,CAAJ;AACAnnB,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,YAAAA,KAAK,GANwB,CAO7B;;AACA4E,YAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,YAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAhnB,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,YAAAA,KAAK;AACLpE,YAAAA,QAAQ,GAZqB,CAa7B;;AACA1d,YAAAA,GAAG,GAd0B,CAe7B;;AACA2mB,YAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,YAAAA,KAAK;;AACL,gBAAI8uB,6BAAJ,EAAmC;AACjCxyB,cAAAA,MAAM;AACP,aApB4B,CAqB7B;;;AACApe,YAAAA,GAAG,GAtB0B,CAuB7B;;AACA0mB,YAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,YAAAA,MAAM;;AACN,gBAAIniB,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,4BAA4BzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAxC;AACD,aA5B4B,CA6B7B;AACA;AACA;;;AACA7N,YAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,YAAAA,KAAK;AACLoJ,YAAAA,QAAQ;AACR2kB,YAAAA,oBAAoB,GAAGnuB,GAAG,EAA1B;;AACA,gBAAIv4B,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,2BAA2B+a,oBAAoB,CAACrb,QAArB,EAAvC;AACD;;AACD,gBAAIrrC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,WAAWpG,GAAvB;AACD;;AACD,gBAAI2hB,8BAA8B,KAAK,CAAvC,EAA0C;AACxC,kBAAIlnD,KAAJ,EAAW;AACTyrC,gBAAAA,OAAO,CAACE,GAAR,CAAY,8BAAZ;AACD;;AACD3O,cAAAA,IAAI,CAAC0pB,oBAAD,CAAJ;AACD,aALD,MAKO,IAAIQ,8BAA8B,KAAK,CAAvC,EAA0C;AAC/C,kBAAIlnD,KAAJ,EAAW;AACTyrC,gBAAAA,OAAO,CAACE,GAAR,CAAY,qCAAZ;AACD;;AACD3O,cAAAA,IAAI,CAAC0pB,oBAAD,CAAJ;AACAlpB,cAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAjJ,cAAAA,QAAQ;AACRgJ,cAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,cAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,cAAAA,KAAK;AACLqE,cAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAgJ,cAAAA,QAAQ;AACRiJ,cAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAjJ,cAAAA,QAAQ;AACRyI,cAAAA,IAAI,CAAC0pB,oBAAD,CAAJ;AACAnyB,cAAAA,QAAQ;AACR1d,cAAAA,GAAG;AACJ,aAjBM,MAiBA,IAAIqwC,8BAA8B,KAAK,CAAvC,EAA0C;AAC/C,kBAAIlnD,KAAJ,EAAW;AACTyrC,gBAAAA,OAAO,CAACE,GAAR,CAAY,4CAAZ;AACD;;AACD3O,cAAAA,IAAI,CAAC0pB,oBAAD,CAAJ;AACAlpB,cAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAjJ,cAAAA,QAAQ;AACRgJ,cAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,cAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,cAAAA,KAAK;AACLqE,cAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAgJ,cAAAA,QAAQ;AACRiJ,cAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAjJ,cAAAA,QAAQ;AACRyI,cAAAA,IAAI,CAAC0pB,oBAAD,CAAJ;AACAnyB,cAAAA,QAAQ;AACR1d,cAAAA,GAAG;AACJ;;AACDkrB,YAAAA,QAAQ;AACR4iB,YAAAA,GAAG,GAAGpsB,GAAG,EAAT;;AACA,gBAAIv4B,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,OAAOgZ,GAAG,CAACtZ,QAAJ,EAAnB;AACD;;AACD,gBAAIrrC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,UAAUpG,GAAtB;AACD;;AACDvI,YAAAA,IAAI,CAAC2nB,GAAD,CAAJ;AACA5iB,YAAAA,QAAQ;AACRrrB,YAAAA,WAAW;AACXkuC,YAAAA,4BAA4B,GAAGrsB,GAAG,EAAlC;;AACA,gBAAIv4B,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBiZ,4BAA4B,CAACvZ,QAA7B,EAArC;AACD;;AACD,gBAAIte,kBAAkB,CAAC63B,4BAAD,CAAlB,IAAqD,CAAC73B,kBAAkB,CAAC+4B,sCAAD,CAAnB,IAA+D/4B,kBAAkB,CAACy3B,iCAAD,CAA1I,EAAgL;AAC9K,kBAAIxkD,KAAJ,EAAW;AACTyrC,gBAAAA,OAAO,CAACE,GAAR,CAAY,kFAAZ;AACD;;AACD8b,cAAAA,6BAA6B,GAAG,IAAhC;AACD,aALD,MAKO;AACL/D,cAAAA,qBAAqB,GAAG,IAAxB;AACD;;AACD,gBAAI1jD,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,UAAUpG,GAAtB;AACD;AACF,WA/G4B,CAgH7B;;;AACA/H,UAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAR,UAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAlyB,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC2nB,GAAD,CAAJ;AACA3nB,UAAAA,IAAI,CAACunB,QAAD,CAAJ;AACAvnB,UAAAA,IAAI,CAAC2nB,GAAD,CAAJ;AACAxiC,UAAAA,MAAM;AACNtL,UAAAA,GAAG,GAxH0B,CAyH7B;AACA;AACA;;AACAmmB,UAAAA,IAAI,CAAC8mB,KAAD,CAAJ;AACA3hC,UAAAA,MAAM;AACNtL,UAAAA,GAAG;AACH2mB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACL4E,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,UAAAA,MAAM;AACNsf,UAAAA,gBAAgB,GAAG,IAAnB;AACAM,UAAAA,QAAQ;AACR8iB,UAAAA,GAAG,GAAGtsB,GAAG,EAAT;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,OAAOkZ,GAAG,CAACxZ,QAAJ,EAAnB;AACD,WAxI4B,CAyI7B;;;AACArO,UAAAA,IAAI,CAAC6nB,GAAD,CAAJ;AACA9iB,UAAAA,QAAQ;AACRrrB,UAAAA,WAAW;AACXouC,UAAAA,4BAA4B,GAAGvsB,GAAG,EAAlC;;AACA,cAAIv4B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,OAAOmZ,4BAA4B,CAACzZ,QAA7B,EAAnB;AACD;;AACD,cAAIte,kBAAkB,CAAC+3B,4BAAD,CAAtB,EAAsD;AACpD,gBAAI9kD,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,2EAAZ;AACD;;AACDub,YAAAA,8BAA8B;AAC/B,WALD,MAKO;AACLJ,YAAAA,qBAAqB,GAAG,IAAxB;AACD;;AACD,cAAI9mD,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,UAAUpG,GAAtB;AACD;AACF,SAr3BU,CAs3BX;;;AACA,YAAIvlC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,UAAUpG,GAAtB;AACD;;AACDvI,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACApC,QAAAA,MAAM;AACN+H,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAmG,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAhJ,QAAAA,QAAQ;AACRpS,QAAAA,MAAM;AACNqkC,QAAAA,iBAAiB,GAAGjuB,GAAG,EAAvB;AACAgF,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,QAAAA,IAAI,CAAC6nB,GAAD,CAAJ;AACAtnB,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,QAAAA,KAAK;AACLpE,QAAAA,QAAQ;AACRgJ,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,QAAAA,IAAI,CAACypB,GAAD,CAAJ;AACAlyB,QAAAA,QAAQ;AACRqP,QAAAA,QAAQ;AACR2iB,QAAAA,oBAAoB,GAAGhuB,GAAG,EAA1B;AACAyE,QAAAA,IAAI,CAAC2pB,GAAD,CAAJ;AACA3pB,QAAAA,IAAI,CAAC6nB,GAAD,CAAJ;AACA1iC,QAAAA,MAAM;AACNykC,QAAAA,UAAU,GAAGruB,GAAG,EAAhB;;AACA,YAAIv4B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,kDAAkDpG,GAA9D;AACD,SAj5BU,CAk5BX;;;AACAvI,QAAAA,IAAI,CAACwpB,iBAAD,CAAJ,CAn5BW,CAm5Bc;;AACzBxpB,QAAAA,IAAI,CAAC6nB,GAAD,CAAJ;AACAjhB,QAAAA,QAAQ;AACR5G,QAAAA,IAAI,CAACupB,oBAAD,CAAJ;AACAvpB,QAAAA,IAAI,CAAC4pB,UAAD,CAAJ;AACA/vC,QAAAA,GAAG;AACH2mB,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL4E,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,QAAAA,MAAM;AACNtL,QAAAA,GAAG;AACHkrB,QAAAA,QAAQ,GA95BG,CA+5BX;;AACA/E,QAAAA,IAAI,CAACwpB,iBAAD,CAAJ,CAh6BW,CAg6Bc;;AACzBxpB,QAAAA,IAAI,CAAC6nB,GAAD,CAAJ;AACAjhB,QAAAA,QAAQ;AACR5G,QAAAA,IAAI,CAACupB,oBAAD,CAAJ;AACAvpB,QAAAA,IAAI,CAAC4pB,UAAD,CAAJ;AACA/vC,QAAAA,GAAG;AACH2mB,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL4E,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,QAAAA,MAAM;AACNyhB,QAAAA,QAAQ;AACR7B,QAAAA,QAAQ,GA36BG,CA46BX;;AACA/E,QAAAA,IAAI,CAACwpB,iBAAD,CAAJ,CA76BW,CA66Bc;;AACzBxpB,QAAAA,IAAI,CAAC6nB,GAAD,CAAJ;AACAhuC,QAAAA,GAAG;AACHmmB,QAAAA,IAAI,CAACupB,oBAAD,CAAJ;AACAvpB,QAAAA,IAAI,CAAC4pB,UAAD,CAAJ;AACAhjB,QAAAA,QAAQ;AACRpG,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL4E,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,QAAAA,MAAM;AACNtL,QAAAA,GAAG;AACHkrB,QAAAA,QAAQ,GAx7BG,CAy7BX;;AACA/E,QAAAA,IAAI,CAACwpB,iBAAD,CAAJ,CA17BW,CA07Bc;;AACzBxpB,QAAAA,IAAI,CAAC6nB,GAAD,CAAJ;AACAhuC,QAAAA,GAAG;AACHmmB,QAAAA,IAAI,CAACupB,oBAAD,CAAJ;AACAvpB,QAAAA,IAAI,CAAC4pB,UAAD,CAAJ;AACAhjB,QAAAA,QAAQ;AACRpG,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL4E,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACApb,QAAAA,MAAM;AACNyhB,QAAAA,QAAQ;AACR7B,QAAAA,QAAQ;AACR9C,QAAAA,OAAO;AACP;AACD;AACF;;AACDtL,IAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAP;AACA,WAAOrL,OAAO,EAAd;AACD,GAh3CD;;AAk3CAz1B,EAAAA,UAAU,GAAG,sBAAW;AACtBwzB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOukC,MAAM,EAAb;AACD,GAJD;;AAMAA,EAAAA,MAAM,GAAG,kBAAW;AAClBvH,IAAAA,IAAI;AACJkJ,IAAAA,OAAO;AACP,WAAO3J,OAAO,EAAd;AACD,GAJD;;AAMA2J,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIiB,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAAC/L,aAAa,CAAC0K,EAAD,CAAlB,EAAwB;AACtBuG,MAAAA,WAAW,CAAClsB,KAAD,CAAX;AACAyrB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAInE,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAAC+D,KAAL,CAAW3X,EAAE,CAAC2S,CAAd,CAAJ;AACA1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAIlb,SAAS,CAACuI,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACD8F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA+Q,IAAAA,QAAO;;AACP/Q,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA,WAAOgF,YAAY,CAACuN,IAAI,CAAC+D,KAAL,CAAW3X,EAAE,CAAC2S,CAAd,CAAD,CAAnB;AACD,GAvBD,CA9osBU,CAuqsBV;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AACAh1B,EAAAA,SAAS,GAAG,IAAZ;AAEAJ,EAAAA,QAAQ,GAAG,IAAX;AAEAU,EAAAA,QAAQ,GAAG,IAAX;AAEAR,EAAAA,UAAU,GAAG,IAAb;AAEAK,EAAAA,SAAS,GAAG,IAAZ;AAEAE,EAAAA,QAAQ,GAAG,IAAX;AAEAN,EAAAA,MAAM,GAAG,IAAT;AAEAE,EAAAA,MAAM,GAAG,IAAT;AAEAJ,EAAAA,IAAI,GAAG,IAAP;AAEAK,EAAAA,KAAK,GAAG,IAAR;AAEAE,EAAAA,YAAY,GAAG,IAAf;AAEAiwB,EAAAA,KAAK,GAAG,EAAR;AAEA3P,EAAAA,YAAY,GAAG,CAAf;AAEArC,EAAAA,SAAS,GAAG,CAAZ;AAEApH,EAAAA,SAAS,GAAG,CAAZ;AAEA0U,EAAAA,QAAQ,GAAG,CAAX;AAEA4E,EAAAA,SAAS,GAAG,CAAZ;AAEAD,EAAAA,SAAS,GAAG,CAAZ;AAEAxT,EAAAA,eAAe,GAAG,IAAlB;AAEAyS,EAAAA,wBAAwB,GAAG,IAA3B;AAEAD,EAAAA,uBAAuB,GAAG,IAA1B;AAEAvX,EAAAA,wBAAwB,GAAG,IAA3B;AAEAmU,EAAAA,kBAAkB,GAAG,IAArB;AAEAjY,EAAAA,gCAAgC,GAAG,IAAnC;AAEAga,EAAAA,0BAA0B,GAAG,KAA7B;AAEAppB,EAAAA,eAAe,GAAG,IAAlB,CApwsBU,CAswsBV;AAEA;AAEA;;AACAonB,EAAAA,OAAO,GAAG,EAAV;;AAEAjB,EAAAA,IAAI,GAAG,cAASiM,CAAT,EAAY;AACjB,QAAI9rC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBG,CAA/B;AACD,KAHgB,CAIjB;AACA;AACA;AACA;AACA;AACA;;;AACAna,IAAAA,eAAe,GAAG,IAAlB;AACAyS,IAAAA,wBAAwB,GAAG,EAA3B;AACAD,IAAAA,uBAAuB,GAAG,EAA1B;AACAvX,IAAAA,wBAAwB,GAAG,IAA3B;AACAmU,IAAAA,kBAAkB,GAAG,EAArB;AACAjY,IAAAA,gCAAgC,GAAG,CAAC,EAAD,CAAnC;AACApP,IAAAA,eAAe,GAAG,KAAlB;AACAonB,IAAAA,OAAO,GAAGgL,CAAV;AACA5Y,IAAAA,SAAS,GAAG,CAAZ;AACA7M,IAAAA,SAAS;AACTyF,IAAAA,SAAS,GAAG,CAAZ;AACA0U,IAAAA,QAAQ,GAAG,CAAX;AACArW,IAAAA,cAAc;;AACd,QAAI+a,KAAK,KAAK,EAAd,EAAkB;AAChBlI,MAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACAyX,MAAAA,SAAS;AACT,aAAO,CAAP;AACD;;AACDka,IAAAA,SAAS;AACTla,IAAAA,SAAS;;AACT,QAAI,CAAC3M,eAAL,EAAsB;AACpBwqB,MAAAA,sCAAsC,GAAGA,sCAAsC,CAACgI,MAAvC,CAA8C/H,uBAA9C,CAAzC;AACD;;AACD,WAAOiB,SAAS,GAAGtZ,SAAnB;AACD,GAlCD,CA7wsBU,CAizsBV;;;AACAsU,EAAAA,SAAS,GAAG,mBAAS0L,CAAT,EAAY;AACtBhL,IAAAA,OAAO,GAAGgL,CAAV;AACA5Y,IAAAA,SAAS,GAAG,CAAZ;AACA7M,IAAAA,SAAS;AACTyF,IAAAA,SAAS,GAAG,CAAZ;AACA0U,IAAAA,QAAQ,GAAG,CAAX;AACArW,IAAAA,cAAc;;AACd,QAAI+a,KAAK,KAAK,EAAd,EAAkB;AAChBlI,MAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACAyX,MAAAA,SAAS;AACT,aAAO,CAAP;AACD;;AACDka,IAAAA,SAAS;AACTla,IAAAA,SAAS;AACT,WAAO+e,SAAS,GAAGtZ,SAAnB;AACD,GAfD;;AAiBAyU,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAI0nB,wBAAJ,EAA8BC,oBAA9B,EAAoDvd,CAApD,EAAuDwd,6BAAvD,EAAsF/b,EAAtF,EAA0FkC,GAA1F,EAA+FQ,IAA/F,EAAqGzC,EAArG,EAAyG+b,sBAAzG;AACA9nB,IAAAA,aAAa;AACb2nB,IAAAA,wBAAwB,GAAG,KAA3B;;AACA,QAAI/iB,KAAK,KAAKjwB,YAAd,EAA4B;AAC1BgzC,MAAAA,wBAAwB,GAAG,IAA3B;AACD;;AACD,QAAI/iB,KAAK,KAAKjwB,YAAV,IAA0BiwB,KAAK,KAAK,GAAxC,EAA6C;AAC3CkjB,MAAAA,sBAAsB,GAAGz2B,eAAzB;;AACA,UAAI3xB,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAZ;AACD;;AACDjyB,MAAAA,eAAe,GAAG,IAAlB;AACAkT,MAAAA,wBAAwB,GAAG,KAA3B;AACAzC,MAAAA,cAAc;AACdsT,MAAAA,WAAW,CAAC/rB,IAAD,CAAX;AACAoyB,MAAAA,IAAI,GATuC,CAU3C;;AACA,UAAImkB,wBAAJ,EAA8B;AAC5BxqB,QAAAA,WAAW,CAACxsB,KAAD,CAAX;AACD;;AACDqvB,MAAAA,aAAa,GAd8B,CAe3C;AACA;;AACA,UAAI2nB,wBAAJ,EAA8B;AAC5B91B,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACDA,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACAvF,MAAAA,wBAAwB,GAAG,IAA3B;;AACA,UAAIjP,OAAJ,EAAa;AACX;AACA;AACA;AACA;AACAwqC,QAAAA,6BAA6B,GAAG/jB,wBAAwB,CAAC4Q,OAAzB,CAAiCoT,sBAAjC,CAAhC;;AACA,YAAID,6BAA6B,KAAK,CAAC,CAAvC,EAA0C;AACxC/jB,UAAAA,wBAAwB,CAACikB,MAAzB,CAAgCF,6BAAhC,EAA+D,CAA/D;AACAlkB,UAAAA,0BAA0B,CAACjH,IAA3B,CAAgCorB,sBAAhC;AACD,SATU,CAWX;;;AACA,YAAIpoD,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,cAAcyc,sBAAd,GAAuC,eAAnD;;AACA,eAAKhc,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAGlK,wBAAwB,CAACpS,MAA5C,EAAoDoa,EAAE,GAAGkC,GAAzD,EAA8DlC,EAAE,EAAhE,EAAoE;AAClEzB,YAAAA,CAAC,GAAGvG,wBAAwB,CAACgI,EAAD,CAA5B;AACAX,YAAAA,OAAO,CAACE,GAAR,CAAY,OAAOhB,CAAnB;AACD;AACF,SAlBU,CAmBX;AACA;AAEA;;;AACA,YAAI3G,mBAAmB,CAACokB,sBAAD,CAAnB,IAA+C,IAAnD,EAAyD;AACvDpkB,UAAAA,mBAAmB,CAACokB,sBAAD,CAAnB,GAA8C,EAA9C;AACD;;AACDF,QAAAA,oBAAoB,GAAGlkB,mBAAmB,CAACokB,sBAAD,CAA1C,CA1BW,CA2BnB;AACA;;AACQ,aAAK/b,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAG1K,wBAAwB,CAACpS,MAA7C,EAAqDqa,EAAE,GAAGyC,IAA1D,EAAgEzC,EAAE,EAAlE,EAAsE;AACpE1B,UAAAA,CAAC,GAAGvG,wBAAwB,CAACiI,EAAD,CAA5B;;AACA,cAAI6b,oBAAoB,CAAClT,OAArB,CAA6BrK,CAA7B,MAAoC,CAAC,CAAzC,EAA4C;AAC1Cud,YAAAA,oBAAoB,CAAClrB,IAArB,CAA0B2N,CAA1B;AACD;AACF;;AACD,eAAOvG,wBAAwB,GAAG,EAAlC;AACD;AACF;AACF,GAnED;;AAqEA9D,EAAAA,aAAa,GAAG,yBAAW;AACzBP,IAAAA,eAAe;;AACf,YAAQmF,KAAR;AACE,WAAKxwB,IAAL;AACE+oB,QAAAA,WAAW,CAACzpB,MAAD,CAAX;AACA8vB,QAAAA,IAAI;AACJ3Z,QAAAA,cAAc;AACd4V,QAAAA,eAAe;AACf,eAAO5N,IAAI,CAAC,CAAD,CAAX;;AACF,WAAKpd,KAAL;AACE0oB,QAAAA,WAAW,CAAC5uB,GAAD,CAAX;AACAi1B,QAAAA,IAAI;AACJrG,QAAAA,WAAW,CAACzpB,MAAD,CAAX;AACA8vB,QAAAA,IAAI;AACJ3Z,QAAAA,cAAc;AACd4V,QAAAA,eAAe;AACf5N,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACA,eAAOA,IAAI,CAAC,CAAD,CAAX;;AACF,WAAKrd,MAAL;AACE2oB,QAAAA,WAAW,CAACtpB,MAAD,CAAX;AACA2vB,QAAAA,IAAI;AACJ3Z,QAAAA,cAAc;AACd4V,QAAAA,eAAe;AACf,eAAO5N,IAAI,CAAC,CAAD,CAAX;;AACF,WAAKvd,MAAL;AACE6oB,QAAAA,WAAW,CAACxpB,MAAD,CAAX;AACA6vB,QAAAA,IAAI;AACJ3Z,QAAAA,cAAc;AACd4V,QAAAA,eAAe;AACf,eAAO5N,IAAI,CAAC,CAAD,CAAX;;AACF,WAAK,GAAL;AACEsL,QAAAA,WAAW,CAACrpB,MAAD,CAAX;AACA0vB,QAAAA,IAAI;AACJ3Z,QAAAA,cAAc;AACd4V,QAAAA,eAAe;AACf,eAAO5N,IAAI,CAAC,CAAD,CAAX;;AACF,WAAK,GAAL;AACEsL,QAAAA,WAAW,CAACvpB,MAAD,CAAX;AACA4vB,QAAAA,IAAI;AACJ3Z,QAAAA,cAAc;AACd4V,QAAAA,eAAe;AACf,eAAO5N,IAAI,CAAC,CAAD,CAAX;AAvCJ;AAyCD,GA3CD;;AA6CA4N,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIqK,CAAJ;AACAA,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,YAAQL,KAAR;AACE,WAAK,GAAL;AACE/a,QAAAA,cAAc;AACd0W,QAAAA,SAAS;AACT;;AACF,WAAK,GAAL;AACE1W,QAAAA,cAAc;AACd0W,QAAAA,SAAS;AACT5L,QAAAA,MAAM;AACN;;AACF;AACE4L,QAAAA,SAAS;AAXb;;AAaA,WAAOtL,YAAY,KAAK,CAAjB,KAAuB2P,KAAK,KAAK,GAAV,IAAiBA,KAAK,KAAK,GAAlD,CAAP,EAA+D;AAC7D,UAAIA,KAAK,KAAK,GAAd,EAAmB;AACjB/a,QAAAA,cAAc;AACd0W,QAAAA,SAAS;AACV,OAHD,MAGO;AACL1W,QAAAA,cAAc;AACd0W,QAAAA,SAAS;AACT5L,QAAAA,MAAM;AACP;AACF;;AACD,QAAIsQ,GAAG,GAAG6E,CAAN,GAAU,CAAd,EAAiB;AACfjY,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACA3M,MAAAA,WAAW,CAACrgC,GAAD,CAAX;AACA0mC,MAAAA,IAAI;AACJ,aAAOllB,IAAI,EAAX;AACD;AACF,GAhCD;;AAkCAuO,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAI,CAAC,OAAO+X,KAAK,CAACojB,UAAb,KAA4B,UAA5B,GAAyCpjB,KAAK,CAACojB,UAAN,CAAiB,CAAjB,CAAzC,GAA+D,KAAK,CAArE,MAA4EzlC,eAAhF,EAAiG;AAC/F,aAAO,CAAP;AACD;;AACD,YAAQqiB,KAAR;AACE,WAAK,GAAL;AACA,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACA,WAAK/vB,QAAL;AACA,WAAKR,UAAL;AACA,WAAKE,SAAL;AACA,WAAKJ,QAAL;AACA,WAAKS,QAAL;AACE,YAAIqgB,YAAJ,EAAkB;AAAE;AAClBiL,UAAAA,QAAQ,GAAG4E,SAAX,CADgB,CACM;;AACtB,iBAAO,CAAP;AACD,SAHD,MAGO;AACL,iBAAO,CAAP;AACD;;AAfL;;AAiBA,WAAO,CAAP;AACD,GAtBD;;AAwBAnD,EAAAA,sBAAsB,GAAG,gCAASsD,GAAT,EAAc6E,CAAd,EAAiB;AACxC,QAAI7E,GAAG,GAAG6E,CAAN,IAAWzZ,UAAU,CAACuS,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAArB,IAAyCjgB,MAAM,CAAC4d,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,EAAiB,CAAjB,CAAnD,EAAwE;AACtE,aAAOhN,GAAG,EAAV;AACD;AACF,GAJD,CA/+sBU,CAq/sBV;;;AACA7D,EAAAA,8BAA8B,GAAG,wCAAS6Q,GAAT,EAAc6E,CAAd,EAAiB;AAChD,QAAI7E,GAAG,GAAG6E,CAAC,GAAG,CAAV,IAAe5d,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAA5B,IAAgD/Y,aAAa,CAAC0W,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAjE,EAAmF;AACjF,aAAOhR,QAAQ,EAAf;AACD;AACF,GAJD;;AAMAsM,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIuJ,CAAJ;AACAA,IAAAA,CAAC,GAAG7E,GAAJ;AACAvF,IAAAA,WAAW;;AACX,QAAIjI,0BAAJ,EAAgC;AAC9BkK,MAAAA,sBAAsB,CAACsD,GAAD,EAAM6E,CAAN,CAAtB;AACD;;AACD,WAAOjd,SAAS,EAAhB,EAAoB;AAClB,UAAI+X,KAAK,KAAK,GAAd,EAAmB;AACjB/a,QAAAA,cAAc;AACd6V,QAAAA,WAAW;AACZ,OAHD,MAGO,IAAIkF,KAAK,KAAK,GAAd,EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACAjD,QAAAA,sBAAsB,CAACsD,GAAD,EAAM6E,CAAN,CAAtB;AACAjgB,QAAAA,cAAc;AACd6V,QAAAA,WAAW;AACX5T,QAAAA,OAAO;AACR,OAXM,MAWA,IAAI,CAAC,OAAO8Y,KAAK,CAACojB,UAAb,KAA4B,UAA5B,GAAyCpjB,KAAK,CAACojB,UAAN,CAAiB,CAAjB,CAAzC,GAA+D,KAAK,CAArE,MAA4EzlC,eAAhF,EAAiG;AACtGsH,QAAAA,cAAc;AACdsT,QAAAA,WAAW,CAACnxB,KAAD,CAAX;AACAw3B,QAAAA,IAAI;AACJ9D,QAAAA,WAAW;AACX7N,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,OANM,MAMA;AACL6N,QAAAA,WAAW;AACZ;;AACD,UAAIjI,0BAAJ,EAAgC;AAC9BrD,QAAAA,8BAA8B,CAAC6Q,GAAD,EAAM6E,CAAN,CAA9B;AACAnI,QAAAA,sBAAsB,CAACsD,GAAD,EAAM6E,CAAN,CAAtB;AACD;AACF;;AACD,QAAIA,CAAC,KAAK7E,GAAV,EAAe;AACb,aAAOhI,YAAY,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO,IAAIgI,GAAG,GAAG6E,CAAN,GAAU,CAAd,EAAiB;AACtBjY,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACA3M,MAAAA,WAAW,CAAChvB,QAAD,CAAX;AACAq1B,MAAAA,IAAI;AACJ,aAAOllB,IAAI,EAAX;AACD;AACF,GA5CD;;AA8CAyhB,EAAAA,UAAU,GAAG,sBAAW;AACtB,QAAI6E,KAAK,KAAK,GAAd,EAAmB;AACjB/a,MAAAA,cAAc;AACdsT,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACA8zB,MAAAA,IAAI;AACJ9D,MAAAA,WAAW;AACX,aAAO7N,IAAI,CAAC,CAAD,CAAX;AACD;AACF,GARD;;AAUAgO,EAAAA,UAAU,GAAG,oBAASiK,CAAT,EAAY;AACvB;AACAjgB,IAAAA,cAAc;AACdsT,IAAAA,WAAW,CAACpxB,KAAD,CAAX;AACAy3B,IAAAA,IAAI;AACJ/D,IAAAA,eAAe;;AACf,WAAOmF,KAAK,KAAK,GAAjB,EAAsB;AACpB/a,MAAAA,cAAc;AACd4V,MAAAA,eAAe;AAChB;;AACD,QAAImF,KAAK,KAAK,GAAd,EAAmB;AACjBpF,MAAAA,UAAU,CAAC,YAAD,CAAV;AACD;;AACD3V,IAAAA,cAAc;AACd,WAAOgI,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAX;AACD,GAfD;;AAiBApK,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIuoB,mBAAJ,EAAyBne,CAAzB;AACAA,IAAAA,CAAC,GAAG7E,GAAJ,CAFuB,CAGvB;;AACAgjB,IAAAA,mBAAmB,GAAG,KAAtB;;AACA,QAAIrjB,KAAK,KAAK,GAAd,EAAmB;AACjBxE,MAAAA,YAAY;AACb,KAFD,MAEO,IAAIwE,KAAK,KAAK/vB,QAAd,EAAwB;AAC7BwrB,MAAAA,WAAW;AACZ,KAFM,MAEA,IAAIuE,KAAK,KAAKvwB,UAAd,EAA0B;AAC/BsrB,MAAAA,qCAAqC;AACtC,KAFM,MAEA,IAAIiF,KAAK,KAAK,GAAd,EAAmB;AACxB;AACA;AACAtE,MAAAA,WAAW;AACZ,KAJM,MAIA,IAAIsE,KAAK,KAAKrwB,SAAd,EAAyB;AAC9B0zC,MAAAA,mBAAmB,GAAG,IAAtB;AACAjuC,MAAAA,mBAAmB,CAAC6qB,SAAD,CAAnB;AACAhb,MAAAA,cAAc;AACf,KAJM,MAIA,IAAI+a,KAAK,KAAKzwB,QAAd,EAAwB;AAC7B8zC,MAAAA,mBAAmB,GAAG,IAAtB;AACAluC,MAAAA,iBAAiB,CAAC8qB,SAAD,CAAjB;AACAhb,MAAAA,cAAc;AACf,KAJM,MAIA,IAAI+a,KAAK,KAAKhwB,QAAd,EAAwB;AAC7BurB,MAAAA,WAAW;AACZ,KAFM,MAEA;AACLX,MAAAA,UAAU,CAAC,cAAD,CAAV;AACD,KA3BsB,CA4BvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAOoF,KAAK,KAAK,GAAV,IAAiBA,KAAK,KAAK,GAAV,IAAiB3P,YAAY,KAAK,CAAlC,IAAuC,CAACgzB,mBAAhE,EAAqF;AACnF,UAAIrjB,KAAK,KAAK,GAAd,EAAmB;AACjB/E,QAAAA,UAAU,CAACiK,CAAD,CAAV;AACD,OAFD,MAEO,IAAIlF,KAAK,KAAK,GAAd,EAAmB;AACxB;AACAhF,QAAAA,wCAAwC;AACzC;AACF;;AACD,WAAOgF,KAAK,KAAK,GAAjB,EAAsB;AACpB/a,MAAAA,cAAc;AACdsT,MAAAA,WAAW,CAAClyB,SAAD,CAAX;AACAu4B,MAAAA,IAAI;AACJ3R,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACD,WAAO,CAAC,OAAO+S,KAAK,CAACojB,UAAb,KAA4B,UAA5B,GAAyCpjB,KAAK,CAACojB,UAAN,CAAiB,CAAjB,CAAzC,GAA+D,KAAK,CAArE,MAA4E5iB,iBAAnF,EAAsG;AACpGvb,MAAAA,cAAc;AACdsT,MAAAA,WAAW,CAACjpB,SAAD,CAAX;AACAsvB,MAAAA,IAAI;AACJ3R,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACD,WAAOkO,UAAU,EAAjB;AACD,GA3DD;;AA6DAtpB,EAAAA,0BAA0B,GAAG,oCAASyxC,SAAT,EAAoB;AAC/C,QAAI7d,CAAJ,EAAOyB,EAAP,EAAWqc,SAAX,EAAsBnc,IAAtB;;AACA,QAAIvT,uDAAuD,CAACic,OAAxD,CAAgEwT,SAAhE,MAA+E,CAAC,CAAhF,IAAqFpkB,wBAAwB,CAAC4Q,OAAzB,CAAiCwT,SAAjC,MAAgD,CAAC,CAAtI,IAA2IpkB,wBAAwB,CAAC4Q,OAAzB,CAAiC,MAAMwT,SAAvC,MAAsD,CAAC,CAAlM,IAAuM,CAAC1lB,0BAA5M,EAAwO;AACtO,UAAI9iC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwB6c,SAAxB,GAAoC,gDAAhD;AACD;;AACDC,MAAAA,SAAS,GAAG,EAAZ;;AACA,WAAK9d,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGxjB,gCAAgC,CAACkJ,MAAzD,EAAkE,KAAKsa,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA/F,EAAsG3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA/H,EAAmI;AACjI,YAAItjB,gCAAgC,CAAC6hB,CAAD,CAAhC,KAAwC,EAA5C,EAAgD;AAC9C8d,UAAAA,SAAS,IAAI3/B,gCAAgC,CAAC6hB,CAAD,CAAhC,GAAsC,GAAtC,GAA4CA,CAA5C,GAAgD,GAA7D;AACD;AACF;;AACD6d,MAAAA,SAAS,GAAGC,SAAS,GAAGD,SAAxB;AACA,aAAOpkB,wBAAwB,CAACpH,IAAzB,CAA8BwrB,SAA9B,CAAP;AACD;AACF,GAfD;;AAiBA1xC,EAAAA,yBAAyB,GAAG,mCAAS0xC,SAAT,EAAoB;AAC9C,QAAI7d,CAAJ,EAAOyB,EAAP,EAAWqc,SAAX,EAAsBnc,IAAtB;;AACA,QAAIvT,uDAAuD,CAACic,OAAxD,CAAgEwT,SAAhE,MAA+E,CAAC,CAAhF,IAAqFrkB,uBAAuB,CAAC6Q,OAAxB,CAAgCwT,SAAhC,MAA+C,CAAC,CAArI,IAA0IrkB,uBAAuB,CAAC6Q,OAAxB,CAAgC,MAAMwT,SAAtC,MAAqD,CAAC,CAAhM,IAAqM,CAAC1lB,0BAA1M,EAAsO;AACpO,UAAI9iC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwB6c,SAAxB,GAAoC,+CAAhD;AACD;;AACDC,MAAAA,SAAS,GAAG,EAAZ;;AACA,WAAK9d,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGxjB,gCAAgC,CAACkJ,MAAzD,EAAkE,KAAKsa,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA/F,EAAsG3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA/H,EAAmI;AACjI,YAAItjB,gCAAgC,CAAC6hB,CAAD,CAAhC,KAAwC,EAA5C,EAAgD;AAC9C8d,UAAAA,SAAS,IAAI3/B,gCAAgC,CAAC6hB,CAAD,CAAhC,GAAsC,GAAtC,GAA4CA,CAA5C,GAAgD,GAA7D;AACD;AACF;;AACD6d,MAAAA,SAAS,GAAGC,SAAS,GAAGD,SAAxB;AACA,aAAOrkB,uBAAuB,CAACnH,IAAxB,CAA6BwrB,SAA7B,CAAP;AACD;AACF,GAfD;;AAiBA7nB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIuE,KAAK,KAAK/vB,QAAd,EAAwB;AACtB2qB,MAAAA,UAAU,CAAC,iBAAD,CAAV;AACD;;AACD,QAAI5M,SAAS,IAAIiS,SAAS,CAACnT,MAAV,KAAqB,CAAtC,EAAyC;AACvC,cAAQmT,SAAS,CAAC,CAAD,CAAjB;AACE,aAAK,GAAL;AACEnI,UAAAA,IAAI,CAAC+G,MAAM,CAAC51B,KAAD,CAAP,CAAJ;AACA;;AACF,aAAK,GAAL;AACE6uB,UAAAA,IAAI,CAAC+G,MAAM,CAAC31B,KAAD,CAAP,CAAJ;AACA;;AACF,aAAK,GAAL;AACE4uB,UAAAA,IAAI,CAAC+G,MAAM,CAAC11B,KAAD,CAAP,CAAJ;AACA;;AACF;AACE2uB,UAAAA,IAAI,CAACsJ,UAAU,CAACnB,SAAD,CAAX,CAAJ;AAXJ;AAaD,KAdD,MAcO;AACLnI,MAAAA,IAAI,CAACsJ,UAAU,CAACnB,SAAD,CAAX,CAAJ;AACD,KApBsB,CAqBvB;;;AACA,QAAIpE,kBAAkB,CAAC/O,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,UAAIhyB,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,4CAA4CxG,SAAxD;AACD;;AACDxT,MAAAA,eAAe,GAAGwT,SAAlB;;AACA,UAAIvY,wBAAJ,EAA8B;AAC5B9V,QAAAA,yBAAyB,CAACquB,SAAD,CAAzB;AACD;AACF,KARD,MAQO;AACL,UAAInlC,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,yCAAyCxG,SAArD;AACD;;AACD,UAAIvY,wBAAJ,EAA8B;AAC5B7V,QAAAA,0BAA0B,CAAC,MAAMouB,SAAP,CAA1B;AACD;AACF;;AACD,QAAInlC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mBAAmBxG,SAAnB,GAA+B,uBAA/B,GAAyDvY,wBAArE;AACD;;AACD,QAAI,CAACA,wBAAL,EAA+B;AAC7B7V,MAAAA,0BAA0B,CAACouB,SAAD,CAA1B;AACD;;AACD,WAAOhb,cAAc,EAArB;AACD,GA7CD;;AA+CAsW,EAAAA,WAAW,GAAG,uBAAW;AACvBzD,IAAAA,IAAI,CAAC1H,UAAU,CAAC6P,SAAD,CAAX,CAAJ;AACA,WAAOhb,cAAc,EAArB;AACD,GAHD;;AAKA8V,EAAAA,qCAAqC,GAAG,iDAAW;AACjD,QAAIyoB,YAAJ,EAAkB/d,CAAlB,EAAqByB,EAArB,EAAyB9B,CAAzB,EAA4BW,CAA5B,EAA+BqB,IAA/B;;AACA,QAAItsC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,gDAAZ;AACD;;AACDrB,IAAAA,CAAC,GAAG,CAAJ,CALiD,CAK1C;;AACPW,IAAAA,CAAC,GAAG,IAAI71B,CAAJ,EAAJ;AACA61B,IAAAA,CAAC,GAAG3E,UAAU,CAACnB,SAAD,CAAd;AACAnI,IAAAA,IAAI,CAACiO,CAAD,CAAJ;AACAyd,IAAAA,YAAY,GAAGvjB,SAAf;;AACA,QAAIujB,YAAY,KAAK,OAAjB,IAA4BA,YAAY,KAAK,QAA7C,IAAyDA,YAAY,KAAK,KAA1E,IAAmFA,YAAY,KAAK,SAApG,IAAiHA,YAAY,KAAK,KAAtI,EAA6I;AAC3I5/B,MAAAA,gCAAgC,CAACkU,IAAjC,CAAsCmI,SAAtC;AACD;;AACDxT,IAAAA,eAAe,GAAGwT,SAAlB;;AACA,QAAI,CAACvY,wBAAL,EAA+B;AAC7B7V,MAAAA,0BAA0B,CAACouB,SAAD,CAA1B;AACD;;AACDhb,IAAAA,cAAc,GAjBmC,CAiB/B;;AAClBA,IAAAA,cAAc,GAlBmC,CAkB/B;;AAClB4W,IAAAA,kBAAkB,CAAC/D,IAAnB,CAAwB,IAAxB;;AACA,QAAIkI,KAAK,KAAK,GAAd,EAAmB;AACjB3E,MAAAA,SAAS;AACT+J,MAAAA,CAAC;;AACD,aAAOpF,KAAK,KAAK,GAAjB,EAAsB;AACpB/a,QAAAA,cAAc,GADM,CAEpB;;AACA,YAAImgB,CAAC,KAAK,CAAN,IAAWxhB,gCAAgC,CAACA,gCAAgC,CAACkJ,MAAjC,GAA0C,CAA3C,CAAhC,CAA8EgjB,OAA9E,CAAsF,OAAtF,MAAmG,CAAC,CAAnH,EAAsH;AACpH5Q,UAAAA,wBAAwB,GAAGA,wBAAwB,CAACvc,MAAzB,CAAgC,UAASmjB,CAAT,EAAY;AACrE,mBAAO,CAAE,IAAI2d,MAAJ,CAAW,YAAY7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAAtD,IAA2D,GAA3D,GAAiEmT,SAA5E,CAAD,CAAyFyjB,IAAzF,CAA8F5d,CAA9F,CAAR;AACD,WAF0B,CAA3B;AAGAlI,UAAAA,0BAA0B,GAAG,IAA7B;AACD,SARmB,CASpB;;;AACA,YAAIwH,CAAC,KAAK,CAAN,IAAWxhB,gCAAgC,CAACA,gCAAgC,CAACkJ,MAAjC,GAA0C,CAA3C,CAAhC,CAA8EgjB,OAA9E,CAAsF,KAAtF,MAAiG,CAAC,CAAjH,EAAoH;AAClH5Q,UAAAA,wBAAwB,GAAGA,wBAAwB,CAACvc,MAAzB,CAAgC,UAASmjB,CAAT,EAAY;AACrE,mBAAO,CAAE,IAAI2d,MAAJ,CAAW,UAAU7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAApD,IAAyD,GAAzD,GAA+DmT,SAA1E,CAAD,CAAuFyjB,IAAvF,CAA4F5d,CAA5F,CAAR;AACD,WAF0B,CAA3B;AAGAlI,UAAAA,0BAA0B,GAAG,IAA7B;AACD,SAfmB,CAgBpB;;;AACA,YAAIwH,CAAC,KAAK,CAAN,IAAWxhB,gCAAgC,CAACA,gCAAgC,CAACkJ,MAAjC,GAA0C,CAA3C,CAAhC,CAA8EgjB,OAA9E,CAAsF,SAAtF,MAAqG,CAAC,CAArH,EAAwH;AACtH5Q,UAAAA,wBAAwB,GAAGA,wBAAwB,CAACvc,MAAzB,CAAgC,UAASmjB,CAAT,EAAY;AACrE,mBAAO,CAAE,IAAI2d,MAAJ,CAAW,cAAc7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAAxD,IAA6D,GAA7D,GAAmEmT,SAA9E,CAAD,CAA2FyjB,IAA3F,CAAgG5d,CAAhG,CAAR;AACD,WAF0B,CAA3B;AAGAlI,UAAAA,0BAA0B,GAAG,IAA7B;AACD,SAtBmB,CAuBpB;;;AACA,YAAIwH,CAAC,KAAK,CAAN,IAAWxhB,gCAAgC,CAACA,gCAAgC,CAACkJ,MAAjC,GAA0C,CAA3C,CAAhC,CAA8EgjB,OAA9E,CAAsF,KAAtF,MAAiG,CAAC,CAAjH,EAAoH;AAClH5Q,UAAAA,wBAAwB,GAAGA,wBAAwB,CAACvc,MAAzB,CAAgC,UAASmjB,CAAT,EAAY;AACrE,mBAAO,CAAE,IAAI2d,MAAJ,CAAW,UAAU7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAApD,IAAyD,GAAzD,GAA+DmT,SAA1E,CAAD,CAAuFyjB,IAAvF,CAA4F5d,CAA5F,CAAR;AACD,WAF0B,CAA3B;AAGAlI,UAAAA,0BAA0B,GAAG,IAA7B;AACD,SA7BmB,CA8BpB;;;AACA,YAAIha,gCAAgC,CAACA,gCAAgC,CAACkJ,MAAjC,GAA0C,CAA3C,CAAhC,CAA8EgjB,OAA9E,CAAsF,QAAtF,MAAoG,CAAC,CAArG,KAA2G1K,CAAC,KAAK,CAAN,IAAYA,CAAC,GAAG,CAAJ,IAAU,CAACA,CAAC,GAAG,CAAL,IAAU,CAAV,KAAgB,CAAjJ,CAAJ,EAA2J;AACzJlG,UAAAA,wBAAwB,GAAGA,wBAAwB,CAACvc,MAAzB,CAAgC,UAASmjB,CAAT,EAAY;AACrE,mBAAO,CAAE,IAAI2d,MAAJ,CAAW,aAAa7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAAvD,IAA4D,GAA5D,GAAkEmT,SAA7E,CAAD,CAA0FyjB,IAA1F,CAA+F5d,CAA/F,CAAR;AACD,WAF0B,CAA3B;AAGAlI,UAAAA,0BAA0B,GAAG,IAA7B;AACD;;AACDvC,QAAAA,SAAS;AACTuC,QAAAA,0BAA0B,GAAG,KAA7B;AACAwH,QAAAA,CAAC;AACF,OA3CgB,CA4CjB;AACA;;;AACA,UAAIA,CAAC,KAAK,CAAN,IAAWxhB,gCAAgC,CAACA,gCAAgC,CAACkJ,MAAjC,GAA0C,CAA3C,CAAhC,CAA8EgjB,OAA9E,CAAsF,OAAtF,MAAmG,CAAC,CAAnH,EAAsH;AACpH5Q,QAAAA,wBAAwB,GAAGA,wBAAwB,CAACvc,MAAzB,CAAgC,UAASmjB,CAAT,EAAY;AACrE,iBAAO,CAAE,IAAI2d,MAAJ,CAAW,YAAY7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAAtD,IAA2D,GAA3D,GAAiE,GAA5E,CAAD,CAAmF42B,IAAnF,CAAwF5d,CAAxF,CAAR;AACD,SAF0B,CAA3B;AAGD;AACF;;AACDjK,IAAAA,kBAAkB,CAACxI,GAAnB;;AACA,SAAKoS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGlI,wBAAwB,CAACpS,MAAjD,EAA0D,KAAKsa,IAAL,GAAYF,EAAE,IAAIE,IAAlB,GAAyBF,EAAE,IAAIE,IAAzF,EAAgG3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzH,EAA6H;AAC3H,UAAIhI,wBAAwB,CAACuG,CAAD,CAAxB,IAA+B,IAAnC,EAAyC;AACvC,YAAI+d,YAAY,KAAK,OAArB,EAA8B;AAC5BtkB,UAAAA,wBAAwB,CAACuG,CAAD,CAAxB,GAA8BvG,wBAAwB,CAACuG,CAAD,CAAxB,CAA4BmU,OAA5B,CAAoC,IAAI6J,MAAJ,CAAW,YAAY7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAAtD,IAA2D,GAAtE,CAApC,EAAgH,EAAhH,CAA9B;AACD;;AACD,YAAI02B,YAAY,KAAK,QAArB,EAA+B;AAC7BtkB,UAAAA,wBAAwB,CAACuG,CAAD,CAAxB,GAA8BvG,wBAAwB,CAACuG,CAAD,CAAxB,CAA4BmU,OAA5B,CAAoC,IAAI6J,MAAJ,CAAW,aAAa7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAAvD,IAA4D,GAAvE,CAApC,EAAiH,EAAjH,CAA9B;AACD;;AACD,YAAI02B,YAAY,KAAK,KAArB,EAA4B;AAC1BtkB,UAAAA,wBAAwB,CAACuG,CAAD,CAAxB,GAA8BvG,wBAAwB,CAACuG,CAAD,CAAxB,CAA4BmU,OAA5B,CAAoC,IAAI6J,MAAJ,CAAW,UAAU7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAApD,IAAyD,GAApE,CAApC,EAA8G,EAA9G,CAA9B;AACD;;AACD,YAAI02B,YAAY,KAAK,SAArB,EAAgC;AAC9BtkB,UAAAA,wBAAwB,CAACuG,CAAD,CAAxB,GAA8BvG,wBAAwB,CAACuG,CAAD,CAAxB,CAA4BmU,OAA5B,CAAoC,IAAI6J,MAAJ,CAAW,cAAc7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAAxD,IAA6D,GAAxE,CAApC,EAAkH,EAAlH,CAA9B;AACD;;AACD,YAAI02B,YAAY,KAAK,KAArB,EAA4B;AAC1BtkB,UAAAA,wBAAwB,CAACuG,CAAD,CAAxB,GAA8BvG,wBAAwB,CAACuG,CAAD,CAAxB,CAA4BmU,OAA5B,CAAoC,IAAI6J,MAAJ,CAAW,UAAU7/B,gCAAgC,CAACkJ,MAAjC,GAA0C,CAApD,IAAyD,GAApE,CAApC,EAA8G,EAA9G,CAA9B;AACD;AACF;AACF;;AACD,QAAIkT,KAAK,KAAK,GAAd,EAAmB;AACjBpF,MAAAA,UAAU,CAAC,YAAD,CAAV;AACD;;AACD3V,IAAAA,cAAc;AACdgI,IAAAA,IAAI,CAACmY,CAAD,CAAJ;;AACA,QAAIoe,YAAY,KAAK,OAAjB,IAA4BA,YAAY,KAAK,QAA7C,IAAyDA,YAAY,KAAK,KAA1E,IAAmFA,YAAY,KAAK,SAApG,IAAiHA,YAAY,KAAK,KAAtI,EAA6I;AAC3I5/B,MAAAA,gCAAgC,CAACyP,GAAjC;AACD;;AACD,QAAImwB,YAAY,KAAK3kB,MAAM,CAACn0B,OAAD,CAAN,CAAgB+5B,SAArC,EAAgD;AAC9C1R,MAAAA,mBAAmB,GAAG,IAAtB;AACD;;AACD,QAAIj4B,KAAJ,EAAW;AACT,aAAOyrC,OAAO,CAACE,GAAR,CAAY,8CAAZ,CAAP;AACD;AACF,GA1GD;;AA4GAzL,EAAAA,wCAAwC,GAAG,oDAAW;AACpD,QAAIoK,CAAJ;;AACA,QAAItqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mDAAZ;AACD,KAJmD,CAKpD;AACA;AACA;AACA;;;AACAlO,IAAAA,WAAW,CAACp7B,IAAD,CAAX;AACAyhC,IAAAA,IAAI;AACJ3R,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACAmY,IAAAA,CAAC,GAAG,CAAJ,CAZoD,CAY7C;;AACPngB,IAAAA,cAAc,GAbsC,CAalC;;AAClB4W,IAAAA,kBAAkB,CAAC/D,IAAnB,CAAwB,IAAxB;;AACA,QAAIkI,KAAK,KAAK,GAAd,EAAmB;AACjB3E,MAAAA,SAAS;AACT+J,MAAAA,CAAC;;AACD,aAAOpF,KAAK,KAAK,GAAjB,EAAsB;AACpB/a,QAAAA,cAAc;AACdoW,QAAAA,SAAS;AACT+J,QAAAA,CAAC;AACF;AACF;;AACDvJ,IAAAA,kBAAkB,CAACxI,GAAnB;;AACA,QAAI2M,KAAK,KAAK,GAAd,EAAmB;AACjBpF,MAAAA,UAAU,CAAC,YAAD,CAAV;AACD;;AACD3V,IAAAA,cAAc;AACdgI,IAAAA,IAAI,CAACmY,CAAD,CAAJ;;AACA,QAAItqC,KAAJ,EAAW;AACT,aAAOyrC,OAAO,CAACE,GAAR,CAAY,sDAAsDzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAvE,CAAP;AACD;AACF,GAjCD,CAp0tBU,CAu2tBV;;;AACA7E,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAI4J,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIpF,KAAK,KAAK,GAAd,EAAmB;AACjBpF,MAAAA,UAAU,CAAC,YAAD,CAAV;AACD;;AACD3V,IAAAA,cAAc;AACdoW,IAAAA,SAAS;;AACT,QAAI2E,KAAK,KAAK,GAAd,EAAmB;AACjBpF,MAAAA,UAAU,CAAC,YAAD,CAAV;AACD;;AACD,WAAO3V,cAAc,EAArB;AACD,GAZD;;AAcAyW,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAI0J,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIpF,KAAK,KAAK,GAAd,EAAmB;AACjBpF,MAAAA,UAAU,CAAC,YAAD,CAAV;AACD;;AACD3V,IAAAA,cAAc,GANS,CAOvB;;AACAoW,IAAAA,SAAS;AACT+J,IAAAA,CAAC,GAAG,CAAJ;;AACA,WAAOpF,KAAK,KAAK,GAAjB,EAAsB;AACpB/a,MAAAA,cAAc;AACdoW,MAAAA,SAAS;AACT+J,MAAAA,CAAC;AACF,KAdsB,CAevB;;;AACA3vB,IAAAA,YAAY,CAAC2vB,CAAD,CAAZ;;AACA,QAAIpF,KAAK,KAAK,GAAd,EAAmB;AACjBpF,MAAAA,UAAU,CAAC,YAAD,CAAV;AACD;;AACD,WAAO3V,cAAc,EAArB;AACD,GArBD;;AAuBA2V,EAAAA,UAAU,GAAG,oBAAS+oB,MAAT,EAAiB;AAC5BpjC,IAAAA,YAAY,GAAG,EAAf,CAD4B,CAE5B;;AACA,WAAOqG,SAAS,KAAK0U,QAArB,EAA+B;AAC7B,UAAI,CAACM,OAAO,CAAChV,SAAD,CAAP,KAAuB,IAAvB,IAA+BgV,OAAO,CAAChV,SAAD,CAAP,KAAuB,IAAvD,KAAgEA,SAAS,GAAG,CAAZ,KAAkB0U,QAAtF,EAAgG;AAC9F;AACD;;AACD/a,MAAAA,YAAY,IAAIqb,OAAO,CAAChV,SAAS,EAAV,CAAvB;AACD;;AACDrG,IAAAA,YAAY,IAAI,KAAhB;;AACA,WAAOqb,OAAO,CAAChV,SAAD,CAAP,IAAuBgV,OAAO,CAAChV,SAAD,CAAP,KAAuB,IAAvB,IAA+BgV,OAAO,CAAChV,SAAD,CAAP,KAAuB,IAApF,EAA2F;AACzFrG,MAAAA,YAAY,IAAIqb,OAAO,CAAChV,SAAS,EAAV,CAAvB;AACD;;AACDrG,IAAAA,YAAY,IAAI,IAAhB;AACA,WAAO8d,IAAI,CAACslB,MAAD,CAAX;AACD,GAfD,CA74tBU,CA85tBV;AAEA;AAEA;AACA;AAEA;;;AACAluC,EAAAA,YAAY,GAAG,sBAAS2vB,CAAT,EAAY;AACzB,QAAIK,CAAJ,EAAOyB,EAAP,EAAWE,IAAX,CADyB,CAEzB;;AACA3B,IAAAA,CAAC,GAAG,CAAJ;AACAjL,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAG7f,YAAY,CAACgzB,CAAD,CAAjB;AACAnT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACA/S,IAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,SAAKK,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FjV,MAAAA,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzH,KAAK,CAACqC,GAAG,GAAG+E,CAAN,GAAUK,CAAX,CAAzB;AACD;;AACD/tB,IAAAA,uBAAuB,CAACua,EAAD,CAAvB;AACAxD,IAAAA,OAAO,CAAC4R,GAAG,GAAG+E,CAAP,CAAP;AACAtN,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAfD;;AAiBA9U,EAAAA,cAAc,GAAG,0BAAW;AAC1BoL,IAAAA,YAAY,GAAG,CAAf;;AACA,WAAO,CAAP,EAAU;AACRjL,MAAAA,SAAS;;AACT,UAAI4a,KAAK,KAAKlwB,SAAd,EAAyB;AACvB;AACD;;AACDugB,MAAAA,YAAY,GAAG,CAAf;AACD;;AACD,QAAIv1B,KAAJ,EAAW;AACT,aAAOyrC,OAAO,CAACE,GAAR,CAAY,2BAA2BzG,KAAvC,CAAP;AACD;AACF,GAZD,CAv7tBU,CAq8tBV;AACA;;;AACA5a,EAAAA,SAAS,GAAG,qBAAW;AACrB;AACA,WAAOsG,OAAO,CAACkQ,OAAO,CAACN,QAAD,CAAR,CAAd,EAAmC;AACjC,UAAIM,OAAO,CAACN,QAAD,CAAP,KAAsB,IAAtB,IAA8BM,OAAO,CAACN,QAAD,CAAP,KAAsB,IAAxD,EAA8D;AAC5D0E,QAAAA,KAAK,GAAGlwB,SAAR;AACAwrB,QAAAA,QAAQ;AACR;AACD;;AACDA,MAAAA,QAAQ;AACT;;AACD4E,IAAAA,SAAS,GAAG5E,QAAZ,CAVqB,CAWrB;;AACA,QAAIA,QAAQ,KAAKM,OAAO,CAAC9O,MAAzB,EAAiC;AAC/BkT,MAAAA,KAAK,GAAG,EAAR;AACA;AACD,KAfoB,CAgBrB;;;AACA,QAAInX,OAAO,CAAC+S,OAAO,CAACN,QAAD,CAAR,CAAP,IAA8BM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAxD,EAA6D;AAC3D,aAAOzS,OAAO,CAAC+S,OAAO,CAACN,QAAD,CAAR,CAAd,EAAmC;AACjCA,QAAAA,QAAQ;AACT;;AACD,UAAIM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAA1B,EAA+B;AAC7BA,QAAAA,QAAQ;;AACR,eAAOzS,OAAO,CAAC+S,OAAO,CAACN,QAAD,CAAR,CAAd,EAAmC;AACjCA,UAAAA,QAAQ;AACT;;AACD,YAAIM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,KAA8BM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAA1B,IAAiCM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAA3D,IAAkEzS,OAAO,CAAC+S,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAR,CAAvG,CAAJ,EAAqI;AACnIA,UAAAA,QAAQ,IAAI,CAAZ;;AACA,iBAAOzS,OAAO,CAAC+S,OAAO,CAACN,QAAD,CAAR,CAAd,EAAmC;AACjCA,YAAAA,QAAQ;AACT;AACF;;AACD0E,QAAAA,KAAK,GAAGzwB,QAAR;AACD,OAZD,MAYO;AACLywB,QAAAA,KAAK,GAAGrwB,SAAR;AACD;;AACDsxB,MAAAA,gBAAgB,CAACf,SAAD,EAAY5E,QAAZ,CAAhB;AACA;AACD,KAtCoB,CAuCrB;;;AACA,QAAI/S,OAAO,CAACqT,OAAO,CAACN,QAAD,CAAR,CAAX,EAAgC;AAC9B,aAAOhT,mBAAmB,CAACsT,OAAO,CAACN,QAAD,CAAR,CAA1B,EAA+C;AAC7CA,QAAAA,QAAQ;AACT;;AACD,UAAIM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAA1B,EAA+B;AAC7B0E,QAAAA,KAAK,GAAGvwB,UAAR;AACD,OAFD,MAEO;AACLuwB,QAAAA,KAAK,GAAG/vB,QAAR;AACD;;AACDgxB,MAAAA,gBAAgB,CAACf,SAAD,EAAY5E,QAAZ,CAAhB;AACA;AACD,KAnDoB,CAoDrB;;;AACA,QAAIM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAA1B,EAA+B;AAC7BA,MAAAA,QAAQ;;AACR,aAAOM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAA7B,EAAkC;AAChC;AACA,YAAIA,QAAQ,KAAKM,OAAO,CAAC9O,MAAR,GAAiB,CAAlC,EAAqC;AACnCwO,UAAAA,QAAQ;AACRV,UAAAA,UAAU,CAAC,gBAAD,CAAV;AACAU,UAAAA,QAAQ;AACT;;AACDA,QAAAA,QAAQ;AACT;;AACDA,MAAAA,QAAQ;AACR0E,MAAAA,KAAK,GAAGhwB,QAAR;AACAixB,MAAAA,gBAAgB,CAACf,SAAS,GAAG,CAAb,EAAgB5E,QAAQ,GAAG,CAA3B,CAAhB;AACA;AACD,KApEoB,CAqErB;;;AACA,QAAIM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,IAA6BM,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,IAA6BM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAAxF,EAA6F;AAC3F,aAAOM,OAAO,CAACN,QAAD,CAAP,IAAqBM,OAAO,CAACN,QAAD,CAAP,KAAsB,IAA3C,IAAmDM,OAAO,CAACN,QAAD,CAAP,KAAsB,IAAhF,EAAsF;AACpFA,QAAAA,QAAQ;AACT;;AACD,UAAIM,OAAO,CAACN,QAAD,CAAX,EAAuB;AACrBA,QAAAA,QAAQ;AACT;;AACD0E,MAAAA,KAAK,GAAGlwB,SAAR;AACA;AACD,KA/EoB,CAgFrB;;;AACA,QAAI8rB,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,IAA6BM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAA3D,EAAgE;AAC9DA,MAAAA,QAAQ,IAAI,CAAZ;AACA0E,MAAAA,KAAK,GAAGjwB,YAAR;AACA;AACD,KArFoB,CAsFrB;;;AACA,QAAI6rB,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,IAA6BM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAA3D,EAAgE;AAC9DA,MAAAA,QAAQ,IAAI,CAAZ;AACA0E,MAAAA,KAAK,GAAGxwB,IAAR;AACA;AACD,KA3FoB,CA4FrB;AACA;AACA;AACA;AACA;;;AACA,QAAIosB,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,IAA6BM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAA3D,EAAgE;AAC9DA,MAAAA,QAAQ,IAAI,CAAZ;AACA0E,MAAAA,KAAK,GAAGnwB,KAAR;AACA;AACD;;AACD,QAAI+rB,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,IAA6BM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAA3D,EAAgE;AAC9DA,MAAAA,QAAQ,IAAI,CAAZ;AACA0E,MAAAA,KAAK,GAAGpwB,MAAR;AACA;AACD;;AACD,QAAIgsB,OAAO,CAACN,QAAD,CAAP,KAAsB,GAAtB,IAA6BM,OAAO,CAACN,QAAQ,GAAG,CAAZ,CAAP,KAA0B,GAA3D,EAAgE;AAC9DA,MAAAA,QAAQ,IAAI,CAAZ;AACA0E,MAAAA,KAAK,GAAGtwB,MAAR;AACA;AACD,KA/GoB,CAgHrB;;;AACA,WAAOswB,KAAK,GAAGpE,OAAO,CAACN,QAAQ,EAAT,CAAtB;AACD,GAlHD,CAv8tBU,CA2juBV;;;AACA2F,EAAAA,gBAAgB,GAAG,0BAASoD,CAAT,EAAYC,CAAZ,EAAe;AAChC,WAAOrE,SAAS,GAAGrE,OAAO,CAAC4T,SAAR,CAAkBnL,CAAlB,EAAqBC,CAArB,CAAnB;AACD,GAFD;;AAIAtsC,EAAAA,CAAC,CAAC2iC,IAAF,GAASA,IAAT,CAhkuBU,CAkkuBV;AAEA;AAEA;AAEA;;AACAn2B,EAAAA,QAAQ,GAAG,oBAAW;AACpBszB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO6+B,GAAG,EAAV;AACD,GAJD;;AAMAA,EAAAA,GAAG,GAAG,eAAW;AACf7B,IAAAA,IAAI;AACJmJ,IAAAA,KAAK;AACL,WAAO5J,OAAO,EAAd;AACD,GAJD,CA/kuBU,CAqluBV;;;AACA4J,EAAAA,KAAK,GAAG,iBAAW;AACjB3R,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIvK,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB,UAAIA,EAAE,CAAC2S,CAAH,GAAO,CAAX,EAAc;AACZtM,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,OAHD,MAGO;AACL,YAAIrG,EAAE,CAAC2S,CAAH,KAAS,CAAb,EAAgB;AACdtM,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,SAHD,MAGO;AACLA,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA;AACD;AACF;AACF;;AACD,QAAI5M,UAAU,CAACuG,EAAD,CAAd,EAAoB;AAClB,UAAI1oB,KAAK,CAAC+kB,IAAI,CAAC2D,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASrS,EAAE,CAACwS,CAAH,CAAKF,CAAd,CAAL,CAAL,KAAgC,CAAC,CAArC,EAAwC;AACtCjM,QAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA;AACD,OAHD,MAGO;AACL,YAAI7uB,KAAK,CAAC6kB,IAAI,CAAC2D,EAAE,CAACwS,CAAH,CAAKH,CAAN,EAASrS,EAAE,CAACwS,CAAH,CAAKF,CAAd,CAAL,CAAT,EAAiC;AAC/BjM,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,SAHD,MAGO;AACLA,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD;AACF;AACF;;AACD,QAAI5P,eAAe,CAACuJ,EAAD,CAAnB,EAAyB;AACvBqG,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAvgB,MAAAA,OAAM;;AACNgiB,MAAAA,KAAK;AACLqE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA3C,MAAAA,QAAQ;AACR;AACD;;AACD,QAAIhF,cAAc,CAAC2H,EAAD,CAAlB,EAAwB;AACtBuG,MAAAA,WAAW,CAAC9rB,GAAD,CAAX;AACAqrB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN9C,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACAoL,MAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAhJ,MAAAA,QAAQ;AACR;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIkJ,IAAAA,WAAW,CAAC9rB,GAAD,CAAX;AACAqrB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GA3DD,CAtluBU,CAmpuBV;;;AACAxoB,EAAAA,UAAU,GAAG,sBAAW;AACtBqzB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO8+B,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjB,QAAImU,EAAJ,EAAQC,EAAR,EAAYjL,CAAZ,EAAeyB,EAAf,EAAmBC,EAAnB,EAAuBnC,IAAvB,EAA6BoC,IAA7B,EAAmCC,IAAnC,EAAyCJ,CAAzC;AACAxB,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,IAAI,GAAG,CAAP;AACAiC,IAAAA,CAAC,GAAG,CAAJ;AACAwJ,IAAAA,EAAE,GAAG,EAAL;AACAC,IAAAA,EAAE,GAAG,EAAL;;AACA,SAAKjL,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAG1+B,MAAxB,EAAiC,KAAK0+B,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA9D,EAAqE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA9F,EAAkG;AAChGuJ,MAAAA,EAAE,CAAChL,CAAD,CAAF,GAAQ,CAAR;AACAiL,MAAAA,EAAE,CAACjL,CAAD,CAAF,GAAQ,CAAR;AACD,KAVgB,CAWjB;;;AACAjL,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAACrH,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AACjB,UAAI,CAACnK,kBAAkB,CAACmK,EAAD,CAAvB,EAA6B;AAC3BqM,QAAAA,IAAI,CAAC,qDAAD,CAAJ;AACD;;AACDvG,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACDiL,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;AACA/S,IAAAA,EAAE,GAAG7f,YAAY,CAAC4yB,IAAD,CAAjB;AACA/S,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACA/S,IAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBE,IAAnB;;AACA,SAAKS,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrC,IAAxB,EAA+B,KAAKqC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9F9O,MAAAA,YAAY,CAACrG,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAD,CAAZ;AACAxT,MAAAA,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACDyE,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAhCD;AAkCA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUE;;;AACAp1B,EAAAA,WAAW,GAAG,uBAAW;AACvBmzB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOk/B,MAAM,EAAb;AACD,GAJD,CAxtuBU,CA8tuBV;;;AACAA,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIwI,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA1K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3BgtC,MAAAA,CAAC,GAAG7E,GAAJ;AACArO,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOA,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAApB,EAA2B;AACzBouB,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA2K,QAAAA,WAAW;AACX3K,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACDlgB,MAAAA,OAAO,CAACuuB,GAAG,GAAG6E,CAAP,CAAP;AACD,KATD,MASO;AACLpN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA2K,MAAAA,WAAW;AACZ;;AACD,WAAO5C,OAAO,EAAd;AACD,GAnBD,CA/tuBU,CAovuBV;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE4C,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIiL,SAAJ,EAAe1C,CAAf;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA1K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAJuB,CAKvB;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACt1B,QAAD,CAAtB,EAAkC;AAChCuuB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD,KAVsB,CAWvB;;;AACAmL,IAAAA,CAAC,GAAG7E,GAAJ;AACArO,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOA,EAAE,KAAK6M,MAAM,CAACn1B,GAAD,CAApB,EAA2B;AACzBouB,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD,KAjBsB,CAkBvB;;;AACA,WAAO4R,QAAQ,CAACsB,CAAD,CAAf,EAAoB;AAClB0C,MAAAA,SAAS,GAAG,CAAZ;AACD;;AACDrY,IAAAA,qBAAqB,CAAC8Q,GAAG,GAAG6E,CAAP,CAArB;AACA,WAAOnL,OAAO,EAAd;AACD,GAxBD,CAtxuBU,CAgzuBV;;;AACA6J,EAAAA,QAAQ,GAAG,kBAASsB,CAAT,EAAY;AACrB,QAAIO,CAAJ,EAAOC,CAAP,EAAUwB,EAAV,EAAcC,EAAd,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,IAApC;AACA9B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKD,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAGlC,CAAhB,EAAmBmC,IAAI,GAAGhH,GAA/B,EAAqC+G,IAAI,IAAIC,IAAR,GAAeH,EAAE,GAAGG,IAApB,GAA2BH,EAAE,GAAGG,IAArE,EAA4E5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEH,EAAjB,GAAsB,EAAEA,EAAxG,EAA4G;AAC1GlV,MAAAA,EAAE,GAAGgM,KAAK,CAACyH,CAAD,CAAV;;AACA,WAAKC,CAAC,GAAGyB,EAAE,GAAGG,IAAI,GAAGpC,CAAhB,EAAmBqC,IAAI,GAAGlH,GAA/B,EAAqCiH,IAAI,IAAIC,IAAR,GAAeJ,EAAE,GAAGI,IAApB,GAA2BJ,EAAE,GAAGI,IAArE,EAA4E7B,CAAC,GAAG4B,IAAI,IAAIC,IAAR,GAAe,EAAEJ,EAAjB,GAAsB,EAAEA,EAAxG,EAA4G;AAC1G,YAAI1B,CAAC,KAAKC,CAAV,EAAa;AACX;AACD;;AACDzT,QAAAA,EAAE,GAAG+L,KAAK,CAAC0H,CAAD,CAAV,CAJ0G,CAK1G;;AACA,YAAIlvB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACx4B,SAAD,CAAlB,IAAiCmQ,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/zB,KAAD,CAAnD,IAA8Dgf,UAAU,CAACzT,KAAK,CAAC4b,EAAD,CAAN,CAAxE,IAAuF9R,KAAK,CAAC7J,IAAI,CAAC0b,EAAD,CAAL,EAAW1b,IAAI,CAAC2b,EAAD,CAAf,CAAhG,EAAsH;AACpH6F,UAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,UAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAkN,UAAAA,QAAQ;AACRnc,UAAAA,SAAS;AACTyb,UAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACA2K,UAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWlU,GAAX;AACA,iBAAO,CAAP;AACD,SAdyG,CAe1G;;;AACA,YAAIhb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6Bgf,UAAU,CAACzT,KAAK,CAAC4b,EAAD,CAAN,CAAvC,IAAsDtc,KAAK,CAACsc,EAAD,CAAL,KAAc4M,MAAM,CAACx4B,SAAD,CAA1E,IAAyF8Z,KAAK,CAAC6R,EAAD,EAAKlc,MAAM,CAACmc,EAAD,CAAX,CAAlG,EAAoH;AAClH6F,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,UAAAA,GAAG;AACH4Q,UAAAA,SAAS;AACT+W,UAAAA,WAAW;AACX0E,UAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACA2K,UAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWlU,GAAX;AACA,iBAAO,CAAP;AACD,SAzByG,CA0B1G;;;AACA,YAAIhb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAACx4B,SAAD,CAAtB,EAAmC;AACjCyxB,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,UAAAA,IAAI,CAACxhB,IAAI,CAAC2b,EAAD,CAAL,CAAJ;AACAyM,UAAAA,QAAQ;AACRxM,UAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,cAAIzI,SAAS,CAACsH,EAAD,CAAb,EAAmB;AACjB4F,YAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAzP,YAAAA,SAAS;AACTyb,YAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACA2K,YAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWlU,GAAX;AACA,mBAAO,CAAP;AACD;AACF,SAvCyG,CAwC1G;;;AACA,YAAIhb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC/zB,KAAD,CAAlB,IAA6Bgf,UAAU,CAACzT,KAAK,CAAC2b,EAAD,CAAN,CAAvC,IAAsDxb,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/zB,KAAD,CAAxE,IAAmFgf,UAAU,CAACzT,KAAK,CAAC4b,EAAD,CAAN,CAA7F,IAA4Gtc,KAAK,CAACsc,EAAD,CAAL,KAAc4M,MAAM,CAACx4B,SAAD,CAApI,EAAiJ;AAC/IyxB,UAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,UAAAA,IAAI,CAACxhB,IAAI,CAACA,IAAI,CAAC2b,EAAD,CAAL,CAAL,CAAJ;AACAyM,UAAAA,QAAQ;AACRxM,UAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,cAAIzI,SAAS,CAACsH,EAAD,CAAb,EAAmB;AACjB4F,YAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAzP,YAAAA,SAAS;AACT+W,YAAAA,WAAW;AACX0E,YAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACA2K,YAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWlU,GAAX;AACA,mBAAO,CAAP;AACD;AACF,SAtDyG,CAuD1G;AAEA;;;AACA,YAAIhb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACx4B,SAAD,CAAlB,IAAiCmQ,GAAG,CAACyb,EAAD,CAAH,KAAY4M,MAAM,CAAC/zB,KAAD,CAAnD,IAA8Dgf,UAAU,CAACzT,KAAK,CAAC4b,EAAD,CAAN,CAAxE,IAAuFtc,KAAK,CAACsc,EAAD,CAAL,KAAc4M,MAAM,CAACx4B,SAAD,CAA/G,EAA4H;AAC1HyxB,UAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA8F,UAAAA,IAAI,CAACxhB,IAAI,CAACA,IAAI,CAAC2b,EAAD,CAAL,CAAL,CAAJ;AACAyM,UAAAA,QAAQ;AACRxM,UAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,cAAIzI,SAAS,CAACsH,EAAD,CAAb,EAAmB;AACjB8L,YAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWnvB,IAAI,CAAC0b,EAAD,CAAf;AACAgM,YAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWlU,GAAX;AACA,mBAAO,CAAP;AACD;;AACD,cAAI1H,UAAU,CAACoI,EAAD,CAAd,EAAoB;AAClB4F,YAAAA,IAAI,CAACxhB,IAAI,CAACA,IAAI,CAAC2b,EAAD,CAAL,CAAL,CAAJ;AACAqH,YAAAA,WAAW;AACX0E,YAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACA2K,YAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWlU,GAAX;AACA,mBAAO,CAAP;AACD;;AACD,cAAIpR,MAAM,CAAC8R,EAAD,EAAK,CAAL,CAAV,EAAmB;AACjB8L,YAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWnvB,IAAI,CAAC0b,EAAD,CAAf;AACA8F,YAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,YAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,YAAAA,GAAG;AACHqsB,YAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWrS,GAAG,EAAd;AACA,mBAAO,CAAP;AACD;;AACD,cAAIjT,MAAM,CAAC8R,EAAD,EAAK,CAAC,CAAN,CAAV,EAAoB;AAClB4F,YAAAA,IAAI,CAACxhB,IAAI,CAACA,IAAI,CAAC2b,EAAD,CAAL,CAAL,CAAJ;AACAqH,YAAAA,WAAW;AACX0E,YAAAA,KAAK,CAACyH,CAAD,CAAL,GAAWpS,GAAG,EAAd;AACAyE,YAAAA,IAAI,CAACxhB,IAAI,CAACA,IAAI,CAAC2b,EAAD,CAAL,CAAL,CAAJ;AACAoG,YAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACA1mB,YAAAA,GAAG;AACH2nB,YAAAA,WAAW;AACX0E,YAAAA,KAAK,CAAC0H,CAAD,CAAL,GAAWrS,GAAG,EAAd;AACA,mBAAO,CAAP;AACD;AACF;AACF;AACF;;AACD,WAAO,CAAP;AACD,GAxGD;;AA0GA73B,EAAAA,cAAc,GAAG,KAAjB;;AAEAoJ,EAAAA,aAAa,GAAG,yBAAW;AACzBkzB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAuI,IAAAA,6BAA6B;AAC7B/8B,IAAAA,IAAI;AACJ,WAAOq/B,QAAQ,EAAf;AACD,GALD;;AAOAtC,EAAAA,6BAA6B,GAAG,yCAAW;AACzC,QAAIqpB,2CAAJ,EAAiDC,8BAAjD,EAAiFC,kBAAjF,EAAqG5c,EAArG,EAAyGkC,GAAzG,EAA8GQ,IAA9G,EAAoHzC,EAApH,EAAwH4c,yBAAxH,EAAmJC,iBAAnJ,EAAsKC,OAAtK,CADyC,CAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAI/iB,6BAA6B,CAACpU,MAA9B,KAAyC,CAAzC,IAA8C,CAACjmB,KAAI,CAACyP,IAAI,CAAC0b,EAAD,CAAL,EAAW6M,MAAM,CAACx3B,QAAD,CAAjB,CAAvD,EAAqF;AACnF28C,MAAAA,iBAAiB,GAAG7iC,SAApB;AACAA,MAAAA,SAAS,GAAG,KAAZ;;AACA,UAAI3lB,cAAJ,EAAoB;AAClB+qC,QAAAA,OAAO,CAACE,GAAR,CAAY,2CAA2CzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAvD;AACD;;AACD3oC,MAAAA,IAAI;;AACJ,UAAIhC,cAAJ,EAAoB;AAClB+qC,QAAAA,OAAO,CAACE,GAAR,CAAY,4DAA4DzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAxE;AACD;;AACDhlB,MAAAA,SAAS,GAAG6iC,iBAAZ;AACAhyB,MAAAA,EAAE,GAAGgM,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAV;;AACA,UAAI7kC,cAAJ,EAAoB;AAClB+qC,QAAAA,OAAO,CAACE,GAAR,CAAY,0BAAZ;AACD;;AACD,WAAKS,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAGlI,6BAA6B,CAACpU,MAAjD,EAAyDoa,EAAE,GAAGkC,GAA9D,EAAmElC,EAAE,EAArE,EAAyE;AACvE4c,QAAAA,kBAAkB,GAAG5iB,6BAA6B,CAACgG,EAAD,CAAlD;;AACA,YAAI1rC,cAAJ,EAAoB;AAClB+qC,UAAAA,OAAO,CAACE,GAAR,CAAY,QAAQqd,kBAApB;AACD;AACF;;AACDF,MAAAA,2CAA2C,GAAG,IAA9C;AACAG,MAAAA,yBAAyB,GAAG,CAA5B;;AACA,aAAOH,2CAA2C,IAAIG,yBAAyB,GAAGn7C,yCAAlF,EAA6H;AAC3Hg7C,QAAAA,2CAA2C,GAAG,KAA9C;AACAG,QAAAA,yBAAyB;;AACzB,aAAK5c,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAG1I,6BAA6B,CAACpU,MAAlD,EAA0Dqa,EAAE,GAAGyC,IAA/D,EAAqEzC,EAAE,EAAvE,EAA2E;AACzE2c,UAAAA,kBAAkB,GAAG5iB,6BAA6B,CAACiG,EAAD,CAAlD;AACA8c,UAAAA,OAAO,GAAG,IAAV;AACAJ,UAAAA,8BAA8B,GAAG,CAAjC;;AACA,iBAAOI,OAAO,IAAIJ,8BAA8B,GAAGh7C,2CAAnD,EAAgG;AAC9Fg7C,YAAAA,8BAA8B;;AAC9B,gBAAIroD,cAAJ,EAAoB;AAClB+qC,cAAAA,OAAO,CAACE,GAAR,CAAY,qBAAqBpG,GAArB,GAA2B,qBAA3B,GAAmDyjB,kBAAnD,GAAwE,OAAxE,GAAkF9xB,EAA9F;AACD;;AACDuG,YAAAA,WAAW,CAAC7uB,GAAD,CAAX;AACAu6C,YAAAA,OAAO,GAAG3jB,UAAS,CAACwjB,kBAAD,EAAqB,IAArB,CAAnB;;AACA,gBAAIG,OAAJ,EAAa;AACXL,cAAAA,2CAA2C,GAAG,IAA9C;AACD;;AACD5xB,YAAAA,EAAE,GAAGgM,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAV;;AACA,gBAAI7kC,cAAJ,EAAoB;AAClB+qC,cAAAA,OAAO,CAACE,GAAR,CAAY,yCAAyCzU,EAArD;AACD;AACF;;AACD,cAAI6xB,8BAA8B,KAAKh7C,2CAAvC,EAAoF;AAClFw1B,YAAAA,IAAI,CAAC,iEAAiEylB,kBAAlE,CAAJ;AACD;AACF;AACF;;AACD,UAAIC,yBAAyB,KAAKn7C,yCAAlC,EAA6E;AAC3Ey1B,QAAAA,IAAI,CAAC,2DAAD,CAAJ;AACD;;AACD,UAAI7iC,cAAJ,EAAoB;AAClB+qC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAa5hB,WAAW,CAACga,MAAM,CAAC11B,KAAD,CAAP,CAApC;AACD;;AACD,UAAI3N,cAAJ,EAAoB;AAClB+qC,QAAAA,OAAO,CAACE,GAAR,CAAY,aAAa5hB,WAAW,CAACga,MAAM,CAAC51B,KAAD,CAAP,CAApC;AACD;;AACD,UAAIzN,cAAJ,EAAoB;AAClB,eAAO+qC,OAAO,CAACE,GAAR,CAAY,aAAa5hB,WAAW,CAACga,MAAM,CAAC31B,KAAD,CAAP,CAApC,CAAP;AACD;AACF;AACF,GAzED,CAp6uBU,CA++uBV;;;AACA4zB,EAAAA,yBAAyB,GAAG,qCAAW;AACrCtC,IAAAA,IAAI;AACJD,IAAAA,6BAA6B;AAC7B9hB,IAAAA,OAAO,GAAG,IAAV,CAHqC,CAIrC;AACA;AACA;AACA;AACA;;AACAukB,IAAAA,aAAa;AACbvkB,IAAAA,OAAO,GAAG,KAAV;AACA,WAAOshB,OAAO,EAAd;AACD,GAZD;;AAcA8C,EAAAA,QAAQ,GAAG,oBAAW;AACpBrC,IAAAA,IAAI;AACJwC,IAAAA,aAAa;AACb,WAAOjD,OAAO,EAAd;AACD,GAJD;;AAMAiD,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIknB,IAAJ,EAAUhJ,KAAV;AACAlpB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAFyB,CAGzB;AACA;AACA;AACA;AACA;;AACA,QAAI5a,OAAO,IAAIjC,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACj4B,QAAD,CAAjC,EAA6C;AAC3Cs0C,MAAAA,KAAK,GAAG5kC,IAAI,CAAC0b,EAAD,CAAZ;AACA8F,MAAAA,IAAI,CAACojB,KAAD,CAAJ,CAF2C,CAG3C;AACA;;AACAiJ,MAAAA,IAAI;AACJtnB,MAAAA,QAAQ;AACR3K,MAAAA,EAAE,GAAGmB,GAAG,EAAR,CAP2C,CAQ3C;;AACA6wB,MAAAA,IAAI,GAAG7tC,KAAK,CAAC2b,EAAD,CAAZ;AACAuG,MAAAA,WAAW,CAAC3xB,QAAD,CAAX;AACAkxB,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAACosB,IAAD,CAAJ;AACAj3B,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA+E,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACD,QAAIrH,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChBsL,MAAAA,eAAe;AACf;AACD;;AACD,QAAIz2B,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAACx4B,SAAD,CAAX,CAAR,EAAiC;AAC/ByxB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA0K,MAAAA,MAAM;AACNzK,MAAAA,EAAE,GAAGoB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAmH,MAAAA,WAAW;AACXuD,MAAAA,MAAM;AACNxK,MAAAA,EAAE,GAAGmB,GAAG,EAAR;;AACA,UAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC+X,EAAD,CAArB,EAA2B;AACzBF,QAAAA,EAAE,GAAGC,EAAL;AACD,OAFD,MAEO;AACLD,QAAAA,EAAE,GAAGE,EAAL;AACD;AACF;;AACDzQ,IAAAA,GAAG;;AACH,QAAIjmB,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,UAAUzU,EAAE,CAACmU,QAAH,EAAtB;AACD;;AACD3kB,IAAAA,EAAE;;AACF,QAAIhmB,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,SAASzU,EAAE,CAACmU,QAAH,EAArB;AACD;;AACDzkB,IAAAA,EAAE;;AACF,QAAIlmB,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,SAASzU,EAAE,CAACmU,QAAH,EAArB;AACD;;AACDxkB,IAAAA,EAAE;;AACF,QAAInmB,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,SAASzU,EAAE,CAACmU,QAAH,EAArB;AACD;;AACDvkB,IAAAA,EAAE;;AACF,QAAIpmB,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,SAASzU,EAAE,CAACmU,QAAH,EAArB;AACD;;AACDtkB,IAAAA,EAAE;;AACF,QAAIrmB,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,SAASzU,EAAE,CAACmU,QAAH,EAArB;AACD;;AACDrkB,IAAAA,EAAE;;AACF,QAAItmB,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,SAASzU,EAAE,CAACmU,QAAH,EAArB;AACD;;AACDhJ,IAAAA,kBAAkB;;AAClB,QAAI1f,2BAAJ,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAIwf,wBAAwB,EAA5B,EAAgC;AAC9B,YAAIzhC,cAAJ,EAAoB;AAClB+qC,UAAAA,OAAO,CAACE,GAAR,CAAY,iCAAiCzU,EAAE,CAACmU,QAAH,EAA7C;AACD;;AACDrO,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA6K,QAAAA,QAAQ;AACR;AACD;AACF;;AACDQ,IAAAA,oBAAoB;AACpBD,IAAAA,6BAA6B;AAC7B,WAAOtF,IAAI,CAAC9F,EAAD,CAAX;AACD,GA1FD;;AA4FAsL,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAImI,CAAJ,EAAOyB,EAAP,EAAWC,EAAX,EAAeC,IAAf,EAAqBC,IAArB;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAxT,IAAAA,EAAE,GAAG7f,YAAY,CAAC4f,EAAE,CAACyN,MAAH,CAAUwF,KAAX,CAAjB;AACAhT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiBhT,EAAE,CAACyN,MAAH,CAAUuF,IAA3B;;AACA,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpV,EAAE,CAACyN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxGjV,MAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACD,SAAKA,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGrP,MAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACA5I,MAAAA,QAAQ;AACR5K,MAAAA,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACD3b,IAAAA,uBAAuB,CAACua,EAAD,CAAvB;;AACA,QAAIpK,kBAAkB,CAACoK,EAAD,CAAtB,EAA4B;AAC1BA,MAAAA,EAAE,GAAG8R,IAAL,CAD0B,CACf;AACZ;;AACD,WAAOjM,IAAI,CAAC7F,EAAD,CAAX;AACD,GAlBD,CAhmvBU,CAonvBV;;;AACAzQ,EAAAA,EAAE,GAAG,cAAW;AACd,QAAIhL,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B;AACD;;AACD4/B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAmH,IAAAA,WAAW;AACXlH,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzB,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GAVD,CArnvBU,CAiovBV;;;AACAvQ,EAAAA,EAAE,GAAG,cAAW;AACd,QAAIlL,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B;AACD;;AACD4/B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAn3B,IAAAA,QAAQ;AACRo3B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIlZ,MAAK,CAAC8X,EAAD,CAAL,IAAa9X,MAAK,CAAC6X,EAAD,CAAtB,EAA4B;AAC1B,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GAVD,CAlovBU,CA8ovBV;;;AACAtQ,EAAAA,EAAE,GAAG,cAAW;AACdmW,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAmH,IAAAA,WAAW;AACXpJ,IAAAA,MAAM;AACNoJ,IAAAA,WAAW;AACXpJ,IAAAA,MAAM;AACNoJ,IAAAA,WAAW;AACXlH,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzB,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GAXD;;AAaAxQ,EAAAA,GAAG,GAAG,eAAW;AACf,QAAI4iB,CAAJ,EAAOC,CAAP,EAAU8f,KAAV,EAAiBC,IAAjB,EAAuBL,iBAAvB;AACAI,IAAAA,KAAK,GAAG5tC,GAAG,CAACwb,EAAD,CAAX;AACAqyB,IAAAA,IAAI,GAAGntC,GAAG,CAAC8a,EAAD,CAAV;;AACA,QAAIoyB,KAAK,KAAKvlB,MAAM,CAACt1B,QAAD,CAAhB,IAA8BigB,YAAY,CAACwI,EAAD,CAA9C,EAAoD;AAClD;AACA,UAAKxb,GAAG,CAACA,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAH,KAAsB6M,MAAM,CAACvvB,SAAD,CAA7B,IAA8CkH,GAAG,CAACA,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAH,KAA2B6M,MAAM,CAACvvB,SAAD,CAAnF,EAAiG;AAC/F,YAAI9T,cAAJ,EAAoB;AAClB+qC,UAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkCzU,EAA9C;AACD;;AACDqS,QAAAA,CAAC,GAAG/tB,IAAI,CAACE,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAR;AACAsS,QAAAA,CAAC,GAAGhuB,IAAI,CAACE,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAR;;AACA,YAAIoyB,KAAK,KAAKvlB,MAAM,CAACt1B,QAAD,CAApB,EAAgC;AAC9BuuB,UAAAA,IAAI,CAACuM,CAAD,CAAJ;AACAvM,UAAAA,IAAI,CAACwM,CAAD,CAAJ;AACAjV,UAAAA,QAAQ;AACT,SAJD,MAIO,IAAI7F,YAAY,CAACwI,EAAD,CAAhB,EAAsB;AAC3B8F,UAAAA,IAAI,CAACwM,CAAD,CAAJ;AACAxM,UAAAA,IAAI,CAACuM,CAAD,CAAJ;;AACA3d,UAAAA,MAAK;AACN;;AACD2R,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAA,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA2rB,QAAAA,iBAAiB,GAAG7iC,SAApB;AACAA,QAAAA,SAAS,GAAG,KAAZ;;AACAof,QAAAA,UAAS;;AACTpf,QAAAA,SAAS,GAAG6iC,iBAAZ;AACA/xB,QAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,YAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzBA,UAAAA,EAAE,GAAGC,EAAL;AACD;;AACD,YAAIz2B,cAAJ,EAAoB;AAClB,iBAAO+qC,OAAO,CAACE,GAAR,CAAY,4BAA4BxU,EAAxC,CAAP;AACD;AACF;AACF;AACF,GApCD,CA5pvBU,CAksvBV;;;AACArQ,EAAAA,EAAE,GAAG,cAAW;AACd,QAAIiG,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B;AACD;;AACD8F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAmH,IAAAA,WAAW;AACXjS,IAAAA,OAAO;AACPiS,IAAAA,WAAW;AACXjS,IAAAA,OAAO;AACPiS,IAAAA,WAAW;AACXlH,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzB,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GAdD,CAnsvBU,CAmtvBV;;;AACAsL,EAAAA,aAAa,GAAG,yBAAW;AACzB/C,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAxR,IAAAA,EAAE;AACFiW,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO+H,OAAO,EAAd;AACD,GAND;;AAQAlY,EAAAA,EAAE,GAAG,cAAW;AACd,QAAIhb,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAChyB,GAAD,CAAX,CAAJ,KAA0B,CAA1B,IAA+BhG,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAClkC,GAAD,CAAX,CAAJ,KAA0B,CAA7D,EAAgE;AAC9D;AACD;;AACDs3B,IAAAA,EAAE,GAAGD,EAAL;AACAyO,IAAAA,QAAQ,GAAG,CAAX;AACA3I,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAz0B,IAAAA,IAAI;AACJ00B,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAoN,IAAAA,QAAQ,GAAG,CAAX;AACA3I,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAz0B,IAAAA,IAAI;AACJ20B,IAAAA,EAAE,GAAGkB,GAAG,EAAR;AACAoN,IAAAA,QAAQ,GAAG,CAAX;;AACA,QAAItmB,MAAK,CAACgY,EAAD,CAAL,GAAYhY,MAAK,CAAC+X,EAAD,CAAjB,IAAyBf,MAAM,CAACgB,EAAD,CAAN,GAAahB,MAAM,CAACe,EAAD,CAAhD,EAAsD;AACpDA,MAAAA,EAAE,GAAGC,EAAL;AACD;;AACD,QAAIhY,MAAK,CAAC+X,EAAD,CAAL,GAAY/X,MAAK,CAAC6X,EAAD,CAAjB,IAAyBb,MAAM,CAACe,EAAD,CAAN,GAAaf,MAAM,CAACa,EAAD,CAAhD,EAAsD;AACpD,aAAOA,EAAE,GAAGE,EAAZ;AACD;AACF,GApBD,CA5tvBU,CAkvvBV;;;AACApQ,EAAAA,EAAE,GAAG,cAAW;AACd,QAAIwiC,KAAJ,EAAWC,KAAX;;AACA,QAAI/tC,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B;AACD;;AACDmgC,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACApG,IAAAA,EAAE,GAAG/a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjB6F,MAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACA4K,MAAAA,QAAQ;AACRlrB,MAAAA,GAAG;AACH2yC,MAAAA,KAAK,GAAGtyB,EAAR;AACAuyB,MAAAA,KAAK,GAAGtyB,EAAR;AACAD,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA+J,MAAAA,6BAA6B;AAC7BtF,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAA,MAAAA,EAAE,GAAGsyB,KAAL;AACAryB,MAAAA,EAAE,GAAGsyB,KAAL;AACAtyB,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACDA,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzB,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GAxBD;;AA0BAmL,EAAAA,6BAA6B,GAAG,yCAAW;AACzC,QAAIyc,KAAJ,EAAW2K,GAAX,EAAgB9P,OAAhB,EAAyB+P,IAAzB,EAA+BC,MAA/B;AACA5sB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA7V,IAAAA,YAAW;;AACX09B,IAAAA,KAAK,GAAGxmB,GAAG,EAAX;;AACA,QAAI7I,KAAK,CAACqvB,KAAD,CAAT,EAAkB;AAChB;AACD;;AACD/hB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAX,IAAAA,UAAS;;AACTmzB,IAAAA,GAAG,GAAGnxB,GAAG,EAAT;;AACA,QAAI7I,KAAK,CAACg6B,GAAD,CAAT,EAAgB;AACd;AACD;;AACD,QAAI,EAAE9P,OAAO,GAAGrgC,oCAAoC,CAACmwC,GAAD,EAAM3K,KAAN,CAAhD,CAAJ,EAAmE;AACjE;AACD;;AACD/hB,IAAAA,IAAI,CAAC0sB,GAAD,CAAJ;AACA1sB,IAAAA,IAAI,CAAC+hB,KAAD,CAAJ;AACA71B,IAAAA,GAAG;AACH8T,IAAAA,IAAI,CAAC4c,OAAD,CAAJ;AACA1yB,IAAAA,MAAM;AACN0iC,IAAAA,MAAM,GAAGrxB,GAAG,EAAZ,CAtByC,CAuBzC;AACA;;AACA,QAAI7I,KAAK,CAACk6B,MAAD,CAAT,EAAmB;AACjB;AACD;;AACD5sB,IAAAA,IAAI,CAAC0sB,GAAD,CAAJ;AACA1sB,IAAAA,IAAI,CAAC4c,OAAD,CAAJ;AACA1yB,IAAAA,MAAM;AACN8V,IAAAA,IAAI,CAAC4sB,MAAD,CAAJ,CA/ByC,CAgCzC;;AACAx9B,IAAAA,OAAO;AACP0I,IAAAA,iBAAiB;AACjBiN,IAAAA,QAAQ;AACR4nB,IAAAA,IAAI,GAAGzmB,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAP;AACArO,IAAAA,IAAI,CAAC+hB,KAAD,CAAJ;AACA/hB,IAAAA,IAAI,CAAC4c,OAAD,CAAJ;AACA1yB,IAAAA,MAAM;AACN8V,IAAAA,IAAI,CAAC4sB,MAAD,CAAJ,CAxCyC,CAyCzC;;AACAx9B,IAAAA,OAAO;AACP0I,IAAAA,iBAAiB;AACjBiN,IAAAA,QAAQ;AACR4nB,IAAAA,IAAI,GAAGzmB,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAP;AACAlpB,IAAAA,MAAM,GA9CmC,CA+CzC;;AACApiB,IAAAA,QAAQ;AACR4pD,IAAAA,IAAI,GAAGzmB,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAe8F,QAAf,EAAP;AACAlU,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzB,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GAtDD,CA7wvBU,CAq0vBV;AACA;AACA;;;AACAoL,EAAAA,oBAAoB,GAAG,gCAAW;AAChC;AACA,QAAIx2B,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAChyB,GAAD,CAAX,CAAJ,KAA0B,CAA1B,IAA+BhG,KAAI,CAACmrB,EAAD,EAAK6M,MAAM,CAAClkC,GAAD,CAAX,CAAJ,KAA0B,CAA7D,EAAgE;AAC9D;AACD;;AACDm9B,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAx0B,IAAAA,IAAI;AACJ2a,IAAAA,SAAS;AACT8Z,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAI73B,cAAJ,EAAoB;AAClB+qC,MAAAA,OAAO,CAACE,GAAR,CAAY,sCAAsCzU,EAAtC,GAA2C,UAA3C,GAAwDC,EAApE;AACD;;AACD,QAAI9X,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzB,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GAfD;;AAiBAkL,EAAAA,kBAAkB,GAAG,8BAAW;AAC9BrF,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAmB,IAAAA,uBAAsB;;AACtB31B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIlZ,MAAK,CAAC8X,EAAD,CAAL,GAAY9X,MAAK,CAAC6X,EAAD,CAArB,EAA2B;AACzB,aAAOA,EAAE,GAAGC,EAAZ;AACD;AACF,GARD;;AAUAkB,EAAAA,uBAAsB,GAAG,kCAAW;AAClC,QAAI+R,CAAJ;AACA1K,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI9J,eAAe,CAACyI,EAAD,CAAnB,EAAyB;AACvB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD,QAAI5Z,KAAK,CAAC3J,GAAG,CAACwb,EAAD,CAAJ,EAAU6M,MAAM,CAAC/zB,KAAD,CAAhB,CAAL,IAAiCgf,UAAU,CAACxT,IAAI,CAAC0b,EAAD,CAAL,CAA/C,EAA2D;AACzD;AACA8F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;AACAzB,MAAAA,MAAM,GAHmD,CAIzD;;AACA+H,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;;AACAmB,MAAAA,uBAAsB;;AACtBM,MAAAA,KAAK,GAPoD,CAQzD;;AACAP,MAAAA,KAAK;;AACLqG,MAAAA,KAAI;AACL,KAXD,MAWO,IAAI5Q,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACrBkT,MAAAA,CAAC,GAAG7E,GAAJ;;AACA,aAAO1X,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB;AACA8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;;AACAmB,QAAAA,uBAAsB,GAHL,CAIjB;;;AACAnB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACD,KAVM,MAUA;AACLpN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACD;;AACD+H,IAAAA,OAAO;AACR,GAlCD;;AAoCA5I,EAAAA,MAAM,GAAG,gBAAS4U,CAAT,EAAY;AACnB,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC3mC,GAAD,CAArB,EAA4B;AAC1B,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO40B,MAAM,CAACiZ,CAAD,CAAN,GAAY,CAAnB;AACD;AACF,GAND;;AAQA9I,EAAAA,wBAAwB,GAAG,oCAAW;AACpC,QAAIqT,cAAJ,EAAoBqU,0BAApB,EAAgDC,6BAAhD,EAA+EC,mBAA/E;;AACA,QAAIrrB,mCAAmC,GAAG,CAA1C,EAA6C;AAC3C,UAAIh+B,cAAJ,EAAoB;AAClB+qC,QAAAA,OAAO,CAACE,GAAR,CAAY,qDAAZ;AACD;;AACD,aAAO,KAAP;AACD;;AACD3O,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA6yB,IAAAA,mBAAmB,GAAGvlB,6BAA4B,EAAlD,CAToC,CAUpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAslB,IAAAA,6BAA6B,GAAG5mB,KAAK,CAACqC,GAAG,GAAG,CAAP,CAArC;AACAiQ,IAAAA,cAAc,GAAGnvB,SAAjB;AACAA,IAAAA,SAAS,GAAG,CAAZ;AACAkhB,IAAAA,UAAU;AACVlhB,IAAAA,SAAS,GAAGmvB,cAAZ;AACAqU,IAAAA,0BAA0B,GAAGtxB,GAAG,EAAhC,CAzBoC,CA0BpC;AACA;;AACA,QAAIjZ,yBAAwB,CAACykB,MAAM,CAAC/zB,KAAD,CAAP,EAAgB85C,6BAAhB,CAAxB,GAAyExqC,yBAAwB,CAACykB,MAAM,CAAC/zB,KAAD,CAAP,EAAgB65C,0BAAhB,CAArG,EAAkJ;AAChJ7sB,MAAAA,IAAI,CAAC8sB,6BAAD,CAAJ;AACD,KAFD,MAEO;AACL9sB,MAAAA,IAAI,CAAC6sB,0BAAD,CAAJ;AACD,KAhCmC,CAiCpC;;;AACA3yB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA,WAAOwxB,mBAAP;AACD,GApCD;;AAsCAvlB,EAAAA,6BAA4B,GAAG,wCAAW;AACxC,QAAIiT,CAAJ,EAAOE,CAAP,EAAUqS,CAAV,EAAaC,QAAb,EAAuBC,8BAAvB,EAAuD9T,IAAvD,EAA6D+T,SAA7D,EAAwEC,WAAxE,EAAqFC,mBAArF,EAA0GC,aAA1G,EAAyH/C,YAAzH,EAAuIzH,QAAvI,EAAiJyK,SAAjJ,EAA4JngB,CAA5J,EAA+JO,CAA/J,EAAkK6f,SAAlK,EAA6KC,aAA7K,EAA4Lre,EAA5L,EAAgMkC,GAAhM,EAAqMQ,IAArM,EAA2M6B,IAA3M,EAAiNC,IAAjN,EAAuN8Z,WAAvN,EAAoOC,WAApO,EAAiPte,EAAjP,EAAqP8E,EAArP,EAAyPyZ,aAAzP,EAAwQvZ,EAAxQ,EAA4QwZ,qBAA5Q,EAAmSC,0BAAnS,EAA+TC,yBAA/T,EAA0VC,iBAA1V,EAA6WC,cAA7W,EAA6XC,+BAA7X,EAA8Z5e,IAA9Z,EAAoa6e,UAApa,EAAgbC,gBAAhb,EAAkcC,qBAAlc,EAAydC,qBAAzd;;AACA,QAAI5sB,mCAAmC,GAAG,CAA1C,EAA6C;AAC3C,UAAIh+B,cAAJ,EAAoB;AAClB+qC,QAAAA,OAAO,CAACE,GAAR,CAAY,qDAAZ;AACD;;AACD,aAAO,KAAP;AACD;;AACDjM,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CATwC,CAUxC;;AACA,QAAIlT,KAAK,CAAC3J,GAAG,CAACwb,EAAD,CAAJ,EAAU6M,MAAM,CAAC/zB,KAAD,CAAhB,CAAT,EAAmC;AACjC;AACAomC,MAAAA,IAAI,GAAG56B,IAAI,CAAC0b,EAAD,CAAX;AACA4oB,MAAAA,QAAQ,GAAGvkC,KAAK,CAAC2b,EAAD,CAAhB;;AACA,UAAI,CAAClI,UAAU,CAAC8wB,QAAD,CAAX,IAAyBz6B,KAAK,CAAC3J,GAAG,CAAC06B,IAAD,CAAJ,EAAYrS,MAAM,CAAC3mC,GAAD,CAAlB,CAA9B,IAA0DixB,UAAU,CAACyxB,QAAD,CAApE,KAAmFv6B,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAN,IAA0Bv6B,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAnH,CAAJ,EAA0I;AACxI;AACAyK,QAAAA,SAAS,GAAG/uC,IAAI,CAAC46B,IAAD,CAAhB;AACApZ,QAAAA,IAAI,CAACutB,SAAD,CAAJ;;AACA/lB,QAAAA,6BAA4B;;AAC5BjM,QAAAA,GAAG;AACH4yB,QAAAA,UAAU,GAAG5vC,KAAK,CAAC66B,IAAD,CAAlB;AACApZ,QAAAA,IAAI,CAACmuB,UAAD,CAAJ;;AACA3mB,QAAAA,6BAA4B;;AAC5BjM,QAAAA,GAAG,GATqI,CAUxI;AACA;;AACAqyB,QAAAA,aAAa,GAAG,CAAhB;AACAN,QAAAA,aAAa,GAAGlU,IAAhB;;AACA,eAAOh6B,GAAG,CAACkuC,aAAD,CAAH,KAAuBvmB,MAAM,CAACn1B,GAAD,CAApC,EAA2C;AACzCg8C,UAAAA,aAAa;AACbN,UAAAA,aAAa,GAAGluC,GAAG,CAACkuC,aAAD,CAAnB;AACD,SAjBuI,CAkBxI;;;AACA,YAAIM,aAAa,GAAG,CAApB,EAAuB;AACrB;AACA5tB,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,UAAAA,OAAO;AACP,iBAAO,KAAP;AACD,SAxBuI,CAyBxI;;;AACAorB,QAAAA,mBAAmB,GAAG,IAAtB;AACAD,QAAAA,WAAW,GAAG,EAAd;AACAiB,QAAAA,qBAAqB,GAAG,EAAxB;;AACA,YAAI3vC,GAAG,CAACyvC,UAAD,CAAH,KAAoBpnB,MAAM,CAACt1B,QAAD,CAA9B,EAA0C;AACxC;AACA28C,UAAAA,gBAAgB,GAAGhvC,GAAG,CAAC+uC,UAAD,CAAtB;;AACA,cAAIt9B,MAAM,CAACu9B,gBAAD,CAAV,EAA8B;AAC5B,mBAAOv9B,MAAM,CAACu9B,gBAAD,CAAb,EAAiC;AAC/B;AACAH,cAAAA,cAAc,GAAGvvC,GAAG,CAAC0vC,gBAAD,CAApB;;AACA,kBAAI1vC,GAAG,CAACuvC,cAAD,CAAH,KAAwBlnB,MAAM,CAAC/zB,KAAD,CAAlC,EAA2C;AACzCw6C,gBAAAA,SAAS,GAAGhvC,IAAI,CAACyvC,cAAD,CAAhB;AACAR,gBAAAA,aAAa,GAAGlvC,KAAK,CAAC0vC,cAAD,CAArB;;AACA,oBAAI1lC,MAAM,CAACklC,aAAD,EAAgB,CAAhB,EAAmB,CAAnB,CAAV,EAAiC;AAC/B,sBAAIJ,mBAAmB,IAAI,IAA3B,EAAiC;AAC/BA,oBAAAA,mBAAmB,GAAGI,aAAtB;AACAL,oBAAAA,WAAW,CAACptB,IAAZ,CAAiBwtB,SAAjB;AACD,mBAHD,MAGO;AACL,wBAAInlC,KAAK,CAAColC,aAAD,EAAgBJ,mBAAhB,CAAT,EAA+C;AAC7C;AACAD,sBAAAA,WAAW,CAACptB,IAAZ,CAAiBwtB,SAAjB;AACD,qBAHD,MAGO,CAEN;AACF;AACF;AACF,eAhBD,MAgBO;AACL;AACA;AACAa,gBAAAA,qBAAqB,CAACruB,IAAtB,CAA2BiuB,cAA3B;AACD;;AACDG,cAAAA,gBAAgB,GAAGhvC,GAAG,CAACgvC,gBAAD,CAAtB;AACD;AACF;AACF,SA/BD,MA+BO,IAAI1vC,GAAG,CAACyvC,UAAD,CAAH,KAAoBpnB,MAAM,CAAC/zB,KAAD,CAA9B,EAAuC;AAC5Cw6C,UAAAA,SAAS,GAAGhvC,IAAI,CAAC2vC,UAAD,CAAhB;AACAV,UAAAA,aAAa,GAAGlvC,KAAK,CAAC4vC,UAAD,CAArB;;AACA,cAAKd,mBAAmB,IAAI,IAAxB,IAAiC9kC,MAAM,CAACklC,aAAD,EAAgB,CAAhB,EAAmB,CAAnB,CAA3C,EAAkE;AAChE;AACAJ,YAAAA,mBAAmB,GAAGI,aAAtB;AACAL,YAAAA,WAAW,CAACptB,IAAZ,CAAiBwtB,SAAjB;AACD;AACF;;AACD,YAAIJ,WAAW,CAACp4B,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BgL,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,UAAAA,OAAO;AACP,iBAAO,KAAP;AACD;;AACDwY,QAAAA,CAAC,GAAG8S,SAAJ,CA1EwI,CA2ExI;;AACAhtB,QAAAA,YAAY,CAAC,CAAD,CAAZ;;AACA,aAAK6O,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAG8b,WAAW,CAACp4B,MAA/B,EAAuCoa,EAAE,GAAGkC,GAA5C,EAAiDlC,EAAE,EAAnD,EAAuD;AACrDzB,UAAAA,CAAC,GAAGyf,WAAW,CAAChe,EAAD,CAAf;AACApP,UAAAA,IAAI,CAAC2N,CAAD,CAAJ;AACApW,UAAAA,QAAQ;AACT,SAjFuI,CAkFxI;;;AACAy1B,QAAAA,CAAC,GAAGzxB,GAAG,EAAP,CAnFwI,CAoFxI;;AACAgF,QAAAA,YAAY,CAAC,CAAD,CAAZ;;AACA,aAAK8O,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAGuc,qBAAqB,CAACr5B,MAA1C,EAAkDqa,EAAE,GAAGyC,IAAvD,EAA6DzC,EAAE,EAA/D,EAAmE;AACjE1B,UAAAA,CAAC,GAAG0gB,qBAAqB,CAAChf,EAAD,CAAzB;AACArP,UAAAA,IAAI,CAAC2N,CAAD,CAAJ;AACApW,UAAAA,QAAQ;AACT,SA1FuI,CA2FxI;;;AACAojB,QAAAA,CAAC,GAAGpf,GAAG,EAAP,CA5FwI,CA6FxI;;AACA,YAAIhT,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAV,EAA4B;AAC1B9iB,UAAAA,IAAI,CAACya,CAAD,CAAJ;AACAxiB,UAAAA,MAAM;AACN+H,UAAAA,IAAI,CAACgtB,CAAD,CAAJ;AACAz1B,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC2a,CAAD,CAAJ;AACAx1B,UAAAA,MAAM,GANoB,CAMhB;AACV;;AACAgoC,UAAAA,SAAS,GAAG5xB,GAAG,EAAf;AACAyE,UAAAA,IAAI,CAACmtB,SAAD,CAAJ;AACA5rB,UAAAA,IAAI;;AACJ0J,UAAAA,QAAO;;AACP,cAAI6C,IAAI,CAACr0B,GAAL,CAAS8hB,GAAG,GAAGsR,CAAf,IAAoBiB,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAxB,EAAyC;AACvCtQ,YAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,YAAAA,OAAO;AACP,mBAAO,KAAP;AACD;;AACDjC,UAAAA,IAAI,CAACmtB,SAAD,CAAJ;AACA5sB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,UAAAA,IAAI,CAACgtB,CAAD,CAAJ;AACAz1B,UAAAA,QAAQ,GApBkB,CAoBd;AACZ;;AACA41B,UAAAA,SAAS,GAAG5xB,GAAG,EAAf;AACAyE,UAAAA,IAAI,CAACmtB,SAAD,CAAJ;AACA5rB,UAAAA,IAAI;;AACJ0J,UAAAA,QAAO;;AACP,cAAI6C,IAAI,CAACr0B,GAAL,CAAS8hB,GAAG,GAAGsR,CAAf,IAAoBiB,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAxB,EAAyC;AACvC/U,YAAAA,GAAG;AACHyE,YAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,YAAAA,OAAO;AACP,mBAAO,KAAP;AACD;;AACDjC,UAAAA,IAAI,CAACmtB,SAAD,CAAJ;AACAntB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+iB,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,UAAAA,IAAI,CAACya,CAAD,CAAJ;AACAljB,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC2a,CAAD,CAAJ;AACAx1B,UAAAA,MAAM,GAvCoB,CAuChB;;AACVgoC,UAAAA,SAAS,GAAG5xB,GAAG,EAAf;AACAyE,UAAAA,IAAI,CAACmtB,SAAD,CAAJ;AACA5rB,UAAAA,IAAI;;AACJ0J,UAAAA,QAAO;;AACP,cAAI6C,IAAI,CAACr0B,GAAL,CAAS8hB,GAAG,GAAGsR,CAAf,IAAoBiB,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAxB,EAAyC;AACvC/U,YAAAA,GAAG;AACHA,YAAAA,GAAG;AACHyE,YAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,YAAAA,OAAO;AACP,mBAAO,KAAP;AACD;;AACDjC,UAAAA,IAAI,CAACmtB,SAAD,CAAJ,CAnD0B,CAoD1B;;AACAntB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,CAAD,CAAZ,CAzD0B,CAyDT;AACjB;;AACAP,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACJ,SAlED,MAkEO,IAAI0O,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAV,EAA4B;AACjC9iB,UAAAA,IAAI,CAACgtB,CAAD,CAAJ,CADiC,CACxB;;AACTG,UAAAA,SAAS,GAAG5xB,GAAG,EAAf;AACAyE,UAAAA,IAAI,CAACmtB,SAAD,CAAJ;AACA5rB,UAAAA,IAAI;;AACJ0J,UAAAA,QAAO;;AACP,cAAI6C,IAAI,CAACr0B,GAAL,CAAS8hB,GAAG,GAAGsR,CAAf,IAAoBiB,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAxB,EAAyC;AACvCtQ,YAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,YAAAA,OAAO;AACP,mBAAO,KAAP;AACD;;AACDjC,UAAAA,IAAI,CAACmtB,SAAD,CAAJ,CAXiC,CAYjC;;AACA5sB,UAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;AACAP,UAAAA,IAAI,CAACya,CAAD,CAAJ;AACAljB,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC2a,CAAD,CAAJ;AACAx1B,UAAAA,MAAM,GAjB2B,CAiBvB;;AACVgoC,UAAAA,SAAS,GAAG5xB,GAAG,EAAf;AACAyE,UAAAA,IAAI,CAACmtB,SAAD,CAAJ;AACA5rB,UAAAA,IAAI;;AACJ0J,UAAAA,QAAO;;AACP,cAAI6C,IAAI,CAACr0B,GAAL,CAAS8hB,GAAG,GAAGsR,CAAf,IAAoBiB,IAAI,CAACwC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAxB,EAAyC;AACvC/U,YAAAA,GAAG;AACHyE,YAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,YAAAA,OAAO;AACP,mBAAO,KAAP;AACD;;AACDjC,UAAAA,IAAI,CAACmtB,SAAD,CAAJ,CA5BiC,CA6BjC;;AACAntB,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+iB,UAAAA,QAAQ;AACRgJ,UAAAA,YAAY,CAAC,CAAD,CAAZ,CAhCiC,CAgChB;AACjB;;AACAP,UAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACA+rB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACHA,UAAAA,GAAG;AACJ,SAxMuI,CAyMxI;;;AACAmmB,QAAAA,IAAI,CAAC+G,MAAM,CAACvyB,OAAD,CAAP,CAAJ;AACAktB,QAAAA,mCAAmC,GA3MqG,CA4MxI;;AACAW,QAAAA,KAAK;AACLX,QAAAA,mCAAmC;;AACnC,YAAIrZ,KAAK,CAAC6d,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,EAAiBxB,MAAM,CAACn1B,GAAD,CAAvB,CAAT,EAAwC;AACtC,cAAIlO,cAAJ,EAAoB;AAClB+qC,YAAAA,OAAO,CAACE,GAAR,CAAY,gDAAZ;AACD;;AACDpT,UAAAA,GAAG;AACHyE,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,UAAAA,OAAO;AACP,iBAAO,KAAP;AACD,SAvNuI,CAwNxI;AAEA;;;AACA+rB,QAAAA,iBAAiB,GAAG,EAApB;AACA1e,QAAAA,IAAI,GAAGpJ,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,CAAeZ,MAAf,CAAsB9gB,IAA7B;;AACA,aAAKstB,EAAE,GAAG,CAAL,EAAQR,IAAI,GAAGrE,IAAI,CAACta,MAAzB,EAAiCmf,EAAE,GAAGR,IAAtC,EAA4CQ,EAAE,EAA9C,EAAkD;AAChDoW,UAAAA,YAAY,GAAGjb,IAAI,CAAC6E,EAAD,CAAnB;;AACA,cAAI,CAACplC,KAAI,CAACw7C,YAAD,EAAexjB,MAAM,CAAC/zB,KAAD,CAArB,CAAT,EAAwC;AACtCg7C,YAAAA,iBAAiB,CAAChuB,IAAlB,CAAuBuqB,YAAvB;AACD;AACF;;AACDhvB,QAAAA,GAAG,GAnOqI,CAmOjI;AAEP;;AACA,YAAIyyB,iBAAiB,CAACh5B,MAAlB,KAA6B,CAAjC,EAAoC;AAClCgL,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,UAAAA,OAAO;AACP,iBAAO,KAAP;AACD;;AACD8rB,QAAAA,yBAAyB,GAAG,EAA5B;AACAG,QAAAA,+BAA+B,GAAG,EAAlC,CA5OwI,CA6OhJ;;AACQ,aAAK7Z,EAAE,GAAG,CAAL,EAAQT,IAAI,GAAGoa,iBAAiB,CAACh5B,MAAtC,EAA8Cqf,EAAE,GAAGT,IAAnD,EAAyDS,EAAE,EAA3D,EAA+D;AAC7D1G,UAAAA,CAAC,GAAGqgB,iBAAiB,CAAC3Z,EAAD,CAArB;AACArU,UAAAA,IAAI,CAAC2N,CAAD,CAAJ;AACApM,UAAAA,IAAI;;AACJ0J,UAAAA,QAAO;;AACP8iB,UAAAA,yBAAyB,CAAC/tB,IAA1B,CAA+B2N,CAA/B;AACAugB,UAAAA,+BAA+B,CAACluB,IAAhC,CAAqCzE,GAAG,GAAGsR,CAA3C;AACD;;AACDyhB,QAAAA,qBAAqB,GAAGJ,+BAA+B,CAAClW,OAAhC,CAAwClK,IAAI,CAACygB,GAAL,CAASC,KAAT,CAAe1gB,IAAf,EAAqBogB,+BAArB,CAAxC,CAAxB;AACAjB,QAAAA,QAAQ,GAAGc,yBAAyB,CAACO,qBAAD,CAApC,CAvPwI,CAwPxI;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIQ,YAAI/lC,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAV,EAA4B;AAC1B9iB,UAAAA,IAAI,CAACya,CAAD,CAAJ;AACAza,UAAAA,IAAI,CAACitB,QAAD,CAAJ;AACA1sB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACL4E,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,UAAAA,IAAI,CAACgtB,CAAD,CAAJ;AACAz1B,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAACitB,QAAD,CAAJ;AACA11B,UAAAA,QAAQ;AACR1d,UAAAA,GAAG;AACHsL,UAAAA,MAAM,GAXoB,CAY1B;;AACAqb,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACN,SAfD,MAeO,IAAIpT,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAV,EAA4B;AACjC9iB,UAAAA,IAAI,CAACya,CAAD,CAAJ;AACAza,UAAAA,IAAI,CAACitB,QAAD,CAAJ;AACA1sB,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,UAAAA,KAAK;AACLqE,UAAAA,IAAI,CAACgtB,CAAD,CAAJ;AACAnzC,UAAAA,GAAG;AACHsL,UAAAA,MAAM,GAP2B,CAQjC;;AACAqb,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACN,SA7TuI,CA8TxI;;;AACAgyB,QAAAA,WAAW,GAAGpyB,GAAG,EAAjB;;AACA,YAAIoyB,WAAW,IAAI,IAAnB,EAAyB;AACvB3tB,UAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,UAAAA,OAAO;AACP,iBAAO,KAAP;AACD;;AACDjC,QAAAA,IAAI,CAAC2tB,WAAD,CAAJ;AACA3tB,QAAAA,IAAI,CAACitB,QAAD,CAAJ;AACA11B,QAAAA,QAAQ;;AACR,YAAIhP,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAV,EAA4B;AAC1B;AACA4K,UAAAA,WAAW,GAAGnyB,GAAG,EAAjB;AACAyE,UAAAA,IAAI,CAAC2tB,WAAD,CAAJ;AACA3tB,UAAAA,IAAI,CAACgtB,CAAD,CAAJ;AACAxsB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC0tB,WAAD,CAAJ;AACA7zC,UAAAA,GAAG;AACHkrB,UAAAA,QAAQ;AACT,SAXD,MAWO,IAAIxc,MAAM,CAACu6B,QAAD,EAAW,CAAX,EAAc,CAAd,CAAV,EAA4B;AACjC;AACA4K,UAAAA,WAAW,GAAGnyB,GAAG,EAAjB;AACAyE,UAAAA,IAAI,CAAC2tB,WAAD,CAAJ;AACA3tB,UAAAA,IAAI,CAACgtB,CAAD,CAAJ;AACAxsB,UAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,UAAAA,KAAK;AACLpE,UAAAA,QAAQ;AACRyI,UAAAA,IAAI,CAAC0tB,WAAD,CAAJ;AACA7zC,UAAAA,GAAG;AACHkrB,UAAAA,QAAQ;AACR8oB,UAAAA,qBAAqB,GAAGtyB,GAAG,EAA3B,CAXiC,CAYjC;;AACAyE,UAAAA,IAAI,CAAC6tB,qBAAD,CAAJ;AACAtsB,UAAAA,IAAI;;AACJ0J,UAAAA,QAAO;;AACP6iB,UAAAA,0BAA0B,GAAGvyB,GAAG,EAAhC;;AACA,cAAI,CAACjJ,gBAAgB,CAACw7B,0BAAD,CAArB,EAAmD;AACjD;AACA9tB,YAAAA,IAAI,CAAC6tB,qBAAD,CAAJ;AACD,WAHD,MAGO;AACL;AACA7tB,YAAAA,IAAI,CAAC2tB,WAAD,CAAJ;AACA11B,YAAAA,MAAM;AACN01B,YAAAA,WAAW,GAAGpyB,GAAG,EAAjB;AACAyE,YAAAA,IAAI,CAAC0tB,WAAD,CAAJ;AACAz1B,YAAAA,MAAM;AACNy1B,YAAAA,WAAW,GAAGnyB,GAAG,EAAjB;AACAyE,YAAAA,IAAI,CAAC2tB,WAAD,CAAJ;AACA3tB,YAAAA,IAAI,CAACgtB,CAAD,CAAJ;AACAxsB,YAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,YAAAA,KAAK;AACLpE,YAAAA,QAAQ;AACRyI,YAAAA,IAAI,CAAC0tB,WAAD,CAAJ;AACA7zC,YAAAA,GAAG;AACHkrB,YAAAA,QAAQ;AACT;AACF,SAxXuI,CAyXxI;AAEA;;;AACA7K,QAAAA,EAAE,GAAGqB,GAAG,EAAR,CA5XwI,CA6XxI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAyE,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,QAAAA,OAAO;AACP,eAAO,IAAP;AACD,OA3YD,MA2YO;AACLjC,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,QAAAA,OAAO;AACP,eAAO,KAAP;AACD;AACF,KApZD,MAoZO,IAAIpR,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACrBkT,MAAAA,CAAC,GAAG7E,GAAJ;AACA2kB,MAAAA,8BAA8B,GAAG,KAAjC;;AACA,aAAOr8B,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB;AACA8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAgzB,QAAAA,8BAA8B,GAAGA,8BAA8B,IAAI1lB,6BAA4B,EAA/F,CAHiB,CAIjB;;AACAtN,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACAnL,MAAAA,OAAO;AACP,aAAOirB,8BAAP;AACD,KAbM,MAaA;AACLltB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP,aAAO,KAAP;AACD;;AACD,UAAM,IAAIic,KAAJ,CAAU,sCAAV,CAAN;AACD,GAlbD,CAr7vBU,CAy2wBV;;;AACAnxC,EAAAA,QAAQ,GAAG,oBAAW;AACpB;AACAizB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOigC,IAAI,EAAX;AACD,GALD,CA12wBU,CAi3wBV;;;AACAA,EAAAA,IAAI,GAAG,gBAAW;AAChB;AACAjD,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAC3mC,GAAD,CAAtB,EAA6B;AAC3B;AACA;AACAylC,MAAAA,iBAAiB;AAClB,KAJD,MAIO;AACLD,MAAAA,aAAa;AACd;;AACD,WAAO3D,OAAO,EAAd;AACD,GAZD,CAl3wBU,CAg4wBV;AAEA;AAEA;AACA;AAEA;AACA;;;AACA4D,EAAAA,iBAAiB,GAAG,6BAAW;AAC7B;AACA1L,IAAAA,EAAE,GAAG/a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjBE,MAAAA,EAAE,GAAG3b,GAAG,CAACyb,EAAD,CAAR;;AACA,UAAI1H,KAAK,CAAC4H,EAAD,CAAT,EAAe;AAAE;AACf2F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAuM,QAAAA,QAAQ;AACRxM,QAAAA,EAAE,GAAGmB,GAAG,EAAR;AACAyE,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAuL,QAAAA,IAAI;AACJ3F,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAnY,QAAAA,MAAM;AACNqV,QAAAA,QAAQ;AACRyI,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAlY,QAAAA,MAAM;AACN8d,QAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAsL,QAAAA,IAAI;AACJpO,QAAAA,QAAQ;AACR1d,QAAAA,GAAG;AACH;AACD,OAnBgB,CAoBjB;;;AACAsgB,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACD,WAAOyL,aAAa,EAApB;AACD,GA3BD,CAz4wBU,CAs6wBV;;;AACAA,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIiH,CAAJ,EAAOS,CAAP;;AACA,QAAI5uB,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACrmC,MAAD,CAAtB,EAAgC;AAC9Bs/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA;AACD;;AACD,QAAIlJ,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACwE,GAAL,CAASpY,EAAE,CAAC2S,CAAZ,CAAJ;;AACA,UAAIiB,IAAI,CAACr0B,GAAL,CAASozB,CAAT,IAAc,KAAlB,EAAyB;AACvBA,QAAAA,CAAC,GAAG,GAAJ;AACD;;AACD1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD,KAbwB,CAczB;;;AACA,QAAIxa,UAAU,CAAC6H,EAAD,CAAd,EAAoB;AAClB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACN0N,MAAAA,IAAI;AACJ1N,MAAAA,MAAM;AACN;AACD,KArBwB,CAsBzB;AAEA;;;AACA,QAAIvZ,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACnmC,MAAD,CAAtB,EAAgC;AAC9Bo/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAqG,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA5E,MAAAA,KAAK;AACL9hB,MAAAA,GAAG;AACH2mB,MAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACA7E,MAAAA,KAAK;AACLpE,MAAAA,QAAQ;AACR;AACD,KApCwB,CAqCzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAyI,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,IAAAA,YAAY,CAAC,GAAD,CAAZ;AACAhJ,IAAAA,QAAQ;;AACR,QAAI5O,kBAAJ,EAAwB;AACtBwX,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,KAFD,MAEO;AACL2tB,MAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACDqS,IAAAA,MAAM;AACNmoB,IAAAA,CAAC,GAAG5R,WAAW,EAAf,CAvDyB,CAwDzB;AACA;AACA;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAAS0D,KAAK,CAAC1D,CAAD,CAAlB,EAAuB;AACrBtN,MAAAA,IAAI,CAAC+G,MAAM,CAAChyB,GAAD,CAAP,CAAJ;AACAirB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD,KAhEwB,CAiEzB;AACA;;;AACA,YAAQmY,CAAC,GAAG,GAAZ;AACE,WAAK,CAAL;AACA,WAAK,GAAL;AACE,eAAO/M,YAAY,CAAC,CAAD,CAAnB;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACE,eAAOC,aAAa,CAAC,CAAD,EAAI,CAAJ,CAApB;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,eAAOA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAApB;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACEA,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACEiJ,QAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACEiJ,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACEiJ,QAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,EAAL;AACE,eAAOgJ,YAAY,CAAC,CAAD,CAAnB;;AACF,WAAK,GAAL;AACE,eAAOA,YAAY,CAAC,CAAC,CAAF,CAAnB;;AACF;AACEP,QAAAA,IAAI,CAAC+G,MAAM,CAAChyB,GAAD,CAAP,CAAJ;AACAirB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,eAAO/E,IAAI,CAAC,CAAD,CAAX;AA7CJ;AA+CD,GAlHD,CAv6wBU,CA2hxBV;AACA;AACA;;;AACAnoB,EAAAA,SAAS,GAAG,qBAAW;AACrBgzB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAOwkC,KAAK,EAAZ;AACD,GAJD;;AAMAA,EAAAA,KAAK,GAAG,iBAAW;AACjBxH,IAAAA,IAAI;AACJqJ,IAAAA,MAAM;AACN,WAAO9J,OAAO,EAAd;AACD,GAJD;;AAMA8J,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIc,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACpmC,OAAD,CAAtB,EAAiC;AAC/Bq/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA;AACD;;AACD,QAAIlJ,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAAC2gB,IAAL,CAAUv0B,EAAE,CAAC2S,CAAb,CAAJ;;AACA,UAAIiB,IAAI,CAACr0B,GAAL,CAASozB,CAAT,IAAc,KAAlB,EAAyB;AACvBA,QAAAA,CAAC,GAAG,GAAJ;AACD;;AACD1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAI9c,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACDxL,IAAAA,WAAW,CAACzrB,IAAD,CAAX;AACAgrB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GAvBD;;AAyBAwR,EAAAA,MAAK,GAAG,iBAAW;AACjB,QAAI+nB,IAAJ,EAAU/gB,CAAV,EAAayB,EAAb,EAAiBC,EAAjB,EAAqBsf,OAArB,EAA8BC,SAA9B,EAAyCC,OAAzC,EAAkDvf,IAAlD,EAAwDC,IAAxD;AACA7M,IAAAA,IAAI;AACJisB,IAAAA,OAAO,GAAGpzB,GAAG,EAAb;AACAszB,IAAAA,OAAO,GAAGtzB,GAAG,EAAb;;AACA,QAAIszB,OAAO,KAAK9nB,MAAM,CAACn1B,GAAD,CAAlB,IAA2B+8C,OAAO,KAAK5nB,MAAM,CAACn1B,GAAD,CAAjD,EAAwD;AACtDqwB,MAAAA,OAAO;AACP;AACD;;AACDysB,IAAAA,IAAI,GAAGnzB,GAAG,EAAV;;AACA,QAAIrH,QAAQ,CAACw6B,IAAD,CAAZ,EAAoB;AAClBE,MAAAA,SAAS,GAAGt0C,YAAY,CAACo0C,IAAI,CAAC/mB,MAAL,CAAYwF,KAAb,CAAxB;AACAyhB,MAAAA,SAAS,CAACjnB,MAAV,CAAiBuF,IAAjB,GAAwBwhB,IAAI,CAAC/mB,MAAL,CAAYuF,IAApC;;AACA,WAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGof,IAAI,CAAC/mB,MAAL,CAAYuF,IAApC,EAA2C,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAxE,EAA+E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAxG,EAA4G;AAC1Gwf,QAAAA,SAAS,CAACjnB,MAAV,CAAiBqF,GAAjB,CAAqBW,CAArB,IAA0B+gB,IAAI,CAAC/mB,MAAL,CAAYqF,GAAZ,CAAgBW,CAAhB,CAA1B;AACD;;AACD,WAAKA,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGmf,IAAI,CAAC/mB,MAAL,CAAYwF,KAApC,EAA4C,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzE,EAAgF5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzG,EAA6G;AAC3GrP,QAAAA,IAAI,CAAC0uB,IAAI,CAAC/mB,MAAL,CAAY9gB,IAAZ,CAAiB8mB,CAAjB,CAAD,CAAJ;AACA3N,QAAAA,IAAI,CAAC6uB,OAAD,CAAJ;AACA7uB,QAAAA,IAAI,CAAC2uB,OAAD,CAAJ;;AACAhoB,QAAAA,MAAK;;AACLioB,QAAAA,SAAS,CAACjnB,MAAV,CAAiB9gB,IAAjB,CAAsB8mB,CAAtB,IAA2BpS,GAAG,EAA9B;AACA3b,QAAAA,uBAAuB,CAACgvC,SAAD,CAAvB;AACD;;AACD5uB,MAAAA,IAAI,CAAC4uB,SAAD,CAAJ;AACD,KAfD,MAeO,IAAIvmC,KAAK,CAACqmC,IAAD,EAAOG,OAAP,CAAT,EAA0B;AAC/B7uB,MAAAA,IAAI,CAAC2uB,OAAD,CAAJ;AACD,KAFM,MAEA,IAAI99B,MAAM,CAAC69B,IAAD,CAAV,EAAkB;AACvB1uB,MAAAA,IAAI,CAACthB,GAAG,CAACgwC,IAAD,CAAJ,CAAJ;AACA1uB,MAAAA,IAAI,CAAC6uB,OAAD,CAAJ;AACA7uB,MAAAA,IAAI,CAAC2uB,OAAD,CAAJ;;AACAhoB,MAAAA,MAAK;;AACL3G,MAAAA,IAAI,CAAC5gB,GAAG,CAACsvC,IAAD,CAAJ,CAAJ;AACA1uB,MAAAA,IAAI,CAAC6uB,OAAD,CAAJ;AACA7uB,MAAAA,IAAI,CAAC2uB,OAAD,CAAJ;;AACAhoB,MAAAA,MAAK;;AACL/kB,MAAAA,IAAI;AACL,KAVM,MAUA;AACLoe,MAAAA,IAAI,CAAC0uB,IAAD,CAAJ;AACD;;AACD,WAAOzsB,OAAO,EAAd;AACD,GAzCD,CAnkxBU,CA8mxBV;AAEA;AACA;AACA;AACA;AAEA;;;AACA70B,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIs1C,IAAJ,EAAU/U,CAAV,EAAaoX,aAAb,EAA4BnX,CAA5B,EAA+Bd,CAA/B,EAAkCsC,EAAlC,EAAsCE,IAAtC,EAA4CC,IAA5C;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ,CAJoB,CAKpB;;AACA4V,IAAAA,IAAI,GAAGlkC,IAAI,CAAC0b,EAAD,CAAX,CANoB,CAOpB;;AACA6qB,IAAAA,aAAa,GAAGxmC,KAAK,CAAC2b,EAAD,CAArB;;AACA,QAAI,CAAClG,QAAQ,CAAC+wB,aAAD,CAAb,EAA8B;AAC5Bxe,MAAAA,IAAI,CAAC,eAAD,CAAJ;AACD,KAXmB,CAYpB;;;AACAvG,IAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,IAAAA,IAAI;AACJkoC,IAAAA,CAAC,GAAGlS,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAACpD,CAAD,CAAT,EAAc;AACZ5N,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD,KAnBmB,CAoBpB;;;AACA8F,IAAAA,IAAI,CAAC3hB,OAAO,CAAC6b,EAAD,CAAR,CAAJ;AACAx0B,IAAAA,IAAI;AACJonC,IAAAA,CAAC,GAAGpR,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAClE,CAAD,CAAT,EAAc;AACZ9M,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD,KA3BmB,CA4BpB;AACA;;;AACAG,IAAAA,EAAE,GAAGtN,WAAW,CAACg4B,aAAD,CAAhB;AACAxkB,IAAAA,YAAY,CAAC,CAAD,CAAZ;;AACA,SAAKoN,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAG1B,CAAhB,EAAmB2B,IAAI,GAAGzC,CAA/B,EAAmCwC,IAAI,IAAIC,IAAR,GAAeH,EAAE,IAAIG,IAArB,GAA4BH,EAAE,IAAIG,IAArE,EAA4E5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEH,EAAjB,GAAsB,EAAEA,EAAxG,EAA4G;AAC1G7O,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACArT,MAAAA,EAAE,GAAGiB,GAAG,EAAR;AACA2I,MAAAA,WAAW,CAAC6gB,aAAD,EAAgBzqB,EAAhB,CAAX;AACA0F,MAAAA,IAAI,CAAC0iB,IAAD,CAAJ;AACAh9C,MAAAA,IAAI;AACJmU,MAAAA,GAAG;AACJ,KAvCmB,CAwCpB;;;AACA,WAAOqqB,WAAW,CAAC6gB,aAAD,EAAgB1qB,EAAhB,CAAlB;AACD,GA1CD,CAtnxBU,CAkqxBV;;;AACA9sB,EAAAA,QAAQ,GAAG,oBAAW;AACpByyB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJ,WAAO+hC,OAAO,EAAd;AACD,GAJD;;AAMAA,EAAAA,OAAO,GAAG,mBAAW;AACnB/E,IAAAA,IAAI;AACJsJ,IAAAA,SAAS;AACT,WAAO/J,OAAO,EAAd;AACD,GAJD;;AAMA+J,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIa,CAAJ,EAAOS,CAAP;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,CAAC,GAAG,GAAJ;AACA3S,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAACnmC,MAAD,CAAtB,EAAgC;AAC9Bo/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA;AACD;;AACD,QAAIlJ,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACghB,GAAL,CAAS50B,EAAE,CAAC2S,CAAZ,CAAJ;;AACA,UAAIiB,IAAI,CAACr0B,GAAL,CAASozB,CAAT,IAAc,KAAlB,EAAyB;AACvBA,QAAAA,CAAC,GAAG,GAAJ;AACD;;AACD1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD,KAhBoB,CAiBrB;;;AACA,QAAIxa,UAAU,CAAC6H,EAAD,CAAd,EAAoB;AAClB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjC,MAAAA,MAAM;AACNwP,MAAAA,OAAO;AACPxP,MAAAA,MAAM;AACN;AACD,KAxBoB,CAyBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA+H,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAqG,IAAAA,YAAY,CAAC,GAAD,CAAZ;AACAhJ,IAAAA,QAAQ;;AACR,QAAI5O,kBAAJ,EAAwB;AACtBwX,MAAAA,WAAW,CAAC2N,IAAI,CAACh7B,EAAN,CAAX;AACD,KAFD,MAEO;AACL2tB,MAAAA,WAAW,CAAC3tB,EAAD,CAAX;AACD;;AACDqS,IAAAA,MAAM;AACNmoB,IAAAA,CAAC,GAAG5R,WAAW,EAAf,CA3CqB,CA4CrB;AACA;AACA;;AACA,QAAI4R,CAAC,GAAG,CAAJ,IAAS0D,KAAK,CAAC1D,CAAD,CAAlB,EAAuB;AACrBtN,MAAAA,IAAI,CAAC+G,MAAM,CAACpwB,GAAD,CAAP,CAAJ;AACAqpB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA/E,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,YAAQmY,CAAC,GAAG,GAAZ;AACE,WAAK,CAAL;AACA,WAAK,GAAL;AACE,eAAO/M,YAAY,CAAC,CAAD,CAAnB;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACEC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACEiJ,QAAAA,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAAb;AACAD,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAOpE,QAAQ,EAAf;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACE,eAAOgJ,YAAY,CAAC,CAAD,CAAnB;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE,eAAOA,YAAY,CAAC,CAAC,CAAF,CAAnB;;AACF,WAAK,EAAL;AACA,WAAK,GAAL;AACEA,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA,eAAO7E,KAAK,EAAZ;;AACF,WAAK,GAAL;AACA,WAAK,GAAL;AACE4E,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAC,QAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA7E,QAAAA,KAAK;AACL,eAAO1D,MAAM,EAAb;;AACF;AACE+H,QAAAA,IAAI,CAAC+G,MAAM,CAACpwB,GAAD,CAAP,CAAJ;AACAqpB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,eAAO/E,IAAI,CAAC,CAAD,CAAX;AAtCJ;AAwCD,GA7FD,CA/qxBU,CA8wxBV;AACA;AACA;;;AACA3nB,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIq/B,CAAJ;AACAA,IAAAA,CAAC,GAAG,GAAJ;AACA7M,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJw0B,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI7c,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAClmC,OAAD,CAAtB,EAAiC;AAC/Bm/B,MAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACA;AACD;;AACD,QAAIlJ,QAAQ,CAACkJ,EAAD,CAAZ,EAAkB;AAChB2S,MAAAA,CAAC,GAAGiB,IAAI,CAACihB,IAAL,CAAU70B,EAAE,CAAC2S,CAAb,CAAJ;;AACA,UAAIiB,IAAI,CAACr0B,GAAL,CAASozB,CAAT,IAAc,KAAlB,EAAyB;AACvBA,QAAAA,CAAC,GAAG,GAAJ;AACD;;AACD1M,MAAAA,WAAW,CAAC0M,CAAD,CAAX;AACA;AACD;;AACD,QAAI9c,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACDxL,IAAAA,WAAW,CAAC7pB,IAAD,CAAX;AACAopB,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAO/E,IAAI,CAAC,CAAD,CAAX;AACD,GAzBD;;AA2BA1nB,EAAAA,WAAW,GAAG,uBAAW;AACvB;AACAysB,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI,GAJmB,CAKvB;;AACAw0B,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB8b,MAAAA,KAAK;AACN,KAFD,MAEO;AACLsS,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD,KAdsB,CAevB;;;AACAD,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB2uB,MAAAA,YAAY,CAAC,EAAD,CAAZ,CADsB,CACJ;AACnB,KAFD,MAEO;AACLP,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD,KAxBsB,CAyBvB;;;AACAD,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI;AACJy0B,IAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,QAAIpB,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB2uB,MAAAA,YAAY,CAAC,CAAD,CAAZ,CADsB,CACL;AAClB,KAFD,MAEO;AACLP,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACD;;AACD,WAAOuN,MAAM,EAAb;AACD,GApCD,CA5yxBU,CAk1xBV;AACA;AACA;AACA;AACA;;;AACAA,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIiG,CAAJ,EAAOb,CAAP,EAAUsC,EAAV,EAAcE,IAAd;AACA3B,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,CAAJ;AACApK,IAAAA,IAAI;AACJrI,IAAAA,EAAE,GAAGkB,GAAG,EAAR;AACAnB,IAAAA,EAAE,GAAGmB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA0S,IAAAA,CAAC,GAAGpR,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAClE,CAAD,CAAT,EAAc;AACZrM,MAAAA,WAAW,CAAC5pB,MAAD,CAAX;AACAmpB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAlF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA8M,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;;AACAsM,IAAAA,MAAK;;AACLjhC,IAAAA,IAAI;AACJ66B,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAjG,IAAAA,EAAE,GAAGiB,GAAG,EAAR;;AACA,SAAKoS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGxC,CAAxB,EAA4B,KAAKwC,IAAL,GAAYF,EAAE,IAAIE,IAAlB,GAAyBF,EAAE,IAAIE,IAA3D,EAAkE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA3F,EAA+F;AAC7FpP,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,MAAAA,UAAU;AACV0V,MAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,UAAIxL,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B;AACD;;AACD8F,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA0F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAuM,MAAAA,QAAQ;AACRrP,MAAAA,QAAQ;AACR+C,MAAAA,EAAE,GAAGiB,GAAG,EAAR;AACAyE,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,MAAAA,IAAI,CAAC3F,EAAD,CAAJ;;AACAsM,MAAAA,MAAK;;AACLjhC,MAAAA,IAAI;AACJs6B,MAAAA,IAAI,CAAC1F,EAAD,CAAJ;AACA/C,MAAAA,QAAQ;AACRgJ,MAAAA,YAAY,CAACoN,CAAD,CAAZ;AACAljB,MAAAA,SAAS;AACTtF,MAAAA,MAAM;AACNtL,MAAAA,GAAG;AACJ;;AACD,WAAOooB,OAAO,EAAd;AACD,GAvDD,CAv1xBU,CAg5xBV;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWE;AACA;;;AACAv0B,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAI6+B,CAAJ,EAAOC,CAAP,EAAUmB,CAAV,EAAayB,EAAb,EAAiBC,EAAjB,EAAqBnC,IAArB,EAA2BC,KAA3B,EAAkCmC,IAAlC,EAAwCC,IAAxC;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR,CAJuB,CAKvB;AAEA;AAEA;AAEA;;AACAvtB,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACAiT,IAAAA,KAAK,GAAGjT,EAAE,CAACyN,MAAH,CAAUwF,KAAlB;AACAD,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;AACA/S,IAAAA,EAAE,GAAG7f,YAAY,CAAC6yB,KAAD,CAAjB;AACAhT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;;AACA,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,IAAxB,EAA+B,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9FjV,MAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD,KAnBsB,CAoBvB;AAEA;AAEA;;;AACApB,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGrS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd;AACAjH,IAAAA,uBAAuB,CAACua,EAAD,CAAvB;;AACA,SAAKwT,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,KAAxB,EAAgC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA7D,EAAoE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/F;AACArP,MAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACAjoC,MAAAA,IAAI,GAH2F,CAI/F;;AACA8mC,MAAAA,CAAC,CAACmB,CAAD,CAAD,GAAOpS,GAAG,EAAV;AACD;;AACD3b,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACAta,IAAAA,uBAAuB,CAACua,EAAD,CAAvB,CApCuB,CAqCvB;AAEA;AAEA;;AACA6F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO4F,cAAc,EAArB;AACD,GA5CD,CAt8xBU,CAo/xBV;AAEA;AAEA;AAEA;AAEA;;;AACA6H,EAAAA,kBAAkB,GAAG,8BAAW;AAC9B,QAAI2E,CAAJ,EAAOC,CAAP,EAAUyG,CAAV,EAAatF,CAAb,EAAgByB,EAAhB,EAAoBC,EAApB,EAAwB8E,EAAxB,EAA4BjH,IAA5B,EAAkCC,KAAlC,EAAyCmC,IAAzC,EAA+CC,IAA/C,EAAqDC,IAArD;AACA7B,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR,CAJ8B,CAK9B;;AACAzK,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAR8B,CAS9B;;AACA2R,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;;AACA,QAAIA,IAAI,KAAK/S,EAAE,CAACwN,MAAH,CAAUuF,IAAvB,EAA6B;AAC3BlN,MAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACAqwB,MAAAA,OAAO;AACP;AACD;;AACD,SAAK0L,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,IAAxB,EAA+B,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9F,UAAIlV,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,MAAqBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAzB,EAA2C;AACzC3N,QAAAA,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAJ;AACAqwB,QAAAA,OAAO;AACP;AACD;AACF,KAtB6B,CAuB9B;;;AACAkL,IAAAA,KAAK,GAAGjT,EAAE,CAACyN,MAAH,CAAUwF,KAAlB;AACA/S,IAAAA,EAAE,GAAG9f,YAAY,CAAC6yB,KAAD,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;;AACA,SAAKS,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrC,IAAxB,EAA+B,KAAKqC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9FjV,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD,KA7B6B,CA8B9B;;;AACApB,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGrS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd;AACAosB,IAAAA,CAAC,GAAG7Y,EAAE,CAACuN,MAAH,CAAU9gB,IAAd;;AACA,SAAK8mB,CAAC,GAAGwG,EAAE,GAAG,CAAT,EAAY3E,IAAI,GAAGrC,KAAxB,EAAgC,KAAKqC,IAAL,GAAY2E,EAAE,GAAG3E,IAAjB,GAAwB2E,EAAE,GAAG3E,IAA7D,EAAoE7B,CAAC,GAAG,KAAK6B,IAAL,GAAY,EAAE2E,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FnU,MAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACA3N,MAAAA,IAAI,CAACwM,CAAC,CAACmB,CAAD,CAAF,CAAJ;AACA9zB,MAAAA,GAAG;AACHo5B,MAAAA,CAAC,CAACtF,CAAD,CAAD,GAAOpS,GAAG,EAAV;AACD,KAvC6B,CAwC9B;;;AACAyE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,WAAO6H,OAAO,EAAd;AACD,GA3CD,CA7/xBU,CA0iyBV;AAEA;AAEA;;;AACA4F,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B,QAAI0E,CAAJ,EAAOC,CAAP,EAAUmB,CAAV,EAAayB,EAAb,EAAiBC,EAAjB,EAAqBnC,IAArB,EAA2BC,KAA3B,EAAkCmC,IAAlC,EAAwCC,IAAxC;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR,CAJ+B,CAK/B;;AACAzK,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA2R,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;AACAC,IAAAA,KAAK,GAAGjT,EAAE,CAACyN,MAAH,CAAUwF,KAAlB;AACA/S,IAAAA,EAAE,GAAG9f,YAAY,CAAC6yB,KAAD,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;;AACA,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,IAAxB,EAA+B,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9FhV,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACDpB,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGpS,EAAE,CAACuN,MAAH,CAAU9gB,IAAd;;AACA,SAAK8mB,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,KAAxB,EAAgC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA7D,EAAoE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FrP,MAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACA3N,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA5C,MAAAA,QAAQ;AACRiV,MAAAA,CAAC,CAACmB,CAAD,CAAD,GAAOpS,GAAG,EAAV;AACD;;AACDyE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,WAAO6H,OAAO,EAAd;AACD,GA1BD;;AA4BAW,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B,QAAI2J,CAAJ,EAAOC,CAAP,EAAUmB,CAAV,EAAayB,EAAb,EAAiBC,EAAjB,EAAqBnC,IAArB,EAA2BC,KAA3B,EAAkCmC,IAAlC,EAAwCC,IAAxC;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAT,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR,CAJ+B,CAK/B;;AACAzK,IAAAA,IAAI;AACJvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA2R,IAAAA,IAAI,GAAG/S,EAAE,CAACwN,MAAH,CAAUuF,IAAjB;AACAC,IAAAA,KAAK,GAAGhT,EAAE,CAACwN,MAAH,CAAUwF,KAAlB;AACA/S,IAAAA,EAAE,GAAG9f,YAAY,CAAC6yB,KAAD,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;;AACA,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,IAAxB,EAA+B,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9FhV,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACDpB,IAAAA,CAAC,GAAGpS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGpS,EAAE,CAACuN,MAAH,CAAU9gB,IAAd;;AACA,SAAK8mB,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,KAAxB,EAAgC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA7D,EAAoE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FrP,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACApW,MAAAA,QAAQ;AACRiV,MAAAA,CAAC,CAACmB,CAAD,CAAD,GAAOpS,GAAG,EAAV;AACD;;AACDyE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,WAAO6H,OAAO,EAAd;AACD,GA1BD;;AA4BAriB,EAAAA,uBAAuB,GAAG,iCAASquB,CAAT,EAAY;AACpC,QAAIA,CAAC,CAACtG,MAAF,CAASwF,KAAT,KAAmBc,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAcmO,MAArC,EAA6C;AAC3CyZ,MAAAA,OAAO,CAACE,GAAR,CAAY,sCAAZ;AACA;AACD;AACF,GALD;;AAOAte,EAAAA,gBAAgB,GAAG,0BAAS4d,CAAT,EAAY;AAC7B,QAAI/Z,QAAQ,CAAC+Z,CAAD,CAAR,IAAeA,CAAC,CAACtG,MAAF,CAASuF,IAAT,KAAkB,CAAjC,IAAsCe,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAa,CAAb,MAAoBiB,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAa,CAAb,CAA9D,EAA+E;AAC7E,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND,CA9myBU,CAsnyBV;AAEA;AAEA;;;AACAlqB,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAIypB,CAAJ,EAAOC,CAAP,EAAUyG,CAAV,EAAatF,CAAb,EAAgBC,CAAhB,EAAmBwB,EAAnB,EAAuBC,EAAvB,EAA2B8E,EAA3B,EAA+BjH,IAA/B,EAAqCC,KAArC,EAA4CmC,IAA5C,EAAkDC,IAAlD,EAAwDC,IAAxD;AACA7B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAV,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR,CAL2B,CAM3B;;AACAD,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;AACAC,IAAAA,KAAK,GAAGjT,EAAE,CAACyN,MAAH,CAAUwF,KAAlB;;AACA,QAAID,IAAI,GAAG,CAAP,IAAYt8B,MAAhB,EAAwB;AACtB6vB,MAAAA,WAAW,CAAC18B,UAAD,CAAX;AACAi8B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACDiF,IAAAA,EAAE,GAAG9f,YAAY,CAAC6yB,KAAK,GAAGhT,EAAE,CAACwN,MAAH,CAAUwF,KAAnB,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBA,IAAI,GAAG,CAAxB;;AACA,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,IAAxB,EAA+B,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9FhV,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACDvT,IAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcE,IAAd,IAAsB/S,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAtB;AACAT,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGrS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd;AACAosB,IAAAA,CAAC,GAAG7Y,EAAE,CAACuN,MAAH,CAAU9gB,IAAd;;AACA,SAAK8mB,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpC,KAAxB,EAAgC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA7D,EAAoE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/F,WAAKzB,CAAC,GAAGuG,EAAE,GAAG,CAAT,EAAY3E,IAAI,GAAGrV,EAAE,CAACwN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKqC,IAAL,GAAY2E,EAAE,GAAG3E,IAAjB,GAAwB2E,EAAE,GAAG3E,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAE2E,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGnU,QAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACA3N,QAAAA,IAAI,CAACwM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACAppB,QAAAA,UAAU;AACVyuB,QAAAA,CAAC,CAACtF,CAAC,GAAGxT,EAAE,CAACwN,MAAH,CAAUwF,KAAd,GAAsBS,CAAvB,CAAD,GAA6BrS,GAAG,EAAhC;AACD;AACF;;AACD,WAAOyE,IAAI,CAAC5F,EAAD,CAAX;AACD,GAlCD,CA3nyBU,CA+pyBV;AAEA;AAEA;;;AACAxX,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAI2pB,CAAJ,EAAOC,CAAP,EAAUmB,CAAV,EAAayB,EAAb,EAAiBE,IAAjB,CAD2B,CAE3B;;AACAlV,IAAAA,EAAE,GAAG9f,YAAY,CAAC6f,EAAE,CAACwN,MAAH,CAAUwF,KAAX,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACA9S,IAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmB7S,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAnB;AACAT,IAAAA,CAAC,GAAGpS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGpS,EAAE,CAACuN,MAAH,CAAU9gB,IAAd;;AACA,SAAK8mB,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGnV,EAAE,CAACwN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGpP,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACAnpB,MAAAA,UAAU;AACVgoB,MAAAA,CAAC,CAACmB,CAAD,CAAD,GAAOpS,GAAG,EAAV;AACD;;AACD,WAAOyE,IAAI,CAAC5F,EAAD,CAAX;AACD,GAfD,CApqyBU,CAqryBV;AAEA;AAEA;;;AACAvX,EAAAA,eAAe,GAAG,2BAAW;AAC3B,QAAI0pB,CAAJ,EAAOC,CAAP,EAAUmB,CAAV,EAAayB,EAAb,EAAiBC,EAAjB,EAAqBC,IAArB,EAA2BC,IAA3B;AACA5B,IAAAA,CAAC,GAAG,CAAJ,CAF2B,CAG3B;;AACAvT,IAAAA,EAAE,GAAG9f,YAAY,CAAC4f,EAAE,CAACyN,MAAH,CAAUwF,KAAX,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBhT,EAAE,CAACyN,MAAH,CAAUuF,IAA3B;;AACA,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpV,EAAE,CAACyN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxGhV,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACDpB,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGpS,EAAE,CAACuN,MAAH,CAAU9gB,IAAd;;AACA,SAAK8mB,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGrP,MAAAA,IAAI,CAACuM,CAAC,CAACoB,CAAD,CAAF,CAAJ;AACA3N,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA3V,MAAAA,UAAU;AACVgoB,MAAAA,CAAC,CAACmB,CAAD,CAAD,GAAOpS,GAAG,EAAV;AACD;;AACD,WAAOyE,IAAI,CAAC5F,EAAD,CAAX;AACD,GAlBD;;AAoBA9Y,EAAAA,eAAe,GAAG,yBAAS4Y,EAAT,EAAaC,EAAb,EAAiB;AACjC,QAAIwT,CAAJ,EAAOyB,EAAP,EAAWC,EAAX,EAAeC,IAAf,EAAqBC,IAArB;AACA5B,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIzT,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB/S,EAAE,CAACwN,MAAH,CAAUuF,IAA/B,EAAqC;AACnC,aAAO,CAAC,CAAR;AACD;;AACD,QAAIhT,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB/S,EAAE,CAACwN,MAAH,CAAUuF,IAA/B,EAAqC;AACnC,aAAO,CAAP;AACD;;AACD,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpV,EAAE,CAACyN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG,UAAIlV,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAvB,EAAyC;AACvC,eAAO,CAAC,CAAR;AACD;;AACD,UAAIzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBxT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAvB,EAAyC;AACvC,eAAO,CAAP;AACD;AACF;;AACD,SAAKA,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG,UAAIhnB,KAAK,CAAC6R,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,EAAoBxT,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAApB,CAAT,EAAiD;AAC/C;AACD;;AACD,UAAI1Y,KAAK,CAACiF,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,EAAoBxT,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAApB,CAAT,EAAiD;AAC/C,eAAO,CAAC,CAAR;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF;;AACD,WAAO,CAAP;AACD,GA5BD,CA9syBU,CA4uyBV;AAEA;AAEA;AAEA;AAEA;AAEA;;;AACA7R,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAI6R,CAAJ,EAAOb,CAAP,EAAUsC,EAAV,EAAcC,EAAd,EAAkB/B,CAAlB,EAAqBgC,IAArB,EAA2BC,IAA3B,EAAiCtC,OAAjC;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,CAAJ;AACAQ,IAAAA,CAAC,GAAG,CAAJ,CAJwB,CAKxB;;AACAR,IAAAA,CAAC,GAAG5S,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAArB;;AACA,QAAIhT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,MAAqB9S,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcF,CAAd,CAAzB,EAA2C;AACzCrM,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD6K,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,IAAAA,CAAC,GAAG5R,WAAW,EAAf;;AACA,QAAIsV,KAAK,CAAC1D,CAAD,CAAT,EAAc;AACZ7M,MAAAA,WAAW,CAACztB,KAAD,CAAX;AACAgtB,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA8F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAhF,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,QAAImY,CAAC,KAAK,CAAV,EAAa;AACX,UAAIpT,EAAE,CAACyN,MAAH,CAAUuF,IAAV,KAAmB,CAAvB,EAA0B;AACxB3G,QAAAA,IAAI,CAAC,iDAAD,CAAJ;AACD;;AACD+G,MAAAA,CAAC,GAAGpT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,CAAJ;AACA9S,MAAAA,EAAE,GAAG5f,YAAY,CAACgzB,CAAC,GAAGA,CAAL,CAAjB;AACApT,MAAAA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB,CAAjB;AACAhT,MAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;AACApT,MAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc,CAAd,IAAmBM,CAAnB;;AACA,WAAKK,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FlV,QAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAeymB,CAAC,GAAGK,CAAJ,GAAQA,CAAvB,IAA4BjU,GAA5B;AACD;;AACD9Z,MAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACA8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA;AACD;;AACD,QAAIoT,CAAC,GAAG,CAAR,EAAW;AACTA,MAAAA,CAAC,GAAG,CAACA,CAAL;AACAtN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA/K,MAAAA,IAAG;;AACH+K,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD;;AACDyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+S,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FrP,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACAtL,MAAAA,MAAK;;AACL,UAAImB,kBAAkB,CAACmW,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAtB,EAAwC;AACtC;AACD,OAFD,MAEO;AACL0E,QAAAA,OAAO,CAACjN,IAAR,CAAa,KAAK,CAAlB;AACD;AACF;;AACD,WAAOiN,OAAP;AACD,GAzDD;;AA2DAhrB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAI0rB,CAAJ,EAAOyB,EAAP,EAAWC,EAAX,EAAeC,IAAf,EAAqBC,IAArB;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAjL,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACApB,IAAAA,EAAE,GAAG7f,YAAY,CAAC4f,EAAE,CAACyN,MAAH,CAAUwF,KAAX,CAAjB;AACAhT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiBhT,EAAE,CAACyN,MAAH,CAAUuF,IAA3B;;AACA,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpV,EAAE,CAACyN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxGjV,MAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACD,SAAKA,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGlV,MAAAA,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBzT,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAApB;AACD;;AACD/tB,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACAta,IAAAA,uBAAuB,CAACua,EAAD,CAAvB;AACA6F,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAjBD,CAlzyBU,CAq0yBV;;;AACAlC,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAI4N,CAAJ,EAAOC,CAAP,EAAUd,CAAV,EAAasC,EAAb,EAAiBC,EAAjB,EAAqB8E,EAArB,EAAyBjH,IAAzB,EAA+BC,KAA/B,EAAsCkH,EAAtC,EAA0CG,EAA1C,EAA8ClF,IAA9C,EAAoDC,IAApD,EAA0DC,IAA1D,EAAgEC,IAAhE,EAAsEC,IAAtE;AACA/B,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACAK,IAAAA,KAAK,GAAG,CAAR;AACAD,IAAAA,IAAI,GAAG,CAAP;AACAxK,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAI,CAACrH,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACD9H,IAAAA,EAAE,GAAGD,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe,CAAf,CAAL;;AACA,SAAK8mB,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzG,UAAI,CAAC7tB,UAAU,CAAC4Y,EAAD,EAAKD,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAL,CAAf,EAAwC;AACtCpH,QAAAA,IAAI,CAAC,8DAAD,CAAJ;AACD;AACF;;AACD,QAAI,CAACrS,QAAQ,CAACiG,EAAD,CAAb,EAAmB;AACjB6F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACDiL,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiB/S,EAAE,CAACwN,MAAH,CAAUuF,IAAlC;;AACA,QAAIA,IAAI,GAAGt8B,MAAX,EAAmB;AACjB21B,MAAAA,IAAI,CAAC,mBAAmB31B,MAApB,CAAJ;AACD;;AACDu8B,IAAAA,KAAK,GAAGjT,EAAE,CAACyN,MAAH,CAAUwF,KAAV,GAAkBhT,EAAE,CAACwN,MAAH,CAAUwF,KAApC;AACA/S,IAAAA,EAAE,GAAG9f,YAAY,CAAC6yB,KAAD,CAAjB;AACA/S,IAAAA,EAAE,CAACuN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;;AACA,SAAKS,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrV,EAAE,CAACyN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKqC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxGjV,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACD,SAAKC,CAAC,GAAGuG,EAAE,GAAG,CAAT,EAAY3E,IAAI,GAAGrV,EAAE,CAACwN,MAAH,CAAUuF,IAAlC,EAAyC,KAAKsC,IAAL,GAAY2E,EAAE,GAAG3E,IAAjB,GAAwB2E,EAAE,GAAG3E,IAAtE,EAA6E5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAE2E,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG/Z,MAAAA,EAAE,CAACuN,MAAH,CAAUqF,GAAV,CAAcW,CAAC,GAAGC,CAAlB,IAAuBzT,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcY,CAAd,CAAvB;AACD;;AACDd,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKa,CAAC,GAAG0G,EAAE,GAAG,CAAT,EAAY5E,IAAI,GAAGvV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKsC,IAAL,GAAY4E,EAAE,GAAG5E,IAAjB,GAAwB4E,EAAE,GAAG5E,IAAvE,EAA8E9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAE4E,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGla,MAAAA,EAAE,GAAGD,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAL;;AACA,WAAKC,CAAC,GAAG4G,EAAE,GAAG,CAAT,EAAY9E,IAAI,GAAGvV,EAAE,CAACwN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKuC,IAAL,GAAY8E,EAAE,GAAG9E,IAAjB,GAAwB8E,EAAE,GAAG9E,IAAvE,EAA8E9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAE8E,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGpa,QAAAA,EAAE,CAACuN,MAAH,CAAU9gB,IAAV,CAAeimB,CAAC,EAAhB,IAAsB3S,EAAE,CAACwN,MAAH,CAAU9gB,IAAV,CAAe+mB,CAAf,CAAtB;AACD;AACF;;AACDhuB,IAAAA,uBAAuB,CAACua,EAAD,CAAvB;AACAva,IAAAA,uBAAuB,CAACwa,EAAD,CAAvB;AACA4F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA,WAAO6H,OAAO,EAAd;AACD,GAjDD;;AAmDA1gB,EAAAA,UAAU,GAAG,oBAAS0sB,CAAT,EAAYvB,CAAZ,EAAe;AAC1B,QAAIiB,CAAJ,EAAOyB,EAAP,EAAWE,IAAX;;AACA,QAAI,CAACpb,QAAQ,CAAC+Z,CAAD,CAAT,IAAgB,CAAC/Z,QAAQ,CAACwY,CAAD,CAA7B,EAAkC;AAChC,aAAO,CAAP;AACD;;AACD,QAAI,CAACxY,QAAQ,CAAC+Z,CAAD,CAAT,IAAgB,CAAC/Z,QAAQ,CAACwY,CAAD,CAA7B,EAAkC;AAChC,aAAO,CAAP;AACD;;AACD,QAAIuB,CAAC,CAACtG,MAAF,CAASuF,IAAT,KAAkBR,CAAC,CAAC/E,MAAF,CAASuF,IAA/B,EAAqC;AACnC,aAAO,CAAP;AACD;;AACD,SAAKS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASuF,IAAjC,EAAwC,KAAKoC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAArE,EAA4E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAArG,EAAyG;AACvG,UAAInB,CAAC,CAACtG,MAAF,CAASqF,GAAT,CAAaW,CAAb,MAAoBjB,CAAC,CAAC/E,MAAF,CAASqF,GAAT,CAAaW,CAAb,CAAxB,EAAyC;AACvC,eAAO,CAAP;AACD;AACF;;AACD,WAAO,CAAP;AACD,GAjBD,CAz3yBU,CA44yBV;AACA;AACA;;;AACAhgC,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAI0sC,WAAJ,EAAiBE,IAAjB;AACAA,IAAAA,IAAI,GAAGrgB,EAAP;AACAA,IAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB;AACA;AACA;AACA,UAAI9a,GAAG,CAAC8a,EAAD,CAAH,KAAY6M,MAAM,CAACn1B,GAAD,CAAtB,EAA6B;AAC3BouB,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,QAAAA,IAAI;AACJ;AACD;;AACD20C,MAAAA,WAAW,GAAGrqB,qCAAqC,CAACtR,GAAG,CAACwb,EAAD,CAAJ,CAAnD;;AACA,UAAImgB,WAAW,IAAI,IAAnB,EAAyB;AACvB;AACA;AACA;AACA;AACA;AACAra,QAAAA,IAAI,CAACua,IAAD,CAAJ;AACA;AACD,OARD,MAQO,IAAIF,WAAJ,EAAiB;AACtB;AACAra,QAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,QAAAA,IAAI;AACJ;AACD,OALM,MAKA;AACL;AACA;AACAw0B,QAAAA,EAAE,GAAG/a,IAAI,CAAC+a,EAAD,CAAT;AACD;AACF,KAhCoB,CAiCrB;AACA;;;AACA,WAAOqG,YAAY,CAAC,CAAD,CAAnB;AACD,GApCD,CA/4yBU,CAq7yBV;AACA;AACA;AACA;AACA;;;AACA3yB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIysC,WAAJ,EAAiBE,IAAjB,EAAuBgD,iBAAvB,CADuB,CAEvB;;AACAhD,IAAAA,IAAI,GAAGrgB,EAAP;AACA8F,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJs6B,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJkhC,IAAAA,QAAQ;AACR2W,IAAAA,iBAAiB,GAAGhiB,GAAG,EAAvB,CATuB,CAUvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA8e,IAAAA,WAAW,GAAGrqB,qCAAqC,CAACutB,iBAAD,CAAnD;;AACA,QAAIlD,WAAJ,EAAiB;AACf9Z,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,KAHD,MAGO,IAAK8Z,WAAW,IAAI,IAAhB,IAAyB,CAACA,WAA9B,EAA2C;AAChD9Z,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,KAxBsB,CAyBvB;AACA;AACA;;;AACAP,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJq/B,IAAAA,QAAQ;AACR/E,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJq/B,IAAAA,QAAQ;AACR6B,IAAAA,QAAQ;AACR2W,IAAAA,iBAAiB,GAAGhiB,GAAG,EAAvB;AACA8e,IAAAA,WAAW,GAAGrqB,qCAAqC,CAACutB,iBAAD,CAAnD;;AACA,QAAIlD,WAAJ,EAAiB;AACf9Z,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,KAHD,MAGO,IAAK8Z,WAAW,IAAI,IAAhB,IAAyB,CAACA,WAA9B,EAA2C;AAChD9Z,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,KA3CsB,CA4CvB;AACA;AACA;;;AACA,WAAOP,IAAI,CAACua,IAAD,CAAX;AACD,GAhDD,CA17yBU,CA4+yBV;;;AACA1sC,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAImhD,UAAJ,EAAgBzU,IAAhB;AACAA,IAAAA,IAAI,GAAGrgB,EAAP;AACA80B,IAAAA,UAAU,GAAGzuC,QAAQ,EAArB;;AACA,QAAIyuC,UAAU,IAAI,IAAlB,EAAwB;AACtBhvB,MAAAA,IAAI,CAACua,IAAD,CAAJ;AACA;AACD;;AACD,QAAIyU,UAAU,IAAI,CAAlB,EAAqB;AACnB,aAAOzuB,YAAY,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOA,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GAbD;;AAeAzyB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIkhD,UAAJ,EAAgBzU,IAAhB;AACAA,IAAAA,IAAI,GAAGrgB,EAAP;AACA80B,IAAAA,UAAU,GAAGzuC,QAAQ,EAArB;;AACA,QAAIyuC,UAAU,IAAI,IAAlB,EAAwB;AACtBhvB,MAAAA,IAAI,CAACua,IAAD,CAAJ;AACA;AACD;;AACD,QAAIyU,UAAU,GAAG,CAAjB,EAAoB;AAClB,aAAOzuB,YAAY,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOA,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GAbD;;AAeAxyB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIihD,UAAJ,EAAgBzU,IAAhB;AACAA,IAAAA,IAAI,GAAGrgB,EAAP;AACA80B,IAAAA,UAAU,GAAGzuC,QAAQ,EAArB;;AACA,QAAIyuC,UAAU,IAAI,IAAlB,EAAwB;AACtBhvB,MAAAA,IAAI,CAACua,IAAD,CAAJ;AACA;AACD;;AACD,QAAIyU,UAAU,IAAI,CAAlB,EAAqB;AACnB,aAAOzuB,YAAY,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOA,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GAbD;;AAeAvyB,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIghD,UAAJ,EAAgBzU,IAAhB;AACAA,IAAAA,IAAI,GAAGrgB,EAAP;AACA80B,IAAAA,UAAU,GAAGzuC,QAAQ,EAArB;;AACA,QAAIyuC,UAAU,IAAI,IAAlB,EAAwB;AACtBhvB,MAAAA,IAAI,CAACua,IAAD,CAAJ;AACA;AACD;;AACD,QAAIyU,UAAU,GAAG,CAAjB,EAAoB;AAClB,aAAOzuB,YAAY,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO;AACL,aAAOA,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GAbD,CA1hzBU,CAyizBV;;;AACA11B,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAIwvC,WAAJ,EAAiB4U,kBAAjB;AACAA,IAAAA,kBAAkB,GAAG/0B,EAArB;AACAmgB,IAAAA,WAAW,GAAGrqB,qCAAqC,CAACxR,IAAI,CAAC0b,EAAD,CAAL,CAAnD;;AACA,QAAImgB,WAAW,IAAI,IAAnB,EAAyB;AACvB;AACA,aAAOra,IAAI,CAACivB,kBAAD,CAAX;AACD,KAHD,MAGO,IAAI5U,WAAJ,EAAiB;AACtB;AACA,aAAO9Z,YAAY,CAAC,CAAD,CAAnB;AACD,KAHM,MAGA;AACL;AACA,aAAOA,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GAdD;AAgBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKE;;;AACAx6B,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAImpD,aAAJ,EAAmB7U,WAAnB,EAAgC8U,oBAAhC,EAAsDF,kBAAtD;AACAA,IAAAA,kBAAkB,GAAG/0B,EAArB;AACAg1B,IAAAA,aAAa,GAAG9vC,GAAG,CAAC6vC,kBAAD,CAAnB;AACAE,IAAAA,oBAAoB,GAAG,KAAvB;;AACA,WAAOt+B,MAAM,CAACq+B,aAAD,CAAb,EAA8B;AAC5B;AACA7U,MAAAA,WAAW,GAAGrqB,qCAAqC,CAACtR,GAAG,CAACwwC,aAAD,CAAJ,CAAnD;;AACA,UAAI7U,WAAW,IAAI,IAAnB,EAAyB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA8U,QAAAA,oBAAoB,GAAG,IAAvB;AACAD,QAAAA,aAAa,GAAG9vC,GAAG,CAAC8vC,aAAD,CAAnB;AACD,OAZD,MAYO,IAAI7U,WAAJ,EAAiB;AACtB;AACA6U,QAAAA,aAAa,GAAG9vC,GAAG,CAAC8vC,aAAD,CAAnB;AACD,OAHM,MAGA,IAAI,CAAC7U,WAAL,EAAkB;AACvB;AACA9Z,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD;AACF,KA5BmB,CA6BpB;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI4uB,oBAAJ,EAA0B;AACxB,aAAOnvB,IAAI,CAACivB,kBAAD,CAAX;AACD,KAFD,MAEO;AACL,aAAO1uB,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GAxCD,CA1kzBU,CAonzBV;;;AACAr1B,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAImvC,WAAJ,EAAiB+U,YAAjB,EAA+BD,oBAA/B,EAAqDE,iBAArD;AACAA,IAAAA,iBAAiB,GAAGn1B,EAApB;AACAk1B,IAAAA,YAAY,GAAGhwC,GAAG,CAACiwC,iBAAD,CAAlB;AACAF,IAAAA,oBAAoB,GAAG,KAAvB;;AACA,WAAOt+B,MAAM,CAACu+B,YAAD,CAAb,EAA6B;AAC3B;AACA/U,MAAAA,WAAW,GAAGrqB,qCAAqC,CAACtR,GAAG,CAAC0wC,YAAD,CAAJ,CAAnD;;AACA,UAAI/U,WAAW,IAAI,IAAnB,EAAyB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA8U,QAAAA,oBAAoB,GAAG,IAAvB;AACAC,QAAAA,YAAY,GAAGhwC,GAAG,CAACgwC,YAAD,CAAlB;AACD,OAZD,MAYO,IAAI/U,WAAJ,EAAiB;AACtB;AACA9Z,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACA;AACD,OAJM,MAIA,IAAI,CAAC8Z,WAAL,EAAkB;AACvB;AACA+U,QAAAA,YAAY,GAAGhwC,GAAG,CAACgwC,YAAD,CAAlB;AACD;AACF,KA5BkB,CA6BnB;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAID,oBAAJ,EAA0B;AACxB,aAAOnvB,IAAI,CAACqvB,iBAAD,CAAX;AACD,KAFD,MAEO;AACL,aAAO9uB,YAAY,CAAC,CAAD,CAAnB;AACD;AACF,GAxCD,CArnzBU,CA+pzBV;AAEA;AACA;AACA;AACA;;;AACAhgB,EAAAA,QAAQ,GAAG,oBAAW;AACpB,QAAI4uB,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACAnP,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI;AACJq/B,IAAAA,QAAQ;AACR/E,IAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,IAAAA,IAAI;AACJq/B,IAAAA,QAAQ;AACR6B,IAAAA,QAAQ;AACR1M,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CAVoB,CAWpB;;AACA,QAAIrB,EAAE,CAAC4S,CAAH,KAASx6B,GAAT,IAAgB4nB,EAAE,CAAC4S,CAAH,KAASvoC,MAA7B,EAAqC;AACnCy7B,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA+Q,MAAAA,QAAO;;AACPvlC,MAAAA,IAAI;AACJw0B,MAAAA,EAAE,GAAGqB,GAAG,EAAR;AACD,KAjBmB,CAkBpB;;;AACA,QAAIxL,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B;AACA,aAAO,CAAP;AACD;;AACD,YAAQA,EAAE,CAAC4S,CAAX;AACE,WAAKx6B,GAAL;AACE,YAAId,KAAK,CAAC0oB,EAAE,CAACwS,CAAH,CAAKH,CAAN,CAAL,KAAkB,CAAC,CAAvB,EAA0B;AACxB4C,UAAAA,CAAC,GAAG,CAAC,CAAL;AACD,SAFD,MAEO;AACLA,UAAAA,CAAC,GAAG,CAAJ;AACD;;AACD;;AACF,WAAK5qC,MAAL;AACE;AACA,YAAI21B,EAAE,CAAC2S,CAAH,GAAO,GAAX,EAAgB;AACdsC,UAAAA,CAAC,GAAG,CAAC,CAAL;AACD,SAFD,MAEO;AACLA,UAAAA,CAAC,GAAG,CAAJ;AACD;;AACD;;AACF;AACE;AACAA,QAAAA,CAAC,GAAG,IAAJ;AAlBJ;;AAoBA,WAAOA,CAAP;AACD,GA5CD;AA8CA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYE;AAEA;AACA;AACA;AACA;AACA;;;AACA3G,EAAAA,UAAS,GAAG,mBAASsG,CAAT,EAAYoK,gBAAZ,EAA8B;AACxC,QAAIoW,yBAAJ,EAA+BC,kBAA/B,EAAmD5hB,CAAnD,EAAsDyB,EAAtD,EAA0DkC,GAA1D,EAA+DQ,IAA/D,EAAqEzC,EAArE,EAAyE8E,EAAzE,EAA6Eqb,eAA7E,EAA8FlgB,IAA9F,EAAoGmgB,QAApG,EAA8GtB,UAA9G,EAA0HhC,OAA1H,EAAmIuD,YAAnI,EAAiJC,WAAjJ,EAA8JC,wBAA9J,EAAwLC,gBAAxL;AACAF,IAAAA,WAAW,GAAG,CAAd;AACAjtB,IAAAA,IAAI;AACJxI,IAAAA,EAAE,GAAG,IAAL;AACAG,IAAAA,EAAE,GAAGkB,GAAG,EAAR,CALwC,CAK5B;;AACZnB,IAAAA,EAAE,GAAGmB,GAAG,EAAR,CANwC,CAM5B;;AACZ,QAAIv4B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,wCAAwCvU,EAApD;AACD;;AACDuI,IAAAA,gBAAgB;AAChBuB,IAAAA,WAAW,CAAC6C,MAAM,CAAC11B,KAAD,CAAP,EAAgBgpB,EAAhB,CAAX,CAXwC,CAYxC;;AACAs1B,IAAAA,WAAW,GAAGpnB,GAAd;AACAhI,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAP,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA4F,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;;AACAiB,IAAAA,SAAQ;;AACR0E,IAAAA,IAAI,CAAC3F,EAAD,CAAJ;AACAi1B,IAAAA,yBAAyB,GAAG/mB,GAAG,GAAG,CAAlC;;AACA1kB,IAAAA,OAAM,CAACq1B,gBAAD,CAAN;;AACAsW,IAAAA,eAAe,GAAGjnB,GAAG,GAAG+mB,yBAAxB;;AACA,QAAItsD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,OAAO6gB,eAAP,GAAyB,8BAArC;;AACA,WAAK7hB,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGkgB,eAAxB,EAA0C,KAAKlgB,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGX,QAAAA,OAAO,CAACE,GAAR,CAAY,6BAA6BhB,CAA7B,GAAiC,IAAjC,GAAwCzH,KAAK,CAACqC,GAAG,GAAG,CAAN,GAAUoF,CAAX,CAAzD;AACD;AACF;;AACDiiB,IAAAA,wBAAwB,GAAG,KAA3B;;AACA,QAAI1W,gBAAJ,EAAsB;AACpB,UAAI,CAAC1pB,aAAa,CAAC4K,EAAD,CAAlB,EAAwB;AACtBs1B,QAAAA,YAAY,GAAG5gB,CAAf;;AACA,YAAI9rC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyB+gB,YAArC;AACD;;AACD,YAAI1sD,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,0BAA0B+gB,YAAtC;AACD;;AACD1vB,QAAAA,IAAI,CAAC0vB,YAAD,CAAJ,CARsB,CAStB;AACA;AACA;AACA;;AACA1vB,QAAAA,IAAI,CAAC+G,MAAM,CAACpxB,mBAAD,CAAP,CAAJ;AACAqqB,QAAAA,IAAI,CAAC+G,MAAM,CAAC51B,KAAD,CAAP,CAAJ;;AACAw1B,QAAAA,MAAK,GAfiB,CAgBtB;;;AACA3G,QAAAA,IAAI,CAAC+G,MAAM,CAAClxB,mBAAD,CAAP,CAAJ;AACAmqB,QAAAA,IAAI,CAAC+G,MAAM,CAAC31B,KAAD,CAAP,CAAJ;;AACAu1B,QAAAA,MAAK,GAnBiB,CAoBtB;;;AACA3G,QAAAA,IAAI,CAAC+G,MAAM,CAACvwB,mBAAD,CAAP,CAAJ;AACAwpB,QAAAA,IAAI,CAAC+G,MAAM,CAAC11B,KAAD,CAAP,CAAJ;;AACAs1B,QAAAA,MAAK;;AACLzM,QAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAjB,QAAAA,EAAE,GAAG5b,GAAG,CAACwb,EAAD,CAAR;;AACA,YAAIl3B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,0BAA0BrU,EAAtC;AACD;;AACDC,QAAAA,EAAE,GAAG/b,IAAI,CAAC0b,EAAD,CAAT;AACAM,QAAAA,EAAE,GAAGrb,IAAI,CAAC+a,EAAD,CAAT;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,YAAIjQ,UAAU,CAAC0lC,WAAD,EAAczW,gBAAd,CAAd,EAA+C;AAC7C;AACA;AACA0W,UAAAA,wBAAwB,GAAG,IAA3B;AACD,SAJD,MAIO;AACL;AACA;AACA;AACA,cAAI5sD,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBvU,EAAnC;AACD;;AACDy1B,UAAAA,gBAAgB,GAAG,EAAnB;;AACA,cAAI7sD,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,cAAcjwB,GAAG,CAAC0b,EAAD,CAA7B;AACD;;AACDq1B,UAAAA,QAAQ,GAAGr1B,EAAX;;AACA,cAAIvJ,MAAM,CAAC4+B,QAAD,CAAV,EAAsB;AACpBI,YAAAA,gBAAgB,CAAC7vB,IAAjB,CAAsBthB,GAAG,CAAC0b,EAAD,CAAzB;AACAq1B,YAAAA,QAAQ,GAAGrwC,GAAG,CAACgb,EAAD,CAAd;AACD;;AACD,iBAAOvJ,MAAM,CAAC4+B,QAAD,CAAb,EAAyB;AACvBtB,YAAAA,UAAU,GAAGzvC,GAAG,CAAC+wC,QAAD,CAAhB;AACAA,YAAAA,QAAQ,GAAGrwC,GAAG,CAACqwC,QAAD,CAAd;;AACA,gBAAIzsD,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,qCAAqCpG,GAAjD;AACD;;AACDvI,YAAAA,IAAI,CAACmuB,UAAD,CAAJ;AACA1tB,YAAAA,WAAW,CAAC7uB,GAAD,CAAX;;AACA,gBAAI5O,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,cAAcwf,UAA1B;AACD,aAVsB,CAWvB;AACA;;;AACA,gBAAInrD,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,0CAA0Cwf,UAAtD;AACD;;AACDhC,YAAAA,OAAO,GAAG3jB,UAAS,CAACsG,CAAD,EAAIoK,gBAAJ,CAAnB;AACA0W,YAAAA,wBAAwB,GAAGA,wBAAwB,IAAIzD,OAAvD;AACA0D,YAAAA,gBAAgB,CAAC7vB,IAAjB,CAAsBzE,GAAG,EAAzB;;AACA,gBAAIv4B,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,mCAAmCwf,UAAnC,GAAgD,mBAAhD,GAAsEhC,OAAtE,GAAgF,mBAAhF,GAAsG0D,gBAAgB,CAACA,gBAAgB,CAAC76B,MAAjB,GAA0B,CAA3B,CAAlI;AACD;AACF,WAtCI,CAuCL;AACA;;;AACA,cAAI66B,gBAAgB,CAAC76B,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,iBAAKqa,EAAE,GAAG,CAAL,EAAQiC,GAAG,GAAGue,gBAAgB,CAAC76B,MAApC,EAA4Cqa,EAAE,GAAGiC,GAAjD,EAAsDjC,EAAE,EAAxD,EAA4D;AAC1D1B,cAAAA,CAAC,GAAGkiB,gBAAgB,CAACxgB,EAAD,CAApB;AACArP,cAAAA,IAAI,CAAC2N,CAAD,CAAJ;AACD;;AACDxY,YAAAA,IAAI,CAAC06B,gBAAgB,CAAC76B,MAAlB,CAAJ;AACAuF,YAAAA,EAAE,GAAGgB,GAAG,EAAR,CANiC,CAMrB;AACb;AACF;AACF;AACF,KA/FD,MA+FO;AACL,WAAK4Y,EAAE,GAAG,CAAL,EAAQrC,IAAI,GAAGhD,CAAC,CAAC9Z,MAAtB,EAA8Bmf,EAAE,GAAGrC,IAAnC,EAAyCqC,EAAE,EAA3C,EAA+C;AAC7Cob,QAAAA,kBAAkB,GAAGzgB,CAAC,CAACqF,EAAD,CAAtB;;AACA,YAAInxC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,0BAA0B4gB,kBAAtC;;AACA,cAAI,CAACA,kBAAkB,GAAG,EAAtB,EAA0BvX,OAA1B,CAAkC,wCAAlC,MAAgF,CAAC,CAArF,EAAwF;AACtF;AACD;AACF;;AACD,YAAIuX,kBAAJ,EAAwB;AACtBnsB,UAAAA,SAAS,CAACmsB,kBAAD,CAAT;AACAr1B,UAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAjB,UAAAA,EAAE,GAAG9b,IAAI,CAAC0b,EAAD,CAAT;AACAK,UAAAA,EAAE,GAAGhc,KAAK,CAAC2b,EAAD,CAAV;AACAM,UAAAA,EAAE,GAAGtb,KAAK,CAACgb,EAAD,CAAV;AACA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AACU,cAAIjQ,UAAU,CAAC0lC,WAAD,EAAczW,gBAAd,CAAd,EAA+C;AAC7C;AACA;AACA0W,YAAAA,wBAAwB,GAAG,IAA3B;AACA;AACD;AACF;AACF;AACF;;AACDj5B,IAAAA,OAAO,CAACg5B,WAAD,CAAP;;AACA,QAAIC,wBAAJ,EAA8B;AAC5B;AACA;AACA5vB,MAAAA,IAAI,CAACzF,EAAD,CAAJ;AACA70B,MAAAA,IAAI;AACJw0B,MAAAA,EAAE,GAAGqB,GAAG,EAAR,CAL4B,CAM5B;;AACAq0B,MAAAA,wBAAwB,GAAG,IAA3B;AACD,KARD,MAQO;AACL;AACA,UAAI1W,gBAAJ,EAAsB;AACpB;AACAhf,QAAAA,EAAE,GAAGE,EAAL;AACD,OAHD,MAGO;AACLF,QAAAA,EAAE,GAAG6M,MAAM,CAACn1B,GAAD,CAAX;AACD;AACF;;AACDswB,IAAAA,mBAAmB;AACnBlC,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,IAAAA,OAAO;AACP,WAAO2tB,wBAAP;AACD,GAlLD;;AAoLAjtB,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B3C,IAAAA,IAAI,CAACjT,WAAW,CAACga,MAAM,CAAC51B,KAAD,CAAP,CAAZ,CAAJ;AACA6uB,IAAAA,IAAI,CAACjT,WAAW,CAACga,MAAM,CAAC31B,KAAD,CAAP,CAAZ,CAAJ;AACA,WAAO4uB,IAAI,CAACjT,WAAW,CAACga,MAAM,CAAC11B,KAAD,CAAP,CAAZ,CAAX;AACD,GAJD;;AAMA6wB,EAAAA,mBAAmB,GAAG,+BAAW;AAC/BgC,IAAAA,WAAW,CAAC6C,MAAM,CAAC11B,KAAD,CAAP,EAAgBkqB,GAAG,EAAnB,CAAX;AACA2I,IAAAA,WAAW,CAAC6C,MAAM,CAAC31B,KAAD,CAAP,EAAgBmqB,GAAG,EAAnB,CAAX;AACA,WAAO2I,WAAW,CAAC6C,MAAM,CAAC51B,KAAD,CAAP,EAAgBoqB,GAAG,EAAnB,CAAlB;AACD,GAJD,CAh7zBU,CAs7zBV;;;AACAtR,EAAAA,UAAU,GAAG,oBAASmjB,CAAT,EAAY8L,gBAAZ,EAA8B;AACzC,QAAI4W,KAAJ,EAAWC,KAAX,EAAkB3gB,EAAlB,EAAsBC,EAAtB,EAA0B6c,iBAA1B,EAA6C5c,IAA7C,EAAmDC,IAAnD,EAAyDC,IAAzD,EAA+DC,IAA/D;AACAqgB,IAAAA,KAAK,GAAG,CAAR;AACAC,IAAAA,KAAK,GAAG,CAAR;;AACA,SAAKD,KAAK,GAAG1gB,EAAE,GAAGE,IAAI,GAAGlC,CAApB,EAAuBmC,IAAI,GAAGhH,GAAnC,EAAyC+G,IAAI,IAAIC,IAAR,GAAeH,EAAE,GAAGG,IAApB,GAA2BH,EAAE,GAAGG,IAAzE,EAAgFugB,KAAK,GAAGxgB,IAAI,IAAIC,IAAR,GAAe,EAAEH,EAAjB,GAAsB,EAAEA,EAAhH,EAAoH;AAClHlL,MAAAA,WAAW,CAAC6C,MAAM,CAAC51B,KAAD,CAAP,EAAgB+0B,KAAK,CAAC4pB,KAAD,CAArB,CAAX;;AACA,UAAI9sD,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwB5hB,WAAW,CAACga,MAAM,CAAC51B,KAAD,CAAP,CAA/C;AACD;;AACD,WAAK4+C,KAAK,GAAG1gB,EAAE,GAAGG,IAAI,GAAGpC,CAApB,EAAuBqC,IAAI,GAAGlH,GAAnC,EAAyCiH,IAAI,IAAIC,IAAR,GAAeJ,EAAE,GAAGI,IAApB,GAA2BJ,EAAE,GAAGI,IAAzE,EAAgFsgB,KAAK,GAAGvgB,IAAI,IAAIC,IAAR,GAAe,EAAEJ,EAAjB,GAAsB,EAAEA,EAAhH,EAAoH;AAClHnL,QAAAA,WAAW,CAAC6C,MAAM,CAAC31B,KAAD,CAAP,EAAgB80B,KAAK,CAAC6pB,KAAD,CAArB,CAAX;;AACA,YAAI/sD,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,wBAAwB5hB,WAAW,CAACga,MAAM,CAAC31B,KAAD,CAAP,CAA/C;AACD,SAJiH,CAKlH;;;AACA8oB,QAAAA,EAAE,GAAGM,EAAL;;AACA,eAAO3J,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,UAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,UAAAA,IAAI;AACJy0B,UAAAA,EAAE,GAAGoB,GAAG,EAAR;;AACA,cAAIxL,kBAAkB,CAACoK,EAAD,CAAtB,EAA4B;AAC1B;AACD;;AACDD,UAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,YAAIrJ,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACd;AACA;AACA;AACD;;AACD8F,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACA,YAAIp3B,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,4CAA4CrU,EAA5C,GAAiD,oBAAjD,GAAwEvN,WAAW,CAACga,MAAM,CAAC51B,KAAD,CAAP,CAAnF,GAAqG,wBAArG,GAAgI4b,WAAW,CAACga,MAAM,CAAC31B,KAAD,CAAP,CAA3I,GAA6J,wBAA7J,GAAwL2b,WAAW,CAACga,MAAM,CAAC11B,KAAD,CAAP,CAA/M;AACD;;AACD2uB,QAAAA,IAAI,CAAC1F,EAAD,CAAJ;;AACA,YAAI4e,gBAAJ,EAAsB;AACpBgT,UAAAA,iBAAiB,GAAG7iC,SAApB;AACAA,UAAAA,SAAS,GAAG,KAAZ;AACD;;AACD3jB,QAAAA,IAAI;;AACJ,YAAIwzC,gBAAJ,EAAsB;AACpB7vB,UAAAA,SAAS,GAAG6iC,iBAAZ;AACD;;AACD,YAAIlpD,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAtB,GAAkC,OAAlC,GAA4CrC,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA7D;AACD;;AACD3B,QAAAA,QAAQ;AACR1M,QAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,YAAIxL,kBAAkB,CAACmK,EAAD,CAAtB,EAA4B;AAC1B,cAAIl3B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsB5hB,WAAW,CAACga,MAAM,CAAC51B,KAAD,CAAP,CAA7C;AACAs9B,YAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsB5hB,WAAW,CAACga,MAAM,CAAC31B,KAAD,CAAP,CAA7C;AACAq9B,YAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsB5hB,WAAW,CAACga,MAAM,CAAC11B,KAAD,CAAP,CAA7C;AACAo9B,YAAAA,OAAO,CAACE,GAAR,CAAY,eAAevU,EAAf,GAAoB,OAApB,GAA8BE,EAA1C;AACD;;AACD,iBAAO,CAAP,CAP0B,CAOhB;AACX;AACF;AACF;;AACD,WAAO,CAAP,CA3DyC,CA2D/B;AACX,GA5DD,CAv7zBU,CAq/zBV;;;AACArsB,EAAAA,cAAc,GAAG,0BAAW;AAC1B+xB,IAAAA,IAAI,CAACxhB,IAAI,CAAC0b,EAAD,CAAL,CAAJ;AACAx0B,IAAAA,IAAI,GAFsB,CAG1B;AACA;;AACA,QAAIyZ,IAAI,CAAC+a,EAAD,CAAJ,KAAa6M,MAAM,CAACn1B,GAAD,CAAvB,EAA8B;AAC5B2uB,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAA,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,KAHD,MAGO;AACLP,MAAAA,IAAI,CAACzhB,KAAK,CAAC2b,EAAD,CAAN,CAAJ;AACAx0B,MAAAA,IAAI;AACJs6B,MAAAA,IAAI,CAAC1hB,MAAM,CAAC4b,EAAD,CAAP,CAAJ;AACAx0B,MAAAA,IAAI;AACL;;AACD,WAAO+iC,UAAS,EAAhB;AACD,GAfD;;AAiBAA,EAAAA,UAAS,GAAG,qBAAW;AACrB,QAAI8D,CAAJ,EAAO+K,WAAP,EAAoBqB,EAApB,EAAwBC,EAAxB,EAA4BpM,CAA5B,EAA+ByS,SAA/B,EAA0CtR,CAA1C,EAA6CqiB,kBAA7C,EAAiEC,kBAAjE,EAAqFriB,CAArF,EAAwFd,CAAxF,EAA2F+L,CAA3F,EAA8FzJ,EAA9F,EAAkG0J,CAAlG,EAAqGzJ,EAArG,EAAyG8E,EAAzG,EAA6GjH,IAA7G,EAAmHC,KAAnH,EAA0HkH,EAA1H,EAA8HG,EAA9H,EAAkIE,EAAlI,EAAsIpF,IAAtI,EAA4IC,IAA5I,EAAkJC,IAAlJ,EAAwJC,IAAxJ,EAA8JC,IAA9J,EAAoKC,IAApK,EAA0KC,IAA1K,EAAgLmF,EAAhL,EAAoL5F,CAApL;AACAxB,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAd,IAAAA,CAAC,GAAG,CAAJ;AACA+L,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACA5L,IAAAA,IAAI,GAAG,CAAP;AACAC,IAAAA,KAAK,GAAG,CAAR;AACAgC,IAAAA,CAAC,GAAG,CAAJ;AACAwJ,IAAAA,EAAE,GAAG,EAAL;AACAC,IAAAA,EAAE,GAAG,EAAL;;AACA,SAAKjL,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAG1+B,MAAxB,EAAiC,KAAK0+B,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA9D,EAAqE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA9F,EAAkG;AAChGuJ,MAAAA,EAAE,CAAChL,CAAD,CAAF,GAAQ,CAAR;AACAiL,MAAAA,EAAE,CAACjL,CAAD,CAAF,GAAQ,CAAR;AACD,KAfoB,CAgBrB;;;AACAjL,IAAAA,IAAI,GAjBiB,CAkBrB;;AACAtI,IAAAA,EAAE,GAAGmB,GAAG,EAAR,CAnBqB,CAmBT;;AACZpB,IAAAA,EAAE,GAAGoB,GAAG,EAAR,CApBqB,CAoBT;;AACZrB,IAAAA,EAAE,GAAGqB,GAAG,EAAR,CArBqB,CAqBT;AAEZ;AACA;;AACA,QAAI/L,aAAa,CAAC0K,EAAD,CAAjB,EAAuB;AACrB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD,KA7BoB,CA8BrB;;;AACA,QAAKnP,SAAS,CAACqH,EAAD,CAAT,IAAiBpH,SAAS,CAACqH,EAAD,CAA3B,IAAqCtH,SAAS,CAACsH,EAAD,CAAT,IAAiBrH,SAAS,CAACoH,EAAD,CAAnE,EAA0E;AACxE,UAAI7I,gBAAgB,CAAC4I,EAAD,CAApB,EAA0B;AACxB8F,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,QAAAA,OAAO;AACP;AACD;AACF,KArCoB,CAsCrB;AACA;AACA;;;AACA,QAAI9N,WAAW,CAAC+F,EAAD,CAAf,EAAqB;AACnB81B,MAAAA,kBAAkB,GAAGtxC,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAxB;AACA+1B,MAAAA,kBAAkB,GAAGvxC,GAAG,CAACU,GAAG,CAACA,GAAG,CAACA,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ,CAAxB;;AACA,UAAK7R,KAAK,CAAC2nC,kBAAD,EAAqB51B,EAArB,CAAL,IAAiC/R,KAAK,CAAC4nC,kBAAD,EAAqB91B,EAArB,CAAvC,IAAqE9R,KAAK,CAAC4nC,kBAAD,EAAqB71B,EAArB,CAAL,IAAiC/R,KAAK,CAAC2nC,kBAAD,EAAqB71B,EAArB,CAA3G,IAA0I9R,KAAK,CAAC2nC,kBAAD,EAAqBjpB,MAAM,CAACn1B,GAAD,CAA3B,CAAL,IAA0CyW,KAAK,CAAC4nC,kBAAD,EAAqBlpB,MAAM,CAACn1B,GAAD,CAA3B,CAAhD,KAAwFkhB,SAAS,CAACsH,EAAD,CAAT,IAAiBrH,SAAS,CAACoH,EAAD,CAA3B,IAAqCrH,SAAS,CAACqH,EAAD,CAAT,IAAiBpH,SAAS,CAACqH,EAAD,CAAtJ,CAA7I,EAA4S;AAC1S4F,QAAAA,IAAI,CAACthB,GAAG,CAACU,GAAG,CAAC8a,EAAD,CAAJ,CAAJ,CAAJ;AACA+H,QAAAA,OAAO;AACP;AACD;AACF,KAjDoB,CAkDrB;AACA;;;AACA,QAAI5Y,SAAS,IAAIkH,KAAK,CAAC2J,EAAD,CAAtB,EAA4B;AAC1BA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,MAAAA,IAAI,CAACiM,IAAD,CAAJ;;AACA,aAAOpb,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ,CADiB,CAEjB;AACA;;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACAqO,QAAAA,UAAS;;AACT5uB,QAAAA,GAAG;AACHqgB,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD+H,MAAAA,OAAO;AACP;AACD,KAnEoB,CAoErB;AACA;;;AACA,QAAI5Y,SAAS,IAAI+I,UAAU,CAAC8H,EAAD,CAA3B,EAAiC;AAC/BA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACA8F,MAAAA,IAAI,CAACtG,GAAD,CAAJ;;AACA,aAAO7I,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ,CADiB,CAEjB;AACA;;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,QAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACAqO,QAAAA,UAAS;;AACTlR,QAAAA,QAAQ;AACR2C,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD+H,MAAAA,OAAO;AACP;AACD,KArFoB,CAsFrB;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI5Y,SAAS,IAAIqI,YAAY,CAACwI,EAAD,CAA7B,EAAmC;AACjCA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAod,MAAAA,WAAW,GAAG,EAAd;;AACA,aAAOzmB,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjBod,QAAAA,WAAW,CAACtX,IAAZ,CAAiB,CAACthB,GAAG,CAACwb,EAAD,CAAJ,EAAUC,EAAV,EAAcC,EAAd,CAAjB;AACAF,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD,WAAK+kB,SAAS,GAAG5P,EAAE,GAAGE,IAAI,GAAG+H,WAAW,CAACtiB,MAAZ,GAAqB,CAAlD,EAAsDua,IAAI,IAAI,CAAR,GAAYF,EAAE,IAAI,CAAlB,GAAsBA,EAAE,IAAI,CAAlF,EAAsF4P,SAAS,GAAG1P,IAAI,IAAI,CAAR,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvH,EAA2H;AACzHrP,QAAAA,IAAI,CAACsX,WAAW,CAAC2H,SAAD,CAAX,CAAuB,CAAvB,CAAD,CAAJ;AACAjf,QAAAA,IAAI,CAACsX,WAAW,CAAC2H,SAAD,CAAX,CAAuB,CAAvB,CAAD,CAAJ;AACAjf,QAAAA,IAAI,CAACsX,WAAW,CAAC2H,SAAD,CAAX,CAAuB,CAAvB,CAAD,CAAJ;;AACAxW,QAAAA,UAAS;;AACT,YAAIwW,SAAS,KAAK3H,WAAW,CAACtiB,MAAZ,GAAqB,CAAvC,EAA0C;AACxCpG,UAAAA,MAAK;AACN;AACF;;AACDqT,MAAAA,OAAO;AACP;AACD;;AACD,QAAI,CAAC/N,QAAQ,CAACgG,EAAD,CAAb,EAAmB;AACjB,UAAI,CAACnK,kBAAkB,CAACmK,EAAD,CAAvB,EAA6B;AAC3B;AACAuG,QAAAA,WAAW,CAACjpB,SAAD,CAAX;AACAwoB,QAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,YAAI,CAAC,CAACpH,SAAS,CAACqH,EAAD,CAAV,IAAkB,CAACpH,SAAS,CAACqH,EAAD,CAA7B,MAAuC,CAACtH,SAAS,CAACsH,EAAD,CAAV,IAAkB,CAACrH,SAAS,CAACoH,EAAD,CAAnE,CAAJ,EAA8E;AAC5E6F,UAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA6F,UAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACAjF,UAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,SAJD,MAIO;AACLA,UAAAA,IAAI,CAAC,CAAD,CAAJ;AACD;;AACD8M,QAAAA,OAAO;AACP;AACD;;AACDjC,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACAhK,MAAAA,OAAO;AACP;AACD;;AACDiL,IAAAA,IAAI,GAAGhT,EAAE,CAACyN,MAAH,CAAUuF,IAAjB;AACAC,IAAAA,KAAK,GAAGjT,EAAE,CAACyN,MAAH,CAAUwF,KAAlB,CAnIqB,CAoIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAID,IAAI,KAAK,CAAb,EAAgB;AACdlN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP;AACD;;AACDjC,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA0e,IAAAA,CAAC,GAAGnd,WAAW,EAAf;AACAsE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;AACA0e,IAAAA,CAAC,GAAGpd,WAAW,EAAf;;AACA,QAAImd,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG3L,IAAb,IAAqB4L,CAAC,GAAG,CAAzB,IAA8BA,CAAC,GAAG5L,IAAtC,EAA4C;AAC1C3G,MAAAA,IAAI,CAAC,+BAAD,CAAJ;AACD;;AACDsS,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACD3e,IAAAA,EAAE,GAAG7f,YAAY,CAAC6yB,KAAD,CAAjB;AACAhT,IAAAA,EAAE,CAACwN,MAAH,CAAUuF,IAAV,GAAiBA,IAAjB;;AACA,SAAKS,CAAC,GAAGwG,EAAE,GAAG,CAAT,EAAY3E,IAAI,GAAGtC,IAAxB,EAA+B,KAAKsC,IAAL,GAAY2E,EAAE,GAAG3E,IAAjB,GAAwB2E,EAAE,GAAG3E,IAA5D,EAAmE7B,CAAC,GAAG,KAAK6B,IAAL,GAAY,EAAE2E,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9Fha,MAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAnB;AACD;;AACDxT,IAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc6L,CAAd,IAAmB3e,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc8L,CAAd,CAAnB;AACA3e,IAAAA,EAAE,CAACwN,MAAH,CAAUqF,GAAV,CAAc8L,CAAd,IAAmB5e,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAc6L,CAAd,CAAnB;AACAtM,IAAAA,CAAC,GAAGrS,EAAE,CAACyN,MAAH,CAAU9gB,IAAd;AACA2lB,IAAAA,CAAC,GAAGrS,EAAE,CAACwN,MAAH,CAAU9gB,IAAd,CAlKqB,CAmKzB;;AACI,SAAK8mB,CAAC,GAAG0G,EAAE,GAAG,CAAT,EAAY5E,IAAI,GAAGvC,IAAxB,EAA+B,KAAKuC,IAAL,GAAY4E,EAAE,GAAG5E,IAAjB,GAAwB4E,EAAE,GAAG5E,IAA5D,EAAmE9B,CAAC,GAAG,KAAK8B,IAAL,GAAY,EAAE4E,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9FsE,MAAAA,EAAE,CAAChL,CAAD,CAAF,GAAQ,CAAR;AACAiL,MAAAA,EAAE,CAACjL,CAAD,CAAF,GAAQzT,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,CAAR;AACD,KAvKoB,CAwKzB;;;AACI,SAAKA,CAAC,GAAG6G,EAAE,GAAG,CAAT,EAAY9E,IAAI,GAAGvC,KAAxB,EAAgC,KAAKuC,IAAL,GAAY8E,EAAE,GAAG9E,IAAjB,GAAwB8E,EAAE,GAAG9E,IAA7D,EAAoE/B,CAAC,GAAG,KAAK+B,IAAL,GAAY,EAAE8E,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/F;AACArF,MAAAA,CAAC,GAAGwJ,EAAE,CAACE,CAAD,CAAN;AACAF,MAAAA,EAAE,CAACE,CAAD,CAAF,GAAQF,EAAE,CAACG,CAAD,CAAV;AACAH,MAAAA,EAAE,CAACG,CAAD,CAAF,GAAQ3J,CAAR;AACAA,MAAAA,CAAC,GAAGyJ,EAAE,CAACC,CAAD,CAAN;AACAD,MAAAA,EAAE,CAACC,CAAD,CAAF,GAAQD,EAAE,CAACE,CAAD,CAAV;AACAF,MAAAA,EAAE,CAACE,CAAD,CAAF,GAAQ3J,CAAR;AACArC,MAAAA,CAAC,GAAG,CAAJ;;AACA,WAAKc,CAAC,GAAG8G,EAAE,GAAG,CAAT,EAAY/E,IAAI,GAAGzC,IAAxB,EAA+B,KAAKyC,IAAL,GAAY+E,EAAE,GAAG/E,IAAjB,GAAwB+E,EAAE,GAAG/E,IAA5D,EAAmE/B,CAAC,GAAG,KAAK+B,IAAL,GAAY,EAAE+E,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9F5H,QAAAA,CAAC,GAAIA,CAAC,GAAG8L,EAAE,CAAChL,CAAD,CAAP,GAAc+K,EAAE,CAAC/K,CAAD,CAApB;AACD,OAX8F,CAY/F;;;AACAuB,MAAAA,CAAC,GAAGwJ,EAAE,CAACE,CAAD,CAAN;AACAF,MAAAA,EAAE,CAACE,CAAD,CAAF,GAAQF,EAAE,CAACG,CAAD,CAAV;AACAH,MAAAA,EAAE,CAACG,CAAD,CAAF,GAAQ3J,CAAR;AACAA,MAAAA,CAAC,GAAGyJ,EAAE,CAACC,CAAD,CAAN;AACAD,MAAAA,EAAE,CAACC,CAAD,CAAF,GAAQD,EAAE,CAACE,CAAD,CAAV;AACAF,MAAAA,EAAE,CAACE,CAAD,CAAF,GAAQ3J,CAAR;AACA3C,MAAAA,CAAC,CAACM,CAAD,CAAD,GAAOP,CAAC,CAACoB,CAAD,CAAR,CAnB+F,CAoBrG;AAEM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AACM,WAAKC,CAAC,GAAGmH,EAAE,GAAGnF,IAAI,GAAG1C,IAAI,GAAG,CAA5B,EAAgC0C,IAAI,IAAI,CAAR,GAAYmF,EAAE,IAAI,CAAlB,GAAsBA,EAAE,IAAI,CAA5D,EAAgEnH,CAAC,GAAGgC,IAAI,IAAI,CAAR,GAAY,EAAEmF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3F,YAAI,EAAE4D,EAAE,CAAC/K,CAAD,CAAJ,GAAUgL,EAAE,CAAChL,CAAD,CAAhB,EAAqB;AACnB;AACD;;AACD+K,QAAAA,EAAE,CAAC/K,CAAD,CAAF,GAAQ,CAAR;AACD;AACF;;AACD5N,IAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACA,WAAO8H,OAAO,EAAd;AACD,GAhND,CAvg0BU,CAyt0BV;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKE9zB,EAAAA,kBAAkB,GAAG,8BAAW;AAC9B,QAAI+hD,sBAAJ,EAA4B9iB,CAA5B,CAD8B,CAE9B;;AACA,QAAIpqC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,oCAAoCjwB,GAAG,CAACwb,EAAD,CAAnD;AACD;;AACD,QAAIxb,GAAG,CAACwb,EAAD,CAAH,KAAY6M,MAAM,CAAChxB,QAAD,CAAlB,IAAgCgX,WAAW,CAACga,MAAM,CAAChxB,QAAD,CAAP,CAAX,KAAkCgxB,MAAM,CAAChxB,QAAD,CAA5E,EAAwF;AACtF/N,MAAAA,eAAe;AACf;AACD,KAT6B,CAU9B;AACA;AACA;AACA;AACA;;;AACAg4B,IAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,IAAAA,IAAI,GAhB0B,CAiB9B;AACA;AACA;AACA;AACA;;AACAwqD,IAAAA,sBAAsB,GAAG30B,GAAG,EAA5B;;AACA,QAAI/L,aAAa,CAAC0gC,sBAAD,CAAjB,EAA2C;AACzC3pB,MAAAA,IAAI,CAAC,2GAAD,CAAJ;AACD,KAFD,MAEO,IAAIrS,QAAQ,CAACg8B,sBAAD,CAAZ,EAAsC;AAC3C3pB,MAAAA,IAAI,CAAC,yFAAD,CAAJ;AACD,KAFM,MAEA,IAAIxS,KAAK,CAACm8B,sBAAD,CAAT,EAAmC;AACxC3pB,MAAAA,IAAI,CAAC,0CAAD,CAAJ;AACD;;AACDnM,IAAAA,EAAE,GAAG1b,GAAG,CAACU,GAAG,CAAC8wC,sBAAD,CAAJ,CAAR,CA9B8B,CA8BS;AACvC;AACA;;AACA71B,IAAAA,EAAE,GAAG3b,GAAG,CAACU,GAAG,CAACA,GAAG,CAAC8wC,sBAAD,CAAJ,CAAJ,CAAR;AACA51B,IAAAA,EAAE,GAAGlb,GAAG,CAAC8a,EAAD,CAAR,CAlC8B,CAmC9B;;AACA,QAAKxb,GAAG,CAACwxC,sBAAD,CAAH,KAAgCnpB,MAAM,CAACj4B,QAAD,CAAvC,IAAuDohD,sBAAsB,KAAKxxC,GAAG,CAACwb,EAAD,CAAzF,EAAgG;AAAE;AAChG;AACAkT,MAAAA,CAAC,GAAG7E,GAAJ;AACAvI,MAAAA,IAAI,CAACkwB,sBAAD,CAAJ;AACAh2B,MAAAA,EAAE,GAAGI,EAAL;;AACA,aAAOzJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACAx0B,QAAAA,IAAI;AACJw0B,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACA;AACD,KAhD6B,CAiD9B;;;AACAlT,IAAAA,EAAE,GAAGG,EAAL;AACAF,IAAAA,EAAE,GAAGG,EAAL;AACA8S,IAAAA,CAAC,GAAG7E,GAAJ;;AACA,WAAO1X,MAAM,CAACqJ,EAAD,CAAN,IAAcrJ,MAAM,CAACsJ,EAAD,CAA3B,EAAiC;AAC/B6F,MAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,MAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ,CAF+B,CAG/B;AACA;AACA;AACA;;AACAD,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACAC,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACDhF,IAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACA7S,IAAAA,EAAE,GAAGgB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACA,QAAIvJ,MAAM,CAAC0J,EAAD,CAAV,EAAgB;AAAE;AAChByF,MAAAA,IAAI,CAACzF,EAAD,CAAJ;;AACA4H,MAAAA,aAAY;AACb,KArE6B,CAsE9B;;;AACA,WAAOz8B,IAAI,EAAX;AACD,GAxED,CArv0BU,CA+z0BV;;;AACAy8B,EAAAA,aAAY,GAAG,wBAAW;AACxB,QAAIiL,CAAJ,EAAOE,CAAP;AACAA,IAAAA,CAAC,GAAG,CAAJ;AACA5K,IAAAA,IAAI,GAHoB,CAIxB;AACA;AACA;;AACAvI,IAAAA,EAAE,GAAGoB,GAAG,EAAR;AACArB,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,QAAIrH,QAAQ,CAACgG,EAAD,CAAZ,EAAkB;AAChBoT,MAAAA,CAAC,GAAGlL,mBAAmB,EAAvB;AACAH,MAAAA,OAAO;AACP,aAAOqL,CAAP;AACD;;AACD,QAAIzc,MAAM,CAACqJ,EAAD,CAAV,EAAgB;AACdkT,MAAAA,CAAC,GAAG7E,GAAJ;;AACA,UAAI7pB,GAAG,CAACwb,EAAD,CAAH,KAAYxb,GAAG,CAACyb,EAAD,CAAnB,EAAyB;AACvB;AACA;AACA;AACAsG,QAAAA,WAAW,CAACp7B,IAAD,CAAX;AACA26B,QAAAA,IAAI,CAACthB,GAAG,CAACU,GAAG,CAAC+a,EAAD,CAAJ,CAAJ,CAAJ;AACAhF,QAAAA,IAAI,CAAC,CAAD,CAAJ;AACD,OAPD,MAOO;AACL;AACA;AACA6K,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACD,OAba,CAcd;AACA;;;AACAA,MAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;;AACA,aAAOrJ,MAAM,CAACqJ,EAAD,CAAb,EAAmB;AACjB8F,QAAAA,IAAI,CAACthB,GAAG,CAACwb,EAAD,CAAJ,CAAJ;AACA8F,QAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,QAAAA,CAAC,IAAInL,aAAY,EAAjB;AACAjI,QAAAA,EAAE,GAAG9a,GAAG,CAAC8a,EAAD,CAAR;AACD;;AACD/E,MAAAA,IAAI,CAACoT,GAAG,GAAG6E,CAAP,CAAJ;AACAnL,MAAAA,OAAO;AACP,aAAOqL,CAAP;AACD;;AACD,QAAI,CAACtZ,QAAQ,CAACkG,EAAD,CAAb,EAAmB;AACjB8F,MAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA+H,MAAAA,OAAO;AACP,aAAO,CAAP;AACD,KA7CuB,CA8CxB;AACA;AAEA;AACA;;;AACA7H,IAAAA,EAAE,GAAGD,EAAL;;AACA,WAAOtJ,MAAM,CAACuJ,EAAD,CAAb,EAAmB;AACjB,UAAIF,EAAE,KAAKxb,GAAG,CAAC0b,EAAD,CAAd,EAAoB;AAClB4F,QAAAA,IAAI,CAACxhB,IAAI,CAAC4b,EAAD,CAAL,CAAJ;AACA6H,QAAAA,OAAO;AACP,eAAO,CAAP;AACD;;AACD7H,MAAAA,EAAE,GAAGjb,IAAI,CAACib,EAAD,CAAT;AACD,KA3DuB,CA4DxB;AACA;;;AACAA,IAAAA,EAAE,GAAGrN,WAAW,CAACmN,EAAD,CAAhB;AACA8F,IAAAA,IAAI,CAAC5F,EAAD,CAAJ;;AACA,QAAIF,EAAE,KAAKE,EAAX,EAAe;AACb4F,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,MAAAA,CAAC,GAAGnL,aAAY,EAAhB;;AACA,UAAImL,CAAC,KAAK,CAAV,EAAa;AACX/R,QAAAA,GAAG;AACHyE,QAAAA,IAAI,CAAC9F,EAAD,CAAJ,CAFW,CAED;AACX;AACF;;AACD+H,IAAAA,OAAO;AACP,WAAOqL,CAAP;AACD,GA1ED;;AA4EAlL,EAAAA,mBAAmB,GAAG,+BAAW;AAC/B,QAAIuL,CAAJ,EAAOyB,EAAP,EAAW9B,CAAX,EAAcgC,IAAd;AACAhC,IAAAA,CAAC,GAAG,CAAJ;AACAK,IAAAA,CAAC,GAAG,CAAJ;AACA3N,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACAjY,IAAAA,WAAW;AACXiY,IAAAA,EAAE,GAAGqB,GAAG,EAAR;;AACA,SAAKoS,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGpV,EAAE,CAACyN,MAAH,CAAUwF,KAAlC,EAA0C,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAvE,EAA8E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAvG,EAA2G;AACzGpP,MAAAA,IAAI,CAAC9F,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,CAAD,CAAJ;AACA3N,MAAAA,IAAI,CAAC7F,EAAD,CAAJ;AACAmT,MAAAA,CAAC,IAAInL,aAAY,EAAjB;AACAjI,MAAAA,EAAE,CAACyN,MAAH,CAAU9gB,IAAV,CAAe8mB,CAAf,IAAoBpS,GAAG,EAAvB;AACD;;AACD3b,IAAAA,uBAAuB,CAACsa,EAAD,CAAvB;AACA8F,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;AACA,WAAOoT,CAAP;AACD,GAhBD;;AAkBAl/B,EAAAA,SAAS,GAAG,qBAAW;AACrB,QAAIu/B,CAAJ,EAAOb,CAAP,EAAUsC,EAAV,EAAc0J,CAAd,EAAiBzJ,EAAjB,EAAqB/B,CAArB,EAAwBgC,IAAxB,EAA8BC,IAA9B;AACA5B,IAAAA,CAAC,GAAG,CAAJ;AACAb,IAAAA,CAAC,GAAG,EAAJ;AACAgM,IAAAA,CAAC,GAAG,CAAJ;AACAxL,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKK,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAG1+B,MAAxB,EAAiC,KAAK0+B,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA9D,EAAqE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA9F,EAAkG;AAChGtC,MAAAA,CAAC,CAACa,CAAD,CAAD,GAAO,CAAP;AACD;;AACDmL,IAAAA,CAAC,GAAG,CAAJ;AACAxL,IAAAA,CAAC,GAAG,CAAJ;AACAnT,IAAAA,EAAE,GAAG/a,GAAG,CAAC8a,EAAD,CAAR;;AACA,WAAOrJ,MAAM,CAACsJ,EAAD,CAAb,EAAmB;AACjB6F,MAAAA,IAAI,CAACthB,GAAG,CAACyb,EAAD,CAAJ,CAAJ;AACAz0B,MAAAA,IAAI;AACJioC,MAAAA,CAAC,GAAGjS,WAAW,EAAf;;AACA,UAAIiS,CAAC,GAAG,CAAJ,IAASqD,KAAK,CAACrD,CAAD,CAAlB,EAAuB;AACrB;AACA;AACA3N,QAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACD6M,MAAAA,CAAC,IAAInL,CAAL;AACAb,MAAAA,CAAC,CAACQ,CAAC,EAAF,CAAD,GAASK,CAAT;AACAxT,MAAAA,EAAE,GAAG/a,GAAG,CAAC+a,EAAD,CAAR;AACD;;AACD,QAAImT,CAAC,KAAK,CAAV,EAAa;AACXtN,MAAAA,IAAI,CAACiM,IAAD,CAAJ;AACA;AACD;;AACD/R,IAAAA,EAAE,GAAG5f,YAAY,CAACw+B,CAAD,CAAjB;AACA5e,IAAAA,EAAE,CAACyN,MAAH,CAAUuF,IAAV,GAAiBI,CAAjB;;AACA,SAAKK,CAAC,GAAG0B,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGjC,CAAxB,EAA4B,KAAKiC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE5B,CAAC,GAAG,KAAK4B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FnV,MAAAA,EAAE,CAACyN,MAAH,CAAUqF,GAAV,CAAcW,CAAd,IAAmBb,CAAC,CAACa,CAAD,CAApB;AACD;;AACD,WAAO3N,IAAI,CAAC9F,EAAD,CAAX;AACD,GApCD;;AAsCA3f,EAAAA,WAAW,GAAG,CAAd;;AAEAD,EAAAA,YAAY,GAAG,sBAAS6yB,KAAT,EAAgB;AAC7B,QAAIQ,CAAJ,EAAOyB,EAAP,EAAWnB,CAAX,EAAcqB,IAAd;AACA3B,IAAAA,CAAC,GAAG,CAAJ;AACAM,IAAAA,CAAC,GAAG,IAAI71B,CAAJ,EAAJ;AACA61B,IAAAA,CAAC,CAACnB,CAAF,GAAMh2B,MAAN;AACAm3B,IAAAA,CAAC,CAACtG,MAAF,GAAW,IAAIA,MAAJ,EAAX;AACAsG,IAAAA,CAAC,CAACtG,MAAF,CAASwF,KAAT,GAAiBA,KAAjB;;AACA,SAAKQ,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGnC,KAAxB,EAAgC,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA7D,EAAoE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA7F,EAAiG;AAC/FnB,MAAAA,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,IAAmB1B,IAAnB;AACD;;AACDgC,IAAAA,CAAC,CAACtG,MAAF,CAASptB,WAAT,GAAuBA,WAAvB,CAV6B,CAW7B;AACA;;AACAA,IAAAA,WAAW;AACXqF,IAAAA,uBAAuB,CAACquB,CAAD,CAAvB;AACA,WAAOA,CAAP;AACD,GAhBD;AAksBE;;;AACAl/B,EAAAA,KAAI,GAAG,cAASk/B,CAAT,EAAYvB,CAAZ,EAAe;AACpB,QAAIiB,CAAJ,EAAOyB,EAAP,EAAWE,IAAX;AACA3B,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAItlB,KAAK,CAAC4lB,CAAD,EAAIvB,CAAJ,CAAT,EAAiB;AACf,aAAO,CAAP;AACD;;AACD,QAAIxY,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,WAAKN,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASwF,KAAjC,EAAyC,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG,YAAIrgC,KAAI,CAACk/B,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,CAAD,EAAmBjB,CAAnB,CAAR,EAA+B;AAC7B,iBAAO,CAAP;AACD;AACF;;AACD,aAAO,CAAP;AACD;;AACD,WAAO7b,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,UAAIl/B,KAAI,CAAC2P,GAAG,CAACuvB,CAAD,CAAJ,EAASvB,CAAT,CAAR,EAAqB;AACnB,eAAO,CAAP;AACD;;AACDuB,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GArBD,CAnm1BU,CA0n1BV;AACA;;;AACA/iB,EAAAA,sBAAqB,GAAG,+BAAS+iB,CAAT,EAAY;AAClC,QAAIN,CAAJ,EAAOyB,EAAP,EAAWE,IAAX;AACA3B,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIlc,eAAe,CAACwc,CAAD,CAAnB,EAAwB;AACtB,aAAO,CAAP;AACD;;AACD,QAAIvvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4B,CAAC2e,SAAS,CAACpT,KAAK,CAAC2b,EAAD,CAAN,CAA1C,EAAuD;AACrD,UAAInrB,KAAI,CAACyP,IAAI,CAACyvB,CAAD,CAAL,EAAU1f,aAAV,CAAR,EAAkC;AAChC;AACA,eAAO,CAAP;AACD;AACF;;AACD,QAAI7P,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4BsV,MAAM,CAAC9J,IAAI,CAACyvB,CAAD,CAAL,EAAU,CAAC,CAAX,CAAlC,IAAmD,CAACtc,SAAS,CAACpT,KAAK,CAAC2b,EAAD,CAAN,CAAjE,EAA8E;AAC5E;AACA,aAAO,CAAP;AACD;;AACD,QAAIhG,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,WAAKN,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASwF,KAAjC,EAAyC,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG,YAAIlkB,sBAAqB,CAAC+iB,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,CAAD,CAAzB,EAA6C;AAC3C,iBAAO,CAAP;AACD;AACF;;AACD,aAAO,CAAP;AACD;;AACD,WAAO9c,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,UAAI/iB,sBAAqB,CAACxM,GAAG,CAACuvB,CAAD,CAAJ,CAAzB,EAAmC;AACjC,eAAO,CAAP;AACD;;AACDA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GA/BD,CA5n1BU,CA6p1BV;;;AACA9iB,EAAAA,4BAA2B,GAAG,qCAAS8iB,CAAT,EAAY;AACxC,QAAIN,CAAJ,EAAOyB,EAAP,EAAWE,IAAX;AACA3B,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIjvB,GAAG,CAACuvB,CAAD,CAAH,KAAWlH,MAAM,CAAC/zB,KAAD,CAAjB,IAA4BwL,IAAI,CAACyvB,CAAD,CAAJ,KAAYlH,MAAM,CAACpiC,CAAD,CAAlD,EAAuD;AACrD,aAAOoK,KAAI,CAACwP,KAAK,CAAC0vB,CAAD,CAAN,EAAW1f,aAAX,CAAX;AACD;;AACD,QAAI2F,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,WAAKN,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASwF,KAAjC,EAAyC,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG,YAAIjkB,4BAA2B,CAAC8iB,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,CAAD,CAA/B,EAAmD;AACjD,iBAAO,CAAP;AACD;AACF;;AACD,aAAO,CAAP;AACD;;AACD,WAAO9c,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChB,UAAI9iB,4BAA2B,CAACzM,GAAG,CAACuvB,CAAD,CAAJ,CAA/B,EAAyC;AACvC,eAAO,CAAP;AACD;;AACDA,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GArBD;;AAuBA/tC,EAAAA,CAAC,CAAC6O,IAAF,GAASA,KAAT;;AAEA0f,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAIkf,CAAJ,EAAOyB,EAAP,EAAWE,IAAX,CADgB,CAEhB;AACA;;AACA3B,IAAAA,CAAC,GAAG,CAAJ;AACApiB,IAAAA,IAAI,GAAG,CAAP;AACAyW,IAAAA,iBAAiB;AACjB1iB,IAAAA,4CAA4C,GAAG,EAA/C;;AACA,QAAIiM,IAAJ,EAAU;AAAE;AACV;AACD;;AACDA,IAAAA,IAAI,GAAG,CAAP,CAXgB,CAYpB;;AACI,SAAKoiB,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGj9B,IAAxB,EAA+B,KAAKi9B,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9F7H,MAAAA,MAAM,CAACoG,CAAD,CAAN,GAAY,IAAIv1B,CAAJ,EAAZ;AACAmvB,MAAAA,MAAM,CAACoG,CAAD,CAAN,CAAUb,CAAV,GAAct3B,GAAd;AACAgI,MAAAA,OAAO,CAACmwB,CAAD,CAAP,GAAapG,MAAM,CAACoG,CAAD,CAAnB;AACA9d,MAAAA,mBAAmB,CAAC8d,CAAD,CAAnB,GAAyB,KAAzB;AACD;;AACD,WAAOzpB,IAAI,EAAX;AACD,GApBD;;AAsBAC,EAAAA,QAAQ,GAAG,CACT,eAAeqlB,OAAf,GAAyB,IADhB,EAET,UAFS,EAGT,YAHS,EAIT,cAJS,EAKT,uBALS,EAMT,iBANS,EAOT,iBAPS,EAQT,iBARS,EAST,QATS,EAUT,SAVS,EAWT,sBAXS,EAYT,0BAZS,EAaT,oBAbS,EAcT,oBAdS,EAeT;AACA,4EAhBS,EAiBT;AACA,yEAlBS,EAmBT;AACA,wCApBS,EAqBT;AACA;AAEA;AACA;AACA;AACA,gBA3BS,CAAX;;AA8BAtlB,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAIisC,oBAAJ,EAA0BC,MAA1B,EAAkChhB,EAAlC,EAAsCwS,eAAtC,EAAuDtS,IAAvD;AACArV,IAAAA,EAAE,GAAG8M,MAAM,CAACn1B,GAAD,CAAX;AACAsoB,IAAAA,EAAE,GAAG6M,MAAM,CAACn1B,GAAD,CAAX;AACAuoB,IAAAA,EAAE,GAAG4M,MAAM,CAACn1B,GAAD,CAAX;AACAwoB,IAAAA,EAAE,GAAG2M,MAAM,CAACn1B,GAAD,CAAX;AACAyoB,IAAAA,EAAE,GAAG0M,MAAM,CAACn1B,GAAD,CAAX;AACA0oB,IAAAA,EAAE,GAAGyM,MAAM,CAACn1B,GAAD,CAAX;AACA2oB,IAAAA,EAAE,GAAGwM,MAAM,CAACn1B,GAAD,CAAX;AACA4oB,IAAAA,EAAE,GAAGuM,MAAM,CAACn1B,GAAD,CAAX;AACA6oB,IAAAA,EAAE,GAAGsM,MAAM,CAACn1B,GAAD,CAAX;AACA8oB,IAAAA,EAAE,GAAGqM,MAAM,CAACn1B,GAAD,CAAX;AACAw0B,IAAAA,UAAU,CAAC,KAAD,EAAQjmC,GAAR,CAAV;AACAimC,IAAAA,UAAU,CAAC,KAAD,EAAQhmC,GAAR,CAAV;AACAgmC,IAAAA,UAAU,CAAC,KAAD,EAAQ/lC,GAAR,CAAV;AACA+lC,IAAAA,UAAU,CAAC,KAAD,EAAQ9lC,GAAR,CAAV;AACA8lC,IAAAA,UAAU,CAAC,aAAD,EAAgB7lC,WAAhB,CAAV;AACA6lC,IAAAA,UAAU,CAAC,QAAD,EAAW5lC,MAAX,CAAV;AACA4lC,IAAAA,UAAU,CAAC,SAAD,EAAY3lC,OAAZ,CAAV;AACA2lC,IAAAA,UAAU,CAAC,QAAD,EAAW1lC,MAAX,CAAV;AACA0lC,IAAAA,UAAU,CAAC,SAAD,EAAYzlC,OAAZ,CAAV;AACAylC,IAAAA,UAAU,CAAC,QAAD,EAAWxlC,MAAX,CAAV;AACAwlC,IAAAA,UAAU,CAAC,SAAD,EAAYvlC,OAAZ,CAAV;AACAulC,IAAAA,UAAU,CAAC,KAAD,EAAQtlC,GAAR,CAAV;AACAslC,IAAAA,UAAU,CAAC,SAAD,EAAYplC,OAAZ,CAAV;AACAolC,IAAAA,UAAU,CAAC,SAAD,EAAYjlC,OAAZ,CAAV;AACAilC,IAAAA,UAAU,CAAC,SAAD,EAAYhlC,OAAZ,CAAV;AACAglC,IAAAA,UAAU,CAAC,SAAD,EAAY/kC,OAAZ,CAAV;AACA+kC,IAAAA,UAAU,CAAC,UAAD,EAAa9kC,QAAb,CAAV;AACA8kC,IAAAA,UAAU,CAAC,SAAD,EAAYrkC,OAAZ,CAAV;AACAqkC,IAAAA,UAAU,CAAC,OAAD,EAAUpkC,KAAV,CAAV;AACAokC,IAAAA,UAAU,CAAC,QAAD,EAAWnkC,MAAX,CAAV;AACAmkC,IAAAA,UAAU,CAAC,SAAD,EAAYlkC,OAAZ,CAAV;AACAkkC,IAAAA,UAAU,CAAC,OAAD,EAAUjkC,KAAV,CAAV;AACAikC,IAAAA,UAAU,CAAC,UAAD,EAAahkC,QAAb,CAAV;AACAgkC,IAAAA,UAAU,CAAC,eAAD,EAAkB/jC,aAAlB,CAAV;AACA+jC,IAAAA,UAAU,CAAC,OAAD,EAAU9jC,KAAV,CAAV;AACA8jC,IAAAA,UAAU,CAAC,OAAD,EAAU7jC,KAAV,CAAV;AACA6jC,IAAAA,UAAU,CAAC,UAAD,EAAa5jC,QAAb,CAAV;AACA4jC,IAAAA,UAAU,CAAC,UAAD,EAAa3jC,QAAb,CAAV;AACA2jC,IAAAA,UAAU,CAAC,MAAD,EAAS1jC,IAAT,CAAV;AACA0jC,IAAAA,UAAU,CAAC,UAAD,EAAaxjC,QAAb,CAAV;AACAwjC,IAAAA,UAAU,CAAC,KAAD,EAAQvjC,GAAR,CAAV;AACAujC,IAAAA,UAAU,CAAC,MAAD,EAAStjC,IAAT,CAAV;AACAsjC,IAAAA,UAAU,CAAC,QAAD,EAAWziC,MAAX,CAAV;AACAyiC,IAAAA,UAAU,CAAC,QAAD,EAAWxiC,MAAX,CAAV;AACAwiC,IAAAA,UAAU,CAAC,KAAD,EAAQviC,MAAR,CAAV;AACAuiC,IAAAA,UAAU,CAAC,aAAD,EAAgBtiC,WAAhB,CAAV;AACAsiC,IAAAA,UAAU,CAAC,KAAD,EAAQpiC,GAAR,CAAV;AACAoiC,IAAAA,UAAU,CAAC,YAAD,EAAeriC,UAAf,CAAV;AACAqiC,IAAAA,UAAU,CAAC,KAAD,EAAQliC,GAAR,CAAV;AACAkiC,IAAAA,UAAU,CAAC,OAAD,EAAUjiC,KAAV,CAAV;AACAiiC,IAAAA,UAAU,CAAC,UAAD,EAAahiC,QAAb,CAAV;AACAgiC,IAAAA,UAAU,CAAC,IAAD,EAAO/hC,EAAP,CAAV;AACA+hC,IAAAA,UAAU,CAAC,KAAD,EAAQ9hC,GAAR,CAAV;AACA8hC,IAAAA,UAAU,CAAC,MAAD,EAAS5hC,IAAT,CAAV;AACA4hC,IAAAA,UAAU,CAAC,QAAD,EAAW1hC,MAAX,CAAV;AACA0hC,IAAAA,UAAU,CAAC,KAAD,EAAQjhC,GAAR,CAAV;AACAihC,IAAAA,UAAU,CAAC,MAAD,EAAShhC,IAAT,CAAV;AACAghC,IAAAA,UAAU,CAAC,OAAD,EAAUxhC,KAAV,CAAV;AACAwhC,IAAAA,UAAU,CAAC,UAAD,EAAavhC,QAAb,CAAV;AACAuhC,IAAAA,UAAU,CAAC,UAAD,EAAathC,QAAb,CAAV;AACAshC,IAAAA,UAAU,CAAC,MAAD,EAAS/gC,IAAT,CAAV;AACA+gC,IAAAA,UAAU,CAAC,KAAD,EAAQ9gC,GAAR,CAAV;AACA8gC,IAAAA,UAAU,CAAC,QAAD,EAAW7gC,MAAX,CAAV;AACA6gC,IAAAA,UAAU,CAAC,QAAD,EAAW5gC,MAAX,CAAV;AACA4gC,IAAAA,UAAU,CAAC,QAAD,EAAW3gC,MAAX,CAAV;AACA2gC,IAAAA,UAAU,CAAC,QAAD,EAAW93B,MAAX,CAAV;AACA83B,IAAAA,UAAU,CAAC,WAAD,EAAc73B,SAAd,CAAV;AACA63B,IAAAA,UAAU,CAAC,YAAD,EAAe53B,UAAf,CAAV;AACA43B,IAAAA,UAAU,CAAC,QAAD,EAAW33B,MAAX,CAAV;AACA23B,IAAAA,UAAU,CAAC,OAAD,EAAU13B,MAAV,CAAV;AACA03B,IAAAA,UAAU,CAAC,OAAD,EAAUz3B,KAAV,CAAV;AACAy3B,IAAAA,UAAU,CAAC,KAAD,EAAQx3B,GAAR,CAAV;AACAw3B,IAAAA,UAAU,CAAC,UAAD,EAAat3B,QAAb,CAAV;AACAs3B,IAAAA,UAAU,CAAC,OAAD,EAAUp3B,KAAV,CAAV;AACAo3B,IAAAA,UAAU,CAAC,KAAD,EAAQn3B,GAAR,CAAV;AACAm3B,IAAAA,UAAU,CAAC,SAAD,EAAYl3B,OAAZ,CAAV;AACAk3B,IAAAA,UAAU,CAAC,SAAD,EAAYj3B,OAAZ,CAAV;AACAi3B,IAAAA,UAAU,CAAC,MAAD,EAASh3B,IAAT,CAAV;AACAg3B,IAAAA,UAAU,CAAC,WAAD,EAAc/2B,KAAd,CAAV;AACA+2B,IAAAA,UAAU,CAAC,OAAD,EAAU92B,KAAV,CAAV;AACA82B,IAAAA,UAAU,CAAC,UAAD,EAAa72B,QAAb,CAAV;AACA62B,IAAAA,UAAU,CAAC,KAAD,EAAQ52B,GAAR,CAAV;AACA42B,IAAAA,UAAU,CAAC,MAAD,EAAS32B,IAAT,CAAV;AACA22B,IAAAA,UAAU,CAAC,WAAD,EAAcx2B,SAAd,CAAV;AACAw2B,IAAAA,UAAU,CAAC,SAAD,EAAYv2B,OAAZ,CAAV;AACAu2B,IAAAA,UAAU,CAAC,UAAD,EAAat2B,QAAb,CAAV,CAvFgB,CAwFhB;;AACAs2B,IAAAA,UAAU,CAAC,KAAD,EAAQ91B,GAAR,CAAV;AACA81B,IAAAA,UAAU,CAAC,SAAD,EAAY71B,OAAZ,CAAV;AACA61B,IAAAA,UAAU,CAAC,UAAD,EAAa51B,QAAb,CAAV;AACA41B,IAAAA,UAAU,CAAC,KAAD,EAAQ31B,GAAR,CAAV;AACA21B,IAAAA,UAAU,CAAC,QAAD,EAAW11B,MAAX,CAAV;AACA01B,IAAAA,UAAU,CAAC,KAAD,EAAQ70B,GAAR,CAAV;AACA60B,IAAAA,UAAU,CAAC,UAAD,EAAa30B,QAAb,CAAV;AACA20B,IAAAA,UAAU,CAAC,KAAD,EAAQv0B,GAAR,CAAV;AACAu0B,IAAAA,UAAU,CAAC,QAAD,EAAWt0B,MAAX,CAAV;AACAs0B,IAAAA,UAAU,CAAC,QAAD,EAAW7zB,MAAX,CAAV;AACA6zB,IAAAA,UAAU,CAAC,WAAD,EAAc5zB,SAAd,CAAV;AACA4zB,IAAAA,UAAU,CAAC,UAAD,EAAa3zB,QAAb,CAAV;AACA2zB,IAAAA,UAAU,CAAC,IAAD,EAAO1zB,EAAP,CAAV;AACA0zB,IAAAA,UAAU,CAAC,OAAD,EAAUzzB,KAAV,CAAV;AACAyzB,IAAAA,UAAU,CAAC,SAAD,EAAYxzB,OAAZ,CAAV;AACAwzB,IAAAA,UAAU,CAAC,cAAD,EAAiBvzB,YAAjB,CAAV;AACAuzB,IAAAA,UAAU,CAAC,OAAD,EAAUrzB,KAAV,CAAV;AACAqzB,IAAAA,UAAU,CAAC,OAAD,EAAUpzB,KAAV,CAAV;AACAozB,IAAAA,UAAU,CAAC,OAAD,EAAUnzB,KAAV,CAAV;AACAmzB,IAAAA,UAAU,CAAC,OAAD,EAAUlzB,KAAV,CAAV;AACAkzB,IAAAA,UAAU,CAAC,cAAD,EAAiBjzB,YAAjB,CAAV;AACAizB,IAAAA,UAAU,CAAC,eAAD,EAAkBhzB,SAAlB,CAAV;AACAgzB,IAAAA,UAAU,CAAC,YAAD,EAAe/yB,UAAf,CAAV;AACA+yB,IAAAA,UAAU,CAAC,WAAD,EAAc9yB,SAAd,CAAV;AACA8yB,IAAAA,UAAU,CAAC,YAAD,EAAevyB,UAAf,CAAV;AACAuyB,IAAAA,UAAU,CAAC,kBAAD,EAAqBtyB,mBAArB,CAAV;AACAsyB,IAAAA,UAAU,CAAC,kBAAD,EAAqBryB,mBAArB,CAAV;AACAqyB,IAAAA,UAAU,CAAC,SAAD,EAAYpyB,OAAZ,CAAV;AACAoyB,IAAAA,UAAU,CAAC,OAAD,EAAUnyB,KAAV,CAAV;AACAmyB,IAAAA,UAAU,CAAC,UAAD,EAAalyB,QAAb,CAAV;AACAkyB,IAAAA,UAAU,CAAC,MAAD,EAASjyB,IAAT,CAAV;AACAiyB,IAAAA,UAAU,CAAC,aAAD,EAAgBhyB,WAAhB,CAAV;AACAgyB,IAAAA,UAAU,CAAC,MAAD,EAAS/xB,IAAT,CAAV;AACA+xB,IAAAA,UAAU,CAAC,MAAD,EAAS1tB,MAAT,CAAV;AACA0tB,IAAAA,UAAU,CAAC,OAAD,EAAU9xB,KAAV,CAAV;AACA8xB,IAAAA,UAAU,CAAC,OAAD,EAAU7xB,KAAV,CAAV;AACA6xB,IAAAA,UAAU,CAAC,QAAD,EAAW1xB,IAAX,CAAV;AACA0xB,IAAAA,UAAU,CAAC,KAAD,EAAQzxB,GAAR,CAAV;AACAyxB,IAAAA,UAAU,CAAC,eAAD,EAAkBvxB,aAAlB,CAAV;AACAuxB,IAAAA,UAAU,CAAC,UAAD,EAAatxB,QAAb,CAAV;AACAsxB,IAAAA,UAAU,CAAC,KAAD,EAAQrxB,GAAR,CAAV;AACAqxB,IAAAA,UAAU,CAAC,MAAD,EAASpxB,IAAT,CAAV;AACAoxB,IAAAA,UAAU,CAAC,OAAD,EAAUxxB,KAAV,CAAV;AACAwxB,IAAAA,UAAU,CAAC,MAAD,EAASjxB,IAAT,CAAV;AACAixB,IAAAA,UAAU,CAAC,MAAD,EAAShxB,IAAT,CAAV;AACAgxB,IAAAA,UAAU,CAAC,OAAD,EAAU9wB,KAAV,CAAV;AACA8wB,IAAAA,UAAU,CAAC,KAAD,EAAQ7wB,GAAR,CAAV;AACA6wB,IAAAA,UAAU,CAAC,aAAD,EAAgB3wB,WAAhB,CAAV;AACA2wB,IAAAA,UAAU,CAAC,KAAD,EAAQzvB,GAAR,CAAV;AACAyvB,IAAAA,UAAU,CAAC,MAAD,EAASxvB,IAAT,CAAV;AACAwvB,IAAAA,UAAU,CAAC,QAAD,EAAWvvB,MAAX,CAAV;AACAuvB,IAAAA,UAAU,CAAC,MAAD,EAASrvB,IAAT,CAAV;AACAqvB,IAAAA,UAAU,CAAC,QAAD,EAAWpvB,MAAX,CAAV;AACAovB,IAAAA,UAAU,CAAC,QAAD,EAAWnvB,MAAX,CAAV;AACAmvB,IAAAA,UAAU,CAAC,QAAD,EAAWlvB,MAAX,CAAV;AACAkvB,IAAAA,UAAU,CAAC,QAAD,EAAWjvB,MAAX,CAAV;AACAivB,IAAAA,UAAU,CAAC,QAAD,EAAWhvB,MAAX,CAAV;AACAgvB,IAAAA,UAAU,CAAC,WAAD,EAAc5uB,SAAd,CAAV;AACA4uB,IAAAA,UAAU,CAAC,MAAD,EAAS/tB,IAAT,CAAV;AACA+tB,IAAAA,UAAU,CAAC,MAAD,EAASztB,IAAT,CAAV;AACAytB,IAAAA,UAAU,CAAC,KAAD,EAAQx0B,GAAR,CAAV;AACAw0B,IAAAA,UAAU,CAAC,YAAD,EAAenlC,UAAf,CAAV;AACAmlC,IAAAA,UAAU,CAAC,MAAD,EAASllC,IAAT,CAAV;AACAklC,IAAAA,UAAU,CAAC,qBAAD,EAAwBrlC,qBAAxB,CAAV;AACAqlC,IAAAA,UAAU,CAAC,MAAD,EAASr2B,IAAT,CAAV;AACAq2B,IAAAA,UAAU,CAAC,WAAD,EAAc/1B,UAAd,CAAV;AACA+1B,IAAAA,UAAU,CAAC,kBAAD,EAAqBp2B,kBAArB,CAAV;AACAo2B,IAAAA,UAAU,CAAC,eAAD,EAAkBn2B,eAAlB,CAAV;AACAm2B,IAAAA,UAAU,CAAC,gBAAD,EAAmBl2B,gBAAnB,CAAV;AACAk2B,IAAAA,UAAU,CAAC,eAAD,EAAkBj2B,eAAlB,CAAV;AACAi2B,IAAAA,UAAU,CAAC,gBAAD,EAAmBh2B,gBAAnB,CAAV;AACAg2B,IAAAA,UAAU,CAAC,OAAD,EAAU7uB,KAAV,CAAV;AACA6uB,IAAAA,UAAU,CAAC,oBAAD,EAAuBv3B,oBAAvB,CAAV;AACAu3B,IAAAA,UAAU,CAAC,wBAAD,EAA2Bp1B,yBAA3B,CAAV;AACAo1B,IAAAA,UAAU,CAAC,GAAD,EAAM3tB,GAAN,CAAV,CAnKgB,CAmKM;;AACtB2tB,IAAAA,UAAU,CAAC,QAAD,EAAW3hC,KAAX,CAAV,CApKgB,CAoKa;;AAC7B2hC,IAAAA,UAAU,CAAC,QAAD,EAAWj1B,KAAX,CAAV;AACAi1B,IAAAA,UAAU,CAAC,QAAD,EAAWh1B,KAAX,CAAV;AACAg1B,IAAAA,UAAU,CAAC,QAAD,EAAW/0B,KAAX,CAAV;AACA+0B,IAAAA,UAAU,CAAC,UAAD,EAAa5xB,OAAb,CAAV;AACA4xB,IAAAA,UAAU,CAAC,SAAD,EAAY7tB,OAAZ,CAAV;AACA6tB,IAAAA,UAAU,CAAC,IAAD,EAAOtzB,EAAP,CAAV;AACAszB,IAAAA,UAAU,CAAC,GAAD,EAAM1wB,QAAN,CAAV;AACA0wB,IAAAA,UAAU,CAAC,GAAD,EAAMxwB,QAAN,CAAV;AACAwwB,IAAAA,UAAU,CAAC,GAAD,EAAMtwB,QAAN,CAAV;AACAswB,IAAAA,UAAU,CAAC,GAAD,EAAMrwB,QAAN,CAAV;AACAqwB,IAAAA,UAAU,CAAC,GAAD,EAAMpwB,QAAN,CAAV;AACAowB,IAAAA,UAAU,CAAC,GAAD,EAAMlwB,QAAN,CAAV;AACAkwB,IAAAA,UAAU,CAAC,GAAD,EAAMjwB,QAAN,CAAV;AACAiwB,IAAAA,UAAU,CAAC,GAAD,EAAMhwB,QAAN,CAAV;AACAgwB,IAAAA,UAAU,CAAC,GAAD,EAAM/vB,QAAN,CAAV;AACA+vB,IAAAA,UAAU,CAAC,GAAD,EAAM9vB,QAAN,CAAV;AACA8vB,IAAAA,UAAU,CAAC,GAAD,EAAM7vB,QAAN,CAAV;AACA6vB,IAAAA,UAAU,CAAC,GAAD,EAAM3vB,QAAN,CAAV;AACA2vB,IAAAA,UAAU,CAAC,GAAD,EAAM1vB,QAAN,CAAV;AACA0vB,IAAAA,UAAU,CAAC,GAAD,EAAMnwB,sBAAN,CAAV;AACAmwB,IAAAA,UAAU,CAAC,IAAD,EAAOzwB,mBAAP,CAAV;AACAywB,IAAAA,UAAU,CAAC,IAAD,EAAOvwB,mBAAP,CAAV;AACAuwB,IAAAA,UAAU,CAAC,IAAD,EAAO5vB,mBAAP,CAAV;AACA4vB,IAAAA,UAAU,CAAC,KAAD,EAAQ3kC,EAAR,CAAV;AACA2kC,IAAAA,UAAU,CAAC,KAAD,EAAQ1kC,EAAR,CAAV;AACA0kC,IAAAA,UAAU,CAAC,KAAD,EAAQzkC,EAAR,CAAV;AACAykC,IAAAA,UAAU,CAAC,KAAD,EAAQxkC,EAAR,CAAV;AACAwkC,IAAAA,UAAU,CAAC,KAAD,EAAQvkC,EAAR,CAAV;AACAukC,IAAAA,UAAU,CAAC,KAAD,EAAQtkC,EAAR,CAAV;AACAkiB,IAAAA,wBAAwB,GAlMR,CAmMhB;AACA;;AACA49B,IAAAA,eAAe,GAAGjhC,OAAlB;AACAA,IAAAA,OAAO,GAAG,KAAV;;AACA,SAAKyvC,MAAM,GAAGhhB,EAAE,GAAG,CAAd,EAAiBE,IAAI,GAAGnrB,QAAQ,CAAC6Q,MAAtC,EAA+C,KAAKsa,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5E,EAAmF8gB,MAAM,GAAG,KAAK9gB,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAjH,EAAqH;AACnH+gB,MAAAA,oBAAoB,GAAGhsC,QAAQ,CAACisC,MAAD,CAA/B;AACAvtB,MAAAA,IAAI,CAACstB,oBAAD,CAAJ;;AACA,UAAIntD,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiBwhB,oBAA7B;AACA1hB,QAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ;AACAF,QAAAA,OAAO,CAACE,GAAR,CAAY3P,WAAU,CAACkH,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAtB;AACD;;AACD7iC,MAAAA,IAAI;AACJ61B,MAAAA,GAAG;AACJ,KAjNe,CAkNhB;;;AACA,WAAO5a,OAAO,GAAGihC,eAAjB;AACD,GApND;;AAsNA59B,EAAAA,wBAAwB,GAAG,oCAAW;AACpCioB,IAAAA,IAAI,GAAG5T,WAAW,CAAC,CAAD,CAAlB;AACAqB,IAAAA,GAAG,GAAGrB,WAAW,CAAC,CAAD,CAAjB;AACA8H,IAAAA,WAAW,CAAC,GAAD,CAAX;AACAvG,IAAAA,aAAa,GAAG2B,GAAG,EAAnB,CAJoC,CAKpC;;AACAkF,IAAAA,WAAW,CAACztB,KAAD,CAAX;;AACA,QAAIhQ,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY3P,WAAU,CAACkH,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAtB;AACD;;AACDhI,IAAAA,YAAY,CAAC,CAAC,CAAF,CAAZ;;AACA,QAAIv9B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY3P,WAAU,CAACkH,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAtB;AACD;;AACD/H,IAAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,CAAb;;AACA,QAAIx9B,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY3P,WAAU,CAACkH,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAtB;AACD;;AACDpT,IAAAA,IAAI,CAAC,CAAD,CAAJ;;AACA,QAAInyB,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY3P,WAAU,CAACkH,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAN,CAAtB;AACD;;AACD,WAAOha,aAAa,GAAGgN,GAAG,EAA1B,CAtBoC,CAsBN;AAC/B,GAvBD,CAj81BU,CA091BV;AAEA;AAEA;AAEA;AAEA;;;AACAzF,EAAAA,IAAI,GAAG,cAASyW,CAAT,EAAYC,CAAZ,EAAe;AACpB,WAAOD,CAAC,CAACoU,OAAF,CAAUnU,CAAV,CAAP;AACD,GAFD,CAn+1BU,CAu+1BV;;;AACAzW,EAAAA,OAAO,GAAG,iBAASwW,CAAT,EAAYe,CAAZ,EAAe;AACvB,QAAId,CAAJ,EAAO2C,CAAP;AACA3C,IAAAA,CAAC,GAAGvvB,MAAM,CAACqwB,CAAD,CAAV;AACA6B,IAAAA,CAAC,GAAGrZ,IAAI,CAACyW,CAAD,EAAIC,CAAJ,CAAR;AACA,WAAO2C,CAAP;AACD,GALD;;AAOA3I,EAAAA,MAAM,GAAG,gBAAS6pB,IAAT,EAAeC,IAAf,EAAqB;AAC5B,QAAID,IAAI,KAAKC,IAAb,EAAmB;AACjB,aAAO,CAAP;AACD,KAFD,MAEO,IAAID,IAAI,GAAGC,IAAX,EAAiB;AACtB,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAO,CAAC,CAAR;AACD;AACF,GARD;;AAUAxqC,EAAAA,wBAAwB,GAAG,kCAAS+mB,CAAT,EAAY;AACrC,QAAI0jB,sBAAJ,EAA4BC,oBAA5B,CADqC,CAErC;AACA;;AACA,QAAI7vC,OAAJ,EAAa;AACX,aAAO,KAAKksB,CAAZ;AACD;;AACD,QAAI9c,kBAAkB,CAAChD,WAAW,CAACga,MAAM,CAACl4B,oBAAD,CAAP,CAAZ,CAAtB,EAAmE;AACjE2hD,MAAAA,oBAAoB,GAAG,KAAK3jB,CAA5B,CADiE,CAEjE;AACA;AACA;;AACA,UAAI1Q,SAAS,KAAKzoB,eAAlB,EAAmC;AACjC;AACA,YAAI,gBAAgBk4C,IAAhB,CAAqB4E,oBAArB,CAAJ,EAAgD;AAC9CA,UAAAA,oBAAoB,GAAGA,oBAAoB,CAAC1O,OAArB,CAA6B,SAA7B,EAAwC,iBAAxC,CAAvB;AACD,SAFD,MAEO;AACL;AACA;AACA;AACA0O,UAAAA,oBAAoB,GAAGA,oBAAoB,CAAC1O,OAArB,CAA6B,cAA7B,EAA6C,qBAA7C,CAAvB;AACD;AACF,OAVD,MAUO;AACL,YAAI,gBAAgB8J,IAAhB,CAAqB4E,oBAArB,CAAJ,EAAgD;AAC9CA,UAAAA,oBAAoB,GAAGA,oBAAoB,CAAC1O,OAArB,CAA6B,SAA7B,EAAwC,UAAxC,CAAvB;AACD,SAFD,MAEO;AACL;AACA;AACA;AACA0O,UAAAA,oBAAoB,GAAGA,oBAAoB,CAAC1O,OAArB,CAA6B,cAA7B,EAA6C,cAA7C,CAAvB;AACD;AACF;AACF,KAzBD,MAyBO;AACL9hB,MAAAA,IAAI,CAACjT,WAAW,CAACga,MAAM,CAAC/1B,yBAAD,CAAP,CAAZ,CAAJ;AACAu/C,MAAAA,sBAAsB,GAAG70B,WAAW,EAApC,CAFK,CAGL;AACA;AACA;;AACA80B,MAAAA,oBAAoB,GAAG,KAAK3jB,CAAC,CAAC+I,OAAF,CAAU2a,sBAAV,CAA5B,CANK,CAOL;AACA;;AACAC,MAAAA,oBAAoB,GAAGA,oBAAoB,CAAC1O,OAArB,CAA6B,oBAA7B,EAAmD,IAAnD,CAAvB,CATK,CAUL;;AACA0O,MAAAA,oBAAoB,GAAGA,oBAAoB,CAAC1O,OAArB,CAA6B,SAA7B,EAAwC,EAAxC,CAAvB,CAXK,CAYL;AACA;AACA;;AACA,UAAI0O,oBAAoB,CAACxY,OAArB,CAA6B,GAA7B,MAAsC,CAAC,CAA3C,EAA8C;AAC5CwY,QAAAA,oBAAoB,IAAI,IAAxB;AACD;;AACD,UAAI7Y,UAAU,CAAC6Y,oBAAD,CAAV,KAAqC3jB,CAAzC,EAA4C;AAC1C2jB,QAAAA,oBAAoB,GAAG3jB,CAAC,CAAC+I,OAAF,CAAU2a,sBAAV,IAAoC,KAA3D;AACD;AACF;;AACD,WAAOC,oBAAP;AACD,GAvDD,CAz/1BU,CAkj2BV;;;AACArwC,EAAAA,UAAU,GAAG,sBAAW,CAAE,CAA1B,CAnj2BU,CAqj2BV;;;AACAyT,EAAAA,OAAO,GAAG,iBAASkb,CAAT,EAAY;AACpB,QAAIA,CAAC,IAAI,IAAT,EAAe;AACb,aAAO,KAAP;AACD;;AACD,WAAOA,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,IAAnB,IAA2BA,CAAC,KAAK,IAAjC,IAAyCA,CAAC,KAAK,IAA/C,IAAuDA,CAAC,KAAK,IAA7D,IAAqEA,CAAC,KAAK,IAAlF;AACD,GALD;;AAOA/d,EAAAA,OAAO,GAAG,iBAAS6b,GAAT,EAAc;AACtB,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,KAAP;AACD;;AACD,WAAO,QAAQgf,IAAR,CAAahf,GAAb,CAAP;AACD,GALD;;AAOAnc,EAAAA,OAAO,GAAG,iBAASmc,GAAT,EAAc;AACtB,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,KAAP;AACD,KAHqB,CAItB;;;AACA,WAAOA,GAAG,CAAC6jB,MAAJ,CAAW,WAAX,MAA4B,CAAC,CAApC;AACD,GAND;;AAQA//B,EAAAA,mBAAmB,GAAG,6BAASkc,GAAT,EAAc;AAClC,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,KAAP;AACD,KAHiC,CAIlC;;;AACA,WAAOA,GAAG,CAAC6jB,MAAJ,CAAW,YAAX,MAA6B,CAAC,CAArC;AACD,GAND;;AAQAr8B,EAAAA,YAAY,GAAG,sBAASwY,GAAT,EAAc;AAC3B,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,KAAP;AACD;;AACD,WAAOA,GAAG,CAAC6jB,MAAJ,CAAW,GAAX,MAAoB,CAAC,CAA5B;AACD,GALD;;AAOAjgC,EAAAA,mBAAmB,GAAG,6BAASoc,GAAT,EAAc;AAClC,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,KAAP;AACD;;AACD,WAAOlc,mBAAmB,CAACkc,GAAD,CAAnB,IAA4B7b,OAAO,CAAC6b,GAAD,CAA1C;AACD,GALD;;AAOAvqB,EAAAA,MAAK,GAAG,eAAS4rB,CAAT,EAAY;AAClB,QAAIX,CAAJ;;AACA,QAAIzc,MAAM,CAACod,CAAD,CAAV,EAAe;AACbX,MAAAA,CAAC,GAAG,CAAJ;;AACA,aAAOzc,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBX,QAAAA,CAAC,IAAIjrB,MAAK,CAAC3D,GAAG,CAACuvB,CAAD,CAAJ,CAAL,GAAgB,CAArB;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,KAND,MAMO;AACLX,MAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,WAAOA,CAAP;AACD,GAZD,CAlm2BU,CAgn2BV;AACA;AACA;AACA;;;AACAhrB,EAAAA,yBAAwB,GAAG,kCAASouC,MAAT,EAAiBziB,CAAjB,EAAoB;AAC7C,QAAIX,CAAJ;AACAA,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIzc,MAAM,CAACod,CAAD,CAAV,EAAe;AACb,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBX,QAAAA,CAAC,IAAIhrB,yBAAwB,CAACouC,MAAD,EAAShyC,GAAG,CAACuvB,CAAD,CAAZ,CAA7B;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,KALD,MAKO;AACL,UAAI5lB,KAAK,CAACqoC,MAAD,EAASziB,CAAT,CAAT,EAAsB;AACpBX,QAAAA,CAAC,GAAG,CAAJ;AACD;AACF;;AACD,WAAOA,CAAP;AACD,GAdD,CApn2BU,CAoo2BV;AACA;;;AACA7qB,EAAAA,SAAS,GAAG,mBAASwrB,CAAT,EAAY;AACtB,QAAIN,CAAJ,EAAOyB,EAAP,EAAW9B,CAAX,EAAcgC,IAAd;AACAhC,IAAAA,CAAC,GAAG,CAAJ;;AACA,QAAIpZ,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,WAAKN,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASwF,KAAjC,EAAyC,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxG9B,QAAAA,CAAC,IAAIW,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,CAAL;AACD;AACF,KAJD,MAIO,IAAI9c,MAAM,CAACod,CAAD,CAAV,EAAe;AACpB,aAAOpd,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBX,QAAAA,CAAC,IAAIjrB,MAAK,CAAC3D,GAAG,CAACuvB,CAAD,CAAJ,CAAL,GAAgB,CAArB;AACAA,QAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,KALM,MAKA;AACLX,MAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,WAAOA,CAAP;AACD,GAhBD,CAto2BU,CAwp2BV;AAEA;;;AACA/G,EAAAA,IAAI,GAAG,cAASuI,CAAT,EAAY;AACjB,QAAI6hB,OAAJ,CADiB,CAEjB;AACA;AACA;;AACAloC,IAAAA,YAAY,IAAI,QAAhB;AACAA,IAAAA,YAAY,IAAIqmB,CAAhB,CANiB,CAOjB;;AACA6hB,IAAAA,OAAO,GAAGloC,YAAV;AACAA,IAAAA,YAAY,GAAG,EAAf;AACAkO,IAAAA,OAAO,CAAC,CAAD,CAAP;AACA,UAAM,IAAIunB,KAAJ,CAAUyS,OAAV,CAAN;AACD,GAZD,CA3p2BU,CA0q2BV;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA1lC,EAAAA,wBAAwB,GAAG,kCAAS2lC,gBAAT,EAA2BC,gBAA3B,EAA6C;AACtE,QAAIC,uBAAJ,EAA6BC,uBAA7B,EAAsDC,qCAAtD,EAA6FC,kBAA7F,EAAiHC,WAAjH,EAA8HC,cAA9H,EAA8IC,cAA9I,EAA8JhgB,KAA9J,EAAqKigB,aAArK,EAAoLC,aAApL,EAAmM3jB,CAAnM,EAAsM4jB,sBAAtM,EAA8NC,8BAA9N,EAA8P7iC,MAA9P,EAAsQmwB,GAAtQ,EAA2Q1P,EAA3Q,EAA+QkC,GAA/Q,EAAoRQ,IAApR,EAA0R6B,IAA1R,EAAgSC,IAAhS,EAAsSC,IAAtS,EAA4SC,IAA5S,EAAkTC,IAAlT,EAAwTC,IAAxT,EAA8T3E,EAA9T,EAAkU/B,CAAlU,EAAqU6G,EAArU,EAAyUsd,aAAzU,EAAwVpd,EAAxV,EAA4VmN,aAA5V,EAA2WkQ,kBAA3W,EAA+XrO,UAA/X,EAA2Y7O,EAA3Y,EAA+YE,EAA/Y,EAAmZid,8BAAnZ,EAAmbC,oBAAnb,EAAyctiB,IAAzc,EAA+cuiB,gBAA/c,EAAieC,cAAje,EAAif/c,EAAjf,EAAqfgd,gBAArf,EAAugBC,aAAvgB,EAAshB/c,EAAthB,EAA0hBgd,cAA1hB,EAA0iBC,oBAA1iB,EAAgkBC,WAAhkB,EAA6kBhd,EAA7kB,EAAilBid,sBAAjlB,EAAymB7c,KAAzmB,EAAgnB8c,mBAAhnB;;AACA,QAAIrvD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBiiB,gBAAnC;AACD;;AACDsB,IAAAA,oBAAoB,GAAG,IAAII,IAAJ,GAAWC,OAAX,EAAvB;AACA5jC,IAAAA,MAAM,GAAG,IAAT;AACAhO,IAAAA,OAAO,GAAG,IAAV;AACAqmB,IAAAA,mBAAmB,GAAG,EAAtB;AACAC,IAAAA,0BAA0B,GAAG,EAA7B;AACAC,IAAAA,sCAAsC,GAAG,EAAzC;AACAjM,IAAAA,mBAAmB,GAAG,KAAtB;AACAu2B,IAAAA,8BAA8B,GAAG,CAAjC;AACAT,IAAAA,uBAAuB,GAAG,EAA1B;AACAD,IAAAA,uBAAuB,GAAG,EAA1B;AACAxjB,IAAAA,CAAC,GAAG,CAAJ,CAfsE,CAgBtE;AACA;AACA;AACA;;AACA6jB,IAAAA,cAAc,GAAG;AACfqB,MAAAA,gBAAgB,EAAE,EADH;AAEfC,MAAAA,UAAU,EAAE;AAFG,KAAjB;AAIAT,IAAAA,aAAa,GAAGpB,gBAAhB,CAxBsE,CAyBtE;AACA;;AACA,WAAO,CAAP,EAAU;AACR,UAAI;AACFnoC,QAAAA,YAAY,GAAG,EAAf;AACA9I,QAAAA,WAAW;;AACX,YAAI3c,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,oCAAZ;AACD;;AACDrB,QAAAA,CAAC,GAAGzK,IAAI,CAAC+tB,gBAAgB,CAAClZ,SAAjB,CAA2B8Z,8BAA3B,CAAD,CAAR;;AACA,YAAIxuD,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,SAAZ;AACD;;AACDpT,QAAAA,GAAG;AACH5b,QAAAA,WAAW;AACZ,OAZD,CAYE,OAAO+yC,MAAP,EAAe;AACfthB,QAAAA,KAAK,GAAGshB,MAAR;;AACA,YAAI9+C,cAAJ,EAAoB;AAClB66B,UAAAA,OAAO,CAACE,GAAR,CAAYyC,KAAZ;AACD;;AACD3oB,QAAAA,YAAY,GAAG2oB,KAAK,GAAG,EAAvB,CALe,CAMf;;AACApP,QAAAA,iBAAiB;AACjB;AACD;;AACD,UAAIsL,CAAC,KAAK,CAAV,EAAa;AACX;AACD;;AACDkkB,MAAAA,8BAA8B,IAAIlkB,CAAlC;AACD;;AACD2kB,IAAAA,cAAc,GAAG,EAAjB,CAvDsE,CAwDtE;AACA;;AACA,QAAIjvD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,yCAAZ;AACD;;AACDsjB,IAAAA,cAAc,IAAI,0BAAlB;;AACA,SAAKnT,GAAL,IAAY9X,mBAAZ,EAAiC;AAC/BuO,MAAAA,KAAK,GAAGvO,mBAAmB,CAAC8X,GAAD,CAA3B;;AACA,UAAI97C,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,cAAcmQ,GAAd,GAAoB,eAAhC;AACD;;AACDqS,MAAAA,cAAc,CAACqB,gBAAf,CAAgCxyB,IAAhC,CAAqC8e,GAArC;AACAmT,MAAAA,cAAc,IAAI,eAAenT,GAAf,GAAqB,eAAvC;;AACA,WAAK1P,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAGiE,KAAK,CAACvgB,MAAzB,EAAiCoa,EAAE,GAAGkC,GAAtC,EAA2ClC,EAAE,EAA7C,EAAiD;AAC/CzB,QAAAA,CAAC,GAAG4H,KAAK,CAACnG,EAAD,CAAT;;AACA,YAAIpsC,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,SAAShB,CAArB;AACD;;AACD,YAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,GAAb,EAAkB;AAChBwjB,UAAAA,cAAc,CAACsB,UAAf,CAA0BzyB,IAA1B,CAA+B2N,CAA/B;AACD;;AACDskB,QAAAA,cAAc,IAAItkB,CAAC,GAAG,IAAtB;AACD;;AACDskB,MAAAA,cAAc,IAAI,IAAlB;AACD;;AACDA,IAAAA,cAAc,IAAI,IAAlB,CAjFsE,CAkFtE;;AACA,QAAIjvD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,6CAAZ;AACD;;AACDsjB,IAAAA,cAAc,IAAI,8BAAlB;;AACA,SAAK5iB,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAG7K,0BAA0B,CAACjS,MAA/C,EAAuDqa,EAAE,GAAGyC,IAA5D,EAAkEzC,EAAE,EAApE,EAAwE;AACtEyP,MAAAA,GAAG,GAAG7X,0BAA0B,CAACoI,EAAD,CAAhC;;AACA,UAAI8hB,cAAc,CAACsB,UAAf,CAA0Bza,OAA1B,CAAkC8G,GAAlC,MAA2C,CAAC,CAAhD,EAAmD;AACjDqS,QAAAA,cAAc,CAACsB,UAAf,CAA0BzyB,IAA1B,CAA+B8e,GAA/B;AACAmT,QAAAA,cAAc,IAAInT,GAAG,GAAG,IAAxB;AACD;AACF;;AACDmT,IAAAA,cAAc,IAAI,IAAlB,CA9FsE,CA+FtE;;AACA,QAAIjvD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,6DAAZ;AACD;;AACDsjB,IAAAA,cAAc,IAAI,8CAAlB;;AACA,SAAK9d,EAAE,GAAG,CAAL,EAAQR,IAAI,GAAGzM,sCAAsC,CAAClS,MAA3D,EAAmEmf,EAAE,GAAGR,IAAxE,EAA8EQ,EAAE,EAAhF,EAAoF;AAClF2K,MAAAA,GAAG,GAAG5X,sCAAsC,CAACiN,EAAD,CAA5C;;AACA,UAAIgd,cAAc,CAACsB,UAAf,CAA0Bza,OAA1B,CAAkC8G,GAAlC,MAA2C,CAAC,CAAhD,EAAmD;AACjDqS,QAAAA,cAAc,CAACsB,UAAf,CAA0BzyB,IAA1B,CAA+B8e,GAA/B;AACAmT,QAAAA,cAAc,IAAInT,GAAG,GAAG,IAAxB;AACD;AACF;;AACDmT,IAAAA,cAAc,IAAI,IAAlB,CA3GsE,CA4GtE;;AACAd,IAAAA,cAAc,CAACsB,UAAf,CAA0BzyB,IAA1B,CAA+B,oBAA/B;;AACA,QAAI/E,mBAAJ,EAAyB;AACvBk2B,MAAAA,cAAc,CAACqB,gBAAf,CAAgCxyB,IAAhC,CAAqC,oBAArC;AACAiyB,MAAAA,cAAc,IAAI,mCAAlB;AACD,KAjHqE,CAkHtE;AACA;;;AACA,QAAIjvD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,+CAAZ;AACD;;AACDsjB,IAAAA,cAAc,IAAI,gCAAlB;AACAF,IAAAA,gBAAgB,GAAG,CAAC,EAAD,EAAK,EAAL,CAAnB;AACAT,IAAAA,aAAa,GAAG,EAAhB;AACAK,IAAAA,8BAA8B,GAAG,EAAjC;;AACA,QAAIlpC,YAAY,KAAK,EAAjB,IAAuB,CAACooC,gBAA5B,EAA8C;AAC5C,UAAI;AACFE,QAAAA,uBAAuB,GAAG,EAA1B;AACAD,QAAAA,uBAAuB,GAAG,EAA1B;AACAiB,QAAAA,gBAAgB,GAAGvvB,GAAG,CAACouB,gBAAD,EAAmB,IAAnB,CAAtB;AACAG,QAAAA,uBAAuB,GAAG,EAA1B;AACAD,QAAAA,uBAAuB,GAAG,EAA1B;AACD,OAND,CAME,OAAO4B,MAAP,EAAe;AACfthB,QAAAA,KAAK,GAAGshB,MAAR;;AACA,YAAI9+C,cAAJ,EAAoB;AAClB66B,UAAAA,OAAO,CAACE,GAAR,CAAYyC,KAAZ;AACD;;AACD3oB,QAAAA,YAAY,GAAG2oB,KAAK,GAAG,EAAvB,CALe,CAMf;;AACA3iB,QAAAA,IAAI;AACL;;AACD,UAAIhG,YAAY,KAAK,EAArB,EAAyB;AACvB,aAAKq2B,GAAL,IAAY9X,mBAAZ,EAAiC;AAC/BrmB,UAAAA,OAAO,GAAG,IAAV;;AACA,cAAI3d,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBmQ,GAAhB,GAAsB,OAAtB,GAAgC/xB,WAAW,CAACuc,UAAU,CAACwV,GAAD,CAAX,CAAX,CAA6BzQ,QAA7B,EAA5C;AACD;;AACD1tB,UAAAA,OAAO,GAAG,KAAV;;AACA,cAAI3d,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,gBAAgBmQ,GAAhB,GAAsB,eAAlC;AACD;;AACDmT,UAAAA,cAAc,IAAI,eAAenT,GAAf,GAAqB,eAAvC;AACA8S,UAAAA,oBAAoB,GAAG,EAAvB;AACAS,UAAAA,mBAAmB,GAAG,EAAtB;AACApB,UAAAA,kBAAkB,GAAG,EAArB;;AACAtvB,UAAAA,sBAAqB,CAACmd,GAAD,EAAM8S,oBAAN,EAA4B,EAA5B,EAAgCS,mBAAhC,EAAqD,EAArD,EAAyDpB,kBAAzD,CAArB;;AACA,eAAK5c,EAAE,GAAG,CAAL,EAAQT,IAAI,GAAGye,mBAAmB,CAACr9B,MAAxC,EAAgDqf,EAAE,GAAGT,IAArD,EAA2DS,EAAE,EAA7D,EAAiE;AAC/D1G,YAAAA,CAAC,GAAG0kB,mBAAmB,CAAChe,EAAD,CAAvB;;AACA,gBAAIrxC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,2BAA2BhB,CAAvC;AACD;AACF;;AACD,eAAK6G,EAAE,GAAG,CAAL,EAAQX,IAAI,GAAG+d,oBAAoB,CAAC58B,MAAzC,EAAiDwf,EAAE,GAAGX,IAAtD,EAA4DW,EAAE,EAA9D,EAAkE;AAChE7G,YAAAA,CAAC,GAAGikB,oBAAoB,CAACpd,EAAD,CAAxB;;AACA,gBAAIxxC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,SAAShB,CAArB;AACD;;AACDskB,YAAAA,cAAc,IAAItkB,CAAC,GAAG,IAAtB;AACD;;AACDskB,UAAAA,cAAc,IAAI,IAAlB;;AACA,eAAKvd,EAAE,GAAG,CAAL,EAAQZ,IAAI,GAAGmd,kBAAkB,CAACj8B,MAAvC,EAA+C0f,EAAE,GAAGZ,IAApD,EAA0DY,EAAE,EAA5D,EAAgE;AAC9D/G,YAAAA,CAAC,GAAGsjB,kBAAkB,CAACvc,EAAD,CAAtB;AACAud,YAAAA,cAAc,IAAI,MAAMtkB,CAAN,GAAU,IAA5B;AACD;;AACD,cAAI3qC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,uBAAuBmQ,GAAvB,GAA6B,OAA7B,GAAuC/xB,WAAW,CAACuc,UAAU,CAACwV,GAAD,CAAX,CAAX,CAA6BzQ,QAA7B,EAAnD;AACD,WAlC8B,CAmC/B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArO,UAAAA,IAAI,CAACjT,WAAW,CAACuc,UAAU,CAACwV,GAAD,CAAX,CAAZ,CAAJ,CA1C+B,CA2C/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA+S,UAAAA,gBAAgB,GAAG,EAAnB;AACAC,UAAAA,cAAc,GAAG,EAAjB;;AACA,eAAK/c,EAAE,GAAG,CAAL,EAAQhB,IAAI,GAAG6d,oBAAoB,CAAC58B,MAAzC,EAAiD+f,EAAE,GAAGhB,IAAtD,EAA4DgB,EAAE,EAA9D,EAAkE;AAChEqc,YAAAA,cAAc,GAAGQ,oBAAoB,CAAC7c,EAAD,CAArC;;AACA,gBAAIqc,cAAc,CAAC,CAAD,CAAd,KAAsB,GAA1B,EAA+B;AAC7BF,cAAAA,WAAW,GAAGE,cAAc,CAAC1Z,SAAf,CAAyB,CAAzB,CAAd;AACAga,cAAAA,kBAAkB,GAAGpoB,UAAU,CAAC4nB,WAAD,CAA/B;AACAO,cAAAA,aAAa,GAAGnoB,UAAU,CAAC,0CAA0C4nB,WAA3C,CAA1B;AACAW,cAAAA,gBAAgB,CAAC7xB,IAAjB,CAAsB0xB,kBAAtB;AACAI,cAAAA,cAAc,CAAC9xB,IAAf,CAAoByxB,aAApB;AACAzxB,cAAAA,IAAI,CAAC0xB,kBAAD,CAAJ;AACA1xB,cAAAA,IAAI,CAACyxB,aAAD,CAAJ;;AACA9qB,cAAAA,MAAK;;AACL,kBAAI3jC,KAAJ,EAAW;AACTyrC,gBAAAA,OAAO,CAACE,GAAR,CAAY,yBAAyBzI,KAAK,CAACqC,GAAG,GAAG,CAAP,CAA1C;AACD;AACF;AACF;;AACD,cAAI;AACFvD,YAAAA,yBAAyB;AAC1B,WAFD,CAEE,OAAO0tB,MAAP,EAAe;AACfthB,YAAAA,KAAK,GAAGshB,MAAR;;AACA,gBAAI9+C,cAAJ,EAAoB;AAClB66B,cAAAA,OAAO,CAACE,GAAR,CAAYyC,KAAZ;AACD;;AACD3oB,YAAAA,YAAY,GAAG2oB,KAAK,GAAG,EAAvB,CALe,CAMf;;AACA3iB,YAAAA,IAAI;AACL;;AACD,eAAK8iC,sBAAsB,GAAGtc,EAAE,GAAG,CAA9B,EAAiC3F,IAAI,GAAGuiB,gBAAgB,CAAC78B,MAA9D,EAAuE,KAAKsa,IAAL,GAAY2F,EAAE,GAAG3F,IAAjB,GAAwB2F,EAAE,GAAG3F,IAApG,EAA2GiiB,sBAAsB,GAAG,KAAKjiB,IAAL,GAAY,EAAE2F,EAAd,GAAmB,EAAEA,EAAzJ,EAA6J;AAC3J;AACAjV,YAAAA,IAAI,CAAC8xB,cAAc,CAACP,sBAAD,CAAf,CAAJ;AACAvxB,YAAAA,IAAI,CAAC6xB,gBAAgB,CAACN,sBAAD,CAAjB,CAAJ;;AACA5qB,YAAAA,MAAK;AACN;;AACD1mB,UAAAA,kDAAkD;;AAClD,cAAIwI,YAAY,KAAK,EAArB,EAAyB;AACvB0pC,YAAAA,WAAW,GAAG52B,GAAG,EAAjB,CADuB,CAEvB;AACA;AACA;;AACA62B,YAAAA,sBAAsB,GAAG,EAAzB;;AACArxC,YAAAA,mBAAkB,CAACoxC,WAAD,EAAcC,sBAAd,CAAlB;;AACArB,YAAAA,uBAAuB,GAAG,EAA1B;AACAD,YAAAA,uBAAuB,GAAG,EAA1B;AACAnwC,YAAAA,OAAO,GAAG,IAAV;AACA0wC,YAAAA,aAAa,GAAGc,WAAW,CAAC9jB,QAAZ,EAAhB;AACA1tB,YAAAA,OAAO,GAAG,KAAV;AACA6gC,YAAAA,aAAa,GAAGrlB,SAAhB;AACAA,YAAAA,SAAS,GAAGzoB,eAAZ;AACAs9C,YAAAA,qCAAqC,GAAGmB,WAAW,CAAC9jB,QAAZ,EAAxC;AACAlS,YAAAA,SAAS,GAAGqlB,aAAZ;;AACA,gBAAI6Q,mBAAmB,CAACra,OAApB,CAA4B8G,GAA5B,MAAqC,CAAC,CAA1C,EAA6C;AAC3CwS,cAAAA,aAAa,IAAI,QAAQxS,GAAR,GAAc,qDAA/B;AACA6S,cAAAA,8BAA8B,IAAI,MAAM7S,GAAN,GAAY,qDAA9C;AACD,aAHD,MAGO;AACL;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc;AACA;AACAsT,cAAAA,sBAAsB,GAAGA,sBAAsB,CAACvnC,MAAvB,CAA8B,UAASmjB,CAAT,EAAY;AACjE,uBAAOjS,uDAAuD,CAACic,OAAxD,CAAgEhK,CAAC,GAAG,EAApE,MAA4E,CAAC,CAApF;AACD,eAFwB,CAAzB,CAvBK,CA0BL;AACA;;AACAokB,cAAAA,sBAAsB,GAAGA,sBAAsB,CAACvnC,MAAvB,CAA8B,UAASmjB,CAAT,EAAY;AACjE,uBAAO4jB,oBAAoB,CAAC5Z,OAArB,CAA6BhK,CAAC,GAAG,EAAjC,MAAyC,CAAC,CAA1C,IAA+C4jB,oBAAoB,CAAC5Z,OAArB,CAA6B,OAAOhK,CAAP,GAAW,EAAxC,MAAgD,CAAC,CAAvG;AACD,eAFwB,CAAzB;;AAGA,kBAAIokB,sBAAsB,CAACp9B,MAAvB,KAAkC,CAAtC,EAAyC;AACvCquB,gBAAAA,UAAU,GAAG,GAAb;;AACA,qBAAKlO,EAAE,GAAG,CAAL,EAAQnB,IAAI,GAAGoe,sBAAsB,CAACp9B,MAA3C,EAAmDmgB,EAAE,GAAGnB,IAAxD,EAA8DmB,EAAE,EAAhE,EAAoE;AAClExH,kBAAAA,CAAC,GAAGykB,sBAAsB,CAACjd,EAAD,CAA1B;;AACA,sBAAIxH,CAAC,CAAChB,SAAF,KAAgBmS,GAApB,EAAyB;AACvBuE,oBAAAA,UAAU,IAAI1V,CAAC,CAAChB,SAAF,GAAc,IAA5B;AACD;AACF,iBAPsC,CAQvC;;;AACA0W,gBAAAA,UAAU,GAAGA,UAAU,CAACvB,OAAX,CAAmB,OAAnB,EAA4B,EAA5B,CAAb;AACAuB,gBAAAA,UAAU,IAAI,GAAd;AACAiO,gBAAAA,aAAa,IAAIxS,GAAG,GAAG,cAAN,GAAuBuE,UAAvB,GAAoC,cAApC,GAAqDgO,aAArD,GAAqE,OAAtF;AACAM,gBAAAA,8BAA8B,IAAI7S,GAAG,GAAGuE,UAAN,GAAmB,KAAnB,GAA2B2N,qCAA7D;AACD,eAbD,MAaO;AACLM,gBAAAA,aAAa,IAAIxS,GAAG,GAAG,KAAN,GAAcuS,aAAd,GAA8B,GAA/C;AACAM,gBAAAA,8BAA8B,IAAI7S,GAAG,GAAG,KAAN,GAAckS,qCAAhD;AACD;AACF;;AACDM,YAAAA,aAAa,IAAI,IAAjB;AACAK,YAAAA,8BAA8B,IAAI,IAAlC;;AACA,gBAAI3uD,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,SAAS2iB,aAArB;AACD;AACF;AACF;AACF;AACF,KAvTqE,CAwTtE;;;AACAA,IAAAA,aAAa,GAAGA,aAAa,CAACxP,OAAd,CAAsB,OAAtB,EAA+B,EAA/B,CAAhB;AACA6P,IAAAA,8BAA8B,GAAGA,8BAA8B,CAAC7P,OAA/B,CAAuC,OAAvC,EAAgD,EAAhD,CAAjC,CA1TsE,CA2TtE;;AACA9a,IAAAA,mBAAmB,GAAG,EAAtB;AACAC,IAAAA,0BAA0B,GAAG,EAA7B;AACAhM,IAAAA,mBAAmB,GAAG,KAAtB;AACAiM,IAAAA,sCAAsC,GAAG,EAAzC;;AACA,QAAIlkC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,sBAAsBsjB,cAAlC;AACD;;AACD,QAAI56C,aAAJ,EAAmB;AACjBo3B,MAAAA,OAAO,CAACE,GAAR,CAAY,wCAAwCqjB,aAAxC,GAAwD,KAAxD,IAAkE,IAAIM,IAAJ,GAAWC,OAAX,EAAD,GAAyBL,oBAA1F,IAAkH,IAA9H;AACD;;AACD,WAAO,CAACD,cAAD,EAAiBF,gBAAgB,CAAC,CAAD,CAAjC,EAAsCT,aAAtC,EAAqDK,8BAArD,EAAqFI,gBAAgB,CAAC,CAAD,CAArG,EAA0GtpC,YAA1G,EAAwH0oC,cAAxH,CAAP;AACD,GAvUD;;AAyUAxvB,EAAAA,sBAAqB,GAAG,+BAASgxB,mBAAT,EAA8BC,iCAA9B,EAAiEC,0BAAjE,EAA6FR,mBAA7F,EAAkHS,iBAAlH,EAAqI7B,kBAArI,EAAyJ;AAC/K,QAAI8B,iBAAJ,EAAuBplB,CAAvB,EAA0Bb,CAA1B,EAA6BsC,EAA7B,EAAiCkC,GAAjC,EAAsCQ,IAAtC,EAA4CzC,EAA5C,EAAgDC,IAAhD;AACAujB,IAAAA,0BAA0B,CAAC7yB,IAA3B,CAAgC2yB,mBAAhC,EAF+K,CAG/K;;AACA,QAAI3rB,mBAAmB,CAAC8rB,iBAAiB,CAACA,iBAAiB,CAAC99B,MAAlB,GAA2B,CAA5B,CAAlB,CAAnB,IAAwE,IAA5E,EAAkF;AAChF,UAAIgS,mBAAmB,CAAC8rB,iBAAiB,CAACA,iBAAiB,CAAC99B,MAAlB,GAA2B,CAA5B,CAAlB,CAAnB,CAAqEgjB,OAArE,CAA6E,MAAM2a,mBAAnF,MAA4G,CAAC,CAAjH,EAAoH;AAClH,YAAI3vD,KAAJ,EAAW;AACTyrC,UAAAA,OAAO,CAACE,GAAR,CAAY,uCAAuCgkB,mBAAvC,GAA6D,wDAAzE;AACD;;AACD,YAAIC,iCAAiC,CAAC5a,OAAlC,CAA0C,MAAM2a,mBAAhD,MAAyE,CAAC,CAA1E,IAA+EC,iCAAiC,CAAC5a,OAAlC,CAA0C2a,mBAA1C,MAAmE,CAAC,CAAvJ,EAA0J;AACxJC,UAAAA,iCAAiC,CAAC5yB,IAAlC,CAAuC2yB,mBAAvC;AACD;;AACD,eAAOC,iCAAP;AACD;AACF;;AACDE,IAAAA,iBAAiB,CAAC9yB,IAAlB,CAAuB2yB,mBAAvB;;AACA,QAAI3rB,mBAAmB,CAAC2rB,mBAAD,CAAnB,IAA4C,IAAhD,EAAsD;AACpD;AACA;AACA,UAAIC,iCAAiC,CAAC5a,OAAlC,CAA0C2a,mBAA1C,MAAmE,CAAC,CAAxE,EAA2E;AACzEC,QAAAA,iCAAiC,CAAC5yB,IAAlC,CAAuC2yB,mBAAvC;AACD;;AACD,aAAOC,iCAAP;AACD,KAPD,MAOO;AACLtjB,MAAAA,IAAI,GAAGtI,mBAAmB,CAAC2rB,mBAAD,CAA1B,CADK,CAEL;;AACA,WAAKvjB,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAGhC,IAAI,CAACta,MAAxB,EAAgCoa,EAAE,GAAGkC,GAArC,EAA0ClC,EAAE,EAA5C,EAAgD;AAC9CzB,QAAAA,CAAC,GAAG2B,IAAI,CAACF,EAAD,CAAR,CAD8C,CAE9C;AACA;AACA;AACA;AACA;;AACA,YAAI0jB,iBAAiB,CAAC9a,OAAlB,CAA0BrK,CAA1B,MAAiC,CAAC,CAAtC,EAAyC;AACvC,cAAI3qC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,gBAAZ;AACD;;AACDokB,UAAAA,iBAAiB,GAAG,EAApB;;AACA,eAAK1jB,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAGghB,iBAAiB,CAAC99B,MAAtC,EAA8Cqa,EAAE,GAAGyC,IAAnD,EAAyDzC,EAAE,EAA3D,EAA+D;AAC7DvC,YAAAA,CAAC,GAAGgmB,iBAAiB,CAACzjB,EAAD,CAArB;;AACA,gBAAIgjB,mBAAmB,CAACra,OAApB,CAA4BlL,CAA5B,MAAmC,CAAC,CAAxC,EAA2C;AACzCulB,cAAAA,mBAAmB,CAACryB,IAApB,CAAyB8M,CAAzB;AACD;;AACD,gBAAI9pC,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY7B,CAAC,GAAG,OAAhB;AACD;;AACDimB,YAAAA,iBAAiB,IAAIjmB,CAAC,GAAG,OAAzB;AACD;;AACD,cAAI9pC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,eAAehB,CAAf,GAAmB,QAA/B;AACD;;AACDolB,UAAAA,iBAAiB,IAAI,eAAeplB,CAAf,GAAmB,QAAxC;AACAsjB,UAAAA,kBAAkB,CAACjxB,IAAnB,CAAwB+yB,iBAAxB,EAnBuC,CAoBvC;AACA;AACA;AACA;AACA;;AACA,cAAIV,mBAAmB,CAACra,OAApB,CAA4BrK,CAA5B,MAAmC,CAAC,CAAxC,EAA2C;AACzC0kB,YAAAA,mBAAmB,CAACryB,IAApB,CAAyB2N,CAAzB;AACD;AACF,SA5BD,MA4BO;AACL;AACAhM,UAAAA,sBAAqB,CAACgM,CAAD,EAAIilB,iCAAJ,EAAuCC,0BAAvC,EAAmER,mBAAnE,EAAwFS,iBAAxF,EAA2G7B,kBAA3G,CAArB;;AACA6B,UAAAA,iBAAiB,CAACv3B,GAAlB;AACD;AACF,OA3CI,CA4CL;;;AACA,aAAOq3B,iCAAP;AACD;AACF,GAtED,CAlh3BU,CA0l3BV;;;AACAjkC,EAAAA,MAAM,GAAG,KAAT;AAEAiG,EAAAA,cAAc,GAAG,uEAAjB;;AAEAkU,EAAAA,uBAAuB,GAAG,iCAASkqB,eAAT,EAA0B;AAClDA,IAAAA,eAAe,GAAGA,eAAe,CAAClR,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CAAlB;AACAkR,IAAAA,eAAe,GAAGA,eAAe,CAAClR,OAAhB,CAAwB,IAAxB,EAA8B,eAA9B,CAAlB;AACAkR,IAAAA,eAAe,GAAGA,eAAe,CAAClR,OAAhB,CAAwB,IAAI6J,MAAJ,CAAWsH,MAAM,CAACC,YAAP,CAAoBxqB,iBAApB,CAAX,EAAmD,GAAnD,CAAxB,EAAiF,gBAAjF,CAAlB;AACAsqB,IAAAA,eAAe,GAAGA,eAAe,CAAClR,OAAhB,CAAwB,IAAI6J,MAAJ,CAAWsH,MAAM,CAACC,YAAP,CAAoBrtC,eAApB,CAAX,EAAiD,GAAjD,CAAxB,EAA+E,iBAA/E,CAAlB;AACAmtC,IAAAA,eAAe,GAAGA,eAAe,CAAClR,OAAhB,CAAwB,OAAxB,EAAiC,wBAAjC,CAAlB;AACAkR,IAAAA,eAAe,GAAGA,eAAe,CAAClR,OAAhB,CAAwB,IAAxB,EAA8B,yBAA9B,CAAlB;AACAkR,IAAAA,eAAe,GAAGA,eAAe,CAAClR,OAAhB,CAAwB,GAAxB,EAA6B,gBAAgBltB,cAAhB,GAAiC,qBAA9D,CAAlB;AACAo+B,IAAAA,eAAe,GAAG,cAAcA,eAAe,CAAClR,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CAAd,GAAmD,KAArE,CARkD,CASlD;;AACA,WAAOkR,eAAP;AACD,GAXD,CA/l3BU,CA4m3BV;AACA;AACA;;;AACAv6B,EAAAA,aAAa,GAAG,uBAAS06B,iBAAT,EAA4B;AAC1CA,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACrR,OAAlB,CAA0B,IAAI6J,MAAJ,CAAWsH,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAX,EAAsC,GAAtC,CAA1B,EAAsED,MAAM,CAACC,YAAP,CAAoBrtC,eAApB,CAAtE,CAApB;AACAstC,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACrR,OAAlB,CAA0B,IAAI6J,MAAJ,CAAWsH,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAX,EAAsC,GAAtC,CAA1B,EAAsED,MAAM,CAACC,YAAP,CAAoBrtC,eAApB,CAAtE,CAApB;AACAstC,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACrR,OAAlB,CAA0B,IAAI6J,MAAJ,CAAWsH,MAAM,CAACC,YAAP,CAAoB,KAApB,CAAX,EAAuC,GAAvC,CAA1B,EAAuED,MAAM,CAACC,YAAP,CAAoBrtC,eAApB,CAAvE,CAApB;AACAstC,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACrR,OAAlB,CAA0B,IAAI6J,MAAJ,CAAWsH,MAAM,CAACC,YAAP,CAAoB,KAApB,CAAX,EAAuC,GAAvC,CAA1B,EAAuED,MAAM,CAACC,YAAP,CAAoBrtC,eAApB,CAAvE,CAApB;AACAstC,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACrR,OAAlB,CAA0B,IAAI6J,MAAJ,CAAWsH,MAAM,CAACC,YAAP,CAAoB,KAApB,CAAX,EAAuC,GAAvC,CAA1B,EAAuED,MAAM,CAACC,YAAP,CAAoBrtC,eAApB,CAAvE,CAApB;AACA,WAAOstC,iBAAP;AACD,GAPD;;AASA97C,EAAAA,aAAa,GAAG,KAAhB;;AAEAmrB,EAAAA,GAAG,GAAG,aAASwvB,aAAT,EAA+C;AAAA,QAAvBoB,aAAuB,uEAAP,KAAO;AACnD,QAAItC,uBAAJ,EAA6BC,uBAA7B,EAAsDsC,oBAAtD,EAA4EC,oBAA5E,EAAkGliB,KAAlG,EAAyGmiB,mBAAzG,EAA8H5lB,CAA9H,EAAiI6jB,8BAAjI,EAAiKlkB,CAAjK,EAAoKkmB,kBAApK,EAAwLR,eAAxL,EAAyMS,SAAzM,EAAoNC,gBAApN;AACAD,IAAAA,SAAS,GAAG,IAAInB,IAAJ,GAAWC,OAAX,EAAZ,CAFmD,CAGnD;;AACAP,IAAAA,aAAa,GAAGv5B,aAAa,CAACu5B,aAAD,CAA7B,CAJmD,CAKnD;;AACA,QAAIA,aAAa,KAAK,UAAtB,EAAkC;AAChC2B,MAAAA,QAAQ;AACR;AACD;;AACD,QAAI,CAAChlC,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,IAAT;AACAF,MAAAA,IAAI;AACL;;AACDkf,IAAAA,CAAC,GAAG,CAAJ;AACAL,IAAAA,CAAC,GAAG,CAAJ;AACAkkB,IAAAA,8BAA8B,GAAG,CAAjC;AACAT,IAAAA,uBAAuB,GAAG,EAA1B;AACAD,IAAAA,uBAAuB,GAAG,EAA1B;;AACA,WAAO,CAAP,EAAU;AACR,UAAI;AACF;AACA;AACAroC,QAAAA,YAAY,GAAG,EAAf;AACA9I,QAAAA,WAAW;AACX2tB,QAAAA,CAAC,GAAGzK,IAAI,CAACmvB,aAAa,CAACta,SAAd,CAAwB8Z,8BAAxB,CAAD,CAAR;AACAt3B,QAAAA,EAAE,GAAGqB,GAAG,EAAR;AACA5b,QAAAA,WAAW;AACZ,OARD,CAQE,OAAO+yC,MAAP,EAAe;AACfthB,QAAAA,KAAK,GAAGshB,MAAR;;AACA,YAAI9+C,cAAJ,EAAoB;AAClB66B,UAAAA,OAAO,CAACE,GAAR,CAAYyC,KAAZ;AACD,SAJc,CAKf;;;AACA2f,QAAAA,uBAAuB,IAAI3f,KAAK,CAACuf,OAAjC;;AACA,YAAIyC,aAAJ,EAAmB;AACjB;AACAJ,UAAAA,eAAe,GAAGlqB,uBAAuB,CAACsI,KAAK,CAACuf,OAAP,CAAzC;AACAG,UAAAA,uBAAuB,IAAIkC,eAA3B;AACD;;AACDhxB,QAAAA,iBAAiB;AACjB;AACD;;AACD,UAAIsL,CAAC,KAAK,CAAV,EAAa;AACX;AACD,OA1BO,CA2BR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAkkB,MAAAA,8BAA8B,IAAIlkB,CAAlC;AACAtN,MAAAA,IAAI,CAAC9F,EAAD,CAAJ,CArCQ,CAsCR;;AACAq5B,MAAAA,mBAAmB,GAAG,KAAtB;;AACA,UAAI;AACF9sB,QAAAA,6BAA6B,GAAG,EAAhC;AACA6B,QAAAA,cAAc,GAFZ,CAGF;AACA;;AACAnO,QAAAA,EAAE,GAAGoB,GAAG,EAAR;AACA5b,QAAAA,WAAW;;AACX,YAAIoU,KAAK,CAACoG,EAAD,CAAT,EAAe;AACb,cAAIn3B,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAYxU,EAAE,CAACyS,GAAf;AACD;;AACD,cAAI5pC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,IAAZ;AACD;AACF,SAdC,CAeF;AACA;;;AACA,YAAIxU,EAAE,KAAK4M,MAAM,CAACn1B,GAAD,CAAjB,EAAwB;AACtB;AACA0hD,UAAAA,oBAAoB,GAAG7sB,6BAAvB;;AACA,cAAI2sB,aAAJ,EAAmB;AACjBC,YAAAA,oBAAoB,GAAG,OAAO5sB,6BAAP,GAAuC,IAA9D;AACD;AACF,SAND,MAMO;AACL;AACA;AACA6sB,UAAAA,oBAAoB,GAAG30B,UAAU,CAACxE,EAAD,CAAjC;AACAm5B,UAAAA,oBAAoB,IAAI,IAAxB,CAJK,CAKL;;AACA,cAAIF,aAAJ,EAAmB;AACjBC,YAAAA,oBAAoB,GAAG,OAAOvyC,iCAAiC,CAACqZ,EAAD,CAAxC,GAA+C,IAAtE;;AACA,gBAAIn3B,KAAJ,EAAW;AACTyrC,cAAAA,OAAO,CAACE,GAAR,CAAY,2BAA2B0kB,oBAAvC;AACD;AACF;AACF;;AACDtC,QAAAA,uBAAuB,IAAIuC,oBAA3B;;AACA,YAAIF,aAAJ,EAAmB;AACjBtC,UAAAA,uBAAuB,IAAIuC,oBAA3B;AACD;;AACD,YAAIz/C,cAAJ,EAAoB;AAClB,cAAI5Q,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,WAAZ;AACD;;AACD,cAAI3rC,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY2kB,oBAAZ;AACD;AACF,SA/CC,CAgDF;;;AACA,YAAI1/C,cAAJ,EAAoB;AAClB,cAAI5Q,KAAJ,EAAW;AACTyrC,YAAAA,OAAO,CAACE,GAAR,CAAY,UAAZ;AACD;;AACDzS,UAAAA,YAAY,CAAC/B,EAAD,CAAZ;AACD;;AACD,YAAIi5B,aAAJ,EAAmB;AACjBtC,UAAAA,uBAAuB,IAAI,IAA3B;AACD;AACF,OA1DD,CA0DE,OAAO4B,MAAP,EAAe;AACfthB,QAAAA,KAAK,GAAGshB,MAAR;AACAa,QAAAA,mBAAmB,GAAG,IAAtB;AACAD,QAAAA,oBAAoB,GAAGliB,KAAK,CAACuf,OAA7B;;AACA,YAAIyC,aAAJ,EAAmB;AACjBC,UAAAA,oBAAoB,GAAGvqB,uBAAuB,CAACsI,KAAK,CAACuf,OAAP,CAA9C;AACD;;AACD,YAAI/8C,cAAJ,EAAoB;AAClB66B,UAAAA,OAAO,CAACE,GAAR,CAAY2kB,oBAAZ;AACD;;AACDvC,QAAAA,uBAAuB,IAAIuC,oBAA3B;;AACA,YAAIA,oBAAoB,KAAK,EAA7B,EAAiC;AAC/BvC,UAAAA,uBAAuB,IAAI,IAA3B;AACD;;AACD,YAAIqC,aAAJ,EAAmB;AACjBtC,UAAAA,uBAAuB,IAAIuC,oBAA3B;AACAvC,UAAAA,uBAAuB,IAAI,IAA3B;AACD;;AACDriC,QAAAA,IAAI;AACL;AACF;;AACD,QAAIsiC,uBAAuB,CAACA,uBAAuB,CAAC/7B,MAAxB,GAAiC,CAAlC,CAAvB,KAAgE,IAApE,EAA0E;AACxE+7B,MAAAA,uBAAuB,GAAGA,uBAAuB,CAACrZ,SAAxB,CAAkC,CAAlC,EAAqCqZ,uBAAuB,CAAC/7B,MAAxB,GAAiC,CAAtE,CAA1B;AACD;;AACD,QAAIo+B,aAAJ,EAAmB;AACjB,UAAItC,uBAAuB,CAACA,uBAAuB,CAAC97B,MAAxB,GAAiC,CAAlC,CAAvB,KAAgE,IAApE,EAA0E;AACxE87B,QAAAA,uBAAuB,GAAGA,uBAAuB,CAACpZ,SAAxB,CAAkC,CAAlC,EAAqCoZ,uBAAuB,CAAC97B,MAAxB,GAAiC,CAAtE,CAA1B;AACD;AACF;;AACD,QAAIo+B,aAAJ,EAAmB;AACjB,UAAIpwD,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,8BAA8BmiB,uBAA1C;AACD;;AACD0C,MAAAA,kBAAkB,GAAG,CAACzC,uBAAD,EAA0BD,uBAA1B,CAArB;AACD,KALD,MAKO;AACL0C,MAAAA,kBAAkB,GAAGzC,uBAArB;AACD;;AACD,QAAI15C,aAAJ,EAAmB;AACjBq8C,MAAAA,gBAAgB,GAAG,kBAAkB1B,aAAlB,GAAkC,KAAlC,IAA2C,IAAIM,IAAJ,GAAWC,OAAX,KAAuBkB,SAAlE,IAA+E,IAAlG;AACAhlB,MAAAA,OAAO,CAACE,GAAR,CAAY+kB,gBAAZ;AACD;;AACD3C,IAAAA,uBAAuB,GAAG,EAA1B;AACAD,IAAAA,uBAAuB,GAAG,EAA1B;AACA,WAAO0C,kBAAP;AACD,GAjKD;;AAmKA7zC,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAI4oB,GAAG,KAAK,CAAZ,EAAe;AACb;AACAhC,MAAAA,IAAI,CAAC,aAAD,CAAJ;AACD;;AACD,QAAI3a,KAAK,KAAKtU,GAAd,EAAmB;AACjB;AACAivB,MAAAA,IAAI,CAAC,aAAD,CAAJ;AACD;;AACD,QAAIjnB,4CAA4C,CAAC0V,MAA7C,KAAwD,CAA5D,EAA+D;AAC7D;AACAuR,MAAAA,IAAI,CAAC,mCAAD,CAAJ;AACD;;AACD,QAAI5d,kBAAkB,KAAK,CAA3B,EAA8B;AAC5B;AACA4d,MAAAA,IAAI,CAAC,mCAAD,CAAJ;AACD;;AACD,QAAI3d,eAAe,KAAK,CAAxB,EAA2B;AACzB;AACA,aAAO2d,IAAI,CAAC,oCAAD,CAAX;AACD;AACF,GArBD,CA7x3BU,CAoz3BV;AAEA;;;AACA+B,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAI8W,eAAJ,EAAqBwU,gBAArB,EAAuCC,gBAAvC;;AACA,QAAI7wD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,qBAAZ;AACD;;AACDhG,IAAAA,QAAQ,GAAG,CAAX;AACAkrB,IAAAA,gBAAgB,GAAG9sB,MAAM,CAAC9lC,UAAD,CAAzB;;AACA,QAAI8uB,kBAAkB,CAAChD,WAAW,CAAC8mC,gBAAD,CAAZ,CAAtB,EAAuD;AACrDxqC,MAAAA,SAAS,GAAG,CAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,GAAG,CAAZ;AACD;;AACDuqC,IAAAA,gBAAgB,GAAGvrB,GAAG,EAAtB;AACA3iC,IAAAA,IAAI;AACJ05C,IAAAA,eAAe,GAAG/W,GAAG,EAArB,CAd0B,CAe1B;;AACA,QAAI+W,eAAe,KAAKrY,MAAM,CAACn1B,GAAD,CAA9B,EAAqC;AACnC;AACD,KAlByB,CAmB1B;;;AACAsyB,IAAAA,WAAW,CAAC6C,MAAM,CAACh3B,IAAD,CAAP,EAAeqvC,eAAf,CAAX;;AACA,QAAI,CAACrvB,kBAAkB,CAAChD,WAAW,CAACga,MAAM,CAAC7lC,IAAD,CAAP,CAAZ,CAAvB,EAAoD;AAClD0b,MAAAA,KAAI;;AACJwiC,MAAAA,eAAe,GAAG/W,GAAG,EAArB;AACD,KAxByB,CAyB1B;AACA;AACA;;;AACA,QAAI,CAACurB,gBAAgB,KAAK7sB,MAAM,CAAC/wB,QAAD,CAA3B,IAAyC49C,gBAAgB,KAAK7sB,MAAM,CAAC7wB,QAAD,CAArE,KAAoFub,eAAe,CAAC2tB,eAAD,CAAvG,EAA0H,CAE1H;AACA;AACA;AACC,KALD,MAKO,IAAI3tB,eAAe,CAAC1E,WAAW,CAACga,MAAM,CAAC7wB,QAAD,CAAP,CAAZ,CAAnB,EAAoD;AACzD8pB,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAkS,MAAAA,WAAW,CAACvqB,QAAD,CAAX;AACA,aAAOywB,MAAK,EAAZ;AACD,KAJM,MAIA,IAAIlV,eAAe,CAAC1E,WAAW,CAACga,MAAM,CAAC/wB,QAAD,CAAP,CAAZ,CAAnB,EAAoD;AACzDgqB,MAAAA,IAAI,CAACzR,aAAD,CAAJ;AACAkS,MAAAA,WAAW,CAACzqB,QAAD,CAAX;AACA,aAAO2wB,MAAK,EAAZ;AACD;AACF,GA1CD;;AA4CAjnB,EAAAA,cAAc,GAAG,0BAAW;AAC1B,QAAIgJ,QAAJ,EAAc;AACZ,aAAO6d,IAAI,CAAC,SAAD,CAAX;AACD;AACF,GAJD,CAn23BU,CAy23BV;AACA;AACA;AACA;AACA;AACA;;;AACAvmB,EAAAA,uBAAuB,GAAG,mCAAW;AACnC;AACA,WAAO0F,WAAW,EAAlB;AACD,GAHD;;AAKAlE,EAAAA,8BAA8B,GAAG,wCAASsyC,oBAAT,EAA+B;AAC9D,QAAInmB,CAAJ,EAAOomB,SAAP,EAAkB3kB,EAAlB,EAAsBkC,GAAtB,EAA2BQ,IAA3B,EAAiCzC,EAAjC,EAAqC2kB,4BAArC,EAAmEC,gCAAnE;;AACA,QAAIjxD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,mCAAZ;AACD,KAJ6D,CAK9D;AAEA;AACA;;;AACAqlB,IAAAA,4BAA4B,GAAGF,oBAA/B;AACAC,IAAAA,SAAS,GAAG,IAAZ;AACAt1C,IAAAA,yBAAyB,GAAG,IAA5B,CAX8D,CAY9D;;AACAq1C,IAAAA,oBAAoB,GAAGr7B,aAAa,CAACq7B,oBAAD,CAApC;;AACA,QAAI,CAACC,SAAL,EAAgB;AACd3qB,MAAAA,6BAA6B,GAAG,EAAhC;AACA6qB,MAAAA,gCAAgC,GAAG,EAAnC;;AACA,WAAK7kB,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAGlI,6BAA6B,CAACpU,MAAjD,EAAyDoa,EAAE,GAAGkC,GAA9D,EAAmElC,EAAE,EAArE,EAAyE;AACvEzB,QAAAA,CAAC,GAAGvE,6BAA6B,CAACgG,EAAD,CAAjC,CADuE,CAEvE;;AACA6kB,QAAAA,gCAAgC,IAAI,mBAAmBv1C,GAAG,CAACivB,CAAD,CAAtB,GAA4B,GAA5B,GAAkCjvB,GAAG,CAACU,GAAG,CAACuuB,CAAD,CAAJ,CAArC,GAAgD,GAAhD,GAAsDjvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAACuuB,CAAD,CAAJ,CAAJ,CAAzD,GAAyE,KAA7G;AACD;;AACDjoB,MAAAA,WAAW;AACXouC,MAAAA,oBAAoB,GAAGG,gCAAgC,GAAGH,oBAA1D;;AACA,UAAI9wD,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,8CAA8CmlB,oBAA1D;AACD;AACF;;AACD,QAAI9wD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,uEAAZ;;AACA,WAAKU,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAG1I,6BAA6B,CAACpU,MAAlD,EAA0Dqa,EAAE,GAAGyC,IAA/D,EAAqEzC,EAAE,EAAvE,EAA2E;AACzE1B,QAAAA,CAAC,GAAGvE,6BAA6B,CAACiG,EAAD,CAAjC;AACAZ,QAAAA,OAAO,CAACE,GAAR,CAAYjwB,GAAG,CAACivB,CAAD,CAAH,GAAS,GAAT,GAAevuB,GAAG,CAACuuB,CAAD,CAAlB,GAAwB,GAApC;AACD;;AACDc,MAAAA,OAAO,CAACE,GAAR,CAAY,iCAAZ;AACD;;AACDlwB,IAAAA,yBAAyB,GAAG,KAA5B;AACA,WAAOwM,wBAAwB,CAAC6oC,oBAAD,EAAuB,IAAvB,CAAxB,CAAqD,CAArD,CAAP;AACD,GAtCD;;AAwCAryC,EAAAA,sCAAsC,GAAG,gDAASqyC,oBAAT,EAA+B;AACtE,QAAII,IAAJ,EAAU/C,cAAV,EAA0BxjB,CAA1B,EAA6BomB,SAA7B,EAAwC3kB,EAAxC,EAA4C+kB,WAA5C,EAAyD7iB,GAAzD,EAA8DQ,IAA9D,EAAoEzC,EAApE,EAAwE2kB,4BAAxE,EAAsGI,qBAAtG,EAA6H1iB,MAA7H,EAAqIsgB,aAArI,EAAoJqC,2BAApJ,EAAiLnC,oBAAjL,EAAuM+B,gCAAvM;AACAD,IAAAA,4BAA4B,GAAGF,oBAA/B;AACAC,IAAAA,SAAS,GAAG,IAAZ;AACAt1C,IAAAA,yBAAyB,GAAG,IAA5B;AACAyzC,IAAAA,oBAAoB,GAAG,IAAII,IAAJ,GAAWC,OAAX,EAAvB;;AACA,QAAIl7C,aAAJ,EAAmB;AACjBo3B,MAAAA,OAAO,CAACE,GAAR,CAAY,8DAA8DmlB,oBAA9D,GAAqF,OAArF,GAAgG,IAAIxB,IAAJ,EAA5G;AACD,KARqE,CAStE;AACA;AACA;AAEA;;;AACAwB,IAAAA,oBAAoB,GAAGr7B,aAAa,CAACq7B,oBAAD,CAApC;AACA9B,IAAAA,aAAa,GAAG8B,oBAAhB;;AACA,QAAI9wD,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,+EAAZ;;AACA,WAAKS,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAGlI,6BAA6B,CAACpU,MAAjD,EAAyDoa,EAAE,GAAGkC,GAA9D,EAAmElC,EAAE,EAArE,EAAyE;AACvEzB,QAAAA,CAAC,GAAGvE,6BAA6B,CAACgG,EAAD,CAAjC;AACAX,QAAAA,OAAO,CAACE,GAAR,CAAYjwB,GAAG,CAACivB,CAAD,CAAH,GAAS,GAAT,GAAevuB,GAAG,CAACuuB,CAAD,CAAlB,GAAwB,GAApC;AACD;;AACDc,MAAAA,OAAO,CAACE,GAAR,CAAY,iCAAZ;AACD;;AACD,QAAI,CAAColB,SAAL,EAAgB;AACd3qB,MAAAA,6BAA6B,GAAG,EAAhC;AACA6qB,MAAAA,gCAAgC,GAAG,EAAnC;;AACA,WAAK5kB,EAAE,GAAG,CAAL,EAAQyC,IAAI,GAAG1I,6BAA6B,CAACpU,MAAlD,EAA0Dqa,EAAE,GAAGyC,IAA/D,EAAqEzC,EAAE,EAAvE,EAA2E;AACzE1B,QAAAA,CAAC,GAAGvE,6BAA6B,CAACiG,EAAD,CAAjC,CADyE,CAEzE;;AACA4kB,QAAAA,gCAAgC,IAAI,mBAAmBv1C,GAAG,CAACivB,CAAD,CAAtB,GAA4B,GAA5B,GAAkCjvB,GAAG,CAACU,GAAG,CAACuuB,CAAD,CAAJ,CAArC,GAAgD,GAAhD,GAAsDjvB,GAAG,CAACU,GAAG,CAACA,GAAG,CAACuuB,CAAD,CAAJ,CAAJ,CAAzD,GAAyE,KAA7G;AACD;;AACDjoB,MAAAA,WAAW;AACXouC,MAAAA,oBAAoB,GAAGG,gCAAgC,GAAGH,oBAA1D;;AACA,UAAI9wD,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,8CAA8CmlB,oBAA1D;AACD;AACF,KArCqE,CAsCtE;;;AAtCsE,gCAuC0C7oC,wBAAwB,CAAC6oC,oBAAD,CAvClE;;AAAA;;AAuCrEO,IAAAA,2BAvCqE;AAuCxC3iB,IAAAA,MAvCwC;AAuChCwiB,IAAAA,IAvCgC;AAuC1BE,IAAAA,qBAvC0B;AAuCHD,IAAAA,WAvCG;AAuCU1rC,IAAAA,YAvCV;AAuCwB0oC,IAAAA,cAvCxB;AAwCtE1yC,IAAAA,yBAAyB,GAAG,KAA5B;;AACA,QAAI21C,qBAAqB,KAAK,EAA1B,IAAgC3rC,YAAY,KAAK,EAArD,EAAyD;AACvDipB,MAAAA,MAAM,IAAI,OAAO0iB,qBAAjB;;AACA,UAAI3rC,YAAY,KAAK,EAArB,EAAyB;AACvBipB,QAAAA,MAAM,IAAI,OAAOjpB,YAAjB;AACD;;AACDipB,MAAAA,MAAM,GAAGA,MAAM,CAACoQ,OAAP,CAAe,KAAf,EAAsB,MAAtB,CAAT;AACAqS,MAAAA,WAAW,IAAI,OAAO,IAAP,GAAcC,qBAAd,GAAsC,IAArD;;AACA,UAAI3rC,YAAY,KAAK,EAArB,EAAyB;AACvB0rC,QAAAA,WAAW,IAAIrrB,uBAAuB,CAACrgB,YAAD,CAAtC;AACD;;AACD0rC,MAAAA,WAAW,GAAGA,WAAW,CAACrS,OAAZ,CAAoB,KAApB,EAA2B,MAA3B,CAAd;AACD,KApDqE,CAqDtE;AACA;AACA;;;AACAqS,IAAAA,WAAW,GAAGA,WAAW,CAACrS,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd;AACAqS,IAAAA,WAAW,GAAGA,WAAW,CAACrS,OAAZ,CAAoB,cAApB,EAAoC,EAApC,CAAd;AACAoS,IAAAA,IAAI,GAAGA,IAAI,CAACpS,OAAL,CAAa,SAAb,EAAwB,EAAxB,CAAP;AACAoS,IAAAA,IAAI,GAAGA,IAAI,CAACpS,OAAL,CAAa,KAAb,EAAoB,MAApB,CAAP,CA3DsE,CA4DtE;AACA;AACA;;AACA,QAAIzqC,aAAJ,EAAmB;AACjBo3B,MAAAA,OAAO,CAACE,GAAR,CAAY,0FAA0FqjB,aAA1F,GAA0G,KAA1G,IAAoH,IAAIM,IAAJ,GAAWC,OAAX,EAAD,GAAyBL,oBAA5I,IAAoK,IAAhL;AACD;;AACD,WAAO;AACL;AACA;AACAgC,MAAAA,IAAI,EAAEA,IAHD;AAIL;AACAxiB,MAAAA,MAAM,EAAEyiB,WALH;AAMLA,MAAAA,WAAW,EAAEA,WANR;AAOLhD,MAAAA,cAAc,EAAEA;AAPX,KAAP;AASD,GA3ED;;AA6EA,GAAC,OAAO5iB,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,IAA9C,GAAqDA,OAArD,GAA+D,IAAhE,EAAsE/L,GAAtE,GAA4EA,GAA5E;AAEA,GAAC,OAAO+L,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,IAA9C,GAAqDA,OAArD,GAA+D,IAAhE,EAAsEtjB,wBAAtE,GAAiGA,wBAAjG;AAEA,GAAC,OAAOsjB,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,IAA9C,GAAqDA,OAArD,GAA+D,IAAhE,EAAsE/sB,8BAAtE,GAAuGA,8BAAvG;AAEA,GAAC,OAAO+sB,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,IAA9C,GAAqDA,OAArD,GAA+D,IAAhE,EAAsE9sB,sCAAtE,GAA+GA,sCAA/G;AAEA,GAAC,OAAO8sB,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,KAAK,IAA9C,GAAqDA,OAArD,GAA+D,IAAhE,EAAsEvuB,uBAAtE,GAAgGA,uBAAhG,CAj/3BU,CAm/3BV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACAuoB,EAAAA,GAAG,GAAG,CAAN,CAtg4BU,CAwg4BV;;AACA/P,EAAAA,WAAW,GAAG,CAAd;;AAEAwH,EAAAA,IAAI,GAAG,cAASiO,CAAT,EAAY;AACjB,QAAIA,CAAC,IAAI,IAAT,EAAe;AACb;AACD;;AACD,QAAIA,CAAC,CAACG,MAAF,IAAY,IAAhB,EAAsB;AACpB;AACD,KANgB,CAOjB;AACA;;;AACA,QAAIH,CAAC,KAAKlH,MAAM,CAACn1B,GAAD,CAAhB,EAAuB;AACrB4mB,MAAAA,WAAW;;AACX,UAAIx1B,KAAJ,EAAW;AACTyrC,QAAAA,OAAO,CAACE,GAAR,CAAY,0BAA0BnW,WAAtC;AACD;AACF,KAdgB,CAejB;AACA;;;AACA,QAAI+P,GAAG,IAAI3c,KAAX,EAAkB;AAChB2a,MAAAA,IAAI,CAAC,gBAAD,CAAJ;AACD;;AACD,WAAOL,KAAK,CAACqC,GAAG,EAAJ,CAAL,GAAe0F,CAAtB;AACD,GArBD,CA3g4BU,CAki4BV;;;AACAtX,EAAAA,OAAO,GAAG,iBAAS29B,QAAT,EAAmB;AAC3B,QAAI/rB,GAAG,IAAI+rB,QAAX,EAAqB;AACnB;AACA;AACA/rB,MAAAA,GAAG,GAAG+rB,QAAN;AACA;AACD,KAN0B,CAO3B;AACA;AACA;AACA;AACA;;;AACA,WAAO/rB,GAAG,GAAG+rB,QAAb,EAAuB;AACrBpuB,MAAAA,KAAK,CAACqC,GAAD,CAAL,GAAa,IAAb;AACAA,MAAAA,GAAG;AACJ;AACF,GAhBD;;AAkBAF,EAAAA,GAAG,GAAG,eAAW;AACf,WAAOnC,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAZ;AACD,GAFD;;AAIAhN,EAAAA,GAAG,GAAG,eAAW;AACf,QAAIg5B,mBAAJ,CADe,CAEf;AACA;;AACA,QAAIhsB,GAAG,KAAK,CAAZ,EAAe;AACb;AACAhC,MAAAA,IAAI,CAAC,iBAAD,CAAJ;AACD;;AACD,QAAIL,KAAK,CAACqC,GAAG,GAAG,CAAP,CAAL,IAAkB,IAAtB,EAA4B;AAC1B;AACD;;AACDgsB,IAAAA,mBAAmB,GAAGruB,KAAK,CAAC,EAAEqC,GAAH,CAA3B,CAXe,CAaf;AACA;AACA;AACA;AACA;;AACArC,IAAAA,KAAK,CAACqC,GAAD,CAAL,GAAa,IAAb;AACA,WAAOgsB,mBAAP;AACD,GApBD,CAzj4BU,CA+k4BV;;;AACAl0B,EAAAA,UAAU,GAAG,oBAASiN,CAAT,EAAY;AACvB,QAAIK,CAAJ,EAAOyB,EAAP,EAAWE,IAAX,EAAiBrC,OAAjB;AACAU,IAAAA,CAAC,GAAG,CAAJ;AACA/hB,IAAAA,KAAK,IAAI0hB,CAAT;;AACA,QAAI1hB,KAAK,GAAG2c,GAAZ,EAAiB;AACf;AACAhC,MAAAA,IAAI,CAAC,qCAAD,CAAJ;AACD;;AACD0G,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGhC,CAAxB,EAA4B,KAAKgC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAzD,EAAgE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAzF,EAA6F;AAC3FnC,MAAAA,OAAO,CAACjN,IAAR,CAAakG,KAAK,CAACta,KAAK,GAAG+hB,CAAT,CAAL,GAAmB5G,MAAM,CAACn1B,GAAD,CAAtC;AACD;;AACD,WAAOq7B,OAAP;AACD,GAbD,CAhl4BU,CA+l4BV;;;AACAxR,EAAAA,SAAS,GAAG,mBAAS6R,CAAT,EAAY;AACtB1hB,IAAAA,KAAK,IAAI0hB,CAAT;;AACA,QAAI1hB,KAAK,GAAGtU,GAAZ,EAAiB;AACf,aAAOivB,IAAI,CAAC,iBAAD,CAAX;AACD;AACF,GALD;;AAOA7D,EAAAA,IAAI,GAAG,gBAAW;AAChB9W,IAAAA,KAAK,IAAI,EAAT;;AACA,QAAIA,KAAK,GAAG2c,GAAZ,EAAiB;AACf;AACAhC,MAAAA,IAAI,CAAC,qCAAD,CAAJ;AACD;;AACDL,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmBqO,EAAnB;AACAiM,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmBsO,EAAnB;AACAgM,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmBuO,EAAnB;AACA+L,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmBwO,EAAnB;AACA8L,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmByO,EAAnB;AACA6L,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmB0O,EAAnB;AACA4L,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmB2O,EAAnB;AACA2L,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmB4O,EAAnB;AACA0L,IAAAA,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmB6O,EAAnB;AACA,WAAOyL,KAAK,CAACta,KAAK,GAAG,CAAT,CAAL,GAAmB8O,EAA1B;AACD,GAhBD;;AAkBAuH,EAAAA,OAAO,GAAG,mBAAW;AACnB,QAAIrW,KAAK,GAAGtU,GAAG,GAAG,EAAlB,EAAsB;AACpBivB,MAAAA,IAAI,CAAC,iBAAD,CAAJ;AACD;;AACDtM,IAAAA,EAAE,GAAGiM,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACAsO,IAAAA,EAAE,GAAGgM,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACAuO,IAAAA,EAAE,GAAG+L,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACAwO,IAAAA,EAAE,GAAG8L,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACAyO,IAAAA,EAAE,GAAG6L,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACA0O,IAAAA,EAAE,GAAG4L,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACA2O,IAAAA,EAAE,GAAG2L,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACA4O,IAAAA,EAAE,GAAG0L,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACA6O,IAAAA,EAAE,GAAGyL,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACA8O,IAAAA,EAAE,GAAGwL,KAAK,CAACta,KAAK,GAAG,CAAT,CAAV;AACA,WAAOA,KAAK,IAAI,EAAhB;AACD,GAfD,CAzn4BU,CA0o4BV;;;AACAkb,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAImH,CAAJ,EAAOvB,CAAP,CADgB,CAEhB;AACA;;AACAuB,IAAAA,CAAC,GAAG1S,GAAG,EAAP;AACAmR,IAAAA,CAAC,GAAGnR,GAAG,EAAP;AACAyE,IAAAA,IAAI,CAACiO,CAAD,CAAJ;AACA,WAAOjO,IAAI,CAAC0M,CAAD,CAAX;AACD,GARD,CA3o4BU,CAqp4BV;;;AACAhmB,EAAAA,IAAI,GAAG,gBAAW;AAChB,QAAIunB,CAAJ,CADgB,CAEhB;;AACAA,IAAAA,CAAC,GAAG1S,GAAG,EAAP;AACAyE,IAAAA,IAAI,CAACiO,CAAD,CAAJ;AACA,WAAOjO,IAAI,CAACiO,CAAD,CAAX;AACD,GAND;;AAQA/tC,EAAAA,CAAC,CAACwmB,IAAF,GAASA,IAAT;AAEAxmB,EAAAA,CAAC,CAAC4mC,IAAF,GAASA,IAAT;AAEA5mC,EAAAA,CAAC,CAAC+hC,OAAF,GAAYA,OAAZ;AAEA/hC,EAAAA,CAAC,CAACwiC,IAAF,GAASA,IAAT;AAEAxiC,EAAAA,CAAC,CAAC8/B,IAAF,GAASA,IAAT;AAEA9/B,EAAAA,CAAC,CAACq7B,GAAF,GAAQA,GAAR,CAxq4BU,CA0q4BV;AAEA;;AACAjuB,EAAAA,gBAAgB,GAAG,4BAAW;AAC5B,QAAIknD,sBAAJ;AACAA,IAAAA,sBAAsB,GAAGntB,WAAW,EAApC;;AACA,QAAImtB,sBAAsB,KAAK,EAA/B,EAAmC;AACjC,aAAOx0B,IAAI,CAAC1H,UAAU,CAACk8B,sBAAD,CAAX,CAAX;AACD,KAFD,MAEO;AACL,aAAO/zB,WAAW,CAAC7uB,GAAD,CAAlB;AACD;AACF,GARD;;AAUAy1B,EAAAA,WAAW,GAAG,uBAAW;AACvB,QAAIotB,QAAJ,EAAc9mB,CAAd,EAAiByB,EAAjB,EAAqBE,IAArB,EAA2BC,IAA3B,EAAiCilB,sBAAjC,EAAyDE,OAAzD;AACAF,IAAAA,sBAAsB,GAAG,EAAzB;;AACA,SAAK7mB,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAG19B,GAAG,GAAG,CAAtB,EAAyB29B,IAAI,GAAGhI,MAAM,CAACvS,MAA5C,EAAqDsa,IAAI,IAAIC,IAAR,GAAeH,EAAE,GAAGG,IAApB,GAA2BH,EAAE,GAAGG,IAArF,EAA4F5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEH,EAAjB,GAAsB,EAAEA,EAAxH,EAA4H;AAC1H,UAAI7H,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAAV,KAAwB,EAA5B,EAAgC;AAC9B,YAAI9c,mBAAmB,CAAC8d,CAAD,CAAnB,KAA2B,KAA/B,EAAsC;AACpC;AACD,SAFD,MAEO;AACL;AACD;AACF;;AACD+mB,MAAAA,OAAO,GAAGntB,MAAM,CAACoG,CAAD,CAAN,GAAY,EAAtB;AACA8mB,MAAAA,QAAQ,GAAG,CAACj3C,OAAO,CAACmwB,CAAD,CAAP,GAAa,EAAd,EAAkB+J,SAAlB,CAA4B,CAA5B,EAA+B,CAA/B,CAAX;AACA8c,MAAAA,sBAAsB,IAAI,aAAaE,OAAb,GAAuB,SAAvB,GAAmCjyC,SAAS,CAACjF,OAAO,CAACmwB,CAAD,CAAR,CAA5C,GAA2D,UAA3D,GAAwE8mB,QAAxE,GAAmF,OAA7G;AACD;;AACD,WAAOD,sBAAP;AACD,GAhBD,CAvr4BU,CAys4BV;AACA;AACA;AACA;AACA;;;AACApuB,EAAAA,UAAU,GAAG,oBAAS0I,CAAT,EAAYxB,CAAZ,EAAeqnB,UAAf,EAA2B;AACtC,QAAI1mB,CAAJ;AACAA,IAAAA,CAAC,GAAG1G,MAAM,CAAC+F,CAAD,CAAV;;AACA,QAAIW,CAAC,IAAI,IAAT,EAAe;AACb;AACD;;AACDA,IAAAA,CAAC,CAACtB,SAAF,GAAcmC,CAAd;;AACA,QAAI6lB,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAO1mB,CAAC,CAAC0mB,UAAF,GAAeA,UAAtB;AACD,KAFD,MAEO;AACL,aAAO1mB,CAAC,CAAC0mB,UAAF,GAAe7lB,CAAtB;AACD;AACF,GAZD,CA9s4BU,CA4t4BV;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAxF,EAAAA,UAAU,GAAG,oBAASwF,CAAT,EAAY;AACvB,QAAInB,CAAJ,EAAOyB,EAAP,EAAWE,IAAX,CADuB,CAEvB;AACA;AACA;AAEA;AACA;AACA;;AACA3B,IAAAA,CAAC,GAAG,CAAJ;;AACA,SAAKA,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGj9B,IAAxB,EAA+B,KAAKi9B,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5D,EAAmE3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5F,EAAgG;AAC9F,UAAIN,CAAC,KAAKvH,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAApB,EAA+B;AAC7B;AACA,eAAOpF,MAAM,CAACoG,CAAD,CAAb;AACD;;AACD,UAAIpG,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAAV,KAAwB,EAA5B,EAAgC;AAC9B;AACA;AACA;AACA;AACD;AACF;;AACD,QAAIgB,CAAC,KAAKt7B,IAAV,EAAgB;AACdk0B,MAAAA,IAAI,CAAC,uBAAD,CAAJ;AACD;;AACDgB,IAAAA,MAAM,CAACoG,CAAD,CAAN,GAAY,IAAIv1B,CAAJ,EAAZ;AACAmvB,IAAAA,MAAM,CAACoG,CAAD,CAAN,CAAUb,CAAV,GAAct3B,GAAd;AACA+xB,IAAAA,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAAV,GAAsBmC,CAAtB,CA3BuB,CA4BvB;AACA;AACA;AACA;AACA;;AACAtxB,IAAAA,OAAO,CAACmwB,CAAD,CAAP,GAAapG,MAAM,CAACoG,CAAD,CAAnB;AACA9d,IAAAA,mBAAmB,CAAC8d,CAAD,CAAnB,GAAyB,KAAzB;AACA,WAAOpG,MAAM,CAACoG,CAAD,CAAb;AACD,GApCD,CAvv4BU,CA6x4BV;AAEA;;;AACAvgB,EAAAA,aAAa,GAAG,uBAAS6gB,CAAT,EAAY;AAC1B,QAAIA,CAAC,CAACnB,CAAF,KAAQt3B,GAAZ,EAAiB;AACf+wB,MAAAA,IAAI,CAAC,cAAD,CAAJ;AACD;;AACD,WAAO0H,CAAC,CAACtB,SAAT;AACD,GALD,CAhy4BU,CAuy4BV;AACA;AACA;AACA;AACA;;;AACAzI,EAAAA,WAAW,GAAG,qBAAS+J,CAAT,EAAYvB,CAAZ,EAAe;AAC3B,QAAIuL,UAAJ;;AACA,QAAIhK,CAAC,CAACnB,CAAF,KAAQt3B,GAAZ,EAAiB;AACf+wB,MAAAA,IAAI,CAAC,cAAD,CAAJ;AACD,KAJ0B,CAK3B;AACA;AACA;;;AACA0R,IAAAA,UAAU,GAAG1Q,MAAM,CAACyQ,OAAP,CAAe/J,CAAf,CAAb;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAI1G,MAAM,CAACyQ,OAAP,CAAe/J,CAAf,EAAkBgK,UAAU,GAAG,CAA/B,MAAsC,CAAC,CAA3C,EAA8C;AAC5CxJ,MAAAA,OAAO,CAACE,GAAR,CAAY,6BAAZ;AACA;AACD;;AACD,QAAI3rC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkCsJ,UAA9C;AACD;;AACDpoB,IAAAA,mBAAmB,CAACooB,UAAD,CAAnB,GAAkC,KAAlC;AACA,WAAOz6B,OAAO,CAACy6B,UAAD,CAAP,GAAsBvL,CAA7B;AACD,GA3BD,CA5y4BU,CAy04BV;;;AACA3f,EAAAA,WAAW,GAAG,qBAASkhB,CAAT,EAAY;AACxB,QAAIgK,UAAJ;;AACA,QAAIhK,CAAC,CAACnB,CAAF,KAAQt3B,GAAZ,EAAiB;AACf+wB,MAAAA,IAAI,CAAC,cAAD,CAAJ;AACD,KAJuB,CAKxB;AACA;AACA;;;AACA0R,IAAAA,UAAU,GAAG1Q,MAAM,CAACyQ,OAAP,CAAe/J,CAAf,CAAb;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAI1G,MAAM,CAACyQ,OAAP,CAAe/J,CAAf,EAAkBgK,UAAU,GAAG,CAA/B,MAAsC,CAAC,CAA3C,EAA8C;AAC5CxJ,MAAAA,OAAO,CAACE,GAAR,CAAY,6BAAZ;AACA;AACD;;AACD,QAAI3rC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,kCAAkCsJ,UAA9C;AACD,KAxBuB,CAyBxB;AACA;AACA;AACA;;;AACA,WAAOz6B,OAAO,CAACy6B,UAAD,CAAd;AACD,GA9BD,CA104BU,CA024BV;AACA;AACA;;;AACA3nB,EAAAA,aAAa,GAAG,uBAAS2d,CAAT,EAAY;AAC1B,QAAI2mB,SAAJ;;AACA,QAAI3mB,CAAC,CAACnB,CAAF,KAAQt3B,GAAZ,EAAiB;AACf,aAAO,KAAP;AACD;;AACDo/C,IAAAA,SAAS,GAAGttB,MAAM,CAAC2G,CAAD,CAAlB,CAL0B,CAM1B;;AACA,QAAI2mB,SAAS,GAAG9hD,EAAZ,IAAkB8hD,SAAS,KAAK5+C,QAAhC,IAA4C4+C,SAAS,KAAK3+C,sBAA9D,EAAsF;AACpF,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAXD,CA724BU,CA034BV;AACA;;;AACAsf,EAAAA,YAAY,GAAG,CAAf;;AAEA+R,EAAAA,MAAM,GAAG,gBAAS2G,CAAT,EAAY;AACnB,QAAIgK,UAAJ;AACA1iB,IAAAA,YAAY;;AACZ,QAAI0Y,CAAC,CAACnB,CAAF,KAAQt3B,GAAZ,EAAiB;AACf+wB,MAAAA,IAAI,CAAC,cAAD,CAAJ;AACD;;AACD0R,IAAAA,UAAU,GAAG1Q,MAAM,CAACyQ,OAAP,CAAe/J,CAAf,CAAb;;AACA,QAAI1G,MAAM,CAACyQ,OAAP,CAAe/J,CAAf,EAAkBgK,UAAU,GAAG,CAA/B,MAAsC,CAAC,CAA3C,EAA8C;AAC5CxJ,MAAAA,OAAO,CAACE,GAAR,CAAY,6BAAZ;AACA;AACD;;AACD,QAAI3rC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,6BAA6BsJ,UAA7B,GAA0C,YAA1C,GAAyD1iB,YAArE;AACD,KAbkB,CAcnB;AACA;AACA;AACA;;;AACA,WAAO0iB,UAAP;AACD,GAnBD,CA934BU,CAm54BV;AAEA;;;AACAxX,EAAAA,WAAW,GAAG,qBAASqM,CAAT,EAAY;AACxB,WAAO9M,IAAI,CAACuH,MAAM,CAACuF,CAAD,CAAP,CAAX;AACD,GAFD;;AAIA5sB,EAAAA,aAAa,GAAG,yBAAW;AACzB,QAAIytB,CAAJ,EAAOyB,EAAP,EAAWE,IAAX,EAAiBC,IAAjB,EAAuBtC,OAAvB,CADyB,CAE7B;AACA;AACA;;AACIA,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKU,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAG19B,GAAG,GAAG,CAAtB,EAAyB29B,IAAI,GAAGl9B,IAArC,EAA4Ci9B,IAAI,IAAIC,IAAR,GAAeH,EAAE,GAAGG,IAApB,GAA2BH,EAAE,GAAGG,IAA5E,EAAmF5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEH,EAAjB,GAAsB,EAAEA,EAA/G,EAAmH;AACjH;AACA;AACA,UAAI7H,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAAV,KAAwB,EAA5B,EAAgC;AAC9B,YAAI9c,mBAAmB,CAAC8d,CAAD,CAAnB,KAA2B,KAA/B,EAAsC;AACpC;AACD,SAFD,MAEO;AACL;AACD;AACF;;AACDpG,MAAAA,MAAM,CAACoG,CAAD,CAAN,GAAY,IAAIv1B,CAAJ,EAAZ;AACAmvB,MAAAA,MAAM,CAACoG,CAAD,CAAN,CAAUb,CAAV,GAAct3B,GAAd;AACAgI,MAAAA,OAAO,CAACmwB,CAAD,CAAP,GAAapG,MAAM,CAACoG,CAAD,CAAnB;AACAV,MAAAA,OAAO,CAACjN,IAAR,CAAanQ,mBAAmB,CAAC8d,CAAD,CAAnB,GAAyB,KAAtC;AACD;;AACD,WAAOV,OAAP;AACD,GAtBD,CA154BU,CAk74BV;AACA;AAEA;;;AACAlsB,EAAAA,mBAAkB,GAAG,4BAASktB,CAAT,EAA8B;AAAA,QAAlBqJ,WAAkB,uEAAJ,EAAI;AACjD,QAAI3J,CAAJ,EAAOyB,EAAP,EAAWE,IAAX;;AACA,QAAIhf,aAAa,CAAC2d,CAAD,CAAjB,EAAsB;AACpB,UAAIqJ,WAAW,CAACU,OAAZ,CAAoB/J,CAApB,MAA2B,CAAC,CAAhC,EAAmC;AACjCqJ,QAAAA,WAAW,CAACtX,IAAZ,CAAiBiO,CAAjB;AACA;AACD;AACF;;AACD,QAAI/Z,QAAQ,CAAC+Z,CAAD,CAAZ,EAAiB;AACf,WAAKN,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGrB,CAAC,CAACtG,MAAF,CAASwF,KAAjC,EAAyC,KAAKmC,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAAtE,EAA6E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAAtG,EAA0G;AACxGruB,QAAAA,mBAAkB,CAACktB,CAAC,CAACtG,MAAF,CAAS9gB,IAAT,CAAc8mB,CAAd,CAAD,EAAmB2J,WAAnB,CAAlB;AACD;;AACD;AACD;;AACD,WAAOzmB,MAAM,CAACod,CAAD,CAAb,EAAkB;AAChBltB,MAAAA,mBAAkB,CAACrC,GAAG,CAACuvB,CAAD,CAAJ,EAASqJ,WAAT,CAAlB;;AACArJ,MAAAA,CAAC,GAAG7uB,GAAG,CAAC6uB,CAAD,CAAP;AACD;AACF,GAlBD;;AAoBA/tC,EAAAA,CAAC,CAAC6sB,WAAF,GAAgBA,WAAhB;AAEA7sB,EAAAA,CAAC,CAACgkC,WAAF,GAAgBA,WAAhB;AAEAhkC,EAAAA,CAAC,CAACopC,UAAF,GAAeA,UAAf;AAEAppC,EAAAA,CAAC,CAACmnC,WAAF,GAAgBA,WAAhB;AAEAnnC,EAAAA,CAAC,CAAC6gB,kBAAF,GAAuBA,mBAAvB;;AAEA,MAAI,CAAC4N,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,IAAT;AACAF,IAAAA,IAAI;AACL;;AAEDvuB,EAAAA,CAAC,CAACuuB,IAAF,GAASA,IAAT;;AAEAmM,EAAAA,cAAc,GAAG,wBAASi6B,IAAT,EAAe;AAC9B,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAOhyB,IAAI,CAACgyB,IAAD,CAAX,CAD4B,CAE9B;AACC,KAHD,MAGO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACnC,UAAIA,IAAI,GAAG,CAAP,KAAa,CAAjB,EAAoB;AAClB,eAAOt0B,YAAY,CAACs0B,IAAD,CAAnB;AACD,OAFD,MAEO;AACL,eAAO10B,WAAW,CAAC00B,IAAD,CAAlB;AACD;AACF,KANM,MAMA,IAAIA,IAAI,YAAYz8C,CAApB,EAAuB;AAC5B;AACA,aAAO4nB,IAAI,CAAC60B,IAAD,CAAX;AACD,KAHM,MAGA;AACLpmB,MAAAA,OAAO,CAACqmB,IAAR,CAAa,uBAAb,EAAsCD,IAAtC;AACA,aAAO70B,IAAI,CAAC+G,MAAM,CAACn1B,GAAD,CAAP,CAAX;AACD;AACF,GAjBD;;AAmBA+oB,EAAAA,KAAK,GAAG,eAASk6B,IAAT,EAAe;AACrB,QAAIE,IAAJ,EAAU3jB,KAAV;;AACA,QAAI;AACFxW,MAAAA,cAAc,CAACi6B,IAAD,CAAd;AACAE,MAAAA,IAAI,GAAGx5B,GAAG,EAAV;AACA5b,MAAAA,WAAW;AACZ,KAJD,CAIE,OAAO+yC,MAAP,EAAe;AACfthB,MAAAA,KAAK,GAAGshB,MAAR;AACA1wB,MAAAA,iBAAiB;AACjB,YAAMoP,KAAN;AACD;;AACD,WAAO2jB,IAAP;AACD,GAZD,CA9+4BU,CA4/4BV;AACA;AACA;;;AACAlsC,EAAAA,IAAI,GAAG,cAASo1B,IAAT,EAAyB;AAC9B,QAAI4W,IAAJ,EAAUzjB,KAAV,EAAiB4jB,EAAjB,EAAqB5lB,EAArB,EAAyBkC,GAAzB,EAA8BI,MAA9B;AACAsjB,IAAAA,EAAE,GAAGjoC,WAAW,CAACuc,UAAU,CAAC2U,IAAD,CAAX,CAAhB;AACAt+B,IAAAA,WAAW;AACXqgB,IAAAA,IAAI,CAACg1B,EAAD,CAAJ;;AAJ8B,sCAAPC,KAAO;AAAPA,MAAAA,KAAO;AAAA;;AAK9B,SAAK7lB,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAG2jB,KAAK,CAACjgC,MAAzB,EAAiCoa,EAAE,GAAGkC,GAAtC,EAA2ClC,EAAE,EAA7C,EAAiD;AAC/CylB,MAAAA,IAAI,GAAGI,KAAK,CAAC7lB,EAAD,CAAZ;AACAxU,MAAAA,cAAc,CAACi6B,IAAD,CAAd;AACD;;AACD1/B,IAAAA,IAAI,CAAC,IAAI8/B,KAAK,CAACjgC,MAAX,CAAJ;AACAkF,IAAAA,EAAE,GAAGqB,GAAG,EAAR;AACAyE,IAAAA,IAAI,CAAC9F,EAAD,CAAJ;;AACA,QAAI;AACFoO,MAAAA,cAAc;AACdoJ,MAAAA,MAAM,GAAGnW,GAAG,EAAZ;AACA5b,MAAAA,WAAW;AACZ,KAJD,CAIE,OAAO+yC,MAAP,EAAe;AACfthB,MAAAA,KAAK,GAAGshB,MAAR;AACA1wB,MAAAA,iBAAiB;AACjB,YAAMoP,KAAN;AACD;;AACD,WAAOM,MAAP;AACD,GAtBD;;AAwBAxxC,EAAAA,CAAC,CAAC2oB,IAAF,GAASA,IAAT;AAEA3oB,EAAAA,CAAC,CAACy6B,KAAF,GAAUA,KAAV;;AAEA,GAAC,YAAW;AACV,QAAIu6B,WAAJ,EAAiBF,EAAjB,EAAqB5lB,EAArB,EAAyBkC,GAAzB,EAA8BrE,OAA9B;AACAioB,IAAAA,WAAW,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,aAA7B,EAA4C,QAA5C,EAAsD,SAAtD,EAAiE,QAAjE,EAA2E,SAA3E,EAAsF,QAAtF,EAAgG,SAAhG,EAA2G,KAA3G,EAAkH,SAAlH,EAA6H,SAA7H,EAAwI,SAAxI,EAAmJ,SAAnJ,EAA8J,UAA9J,EAA0K,SAA1K,EAAqL,OAArL,EAA8L,QAA9L,EAAwM,SAAxM,EAAmN,OAAnN,EAA4N,UAA5N,EAAwO,eAAxO,EAAyP,OAAzP,EAAkQ,OAAlQ,EAA2Q,UAA3Q,EAAuR,UAAvR,EAAmS,MAAnS,EAA2S,UAA3S,EAAuT,KAAvT,EAA8T,MAA9T,EAAsU,QAAtU,EAAgV,QAAhV,EAA0V,KAA1V,EAAiW,aAAjW,EAAgX,KAAhX,EAAuX,YAAvX,EAAqY,KAArY,EAA4Y,OAA5Y,EAAqZ,UAArZ,EAAia,IAAja,EAAua,KAAva,EAA8a,MAA9a,EAAsb,QAAtb,EAAgc,OAAhc,EAAyc,UAAzc,EAAqd,UAArd,EAAie,KAAje,EAAwe,MAAxe,EAAgf,MAAhf,EAAwf,KAAxf,EAA+f,QAA/f,EAAygB,QAAzgB,EAAmhB,QAAnhB,EAA6hB,QAA7hB,EAAuiB,WAAviB,EAAojB,YAApjB,EAAkkB,QAAlkB,EAA4kB,OAA5kB,EAAqlB,OAArlB,EAA8lB,KAA9lB,EAAqmB,OAArmB,EAA8mB,KAA9mB,EAAqnB,SAArnB,EAAgoB,SAAhoB,EAA2oB,MAA3oB,EAAmpB,WAAnpB,EAAgqB,OAAhqB,EAAyqB,UAAzqB,EAAqrB,KAArrB,EAA4rB,MAA5rB,EAAosB,WAApsB,EAAitB,SAAjtB,EAA4tB,UAA5tB,EAAwuB,KAAxuB,EAA+uB,SAA/uB,EAA0vB,UAA1vB,EAAswB,KAAtwB,EAA6wB,KAA7wB,EAAoxB,UAApxB,EAAgyB,KAAhyB,EAAuyB,QAAvyB,EAAizB,QAAjzB,EAA2zB,WAA3zB,EAAw0B,UAAx0B,EAAo1B,IAAp1B,EAA01B,OAA11B,EAAm2B,SAAn2B,EAA82B,cAA92B,EAA83B,OAA93B,EAAu4B,OAAv4B,EAAg5B,OAAh5B,EAAy5B,OAAz5B,EAAk6B,cAAl6B,EAAk7B,eAAl7B,EAAm8B,YAAn8B,EAAi9B,WAAj9B,EAA89B,YAA99B,EAA4+B,SAA5+B,EAAu/B,OAAv/B,EAAggC,UAAhgC,EAA4gC,MAA5gC,EAAohC,aAAphC,EAAmiC,MAAniC,EAA2iC,MAA3iC,EAAmjC,OAAnjC,EAA4jC,OAA5jC,EAAqkC,QAArkC,EAA+kC,OAA/kC,EAAwlC,KAAxlC,EAA+lC,eAA/lC,EAAgnC,UAAhnC,EAA4nC,KAA5nC,EAAmoC,MAAnoC,EAA2oC,MAA3oC,EAAmpC,MAAnpC,EAA2pC,OAA3pC,EAAoqC,KAApqC,EAA2qC,aAA3qC,EAA0rC,KAA1rC,EAAisC,MAAjsC,EAAysC,QAAzsC,EAAmtC,MAAntC,EAA2tC,QAA3tC,EAAquC,QAAruC,EAA+uC,QAA/uC,EAAyvC,QAAzvC,EAAmwC,QAAnwC,EAA6wC,WAA7wC,EAA0xC,MAA1xC,EAAkyC,MAAlyC,CAAd;AACAjoB,IAAAA,OAAO,GAAG,EAAV;;AACA,SAAKmC,EAAE,GAAG,CAAL,EAAQkC,GAAG,GAAG4jB,WAAW,CAAClgC,MAA/B,EAAuCoa,EAAE,GAAGkC,GAA5C,EAAiDlC,EAAE,EAAnD,EAAuD;AACrD4lB,MAAAA,EAAE,GAAGE,WAAW,CAAC9lB,EAAD,CAAhB;AACAnC,MAAAA,OAAO,CAACjN,IAAR,CAAa9/B,CAAC,CAAC80D,EAAD,CAAD,GAAQnsC,IAAI,CAACssC,IAAL,CAAU,IAAV,EAAgBH,EAAhB,CAArB;AACD;;AACD,WAAO/nB,OAAP;AACD,GATD;;AAWAphB,EAAAA,MAAM,GAAG,kBAAW;AAClB,QAAIupC,cAAJ,EAAoBC,UAApB,EAAgCC,cAAhC,EAAgDC,aAAhD,EAA+D5nB,CAA/D,EAAkEyB,EAAlE,EAAsEE,IAAtE;AACAimB,IAAAA,aAAa,GAAG,EAAhB;AACAH,IAAAA,cAAc,GAAG,EAAjB;AACAE,IAAAA,cAAc,GAAG,EAAjB;AACAD,IAAAA,UAAU,GAAG,EAAb;;AACA,SAAK1nB,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAG/H,MAAM,CAACvS,MAA/B,EAAwC,KAAKsa,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAArE,EAA4E3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAArG,EAAyG;AACvG;AACA;AACA;AACA;AACA;AACA,UAAIvf,mBAAmB,CAAC8d,CAAD,CAAnB,KAA2B,KAA/B,EAAsC;AACpC4nB,QAAAA,aAAa,CAACv1B,IAAd,CAAmBuH,MAAM,CAACoG,CAAD,CAAzB;AACAynB,QAAAA,cAAc,CAACp1B,IAAf,CAAoBxiB,OAAO,CAACmwB,CAAD,CAA3B;AACD;AACF,KAhBiB,CAiBlB;;;AACA2nB,IAAAA,cAAc,GAAGlsB,6BAA6B,CAAC4F,KAA9B,CAAoC,CAApC,CAAjB;AACA,WAAO,CAACumB,aAAD,EAAgBH,cAAhB,EAAgCE,cAAhC,EAAgDrpB,IAAhD,EAAsDvS,GAAtD,EAA2DnL,aAA3D,EAA0EzB,YAAY,EAAtF,CAAP;AACD,GApBD;;AAsBAkc,EAAAA,QAAQ,GAAG,kBAASwsB,MAAT,EAAiB;AAC1B,QAAIJ,cAAJ,EAAoBE,cAApB,EAAoCC,aAApC,EAAmD5nB,CAAnD,EAAsDyB,EAAtD,EAA0DE,IAA1D;;AAD0B,iCAEkDkmB,MAFlD;;AAEzBD,IAAAA,aAFyB;AAEVH,IAAAA,cAFU;AAEME,IAAAA,cAFN;AAEsBrpB,IAAAA,IAFtB;AAE4BvS,IAAAA,GAF5B;AAEiCnL,IAAAA,aAFjC;;AAG9B;AACI,SAAKof,CAAC,GAAGyB,EAAE,GAAG,CAAT,EAAYE,IAAI,GAAGimB,aAAa,CAACvgC,MAAtC,EAA+C,KAAKsa,IAAL,GAAYF,EAAE,GAAGE,IAAjB,GAAwBF,EAAE,GAAGE,IAA5E,EAAmF3B,CAAC,GAAG,KAAK2B,IAAL,GAAY,EAAEF,EAAd,GAAmB,EAAEA,EAA5G,EAAgH;AAC9G7H,MAAAA,MAAM,CAACoG,CAAD,CAAN,GAAY4nB,aAAa,CAAC5nB,CAAD,CAAzB;AACAnwB,MAAAA,OAAO,CAACmwB,CAAD,CAAP,GAAaynB,cAAc,CAACznB,CAAD,CAA3B;AACD;;AACD,WAAOvE,6BAA6B,GAAGksB,cAAc,CAACtmB,KAAf,CAAqB,CAArB,CAAvC;AACD,GATD;;AAWA7tB,EAAAA,YAAY,GAAG,sBAASs0C,YAAT,EAAuB;AACpC,QAAIJ,UAAJ;AACAA,IAAAA,UAAU,GAAGvoC,YAAY,EAAzB;;AACA,QAAIuoC,UAAU,KAAKI,YAAnB,EAAiC;AAC/B,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GARD;;AAUA3oC,EAAAA,YAAY,GAAG,wBAAW;AACxB,QAAI2nC,QAAJ,EAAcY,UAAd,EAA0B1nB,CAA1B,EAA6ByB,EAA7B,EAAiCkC,GAAjC,EAAsCjC,EAAtC,EAA0CC,IAA1C,EAAgDC,IAAhD,EAAsDmlB,OAAtD;AACAW,IAAAA,UAAU,GAAG,EAAb;;AACA,SAAK1nB,CAAC,GAAGyB,EAAE,GAAGE,IAAI,GAAG19B,GAAG,GAAG,CAAtB,EAAyB29B,IAAI,GAAGhI,MAAM,CAACvS,MAA5C,EAAqDsa,IAAI,IAAIC,IAAR,GAAeH,EAAE,GAAGG,IAApB,GAA2BH,EAAE,GAAGG,IAArF,EAA4F5B,CAAC,GAAG2B,IAAI,IAAIC,IAAR,GAAe,EAAEH,EAAjB,GAAsB,EAAEA,EAAxH,EAA4H;AAC1H,UAAI7H,MAAM,CAACoG,CAAD,CAAN,CAAUhB,SAAV,KAAwB,EAA5B,EAAgC;AAC9B,YAAI9c,mBAAmB,CAAC8d,CAAD,CAAnB,KAA2B,KAA/B,EAAsC;AACpC;AACD,SAFD,MAEO;AACL;AACD;AACF;;AACD+mB,MAAAA,OAAO,GAAG11B,WAAU,CAACuI,MAAM,CAACoG,CAAD,CAAP,CAApB;AACA8mB,MAAAA,QAAQ,GAAGz1B,WAAU,CAACxhB,OAAO,CAACmwB,CAAD,CAAR,CAArB;AACA0nB,MAAAA,UAAU,IAAI,QAAQX,OAAR,GAAkB,KAAlB,GAA0BD,QAAxC;AACD;;AACD,SAAKplB,EAAE,GAAG,CAAL,EAAQiC,GAAG,GAAGlI,6BAA6B,CAACpU,MAAjD,EAAyDqa,EAAE,GAAGiC,GAA9D,EAAmEjC,EAAE,EAArE,EAAyE;AACvE1B,MAAAA,CAAC,GAAGvE,6BAA6B,CAACiG,EAAD,CAAjC;AACAgmB,MAAAA,UAAU,IAAI,eAAe1nB,CAA7B;AACD;;AACD,QAAI3qC,KAAJ,EAAW;AACTyrC,MAAAA,OAAO,CAACE,GAAR,CAAY,iBAAiB0mB,UAA7B;AACD;;AACD,WAAOA,UAAP;AACD,GAvBD;AAyBD,CA1m5BD,EA0m5BG5oB,IA1m5BH,CA0m5BQ,IA1m5BR","sourcesContent":["// Generated by CoffeeScript 2.5.1\n(function() {\n\n  /* arg =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  z\n\n  General description\n  -------------------\n  Returns the angle of complex z.\n\n  */\n  /*\n   Argument (angle) of complex z\n\n    z    arg(z)\n    -    ------\n\n    a    0\n\n    -a    -pi      See note 3 below\n\n    (-1)^a    a pi\n\n    exp(a + i b)  b\n\n    a b    arg(a) + arg(b)\n\n    a + i b    arctan(b/a)\n\n  Result by quadrant\n\n    z    arg(z)\n    -    ------\n\n    1 + i    1/4 pi\n\n    1 - i    -1/4 pi\n\n    -1 + i    3/4 pi\n\n    -1 - i    -3/4 pi\n\n  Notes\n\n    1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n\n    2. Symbols in z are assumed to be positive and real.\n\n    3. Negative direction adds -pi to angle.\n\n       Example: z = (-1)^(1/3), abs(z) = 1/3 pi, abs(-z) = -2/3 pi\n\n    4. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n\n      arg(numerator(z)) - arg(denominator(z))\n\n       must be used to get the correct answer. Now the operation is\n       automatic.\n  */\n  /*\n   Returns the coefficient of the imaginary part of complex z\n\n    z    imag(z)\n    -    -------\n\n    a + i b    b\n\n    exp(i a)  sin(a)\n  */\n  /* Power function\n\n    Input:    push  Base\n\n        push  Exponent\n\n    Output:    Result on stack\n  */\n  /*\n  Convert complex z to rectangular form\n\n    Input:    push  z\n\n    Output:    Result on stack\n  */\n  /* det =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  m\n\n  General description\n  -------------------\n  Returns the determinant of matrix m.\n  Uses Gaussian elimination for numerical matrices.\n\n  Example:\n\n    det(((1,2),(3,4)))\n    > -2\n\n  */\n  /* adj =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  m\n\n  General description\n  -------------------\n  Returns the adjunct of matrix m. The inverse of m is equal to adj(m) divided by det(m).\n\n  */\n  /*\n   Guesses a rational for each float in the passed expression\n  */\n  /* arccos =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the inverse cosine of x.\n\n  */\n  /* arccosh =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the inverse hyperbolic cosine of x.\n\n  */\n  /* arcsin =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the inverse sine of x.\n\n  */\n  /* arcsinh =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the inverse hyperbolic sine of x.\n\n  */\n  /* arctan =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the inverse tangent of x.\n\n  */\n  /* arctanh =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the inverse hyperbolic tangent of x.\n\n  */\n  /* besselj =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x,n\n\n  General description\n  -------------------\n\n  Returns a solution to the Bessel differential equation (Bessel function of first kind).\n\n  Recurrence relation:\n\n    besselj(x,n) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n-2)\n\n    besselj(x,1/2) = sqrt(2/pi/x) sin(x)\n\n    besselj(x,-1/2) = sqrt(2/pi/x) cos(x)\n\n  For negative n, reorder the recurrence relation as:\n\n    besselj(x,n-2) = (2/x) (n-1) besselj(x,n-1) - besselj(x,n)\n\n  Substitute n+2 for n to obtain\n\n    besselj(x,n) = (2/x) (n+1) besselj(x,n+1) - besselj(x,n+2)\n\n  Examples:\n\n    besselj(x,3/2) = (1/x) besselj(x,1/2) - besselj(x,-1/2)\n\n    besselj(x,-3/2) = -(1/x) besselj(x,-1/2) - besselj(x,1/2)\n\n  */\n  /* bessely =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x,n\n\n  General description\n  -------------------\n\n  Bessel function of second kind.\n\n  */\n  /* ceiling =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n\n  Returns the smallest integer not less than x.\n\n  */\n  /* check =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  p\n\n  General description\n  -------------------\n  Returns whether the predicate p is true/false or unknown:\n  0 if false, 1 if true or remains unevaluated if unknown.\n  Note that if \"check\" is passed an assignment, it turns it into a test,\n  i.e. check(a = b) is turned into check(a==b) \n  so \"a\" is not assigned anything.\n  Like in many programming languages, \"check\" also gives truthyness/falsyness\n  for numeric values. In which case, \"true\" is returned for non-zero values.\n  Potential improvements: \"check\" can't evaluate strings yet.\n\n  */\n  /* choose =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  n,k\n\n  General description\n  -------------------\n\n  Returns the number of combinations of n items taken k at a time.\n\n  For example, the number of five card hands is choose(52,5)\n\n  ```\n                            n!\n        choose(n,k) = -------------\n                       k! (n - k)!\n  ```\n  */\n  /* circexp =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n\n  Returns expression x with circular and hyperbolic functions converted to exponential forms. Sometimes this will simplify an expression.\n\n  */\n  /* clear =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n\n  Completely wipes a variable from the environment (while doing x = quote(x) just unassigns it).\n\n  */\n  /* clearall =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  General description\n  -------------------\n\n  Completely wipes all variables from the environment.\n\n  */\n  /* cofactor =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  m,i,j\n\n  General description\n  -------------------\n  Cofactor of a matrix component.\n  Let c be the cofactor matrix of matrix m, i.e. tranpose(c) = adj(m).\n  This function returns c[i,j].\n\n  */\n  /* conj =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  z\n\n  General description\n  -------------------\n  Returns the complex conjugate of z.\n\n  */\n  /* contract =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  a,i,j\n\n  General description\n  -------------------\n  Contract across tensor indices i.e. returns \"a\" summed over indices i and j.\n  If i and j are omitted then 1 and 2 are used.\n  contract(m) is equivalent to the trace of matrix m.\n\n  */\n  /* cosh =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the hyperbolic cosine of x\n\n  ```\n              exp(x) + exp(-x)\n    cosh(x) = ----------------\n                     2\n  ```\n\n  */\n  /* deg =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  p,x\n\n  General description\n  -------------------\n  Returns the degree of polynomial p(x).\n\n  */\n  /* denominator =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the denominator of expression x.\n\n  */\n  /* dim =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  m,n\n\n  General description\n  -------------------\n  Returns the cardinality of the nth index of tensor \"m\".\n\n  */\n  /* do =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  a,b,...\n\n  General description\n  -------------------\n  Evaluates each argument from left to right. Returns the result of the last argument.\n\n  */\n  /* eigenval =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  m\n\n  General description\n  -------------------\n  Compute eigenvalues of m. See \"eigen\" for more info.\n\n  */\n  /* eigenvec =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  m\n\n  General description\n  -------------------\n  Compute eigenvectors of m. See \"eigen\" for more info.\n\n  */\n  /* erf =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Authors\n  -------\n  philippe.billet@noos.fr\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Error function erf(x).\n  erf(-x)=erf(x)\n\n  */\n  /*\n  Remove terms that involve a given symbol or expression. For example...\n\n    filter(x^2 + x + 1, x)    =>  1\n\n    filter(x^2 + x + 1, x^2)  =>  x + 1\n  */\n  /* dot =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  a,b,...\n\n  General description\n  -------------------\n\n  The inner (or dot) operator gives products of vectors,\n  matrices, and tensors.\n\n  Note that for Algebrite, the elements of a vector/matrix\n  can only be scalars. This allows for example to flesh out\n  matrix multiplication using the usual multiplication.\n  So for example block-representations are not allowed.\n\n  There is an aweful lot of confusion between sw packages on\n  what dot and inner do.\n\n  First off, the \"dot\" operator is different from the\n  mathematical notion of dot product, which can be\n  slightly confusing.\n\n  The mathematical notion of dot product is here:\n    http://mathworld.wolfram.com/DotProduct.html\n\n  However, \"dot\" does that and a bunch of other things,\n  i.e. in Algebrite\n  dot/inner does what the dot of Mathematica does, i.e.:\n\n  scalar product of vectors:\n\n    inner((a, b, c), (x, y, z))\n    > a x + b y + c z\n\n  products of matrices and vectors:\n\n    inner(((a, b), (c,d)), (x, y))\n    > (a x + b y,c x + d y)\n\n    inner((x, y), ((a, b), (c,d)))\n    > (a x + c y,b x + d y)\n\n    inner((x, y), ((a, b), (c,d)), (r, s))\n    > a r x + b s x + c r y + d s y\n\n  matrix product:\n\n    inner(((a,b),(c,d)),((r,s),(t,u)))\n    > ((a r + b t,a s + b u),(c r + d t,c s + d u))\n\n  the \"dot/inner\" operator is associative and\n  distributive but not commutative.\n\n  In Mathematica, Inner is a generalisation of Dot where\n  the user can specify the multiplication and the addition\n  operators.\n  But here in Algebrite they do the same thing.\n\n   https://reference.wolfram.com/language/ref/Dot.html\n   https://reference.wolfram.com/language/ref/Inner.html\n\n   http://uk.mathworks.com/help/matlab/ref/dot.html\n   http://uk.mathworks.com/help/matlab/ref/mtimes.html\n\n  */\n  /*\n   Laguerre function\n\n  Example\n\n    laguerre(x,3)\n\n  Result\n\n       1   3    3   2\n    - --- x  + --- x  - 3 x + 1\n       6        2\n\n  The computation uses the following recurrence relation.\n\n    L(x,0,k) = 1\n\n    L(x,1,k) = -x + k + 1\n\n    n*L(x,n,k) = (2*(n-1)+1-x+k)*L(x,n-1,k) - (n-1+k)*L(x,n-2,k)\n\n  In the \"for\" loop i = n-1 so the recurrence relation becomes\n\n    (i+1)*L(x,n,k) = (2*i+1-x+k)*L(x,n-1,k) - (i+k)*L(x,n-2,k)\n  */\n  /*\n   Return the leading coefficient of a polynomial.\n\n  Example\n\n    leading(5x^2+x+1,x)\n\n  Result\n\n    5\n\n  The result is undefined if P is not a polynomial.\n  */\n  /*\n   Legendre function\n\n  Example\n\n    legendre(x,3,0)\n\n  Result\n\n     5   3    3\n    --- x  - --- x\n     2        2\n\n  The computation uses the following recurrence relation.\n\n    P(x,0) = 1\n\n    P(x,1) = x\n\n    n*P(x,n) = (2*(n-1)+1)*x*P(x,n-1) - (n-1)*P(x,n-2)\n\n  In the \"for\" loop we have i = n-1 so the recurrence relation becomes\n\n    (i+1)*P(x,n) = (2*i+1)*x*P(x,n-1) - i*P(x,n-2)\n\n  For m > 0\n\n    P(x,n,m) = (-1)^m * (1-x^2)^(m/2) * d^m/dx^m P(x,n)\n  */\n  /*\n  Convert complex z to polar form\n\n    Input:    push  z\n\n    Output:    Result on stack\n\n    polar(z) = abs(z) * exp(i * arg(z))\n  */\n  /*\n   Returns the real part of complex z\n\n    z    real(z)\n    -    -------\n\n    a + i b    a\n\n    exp(i a)  cos(a)\n  */\n  /*\n  Taylor expansion of a function\n\n    push(F)\n    push(X)\n    push(N)\n    push(A)\n    taylor()\n  */\n  /*\n  // up to 100 blocks of 100,000 atoms\n\n  #define M 100\n  #define N 100000\n\n  U *mem[M]\n  int mcount\n\n  U *free_list\n  int free_count\n\n  U *\n  alloc(void)\n  {\n    U *p\n    if (free_count == 0) {\n      if (mcount == 0)\n        alloc_mem()\n      else {\n        gc()\n        if (free_count < N * mcount / 2)\n          alloc_mem()\n      }\n      if (free_count == 0)\n        stop(\"atom space exhausted\")\n    }\n    p = free_list\n    free_list = free_list->u.cons.cdr\n    free_count--\n    return p\n  }\n   */\n  /*\n   Compare adjacent terms in s[] and combine if possible.\n\n    Returns the number of terms remaining in s[].\n\n    n  number of terms in s[] initially\n  */\n  /* cross =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n\n  Parameters\n  ----------\n  u,v\n\n  General description\n  -------------------\n  Returns the cross product of vectors u and v.\n\n  */\n  /* curl =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept, script_defined\n\n  Parameters\n  ----------\n  u\n\n  General description\n  -------------------\n  Returns the curl of vector u.\n\n  */\n  /*\n    Clear all patterns\n  */\n  /*\n  if 0\n\n   * left brace\n\n    for (i = 0; i < h; i++) {\n      if (yindex == YMAX)\n        break\n      chartab[yindex].c = '|'\n      chartab[yindex].x = x - 2\n      chartab[yindex].y = y + i\n      yindex++\n    }\n\n   * right brace\n\n    emit_x++\n\n    for (i = 0; i < h; i++) {\n      if (yindex == YMAX)\n        break\n      chartab[yindex].c = '|'\n      chartab[yindex].x = emit_x\n      chartab[yindex].y = y + i\n      yindex++\n    }\n\n    emit_x++\n\n  endif\n   */\n  /*\n   For example...\n\n    push(F)\n    push(X)\n    filter()\n    F = pop()\n  */\n  /*\n   Symbolic addition\n\n    Terms in a sum are combined if they are identical modulo rational\n    coefficients.\n\n    For example, A + 2A becomes 3A.\n\n    However, the sum A + sqrt(2) A is not modified.\n\n    Combining terms can lead to second-order effects.\n\n    For example, consider the case of\n\n      1/sqrt(2) A + 3/sqrt(2) A + sqrt(2) A\n\n    The first two terms are combined to yield 2 sqrt(2) A.\n\n    This result can now be combined with the third term to yield\n\n      3 sqrt(2) A\n  */\n  /*\n   Table of integrals\n\n  The symbol f is just a dummy symbol for creating a list f(A,B,C,C,...) where\n\n    A  is the template expression\n\n    B  is the result expression\n\n    C  is an optional list of conditional expressions\n  */\n  /*\n   Partition a term\n\n    Input stack:\n\n      term (factor or product of factors)\n\n      free variable\n\n    Output stack:\n\n      constant expression\n\n      variable expression\n  */\n  /*\n    Substitute new expr for old expr in expr.\n\n    Input:  push  expr\n\n      push  old expr\n\n      push  new expr\n\n    Output:  Result on stack\n  */\n  var $, ABS, ADD, ADJ, AND, APPROXRATIO, ARCCOS, ARCCOSH, ARCSIN, ARCSINH, ARCTAN, ARCTANH, ARG, ASSUME_REAL_VARIABLES, ATOMIZE, AUTOEXPAND, BAKE, BESSELJ, BESSELY, BINDING, BINOMIAL, BINOM_check_args, BUF, C1, C2, C3, C4, C5, C6, CEILING, CHECK, CHOOSE, CIRCEXP, CLEAR, CLEARALL, CLEARPATTERNS, CLOCK, COEFF, COFACTOR, CONDENSE, CONJ, CONS, CONTRACT, COS, COSH, Condense, DEBUG, DEBUG_ABS, DEBUG_ARG, DEBUG_CLOCKFORM, DEBUG_IMAG, DEBUG_IS, DEBUG_MULTIPLY, DEBUG_POWER, DEBUG_RATIONALIZE, DEBUG_RECT, DEBUG_SIMPLIFY, DECOMP, DEFINT, DEGREE, DENOMINATOR, DERIVATIVE, DET, DET_check_arg, DIM, DIRAC, DIVISORS, DO, DOT, DOUBLE, DRAW, DRAWX, DSOLVE, E, EIGEN, EIGENVAL, EIGENVEC, EIG_N, EIG_check_arg, EIG_yydd, EIG_yyqq, ERF, ERFC, EVAL, EXP, EXPAND, EXPCOS, EXPSIN, Eval, Eval_Eval, Eval_abs, Eval_add, Eval_adj, Eval_and, Eval_approxratio, Eval_arccos, Eval_arccosh, Eval_arcsin, Eval_arcsinh, Eval_arctan, Eval_arctanh, Eval_arg, Eval_besselj, Eval_bessely, Eval_binding, Eval_binomial, Eval_ceiling, Eval_check, Eval_choose, Eval_circexp, Eval_clear, Eval_clearall, Eval_clearpatterns, Eval_clock, Eval_coeff, Eval_cofactor, Eval_condense, Eval_conj, Eval_cons, Eval_contract, Eval_cos, Eval_cosh, Eval_decomp, Eval_defint, Eval_degree, Eval_denominator, Eval_derivative, Eval_det, Eval_dim, Eval_dirac, Eval_divisors, Eval_do, Eval_dsolve, Eval_eigen, Eval_eigenval, Eval_eigenvec, Eval_erf, Eval_erfc, Eval_exp, Eval_expand, Eval_expcos, Eval_expsin, Eval_factor, Eval_factorial, Eval_factorpoly, Eval_filter, Eval_float, Eval_floor, Eval_for, Eval_function_reference, Eval_gamma, Eval_gcd, Eval_hermite, Eval_hilbert, Eval_imag, Eval_index, Eval_inner, Eval_integral, Eval_inv, Eval_invg, Eval_isinteger, Eval_isprime, Eval_laguerre, Eval_lcm, Eval_leading, Eval_legendre, Eval_log, Eval_lookup, Eval_mod, Eval_multiply, Eval_noexpand, Eval_not, Eval_nroots, Eval_number, Eval_numerator, Eval_operator, Eval_or, Eval_outer, Eval_pattern, Eval_patternsinfo, Eval_polar, Eval_power, Eval_predicate, Eval_prime, Eval_print, Eval_print2dascii, Eval_printcomputer, Eval_printhuman, Eval_printlatex, Eval_printlist, Eval_product, Eval_quote, Eval_quotient, Eval_rank, Eval_rationalize, Eval_real, Eval_rect, Eval_roots, Eval_round, Eval_setq, Eval_sgn, Eval_shape, Eval_silentpattern, Eval_simfac, Eval_simplify, Eval_sin, Eval_sinh, Eval_sqrt, Eval_stop, Eval_subst, Eval_sum, Eval_sym, Eval_symbolsinfo, Eval_tan, Eval_tanh, Eval_taylor, Eval_tensor, Eval_test, Eval_testeq, Eval_testge, Eval_testgt, Eval_testle, Eval_testlt, Eval_transpose, Eval_unit, Eval_user_function, Eval_zero, Evalpoly, FACTOR, FACTORIAL, FACTORPOLY, FILTER, FLOATF, FLOOR, FOR, FORCE_FIXED_PRINTOUT, FUNCTION, Find, GAMMA, GCD, HERMITE, HILBERT, IMAG, INDEX, INNER, INTEGRAL, INV, INVG, INV_check_arg, INV_decomp, ISINTEGER, ISPRIME, LAGUERRE, LAST, LAST_2DASCII_PRINT, LAST_FULL_PRINT, LAST_LATEX_PRINT, LAST_LIST_PRINT, LAST_PLAIN_PRINT, LAST_PRINT, LCM, LEADING, LEGENDRE, LOG, LOOKUP, M, MAXDIM, MAXPRIMETAB, MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES, MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE, MAX_FIXED_PRINTOUT_DIGITS, MAX_PROGRAM_SIZE, MEQUAL, METAA, METAB, METAX, MLENGTH, MOD, MSIGN, MULTIPLY, MZERO, N, NIL, NOT, NROOTS, NROOTS_ABS, NROOTS_DELTA, NROOTS_EPSILON, NROOTS_RANDOM, NROOTS_YMAX, NROOTS_divpoly, NSYM, NUM, NUMBER, NUMERATOR, OPERATOR, OR, OUTER, PATTERN, PATTERNSINFO, PI, POLAR, POWER, PRIME, PRINT, PRINT2DASCII, PRINTFULL, PRINTLATEX, PRINTLIST, PRINTMODE_2DASCII, PRINTMODE_COMPUTER, PRINTMODE_HUMAN, PRINTMODE_LATEX, PRINTMODE_LIST, PRINTOUTRESULT, PRINTPLAIN, PRINT_LEAVE_E_ALONE, PRINT_LEAVE_X_ALONE, PRODUCT, QUOTE, QUOTIENT, RANK, RATIONALIZE, REAL, ROOTS, ROUND, SECRETX, SELFTEST, SETQ, SGN, SHAPE, SILENTPATTERN, SIMPLIFY, SIN, SINH, SPACE_BETWEEN_COLUMNS, SPACE_BETWEEN_ROWS, SQRT, STOP, STR, SUBST, SUM, SYM, SYMBOLSINFO, SYMBOL_A, SYMBOL_A_UNDERSCORE, SYMBOL_B, SYMBOL_B_UNDERSCORE, SYMBOL_C, SYMBOL_D, SYMBOL_I, SYMBOL_IDENTITY_MATRIX, SYMBOL_J, SYMBOL_N, SYMBOL_R, SYMBOL_S, SYMBOL_T, SYMBOL_X, SYMBOL_X_UNDERSCORE, SYMBOL_Y, SYMBOL_Z, TAN, TANH, TAYLOR, TENSOR, TEST, TESTEQ, TESTGE, TESTGT, TESTLE, TESTLT, TIMING_DEBUGS, TOS, TRACE, TRANSPOSE, T_DOUBLE, T_EQ, T_FUNCTION, T_GTEQ, T_INTEGER, T_LTEQ, T_NEQ, T_NEWLINE, T_QUOTASSIGN, T_STRING, T_SYMBOL, U, UNIT, USR_SYMBOLS, VERSION, YMAX, YYE, YYRECT, ZERO, __emit_char, __emit_str, __factor_add, __factorial, __is_negative, __is_radical_number, __lcm, __legendre, __legendre2, __legendre3, __normalize_radical_factors, __rationalize_tensor, _print, abs, absValFloat, absval, absval_tensor, add, addSymbolLeftOfAssignment, addSymbolRightOfAssignment, add_all, add_factor_to_accumulator, add_numbers, add_terms, addf, adj, alloc_tensor, allocatedId, any_denominators, approxAll, approxLogs, approxLogsOfRationals, approxOneRatioOnly, approxRadicals, approxRadicalsOfRationals, approxRationalsOfLogs, approxRationalsOfPowersOfE, approxRationalsOfPowersOfPI, approxRationalsOfRadicals, approxSineOfRationalMultiplesOfPI, approxSineOfRationals, approxTrigonometric, approx_just_an_integer, approx_logarithmsOfRationals, approx_nothingUseful, approx_radicalOfRatio, approx_ratioOfRadical, approx_rationalOfE, approx_rationalOfPi, approx_rationalsOfLogarithms, approx_sine_of_pi_times_rational, approx_sine_of_rational, approxratioRecursive, arccos, arccosh, arcsin, arcsinh, arctan, arctanh, areunivarpolysfactoredorexpandedform, arg, arglist, assignmentFound, avoidCalculatingPowersIntoArctans, bake, bake_poly, bake_poly_term, besselj, bessely, bigInt, bignum_factorial, bignum_float, bignum_power_number, bignum_scan_float, bignum_scan_integer, bignum_truncate, binding, binomial, buffer, build_tensor, caaddr, caadr, caar, cadaddr, cadadr, cadar, caddaddr, caddadr, caddar, caddddr, cadddr, caddr, cadr, called_from_Algebra_block, car, cdaddr, cdadr, cdar, cddaddr, cddar, cdddaddr, cddddr, cdddr, cddr, cdr, ceiling, chainOfUserSymbolsNotFunctionsBeingEvaluated, charTabIndex, chartab, checkFloatHasWorkedOutCompletely, check_esc_flag, check_stack, check_tensor_dimensions, choose, choose_check_args, circexp, clearAlgebraEnvironment, clearRenamedVariablesToAvoidBindingToExternalScope, clear_symbols, clear_term, clearall, clockform, cmpGlyphs, cmp_args, cmp_expr, cmp_terms, cmp_terms_count, codeGen, coeff, cofactor, collectLatexStringFromReturnValue, collectUserSymbols, combine_factors, combine_gammas, combine_terms, compareState, compare_numbers, compare_rationals, compare_tensors, compatible, computeDependenciesFromAlgebra, computeResultsAndJavaScriptFromAlgebra, compute_fa, conjugate, cons, consCount, contract, convert_bignum_to_double, convert_rational_to_double, copy_tensor, cosine, cosine_of_angle, cosine_of_angle_sum, count, countOccurrencesOfSymbol, count_denominators, counter, countsize, d_scalar_scalar, d_scalar_scalar_1, d_scalar_tensor, d_tensor_scalar, d_tensor_tensor, dabs, darccos, darccosh, darcsin, darcsinh, darctan, darctanh, dbesselj0, dbesseljn, dbessely0, dbesselyn, dcos, dcosh, dd, decomp, decomp_product, decomp_sum, defineSomeHandyConstants, define_user_function, defn, defn_str, degree, denominator, derf, derfc, derivative, derivative_of_integral, det, determinant, detg, dfunction, dhermite, dirac, display, display_flag, displaychar, divide, divide_numbers, divisors, divisors_onstack, divpoly, dlog, do_clearPatterns, do_clearall, do_simplify_nested_radicals, dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication, dotprod_unicode, doubleToReasonableString, dpow, dpower, dproduct, draw_flag, draw_stop_return, dsgn, dsin, dsinh, dsum, dtan, dtanh, dupl, eigen, elelmIndex, elem, emit_denominator, emit_denominators, emit_expr, emit_factor, emit_factorial_function, emit_flat_tensor, emit_fraction, emit_function, emit_index_function, emit_multiply, emit_number, emit_numerators, emit_numerical_fraction, emit_power, emit_string, emit_subexpr, emit_symbol, emit_tensor, emit_tensor_inner, emit_term, emit_top_expr, emit_unsigned_expr, emit_x, equal, equaln, equalq, erfc, errorMessage, esc_flag, evaluatingAsFloats, evaluatingPolar, exec, expand, expand_get_A, expand_get_AF, expand_get_B, expand_get_C, expand_get_CF, expand_tensor, expanding, expcos, exponential, expr_level, expsin, f1, f10, f2, f3, f4, f5, f9, f_equals_a, factor, factor_a, factor_again, factor_b, factor_number, factor_small_number, factor_term, factorial, factorpoly, factors, fill_buf, filter, filter_main, filter_sum, filter_tensor, findDependenciesInScript, findPossibleClockForm, findPossibleExponentialForm, findroot, fixup_fraction, fixup_power, flag, floatToRatioRoutine, fmt_index, fmt_level, fmt_x, frame, freeze, functionInvokationsScanningStack, gamma, gamma_of_sum, gammaf, gcd, gcd_main, gcd_numbers, gcd_polys, gcd_powers_with_same_base, gcd_product_product, gcd_product_sum, gcd_sum, gcd_sum_product, gcd_sum_sum, gen, getSimpleRoots, getStateHash, get_binding, get_factor_from_complex_root, get_factor_from_real_root, get_innerprod_factors, get_next_token, get_printname, get_size, get_token, getdisplaystr, glyph, gp, guess, hasImaginaryCoeff, hasNegativeRationalExponent, hash_addition, hash_function, hash_multiplication, hash_power, hashcode_values, hashed_itab, hermite, hilbert, i1, imag, imaginaryunit, index_function, init, initNRoots, inited, inner, inner_f, input_str, integral, integral_of_form, integral_of_product, integral_of_sum, inv, inverse, invert_number, invg, isNumberOneOverSomething, isNumericAtom, isNumericAtomOrTensor, isSimpleRoot, isSmall, isSymbolLeftOfAssignment, isSymbolReclaimable, isZeroAtom, isZeroAtomOrTensor, isZeroLikeOrNonZeroLikeOrUndetermined, isZeroTensor, is_denominator, is_factor, is_small_integer, is_square_matrix, is_usr_symbol, isadd, isalnumorunderscore, isalpha, isalphaOrUnderscore, iscomplexnumber, iscomplexnumberdouble, iscons, isdenominator, isdigit, isdouble, iseveninteger, isfactor, isfactorial, isfloating, isfraction, isidentitymatrix, isimaginarynumber, isimaginarynumberdouble, isimaginaryunit, isinnerordot, isinteger, isintegerfactor, isintegerorintegerfloat, isinv, iskeyword, isminusone, isminusoneoversqrttwo, isminusoneovertwo, isminussqrtthreeovertwo, ismultiply, isnegative, isnegativenumber, isnegativeterm, isnonnegativeinteger, isnpi, isone, isoneover, isoneoversqrttwo, isoneovertwo, isplusone, isplustwo, ispolyexpandedform, ispolyexpandedform_expr, ispolyexpandedform_factor, ispolyexpandedform_term, ispolyfactoredorexpandedform, ispolyfactoredorexpandedform_factor, ispolyfactoredorexpandedform_power, isposint, ispositivenumber, ispower, isquarterturn, isrational, isspace, issqrtthree, issqrtthreeovertwo, isstr, issymbol, issymbolic, istensor, istranspose, isunderscore, isunivarpolyfactoredorexpandedform, itab, italu_hashcode, j1, laguerre, laguerre2, lastFoundSymbol, latexErrorSign, lcm, leading, legendre, length, lessp, level, list, listLength, logarithm, logbuf, lookupsTotal, lu_decomp, madd, makePositive, makeSignSameAs, make_hashed_itab, mask, mcmp, mcmpint, mdiv, mdivrem, meta_mode, mgcd, mini_solve, mint, mmod, mmul, mod, monic, move, moveTos, mp_clr_bit, mp_denominator, mp_numerator, mp_set_bit, mpow, mprime, mroot, mshiftright, msub, mtotal, multinomial_sum, multiply, multiply_all, multiply_all_noexpand, multiply_consecutive_constants, multiply_denominators, multiply_denominators_factor, multiply_denominators_term, multiply_noexpand, multiply_numbers, n_factor_number, negate, negate_expand, negate_noexpand, negate_number, new_integer, new_string, newline_flag, nil_symbols, normaliseDots, normalisedCoeff, normalize_angle, nroots_a, nroots_b, nroots_c, nroots_df, nroots_dx, nroots_fa, nroots_fb, nroots_x, nroots_y, nterms, nthCadr, numerator, numericRootOfPolynomial, o, one, oneElement, one_as_double, out_buf, out_count, out_of_memory, outer, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, parse, parse_internal, parse_p1, parse_p2, parse_time_simplifications, partition, patternHasBeenFound, patternsinfo, performing_roots, polar, polarRectAMinusOneBase, polyform, pop, pop_double, pop_frame, pop_integer, power, power_str, power_sum, power_tensor, predefinedSymbolsInGlobalScope_doNotTrackInDependencies, prime, primetab, print2dascii, printMode, print_ABS_latex, print_ARCCOS_codegen, print_ARCSIN_codegen, print_ARCTAN_codegen, print_BINOMIAL_latex, print_COS_codegen, print_DEFINT_latex, print_DOT_codegen, print_DOT_latex, print_DO_codegen, print_FOR_codegen, print_INV_codegen, print_INV_latex, print_PRODUCT_codegen, print_PRODUCT_latex, print_SETQ_codegen, print_SIN_codegen, print_SQRT_latex, print_SUM_codegen, print_SUM_latex, print_TAN_codegen, print_TESTEQ_latex, print_TESTGE_latex, print_TESTGT_latex, print_TESTLE_latex, print_TESTLT_latex, print_TEST_codegen, print_TEST_latex, print_TRANSPOSE_codegen, print_TRANSPOSE_latex, print_UNIT_codegen, print_a_over_b, print_base, print_base_of_denom, print_char, print_denom, print_double, print_expo_of_denom, print_exponent, print_expr, print_factor, print_factorial_function, print_glyphs, print_index_function, print_list, print_multiply_sign, print_number, print_power, print_str, print_subexpr, print_tensor, print_tensor_inner, print_tensor_inner_latex, print_tensor_latex, print_term, printchar, printchar_nowrap, printline, program_buf, promote_tensor, push, pushTryNotToDuplicate, push_cars, push_double, push_factor, push_frame, push_identity_matrix, push_integer, push_rational, push_symbol, push_term_factors, push_terms, push_zero_matrix, qadd, qdiv, qmul, qpow, qpowf, quickfactor, quickpower, rational, rationalize, rationalize_coefficients, real, reciprocate, rect, recursionLevelNestedRadicalsRemoval, recursiveDependencies, ref, ref1, rememberPrint, remove_negative_exponents, reset_after_error, restore, restoreMetaBindings, rewrite_args, rewrite_args_tensor, roots, roots2, roots3, run, runUserDefinedSimplifications, save, saveMetaBindings, scalar_times_tensor, scan, scan_error, scan_expression, scan_factor, scan_function_call_with_function_name, scan_function_call_without_function_name, scan_index, scan_meta, scan_power, scan_relation, scan_stmt, scan_str, scan_string, scan_subexpr, scan_symbol, scan_tensor, scan_term, scanned, scanningParameters, setM, setSignTo, set_binding, set_component, setq_indexed, sfac_product, sfac_product_f, sgn, shape, show_power_debug, sign, sign_of_term, simfac, simfac_term, simpleComplexityMeasure, simplify, simplifyForCodeGeneration, simplify_1_in_products, simplify_main, simplify_nested_radicals, simplify_polar, simplify_polarRect, simplify_rational_expressions, simplify_rectToClock, simplify_tensor, simplify_trig, simplifyfactorials, sine, sine_of_angle, sine_of_angle_sum, skipRootVariableToBeSolved, sort_stack, square, ssqrt, stack, stackAddsCount, std_symbol, step, step2, stop, strcmp, stringsEmittedByUserPrintouts, subf, subst, subtract, subtract_numbers, swap, symbol, symbolsDependencies, symbolsHavingReassignments, symbolsInExpressionsWithoutAssignments, symbolsLeftOfAssignment, symbolsRightOfAssignment, symbolsinfo, symnum, symtab, take_care_of_nested_radicals, tangent, taylor, tensor, tensor_plus_tensor, tensor_times_scalar, testApprox, test_flag, text_metric, theRandom, token, token_buf, token_str, top, top_level_eval, tos, transform, transpose, transpose_unicode, trigmode, trivial_divide, try_kth_prime, turnErrorMessageToLatex, ucmp, unfreeze, unique, unique_f, update_token_buf, userSimplificationsInListForm, userSimplificationsInStringForm, usr_symbol, verbosing, version, will_be_displayed_as_fraction, ybinomial, ycosh, ydirac, yerf, yerfc, yfloor, yindex, yround, ysinh, yyarg, yybesselj, yybessely, yyceiling, yycondense, yycontract, yycosh, yydegree, yydetg, yydivpoly, yyerf, yyerfc, yyexpand, yyfactorpoly, yyfloat, yyfloor, yyhermite, yyhermite2, yyinvg, yylcm, yylog, yymultiply, yyouter, yypower, yyrationalize, yyround, yysgn, yysimfac, yysinh, yytangent, zero, zzfloat,\n    hasProp = {}.hasOwnProperty;\n\n  bigInt = require('big-integer');\n\n  // also change the version in the package.json file\n  version = \"1.4.0\";\n\n  SELFTEST = 1;\n\n  // size of the symbol table\n  NSYM = 1000;\n\n  DEBUG = false;\n\n  PRINTOUTRESULT = false;\n\n  // printing-related constants\n  PRINTMODE_LATEX = \"PRINTMODE_LATEX\";\n\n  PRINTMODE_2DASCII = \"PRINTMODE_2DASCII\";\n\n  PRINTMODE_COMPUTER = \"PRINTMODE_COMPUTER\";\n\n  PRINTMODE_HUMAN = \"PRINTMODE_HUMAN\";\n\n  PRINTMODE_LIST = \"PRINTMODE_LIST\";\n\n  // when the user uses the generic \"print\" statement\n  // this setting kicks-in.\n  printMode = PRINTMODE_COMPUTER;\n\n  dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication = true;\n\n  recursionLevelNestedRadicalsRemoval = 0;\n\n  do_simplify_nested_radicals = true;\n\n  avoidCalculatingPowersIntoArctans = true;\n\n  rational = (function() {\n    // Symbolic expressions are built by connecting U structs.\n\n    // For example, (a b + c) is built like this:\n\n    //           _______      _______                                _______\n    //          |CONS   |--->|CONS   |----------------------------->|CONS   |\n    //          |       |    |       |                              |       |\n    //          |_______|    |_______|                              |_______|\n    //              |            |                                      |\n    //           ___v___      ___v___      _______      _______      ___v___\n    //          |ADD    |    |CONS   |--->|CONS   |--->|CONS   |    |SYM c  |\n    //          |       |    |       |    |       |    |       |    |       |\n    //          |_______|    |_______|    |_______|    |_______|    |_______|\n    //                           |            |            |\n    //                        ___v___      ___v___      ___v___\n    //                       |MUL    |    |SYM a  |    |SYM b  |\n    //                       |       |    |       |    |       |\n    //                       |_______|    |_______|    |_______|\n    class rational {};\n\n    rational.prototype.a = null; // a bigInteger\n\n    rational.prototype.b = null; // a bigInteger\n\n    return rational;\n\n  }).call(this);\n\n  U = (function() {\n    class U {\n      toString() {\n        return print_expr(this);\n      }\n\n      toLatexString() {\n        return collectLatexStringFromReturnValue(this);\n      }\n\n      constructor() {\n        this.cons = {};\n        this.cons.car = null;\n        this.cons.cdr = null;\n        this.q = new rational();\n      }\n\n    };\n\n    U.prototype.cons = null; // will have a car and cdr\n\n    U.prototype.printname = \"\";\n\n    U.prototype.str = \"\";\n\n    U.prototype.tensor = null;\n\n    // rational number a over b\n    U.prototype.q = null; // will point to a rational\n\n    U.prototype.d = 0.0; // a double\n\n    U.prototype.k = 0;\n\n    U.prototype.tag = 0;\n\n    return U;\n\n  }).call(this);\n\n  errorMessage = \"\";\n\n  // the following enum is for struct U, member k\n  CONS = 0;\n\n  NUM = 1;\n\n  DOUBLE = 2;\n\n  STR = 3;\n\n  TENSOR = 4;\n\n  SYM = 5;\n\n  // the following enum is for indexing the symbol table\n\n  // standard functions first, then nil, then everything else\n  counter = 0;\n\n  ABS = counter++;\n\n  ADD = counter++;\n\n  ADJ = counter++;\n\n  AND = counter++;\n\n  APPROXRATIO = counter++;\n\n  ARCCOS = counter++;\n\n  ARCCOSH = counter++;\n\n  ARCSIN = counter++;\n\n  ARCSINH = counter++;\n\n  ARCTAN = counter++;\n\n  ARCTANH = counter++;\n\n  ARG = counter++;\n\n  ATOMIZE = counter++;\n\n  BESSELJ = counter++;\n\n  BESSELY = counter++;\n\n  BINDING = counter++;\n\n  BINOMIAL = counter++;\n\n  CEILING = counter++;\n\n  CHECK = counter++;\n\n  CHOOSE = counter++;\n\n  CIRCEXP = counter++;\n\n  CLEAR = counter++;\n\n  CLEARALL = counter++;\n\n  CLEARPATTERNS = counter++;\n\n  CLOCK = counter++;\n\n  COEFF = counter++;\n\n  COFACTOR = counter++;\n\n  CONDENSE = counter++;\n\n  CONJ = counter++;\n\n  CONTRACT = counter++;\n\n  COS = counter++;\n\n  COSH = counter++;\n\n  DECOMP = counter++;\n\n  DEFINT = counter++;\n\n  DEGREE = counter++;\n\n  DENOMINATOR = counter++;\n\n  DERIVATIVE = counter++;\n\n  DET = counter++;\n\n  DIM = counter++;\n\n  DIRAC = counter++;\n\n  DIVISORS = counter++;\n\n  DO = counter++;\n\n  DOT = counter++;\n\n  DRAW = counter++;\n\n  DSOLVE = counter++;\n\n  EIGEN = counter++;\n\n  EIGENVAL = counter++;\n\n  EIGENVEC = counter++;\n\n  ERF = counter++;\n\n  ERFC = counter++;\n\n  EVAL = counter++;\n\n  EXP = counter++;\n\n  EXPAND = counter++;\n\n  EXPCOS = counter++;\n\n  EXPSIN = counter++;\n\n  FACTOR = counter++;\n\n  FACTORIAL = counter++;\n\n  FACTORPOLY = counter++;\n\n  FILTER = counter++;\n\n  FLOATF = counter++;\n\n  FLOOR = counter++;\n\n  FOR = counter++;\n\n  FUNCTION = counter++;\n\n  GAMMA = counter++;\n\n  GCD = counter++;\n\n  HERMITE = counter++;\n\n  HILBERT = counter++;\n\n  IMAG = counter++;\n\n  INDEX = counter++;\n\n  INNER = counter++;\n\n  INTEGRAL = counter++;\n\n  INV = counter++;\n\n  INVG = counter++;\n\n  ISINTEGER = counter++;\n\n  ISPRIME = counter++;\n\n  LAGUERRE = counter++;\n\n  //  LAPLACE = counter++\n  LCM = counter++;\n\n  LEADING = counter++;\n\n  LEGENDRE = counter++;\n\n  LOG = counter++;\n\n  LOOKUP = counter++;\n\n  MOD = counter++;\n\n  MULTIPLY = counter++;\n\n  NOT = counter++;\n\n  NROOTS = counter++;\n\n  NUMBER = counter++;\n\n  NUMERATOR = counter++;\n\n  OPERATOR = counter++;\n\n  OR = counter++;\n\n  OUTER = counter++;\n\n  PATTERN = counter++;\n\n  PATTERNSINFO = counter++;\n\n  POLAR = counter++;\n\n  POWER = counter++;\n\n  PRIME = counter++;\n\n  PRINT_LEAVE_E_ALONE = counter++;\n\n  PRINT_LEAVE_X_ALONE = counter++;\n\n  PRINT = counter++;\n\n  PRINT2DASCII = counter++;\n\n  PRINTFULL = counter++;\n\n  PRINTLATEX = counter++;\n\n  PRINTLIST = counter++;\n\n  PRINTPLAIN = counter++;\n\n  PRODUCT = counter++;\n\n  QUOTE = counter++;\n\n  QUOTIENT = counter++;\n\n  RANK = counter++;\n\n  RATIONALIZE = counter++;\n\n  REAL = counter++;\n\n  ROUND = counter++;\n\n  YYRECT = counter++;\n\n  ROOTS = counter++;\n\n  SETQ = counter++;\n\n  SGN = counter++;\n\n  SILENTPATTERN = counter++;\n\n  SIMPLIFY = counter++;\n\n  SIN = counter++;\n\n  SINH = counter++;\n\n  SHAPE = counter++;\n\n  SQRT = counter++;\n\n  STOP = counter++;\n\n  SUBST = counter++;\n\n  SUM = counter++;\n\n  SYMBOLSINFO = counter++;\n\n  TAN = counter++;\n\n  TANH = counter++;\n\n  TAYLOR = counter++;\n\n  TEST = counter++;\n\n  TESTEQ = counter++;\n\n  TESTGE = counter++;\n\n  TESTGT = counter++;\n\n  TESTLE = counter++;\n\n  TESTLT = counter++;\n\n  TRANSPOSE = counter++;\n\n  UNIT = counter++;\n\n  ZERO = counter++;\n\n  // ALL THE SYMBOLS ABOVE NIL ARE KEYWORDS,\n  // WHICH MEANS THAT USER CANNOT REDEFINE THEM\n  NIL = counter++; // nil goes here, after standard functions\n\n  LAST = counter++;\n\n  LAST_PRINT = counter++;\n\n  LAST_2DASCII_PRINT = counter++;\n\n  LAST_FULL_PRINT = counter++;\n\n  LAST_LATEX_PRINT = counter++;\n\n  LAST_LIST_PRINT = counter++;\n\n  LAST_PLAIN_PRINT = counter++;\n\n  AUTOEXPAND = counter++;\n\n  BAKE = counter++;\n\n  ASSUME_REAL_VARIABLES = counter++;\n\n  TRACE = counter++;\n\n  FORCE_FIXED_PRINTOUT = counter++;\n\n  MAX_FIXED_PRINTOUT_DIGITS = counter++;\n\n  YYE = counter++;\n\n  DRAWX = counter++; // special purpose internal symbols\n\n  METAA = counter++;\n\n  METAB = counter++;\n\n  METAX = counter++;\n\n  SECRETX = counter++;\n\n  VERSION = counter++;\n\n  PI = counter++;\n\n  SYMBOL_A = counter++;\n\n  SYMBOL_B = counter++;\n\n  SYMBOL_C = counter++;\n\n  SYMBOL_D = counter++;\n\n  SYMBOL_I = counter++;\n\n  SYMBOL_J = counter++;\n\n  SYMBOL_N = counter++;\n\n  SYMBOL_R = counter++;\n\n  SYMBOL_S = counter++;\n\n  SYMBOL_T = counter++;\n\n  SYMBOL_X = counter++;\n\n  SYMBOL_Y = counter++;\n\n  SYMBOL_Z = counter++;\n\n  SYMBOL_IDENTITY_MATRIX = counter++;\n\n  SYMBOL_A_UNDERSCORE = counter++;\n\n  SYMBOL_B_UNDERSCORE = counter++;\n\n  SYMBOL_X_UNDERSCORE = counter++;\n\n  C1 = counter++;\n\n  C2 = counter++;\n\n  C3 = counter++;\n\n  C4 = counter++;\n\n  C5 = counter++;\n\n  C6 = counter++;\n\n  USR_SYMBOLS = counter++; // this must be last\n\n  E = YYE;\n\n  // TOS cannot be arbitrarily large because the OS seg faults on deep recursion.\n  // For example, a circular evaluation like x=x+1 can cause a seg fault.\n  // At this setting (100,000) the evaluation stack overruns before seg fault.\n  TOS = 100000;\n\n  BUF = 10000;\n\n  MAX_PROGRAM_SIZE = 100001;\n\n  MAXPRIMETAB = 10000;\n\n  MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES = 5;\n\n  MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE = 10;\n\n  //define _USE_MATH_DEFINES // for MS C++\n  MAXDIM = 24;\n\n  // needed for the mechanism to\n  // find all dependencies between variables\n  // in a script\n  symbolsDependencies = {};\n\n  symbolsHavingReassignments = [];\n\n  symbolsInExpressionsWithoutAssignments = [];\n\n  patternHasBeenFound = false;\n\n  predefinedSymbolsInGlobalScope_doNotTrackInDependencies = [\"rationalize\", \"abs\", \"e\", \"i\", \"pi\", \"sin\", \"ceiling\", \"cos\", \"roots\", \"integral\", \"derivative\", \"defint\", \"sqrt\", \"eig\", \"cov\", \"deig\", \"dcov\", \"float\", \"floor\", \"product\", \"root\", \"round\", \"sum\", \"test\", \"unit\"];\n\n  // you can do some little simplifications\n  // at parse time, such as calculating away\n  // immediately simple operations on\n  // constants, removing 1s from products\n  // etc.\n  parse_time_simplifications = true;\n\n  chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n\n  stringsEmittedByUserPrintouts = \"\";\n\n  // flag use to potentially switch on/off some quirks \"deep\"\n  // in the code due to call from Algebra block.\n  // Currently not used.\n  called_from_Algebra_block = false;\n\n  tensor = (function() {\n    class tensor {\n      constructor() {\n        this.dim = (function() {\n          var o, ref, results;\n          results = [];\n          for (o = 0, ref = MAXDIM; (0 <= ref ? o <= ref : o >= ref); 0 <= ref ? o++ : o--) {\n            results.push(0);\n          }\n          return results;\n        })();\n        this.elem = [];\n      }\n\n    };\n\n    tensor.prototype.ndim = 0; // number of dimensions\n\n    tensor.prototype.dim = null; // dimension length, for each dimension\n\n    tensor.prototype.nelem = 0; // total number of elements\n\n    tensor.prototype.elem = null; // an array containing all the data\n\n    return tensor;\n\n  }).call(this);\n\n  display = (function() {\n    class display {};\n\n    display.prototype.h = 0;\n\n    display.prototype.w = 0;\n\n    display.prototype.n = 0;\n\n    display.prototype.a = []; // will contain an array of c,x,y (color,x,y)\n\n    return display;\n\n  }).call(this);\n\n  text_metric = (function() {\n    class text_metric {};\n\n    text_metric.prototype.ascent = 0;\n\n    text_metric.prototype.descent = 0;\n\n    text_metric.prototype.width = 0;\n\n    return text_metric;\n\n  }).call(this);\n\n  tos = 0; // top of stack\n\n  expanding = 0;\n\n  evaluatingAsFloats = 0;\n\n  evaluatingPolar = 0;\n\n  fmt_x = 0;\n\n  fmt_index = 0;\n\n  fmt_level = 0;\n\n  verbosing = 0;\n\n  primetab = (function() {\n    var ceil, i, j, primes;\n    primes = [2];\n    i = 3;\n    while (primes.length < MAXPRIMETAB) {\n      j = 0;\n      ceil = Math.sqrt(i);\n      while (j < primes.length && primes[j] <= ceil) {\n        if (i % primes[j] === 0) {\n          j = -1;\n          break;\n        }\n        j++;\n      }\n      if (j !== -1) {\n        primes.push(i);\n      }\n      i += 2;\n    }\n    primes[MAXPRIMETAB] = 0;\n    return primes;\n  })();\n\n  esc_flag = 0;\n\n  draw_flag = 0;\n\n  mtotal = 0;\n\n  trigmode = 0;\n\n  logbuf = \"\";\n\n  program_buf = \"\";\n\n  // will contain the variable names\n  symtab = [];\n\n  // will contain the contents of the variable\n  // in the corresponding position in symtab array\n  binding = [];\n\n  isSymbolReclaimable = [];\n\n  arglist = []; // will contain U\n\n  stack = []; // will contain *U\n\n  frame = 0;\n\n  p0 = null; // will contain U\n\n  p1 = null; // will contain U\n\n  p2 = null; // will contain U\n\n  p3 = null; // will contain U\n\n  p4 = null; // will contain U\n\n  p5 = null; // will contain U\n\n  p6 = null; // will contain U\n\n  p7 = null; // will contain U\n\n  p8 = null; // will contain U\n\n  p9 = null; // will contain U\n\n  zero = null; // will contain U\n\n  one = null; // will contain U\n\n  one_as_double = null;\n\n  imaginaryunit = null; // will contain U\n\n  out_buf = \"\";\n\n  out_count = 0;\n\n  test_flag = 0;\n\n  codeGen = false;\n\n  draw_stop_return = null; // extern jmp_buf ?????\n\n  userSimplificationsInListForm = [];\n\n  userSimplificationsInStringForm = [];\n\n  transpose_unicode = 7488;\n\n  dotprod_unicode = 183;\n\n  symbol = function(x) {\n    return symtab[x];\n  };\n\n  iscons = function(p) {\n    return p.k === CONS;\n  };\n\n  isrational = function(p) {\n    return p.k === NUM;\n  };\n\n  isdouble = function(p) {\n    return p.k === DOUBLE;\n  };\n\n  isNumericAtom = function(p) {\n    return isrational(p) || isdouble(p);\n  };\n\n  isstr = function(p) {\n    return p.k === STR;\n  };\n\n  istensor = function(p) {\n    if (p == null) {\n      debugger;\n    } else {\n      return p.k === TENSOR;\n    }\n  };\n\n  // because of recursion, we consider a scalar to be\n  // a tensor, so a numeric scalar will return true\n  isNumericAtomOrTensor = function(p) {\n    var a, i, n, o, ref;\n    if (isNumericAtom(p) || p === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      return 1;\n    }\n    if (!istensor(p) && !isNumericAtom(p)) {\n      //console.log \"p not an atom nor a tensor: \" + p\n      return 0;\n    }\n    n = p.tensor.nelem;\n    a = p.tensor.elem;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      if (!isNumericAtomOrTensor(a[i])) {\n        //console.log \"non-numeric element: \" + a[i]\n        return 0;\n      }\n    }\n    return 1;\n  };\n\n  issymbol = function(p) {\n    return p.k === SYM;\n  };\n\n  iskeyword = function(p) {\n    return issymbol(p) && symnum(p) < NIL;\n  };\n\n  car = function(p) {\n    if (iscons(p)) {\n      return p.cons.car;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  cdr = function(p) {\n    if (iscons(p)) {\n      return p.cons.cdr;\n    } else {\n      return symbol(NIL);\n    }\n  };\n\n  caar = function(p) {\n    return car(car(p));\n  };\n\n  cadr = function(p) {\n    return car(cdr(p));\n  };\n\n  cdar = function(p) {\n    return cdr(car(p));\n  };\n\n  cddr = function(p) {\n    return cdr(cdr(p));\n  };\n\n  caadr = function(p) {\n    return car(car(cdr(p)));\n  };\n\n  caddr = function(p) {\n    return car(cdr(cdr(p)));\n  };\n\n  cadar = function(p) {\n    return car(cdr(car(p)));\n  };\n\n  cdadr = function(p) {\n    return cdr(car(cdr(p)));\n  };\n\n  cddar = function(p) {\n    return cdr(cdr(car(p)));\n  };\n\n  cdddr = function(p) {\n    return cdr(cdr(cdr(p)));\n  };\n\n  caaddr = function(p) {\n    return car(car(cdr(cdr(p))));\n  };\n\n  cadadr = function(p) {\n    return car(cdr(car(cdr(p))));\n  };\n\n  caddar = function(p) {\n    return car(cdr(cdr(car(p))));\n  };\n\n  cdaddr = function(p) {\n    return cdr(car(cdr(cdr(p))));\n  };\n\n  cadddr = function(p) {\n    return car(cdr(cdr(cdr(p))));\n  };\n\n  cddddr = function(p) {\n    return cdr(cdr(cdr(cdr(p))));\n  };\n\n  caddddr = function(p) {\n    return car(cdr(cdr(cdr(cdr(p)))));\n  };\n\n  cadaddr = function(p) {\n    return car(cdr(car(cdr(cdr(p)))));\n  };\n\n  cddaddr = function(p) {\n    return cdr(cdr(car(cdr(cdr(p)))));\n  };\n\n  caddadr = function(p) {\n    return car(cdr(cdr(car(cdr(p)))));\n  };\n\n  cdddaddr = function(p) {\n    return cdr(cdr(cdr(car(cdr(cdr(p))))));\n  };\n\n  caddaddr = function(p) {\n    return car(cdr(cdr(car(cdr(cdr(p))))));\n  };\n\n  // not used yet\n  listLength = function(p) {\n    var startCount;\n    startCount = -1;\n    while (iscons(p)) {\n      p = cdr(p);\n      startCount++;\n    }\n    return startCount;\n  };\n\n  // not used yet\n  nthCadr = function(p, n) {\n    var startCount;\n    startCount = 0;\n    while (startCount <= n) {\n      p = cdr(p);\n      startCount++;\n    }\n    return car(p);\n  };\n\n  isadd = function(p) {\n    return car(p) === symbol(ADD);\n  };\n\n  ismultiply = function(p) {\n    return car(p) === symbol(MULTIPLY);\n  };\n\n  ispower = function(p) {\n    return car(p) === symbol(POWER);\n  };\n\n  isfactorial = function(p) {\n    return car(p) === symbol(FACTORIAL);\n  };\n\n  isinnerordot = function(p) {\n    return (car(p) === symbol(INNER)) || (car(p) === symbol(DOT));\n  };\n\n  istranspose = function(p) {\n    return car(p) === symbol(TRANSPOSE);\n  };\n\n  isinv = function(p) {\n    return car(p) === symbol(INV);\n  };\n\n  // TODO this is a bit of a shallow check, we should\n  // check when we are passed an actual tensor and possibly\n  // cache the test result.\n  isidentitymatrix = function(p) {\n    return p === symbol(SYMBOL_IDENTITY_MATRIX);\n  };\n\n  MSIGN = function(p) {\n    if (p.isPositive()) {\n      return 1;\n    } else if (p.isZero()) {\n      return 0;\n    } else {\n      return -1;\n    }\n  };\n\n  MLENGTH = function(p) {\n    return p.toString().length;\n  };\n\n  MZERO = function(p) {\n    return p.isZero();\n  };\n\n  MEQUAL = function(p, n) {\n    if (p == null) {\n      debugger;\n    }\n    return p.equals(n);\n  };\n\n  reset_after_error = function() {\n    moveTos(0);\n    esc_flag = 0;\n    draw_flag = 0;\n    frame = TOS;\n    evaluatingAsFloats = 0;\n    return evaluatingPolar = 0;\n  };\n\n  $ = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n\n  $.version = version;\n\n  $.isadd = isadd;\n\n  $.ismultiply = ismultiply;\n\n  $.ispower = ispower;\n\n  $.isfactorial = isfactorial;\n\n  $.car = car;\n\n  $.cdr = cdr;\n\n  $.caar = caar;\n\n  $.cadr = cadr;\n\n  $.cdar = cdar;\n\n  $.cddr = cddr;\n\n  $.caadr = caadr;\n\n  $.caddr = caddr;\n\n  $.cadar = cadar;\n\n  $.cdadr = cdadr;\n\n  $.cddar = cddar;\n\n  $.cdddr = cdddr;\n\n  $.caaddr = caaddr;\n\n  $.cadadr = cadadr;\n\n  $.caddar = caddar;\n\n  $.cdaddr = cdaddr;\n\n  $.cadddr = cadddr;\n\n  $.cddddr = cddddr;\n\n  $.caddddr = caddddr;\n\n  $.cadaddr = cadaddr;\n\n  $.cddaddr = cddaddr;\n\n  $.caddadr = caddadr;\n\n  $.cdddaddr = cdddaddr;\n\n  $.caddaddr = caddaddr;\n\n  $.symbol = symbol;\n\n  $.iscons = iscons;\n\n  $.isrational = isrational;\n\n  $.isdouble = isdouble;\n\n  $.isNumericAtom = isNumericAtom;\n\n  $.isstr = isstr;\n\n  $.istensor = istensor;\n\n  $.issymbol = issymbol;\n\n  $.iskeyword = iskeyword;\n\n  $.CONS = CONS;\n\n  $.NUM = NUM;\n\n  $.DOUBLE = DOUBLE;\n\n  $.STR = STR;\n\n  $.TENSOR = TENSOR;\n\n  $.SYM = SYM;\n\n  \n  //(docs are generated from top-level comments, keep an eye on the formatting!)\n  /* abs =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the absolute value of a real number, the magnitude of a complex number, or the vector length.\n\n  */\n  /*\n   Absolute value of a number,or magnitude of complex z, or norm of a vector\n\n    z    abs(z)\n    -    ------\n\n    a    a\n\n    -a    a\n\n    (-1)^a    1\n\n    exp(a + i b)  exp(a)\n\n    a b    abs(a) abs(b)\n\n    a + i b    sqrt(a^2 + b^2)\n\n  Notes\n\n    1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)\n\n    2. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then\n\n      abs(numerator(z)) / abs(denominator(z))\n\n       must be used to get the correct answer. Now the operation is\n       automatic.\n  */\n  DEBUG_ABS = false;\n\n  Eval_abs = function() {\n    push(cadr(p1));\n    Eval();\n    return abs();\n  };\n\n  absValFloat = function() {\n    Eval();\n    absval();\n    Eval();\n    return zzfloat();\n  };\n\n  // zzfloat of an abs doesn't necessarily result in a double\n  // , for example if there are variables. But\n  // in many of the tests there should be indeed\n  // a float, these two lines come handy to highlight\n  // when that doesn't happen for those tests.\n  //if !isdouble(stack[tos-1])\n  //  stop(\"absValFloat should return a double and instead got: \" + stack[tos-1])\n  abs = function() {\n    var theArgument;\n    theArgument = top();\n    if (DEBUG_ABS) {\n      console.trace(\">>>>  ABS of \" + theArgument);\n    }\n    numerator();\n    if (DEBUG_ABS) {\n      console.log(\"ABS numerator \" + stack[tos - 1]);\n    }\n    absval();\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL numerator: \" + stack[tos - 1]);\n    }\n    push(theArgument);\n    denominator();\n    if (DEBUG_ABS) {\n      console.log(\"ABS denominator: \" + stack[tos - 1]);\n    }\n    absval();\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL denominator: \" + stack[tos - 1]);\n    }\n    divide();\n    if (DEBUG_ABS) {\n      console.log(\"ABSVAL divided: \" + stack[tos - 1]);\n    }\n    if (DEBUG_ABS) {\n      return console.log(\"<<<<<<<  ABS\");\n    }\n  };\n\n  absval = function() {\n    var anyFactorsYet, input;\n    save();\n    p1 = pop();\n    input = p1;\n    if (DEBUG_ABS) {\n      console.log(\"ABS of \" + p1);\n    }\n    // handle all the \"number\" cases first -----------------------------------------\n    if (isZeroAtomOrTensor(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just zero\");\n      }\n      push(zero);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (isnegativenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a negative\");\n      }\n      push(p1);\n      negate();\n      restore();\n      return;\n    }\n    if (ispositivenumber(p1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" just a positive\");\n      }\n      push(p1);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (p1 === symbol(PI)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" of PI\");\n      }\n      push(p1);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    // ??? should there be a shortcut case here for the imaginary unit?\n\n    // now handle decomposition cases ----------------------------------------------\n\n    // we catch the \"add\", \"power\", \"multiply\" cases first,\n    // before falling back to the\n    // negative/positive cases because there are some\n    // simplification thay we might be able to do.\n    // Note that for this routine to give a correct result, this\n    // must be a sum where a complex number appears.\n    // If we apply this to \"a+b\", we get an incorrect result.\n    if (car(p1) === symbol(ADD) && (findPossibleClockForm(p1) || findPossibleExponentialForm(p1) || Find(p1, imaginaryunit))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a sum\");\n      }\n      if (DEBUG_ABS) {\n        console.log(\"abs of a sum\");\n      }\n      // sum\n      push(p1);\n      rect(); // convert polar terms, if any\n      p1 = pop();\n      push(p1);\n      real();\n      push_integer(2);\n      power();\n      push(p1);\n      imag();\n      push_integer(2);\n      power();\n      add();\n      push_rational(1, 2);\n      power();\n      simplify_trig();\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is -1 to any power\");\n      }\n      // -1 to any power\n      if (evaluatingAsFloats) {\n        if (DEBUG_ABS) {\n          console.log(\" abs: numeric, so result is 1.0\");\n        }\n        push_double(1.0);\n      } else {\n        if (DEBUG_ABS) {\n          console.log(\" abs: symbolic, so result is 1\");\n        }\n        push_integer(1);\n      }\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    // abs(a^b) is equal to abs(a)^b IF b is positive\n    if (car(p1) === symbol(POWER) && ispositivenumber(caddr(p1))) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is something to the power of a positive number\");\n      }\n      push(cadr(p1));\n      abs();\n      push(caddr(p1));\n      power();\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    // abs(e^something)\n    if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is an exponential\");\n      }\n      // exponential\n      push(caddr(p1));\n      real();\n      exponential();\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is a product\");\n      }\n      // product\n      anyFactorsYet = false;\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        absval();\n        if (anyFactorsYet) {\n          multiply();\n        }\n        anyFactorsYet = true;\n        p1 = cdr(p1);\n      }\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(ABS)) {\n      if (DEBUG_ABS) {\n        console.log(\" abs: \" + p1 + \" is abs of a abs\");\n      }\n      // abs of a abs\n      push_symbol(ABS);\n      push(cadr(p1));\n      list(2);\n      if (DEBUG_ABS) {\n        console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n      }\n      restore();\n      return;\n    }\n    /*\n     * Evaluation via zzfloat()\n     * ...while this is in theory a powerful mechanism, I've commented it\n     * out because I've refined this method enough to not need this.\n     * Evaling via zzfloat() is in principle more problematic because it could\n     * require further evaluations which could end up in further \"abs\" which\n     * would end up in infinite loops. Better not use it if not necessary.\n\n     * we look directly at the float evaluation of the argument\n     * to see if we end up with a number, which would mean that there\n     * is no imaginary component and we can just return the input\n     * (or its negation) as the result.\n    push p1\n    zzfloat()\n    floatEvaluation = pop()\n\n    if (isnegativenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a negative\"\n      push(p1)\n      negate()\n      restore()\n      return\n\n    if (ispositivenumber(floatEvaluation))\n      if DEBUG_ABS then console.log \" abs: \" + p1 + \" just a positive\"\n      push(p1)\n      if DEBUG_ABS then console.log \" --> ABS of \" + input + \" : \" + stack[tos-1]\n      restore()\n      return\n     */\n    if (istensor(p1)) {\n      absval_tensor();\n      restore();\n      return;\n    }\n    if (isnegativeterm(p1) || (car(p1) === symbol(ADD) && isnegativeterm(cadr(p1)))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    if (DEBUG_ABS) {\n      console.log(\" abs: \" + p1 + \" is nothing decomposable\");\n    }\n    push_symbol(ABS);\n    push(p1);\n    list(2);\n    if (DEBUG_ABS) {\n      console.log(\" --> ABS of \" + input + \" : \" + stack[tos - 1]);\n    }\n    return restore();\n  };\n\n  // also called the \"norm\" of a vector\n  absval_tensor = function() {\n    if (p1.tensor.ndim !== 1) {\n      stop(\"abs(tensor) with tensor rank > 1\");\n    }\n    push(p1);\n    push(p1);\n    conjugate();\n    inner();\n    push_rational(1, 2);\n    power();\n    simplify();\n    return Eval();\n  };\n\n  flag = 0;\n\n  Eval_add = function() {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p2 = pop();\n      push_terms(p2);\n      p1 = cdr(p1);\n    }\n    return add_terms(tos - h);\n  };\n\n  // Add n terms, returns one expression on the stack.\n  stackAddsCount = 0;\n\n  add_terms = function(n) {\n    var h, i, i1, j1, o, ref, ref1, results, s, subsetOfStack;\n    stackAddsCount++;\n    i = 0;\n    h = tos - n;\n    s = h;\n    // ensure no infinite loop, use \"for\"\n    if (DEBUG) {\n      console.log(\"stack before adding terms #\" + stackAddsCount);\n    }\n    //if stackAddsCount == 137\n    //  debugger\n    if (DEBUG) {\n      for (i = o = 0, ref = tos; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n        console.log(print_list(stack[i]));\n      }\n    }\n    for (i = i1 = 0; i1 < 10; i = ++i1) {\n      if (n < 2) {\n        break;\n      }\n      flag = 0;\n      //qsort(s, n, sizeof (U *), cmp_terms)\n      subsetOfStack = stack.slice(h, h + n);\n      subsetOfStack.sort(cmp_terms);\n      stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n      if (flag === 0) {\n        break;\n      }\n      n = combine_terms(h, n);\n    }\n    moveTos(h + n);\n    switch (n) {\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n        break;\n      case 1:\n        break;\n      default:\n        list(n);\n        p1 = pop();\n        push_symbol(ADD);\n        push(p1);\n        cons();\n    }\n    if (DEBUG) {\n      console.log(\"stack after adding terms #\" + stackAddsCount);\n    }\n    //if stackAddsCount == 5\n    //  debugger\n    if (DEBUG) {\n      results = [];\n      for (i = j1 = 0, ref1 = tos; (0 <= ref1 ? j1 < ref1 : j1 > ref1); i = 0 <= ref1 ? ++j1 : --j1) {\n        results.push(console.log(print_list(stack[i])));\n      }\n      return results;\n    }\n  };\n\n  // Compare terms for order, clobbers p1 and p2.\n  cmp_terms_count = 0;\n\n  cmp_terms = function(p1, p2) {\n    var i, o, ref, t;\n    cmp_terms_count++;\n    //if cmp_terms_count == 52\n    //  debugger\n    i = 0;\n    // numbers can be combined\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      flag = 1;\n      //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 0\"\n      return 0;\n    }\n    // congruent tensors can be combined\n    if (istensor(p1) && istensor(p2)) {\n      if (p1.tensor.ndim < p2.tensor.ndim) {\n        //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns -1\"\n        return -1;\n      }\n      if (p1.tensor.ndim > p2.tensor.ndim) {\n        //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 1\"\n        return 1;\n      }\n      for (i = o = 0, ref = p1.tensor.ndim; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n        if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n          //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns -1\"\n          return -1;\n        }\n        if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n          //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 1\"\n          return 1;\n        }\n      }\n      flag = 1;\n      //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns 0\"\n      return 0;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      if (isNumericAtom(car(p1))) {\n        p1 = cdr(p1);\n        if (cdr(p1) === symbol(NIL)) {\n          p1 = car(p1);\n        }\n      }\n    }\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n      if (isNumericAtom(car(p2))) {\n        p2 = cdr(p2);\n        if (cdr(p2) === symbol(NIL)) {\n          p2 = car(p2);\n        }\n      }\n    }\n    t = cmp_expr(p1, p2);\n    if (t === 0) {\n      flag = 1;\n    }\n    //if DEBUG then console.log \"cmp_terms #\" + cmp_terms_count + \" returns \" + t\n    return t;\n  };\n\n  combine_terms = function(s, n) {\n    var i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t;\n    //debugger\n\n    // I had to turn the coffeescript for loop into\n    // a more mundane while loop because the i\n    // variable was changed from within the body,\n    // which is something that is not supposed to\n    // happen in the coffeescript 'vector' form.\n    // Also this means I had to add a 'i++' jus before\n    // the end of the body and before the \"continue\"s\n    i = 0;\n    while (i < (n - 1)) {\n      check_esc_flag();\n      p3 = stack[s + i];\n      p4 = stack[s + i + 1];\n      if (istensor(p3) && istensor(p4)) {\n        push(p3);\n        push(p4);\n        tensor_plus_tensor();\n        p1 = pop();\n        if (p1 !== symbol(NIL)) {\n          stack[s + i] = p1;\n          for (j = o = ref = i + 1, ref1 = n - 1; (ref <= ref1 ? o < ref1 : o > ref1); j = ref <= ref1 ? ++o : --o) {\n            stack[s + j] = stack[s + j + 1];\n          }\n          n--;\n          i--;\n        }\n        i++;\n        continue;\n      }\n      if (istensor(p3) || istensor(p4)) {\n        i++;\n        continue;\n      }\n      if (isNumericAtom(p3) && isNumericAtom(p4)) {\n        push(p3);\n        push(p4);\n        add_numbers();\n        p1 = pop();\n        if (isZeroAtomOrTensor(p1)) {\n          for (j = i1 = ref2 = i, ref3 = n - 2; (ref2 <= ref3 ? i1 < ref3 : i1 > ref3); j = ref2 <= ref3 ? ++i1 : --i1) {\n            stack[s + j] = stack[s + j + 2];\n          }\n          n -= 2;\n        } else {\n          stack[s + i] = p1;\n          for (j = j1 = ref4 = i + 1, ref5 = n - 1; (ref4 <= ref5 ? j1 < ref5 : j1 > ref5); j = ref4 <= ref5 ? ++j1 : --j1) {\n            stack[s + j] = stack[s + j + 1];\n          }\n          n--;\n        }\n        i--;\n        i++;\n        continue;\n      }\n      if (isNumericAtom(p3) || isNumericAtom(p4)) {\n        i++;\n        continue;\n      }\n      if (evaluatingAsFloats) {\n        p1 = one_as_double;\n        p2 = one_as_double;\n      } else {\n        p1 = one;\n        p2 = one;\n      }\n      t = 0;\n      if (car(p3) === symbol(MULTIPLY)) {\n        p3 = cdr(p3);\n        t = 1;\n        if (isNumericAtom(car(p3))) {\n          p1 = car(p3);\n          p3 = cdr(p3);\n          if (cdr(p3) === symbol(NIL)) {\n            p3 = car(p3);\n            t = 0;\n          }\n        }\n      }\n      if (car(p4) === symbol(MULTIPLY)) {\n        p4 = cdr(p4);\n        if (isNumericAtom(car(p4))) {\n          p2 = car(p4);\n          p4 = cdr(p4);\n          if (cdr(p4) === symbol(NIL)) {\n            p4 = car(p4);\n          }\n        }\n      }\n      if (!equal(p3, p4)) {\n        i++;\n        continue;\n      }\n      push(p1);\n      push(p2);\n      add_numbers();\n      p1 = pop();\n      if (isZeroAtomOrTensor(p1)) {\n        for (j = l1 = ref6 = i, ref7 = n - 2; (ref6 <= ref7 ? l1 < ref7 : l1 > ref7); j = ref6 <= ref7 ? ++l1 : --l1) {\n          stack[s + j] = stack[s + j + 2];\n        }\n        n -= 2;\n        i--;\n        i++;\n        continue;\n      }\n      push(p1);\n      if (t) {\n        push(symbol(MULTIPLY));\n        push(p3);\n        cons();\n      } else {\n        push(p3);\n      }\n      multiply();\n      stack[s + i] = pop();\n      for (j = m1 = ref8 = i + 1, ref9 = n - 1; (ref8 <= ref9 ? m1 < ref9 : m1 > ref9); j = ref8 <= ref9 ? ++m1 : --m1) {\n        stack[s + j] = stack[s + j + 1];\n      }\n      n--;\n      i--;\n      // this i++ is to match the while\n      i++;\n    }\n    return n;\n  };\n\n  push_terms = function(p) {\n    var results;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else if (!isZeroAtom(p)) {\n      return push(p);\n    }\n  };\n\n  // add two expressions\n  add = function() {\n    var h;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push_terms(p1);\n    push_terms(p2);\n    add_terms(tos - h);\n    return restore();\n  };\n\n  add_all = function(k) {\n    var h, i, o, ref, s;\n    i = 0;\n    save();\n    s = tos - k;\n    h = tos;\n    for (i = o = 0, ref = k; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      push_terms(stack[s + i]);\n    }\n    add_terms(tos - h);\n    p1 = pop();\n    moveTos(tos - k);\n    push(p1);\n    return restore();\n  };\n\n  subtract = function() {\n    negate();\n    return add();\n  };\n\n  Eval_adj = function() {\n    push(cadr(p1));\n    Eval();\n    return adj();\n  };\n\n  adj = function() {\n    var doNothing, i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    if (istensor(p1) && p1.tensor.ndim === 2 && p1.tensor.dim[0] === p1.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"adj: square matrix expected\");\n    }\n    n = p1.tensor.dim[0];\n    p2 = alloc_tensor(n * n);\n    p2.tensor.ndim = 2;\n    p2.tensor.dim[0] = n;\n    p2.tensor.dim[1] = n;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        cofactor(p1, n, i, j);\n        p2.tensor.elem[n * j + i] = pop(); // transpose\n      }\n    }\n    push(p2);\n    return restore();\n  };\n\n  Eval_approxratio = function() {\n    var theArgument;\n    theArgument = cadr(p1);\n    push(theArgument);\n    return approxratioRecursive();\n  };\n\n  approxratioRecursive = function() {\n    var i, i1, o, ref, ref1;\n    i = 0;\n    save();\n    p1 = pop();\n    if (istensor(p1)) {\n      p4 = alloc_tensor(p1.tensor.nelem);\n      p4.tensor.ndim = p1.tensor.ndim;\n      for (i = o = 0, ref = p1.tensor.ndim; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n        p4.tensor.dim[i] = p1.tensor.dim[i];\n      }\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n        approxratioRecursive();\n        p4.tensor.elem[i] = pop();\n        check_tensor_dimensions(p4);\n      }\n      push(p4);\n    } else if (p1.k === DOUBLE) {\n      push(p1);\n      approxOneRatioOnly();\n    } else if (iscons(p1)) {\n      push(car(p1));\n      approxratioRecursive();\n      push(cdr(p1));\n      approxratioRecursive();\n      cons();\n    } else {\n      push(p1);\n    }\n    return restore();\n  };\n\n  approxOneRatioOnly = function() {\n    var numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot, supposedlyTheFloat, theFloat, theRatio;\n    zzfloat();\n    supposedlyTheFloat = pop();\n    if (supposedlyTheFloat.k === DOUBLE) {\n      theFloat = supposedlyTheFloat.d;\n      splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n      if (splitBeforeAndAfterDot.length === 2) {\n        numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n        precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n        theRatio = floatToRatioRoutine(theFloat, precision);\n        push_rational(theRatio[0], theRatio[1]);\n      } else {\n        push_integer(theFloat);\n      }\n      return;\n    }\n    // we didn't manage, just leave unexpressed\n    push_symbol(APPROXRATIO);\n    push(theArgument);\n    return list(2);\n  };\n\n  // original routine by John Kennedy, see\n  // https://web.archive.org/web/20111027100847/http://homepage.smc.edu/kennedy_john/DEC2FRAC.PDF\n  // courtesy of Michael Borcherds\n  // who ported this to JavaScript under MIT licence\n  // also see\n  // https://github.com/geogebra/geogebra/blob/master/common/src/main/java/org/geogebra/common/kernel/algos/AlgoFractionText.java\n  // potential other ways to do this:\n  //   https://rosettacode.org/wiki/Convert_decimal_number_to_rational\n  //   http://www.homeschoolmath.net/teaching/rational_numbers.php\n  //   http://stackoverflow.com/questions/95727/how-to-convert-floats-to-human-readable-fractions\n  floatToRatioRoutine = function(decimal, AccuracyFactor) {\n    var DecimalSign, FractionDenominator, FractionNumerator, PreviousDenominator, ScratchValue, Z, ret;\n    FractionNumerator = void 0;\n    FractionDenominator = void 0;\n    DecimalSign = void 0;\n    Z = void 0;\n    PreviousDenominator = void 0;\n    ScratchValue = void 0;\n    ret = [0, 0];\n    if (isNaN(decimal)) {\n      return ret;\n    }\n    // return 0/0 \n    if (decimal === 2e308) {\n      ret[0] = 1;\n      ret[1] = 0;\n      // 1/0\n      return ret;\n    }\n    if (decimal === -2e308) {\n      ret[0] = -1;\n      ret[1] = 0;\n      // -1/0\n      return ret;\n    }\n    if (decimal < 0.0) {\n      DecimalSign = -1.0;\n    } else {\n      DecimalSign = 1.0;\n    }\n    decimal = Math.abs(decimal);\n    if (Math.abs(decimal - Math.floor(decimal)) < AccuracyFactor) {\n      // handles exact integers including 0 \n      FractionNumerator = decimal * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n    if (decimal < 1.0e-19) {\n      // X = 0 already taken care of \n      FractionNumerator = DecimalSign;\n      FractionDenominator = 9999999999999999999.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n    if (decimal > 1.0e19) {\n      FractionNumerator = 9999999999999999999.0 * DecimalSign;\n      FractionDenominator = 1.0;\n      ret[0] = FractionNumerator;\n      ret[1] = FractionDenominator;\n      return ret;\n    }\n    Z = decimal;\n    PreviousDenominator = 0.0;\n    FractionDenominator = 1.0;\n    while (true) {\n      Z = 1.0 / (Z - Math.floor(Z));\n      ScratchValue = FractionDenominator;\n      FractionDenominator = FractionDenominator * Math.floor(Z) + PreviousDenominator;\n      PreviousDenominator = ScratchValue;\n      FractionNumerator = Math.floor(decimal * FractionDenominator + 0.5);\n      // Rounding Function\n      if (!(Math.abs(decimal - (FractionNumerator / FractionDenominator)) > AccuracyFactor && Z !== Math.floor(Z))) {\n        break;\n      }\n    }\n    FractionNumerator = DecimalSign * FractionNumerator;\n    ret[0] = FractionNumerator;\n    ret[1] = FractionDenominator;\n    return ret;\n  };\n\n  approx_just_an_integer = 0;\n\n  approx_sine_of_rational = 1;\n\n  approx_sine_of_pi_times_rational = 2;\n\n  approx_rationalOfPi = 3;\n\n  approx_radicalOfRatio = 4;\n\n  approx_nothingUseful = 5;\n\n  approx_ratioOfRadical = 6;\n\n  approx_rationalOfE = 7;\n\n  approx_logarithmsOfRationals = 8;\n\n  approx_rationalsOfLogarithms = 9;\n\n  approxRationalsOfRadicals = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    // simple radicals.\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      for (j = i1 = 1; i1 <= 10; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.sqrt(i) / j;\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sqrt( \" + i + \" ) / \" + j;\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_ratioOfRadical, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRadicalsOfRationals = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, len, len1, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, ref, ref1, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    // simple radicals.\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n    ref = [1, 2, 3, 5, 6, 7, 8, 10];\n    // this one catches things like Math.sqrt(3/4), but\n    // things like Math.sqrt(1/2) are caught by the paragraph\n    // above (and in a better form)\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [1, 2, 3, 5, 6, 7, 8, 10];\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1];\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.sqrt(i / j);\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (sqrt( \" + i + \" / \" + j + \" )\";\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_radicalOfRatio, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRadicals = function(theFloat) {\n    var approxRadicalsOfRationalsResult, approxRationalsOfRadicalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    // simple radicals.\n\n    // we always prefer a rational of a radical of an integer\n    // to a radical of a rational. Radicals of rationals generate\n    // radicals at the denominator which we'd rather avoid\n    approxRationalsOfRadicalsResult = approxRationalsOfRadicals(theFloat);\n    if (approxRationalsOfRadicalsResult != null) {\n      return approxRationalsOfRadicalsResult;\n    }\n    approxRadicalsOfRationalsResult = approxRadicalsOfRationals(theFloat);\n    if (approxRadicalsOfRationalsResult != null) {\n      return approxRadicalsOfRationalsResult;\n    }\n    return null;\n  };\n\n  approxLogs = function(theFloat) {\n    var approxLogsOfRationalsResult, approxRationalsOfLogsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    // we always prefer a rational of a log to a log of\n    // a rational\n    approxRationalsOfLogsResult = approxRationalsOfLogs(theFloat);\n    if (approxRationalsOfLogsResult != null) {\n      return approxRationalsOfLogsResult;\n    }\n    approxLogsOfRationalsResult = approxLogsOfRationals(theFloat);\n    if (approxLogsOfRationalsResult != null) {\n      return approxLogsOfRationalsResult;\n    }\n    return null;\n  };\n\n  approxRationalsOfLogs = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n// simple rationals of logs\n    for (i = o = 2; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.log(i) / j;\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n\n        // it does happen that due to roundings \n        // a \"higher multiple\" is picked, which is obviously\n        // unintended.\n        // E.g. 1 * log(1 / 3 ) doesn't match log( 3 ) BUT\n        // it matches -5 * log( 3 ) / 5\n        // so we avoid any case where the multiplier is a multiple\n        // of the divisor.\n        if (likelyMultiplier !== 1 && Math.abs(Math.floor(likelyMultiplier / j)) === Math.abs(likelyMultiplier / j)) {\n          continue;\n        }\n        if (error < 2.2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" ) / \" + j;\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_rationalsOfLogarithms, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxLogsOfRationals = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n// simple logs of rationals\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 5; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.log(i / j);\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n        if (error < 1.96 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * log( \" + i + \" / \" + j + \" )\";\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_logarithmsOfRationals, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfE = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n// simple rationals of a few powers of e\n    for (i = o = 1; o <= 2; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.pow(Math.E, i) / j;\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (e ^ \" + i + \" ) / \" + j;\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_rationalOfE, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxRationalsOfPowersOfPI = function(theFloat) {\n    var bestResultSoFar, complexity, error, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    // here we do somethng a little special: since\n    // the powers of pi can get quite big, there might\n    // be multiple hypothesis where more of the\n    // magnitude is shifted to the multiplier, and some\n    // where more of the magnitude is shifted towards the\n    // exponent of pi. So we prefer the hypotheses with the\n    // lower multiplier since it's likely to insert more\n    // information.\n    minimumComplexity = Number.MAX_VALUE;\n// simple rationals of a few powers of PI\n    for (i = o = 1; o <= 5; i = ++o) {\n      for (j = i1 = 1; i1 <= 12; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        hypothesis = Math.pow(Math.PI, i) / j;\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * (pi ^ \" + i + \" ) / \" + j + \" )\";\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_rationalOfPi, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    //console.log \"approxRationalsOfPowersOfPI returning: \" + bestResultSoFar\n    return bestResultSoFar;\n  };\n\n  approxTrigonometric = function(theFloat) {\n    var approxSineOfRationalMultiplesOfPIResult, approxSineOfRationalsResult, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    // we always prefer a sin of a rational without the PI\n    approxSineOfRationalsResult = approxSineOfRationals(theFloat);\n    if (approxSineOfRationalsResult != null) {\n      return approxSineOfRationalsResult;\n    }\n    approxSineOfRationalMultiplesOfPIResult = approxSineOfRationalMultiplesOfPI(theFloat);\n    if (approxSineOfRationalMultiplesOfPIResult != null) {\n      return approxSineOfRationalMultiplesOfPIResult;\n    }\n    return null;\n  };\n\n  approxSineOfRationals = function(theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n// we only check very simple rationals because they begin to get tricky\n// quickly, also they collide often with the \"rational of pi\" hypothesis.\n// For example sin(11) is veeery close to 1 (-0.99999020655)\n// (see: http://mathworld.wolfram.com/AlmostInteger.html )\n// we stop at rationals that mention up to 10\n    for (i = o = 1; o <= 4; i = ++o) {\n      for (j = i1 = 1; i1 <= 4; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        fraction = i / j;\n        hypothesis = Math.sin(fraction);\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n        if (error < 2 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" )\";\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_sine_of_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxSineOfRationalMultiplesOfPI = function(theFloat) {\n    var bestResultSoFar, complexity, error, fraction, hypothesis, i, i1, j, likelyMultiplier, minimumComplexity, numberOfDigitsAfterTheDot, o, precision, ratio, result, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    bestResultSoFar = null;\n    minimumComplexity = Number.MAX_VALUE;\n// check rational multiples of pi\n    for (i = o = 1; o <= 13; i = ++o) {\n      for (j = i1 = 1; i1 <= 13; j = ++i1) {\n        //console.log  \"i,j: \" + i + \",\" + j\n        fraction = i / j;\n        hypothesis = Math.sin(Math.PI * fraction);\n        //console.log  \"hypothesis: \" + hypothesis\n        if (Math.abs(hypothesis) > 1e-10) {\n          ratio = theFloat / hypothesis;\n          likelyMultiplier = Math.round(ratio);\n          //console.log  \"ratio: \" + ratio\n          error = Math.abs(1 - ratio / likelyMultiplier);\n        } else {\n          ratio = 1;\n          likelyMultiplier = 1;\n          error = Math.abs(theFloat - hypothesis);\n        }\n        //console.log  \"error: \" + error\n        // magic number 23 comes from the case sin(pi/10)\n        if (error < 23 * precision) {\n          complexity = simpleComplexityMeasure(likelyMultiplier, i, j);\n          if (complexity < minimumComplexity) {\n            //console.log \"MINIMUM MULTIPLIER SO FAR\"\n            minimumComplexity = complexity;\n            result = likelyMultiplier + \" * sin( \" + i + \"/\" + j + \" * pi )\";\n            //console.log result + \" error: \" + error\n            bestResultSoFar = [result, approx_sine_of_pi_times_rational, likelyMultiplier, i, j];\n          }\n        }\n      }\n    }\n    return bestResultSoFar;\n  };\n\n  approxAll = function(theFloat) {\n    var LOG_EXPLANATIONS, approxLogsResult, approxRadicalsResult, approxRationalsOfPowersOfEResult, approxRationalsOfPowersOfPIResult, approxTrigonometricResult, bestApproxSoFar, constantsSum, constantsSumMin, numberOfDigitsAfterTheDot, precision, splitBeforeAndAfterDot;\n    splitBeforeAndAfterDot = theFloat.toString().split(\".\");\n    if (splitBeforeAndAfterDot.length === 2) {\n      numberOfDigitsAfterTheDot = splitBeforeAndAfterDot[1].length;\n      precision = 1 / Math.pow(10, numberOfDigitsAfterTheDot);\n    } else {\n      return [\"\" + Math.floor(theFloat), approx_just_an_integer, Math.floor(theFloat), 1, 2];\n    }\n    console.log(\"precision: \" + precision);\n    constantsSumMin = Number.MAX_VALUE;\n    constantsSum = 0;\n    bestApproxSoFar = null;\n    LOG_EXPLANATIONS = true;\n    approxRadicalsResult = approxRadicals(theFloat);\n    if (approxRadicalsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRadicalsResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRadicalsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRadicals: \" + approxRadicalsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxLogsResult = approxLogs(theFloat);\n    if (approxLogsResult != null) {\n      constantsSum = simpleComplexityMeasure(approxLogsResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxLogsResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxLogs: \" + approxLogsResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxRationalsOfPowersOfEResult = approxRationalsOfPowersOfE(theFloat);\n    if (approxRationalsOfPowersOfEResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfEResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfEResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfE: \" + approxRationalsOfPowersOfEResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxRationalsOfPowersOfPIResult = approxRationalsOfPowersOfPI(theFloat);\n    if (approxRationalsOfPowersOfPIResult != null) {\n      constantsSum = simpleComplexityMeasure(approxRationalsOfPowersOfPIResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxRationalsOfPowersOfPIResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxRationalsOfPowersOfPI: \" + approxRationalsOfPowersOfPIResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    approxTrigonometricResult = approxTrigonometric(theFloat);\n    if (approxTrigonometricResult != null) {\n      constantsSum = simpleComplexityMeasure(approxTrigonometricResult);\n      if (constantsSum < constantsSumMin) {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"better explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n        constantsSumMin = constantsSum;\n        bestApproxSoFar = approxTrigonometricResult;\n      } else {\n        if (LOG_EXPLANATIONS) {\n          console.log(\"subpar explanation by approxTrigonometric: \" + approxTrigonometricResult + \" complexity: \" + constantsSum);\n        }\n      }\n    }\n    return bestApproxSoFar;\n  };\n\n  simpleComplexityMeasure = function(aResult, b, c) {\n    var theSum;\n    theSum = null;\n    if (aResult instanceof Array) {\n      // we want PI and E to somewhat increase the\n      // complexity of the expression, so basically they count\n      // more than any integer lower than 3, i.e. we consider\n      // 1,2,3 to be more fundamental than PI or E.\n      switch (aResult[1]) {\n        case approx_sine_of_pi_times_rational:\n          theSum = 4;\n          break;\n        // exponents of PI and E need to be penalised as well\n        // otherwise they come to explain any big number\n        // so we count them just as much as the multiplier\n        case approx_rationalOfPi:\n          theSum = Math.pow(4, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n        case approx_rationalOfE:\n          theSum = Math.pow(3, Math.abs(aResult[3])) * Math.abs(aResult[2]);\n          break;\n        default:\n          theSum = 0;\n      }\n      theSum += Math.abs(aResult[2]) * (Math.abs(aResult[3]) + Math.abs(aResult[4]));\n    } else {\n      theSum += Math.abs(aResult) * (Math.abs(b) + Math.abs(c));\n    }\n    \n    // heavily discount unit constants\n    if (aResult[2] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n    if (aResult[3] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n    if (aResult[4] === 1) {\n      theSum -= 1;\n    } else {\n      theSum += 1;\n    }\n    if (theSum < 0) {\n      theSum = 0;\n    }\n    return theSum;\n  };\n\n  testApprox = function() {\n    var error, fraction, i, i1, i2, i3, j, j1, j2, j3, k3, l1, l2, l3, len, len1, len2, len3, len4, len5, len6, len7, m1, m2, m3, n1, n2, o, o1, o2, originalValue, q1, q2, r1, r2, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, returned, returnedFraction, returnedValue, s1, s2, t1, t2, u1, u2, v1, v2, value, x1, x2, z1, z2;\n    ref = [2, 3, 5, 6, 7, 8, 10];\n    for (o = 0, len = ref.length; o < len; o++) {\n      i = ref[o];\n      ref1 = [2, 3, 5, 6, 7, 8, 10];\n      for (i1 = 0, len1 = ref1.length; i1 < len1; i1++) {\n        j = ref1[i1];\n        if (i === j) {\n          continue; // this is just 1\n        }\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.sqrt(i) / j;\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    ref2 = [2, 3, 5, 6, 7, 8, 10];\n    for (j1 = 0, len2 = ref2.length; j1 < len2; j1++) {\n      i = ref2[j1];\n      ref3 = [2, 3, 5, 6, 7, 8, 10];\n      for (l1 = 0, len3 = ref3.length; l1 < len3; l1++) {\n        j = ref3[l1];\n        if (i === j) {\n          continue; // this is just 1\n        }\n        console.log(\"testapproxRadicals testing with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.sqrt(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits: \" + \"1 * sqrt( \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    ref4 = [2, 3, 5, 6, 7, 8, 10];\n    for (m1 = 0, len4 = ref4.length; m1 < len4; m1++) {\n      i = ref4[m1];\n      ref5 = [2, 3, 5, 6, 7, 8, 10];\n      for (n1 = 0, len5 = ref5.length; n1 < len5; n1++) {\n        j = ref5[n1];\n        if (i === j) {\n          continue; // this is just 1\n        }\n        console.log(\"testapproxRadicals testing: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.sqrt(i / j);\n        returned = approxRadicals(value);\n        if (returned != null) {\n          returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n          if (returned[1] === approx_radicalOfRatio && Math.abs(value - returnedValue) > 1e-15) {\n            console.log(\"fail testapproxRadicals: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n          }\n        }\n      }\n    }\n    ref6 = [1, 2, 3, 5, 6, 7, 8, 10];\n    for (o1 = 0, len6 = ref6.length; o1 < len6; o1++) {\n      i = ref6[o1];\n      ref7 = [1, 2, 3, 5, 6, 7, 8, 10];\n      for (q1 = 0, len7 = ref7.length; q1 < len7; q1++) {\n        j = ref7[q1];\n        if (i === 1 && j === 1) {\n          continue;\n        }\n        console.log(\"testapproxRadicals testing with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sqrt(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxRadicals(value);\n        returnedValue = returned[2] * Math.sqrt(returned[3] / returned[4]);\n        if (returned[1] === approx_radicalOfRatio && Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testapproxRadicals with 4 digits:: \" + \"1 * sqrt( \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = r1 = 1; r1 <= 5; i = ++r1) {\n      for (j = s1 = 1; s1 <= 5; j = ++s1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.log(i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = t1 = 1; t1 <= 5; i = ++t1) {\n      for (j = u1 = 1; u1 <= 5; j = ++u1) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.log(i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = v1 = 1; v1 <= 5; i = ++v1) {\n      for (j = x1 = 1; x1 <= 5; j = ++x1) {\n        console.log(\"testApproxAll testing: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        value = Math.log(i / j);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = z1 = 1; z1 <= 5; i = ++z1) {\n      for (j = i2 = 1; i2 <= 5; j = ++i2) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.log(i / j);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.log(returned[3] / returned[4]);\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * log(\" + i + \" / \" + j + \" )\" + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = j2 = 1; j2 <= 2; i = ++j2) {\n      for (j = l2 = 1; l2 <= 12; j = ++l2) {\n        console.log(\"testApproxAll testing: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.E, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = m2 = 1; m2 <= 2; i = ++m2) {\n      for (j = n2 = 1; n2 <= 12; j = ++n2) {\n        console.log(\"approxRationalsOfPowersOfE testing with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.E, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfE(value);\n        returnedValue = returned[2] * Math.pow(Math.E, returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfE with 4 digits: \" + \"1 * (e ^ \" + i + \" ) / \" + j + \" . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = o2 = 1; o2 <= 2; i = ++o2) {\n      for (j = q2 = 1; q2 <= 12; j = ++q2) {\n        console.log(\"testApproxAll testing: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        value = Math.pow(Math.PI, i) / j;\n        returned = approxAll(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = r2 = 1; r2 <= 2; i = ++r2) {\n      for (j = s2 = 1; s2 <= 12; j = ++s2) {\n        console.log(\"approxRationalsOfPowersOfPI testing with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j);\n        fraction = i / j;\n        originalValue = Math.pow(Math.PI, i) / j;\n        value = originalValue.toFixed(4);\n        returned = approxRationalsOfPowersOfPI(value);\n        returnedValue = returned[2] * Math.pow(Math.PI, returned[3]) / returned[4];\n        if (Math.abs(originalValue - returnedValue) > 1e-15) {\n          console.log(\"fail approxRationalsOfPowersOfPI with 4 digits: \" + \"1 * pi ^ \" + i + \" / \" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = t2 = 1; t2 <= 4; i = ++t2) {\n      for (j = u2 = 1; u2 <= 4; j = ++u2) {\n        console.log(\"testApproxAll testing: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        value = Math.sin(fraction);\n        returned = approxAll(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail testApproxAll: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned);\n        }\n      }\n    }\n// 5 digits create no problem\n    for (i = v2 = 1; v2 <= 4; i = ++v2) {\n      for (j = x2 = 1; x2 <= 4; j = ++x2) {\n        console.log(\"testApproxAll testing with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(5);\n        returned = approxAll(value);\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 5 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n// 4 digits create two collisions\n    for (i = z2 = 1; z2 <= 4; i = ++z2) {\n      for (j = i3 = 1; i3 <= 4; j = ++i3) {\n        console.log(\"testApproxAll testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" )\");\n        fraction = i / j;\n        originalValue = Math.sin(fraction);\n        value = originalValue.toFixed(4);\n        returned = approxAll(value);\n        if (returned == null) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained:  undefined \");\n        }\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n        if (error > 1e-14) {\n          console.log(\"fail testApproxAll with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n    value = 0;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0\");\n    }\n    value = 0.0;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0\");\n    }\n    value = 0.00;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.00\");\n    }\n    value = 0.000;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.000\");\n    }\n    value = 0.0000;\n    if (approxAll(value)[0] !== \"0\") {\n      console.log(\"fail testApproxAll: 0.0000\");\n    }\n    value = 1;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1\");\n    }\n    value = 1.0;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0\");\n    }\n    value = 1.00;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00\");\n    }\n    value = 1.000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.000\");\n    }\n    value = 1.0000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n    value = 1.00000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.00000\");\n    }\n    value = Math.sqrt(2);\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2)\");\n    }\n    value = 1.41;\n    if (approxAll(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail testApproxAll: 1.41\");\n    }\n    // if we narrow down to a particular family then we can get\n    // an OK guess even with few digits, expecially for really \"famous\" numbers\n    value = 1.4;\n    if (approxRadicals(value)[0] !== \"1 * sqrt( 2 ) / 1\") {\n      console.log(\"fail approxRadicals: 1.4\");\n    }\n    value = 0.6;\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.6\");\n    }\n    value = 0.69;\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.69\");\n    }\n    value = 0.7;\n    if (approxLogs(value)[0] !== \"1 * log( 2 ) / 1\") {\n      console.log(\"fail approxLogs: 0.7\");\n    }\n    value = 1.09;\n    if (approxLogs(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxLogs: 1.09\");\n    }\n    value = 1.09;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.09\");\n    }\n    value = 1.098;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.098\");\n    }\n    value = 1.1;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.1\");\n    }\n    value = 1.11;\n    if (approxAll(value)[0] !== \"1 * log( 3 ) / 1\") {\n      console.log(\"fail approxAll: 1.11\");\n    }\n    value = Math.sqrt(3);\n    if (approxAll(value)[0] !== \"1 * sqrt( 3 ) / 1\") {\n      console.log(\"fail testApproxAll: Math.sqrt(3)\");\n    }\n    value = 1.0000;\n    if (approxAll(value)[0] !== \"1\") {\n      console.log(\"fail testApproxAll: 1.0000\");\n    }\n    value = 3.141592;\n    if (approxAll(value)[0] !== \"1 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 3.141592\");\n    }\n    value = 31.41592;\n    if (approxAll(value)[0] !== \"10 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31.41592\");\n    }\n    value = 314.1592;\n    if (approxAll(value)[0] !== \"100 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 314.1592\");\n    }\n    value = 31415926.53589793;\n    if (approxAll(value)[0] !== \"10000000 * (pi ^ 1 ) / 1 )\") {\n      console.log(\"fail testApproxAll: 31415926.53589793\");\n    }\n    value = Math.sqrt(2);\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/4 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(2)\");\n    }\n    value = Math.sqrt(3);\n    if (approxTrigonometric(value)[0] !== \"2 * sin( 1/3 * pi )\") {\n      console.log(\"fail approxTrigonometric: Math.sqrt(3)\");\n    }\n    value = (Math.sqrt(6) - Math.sqrt(2)) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 1/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) - Math.sqrt(2))/4\");\n    }\n    value = Math.sqrt(2 - Math.sqrt(2)) / 2;\n    if (approxAll(value)[0] !== \"1 * sin( 1/8 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 - Math.sqrt(2))/2\");\n    }\n    value = (Math.sqrt(6) + Math.sqrt(2)) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(6) + Math.sqrt(2))/4\");\n    }\n    value = Math.sqrt(2 + Math.sqrt(3)) / 2;\n    if (approxAll(value)[0] !== \"1 * sin( 5/12 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(2 + Math.sqrt(3))/2\");\n    }\n    value = (Math.sqrt(5) - 1) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 1/10 * pi )\") {\n      console.log(\"fail testApproxAll: (Math.sqrt(5) - 1)/4\");\n    }\n    value = Math.sqrt(10 - 2 * Math.sqrt(5)) / 4;\n    if (approxAll(value)[0] !== \"1 * sin( 1/5 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sqrt(10 - 2*Math.sqrt(5))/4\");\n    }\n    // this has a radical form but it's too long to write\n    value = Math.sin(Math.PI / 7);\n    if (approxAll(value)[0] !== \"1 * sin( 1/7 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/7)\");\n    }\n    // this has a radical form but it's too long to write\n    value = Math.sin(Math.PI / 9);\n    if (approxAll(value)[0] !== \"1 * sin( 1/9 * pi )\") {\n      console.log(\"fail testApproxAll: Math.sin(Math.PI/9)\");\n    }\n    value = 1836.15267;\n    if (approxRationalsOfPowersOfPI(value)[0] !== \"6 * (pi ^ 5 ) / 1 )\") {\n      console.log(\"fail approxRationalsOfPowersOfPI: 1836.15267\");\n    }\n    for (i = j3 = 1; j3 <= 13; i = ++j3) {\n      for (j = k3 = 1; k3 <= 13; j = ++k3) {\n        console.log(\"approxTrigonometric testing: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        value = Math.sin(Math.PI * fraction);\n        // we specifically search for sines of rational multiples of PI\n        // because too many of them would be picked up as simple\n        // rationals.\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n        if (Math.abs(value - returnedValue) > 1e-15) {\n          console.log(\"fail approxTrigonometric: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned);\n        }\n      }\n    }\n    for (i = l3 = 1; l3 <= 13; i = ++l3) {\n      for (j = m3 = 1; m3 <= 13; j = ++m3) {\n        // with four digits, there are two collisions with the\n        // \"simple fraction\" argument hypotesis, which we prefer since\n        // it's a simpler expression, so let's skip those\n        // two tests\n        if (i === 5 && j === 11 || i === 6 && j === 11) {\n          continue;\n        }\n        console.log(\"approxTrigonometric testing with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi )\");\n        fraction = i / j;\n        originalValue = Math.sin(Math.PI * fraction);\n        value = originalValue.toFixed(4);\n        // we specifically search for sines of rational multiples of PI\n        // because too many of them would be picked up as simple\n        // rationals.\n        returned = approxTrigonometric(value);\n        returnedFraction = returned[3] / returned[4];\n        returnedValue = returned[2] * Math.sin(Math.PI * returnedFraction);\n        error = Math.abs(originalValue - returnedValue);\n        if (error > 1e-14) {\n          console.log(\"fail approxTrigonometric with 4 digits: \" + \"1 * sin( \" + i + \"/\" + j + \" * pi ) . obtained: \" + returned + \" error: \" + error);\n        }\n      }\n    }\n    return console.log(\"testApprox done\");\n  };\n\n  $.approxRadicals = approxRadicals;\n\n  $.approxRationalsOfLogs = approxRationalsOfLogs;\n\n  $.approxAll = approxAll;\n\n  $.testApprox = testApprox;\n\n  Eval_arccos = function() {\n    push(cadr(p1));\n    Eval();\n    return arccos();\n  };\n\n  arccos = function() {\n    var d, errno, n;\n    n = 0;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.acos(p1.d);\n      if (errno) {\n        stop(\"arccos function argument is not in the interval [-1,1]\");\n      }\n      push_double(d);\n      restore();\n      return;\n    }\n    // if p1 == 1/sqrt(2) then return 1/4*pi (45 degrees)\n    // second if catches the other way of saying it, sqrt(2)/2\n    if ((isoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 4.0);\n      } else {\n        push_rational(1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    // if p1 == -1/sqrt(2) then return 3/4*pi (135 degrees)\n    // second if catches the other way of saying it, -sqrt(2)/2\n    if ((isminusoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI * 3.0 / 4.0);\n      } else {\n        push_rational(3, 4);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    // if p1 == sqrt(3)/2 then return 1/6*pi (30 degrees)\n    if (issqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 6.0);\n      } else {\n        push_rational(1, 6);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    // if p1 == -sqrt(3)/2 then return 5/6*pi (150 degrees)\n    if (isminussqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(5.0 * Math.PI / 6.0);\n      } else {\n        push_rational(5, 6);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    if (!isrational(p1)) {\n      push_symbol(ARCCOS);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push_symbol(PI);\n        }\n        break;\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI * 2.0 / 3.0);\n        } else {\n          push_rational(2, 3);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 3.0);\n        } else {\n          push_rational(1, 3);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n        break;\n      default:\n        push_symbol(ARCCOS);\n        push(p1);\n        list(2);\n    }\n    return restore();\n  };\n\n  Eval_arccosh = function() {\n    push(cadr(p1));\n    Eval();\n    return arccosh();\n  };\n\n  arccosh = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(COSH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = p1.d;\n      if (d < 1.0) {\n        stop(\"arccosh function argument is less than 1.0\");\n      }\n      d = Math.log(d + Math.sqrt(d * d - 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isplusone(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    push_symbol(ARCCOSH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  Eval_arcsin = function() {\n    push(cadr(p1));\n    Eval();\n    return arcsin();\n  };\n\n  arcsin = function() {\n    var d, errno, n;\n    n = 0;\n    d = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.asin(p1.d);\n      if (errno) {\n        stop(\"arcsin function argument is not in the interval [-1,1]\");\n      }\n      push_double(d);\n      restore();\n      return;\n    }\n    // if p1 == 1/sqrt(2) then return 1/4*pi (45 degrees)\n    // second if catches the other way of saying it, sqrt(2)/2\n    if ((isoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      push_rational(1, 4);\n      push_symbol(PI);\n      multiply();\n      restore();\n      return;\n    }\n    // if p1 == -1/sqrt(2) then return -1/4*pi (-45 degrees)\n    // second if catches the other way of saying it, -sqrt(2)/2\n    if ((isminusoneoversqrttwo(p1)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), -1, 2) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 2) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      if (evaluatingAsFloats) {\n        push_double(-Math.PI / 4.0);\n      } else {\n        push_rational(-1, 4);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    // if p1 == sqrt(3)/2 then return 1/3*pi (60 degrees)\n    if (issqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI / 3.0);\n      } else {\n        push_rational(1, 3);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    // if p1 == -sqrt(3)/2 then return -1/3*pi (-60 degrees)\n    if (isminussqrtthreeovertwo(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(-Math.PI / 3.0);\n      } else {\n        push_rational(-1, 3);\n        push_symbol(PI);\n        multiply();\n      }\n      restore();\n      return;\n    }\n    if (!isrational(p1)) {\n      push_symbol(ARCSIN);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    push(p1);\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    switch (n) {\n      case -2:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 2.0);\n        } else {\n          push_rational(-1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case -1:\n        if (evaluatingAsFloats) {\n          push_double(-Math.PI / 6.0);\n        } else {\n          push_rational(-1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 0:\n        if (evaluatingAsFloats) {\n          push_double(0.0);\n        } else {\n          push(zero);\n        }\n        break;\n      case 1:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 6.0);\n        } else {\n          push_rational(1, 6);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      case 2:\n        if (evaluatingAsFloats) {\n          push_double(Math.PI / 2.0);\n        } else {\n          push_rational(1, 2);\n          push_symbol(PI);\n          multiply();\n        }\n        break;\n      default:\n        push_symbol(ARCSIN);\n        push(p1);\n        list(2);\n    }\n    return restore();\n  };\n\n  Eval_arcsinh = function() {\n    push(cadr(p1));\n    Eval();\n    return arcsinh();\n  };\n\n  arcsinh = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(SINH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = p1.d;\n      d = Math.log(d + Math.sqrt(d * d + 1.0));\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    push_symbol(ARCSINH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  Eval_arctan = function() {\n    push(cadr(p1));\n    Eval();\n    return arctan();\n  };\n\n  arctan = function() {\n    var d, errno;\n    d = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(TAN)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      errno = 0;\n      d = Math.atan(p1.d);\n      if (errno) {\n        stop(\"arctan function error\");\n      }\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      arctan();\n      negate();\n      restore();\n      return;\n    }\n    // arctan(sin(a) / cos(a)) ?\n    if (Find(p1, symbol(SIN)) && Find(p1, symbol(COS))) {\n      push(p1);\n      numerator();\n      p2 = pop();\n      push(p1);\n      denominator();\n      p3 = pop();\n      if (car(p2) === symbol(SIN) && car(p3) === symbol(COS) && equal(cadr(p2), cadr(p3))) {\n        push(cadr(p2));\n        restore();\n        return;\n      }\n    }\n    // arctan(1/sqrt(3)) -> pi/6\n    // second if catches the other way of saying it, sqrt(3)/3\n    if ((car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), -1, 2)) || (car(p1) === symbol(MULTIPLY) && equalq(car(cdr(p1)), 1, 3) && car(car(cdr(cdr(p1)))) === symbol(POWER) && equaln(car(cdr(car(cdr(cdr(p1))))), 3) && equalq(car(cdr(cdr(car(cdr(cdr(p1)))))), 1, 2))) {\n      push_rational(1, 6);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      multiply();\n      restore();\n      return;\n    }\n    // arctan(1) -> pi/4\n    if (equaln(p1, 1)) {\n      push_rational(1, 4);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      multiply();\n      restore();\n      return;\n    }\n    // arctan(sqrt(3)) -> pi/3\n    if (car(p1) === symbol(POWER) && equaln(cadr(p1), 3) && equalq(caddr(p1), 1, 2)) {\n      push_rational(1, 3);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      multiply();\n      restore();\n      return;\n    }\n    push_symbol(ARCTAN);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  Eval_arctanh = function() {\n    push(cadr(p1));\n    Eval();\n    return arctanh();\n  };\n\n  arctanh = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(TANH)) {\n      push(cadr(p1));\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = p1.d;\n      if (d < -1.0 || d > 1.0) {\n        stop(\"arctanh function argument is not in the interval [-1,1]\");\n      }\n      d = Math.log((1.0 + d) / (1.0 - d)) / 2.0;\n      push_double(d);\n      restore();\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      restore();\n      return;\n    }\n    push_symbol(ARCTANH);\n    push(p1);\n    list(2);\n    return restore();\n  };\n\n  DEBUG_ARG = false;\n\n  Eval_arg = function() {\n    push(cadr(p1));\n    Eval();\n    return arg();\n  };\n\n  arg = function() {\n    save();\n    p1 = pop();\n    push(p1);\n    numerator();\n    yyarg();\n    push(p1);\n    denominator();\n    yyarg();\n    subtract();\n    return restore();\n  };\n\n  //define RE p2\n  //define IM p3\n  yyarg = function() {\n    save();\n    p1 = pop();\n    // case of plain number\n    if (ispositivenumber(p1) || p1 === symbol(PI)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(0);\n      } else {\n        push_integer(0);\n      }\n    } else if (isnegativenumber(p1)) {\n      if (isdouble(p1) || evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      negate();\n    // you'd think that something like\n    // arg(a) is always 0 when a is real but no,\n    // arg(a) is pi when a is negative so we have\n    // to leave unexpressed\n    } else if (issymbol(p1)) {\n      push_symbol(ARG);\n      push(p1);\n      list(2);\n    } else if (car(p1) === symbol(POWER) && equaln(cadr(p1), -1)) {\n      // -1 to a power\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push(symbol(PI));\n      }\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(POWER) && cadr(p1) === symbol(E)) {\n      // exponential\n      push(caddr(p1));\n      imag();\n    // arg(a^(1/2)) is always equal to 1/2 * arg(a)\n    // this can obviously be made more generic TODO\n    } else if (car(p1) === symbol(POWER) && isoneovertwo(caddr(p1))) {\n      if (DEBUG_ARG) {\n        console.log(\"arg of a sqrt: \" + p1);\n      }\n      if (DEBUG_ARG) {\n        debugger;\n      }\n      push(cadr(p1));\n      arg();\n      if (DEBUG_ARG) {\n        console.log(\" = 1/2 * \" + stack[tos - 1]);\n      }\n      push(caddr(p1));\n      multiply();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      // product of factors\n      push_integer(0);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        arg();\n        add();\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(ADD)) {\n      // sum of terms\n      push(p1);\n      rect();\n      p1 = pop();\n      push(p1);\n      real();\n      p2 = pop();\n      push(p1);\n      imag();\n      p3 = pop();\n      if (isZeroAtomOrTensor(p2)) {\n        if (evaluatingAsFloats) {\n          push_double(Math.PI);\n        } else {\n          push(symbol(PI));\n        }\n        if (isnegative(p3)) {\n          negate();\n        }\n      } else {\n        push(p3);\n        push(p2);\n        divide();\n        arctan();\n        if (isnegative(p2)) {\n          if (evaluatingAsFloats) {\n            push_double(Math.PI);\n          } else {\n            push_symbol(PI);\n          }\n          if (isnegative(p3)) {\n            subtract(); // quadrant 1 -> 3\n          } else {\n            add(); // quadrant 4 -> 2\n          }\n        }\n      }\n    } else {\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        // if we assume all passed values are real\n        push_integer(0);\n      } else {\n        // if we don't assume all passed values are real, all\n        // we con do is to leave unexpressed\n        push_symbol(ARG);\n        push(p1);\n        list(2);\n      }\n    }\n    return restore();\n  };\n\n  // pretty print\n  bake = function() {\n    var h, s, t, x, y, z;\n    h = 0;\n    s = 0;\n    t = 0;\n    x = 0;\n    y = 0;\n    z = 0;\n    expanding++;\n    save();\n    p1 = pop();\n    s = ispolyexpandedform(p1, symbol(SYMBOL_S));\n    t = ispolyexpandedform(p1, symbol(SYMBOL_T));\n    x = ispolyexpandedform(p1, symbol(SYMBOL_X));\n    y = ispolyexpandedform(p1, symbol(SYMBOL_Y));\n    z = ispolyexpandedform(p1, symbol(SYMBOL_Z));\n    if (s === 1 && t === 0 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_S);\n      bake_poly();\n    } else if (s === 0 && t === 1 && x === 0 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_T);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 1 && y === 0 && z === 0) {\n      p2 = symbol(SYMBOL_X);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 1 && z === 0) {\n      p2 = symbol(SYMBOL_Y);\n      bake_poly();\n    } else if (s === 0 && t === 0 && x === 0 && y === 0 && z === 1) {\n      p2 = symbol(SYMBOL_Z);\n      bake_poly();\n    // don't bake the contents of some constructs such as \"for\"\n    // because we don't want to evaluate the body of\n    // such constructs \"statically\", i.e. without fully running\n    // the loops.\n    } else if ((iscons(p1)) && car(p1) !== symbol(FOR)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        bake();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n    restore();\n    return expanding--;\n  };\n\n  polyform = function() {\n    var h;\n    h = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (ispolyexpandedform(p1, p2)) {\n      bake_poly();\n    } else if (iscons(p1)) {\n      h = tos;\n      push(car(p1));\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        polyform();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n    return restore();\n  };\n\n  bake_poly = function() {\n    var a, h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    //U **a\n    a = tos;\n    k = coeff(p2, p1);\n    h = tos;\n    for (i = o = ref = k - 1; o >= 0; i = o += -1) {\n      p1 = stack[a + i];\n      bake_poly_term(i);\n    }\n    n = tos - h;\n    if (n > 1) {\n      list(n);\n      push(symbol(ADD));\n      swap();\n      cons();\n    }\n    p1 = pop();\n    moveTos(tos - k);\n    return push(p1);\n  };\n\n  // p1 points to coefficient of p2 ^ k\n\n  // k is an int\n  bake_poly_term = function(k) {\n    var h, n;\n    h = 0;\n    n = 0;\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    }\n    // constant term?\n    if (k === 0) {\n      if (car(p1) === symbol(ADD)) {\n        p1 = cdr(p1);\n        while (iscons(p1)) {\n          push(car(p1));\n          p1 = cdr(p1);\n        }\n      } else {\n        push(p1);\n      }\n      return;\n    }\n    h = tos;\n    // coefficient\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else if (!equaln(p1, 1)) {\n      push(p1);\n    }\n    // x ^ k\n    if (k === 1) {\n      push(p2);\n    } else {\n      push(symbol(POWER));\n      push(p2);\n      push_integer(k);\n      list(3);\n    }\n    n = tos - h;\n    if (n > 1) {\n      list(n);\n      push(symbol(MULTIPLY));\n      swap();\n      return cons();\n    }\n  };\n\n  Eval_besselj = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return besselj();\n  };\n\n  besselj = function() {\n    save();\n    yybesselj();\n    return restore();\n  };\n\n  //define X p1\n  //define N p2\n  //define SGN p3\n  yybesselj = function() {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    // numerical result\n    if (isdouble(p1) && !isNaN(n)) {\n      d = jn(n, p1.d);\n      push_double(d);\n      return;\n    }\n    // bessej(0,0) = 1\n    if (isZeroAtomOrTensor(p1) && isZeroAtomOrTensor(p2)) {\n      push_integer(1);\n      return;\n    }\n    // besselj(0,n) = 0\n    if (isZeroAtomOrTensor(p1) && !isNaN(n)) {\n      push_integer(0);\n      return;\n    }\n    // half arguments\n    if (p2.k === NUM && MEQUAL(p2.q.b, 2)) {\n      // n = 1/2\n      if (MEQUAL(p2.q.a, 1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        sine();\n        multiply();\n        return;\n      }\n      // n = -1/2\n      if (MEQUAL(p2.q.a, -1)) {\n        if (evaluatingAsFloats) {\n          push_double(2.0 / Math.PI);\n        } else {\n          push_integer(2);\n          push_symbol(PI);\n          divide();\n        }\n        push(p1);\n        divide();\n        push_rational(1, 2);\n        power();\n        push(p1);\n        cosine();\n        multiply();\n        return;\n      }\n      // besselj(x,n) = (2/x) (n-sgn(n)) besselj(x,n-sgn(n)) - besselj(x,n-2*sgn(n))\n      push_integer(MSIGN(p2.q.a));\n      p3 = pop();\n      push_integer(2);\n      push(p1);\n      divide();\n      push(p2);\n      push(p3);\n      subtract();\n      multiply();\n      push(p1);\n      push(p2);\n      push(p3);\n      subtract();\n      besselj();\n      multiply();\n      push(p1);\n      push(p2);\n      push_integer(2);\n      push(p3);\n      multiply();\n      subtract();\n      besselj();\n      subtract();\n      return;\n    }\n    //if 0 # test cases needed\n    if (isnegativeterm(p1)) {\n      push(p1);\n      negate();\n      push(p2);\n      power();\n      push(p1);\n      push(p2);\n      negate();\n      power();\n      multiply();\n      push_symbol(BESSELJ);\n      push(p1);\n      negate();\n      push(p2);\n      list(3);\n      multiply();\n      return;\n    }\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELJ);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    }\n    //endif\n    push(symbol(BESSELJ));\n    push(p1);\n    push(p2);\n    return list(3);\n  };\n\n  Eval_bessely = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return bessely();\n  };\n\n  bessely = function() {\n    save();\n    yybessely();\n    return restore();\n  };\n\n  //define X p1\n  //define N p2\n  yybessely = function() {\n    var d, n;\n    d = 0.0;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    if (isdouble(p1) && !isNaN(n)) {\n      d = yn(n, p1.d);\n      push_double(d);\n      return;\n    }\n    if (isnegativeterm(p2)) {\n      push_integer(-1);\n      push(p2);\n      power();\n      push_symbol(BESSELY);\n      push(p1);\n      push(p2);\n      negate();\n      list(3);\n      multiply();\n      return;\n    }\n    push_symbol(BESSELY);\n    push(p1);\n    push(p2);\n    list(3);\n  };\n\n  //double convert_rational_to_double(U *)\n  //double convert_bignum_to_double(unsigned int *)\n  //int ge(unsigned int *, unsigned int *, int)\n  mint = function(a) {\n    return bigInt(a);\n  };\n\n  isSmall = function(a) {\n    return a.geq(Number.MIN_SAFE_INTEGER) && a.leq(Number.MAX_SAFE_INTEGER);\n  };\n\n  // b is +1 or -1, a is a bigint\n  setSignTo = function(a, b) {\n    if (a.isPositive()) {\n      if (b < 0) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      // a is negative\n      if (b > 0) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n    return a;\n  };\n\n  makeSignSameAs = function(a, b) {\n    if (a.isPositive()) {\n      if (b.isNegative()) {\n        return a.multiply(bigInt(-1));\n      }\n    } else {\n      // a is negative\n      if (b.isPositive()) {\n        return a.multiply(bigInt(-1));\n      }\n    }\n    return a;\n  };\n\n  makePositive = function(a) {\n    if (a.isNegative()) {\n      return a.multiply(bigInt(-1));\n    }\n    return a;\n  };\n\n  // n is an int\n  /*\n  mtotal = 0\n  MP_MIN_SIZE = 2\n  MP_MAX_FREE  = 1000\n\n  mnew = (n) ->\n    if (n < MP_MIN_SIZE)\n      n = MP_MIN_SIZE\n    if (n == MP_MIN_SIZE && mfreecount)\n      p = free_stack[--mfreecount]\n    else\n      p = [] #(unsigned int *) malloc((n + 3) * sizeof (int))\n      #if (p == 0)\n   *  stop(\"malloc failure\")\n    p[0] = n\n    mtotal += n\n    return p[3]\n   */\n  // p is the index of array of ints\n  // !!! array wasn't passed here\n  /*\n  free_stack = []\n\n  mfree = (array, p) ->\n    p -= 3\n    mtotal -= array[p]\n    if (array[p] == MP_MIN_SIZE && mfreecount < MP_MAX_FREE)\n      free_stack[mfreecount++] = p\n    else\n      free(p)\n  */\n  // convert int to bignum\n\n  // n is an int\n  /*\n  mint = (n) ->\n    p = mnew(1)\n    if (n < 0)\n   * !!! this is FU\n   * MSIGN(p) = -1\n      fu = true\n    else\n   * !!! this is FU\n      #MSIGN(p) = 1\n      fu = true\n   * !!! this is FU\n    #MLENGTH(p) = 1\n    p[0] = Math.abs(n)\n    return p\n   */\n  // copy bignum\n\n  // a is an array of ints\n  /*\n  mcopy = (a) ->\n    #unsigned int *b\n\n    b = mnew(MLENGTH(a))\n\n   * !!! fu\n    #MSIGN(b) = MSIGN(a)\n    #MLENGTH(b) = MLENGTH(a)\n\n    for i in [0...MLENGTH(a)]\n      b[i] = a[i]\n\n    return b\n   */\n  /*\n   * \n   * ge not invoked from anywhere - is you need ge\n   * just use the bigNum's ge implementation\n   * leaving it here just in case I decide to backport to C\n   *\n   * a >= b ?\n   * and and b arrays of ints, len is an int\n  ge = (a, b, len) ->\n    i = 0\n    for i in [0...len]\n      if (a[i] == b[i])\n        continue\n      else\n        break\n    if (a[i] >= b[i])\n      return 1\n    else\n      return 0\n   */\n  add_numbers = function() {\n    var a, b, theResult;\n    a = 1.0;\n    b = 1.0;\n    //if DEBUG then console.log(\"add_numbers adding numbers: \" + print_list(stack[tos - 1]) + \" and \" + print_list(stack[tos - 2]))\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qadd();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    theResult = a + b;\n    push_double(theResult);\n    return restore();\n  };\n\n  subtract_numbers = function() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qsub();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    push_double(a - b);\n    return restore();\n  };\n\n  multiply_numbers = function() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qmul();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    push_double(a * b);\n    return restore();\n  };\n\n  divide_numbers = function() {\n    var a, b;\n    a = 0.0;\n    b = 0.0;\n    if (isrational(stack[tos - 1]) && isrational(stack[tos - 2])) {\n      qdiv();\n      return;\n    }\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"divide by zero\");\n    }\n    if (isdouble(p1)) {\n      a = p1.d;\n    } else {\n      a = convert_rational_to_double(p1);\n    }\n    if (isdouble(p2)) {\n      b = p2.d;\n    } else {\n      b = convert_rational_to_double(p2);\n    }\n    push_double(a / b);\n    return restore();\n  };\n\n  invert_number = function() {\n    var a, b;\n    //unsigned int *a, *b\n    save();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p1)) {\n      stop(\"divide by zero\");\n    }\n    if (isdouble(p1)) {\n      push_double(1 / p1.d);\n      restore();\n      return;\n    }\n    a = bigInt(p1.q.a);\n    b = bigInt(p1.q.b);\n    b = makeSignSameAs(b, a);\n    a = setSignTo(a, 1);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = b;\n    p1.q.b = a;\n    push(p1);\n    return restore();\n  };\n\n  // a and b are Us\n  compare_rationals = function(a, b) {\n    var ab, ba, t;\n    t = 0;\n    //unsigned int *ab, *ba\n    ab = mmul(a.q.a, b.q.b);\n    ba = mmul(a.q.b, b.q.a);\n    t = mcmp(ab, ba);\n    return t;\n  };\n\n  // a and b are Us\n  compare_numbers = function(a, b) {\n    var x, y;\n    x = 0.0;\n    y = 0.0;\n    if (isrational(a) && isrational(b)) {\n      return compare_rationals(a, b);\n    }\n    if (isdouble(a)) {\n      x = a.d;\n    } else {\n      x = convert_rational_to_double(a);\n    }\n    if (isdouble(b)) {\n      y = b.d;\n    } else {\n      y = convert_rational_to_double(b);\n    }\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n  negate_number = function() {\n    save();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    switch (p1.k) {\n      case NUM:\n        p2 = new U();\n        p2.k = NUM;\n        p2.q.a = bigInt(p1.q.a.multiply(bigInt.minusOne));\n        p2.q.b = bigInt(p1.q.b);\n        push(p2);\n        break;\n      case DOUBLE:\n        push_double(-p1.d);\n        break;\n      default:\n        stop(\"bug caught in mp_negate_number\");\n    }\n    return restore();\n  };\n\n  bignum_truncate = function() {\n    var a;\n    //unsigned int *a\n    save();\n    p1 = pop();\n    a = mdiv(p1.q.a, p1.q.b);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  mp_numerator = function() {\n    save();\n    p1 = pop();\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.a);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  };\n\n  mp_denominator = function() {\n    save();\n    p1 = pop();\n    if (p1.k !== NUM) {\n      push(one);\n      restore();\n      return;\n    }\n    p2 = new U();\n    p2.k = NUM;\n    p2.q.a = bigInt(p1.q.b);\n    p2.q.b = bigInt(1);\n    push(p2);\n    return restore();\n  };\n\n  // expo is an integer\n  bignum_power_number = function(expo) {\n    var a, b, t;\n    //unsigned int *a, *b, *t\n    save();\n    p1 = pop();\n    a = mpow(p1.q.a, Math.abs(expo));\n    b = mpow(p1.q.b, Math.abs(expo));\n    if (expo < 0) {\n      // swap a and b\n      t = a;\n      a = b;\n      b = t;\n      a = makeSignSameAs(a, b);\n      b = setSignTo(b, 1);\n    }\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = b;\n    push(p1);\n    return restore();\n  };\n\n  // p an array of ints\n  convert_bignum_to_double = function(p) {\n    return p.toJSNumber();\n  };\n\n  // p is a U\n  convert_rational_to_double = function(p) {\n    var quotientAndRemainder, result;\n    if (p.q == null) {\n      debugger;\n    }\n    quotientAndRemainder = p.q.a.divmod(p.q.b);\n    result = quotientAndRemainder.quotient + quotientAndRemainder.remainder / p.q.b.toJSNumber();\n    return result;\n  };\n\n  // n an integer\n  new_integer = function(n) {\n    var theNewInteger;\n    theNewInteger = new U();\n    theNewInteger.k = NUM;\n    theNewInteger.q.a = bigInt(n);\n    theNewInteger.q.b = bigInt(1);\n    return theNewInteger;\n  };\n\n  // n an integer\n  push_integer = function(n) {\n    if (DEBUG) {\n      console.log(\"pushing integer \" + n);\n    }\n    return push(new_integer(n));\n  };\n\n  // d a double\n  push_double = function(d) {\n    save();\n    p1 = new U();\n    p1.k = DOUBLE;\n    p1.d = d;\n    push(p1);\n    return restore();\n  };\n\n  // a,b parts of a rational\n  push_rational = function(a, b) {\n    /*\n    save()\n    p1 = new U()\n    p1.k = NUM\n    p1.q.a = bigInt(a)\n    p1.q.b = bigInt(b)\n    ## FIXME -- normalize ##\n    push(p1)\n    restore()\n     */\n    var p;\n    p = new U();\n    p.k = NUM;\n    p.q.a = bigInt(a);\n    p.q.b = bigInt(b);\n    return push(p);\n  };\n\n  pop_integer = function() {\n    var n;\n    n = 0/0;\n    save();\n    p1 = pop();\n    switch (p1.k) {\n      case NUM:\n        if (isinteger(p1) && isSmall(p1.q.a)) {\n          n = p1.q.a.toJSNumber();\n        }\n        break;\n      case DOUBLE:\n        if (DEBUG) {\n          console.log(\"popping integer but double is found\");\n        }\n        if (Math.floor(p1.d) === p1.d) {\n          if (DEBUG) {\n            console.log(\"...altough it's an integer\");\n          }\n          n = p1.d;\n        }\n    }\n    restore();\n    return n;\n  };\n\n  // p is a U, flag is an int\n  print_double = function(p, flag) {\n    var accumulator, buf;\n    accumulator = \"\";\n    buf = doubleToReasonableString(p.d);\n    if (flag === 1 && buf === '-') {\n      accumulator += print_str(buf + 1);\n    } else {\n      accumulator += print_str(buf);\n    }\n    return accumulator;\n  };\n\n  // s is a string\n  bignum_scan_integer = function(s) {\n    var a, scounter, sign_;\n    //unsigned int *a\n    //char sign\n    save();\n    scounter = 0;\n    sign_ = s[scounter];\n    if (sign_ === '+' || sign_ === '-') {\n      scounter++;\n    }\n    // !!!! some mess in here, added an argument\n    a = bigInt(s.substring(scounter));\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = a;\n    p1.q.b = bigInt(1);\n    push(p1);\n    if (sign_ === '-') {\n      negate();\n    }\n    return restore();\n  };\n\n  // s a string\n  bignum_scan_float = function(s) {\n    return push_double(parseFloat(s));\n  };\n\n  // gives the capability of printing the unsigned\n  // value. This is handy because printing of the sign\n  // might be taken care of \"upstream\"\n  // e.g. when printing a base elevated to a negative exponent\n  // prints the inverse of the base powered to the unsigned\n  // exponent.\n  // p is a U\n  print_number = function(p, signed) {\n    var aAsString, accumulator, buf, denominatorString;\n    accumulator = \"\";\n    denominatorString = \"\";\n    buf = \"\";\n    switch (p.k) {\n      case NUM:\n        aAsString = p.q.a.toString();\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n        if (printMode === PRINTMODE_LATEX && isfraction(p)) {\n          aAsString = \"\\\\frac{\" + aAsString + \"}{\";\n        }\n        accumulator += aAsString;\n        if (isfraction(p)) {\n          if (printMode !== PRINTMODE_LATEX) {\n            accumulator += \"/\";\n          }\n          denominatorString = p.q.b.toString();\n          if (printMode === PRINTMODE_LATEX) {\n            denominatorString += \"}\";\n          }\n          accumulator += denominatorString;\n        }\n        break;\n      case DOUBLE:\n        aAsString = doubleToReasonableString(p.d);\n        if (!signed) {\n          if (aAsString[0] === \"-\") {\n            aAsString = aAsString.substring(1);\n          }\n        }\n        accumulator += aAsString;\n    }\n    return accumulator;\n  };\n\n  gcd_numbers = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    //  if (!isinteger(p1) || !isinteger(p2))\n    //    stop(\"integer args expected for gcd\")\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mgcd(p1.q.a, p2.q.a);\n    p3.q.b = mgcd(p1.q.b, p2.q.b);\n    p3.q.a = setSignTo(p3.q.a, 1);\n    push(p3);\n    return restore();\n  };\n\n  pop_double = function() {\n    var d;\n    d = 0.0;\n    save();\n    p1 = pop();\n    switch (p1.k) {\n      case NUM:\n        d = convert_rational_to_double(p1);\n        break;\n      case DOUBLE:\n        d = p1.d;\n        break;\n      default:\n        d = 0.0;\n    }\n    restore();\n    return d;\n  };\n\n  bignum_float = function() {\n    var d;\n    d = 0.0;\n    d = convert_rational_to_double(pop());\n    return push_double(d);\n  };\n\n  //static unsigned int *__factorial(int)\n\n  // n is an int\n  bignum_factorial = function(n) {\n    save();\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = __factorial(n);\n    p1.q.b = bigInt(1);\n    push(p1);\n    return restore();\n  };\n\n  // n is an int\n  __factorial = function(n) {\n    var a, b, i, o, ref, t;\n    i = 0;\n    //unsigned int *a, *b, *t\n    if (n === 0 || n === 1) {\n      a = bigInt(1);\n      return a;\n    }\n    a = bigInt(2);\n    b = bigInt(0);\n    if (3 <= n) {\n      for (i = o = 3, ref = n; (3 <= ref ? o <= ref : o >= ref); i = 3 <= ref ? ++o : --o) {\n        b = bigInt(i);\n        t = mmul(a, b);\n        a = t;\n      }\n    }\n    return a;\n  };\n\n  mask = [0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020, 0x00000040, 0x00000080, 0x00000100, 0x00000200, 0x00000400, 0x00000800, 0x00001000, 0x00002000, 0x00004000, 0x00008000, 0x00010000, 0x00020000, 0x00040000, 0x00080000, 0x00100000, 0x00200000, 0x00400000, 0x00800000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000];\n\n  // unsigned int *x, unsigned int k\n  mp_set_bit = function(x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] |= mask[k % 32];\n  };\n\n  // unsigned int *x, unsigned int k\n  mp_clr_bit = function(x, k) {\n    console.log(\"not implemented yet\");\n    debugger;\n    return x[k / 32] &= ~mask[k % 32];\n  };\n\n  // unsigned int *a\n  mshiftright = function(a) {\n    return a = a.shiftRight();\n  };\n\n  //  Binomial coefficient\n\n  //  Input:    tos-2    n\n\n  //      tos-1    k\n\n  //  Output:    Binomial coefficient on stack\n\n  //  binomial(n, k) = n! / k! / (n - k)!\n\n  //  The binomial coefficient vanishes for k < 0 or k > n. (A=B, p. 19)\n  Eval_binomial = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return binomial();\n  };\n\n  binomial = function() {\n    save();\n    ybinomial();\n    return restore();\n  };\n\n  //define N p1\n  //define K p2\n  ybinomial = function() {\n    p2 = pop();\n    p1 = pop();\n    if (BINOM_check_args() === 0) {\n      push(zero);\n      return;\n    }\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    return divide();\n  };\n\n  BINOM_check_args = function() {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  Eval_ceiling = function() {\n    push(cadr(p1));\n    Eval();\n    return ceiling();\n  };\n\n  ceiling = function() {\n    save();\n    yyceiling();\n    return restore();\n  };\n\n  yyceiling = function() {\n    var d, doNothing;\n    d = 0.0;\n    p1 = pop();\n    if (!isNumericAtom(p1)) {\n      push_symbol(CEILING);\n      push(p1);\n      list(2);\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.ceil(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n    if (isnegativenumber(p1)) {\n      return doNothing = 1;\n    } else {\n      push_integer(1);\n      return add();\n    }\n  };\n\n  Eval_choose = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return choose();\n  };\n\n  // Result vanishes for k < 0 or k > n. (A=B, p. 19)\n\n  //define N p1\n  //define K p2\n  choose = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (choose_check_args() === 0) {\n      push_integer(0);\n      restore();\n      return;\n    }\n    push(p1);\n    factorial();\n    push(p2);\n    factorial();\n    divide();\n    push(p1);\n    push(p2);\n    subtract();\n    factorial();\n    divide();\n    return restore();\n  };\n\n  choose_check_args = function() {\n    if (isNumericAtom(p1) && lessp(p1, zero)) {\n      return 0;\n    } else if (isNumericAtom(p2) && lessp(p2, zero)) {\n      return 0;\n    } else if (isNumericAtom(p1) && isNumericAtom(p2) && lessp(p1, p2)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  Eval_circexp = function() {\n    push(cadr(p1));\n    Eval();\n    circexp();\n    // normalize\n    return Eval();\n  };\n\n  circexp = function() {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      expcos();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      expsin();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(TAN)) {\n      p1 = cadr(p1);\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      exponential();\n      p2 = pop();\n      push(imaginaryunit);\n      push(p1);\n      multiply();\n      negate();\n      exponential();\n      p3 = pop();\n      push(p3);\n      push(p2);\n      subtract();\n      push(imaginaryunit);\n      multiply();\n      push(p2);\n      push(p3);\n      add();\n      divide();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(COSH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      add();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(SINH)) {\n      p1 = cadr(p1);\n      push(p1);\n      exponential();\n      push(p1);\n      negate();\n      exponential();\n      subtract();\n      push_rational(1, 2);\n      multiply();\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(TANH)) {\n      p1 = cadr(p1);\n      push(p1);\n      push_integer(2);\n      multiply();\n      exponential();\n      p1 = pop();\n      push(p1);\n      push_integer(1);\n      subtract();\n      push(p1);\n      push_integer(1);\n      add();\n      divide();\n      restore();\n      return;\n    }\n    if (iscons(p1)) {\n      h = tos;\n      while (iscons(p1)) {\n        push(car(p1));\n        circexp();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      restore();\n      return;\n    }\n    if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n      for (i = o = 0, ref = p1.tensor.nelem; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n        circexp();\n        p1.tensor.elem[i] = pop();\n      }\n      push(p1);\n      restore();\n      return;\n    }\n    push(p1);\n    return restore();\n  };\n\n  Eval_clearall = function() {\n    do_clearall();\n    return push(symbol(NIL));\n  };\n\n  do_clearall = function() {\n    if (test_flag === 0) {\n      clear_term();\n    }\n    do_clearPatterns();\n    clear_symbols();\n    defn();\n    return codeGen = false;\n  };\n\n  // clearall from application GUI code\n  clearall = function() {\n    return run(\"clearall\");\n  };\n\n  // this transformation is done in run.coffee, see there\n  // for more info.\n  clearRenamedVariablesToAvoidBindingToExternalScope = function() {\n    var i, o, ref, results;\n    results = [];\n    for (i = o = 0, ref = symtab.length; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      if (symtab[i].printname.indexOf(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\") !== -1) {\n        // just clear it\n        symtab[i].k = SYM;\n        symtab[i].printname = \"\";\n        binding[i] = symtab[i];\n        results.push(isSymbolReclaimable[i] = true);\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  Eval_clear = function() {\n    var indexFound, variableToBeCleared;\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      variableToBeCleared = car(p2);\n      //console.log variableToBeCleared + \"\"\n      if (variableToBeCleared.k !== SYM) {\n        stop(\"symbol error\");\n      }\n      //console.log \"getting binding of \" + p.toString()\n      //if p.toString() == \"aaa\"\n      //  debugger\n      indexFound = symtab.indexOf(variableToBeCleared);\n      symtab[indexFound].k = SYM;\n      symtab[indexFound].printname = \"\";\n      binding[indexFound] = symtab[indexFound];\n      isSymbolReclaimable[indexFound] = true;\n      p2 = cdr(p2);\n    }\n    return push(symbol(NIL));\n  };\n\n  /*\n   Convert complex z to clock form\n\n    Input:    push  z\n\n    Output:    Result on stack\n\n    clock(z) = abs(z) * (-1) ^ (arg(z) / pi)\n\n    For example, clock(exp(i pi/3)) gives the result (-1)^(1/3)\n  */\n  // P.S. I couldn't find independent definition/aknowledgment\n  // of the naming \"clock form\" anywhere on the web, seems like a\n  // naming specific to eigenmath.\n  // Clock form is another way to express a complex number, and\n  // it has three advantages\n  //   1) it's uniform with how for example\n  //      i is expressed i.e. (-1)^(1/2)\n  //   2) it's very compact\n  //   3) it's a straighforward notation for roots of 1 and -1\n  DEBUG_CLOCKFORM = false;\n\n  Eval_clock = function() {\n    push(cadr(p1));\n    Eval();\n    return clockform();\n  };\n\n  clockform = function() {\n    save();\n    //if 1\n    p1 = pop();\n    push(p1);\n    abs();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: abs of \" + p1 + \" : \" + stack[tos - 1]);\n    }\n    // pushing the expression (-1)^... but note\n    // that we can't use \"power\", as \"power\" evaluates\n    // clock forms into rectangular form (see \"-1 ^ rational\"\n    // section in power)\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p1);\n    arg();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: arg of \" + p1 + \" : \" + stack[tos - 1]);\n    }\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push(symbol(PI));\n    }\n    divide();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: divide : \" + stack[tos - 1]);\n    }\n    list(3);\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: power : \" + stack[tos - 1]);\n    }\n    multiply();\n    if (DEBUG_CLOCKFORM) {\n      console.log(\"clockform: multiply : \" + stack[tos - 1]);\n    }\n    //else\n    /*\n    p1 = pop()\n    push(p1)\n    abs()\n    push(symbol(E))\n    push(p1)\n    arg()\n    push(imaginaryunit)\n    multiply()\n    power()\n    multiply()\n    */\n    //endif\n    return restore();\n  };\n\n  /* coeff =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  p,x,n\n\n  General description\n  -------------------\n  Returns the coefficient of x^n in polynomial p. The x argument can be omitted for polynomials in x.\n\n  */\n  //define P p1\n  //define X p2\n  //define N p3\n  Eval_coeff = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    if (p3 === symbol(NIL)) { // p3 is N  # only 2 args?\n      p3 = p2;\n      p2 = symbol(SYMBOL_X); // p2 is X\n    }\n    push(p1);\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2);\n    return filter();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Put polynomial coefficients on the stack\n\n  //  Input:  as per params\n\n  //  Output:    Returns number of coefficients on stack\n\n  //      tos-n    Coefficient of x^0\n\n  //      tos-1    Coefficient of x^(n-1)\n\n  //-----------------------------------------------------------------------------\n  coeff = function(variable, polynomial) {\n    var coeffsCount, constant, polynomialWithoutConstant, prev_expanding;\n    if (DEBUG) {\n      console.log(\"coeff: \" + variable + \" \" + polynomial);\n    }\n    // works like this:\n    //   1) find the constant (by just evaluating the pol setting the variable to zero)\n    //   2) set aside the found constant: it's one of the coefficients to return\n    //   3) take the polynomial and remove the constant\n    //   4) divide that by variable, lowering the degree by one\n    //   5) go back to 1) until degree is zero\n    coeffsCount = 0;\n    while (true) {\n      push(polynomial);\n      push(variable);\n      push(zero);\n      subst();\n      Eval();\n      constant = pop();\n      \n      // this will be a coefficient that will be returned\n      push(constant);\n      coeffsCount++;\n      push(polynomial);\n      push(constant);\n      subtract();\n      polynomialWithoutConstant = pop();\n      if (equal(polynomialWithoutConstant, zero)) {\n        if (DEBUG) {\n          console.log(\"coeff: result: \" + coeffsCount);\n        }\n        return coeffsCount;\n      }\n      push(polynomialWithoutConstant);\n      push(variable);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      //console.log(\"just divided: \" + stack[tos-1].toString())\n      // this is now the new polynomial with degree decreased by 1\n      polynomial = pop();\n    }\n  };\n\n  Eval_cofactor = function() {\n    var doNothing, i, j, n;\n    i = 0;\n    j = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n    if (istensor(p2) && p2.tensor.ndim === 2 && p2.tensor.dim[0] === p2.tensor.dim[1]) {\n      doNothing = 1;\n    } else {\n      stop(\"cofactor: 1st arg: square matrix expected\");\n    }\n    n = p2.tensor.dim[0];\n    push(caddr(p1));\n    Eval();\n    i = pop_integer();\n    if (i < 1 || i > n) {\n      stop(\"cofactor: 2nd arg: row index expected\");\n    }\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (j < 1 || j > n) {\n      stop(\"cofactor: 3rd arg: column index expected\");\n    }\n    return cofactor(p2, n, i - 1, j - 1);\n  };\n\n  cofactor = function(p, n, row, col) {\n    var i, i1, j, o, ref, ref1;\n    i = 0;\n    j = 0;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i !== row && j !== col) {\n          push(p.tensor.elem[n * i + j]);\n        }\n      }\n    }\n    determinant(n - 1);\n    if ((row + col) % 2) {\n      return negate();\n    }\n  };\n\n  // Condense an expression by factoring common terms.\n  Eval_condense = function() {\n    push(cadr(p1));\n    Eval();\n    return Condense();\n  };\n\n  Condense = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    save();\n    yycondense();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yycondense = function() {\n    //expanding = 0\n    p1 = pop();\n    if (car(p1) !== symbol(ADD)) {\n      push(p1);\n      return;\n    }\n    // get gcd of all terms\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n    while (iscons(p3)) {\n      push(car(p3));\n      if (DEBUG) {\n        console.log(\"calculating gcd between: \" + stack[tos - 1] + \" and \" + stack[tos - 2]);\n      }\n      gcd();\n      if (DEBUG) {\n        console.log(\"partial gcd: \" + stack[tos - 1]);\n      }\n      p3 = cdr(p3);\n    }\n    if (DEBUG) {\n      console.log(\"condense: this is the gcd of all the terms: \" + stack[tos - 1]);\n    }\n    // divide each term by gcd\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3));\n      //multiply()\n      multiply_noexpand();\n      add();\n      p3 = cdr(p3);\n    }\n    // We multiplied above w/o expanding so some factors cancelled.\n\n    // Now we expand which normalizes the result and, in some cases,\n    // simplifies it too (see test case H).\n    yyexpand();\n    // multiply result by gcd\n    push(p2);\n    return divide();\n  };\n\n  Eval_conj = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    push(p1);\n    if (!Find(p1, imaginaryunit)) { // example: (-1)^(1/3)\n      polar();\n      conjugate();\n      return clockform();\n    } else {\n      return conjugate();\n    }\n  };\n\n  // careful is you pass this one an expression with\n  // i (instead of (-1)^(1/2)) then this doesn't work!\n  conjugate = function() {\n    push(imaginaryunit);\n    push(imaginaryunit);\n    negate();\n    subst();\n    return Eval();\n  };\n\n  // Cons two things on the stack.\n  consCount = 0;\n\n  cons = function() {\n    var p;\n    consCount++;\n    if (DEBUG) {\n      console.log(\"cons tos: \" + tos + \" # \" + consCount);\n    }\n    //if consCount == 444\n    //  debugger\n    // auto var ok, no opportunity for garbage collection after p = alloc()\n    p = new U();\n    p.k = CONS;\n    p.cons.cdr = pop();\n    if (p === p.cons.cdr) {\n      debugger;\n      console.log(\"something wrong p == its cdr\");\n    }\n    p.cons.car = pop();\n    /*\n    console.log \"cons new cdr.k = \" + p.cons.cdr.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.cdr\n    console.log \"cons new car.k = \" + p.cons.car.k + \"\\nor more in detail:\"\n    console.log print_list p.cons.car\n    */\n    return push(p);\n  };\n\n  Eval_contract = function() {\n    push(cadr(p1));\n    Eval();\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n    return contract();\n  };\n\n  contract = function() {\n    save();\n    yycontract();\n    return restore();\n  };\n\n  yycontract = function() {\n    var a, ai, an, b, h, i, i1, j, j1, k, l, l1, m, m1, n, n1, ndim, nelem, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    n = 0;\n    ndim = 0;\n    nelem = 0;\n    ai = [];\n    an = [];\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"contract: tensor expected, 1st arg is not a tensor\");\n      }\n      push(zero);\n      return;\n    }\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n    ndim = p1.tensor.ndim;\n    if (l < 1 || l > ndim || m < 1 || m > ndim || l === m || p1.tensor.dim[l - 1] !== p1.tensor.dim[m - 1]) {\n      stop(\"contract: index out of range\");\n    }\n    l--;\n    m--;\n    n = p1.tensor.dim[l];\n    // nelem is the number of elements in \"b\"\n    nelem = 1;\n    for (i = o = 0, ref = ndim; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      if (i !== l && i !== m) {\n        nelem *= p1.tensor.dim[i];\n      }\n    }\n    //console.log \"nelem:\" + nelem\n    p2 = alloc_tensor(nelem);\n    //console.log \"p2:\" + p2\n    p2.tensor.ndim = ndim - 2;\n    j = 0;\n    for (i = i1 = 0, ref1 = ndim; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      if (i !== l && i !== m) {\n        p2.tensor.dim[j++] = p1.tensor.dim[i];\n      }\n    }\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n//console.log \"a: \" + a\n//console.log \"b: \" + b\n    for (i = j1 = 0, ref2 = ndim; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    }\n    for (i = l1 = 0, ref3 = nelem; (0 <= ref3 ? l1 < ref3 : l1 > ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n      push(zero);\n      for (j = m1 = 0, ref4 = n; (0 <= ref4 ? m1 < ref4 : m1 > ref4); j = 0 <= ref4 ? ++m1 : --m1) {\n        ai[l] = j;\n        ai[m] = j;\n        h = 0;\n        for (k = n1 = 0, ref5 = ndim; (0 <= ref5 ? n1 < ref5 : n1 > ref5); k = 0 <= ref5 ? ++n1 : --n1) {\n          h = (h * an[k]) + ai[k];\n        }\n        push(a[h]);\n        //console.log \"a[h]: \" + a[h]\n        add();\n      }\n      //console.log \"tos: \" + stack[tos-1]\n      b[i] = pop();\n//console.log \"b[i]: \" + b[i]\n      for (j = o1 = ref6 = ndim - 1; (ref6 <= 0 ? o1 <= 0 : o1 >= 0); j = ref6 <= 0 ? ++o1 : --o1) {\n        if (j === l || j === m) {\n          continue;\n        }\n        if (++ai[j] < an[j]) {\n          break;\n        }\n        ai[j] = 0;\n      }\n    }\n    if (nelem === 1) {\n      return push(b[0]);\n    } else {\n      return push(p2);\n    }\n  };\n\n  //console.log \"returning: \" + stack[tos-1]\n  /* cos =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  x\n\n  General description\n  -------------------\n  Returns the cosine of x.\n\n  */\n  Eval_cos = function() {\n    push(cadr(p1));\n    Eval();\n    return cosine();\n  };\n\n  cosine = function() {\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      cosine_of_angle_sum();\n    } else {\n      cosine_of_angle();\n    }\n    return restore();\n  };\n\n  // Use angle sum formula for special angles.\n\n  //define A p3\n  //define B p4\n  cosine_of_angle_sum = function() {\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      p4 = car(p2);\n      if (isnpi(p4)) { // p4 is B\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        cosine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        sine();\n        push(p4);\n        sine();\n        multiply();\n        subtract();\n        return;\n      }\n      p2 = cdr(p2);\n    }\n    return cosine_of_angle();\n  };\n\n  cosine_of_angle = function() {\n    var d, n;\n    if (car(p1) === symbol(ARCCOS)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.cos(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    // cosine function is symmetric, cos(-x) = cos(x)\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    // cos(arctan(x)) = 1 / sqrt(1 + x^2)\n\n    // see p. 173 of the CRC Handbook of Mathematical Sciences\n    if (car(p1) === symbol(ARCTAN)) {\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      return;\n    }\n    // multiply by 180/pi to go from radians to degrees.\n    // we go from radians to degrees because it's much\n    // easier to calculate symbolic results of most (not all) \"classic\"\n    // angles (e.g. 30,45,60...) if we calculate the degrees\n    // and the we do a switch on that.\n    // Alternatively, we could look at the fraction of pi\n    // (e.g. 60 degrees is 1/3 pi) but that's more\n    // convoluted as we'd need to look at both numerator and\n    // denominator.\n    push(p1);\n    push_integer(180);\n    multiply();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    divide();\n    n = pop_integer();\n    // most \"good\" (i.e. compact) trigonometric results\n    // happen for a round number of degrees. There are some exceptions\n    // though, e.g. 22.5 degrees, which we don't capture here.\n    if (n < 0 || isNaN(n)) {\n      push(symbol(COS));\n      push(p1);\n      list(2);\n      return;\n    }\n    switch (n % 360) {\n      case 90:\n      case 270:\n        return push_integer(0);\n      case 60:\n      case 300:\n        return push_rational(1, 2);\n      case 120:\n      case 240:\n        return push_rational(-1, 2);\n      case 45:\n      case 315:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 135:\n      case 225:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 30:\n      case 330:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 150:\n      case 210:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 0:\n        return push_integer(1);\n      case 180:\n        return push_integer(-1);\n      default:\n        push(symbol(COS));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  Eval_cosh = function() {\n    push(cadr(p1));\n    Eval();\n    return ycosh();\n  };\n\n  ycosh = function() {\n    save();\n    yycosh();\n    return restore();\n  };\n\n  yycosh = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (car(p1) === symbol(ARCCOSH)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.cosh(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n    push_symbol(COSH);\n    push(p1);\n    return list(2);\n  };\n\n  // this function extract parts subtrees from a tree.\n  // It is used in two\n  // places that have to do with pattern matching.\n  // One is for integrals, where an expression or its\n  // subparts are matched against cases in an\n  // integrals table.\n  // Another one is for applyging tranformation patterns\n  // defined via PATTERN, again patterns are applied to\n  // either the whole expression or any of its parts.\n\n  // unclear to me at the moment\n  // why this is exposed as something that can\n  // be evalled. Never called.\n  Eval_decomp = function() {\n    var h;\n    save();\n    console.log(\"Eval_decomp is being called!!!!!!!!!!!!!!!!!!!!\");\n    h = tos;\n    push(symbol(NIL));\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n    decomp(false);\n    list(tos - h);\n    return restore();\n  };\n\n  pushTryNotToDuplicate = function(toBePushed) {\n    if (tos > 0) {\n      if (DEBUG) {\n        console.log(\"comparing \" + toBePushed + \" to: \" + stack[tos - 1]);\n      }\n      if (equal(toBePushed, stack[tos - 1])) {\n        if (DEBUG) {\n          console.log(\"skipping \" + toBePushed + \" because it's already on stack \");\n        }\n        return;\n      }\n    }\n    return push(toBePushed);\n  };\n\n  // returns constant expressions on the stack\n  decomp = function(generalTransform) {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (DEBUG) {\n      console.log(\"DECOMPOSING \" + p1);\n    }\n    // is the entire expression constant?\n    if (generalTransform) {\n      if (!iscons(p1)) {\n        if (DEBUG) {\n          console.log(\" ground thing: \" + p1);\n        }\n        pushTryNotToDuplicate(p1);\n        restore();\n        return;\n      }\n    } else {\n      if (Find(p1, p2) === 0) {\n        if (DEBUG) {\n          console.log(\" entire expression is constant\");\n        }\n        pushTryNotToDuplicate(p1);\n        //push(p1);  # may need later for pushing both +a, -a\n        //negate()\n        restore();\n        return;\n      }\n    }\n    // sum?\n    if (isadd(p1)) {\n      decomp_sum(generalTransform);\n      restore();\n      return;\n    }\n    // product?\n    if (ismultiply(p1)) {\n      decomp_product(generalTransform);\n      restore();\n      return;\n    }\n    // naive decomp if not sum or product\n    if (DEBUG) {\n      console.log(\" naive decomp\");\n    }\n    p3 = cdr(p1);\n    if (DEBUG) {\n      console.log(\"startig p3: \" + p3);\n    }\n    while (iscons(p3)) {\n      // for a general transformations,\n      // we want to match any part of the tree so\n      // we need to push the subtree as well\n      // as recurse to its parts\n      if (generalTransform) {\n        push(car(p3));\n      }\n      if (DEBUG) {\n        console.log(\"recursive decomposition\");\n      }\n      push(car(p3));\n      if (DEBUG) {\n        console.log(\"car(p3): \" + car(p3));\n      }\n      push(p2);\n      if (DEBUG) {\n        console.log(\"p2: \" + p2);\n      }\n      decomp(generalTransform);\n      p3 = cdr(p3);\n    }\n    return restore();\n  };\n\n  decomp_sum = function(generalTransform) {\n    var h;\n    if (DEBUG) {\n      console.log(\" decomposing the sum \");\n    }\n    h = 0;\n    // decomp terms involving x\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n        decomp(generalTransform);\n      }\n      p3 = cdr(p3);\n    }\n    // add together all constant terms\n    h = tos;\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n      p3 = cdr(p3);\n    }\n    if (tos - h) {\n      add_all(tos - h);\n      p3 = pop();\n      pushTryNotToDuplicate(p3);\n      push(p3);\n      return negate(); // need both +a, -a for some integrals\n    }\n  };\n\n  decomp_product = function(generalTransform) {\n    var h;\n    if (DEBUG) {\n      console.log(\" decomposing the product \");\n    }\n    h = 0;\n    // decomp factors involving x\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) || generalTransform) {\n        push(car(p3));\n        push(p2);\n        decomp(generalTransform);\n      }\n      p3 = cdr(p3);\n    }\n    // multiply together all constant factors\n    h = tos;\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      if (Find(car(p3), p2) === 0) {\n        pushTryNotToDuplicate(car(p3));\n      }\n      p3 = cdr(p3);\n    }\n    if (tos - h) {\n      return multiply_all(tos - h);\n    }\n  };\n\n  //p3 = pop();  # may need later for pushing both +a, -a\n  //push(p3)\n  //push(p3)\n  //negate()\n  // Store a function definition\n\n  // Example:\n\n  //      f(x,y)=x^y\n\n  // For this definition, p1 points to the following structure.\n\n  //     p1\n  //      |\n  //   ___v__    ______                        ______ \n  //  |CONS  |->|CONS  |--------------------->|CONS  |\n  //  |______|  |______|                      |______|\n  //      |         |                             |\n  //   ___v__    ___v__    ______    ______    ___v__    ______    ______\n  //  |SETQ  |  |CONS  |->|CONS  |->|CONS  |  |CONS  |->|CONS  |->|CONS  |\n  //  |______|  |______|  |______|  |______|  |______|  |______|  |______|\n  //                |         |         |         |         |         |\n  //             ___v__    ___v__    ___v__    ___v__    ___v__    ___v__\n  //            |SYM f |  |SYM x |  |SYM y |  |POWER |  |SYM x |  |SYM y |\n  //            |______|  |______|  |______|  |______|  |______|  |______|\n\n  // the result (in f) is a FUNCTION node\n  // that contains both the body and the argument list.\n\n  // We have\n\n  //  caadr(p1) points to the function name i.e. f\n  //  cdadr(p1) points to the arguments i.e. the list (x y)\n  //  caddr(p1) points to the function body i.e. (power x y)\n\n  //define F p3 # F points to the function name\n  //define A p4 # A points to the argument list\n  //define B p5 # B points to the function body\n  define_user_function = function() {\n    p3 = caadr(p1);\n    p4 = cdadr(p1);\n    p5 = caddr(p1);\n    if (!issymbol(p3)) { // p3 is F\n      stop(\"function name?\");\n    }\n    // evaluate function body (maybe)\n    if (car(p5) === symbol(EVAL)) { // p5 is B\n      push(cadr(p5));\n      Eval();\n      p5 = pop(); // p5 is B\n    }\n    \n    // note how, unless explicitly forced by an eval,\n    // (handled by the if just above)\n    // we don't eval/simplify\n    // the body.\n    // Why? because it's the easiest way\n    // to solve scope problems i.e.\n    //   x = 0\n    //   f(x) = x + 1\n    //   f(4) # would reply 1\n    // which would need to otherwise\n    // be solved by some scope device\n    // somehow\n    push_symbol(FUNCTION);\n    push(p5);\n    push(p4);\n    list(3);\n    p5 = pop();\n    set_binding(p3, p5);\n    return push_symbol(NIL);\n  };\n\n  Eval_function_reference = function() {\n    return push(p1);\n  };\n\n  /* defint =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  f,x,a,b[,y,c,d...]\n\n  General description\n  -------------------\n  Returns the definite integral of f with respect to x evaluated from \"a\" to b.\n  The argument list can be extended for multiple integrals (or \"iterated\n  integrals\"), for example a double integral (which can represent for\n  example a volume under a surface), or a triple integral, etc. For\n  example, defint(f,x,a,b,y,c,d).\n\n  */\n  //define F p2\n  //define X p3\n  //define A p4\n  //define B p5\n  Eval_defint = function() {\n    push(cadr(p1));\n    Eval();\n    p2 = pop(); // p2 is F\n    p1 = cddr(p1);\n    // defint can handle multiple\n    // integrals, so we loop over the\n    // multiple integrals here\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p3 = pop(); // p3 is X\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p4 = pop(); // p4 is A\n      push(car(p1));\n      p1 = cdr(p1);\n      Eval();\n      p5 = pop(); // p5 is B\n      \n      // obtain the primitive of F against the\n      // specified variable X\n      // note that the primitive changes over\n      // the calculation of the multiple\n      // integrals.\n      push(p2);\n      push(p3);\n      integral();\n      p2 = pop(); // contains the antiderivative of F\n      \n      // evaluate the integral in A\n      push(p2);\n      push(p3);\n      push(p5);\n      subst();\n      Eval();\n      // evaluate the integral in B\n      push(p2);\n      push(p3);\n      push(p4);\n      subst();\n      Eval();\n      // integral between B and A is the\n      // subtraction. Note that this could\n      // be a number but also a function.\n      // and we might have to integrate this\n      // number/function again doing the while\n      // loop again if this is a multiple\n      // integral.\n      subtract();\n      p2 = pop();\n    }\n    return push(p2);\n  };\n\n  Eval_degree = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n    return degree();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Find the degree of a polynomial\n\n  //  Input:    tos-2    p(x)\n\n  //      tos-1    x\n\n  //  Output:    Result on stack\n\n  //  Note: Finds the largest numerical power of x. Does not check for\n  //  weirdness in p(x).\n\n  //-----------------------------------------------------------------------------\n\n  //define POLY p1\n  //define X p2\n  //define DEGREE p3\n  degree = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    p3 = zero;\n    yydegree(p1);\n    push(p3);\n    return restore();\n  };\n\n  yydegree = function(p) {\n    var results;\n    if (equal(p, p2)) {\n      if (isZeroAtomOrTensor(p3)) {\n        return p3 = one;\n      }\n    } else if (car(p) === symbol(POWER)) {\n      if (equal(cadr(p), p2) && isNumericAtom(caddr(p)) && lessp(p3, caddr(p))) {\n        return p3 = caddr(p);\n      }\n    } else if (iscons(p)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        yydegree(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    }\n  };\n\n  Eval_denominator = function() {\n    push(cadr(p1));\n    Eval();\n    return denominator();\n  };\n\n  denominator = function() {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop();\n    //console.trace \"denominator of: \" + theArgument\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument);\n      rationalize();\n      theArgument = pop();\n    }\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument);\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n        denominator();\n        theArgument = cdr(theArgument);\n      }\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_denominator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      push(theArgument);\n      return reciprocate();\n    } else {\n      return push(one);\n    }\n  };\n\n  // derivative\n\n  //define F p3\n  //define X p4\n  //define N p5\n  Eval_derivative = function() {\n    var doNothing, i, i1, n, o, ref, ref1;\n    // evaluate 1st arg to get function F\n    i = 0;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    // evaluate 2nd arg and then...\n\n    // example  result of 2nd arg  what to do\n\n    // d(f)    nil      guess X, N = nil\n    // d(f,2)  2      guess X, N = 2\n    // d(f,x)  x      X = x, N = nil\n    // d(f,x,2)  x      X = x, N = 2\n    // d(f,x,y)  x      X = x, N = y\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n    while (1) {\n      // p5 (N) might be a symbol instead of a number\n      if (isNumericAtom(p5)) { // p5 is N\n        push(p5);\n        n = pop_integer();\n        if (isNaN(n)) {\n          stop(\"nth derivative: check n\");\n        }\n      } else {\n        n = 1;\n      }\n      push(p3);\n      if (n >= 0) {\n        for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          derivative();\n        }\n      } else {\n        n = -n;\n        for (i = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          integral();\n        }\n      }\n      p3 = pop();\n      if (p5 === symbol(NIL)) { // p5 is N\n        break;\n      }\n      // otherwise...\n\n      // N    arg1    what to do\n\n      // number  nil    break\n      // number  number    N = arg1, continue\n      // number  symbol    X = arg1, N = arg2, continue\n\n      // symbol  nil    X = N, N = nil, continue\n      // symbol  number    X = N, N = arg1, continue\n      // symbol  symbol    X = N, N = arg1, continue\n      if (isNumericAtom(p5)) { // p5 is N\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n        if (p5 === symbol(NIL)) { // p5 is N\n          break; // arglist exhausted\n        }\n        if (isNumericAtom(p5)) { // p5 is N\n          doNothing = 1; // N = arg1\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop(); // p5 is N  # N = arg2\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop(); // p5 is N  # N = arg1\n      }\n    }\n    return push(p3); // p3 is F # final result\n  };\n\n  derivative = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isNumericAtom(p2)) {\n      stop(\"undefined function\");\n    }\n    if (istensor(p1)) {\n      if (istensor(p2)) {\n        d_tensor_tensor();\n      } else {\n        d_tensor_scalar();\n      }\n    } else {\n      if (istensor(p2)) {\n        d_scalar_tensor();\n      } else {\n        d_scalar_scalar();\n      }\n    }\n    return restore();\n  };\n\n  d_scalar_scalar = function() {\n    if (issymbol(p2)) {\n      return d_scalar_scalar_1();\n    } else {\n      // Example: d(sin(cos(x)),cos(x))\n      // Replace cos(x) <- X, find derivative, then do X <- cos(x)\n      push(p1);\n      push(p2);\n      push(symbol(SECRETX));\n      subst();\n      push(symbol(SECRETX));\n      derivative();\n      push(symbol(SECRETX));\n      push(p2);\n      return subst(); // cos(X) -> cos(cos(x))\n    }\n  };\n\n  d_scalar_scalar_1 = function() {\n    // d(x,x)?\n    if (equal(p1, p2)) {\n      push(one);\n      return;\n    }\n    if (!iscons(p1)) {\n      push(zero);\n      return;\n    }\n    if (isadd(p1)) {\n      dsum();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      dproduct();\n      return;\n    }\n    if (car(p1) === symbol(POWER)) {\n      dpower();\n      return;\n    }\n    if (car(p1) === symbol(DERIVATIVE)) {\n      dd();\n      return;\n    }\n    if (car(p1) === symbol(LOG)) {\n      dlog();\n      return;\n    }\n    if (car(p1) === symbol(SIN)) {\n      dsin();\n      return;\n    }\n    if (car(p1) === symbol(COS)) {\n      dcos();\n      return;\n    }\n    if (car(p1) === symbol(TAN)) {\n      dtan();\n      return;\n    }\n    if (car(p1) === symbol(ARCSIN)) {\n      darcsin();\n      return;\n    }\n    if (car(p1) === symbol(ARCCOS)) {\n      darccos();\n      return;\n    }\n    if (car(p1) === symbol(ARCTAN)) {\n      darctan();\n      return;\n    }\n    if (car(p1) === symbol(SINH)) {\n      dsinh();\n      return;\n    }\n    if (car(p1) === symbol(COSH)) {\n      dcosh();\n      return;\n    }\n    if (car(p1) === symbol(TANH)) {\n      dtanh();\n      return;\n    }\n    if (car(p1) === symbol(ARCSINH)) {\n      darcsinh();\n      return;\n    }\n    if (car(p1) === symbol(ARCCOSH)) {\n      darccosh();\n      return;\n    }\n    if (car(p1) === symbol(ARCTANH)) {\n      darctanh();\n      return;\n    }\n    if (car(p1) === symbol(ABS)) {\n      dabs();\n      return;\n    }\n    if (car(p1) === symbol(SGN)) {\n      dsgn();\n      return;\n    }\n    if (car(p1) === symbol(HERMITE)) {\n      dhermite();\n      return;\n    }\n    if (car(p1) === symbol(ERF)) {\n      derf();\n      return;\n    }\n    if (car(p1) === symbol(ERFC)) {\n      derfc();\n      return;\n    }\n    if (car(p1) === symbol(BESSELJ)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbesselj0();\n      } else {\n        dbesseljn();\n      }\n      return;\n    }\n    if (car(p1) === symbol(BESSELY)) {\n      if (isZeroAtomOrTensor(caddr(p1))) {\n        dbessely0();\n      } else {\n        dbesselyn();\n      }\n      return;\n    }\n    if (car(p1) === symbol(INTEGRAL) && caddr(p1) === p2) {\n      derivative_of_integral();\n      return;\n    }\n    return dfunction();\n  };\n\n  dsum = function() {\n    var h;\n    h = tos;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      derivative();\n      p1 = cdr(p1);\n    }\n    return add_all(tos - h);\n  };\n\n  dproduct = function() {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = length(p1) - 1;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p3 = cdr(p1);\n      for (j = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        push(car(p3));\n        if (i === j) {\n          push(p2);\n          derivative();\n        }\n        p3 = cdr(p3);\n      }\n      multiply_all(n);\n    }\n    return add_all(n);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //       v\n  //  y = u\n\n  //  log y = v log u\n\n  //  1 dy   v du           dv\n  //  - -- = - -- + (log u) --\n  //  y dx   u dx           dx\n\n  //  dy    v  v du           dv\n  //  -- = u  (- -- + (log u) --)\n  //  dx       u dx           dx\n\n  //-----------------------------------------------------------------------------\n  dpower = function() {\n    push(caddr(p1));\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    push(cadr(p1));\n    logarithm();\n    push(caddr(p1));\n    push(p2);\n    derivative();\n    multiply();\n    add();\n    push(p1);\n    return multiply();\n  };\n\n  dlog = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    return divide();\n  };\n\n  //  derivative of derivative\n\n  //  example: d(d(f(x,y),y),x)\n\n  //  p1 = d(f(x,y),y)\n\n  //  p2 = x\n\n  //  cadr(p1) = f(x,y)\n\n  //  caddr(p1) = y\n  dd = function() {\n    // d(f(x,y),x)\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    p3 = pop();\n    if (car(p3) === symbol(DERIVATIVE)) {\n      // sort dx terms\n      push_symbol(DERIVATIVE);\n      push_symbol(DERIVATIVE);\n      push(cadr(p3));\n      if (lessp(caddr(p3), caddr(p1))) {\n        push(caddr(p3));\n        list(3);\n        push(caddr(p1));\n      } else {\n        push(caddr(p1));\n        list(3);\n        push(caddr(p3));\n      }\n      return list(3);\n    } else {\n      push(p3);\n      push(caddr(p1));\n      return derivative();\n    }\n  };\n\n  // derivative of a generic function\n  dfunction = function() {\n    p3 = cdr(p1);\n    if (p3 === symbol(NIL) || Find(p3, p2)) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(zero);\n    }\n  };\n\n  dsin = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    return multiply();\n  };\n\n  dcos = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sine();\n    multiply();\n    return negate();\n  };\n\n  dtan = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    cosine();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsin = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccos = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    push_rational(-1, 2);\n    power();\n    multiply();\n    return negate();\n  };\n\n  //        Without simplify  With simplify\n\n  //  d(arctan(y/x),x)  -y/(x^2*(y^2/x^2+1))  -y/(x^2+y^2)\n\n  //  d(arctan(y/x),y)  1/(x*(y^2/x^2+1))  x/(x^2+y^2)\n  darctan = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    add();\n    inverse();\n    multiply();\n    return simplify();\n  };\n\n  dsinh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    return multiply();\n  };\n\n  dcosh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ysinh();\n    return multiply();\n  };\n\n  dtanh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    ycosh();\n    push_integer(-2);\n    power();\n    return multiply();\n  };\n\n  darcsinh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darccosh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    add();\n    push_rational(-1, 2);\n    power();\n    return multiply();\n  };\n\n  darctanh = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(1);\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    subtract();\n    inverse();\n    return multiply();\n  };\n\n  dabs = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    sgn();\n    return multiply();\n  };\n\n  dsgn = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    dirac();\n    multiply();\n    push_integer(2);\n    return multiply();\n  };\n\n  dhermite = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push_integer(2);\n    push(caddr(p1));\n    multiply();\n    multiply();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    hermite();\n    return multiply();\n  };\n\n  derf = function() {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  derfc = function() {\n    push(cadr(p1));\n    push_integer(2);\n    power();\n    push_integer(-1);\n    multiply();\n    exponential();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    push_rational(-1, 2);\n    power();\n    multiply();\n    push_integer(-2);\n    multiply();\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    return multiply();\n  };\n\n  dbesselj0 = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesseljn = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    besselj();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    besselj();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  dbessely0 = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push_integer(1);\n    besselj();\n    multiply();\n    push_integer(-1);\n    return multiply();\n  };\n\n  dbesselyn = function() {\n    push(cadr(p1));\n    push(p2);\n    derivative();\n    push(cadr(p1));\n    push(caddr(p1));\n    push_integer(-1);\n    add();\n    bessely();\n    push(caddr(p1));\n    push_integer(-1);\n    multiply();\n    push(cadr(p1));\n    divide();\n    push(cadr(p1));\n    push(caddr(p1));\n    bessely();\n    multiply();\n    add();\n    return multiply();\n  };\n\n  derivative_of_integral = function() {\n    return push(cadr(p1));\n  };\n\n  DET_check_arg = function() {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  det = function() {\n    var a, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    //U **a\n    save();\n    p1 = pop();\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    n = p1.tensor.nelem;\n    a = p1.tensor.elem;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      if (!isNumericAtom(a[i])) {\n        break;\n      }\n    }\n    if (i === n) {\n      yydetg();\n    } else {\n      for (i = i1 = 0, ref1 = p1.tensor.nelem; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n        push(p1.tensor.elem[i]);\n      }\n      determinant(p1.tensor.dim[0]);\n    }\n    return restore();\n  };\n\n  // determinant of n * n matrix elements on the stack\n  determinant = function(n) {\n    var a, breakFromOutherWhile, h, i, i1, j, k, o, q, ref, ref1, s, sign_, t;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    q = 0;\n    s = 0;\n    sign_ = 0;\n    t = 0;\n    a = [];\n    //int *a, *c, *d\n    h = tos - n * n;\n//a = (int *) malloc(3 * n * sizeof (int))\n\n    //if (a == NULL)\n//  out_of_memory()\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      a[i] = i;\n      a[i + n] = 0;\n      a[i + n + n] = 1;\n    }\n    sign_ = 1;\n    push(zero);\n    while (1) {\n      if (sign_ === 1) {\n        push_integer(1);\n      } else {\n        push_integer(-1);\n      }\n      for (i = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n        k = n * a[i] + i;\n        push(stack[h + k]);\n        multiply(); // FIXME -- problem here\n      }\n      add();\n      // next permutation (Knuth's algorithm P)\n      j = n - 1;\n      s = 0;\n      breakFromOutherWhile = false;\n      while (1) {\n        q = a[n + j] + a[n + n + j];\n        if (q < 0) {\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n        if (q === j + 1) {\n          if (j === 0) {\n            breakFromOutherWhile = true;\n            break;\n          }\n          s++;\n          a[n + n + j] = -a[n + n + j];\n          j--;\n          continue;\n        }\n        break;\n      }\n      if (breakFromOutherWhile) {\n        break;\n      }\n      t = a[j - a[n + j] + s];\n      a[j - a[n + j] + s] = a[j - q + s];\n      a[j - q + s] = t;\n      a[n + j] = q;\n      sign_ = -sign_;\n    }\n    stack[h] = stack[tos - 1];\n    return moveTos(h + 1);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    Matrix on stack\n\n  //  Output:    Determinant on stack\n\n  //  Note:\n\n  //  Uses Gaussian elimination which is faster for numerical matrices.\n\n  //  Gaussian Elimination works by walking down the diagonal and clearing\n  //  out the columns below it.\n\n  //-----------------------------------------------------------------------------\n  detg = function() {\n    save();\n    p1 = pop();\n    if (DET_check_arg() === 0) {\n      push_symbol(DET);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    yydetg();\n    return restore();\n  };\n\n  yydetg = function() {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n    for (i = o = 0, ref = n * n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      push(p1.tensor.elem[i]);\n    }\n    lu_decomp(n);\n    moveTos(tos - n * n);\n    return push(p1);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    n * n matrix elements on stack\n\n  //  Output:    p1  determinant\n\n  //      p2  mangled\n\n  //      upper diagonal matrix on stack\n\n  //-----------------------------------------------------------------------------\n  M = function(h, n, i, j) {\n    return stack[h + n * i + j];\n  };\n\n  setM = function(h, n, i, j, value) {\n    return stack[h + n * i + j] = value;\n  };\n\n  lu_decomp = function(n) {\n    var d, h, i, i1, j, j1, l1, m1, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;\n    d = 0;\n    h = 0;\n    i = 0;\n    j = 0;\n    h = tos - n * n;\n    p1 = one;\n    for (d = o = 0, ref = n - 1; (0 <= ref ? o < ref : o > ref); d = 0 <= ref ? ++o : --o) {\n      // diagonal element zero?\n      if (equal(M(h, n, d, d), zero)) {\n// find a new row\n        for (i = i1 = ref1 = d + 1, ref2 = n; (ref1 <= ref2 ? i1 < ref2 : i1 > ref2); i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(M(h, n, i, d), zero)) {\n            break;\n          }\n        }\n        if (i === n) {\n          p1 = zero;\n          break;\n        }\n// exchange rows\n        for (j = j1 = ref3 = d, ref4 = n; (ref3 <= ref4 ? j1 < ref4 : j1 > ref4); j = ref3 <= ref4 ? ++j1 : --j1) {\n          p2 = M(h, n, d, j);\n          setM(h, n, d, j, M(h, n, i, j));\n          setM(h, n, i, j, p2);\n        }\n        // negate det\n        push(p1);\n        negate();\n        p1 = pop();\n      }\n      // update det\n      push(p1);\n      push(M(h, n, d, d));\n      multiply();\n      p1 = pop();\n// update lower diagonal matrix\n      for (i = l1 = ref5 = d + 1, ref6 = n; (ref5 <= ref6 ? l1 < ref6 : l1 > ref6); i = ref5 <= ref6 ? ++l1 : --l1) {\n        // multiplier\n        push(M(h, n, i, d));\n        push(M(h, n, d, d));\n        divide();\n        negate();\n        p2 = pop();\n        // update one row\n        setM(h, n, i, d, zero);\n        for (j = m1 = ref7 = d + 1, ref8 = n; (ref7 <= ref8 ? m1 < ref8 : m1 > ref8); j = ref7 <= ref8 ? ++m1 : --m1) {\n          push(M(h, n, d, j));\n          push(p2);\n          multiply();\n          push(M(h, n, i, j));\n          add();\n          setM(h, n, i, j, pop());\n        }\n      }\n    }\n    // last diagonal element\n    push(p1);\n    push(M(h, n, n - 1, n - 1));\n    multiply();\n    return p1 = pop();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Author : philippe.billet@noos.fr\n\n  //  Dirac function dirac(x)\n  //  dirac(-x)=dirac(x)\n  //  dirac(b-a)=dirac(a-b)\n  //-----------------------------------------------------------------------------\n  Eval_dirac = function() {\n    push(cadr(p1));\n    Eval();\n    return dirac();\n  };\n\n  dirac = function() {\n    save();\n    ydirac();\n    return restore();\n  };\n\n  //define p1 p1\n  ydirac = function() {\n    p1 = pop();\n    if (isdouble(p1)) {\n      if (p1.d === 0) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n    if (isrational(p1)) {\n      if (MZERO(mmul(p1.q.a, p1.q.b))) {\n        push_integer(1);\n        return;\n      } else {\n        push_integer(0);\n        return;\n      }\n    }\n    if (car(p1) === symbol(POWER)) {\n      push_symbol(DIRAC);\n      push(cadr(p1));\n      list(2);\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      push_symbol(DIRAC);\n      push(p1);\n      negate();\n      list(2);\n      return;\n    }\n    if (isnegativeterm(p1) || (car(p1) === symbol(ADD) && isnegativeterm(cadr(p1)))) {\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    push_symbol(DIRAC);\n    push(p1);\n    return list(2);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Generate all divisors of a term\n\n  //  Input:    Term on stack (factor * factor * ...)\n\n  //  Output:    Divisors on stack\n\n  //-----------------------------------------------------------------------------\n  divisors = function() {\n    var h, i, n, o, ref, subsetOfStack;\n    i = 0;\n    h = 0;\n    n = 0;\n    save();\n    h = tos - 1;\n    divisors_onstack();\n    n = tos - h;\n    //qsort(stack + h, n, sizeof (U *), __cmp)\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(cmp_expr);\n    stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(h);\n    push(p1);\n    return restore();\n  };\n\n  divisors_onstack = function() {\n    var h, i, k, n, o, ref;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    save();\n    p1 = pop();\n    h = tos;\n    // push all of the term's factors\n    if (isNumericAtom(p1)) {\n      push(p1);\n      factor_small_number();\n    } else if (car(p1) === symbol(ADD)) {\n      push(p1);\n      __factor_add();\n    //printf(\">>>\\n\")\n    //for (i = h; i < tos; i++)\n    //print(stdout, stack[i])\n    //printf(\"<<<\\n\")\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      if (isNumericAtom(car(p1))) {\n        push(car(p1));\n        factor_small_number();\n        p1 = cdr(p1);\n      }\n      while (iscons(p1)) {\n        p2 = car(p1);\n        if (car(p2) === symbol(POWER)) {\n          push(cadr(p2));\n          push(caddr(p2));\n        } else {\n          push(p2);\n          push(one);\n        }\n        p1 = cdr(p1);\n      }\n    } else if (car(p1) === symbol(POWER)) {\n      push(cadr(p1));\n      push(caddr(p1));\n    } else {\n      push(p1);\n      push(one);\n    }\n    k = tos;\n    // contruct divisors by recursive descent\n    push(one);\n    gen(h, k);\n    // move\n    n = tos - k;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      stack[h + i] = stack[k + i];\n    }\n    moveTos(h + n);\n    return restore();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Generate divisors\n\n  //  Input:    Base-exponent pairs on stack\n\n  //      h  first pair\n\n  //      k  just past last pair\n\n  //  Output:    Divisors on stack\n\n  //  For example, factor list 2 2 3 1 results in 6 divisors,\n\n  //    1\n  //    3\n  //    2\n  //    6\n  //    4\n  //    12\n\n  //-----------------------------------------------------------------------------\n\n  //define ACCUM p1\n  //define BASE p2\n  //define EXPO p3\n  gen = function(h, k) {\n    var expo, i, o, ref;\n    expo = 0;\n    i = 0;\n    save();\n    p1 = pop();\n    if (h === k) {\n      push(p1);\n      restore();\n      return;\n    }\n    p2 = stack[h + 0];\n    p3 = stack[h + 1];\n    push(p3);\n    expo = pop_integer();\n    if (!isNaN(expo)) {\n      for (i = o = 0, ref = Math.abs(expo); (0 <= ref ? o <= ref : o >= ref); i = 0 <= ref ? ++o : --o) {\n        push(p1);\n        push(p2);\n        push_integer(sign(expo) * i);\n        power();\n        multiply();\n        gen(h + 2, k);\n      }\n    }\n    return restore();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Factor ADD expression\n\n  //  Input:    Expression on stack\n\n  //  Output:    Factors on stack\n\n  //  Each factor consists of two expressions, the factor itself followed\n  //  by the exponent.\n\n  //-----------------------------------------------------------------------------\n  __factor_add = function() {\n    save();\n    p1 = pop();\n    // get gcd of all terms\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n    // check gcd\n    p2 = pop();\n    if (isplusone(p2)) {\n      push(p1);\n      push(one);\n      restore();\n      return;\n    }\n    // push factored gcd\n    if (isNumericAtom(p2)) {\n      push(p2);\n      factor_small_number();\n    } else if (car(p2) === symbol(MULTIPLY)) {\n      p3 = cdr(p2);\n      if (isNumericAtom(car(p3))) {\n        push(car(p3));\n        factor_small_number();\n      } else {\n        push(car(p3));\n        push(one);\n      }\n      p3 = cdr(p3);\n      while (iscons(p3)) {\n        push(car(p3));\n        push(one);\n        p3 = cdr(p3);\n      }\n    } else {\n      push(p2);\n      push(one);\n    }\n    // divide each term by gcd\n    push(p2);\n    inverse();\n    p2 = pop();\n    push(zero);\n    p3 = cdr(p1);\n    while (iscons(p3)) {\n      push(p2);\n      push(car(p3));\n      multiply();\n      add();\n      p3 = cdr(p3);\n    }\n    push(one);\n    return restore();\n  };\n\n  // power function for double precision floating point\n  dpow = function() {\n    var a, b, base, expo, result, theta;\n    a = 0.0;\n    b = 0.0;\n    base = 0.0;\n    expo = 0.0;\n    result = 0.0;\n    theta = 0.0;\n    expo = pop_double();\n    base = pop_double();\n    // divide by zero?\n    if (base === 0.0 && expo < 0.0) {\n      stop(\"divide by zero\");\n    }\n    // nonnegative base or integer power?\n    if (base >= 0.0 || (expo % 1.0) === 0.0) {\n      result = Math.pow(base, expo);\n      push_double(result);\n      return;\n    }\n    result = Math.pow(Math.abs(base), expo);\n    theta = Math.PI * expo;\n    // this ensures the real part is 0.0 instead of a tiny fraction\n    if ((expo % 0.5) === 0.0) {\n      a = 0.0;\n      b = Math.sin(theta);\n    } else {\n      a = Math.cos(theta);\n      b = Math.sin(theta);\n    }\n    push_double(a * result);\n    push_double(b * result);\n    push(imaginaryunit);\n    multiply();\n    return add();\n  };\n\n  /* eigen =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  m\n\n  General description\n  -------------------\n  Compute eigenvalues and eigenvectors. Matrix m must be both numerical and symmetric.\n  The eigenval function returns a matrix with the eigenvalues along the diagonal.\n  The eigenvec function returns a matrix with the eigenvectors arranged as row vectors.\n  The eigen function does not return anything but stores the eigenvalue matrix in D\n  and the eigenvector matrix in Q.\n\n  Input:    stack[tos - 1]    symmetric matrix\n\n  Output:    D      diagnonal matrix\n        Q      eigenvector matrix\n\n  D and Q have the property that\n\n    A == dot(transpose(Q),D,Q)\n\n  where A is the original matrix.\n\n  The eigenvalues are on the diagonal of D.\n  The eigenvectors are row vectors in Q.\n\n  The eigenvalue relation:\n\n    A X = lambda X\n\n  can be checked as follows:\n\n    lambda = D[1,1]\n    X = Q[1]\n    dot(A,X) - lambda X\n\n  Example 1. Check the relation AX = lambda X where lambda is an eigenvalue and X is the associated eigenvector.\n\n  Enter:\n\n       A = hilbert(3)\n\n       eigen(A)\n\n       lambda = D[1,1]\n\n       X = Q[1]\n\n       dot(A,X) - lambda X\n\n  Result:\n\n       -1.16435e-14\n\n       -6.46705e-15\n\n       -4.55191e-15\n\n  Example 2: Check the relation A = QTDQ.\n\n  Enter:\n\n    A - dot(transpose(Q),D,Q)\n\n  Result: \n\n    6.27365e-12    -1.58236e-11   1.81902e-11\n\n    -1.58236e-11   -1.95365e-11   2.56514e-12\n\n    1.81902e-11    2.56514e-12    1.32627e-11\n\n  */\n  //define D(i, j) yydd[EIG_N * (i) + (j)]\n  //define Q(i, j) yyqq[EIG_N * (i) + (j)]\n  EIG_N = 0;\n\n  EIG_yydd = [];\n\n  EIG_yyqq = [];\n\n  Eval_eigen = function() {\n    if (EIG_check_arg() === 0) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n    eigen(EIGEN);\n    p1 = usr_symbol(\"D\");\n    set_binding(p1, p2);\n    p1 = usr_symbol(\"Q\");\n    set_binding(p1, p3);\n    return push(symbol(NIL));\n  };\n\n  Eval_eigenval = function() {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVAL);\n      push(p1);\n      list(2);\n      return;\n    }\n    eigen(EIGENVAL);\n    return push(p2);\n  };\n\n  Eval_eigenvec = function() {\n    if (EIG_check_arg() === 0) {\n      push_symbol(EIGENVEC);\n      push(p1);\n      list(2);\n      return;\n    }\n    eigen(EIGENVEC);\n    return push(p3);\n  };\n\n  EIG_check_arg = function() {\n    var i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    push(cadr(p1));\n    Eval();\n    yyfloat();\n    Eval();\n    p1 = pop();\n    if (!istensor(p1)) {\n      return 0;\n    }\n    if (p1.tensor.ndim !== 2 || p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      stop(\"eigen: argument is not a square matrix\");\n    }\n    EIG_N = p1.tensor.dim[0];\n    for (i = o = 0, ref = EIG_N; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = EIG_N; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        if (!isdouble(p1.tensor.elem[EIG_N * i + j])) {\n          stop(\"eigen: matrix is not numerical\");\n        }\n      }\n    }\n    for (i = j1 = 0, ref2 = EIG_N - 1; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; (ref3 <= ref4 ? l1 < ref4 : l1 > ref4); j = ref3 <= ref4 ? ++l1 : --l1) {\n        if (Math.abs(p1.tensor.elem[EIG_N * i + j].d - p1.tensor.elem[EIG_N * j + i].d) > 1e-10) {\n          stop(\"eigen: matrix is not symmetrical\");\n        }\n      }\n    }\n    return 1;\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    p1    matrix\n\n  //  Output:    p2    eigenvalues\n\n  //      p3    eigenvectors\n\n  //-----------------------------------------------------------------------------\n  eigen = function(op) {\n    var i, i1, j, j1, l1, m1, n1, o, o1, q1, r1, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s1;\n    i = 0;\n    j = 0;\n// malloc working vars\n\n    //EIG_yydd = (double *) malloc(n * n * sizeof (double))\n    for (i = o = 0, ref = EIG_N * EIG_N; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      EIG_yydd[i] = 0.0;\n    }\n//if (EIG_yydd == NULL)\n//  stop(\"malloc failure\")\n\n    //EIG_yyqq = (double *) malloc(n * n * sizeof (double))\n    for (i = i1 = 0, ref1 = EIG_N * EIG_N; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      EIG_yyqq[i] = 0.0;\n    }\n//if (EIG_yyqq == NULL)\n//  stop(\"malloc failure\")\n\n    // initialize D\n    for (i = j1 = 0, ref2 = EIG_N; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      EIG_yydd[EIG_N * i + i] = p1.tensor.elem[EIG_N * i + i].d;\n      for (j = l1 = ref3 = i + 1, ref4 = EIG_N; (ref3 <= ref4 ? l1 < ref4 : l1 > ref4); j = ref3 <= ref4 ? ++l1 : --l1) {\n        EIG_yydd[EIG_N * i + j] = p1.tensor.elem[EIG_N * i + j].d;\n        EIG_yydd[EIG_N * j + i] = p1.tensor.elem[EIG_N * i + j].d;\n      }\n    }\n// initialize Q\n    for (i = m1 = 0, ref5 = EIG_N; (0 <= ref5 ? m1 < ref5 : m1 > ref5); i = 0 <= ref5 ? ++m1 : --m1) {\n      EIG_yyqq[EIG_N * i + i] = 1.0;\n      for (j = n1 = ref6 = i + 1, ref7 = EIG_N; (ref6 <= ref7 ? n1 < ref7 : n1 > ref7); j = ref6 <= ref7 ? ++n1 : --n1) {\n        EIG_yyqq[EIG_N * i + j] = 0.0;\n        EIG_yyqq[EIG_N * j + i] = 0.0;\n      }\n    }\n// step up to 100 times\n    for (i = o1 = 0; o1 < 100; i = ++o1) {\n      if (step() === 0) {\n        break;\n      }\n    }\n    if (i === 100) {\n      printstr(\"\\nnote: eigen did not converge\\n\");\n    }\n    // p2 = D\n    if (op === EIGEN || op === EIGENVAL) {\n      push(p1);\n      copy_tensor();\n      p2 = pop();\n      for (i = q1 = 0, ref8 = EIG_N; (0 <= ref8 ? q1 < ref8 : q1 > ref8); i = 0 <= ref8 ? ++q1 : --q1) {\n        for (j = r1 = 0, ref9 = EIG_N; (0 <= ref9 ? r1 < ref9 : r1 > ref9); j = 0 <= ref9 ? ++r1 : --r1) {\n          push_double(EIG_yydd[EIG_N * i + j]);\n          p2.tensor.elem[EIG_N * i + j] = pop();\n        }\n      }\n    }\n    // p3 = Q\n    if (op === EIGEN || op === EIGENVEC) {\n      push(p1);\n      copy_tensor();\n      p3 = pop();\n      results = [];\n      for (i = s1 = 0, ref10 = EIG_N; (0 <= ref10 ? s1 < ref10 : s1 > ref10); i = 0 <= ref10 ? ++s1 : --s1) {\n        results.push((function() {\n          var ref11, results1, t1;\n          results1 = [];\n          for (j = t1 = 0, ref11 = EIG_N; (0 <= ref11 ? t1 < ref11 : t1 > ref11); j = 0 <= ref11 ? ++t1 : --t1) {\n            push_double(EIG_yyqq[EIG_N * i + j]);\n            results1.push(p3.tensor.elem[EIG_N * i + j] = pop());\n          }\n          return results1;\n        })());\n      }\n      return results;\n    }\n  };\n\n  // free working vars\n\n  //-----------------------------------------------------------------------------\n\n  //  Example: p = 1, q = 3\n\n  //    c  0  s  0\n\n  //    0  1  0  0\n  //  G =\n  //    -s  0  c  0\n\n  //    0  0  0  1\n\n  //  The effect of multiplying G times A is...\n\n  //  row 1 of A    = c (row 1 of A ) + s (row 3 of A )\n  //            n+1                n                 n\n\n  //  row 3 of A    = c (row 3 of A ) - s (row 1 of A )\n  //            n+1                n                 n\n\n  //  In terms of components the overall effect is...\n\n  //  row 1 = c row 1 + s row 3\n\n  //    A[1,1] = c A[1,1] + s A[3,1]\n\n  //    A[1,2] = c A[1,2] + s A[3,2]\n\n  //    A[1,3] = c A[1,3] + s A[3,3]\n\n  //    A[1,4] = c A[1,4] + s A[3,4]\n\n  //  row 3 = c row 3 - s row 1\n\n  //    A[3,1] = c A[3,1] - s A[1,1]\n\n  //    A[3,2] = c A[3,2] - s A[1,2]\n\n  //    A[3,3] = c A[3,3] - s A[1,3]\n\n  //    A[3,4] = c A[3,4] - s A[1,4]\n\n  //                                     T\n  //  The effect of multiplying A times G  is...\n\n  //  col 1 of A    = c (col 1 of A ) + s (col 3 of A )\n  //            n+1                n                 n\n\n  //  col 3 of A    = c (col 3 of A ) - s (col 1 of A )\n  //            n+1                n                 n\n\n  //  In terms of components the overall effect is...\n\n  //  col 1 = c col 1 + s col 3\n\n  //    A[1,1] = c A[1,1] + s A[1,3]\n\n  //    A[2,1] = c A[2,1] + s A[2,3]\n\n  //    A[3,1] = c A[3,1] + s A[3,3]\n\n  //    A[4,1] = c A[4,1] + s A[4,3]\n\n  //  col 3 = c col 3 - s col 1\n\n  //    A[1,3] = c A[1,3] - s A[1,1]\n\n  //    A[2,3] = c A[2,3] - s A[2,1]\n\n  //    A[3,3] = c A[3,3] - s A[3,1]\n\n  //    A[4,3] = c A[4,3] - s A[4,1]\n\n  //  What we want to do is just compute the upper triangle of A since we\n  //  know the lower triangle is identical.\n\n  //  In other words, we just want to update components A[i,j] where i < j.\n\n  //-----------------------------------------------------------------------------\n\n  //  Example: p = 2, q = 5\n\n  //        p      q\n\n  //      j=1  j=2  j=3  j=4  j=5  j=6\n\n  //    i=1  .  A[1,2]  .  .  A[1,5]  .\n\n  //  p  i=2  A[2,1]  A[2,2]  A[2,3]  A[2,4]  A[2,5]  A[2,6]\n\n  //    i=3  .  A[3,2]  .  .  A[3,5]  .\n\n  //    i=4  .  A[4,2]  .  .  A[4,5]  .\n\n  //  q  i=5  A[5,1]  A[5,2]  A[5,3]  A[5,4]  A[5,5]  A[5,6]\n\n  //    i=6  .  A[6,2]  .  .  A[6,5]  .\n\n  //-----------------------------------------------------------------------------\n\n  //  This is what B = GA does:\n\n  //  row 2 = c row 2 + s row 5\n\n  //    B[2,1] = c * A[2,1] + s * A[5,1]\n  //    B[2,2] = c * A[2,2] + s * A[5,2]\n  //    B[2,3] = c * A[2,3] + s * A[5,3]\n  //    B[2,4] = c * A[2,4] + s * A[5,4]\n  //    B[2,5] = c * A[2,5] + s * A[5,5]\n  //    B[2,6] = c * A[2,6] + s * A[5,6]\n\n  //  row 5 = c row 5 - s row 2\n\n  //    B[5,1] = c * A[5,1] + s * A[2,1]\n  //    B[5,2] = c * A[5,2] + s * A[2,2]\n  //    B[5,3] = c * A[5,3] + s * A[2,3]\n  //    B[5,4] = c * A[5,4] + s * A[2,4]\n  //    B[5,5] = c * A[5,5] + s * A[2,5]\n  //    B[5,6] = c * A[5,6] + s * A[2,6]\n\n  //                 T\n  //  This is what BG  does:\n\n  //  col 2 = c col 2 + s col 5\n\n  //    B[1,2] = c * A[1,2] + s * A[1,5]\n  //    B[2,2] = c * A[2,2] + s * A[2,5]\n  //    B[3,2] = c * A[3,2] + s * A[3,5]\n  //    B[4,2] = c * A[4,2] + s * A[4,5]\n  //    B[5,2] = c * A[5,2] + s * A[5,5]\n  //    B[6,2] = c * A[6,2] + s * A[6,5]\n\n  //  col 5 = c col 5 - s col 2\n\n  //    B[1,5] = c * A[1,5] - s * A[1,2]\n  //    B[2,5] = c * A[2,5] - s * A[2,2]\n  //    B[3,5] = c * A[3,5] - s * A[3,2]\n  //    B[4,5] = c * A[4,5] - s * A[4,2]\n  //    B[5,5] = c * A[5,5] - s * A[5,2]\n  //    B[6,5] = c * A[6,5] - s * A[6,2]\n\n  //-----------------------------------------------------------------------------\n\n  //  Step 1: Just do upper triangle (i < j), B[2,5] = 0\n\n  //    B[1,2] = c * A[1,2] + s * A[1,5]\n\n  //    B[2,3] = c * A[2,3] + s * A[5,3]\n  //    B[2,4] = c * A[2,4] + s * A[5,4]\n  //    B[2,6] = c * A[2,6] + s * A[5,6]\n\n  //    B[1,5] = c * A[1,5] - s * A[1,2]\n  //    B[3,5] = c * A[3,5] - s * A[3,2]\n  //    B[4,5] = c * A[4,5] - s * A[4,2]\n\n  //    B[5,6] = c * A[5,6] + s * A[2,6]\n\n  //-----------------------------------------------------------------------------\n\n  //  Step 2: Transpose where i > j since A[i,j] == A[j,i]\n\n  //    B[1,2] = c * A[1,2] + s * A[1,5]\n\n  //    B[2,3] = c * A[2,3] + s * A[3,5]\n  //    B[2,4] = c * A[2,4] + s * A[4,5]\n  //    B[2,6] = c * A[2,6] + s * A[5,6]\n\n  //    B[1,5] = c * A[1,5] - s * A[1,2]\n  //    B[3,5] = c * A[3,5] - s * A[2,3]\n  //    B[4,5] = c * A[4,5] - s * A[2,4]\n\n  //    B[5,6] = c * A[5,6] + s * A[2,6]\n\n  //-----------------------------------------------------------------------------\n\n  //  Step 3: Same as above except reorder\n\n  //  k < p    (k = 1)\n\n  //    A[1,2] = c * A[1,2] + s * A[1,5]\n  //    A[1,5] = c * A[1,5] - s * A[1,2]\n\n  //  p < k < q  (k = 3..4)\n\n  //    A[2,3] = c * A[2,3] + s * A[3,5]\n  //    A[3,5] = c * A[3,5] - s * A[2,3]\n\n  //    A[2,4] = c * A[2,4] + s * A[4,5]\n  //    A[4,5] = c * A[4,5] - s * A[2,4]\n\n  //  q < k    (k = 6)\n\n  //    A[2,6] = c * A[2,6] + s * A[5,6]\n  //    A[5,6] = c * A[5,6] - s * A[2,6]\n\n  //-----------------------------------------------------------------------------\n  step = function() {\n    var count, i, i1, j, o, ref, ref1, ref2;\n    i = 0;\n    j = 0;\n    count = 0;\n// for each upper triangle \"off-diagonal\" component do step2\n    for (i = o = 0, ref = EIG_N - 1; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = ref1 = i + 1, ref2 = EIG_N; (ref1 <= ref2 ? i1 < ref2 : i1 > ref2); j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (EIG_yydd[EIG_N * i + j] !== 0.0) {\n          step2(i, j);\n          count++;\n        }\n      }\n    }\n    return count;\n  };\n\n  step2 = function(p, q) {\n    var c, cc, i1, j1, k, o, ref, ref1, ref2, s, ss, t, theta;\n    k = 0;\n    t = 0.0;\n    theta = 0.0;\n    c = 0.0;\n    cc = 0.0;\n    s = 0.0;\n    ss = 0.0;\n    // compute c and s\n\n    // from Numerical Recipes (except they have a_qq - a_pp)\n    theta = 0.5 * (EIG_yydd[EIG_N * p + p] - EIG_yydd[EIG_N * q + q]) / EIG_yydd[EIG_N * p + q];\n    t = 1.0 / (Math.abs(theta) + Math.sqrt(theta * theta + 1.0));\n    if (theta < 0.0) {\n      t = -t;\n    }\n    c = 1.0 / Math.sqrt(t * t + 1.0);\n    s = t * c;\n// D = GD\n\n    // which means \"add rows\"\n    for (k = o = 0, ref = EIG_N; (0 <= ref ? o < ref : o > ref); k = 0 <= ref ? ++o : --o) {\n      cc = EIG_yydd[EIG_N * p + k];\n      ss = EIG_yydd[EIG_N * q + k];\n      EIG_yydd[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yydd[EIG_N * q + k] = c * ss - s * cc;\n    }\n// D = D transpose(G)\n\n    // which means \"add columns\"\n    for (k = i1 = 0, ref1 = EIG_N; (0 <= ref1 ? i1 < ref1 : i1 > ref1); k = 0 <= ref1 ? ++i1 : --i1) {\n      cc = EIG_yydd[EIG_N * k + p];\n      ss = EIG_yydd[EIG_N * k + q];\n      EIG_yydd[EIG_N * k + p] = c * cc + s * ss;\n      EIG_yydd[EIG_N * k + q] = c * ss - s * cc;\n    }\n// Q = GQ\n\n    // which means \"add rows\"\n    for (k = j1 = 0, ref2 = EIG_N; (0 <= ref2 ? j1 < ref2 : j1 > ref2); k = 0 <= ref2 ? ++j1 : --j1) {\n      cc = EIG_yyqq[EIG_N * p + k];\n      ss = EIG_yyqq[EIG_N * q + k];\n      EIG_yyqq[EIG_N * p + k] = c * cc + s * ss;\n      EIG_yyqq[EIG_N * q + k] = c * ss - s * cc;\n    }\n    EIG_yydd[EIG_N * p + q] = 0.0;\n    return EIG_yydd[EIG_N * q + p] = 0.0;\n  };\n\n  Eval_erf = function() {\n    push(cadr(p1));\n    Eval();\n    return yerf();\n  };\n\n  yerf = function() {\n    save();\n    yyerf();\n    return restore();\n  };\n\n  yyerf = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (isdouble(p1)) {\n      d = 1.0 - erfc(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      push_symbol(ERF);\n      push(p1);\n      negate();\n      list(2);\n      negate();\n      return;\n    }\n    push_symbol(ERF);\n    push(p1);\n    list(2);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Author : philippe.billet@noos.fr\n\n  //  erfc(x)\n\n  //  GW  Added erfc() from Numerical Recipes in C\n\n  //-----------------------------------------------------------------------------\n  Eval_erfc = function() {\n    push(cadr(p1));\n    Eval();\n    return yerfc();\n  };\n\n  yerfc = function() {\n    save();\n    yyerfc();\n    return restore();\n  };\n\n  yyerfc = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (isdouble(p1)) {\n      d = erfc(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(one);\n      return;\n    }\n    push_symbol(ERFC);\n    push(p1);\n    list(2);\n  };\n\n  // from Numerical Recipes in C\n  erfc = function(x) {\n    var ans, t, z;\n    if (x === 0) {\n      return 1.0;\n    }\n    t = 0.0;\n    z = 0.0;\n    ans = 0.0;\n    z = Math.abs(x);\n    t = 1.0 / (1.0 + 0.5 * z);\n    ans = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n    if (x >= 0.0) {\n      return ans;\n    } else {\n      return 2.0 - ans;\n    }\n  };\n\n  // Evaluate an expression, for example...\n\n  //  push(p1)\n  //  Eval()\n  //  p2 = pop()\n  Eval = function() {\n    var willEvaluateAsFloats;\n    check_esc_flag();\n    save();\n    p1 = pop();\n    if (p1 == null) {\n      debugger;\n    }\n    if (!evaluatingAsFloats && isfloating(p1)) {\n      willEvaluateAsFloats = true;\n      evaluatingAsFloats++;\n    }\n    switch (p1.k) {\n      case CONS:\n        Eval_cons();\n        break;\n      case NUM:\n        if (evaluatingAsFloats) {\n          push_double(convert_rational_to_double(p1));\n        } else {\n          push(p1);\n        }\n        break;\n      case DOUBLE:\n      case STR:\n        push(p1);\n        break;\n      case TENSOR:\n        Eval_tensor();\n        break;\n      case SYM:\n        Eval_sym();\n        break;\n      default:\n        stop(\"atom?\");\n    }\n    if (willEvaluateAsFloats) {\n      evaluatingAsFloats--;\n    }\n    return restore();\n  };\n\n  Eval_sym = function() {\n    var cycleString, i, o, positionIfSymbolAlreadyBeingEvaluated, ref, ref1;\n    // note that function calls are not processed here\n    // because, since they have an argument (at least an empty one)\n    // they are actually CONs, which is a branch of the\n    // switch before the one that calls this function\n\n    // bare keyword?\n    // If it's a keyword, then we don't look\n    // at the binding array, because keywords\n    // are not redefinable. \n    if (iskeyword(p1)) {\n      push(p1);\n      push(symbol(LAST));\n      list(2);\n      Eval();\n      return;\n    } else if (p1 === symbol(PI) && evaluatingAsFloats) {\n      push_double(Math.PI);\n      return;\n    }\n    // Evaluate symbol's binding\n    p2 = get_binding(p1);\n    if (DEBUG) {\n      console.log(\"looked up: \" + p1 + \" which contains: \" + p2);\n    }\n    push(p2);\n    // differently from standard Lisp,\n    // here the evaluation is not\n    // one-step only, rather it keeps evaluating\n    // \"all the way\" until a symbol is\n    // defined as itself.\n    // Uncomment these two lines to get Lisp\n    // behaviour (and break most tests)\n    if (p1 !== p2) {\n      // detect recursive lookup of symbols, which would otherwise\n      // cause a stack overflow.\n      // Note that recursive functions will still work because\n      // as mentioned at the top, this method doesn't look\n      // up and evaluate function calls.\n      positionIfSymbolAlreadyBeingEvaluated = chainOfUserSymbolsNotFunctionsBeingEvaluated.indexOf(p1);\n      if (positionIfSymbolAlreadyBeingEvaluated !== -1) {\n        cycleString = \"\";\n        for (i = o = ref = positionIfSymbolAlreadyBeingEvaluated, ref1 = chainOfUserSymbolsNotFunctionsBeingEvaluated.length; (ref <= ref1 ? o < ref1 : o > ref1); i = ref <= ref1 ? ++o : --o) {\n          cycleString += chainOfUserSymbolsNotFunctionsBeingEvaluated[i].printname + \" -> \";\n        }\n        cycleString += p1.printname;\n        stop(\"recursive evaluation of symbols: \" + cycleString);\n        return;\n      }\n      chainOfUserSymbolsNotFunctionsBeingEvaluated.push(p1);\n      Eval();\n      return chainOfUserSymbolsNotFunctionsBeingEvaluated.pop();\n    }\n  };\n\n  Eval_cons = function() {\n    var cons_head;\n    cons_head = car(p1);\n    // normally the cons_head is a symbol,\n    // but sometimes in the case of\n    // functions we don't have a symbol,\n    // we have to evaluate something to get to the\n    // symbol. For example if a function is inside\n    // a tensor, then we need to evaluate an index\n    // access first to get to the function.\n    // In those cases, we find an EVAL here,\n    // so we proceed to EVAL\n    if (car(cons_head) === symbol(EVAL)) {\n      Eval_user_function();\n      return;\n    }\n    if (!issymbol(cons_head)) {\n      stop(\"cons?\");\n    }\n    switch (symnum(cons_head)) {\n      case ABS:\n        return Eval_abs();\n      case ADD:\n        return Eval_add();\n      case ADJ:\n        return Eval_adj();\n      case AND:\n        return Eval_and();\n      case ARCCOS:\n        return Eval_arccos();\n      case ARCCOSH:\n        return Eval_arccosh();\n      case ARCSIN:\n        return Eval_arcsin();\n      case ARCSINH:\n        return Eval_arcsinh();\n      case ARCTAN:\n        return Eval_arctan();\n      case ARCTANH:\n        return Eval_arctanh();\n      case ARG:\n        return Eval_arg();\n      case ATOMIZE:\n        return Eval_atomize();\n      case BESSELJ:\n        return Eval_besselj();\n      case BESSELY:\n        return Eval_bessely();\n      case BINDING:\n        return Eval_binding();\n      case BINOMIAL:\n        return Eval_binomial();\n      case CEILING:\n        return Eval_ceiling();\n      case CHECK:\n        return Eval_check();\n      case CHOOSE:\n        return Eval_choose();\n      case CIRCEXP:\n        return Eval_circexp();\n      case CLEAR:\n        return Eval_clear();\n      case CLEARALL:\n        return Eval_clearall();\n      case CLEARPATTERNS:\n        return Eval_clearpatterns();\n      case CLOCK:\n        return Eval_clock();\n      case COEFF:\n        return Eval_coeff();\n      case COFACTOR:\n        return Eval_cofactor();\n      case CONDENSE:\n        return Eval_condense();\n      case CONJ:\n        return Eval_conj();\n      case CONTRACT:\n        return Eval_contract();\n      case COS:\n        return Eval_cos();\n      case COSH:\n        return Eval_cosh();\n      case DECOMP:\n        return Eval_decomp();\n      case DEGREE:\n        return Eval_degree();\n      case DEFINT:\n        return Eval_defint();\n      case DENOMINATOR:\n        return Eval_denominator();\n      case DERIVATIVE:\n        return Eval_derivative();\n      case DET:\n        return Eval_det();\n      case DIM:\n        return Eval_dim();\n      case DIRAC:\n        return Eval_dirac();\n      case DIVISORS:\n        return Eval_divisors();\n      case DO:\n        return Eval_do();\n      case DOT:\n        return Eval_inner();\n      case DRAW:\n        return Eval_draw();\n      case DSOLVE:\n        return Eval_dsolve();\n      case EIGEN:\n        return Eval_eigen();\n      case EIGENVAL:\n        return Eval_eigenval();\n      case EIGENVEC:\n        return Eval_eigenvec();\n      case ERF:\n        return Eval_erf();\n      case ERFC:\n        return Eval_erfc();\n      case EVAL:\n        return Eval_Eval();\n      case EXP:\n        return Eval_exp();\n      case EXPAND:\n        return Eval_expand();\n      case EXPCOS:\n        return Eval_expcos();\n      case EXPSIN:\n        return Eval_expsin();\n      case FACTOR:\n        return Eval_factor();\n      case FACTORIAL:\n        return Eval_factorial();\n      case FACTORPOLY:\n        return Eval_factorpoly();\n      case FILTER:\n        return Eval_filter();\n      case FLOATF:\n        return Eval_float();\n      case APPROXRATIO:\n        return Eval_approxratio();\n      case FLOOR:\n        return Eval_floor();\n      case FOR:\n        return Eval_for();\n      // this is invoked only when we\n      // evaluate a function that is NOT being called\n      // e.g. when f is a function as we do\n      //  g = f\n      case FUNCTION:\n        return Eval_function_reference();\n      case GAMMA:\n        return Eval_gamma();\n      case GCD:\n        return Eval_gcd();\n      case HERMITE:\n        return Eval_hermite();\n      case HILBERT:\n        return Eval_hilbert();\n      case IMAG:\n        return Eval_imag();\n      case INDEX:\n        return Eval_index();\n      case INNER:\n        return Eval_inner();\n      case INTEGRAL:\n        return Eval_integral();\n      case INV:\n        return Eval_inv();\n      case INVG:\n        return Eval_invg();\n      case ISINTEGER:\n        return Eval_isinteger();\n      case ISPRIME:\n        return Eval_isprime();\n      case LAGUERRE:\n        return Eval_laguerre();\n      //  when LAPLACE then Eval_laplace()\n      case LCM:\n        return Eval_lcm();\n      case LEADING:\n        return Eval_leading();\n      case LEGENDRE:\n        return Eval_legendre();\n      case LOG:\n        return Eval_log();\n      case LOOKUP:\n        return Eval_lookup();\n      case MOD:\n        return Eval_mod();\n      case MULTIPLY:\n        return Eval_multiply();\n      case NOT:\n        return Eval_not();\n      case NROOTS:\n        return Eval_nroots();\n      case NUMBER:\n        return Eval_number();\n      case NUMERATOR:\n        return Eval_numerator();\n      case OPERATOR:\n        return Eval_operator();\n      case OR:\n        return Eval_or();\n      case OUTER:\n        return Eval_outer();\n      case PATTERN:\n        return Eval_pattern();\n      case PATTERNSINFO:\n        return Eval_patternsinfo();\n      case POLAR:\n        return Eval_polar();\n      case POWER:\n        return Eval_power();\n      case PRIME:\n        return Eval_prime();\n      case PRINT:\n        return Eval_print();\n      case PRINT2DASCII:\n        return Eval_print2dascii();\n      case PRINTFULL:\n        return Eval_printcomputer();\n      case PRINTLATEX:\n        return Eval_printlatex();\n      case PRINTLIST:\n        return Eval_printlist();\n      case PRINTPLAIN:\n        return Eval_printhuman();\n      case PRODUCT:\n        return Eval_product();\n      case QUOTE:\n        return Eval_quote();\n      case QUOTIENT:\n        return Eval_quotient();\n      case RANK:\n        return Eval_rank();\n      case RATIONALIZE:\n        return Eval_rationalize();\n      case REAL:\n        return Eval_real();\n      case ROUND:\n        return Eval_round();\n      case YYRECT:\n        return Eval_rect();\n      case ROOTS:\n        return Eval_roots();\n      case SETQ:\n        return Eval_setq();\n      case SGN:\n        return Eval_sgn();\n      case SILENTPATTERN:\n        return Eval_silentpattern();\n      case SIMPLIFY:\n        return Eval_simplify();\n      case SIN:\n        return Eval_sin();\n      case SINH:\n        return Eval_sinh();\n      case SHAPE:\n        return Eval_shape();\n      case SQRT:\n        return Eval_sqrt();\n      case STOP:\n        return Eval_stop();\n      case SUBST:\n        return Eval_subst();\n      case SUM:\n        return Eval_sum();\n      case SYMBOLSINFO:\n        return Eval_symbolsinfo();\n      case TAN:\n        return Eval_tan();\n      case TANH:\n        return Eval_tanh();\n      case TAYLOR:\n        return Eval_taylor();\n      case TEST:\n        return Eval_test();\n      case TESTEQ:\n        return Eval_testeq();\n      case TESTGE:\n        return Eval_testge();\n      case TESTGT:\n        return Eval_testgt();\n      case TESTLE:\n        return Eval_testle();\n      case TESTLT:\n        return Eval_testlt();\n      case TRANSPOSE:\n        return Eval_transpose();\n      case UNIT:\n        return Eval_unit();\n      case ZERO:\n        return Eval_zero();\n      default:\n        return Eval_user_function();\n    }\n  };\n\n  Eval_binding = function() {\n    return push(get_binding(cadr(p1)));\n  };\n\n  Eval_check = function() {\n    var checkResult;\n    // check the argument\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n    if (checkResult == null) {\n      // returned null: unknown result\n      // leave the whole check unevalled\n      return push(p1);\n    } else {\n      // returned 1 or 0\n      return push_integer(checkResult);\n    }\n  };\n\n  Eval_det = function() {\n    push(cadr(p1));\n    Eval();\n    return det();\n  };\n\n  Eval_dim = function() {\n    var n;\n    //int n\n    push(cadr(p1));\n    Eval();\n    p2 = pop();\n    if (iscons(cddr(p1))) {\n      push(caddr(p1));\n      Eval();\n      n = pop_integer();\n    } else {\n      n = 1;\n    }\n    if (!istensor(p2)) {\n      return push_integer(1); // dim of scalar is 1\n    } else if (n < 1 || n > p2.tensor.ndim) {\n      return push(p1);\n    } else {\n      return push_integer(p2.tensor.dim[n - 1]);\n    }\n  };\n\n  Eval_divisors = function() {\n    push(cadr(p1));\n    Eval();\n    return divisors();\n  };\n\n  Eval_do = function() {\n    var results;\n    push(car(p1));\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      pop();\n      push(car(p1));\n      Eval();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  Eval_dsolve = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    return dsolve();\n  };\n\n  // for example, Eval(f,x,2)\n  Eval_Eval = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      push(cadr(p1));\n      Eval();\n      subst();\n      p1 = cddr(p1);\n    }\n    return Eval();\n  };\n\n  // exp evaluation: it replaces itself with\n  // a POWER(E,something) node and evals that one\n  Eval_exp = function() {\n    push(cadr(p1));\n    Eval();\n    return exponential();\n  };\n\n  Eval_factorial = function() {\n    push(cadr(p1));\n    Eval();\n    return factorial();\n  };\n\n  Eval_factorpoly = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    factorpoly();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factorpoly();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  Eval_hermite = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return hermite();\n  };\n\n  Eval_hilbert = function() {\n    push(cadr(p1));\n    Eval();\n    return hilbert();\n  };\n\n  Eval_index = function() {\n    var h, orig, theTensor;\n    h = tos;\n    orig = p1;\n    \n    // look into the head of the list,\n    // when evaluated it should be a tensor\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    theTensor = stack[tos - 1];\n    if (isNumericAtom(theTensor)) {\n      stop(\"trying to access a scalar as a tensor\");\n    }\n    if (!istensor(theTensor)) {\n      // the tensor is not allocated yet, so\n      // leaving the expression unevalled\n      moveTos(h);\n      push(orig);\n      return;\n    }\n    // we examined the head of the list which\n    // was the tensor, now look into\n    // the indexes\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      if (!isintegerorintegerfloat(stack[tos - 1])) {\n        // index with something other than\n        // an integer\n        moveTos(h);\n        push(orig);\n        return;\n      }\n      p1 = cdr(p1);\n    }\n    return index_function(tos - h);\n  };\n\n  Eval_inv = function() {\n    push(cadr(p1));\n    Eval();\n    return inv();\n  };\n\n  Eval_invg = function() {\n    push(cadr(p1));\n    Eval();\n    return invg();\n  };\n\n  Eval_isinteger = function() {\n    var n;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (isrational(p1)) {\n      if (isinteger(p1)) {\n        push(one);\n      } else {\n        push(zero);\n      }\n      return;\n    }\n    if (isdouble(p1)) {\n      n = Math.floor(p1.d);\n      if (n === p1.d) {\n        push(one);\n      } else {\n        push(zero);\n      }\n      return;\n    }\n    push_symbol(ISINTEGER);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_number = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (p1.k === NUM || p1.k === DOUBLE) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_operator = function() {\n    var h;\n    h = tos;\n    push_symbol(OPERATOR);\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      p1 = cdr(p1);\n    }\n    return list(tos - h);\n  };\n\n  // quote definition\n  Eval_quote = function() {\n    return push(cadr(p1));\n  };\n\n  // rank definition\n  Eval_rank = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (istensor(p1)) {\n      return push_integer(p1.tensor.ndim);\n    } else {\n      return push(zero);\n    }\n  };\n\n  // Evaluates the right side and assigns the\n  // result of the evaluation to the left side.\n  // It's called setq because it stands for \"set quoted\" from Lisp,\n  // see:\n  //   http://stackoverflow.com/questions/869529/difference-between-set-setq-and-setf-in-common-lisp\n  // Note that this also takes case of assigning to a tensor\n  // element, which is something that setq wouldn't do\n  // in list, see comments further down below.\n\n  // Example:\n  //   f = x\n  //   // f evaluates to x, so x is assigned to g really\n  //   // rather than actually f being assigned to g\n  //   g = f\n  //   f = y\n  //   g\n  //   > x\n  Eval_setq = function() {\n    // case of tensor\n    if (caadr(p1) === symbol(INDEX)) {\n      setq_indexed();\n      return;\n    }\n    // case of function definition\n    if (iscons(cadr(p1))) {\n      define_user_function();\n      return;\n    }\n    if (!issymbol(cadr(p1))) {\n      stop(\"symbol assignment: error in symbol\");\n    }\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    set_binding(cadr(p1), p2);\n    // An assignment returns nothing.\n    // This is unlike most programming languages\n    // where an assignment does return the\n    // assigned value.\n    // TODO Could be changed.\n    return push(symbol(NIL));\n  };\n\n  // Here \"setq\" is a misnomer because\n  // setq wouldn't work in Lisp to set array elements\n  // since setq stands for \"set quoted\" and you wouldn't\n  // quote an array element access.\n  // You'd rather use setf, which is a macro that can\n  // assign a value to anything.\n  //   (setf (aref YourArray 2) \"blue\")\n  // see\n  //   http://stackoverflow.com/questions/18062016/common-lisp-how-to-set-an-element-in-a-2d-array\n  //-----------------------------------------------------------------------------\n\n  //  Example: a[1] = b\n\n  //  p1  *-------*-----------------------*\n  //    |  |      |\n  //    setq  *-------*-------*  b\n  //      |  |  |\n  //      index  a  1\n\n  //  cadadr(p1) -> a\n\n  //-----------------------------------------------------------------------------\n  setq_indexed = function() {\n    var h;\n    p4 = cadadr(p1);\n    if (!issymbol(p4)) {\n      // this is likely to happen when one tries to\n      // do assignments like these\n      //   1[2] = 3\n      // or\n      //   f(x)[1] = 2\n      // or\n      //   [[1,2],[3,4]][5] = 6\n\n      // In other words, one can only do\n      // a straight assignment like\n      //   existingMatrix[index] = something\n      stop(\"indexed assignment: expected a symbol name\");\n    }\n    h = tos;\n    push(caddr(p1));\n    Eval();\n    p2 = cdadr(p1);\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      p2 = cdr(p2);\n    }\n    set_component(tos - h);\n    p3 = pop();\n    set_binding(p4, p3);\n    return push(symbol(NIL));\n  };\n\n  Eval_sqrt = function() {\n    push(cadr(p1));\n    Eval();\n    push_rational(1, 2);\n    return power();\n  };\n\n  Eval_stop = function() {\n    return stop(\"user stop\");\n  };\n\n  Eval_subst = function() {\n    push(cadddr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadr(p1));\n    Eval();\n    subst();\n    return Eval(); // normalize\n  };\n\n  \n  // always returns a matrix with rank 2\n  // i.e. two dimensions,\n  // the passed parameter is the size\n  Eval_unit = function() {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    n = pop_integer();\n    if (isNaN(n)) {\n      push(p1);\n      return;\n    }\n    if (n < 1) {\n      push(p1);\n      return;\n    }\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p1.tensor.elem[n * i + i] = one;\n    }\n    check_tensor_dimensions(p1);\n    return push(p1);\n  };\n\n  Eval_noexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    Eval();\n    return expanding = prev_expanding;\n  };\n\n  // like Eval() except \"=\" (assignment) is treated\n  // as \"==\" (equality test)\n  // This is because\n  //  * this allows users to be lazy and just\n  //    use \"=\" instead of \"==\" as per more common\n  //    mathematical notation\n  //  * in many places we don't expect an assignment\n  //    e.g. we don't expect to test the zero-ness\n  //    of an assignment or the truth value of\n  //    an assignment\n  // Note that these are questionable assumptions\n  // as for example in most programming languages one\n  // can indeed test the value of an assignment (the\n  // value is just the evaluation of the right side)\n  Eval_predicate = function() {\n    save();\n    p1 = top();\n    if (car(p1) === symbol(SETQ)) {\n      // replace the assignment in the\n      // head with an equality test\n      pop();\n      push_symbol(TESTEQ);\n      push(cadr(p1));\n      push(caddr(p1));\n      list(3);\n    }\n    Eval();\n    return restore();\n  };\n\n  // Partial fraction expansion\n\n  // Example\n\n  //      expand(1/(x^3+x^2),x)\n\n  //        1      1       1\n  //      ---- - --- + -------\n  //        2     x     x + 1\n  //       x\n  Eval_expand = function() {\n    // 1st arg\n    push(cadr(p1));\n    Eval();\n    // 2nd arg\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    return expand();\n  };\n\n  //define A p2\n  //define B p3\n  //define C p4\n  //define F p5\n  //define P p6\n  //define Q p7\n  //define T p8\n  //define X p9\n  expand = function() {\n    var prev_expanding;\n    save();\n    p9 = pop();\n    p5 = pop();\n    if (istensor(p5)) {\n      expand_tensor();\n      restore();\n      return;\n    }\n    // if sum of terms then sum over the expansion of each term\n    if (car(p5) === symbol(ADD)) {\n      push_integer(0);\n      p1 = cdr(p5);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p9);\n        expand();\n        add();\n        p1 = cdr(p1);\n      }\n      restore();\n      return;\n    }\n    // B = numerator\n    push(p5);\n    numerator();\n    p3 = pop();\n    // A = denominator\n    push(p5);\n    denominator();\n    p2 = pop();\n    remove_negative_exponents();\n    // Q = quotient\n    push(p3);\n    push(p2);\n    push(p9);\n    // if the denominator is one then always bail out\n    // also bail out if the denominator is not one but\n    // it's not anything recognizable as a polynomial.\n    if (isone(p3) || isone(p2)) {\n      if (!ispolyexpandedform(p2, p9) || isone(p2)) {\n        pop();\n        pop();\n        pop();\n        push(p5);\n        // p5 is the original input, leave unchanged\n        restore();\n        return;\n      }\n    }\n    divpoly();\n    p7 = pop();\n    // remainder B = B - A * Q\n    push(p3);\n    push(p2);\n    push(p7);\n    multiply();\n    subtract();\n    p3 = pop();\n    // if the remainder is zero then we're done\n    if (isZeroAtomOrTensor(p3)) {\n      push(p7);\n      restore();\n      return;\n    }\n    // A = factor(A)\n\n    //console.log(\"expand - to be factored: \" + p2)\n    push(p2);\n    push(p9);\n    factorpoly();\n    p2 = pop();\n    //console.log(\"expand - factored to: \" + p2)\n    expand_get_C();\n    expand_get_B();\n    expand_get_A();\n    if (istensor(p4)) {\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n      inv();\n      expanding = prev_expanding;\n      push(p3);\n      inner();\n      push(p2);\n      inner();\n    } else {\n      push(p3);\n      push(p4);\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p2);\n      multiply();\n    }\n    push(p7);\n    add();\n    return restore();\n  };\n\n  expand_tensor = function() {\n    var i, o, ref;\n    i = 0;\n    push(p5);\n    copy_tensor();\n    p5 = pop();\n    for (i = o = 0, ref = p5.tensor.nelem; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      push(p5.tensor.elem[i]);\n      push(p9);\n      expand();\n      p5.tensor.elem[i] = pop();\n    }\n    return push(p5);\n  };\n\n  remove_negative_exponents = function() {\n    var h, i, j, k, n, o, ref;\n    h = 0;\n    i = 0;\n    j = 0;\n    k = 0;\n    n = 0;\n    h = tos;\n    factors(p2);\n    factors(p3);\n    n = tos - h;\n    // find the smallest exponent\n    j = 0;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p1 = stack[h + i];\n      if (car(p1) !== symbol(POWER)) {\n        continue;\n      }\n      if (cadr(p1) !== p9) {\n        continue;\n      }\n      push(caddr(p1));\n      k = pop_integer();\n      if (isNaN(k)) {\n        continue;\n      }\n      if (k < j) {\n        j = k;\n      }\n    }\n    moveTos(h);\n    if (j === 0) {\n      return;\n    }\n    // A = A / X^j\n    push(p2);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    p2 = pop();\n    // B = B / X^j\n    push(p3);\n    push(p9);\n    push_integer(-j);\n    power();\n    multiply();\n    return p3 = pop();\n  };\n\n  // Returns the expansion coefficient matrix C.\n\n  // Example:\n\n  //       B         1\n  //      --- = -----------\n  //       A      2 \n  //             x (x + 1)\n\n  // We have\n\n  //       B     Y1     Y2      Y3\n  //      --- = ---- + ---- + -------\n  //       A      2     x      x + 1\n  //             x\n\n  // Our task is to solve for the unknowns Y1, Y2, and Y3.\n\n  // Multiplying both sides by A yields\n\n  //           AY1     AY2      AY3\n  //      B = ----- + ----- + -------\n  //            2      x       x + 1\n  //           x\n\n  // Let\n\n  //            A               A                 A\n  //      W1 = ----       W2 = ---        W3 = -------\n  //             2              x               x + 1\n  //            x\n\n  // Then the coefficient matrix C is\n\n  //              coeff(W1,x,0)   coeff(W2,x,0)   coeff(W3,x,0)\n\n  //       C =    coeff(W1,x,1)   coeff(W2,x,1)   coeff(W3,x,1)\n\n  //              coeff(W1,x,2)   coeff(W2,x,2)   coeff(W3,x,2)\n\n  // It follows that\n\n  //       coeff(B,x,0)     Y1\n\n  //       coeff(B,x,1) = C Y2\n\n  //       coeff(B,x,2) =   Y3\n\n  // Hence\n\n  //       Y1       coeff(B,x,0)\n  //             -1\n  //       Y2 = C   coeff(B,x,1)\n\n  //       Y3       coeff(B,x,2)\n  expand_get_C = function() {\n    var a, h, i, i1, j, n, o, prev_expanding, ref, ref1;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    //U **a\n    h = tos;\n    if (car(p2) === symbol(MULTIPLY)) {\n      p1 = cdr(p2);\n      while (iscons(p1)) {\n        p5 = car(p1);\n        expand_get_CF();\n        p1 = cdr(p1);\n      }\n    } else {\n      p5 = p2;\n      expand_get_CF();\n    }\n    n = tos - h;\n    if (n === 1) {\n      p4 = pop();\n      return;\n    }\n    p4 = alloc_tensor(n * n);\n    p4.tensor.ndim = 2;\n    p4.tensor.dim[0] = n;\n    p4.tensor.dim[1] = n;\n    a = h;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        push(stack[a + j]);\n        push(p9);\n        push_integer(i);\n        power();\n        prev_expanding = expanding;\n        expanding = 1;\n        divide();\n        expanding = prev_expanding;\n        push(p9);\n        filter();\n        p4.tensor.elem[n * i + j] = pop();\n      }\n    }\n    return moveTos(tos - n);\n  };\n\n  // The following table shows the push order for simple roots, repeated roots,\n  // and inrreducible factors.\n\n  //  Factor F        Push 1st        Push 2nd         Push 3rd      Push 4th\n\n  //                   A\n  //  x               ---\n  //                   x\n\n  //   2               A               A\n  //  x               ----            ---\n  //                    2              x\n  //                   x\n\n  //                     A\n  //  x + 1           -------\n  //                   x + 1\n\n  //         2            A              A\n  //  (x + 1)         ----------      -------\n  //                          2        x + 1\n  //                   (x + 1)\n\n  //   2                   A               Ax\n  //  x  + x + 1      ------------    ------------\n  //                    2               2\n  //                   x  + x + 1      x  + x + 1\n\n  //    2         2          A              Ax              A             Ax\n  //  (x  + x + 1)    --------------- ---------------  ------------  ------------\n  //                     2         2     2         2     2             2\n  //                   (x  + x + 1)    (x  + x + 1)     x  + x + 1    x  + x + 1\n\n  // For T = A/F and F = P^N we have\n\n  //      Factor F          Push 1st    Push 2nd    Push 3rd    Push 4th\n\n  //      x                 T\n\n  //       2\n  //      x                 T           TP\n\n  //      x + 1             T\n\n  //             2\n  //      (x + 1)           T           TP\n\n  //       2\n  //      x  + x + 1        T           TX\n\n  //        2         2\n  //      (x  + x + 1)      T           TX          TP          TPX\n\n  // Hence we want to push in the order\n\n  //      T * (P ^ i) * (X ^ j)\n\n  // for all i, j such that\n\n  //      i = 0, 1, ..., N - 1\n\n  //      j = 0, 1, ..., deg(P) - 1\n\n  // where index j runs first.\n  expand_get_CF = function() {\n    var d, i, j, n, o, prev_expanding, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    if (!Find(p5, p9)) {\n      return;\n    }\n    prev_expanding = expanding;\n    expanding = 1;\n    trivial_divide();\n    expanding = prev_expanding;\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p6 = cadr(p5);\n    } else {\n      n = 1;\n      p6 = p5;\n    }\n    push(p6);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      results.push((function() {\n        var i1, ref1, results1;\n        results1 = [];\n        for (j = i1 = 0, ref1 = d; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p8);\n          push(p6);\n          push_integer(i);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          expanding = prev_expanding;\n          push(p9);\n          push_integer(j);\n          power();\n          prev_expanding = expanding;\n          expanding = 1;\n          multiply();\n          results1.push(expanding = prev_expanding);\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  // Returns T = A/F where F is a factor of A.\n  trivial_divide = function() {\n    var h;\n    h = 0;\n    if (car(p2) === symbol(MULTIPLY)) {\n      h = tos;\n      p0 = cdr(p2);\n      while (iscons(p0)) {\n        if (!equal(car(p0), p5)) {\n          push(car(p0));\n          Eval(); // force expansion of (x+1)^2, f.e.\n        }\n        p0 = cdr(p0);\n      }\n      multiply_all(tos - h);\n    } else {\n      push_integer(1);\n    }\n    return p8 = pop();\n  };\n\n  // Returns the expansion coefficient vector B.\n  expand_get_B = function() {\n    var i, n, o, prev_expanding, ref;\n    i = 0;\n    n = 0;\n    if (!istensor(p4)) {\n      return;\n    }\n    n = p4.tensor.dim[0];\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      push(p3);\n      push(p9);\n      push_integer(i);\n      power();\n      prev_expanding = expanding;\n      expanding = 1;\n      divide();\n      expanding = prev_expanding;\n      push(p9);\n      filter();\n      p8.tensor.elem[i] = pop();\n    }\n    return p3 = p8;\n  };\n\n  // Returns the expansion fractions in A.\n  expand_get_A = function() {\n    var h, i, n, o, ref;\n    h = 0;\n    i = 0;\n    n = 0;\n    if (!istensor(p4)) {\n      push(p2);\n      reciprocate();\n      p2 = pop();\n      return;\n    }\n    h = tos;\n    if (car(p2) === symbol(MULTIPLY)) {\n      p8 = cdr(p2);\n      while (iscons(p8)) {\n        p5 = car(p8);\n        expand_get_AF();\n        p8 = cdr(p8);\n      }\n    } else {\n      p5 = p2;\n      expand_get_AF();\n    }\n    n = tos - h;\n    p8 = alloc_tensor(n);\n    p8.tensor.ndim = 1;\n    p8.tensor.dim[0] = n;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p8.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(h);\n    return p2 = p8;\n  };\n\n  expand_get_AF = function() {\n    var d, i, j, n, o, ref, results;\n    d = 0;\n    i = 0;\n    j = 0;\n    n = 1;\n    if (!Find(p5, p9)) {\n      return;\n    }\n    if (car(p5) === symbol(POWER)) {\n      push(caddr(p5));\n      n = pop_integer();\n      p5 = cadr(p5);\n    }\n    push(p5);\n    push(p9);\n    degree();\n    d = pop_integer();\n    results = [];\n    for (i = o = ref = n; (ref <= 0 ? o < 0 : o > 0); i = ref <= 0 ? ++o : --o) {\n      results.push((function() {\n        var i1, ref1, results1;\n        results1 = [];\n        for (j = i1 = 0, ref1 = d; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n          push(p5);\n          push_integer(i);\n          power();\n          reciprocate();\n          push(p9);\n          push_integer(j);\n          power();\n          results1.push(multiply());\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  // Do the exponential cosine function.\n  Eval_expcos = function() {\n    push(cadr(p1));\n    Eval();\n    return expcos();\n  };\n\n  expcos = function() {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push_rational(1, 2);\n    multiply();\n    add();\n    return restore();\n  };\n\n  // Do the exponential sine function.\n  Eval_expsin = function() {\n    push(cadr(p1));\n    Eval();\n    return expsin();\n  };\n\n  expsin = function() {\n    save();\n    p1 = pop();\n    push(imaginaryunit);\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    push(imaginaryunit);\n    negate();\n    push(p1);\n    multiply();\n    exponential();\n    push(imaginaryunit);\n    divide();\n    push_rational(1, 2);\n    multiply();\n    subtract();\n    return restore();\n  };\n\n  // factor a polynomial or integer\n  Eval_factor = function() {\n    var results;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    factor();\n    // more factoring?\n    p1 = cdddr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      factor_again();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  factor_again = function() {\n    var h, n;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        factor_term();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      factor_term();\n    }\n    n = tos - h;\n    if (n > 1) {\n      multiply_all_noexpand(n);\n    }\n    return restore();\n  };\n\n  factor_term = function() {\n    save();\n    factorpoly();\n    p1 = pop();\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n    }\n    return restore();\n  };\n\n  factor = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isinteger(p1)) {\n      push(p1);\n      factor_number(); // see pollard.cpp\n    } else {\n      push(p1);\n      push(p2);\n      factorpoly();\n    }\n    return restore();\n  };\n\n  // for factoring small integers (2^32 or less)\n  factor_small_number = function() {\n    var d, expo, i, n, o, ref;\n    i = 0;\n    save();\n    n = pop_integer();\n    if (isNaN(n)) {\n      stop(\"number too big to factor\");\n    }\n    if (n < 0) {\n      n = -n;\n    }\n    for (i = o = 0, ref = MAXPRIMETAB; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      d = primetab[i];\n      if (d > n / d) {\n        break;\n      }\n      expo = 0;\n      while (n % d === 0) {\n        n /= d;\n        expo++;\n      }\n      if (expo) {\n        push_integer(d);\n        push_integer(expo);\n      }\n    }\n    if (n > 1) {\n      push_integer(n);\n      push_integer(1);\n    }\n    return restore();\n  };\n\n  factorial = function() {\n    var n;\n    n = 0;\n    save();\n    p1 = pop();\n    push(p1);\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push_symbol(FACTORIAL);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    bignum_factorial(n);\n    return restore();\n  };\n\n  // simplification rules for factorials (m < n)\n\n  //  (e + 1) * factorial(e)  ->  factorial(e + 1)\n\n  //  factorial(e) / e  ->  factorial(e - 1)\n\n  //  e / factorial(e)  ->  1 / factorial(e - 1)\n\n  //  factorial(e + n)\n  //  ----------------  ->  (e + m + 1)(e + m + 2)...(e + n)\n  //  factorial(e + m)\n\n  //  factorial(e + m)                               1\n  //  ----------------  ->  --------------------------------\n  //  factorial(e + n)    (e + m + 1)(e + m + 2)...(e + n)\n\n  // this function is not actually used, but\n  // all these simplifications\n  // do happen automatically via simplify\n  simplifyfactorials = function() {\n    var x;\n    x = 0;\n    save();\n    x = expanding;\n    expanding = 0;\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      push(zero);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        simplifyfactorials();\n        add();\n        p1 = cdr(p1);\n      }\n      expanding = x;\n      restore();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      sfac_product();\n      expanding = x;\n      restore();\n      return;\n    }\n    push(p1);\n    expanding = x;\n    return restore();\n  };\n\n  sfac_product = function() {\n    var i, i1, j, j1, n, o, ref, ref1, ref2, ref3, s;\n    i = 0;\n    j = 0;\n    n = 0;\n    s = tos;\n    p1 = cdr(p1);\n    n = 0;\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n      n++;\n    }\n    for (i = o = 0, ref = n - 1; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n      for (j = i1 = ref1 = i + 1, ref2 = n; (ref1 <= ref2 ? i1 < ref2 : i1 > ref2); j = ref1 <= ref2 ? ++i1 : --i1) {\n        if (stack[s + j] === symbol(NIL)) {\n          continue;\n        }\n        sfac_product_f(s, i, j);\n      }\n    }\n    push(one);\n    for (i = j1 = 0, ref3 = n; (0 <= ref3 ? j1 < ref3 : j1 > ref3); i = 0 <= ref3 ? ++j1 : --j1) {\n      if (stack[s + i] === symbol(NIL)) {\n        continue;\n      }\n      push(stack[s + i]);\n      multiply();\n    }\n    p1 = pop();\n    moveTos(tos - n);\n    return push(p1);\n  };\n\n  sfac_product_f = function(s, a, b) {\n    var i, n, o, ref;\n    i = 0;\n    n = 0;\n    p1 = stack[s + a];\n    p2 = stack[s + b];\n    if (ispower(p1)) {\n      p3 = caddr(p1);\n      p1 = cadr(p1);\n    } else {\n      p3 = one;\n    }\n    if (ispower(p2)) {\n      p4 = caddr(p2);\n      p2 = cadr(p2);\n    } else {\n      p4 = one;\n    }\n    if (isfactorial(p1) && isfactorial(p2)) {\n      // Determine if the powers cancel.\n      push(p3);\n      push(p4);\n      add();\n      yyexpand();\n      n = pop_integer();\n      if (n !== 0) {\n        return;\n      }\n      // Find the difference between the two factorial args.\n\n      // For example, the difference between (a + 2)! and a! is 2.\n      push(cadr(p1));\n      push(cadr(p2));\n      subtract();\n      yyexpand();\n      n = pop_integer();\n      if (n === 0 || isNaN(n)) {\n        return;\n      }\n      if (n < 0) {\n        n = -n;\n        p5 = p1;\n        p1 = p2;\n        p2 = p5;\n        p5 = p3;\n        p3 = p4;\n        p4 = p5;\n      }\n      push(one);\n      for (i = o = 1, ref = n; (1 <= ref ? o <= ref : o >= ref); i = 1 <= ref ? ++o : --o) {\n        push(cadr(p2));\n        push_integer(i);\n        add();\n        push(p3);\n        power();\n        multiply();\n      }\n      stack[s + a] = pop();\n      return stack[s + b] = symbol(NIL);\n    }\n  };\n\n  // Factor a polynomial\n  factorpoly = function() {\n    var polynomial, variable;\n    if (DEBUG) {\n      console.log(\"factorpoly: \" + stack[tos - 1].toString() + \" \" + stack[tos - 2].toString());\n    }\n    save();\n    variable = pop();\n    polynomial = pop();\n    if (!Find(polynomial, variable) || !ispolyexpandedform(polynomial, variable) || !issymbol(variable)) {\n      push(polynomial);\n    } else {\n      yyfactorpoly(variable, polynomial);\n    }\n    return restore();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    tos-2    true polynomial\n\n  //      tos-1    free variable\n\n  //  Output:    factored polynomial on stack\n\n  //-----------------------------------------------------------------------------\n  yyfactorpoly = function(variable, polynomial) {\n    var A, AxPlusB, B, checkingTheDivision, dividend, factpoly_expo, firstParam, foundComplexRoot, foundRealRoot, h, i, i1, j1, l1, o, partOfPolynomialFactoredSoFar, polycoeff, prev_expanding, previousFactorisation, ref, ref1, ref2, ref3, remainingPoly, secondDegreePloly, secondParam, whichRootsAreWeFinding;\n    if (DEBUG) {\n      firstParam = variable;\n      secondParam = polynomial;\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam);\n    }\n    save();\n    h = tos;\n    if (isfloating(polynomial)) {\n      stop(\"floating point numbers in polynomial\");\n    }\n    polycoeff = tos;\n    factpoly_expo = coeff(variable, polynomial) - 1;\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" factpoly_expo before rationalize_coefficients: \" + factpoly_expo);\n    }\n    partOfPolynomialFactoredSoFar = rationalize_coefficients(h);\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" factpoly_expo  after rationalize_coefficients: \" + factpoly_expo);\n    }\n    // for univariate polynomials we could do factpoly_expo > 1\n    whichRootsAreWeFinding = \"real\";\n    remainingPoly = null;\n    while (factpoly_expo > 0) {\n      if (DEBUG) {\n        console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" factpoly_expo inside while loop: \" + factpoly_expo);\n      }\n      if (isZeroAtomOrTensor(stack[polycoeff + 0])) {\n        if (DEBUG) {\n          console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" isZeroAtomOrTensor\");\n        }\n        A = one;\n        B = zero;\n      } else {\n        //console.log(\"trying to find a \" + whichRootsAreWeFinding + \" root\")\n        if (whichRootsAreWeFinding === \"real\") {\n          [foundRealRoot, A, B] = get_factor_from_real_root(variable, factpoly_expo, polycoeff);\n        } else if (whichRootsAreWeFinding === \"complex\") {\n          [foundComplexRoot, A] = get_factor_from_complex_root(remainingPoly, factpoly_expo, polycoeff);\n        }\n      }\n      if (whichRootsAreWeFinding === \"real\") {\n        if (foundRealRoot === 0) {\n          whichRootsAreWeFinding = \"complex\";\n          continue;\n        } else {\n          // build the 1-degree polynomial out of the\n          // real solution that was just found.\n          push(A); // A\n          push(variable); // x\n          multiply();\n          push(B); // B\n          add();\n          AxPlusB = pop();\n          if (DEBUG) {\n            console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" success\\nFACTOR=\" + AxPlusB);\n          }\n          // factor out negative sign (not req'd because A > 1)\n          //if 0\n          /*\n          if (isnegativeterm(A))\n            push(AxPlusB)\n            negate()\n            AxPlusB = pop()\n            push(partOfPolynomialFactoredSoFar)\n            negate_noexpand()\n            partOfPolynomialFactoredSoFar = pop()\n          */\n          //endif\n\n          // partOfPolynomialFactoredSoFar is the part of the polynomial that was factored so far,\n          // add the newly found factor to it. Note that we are not actually\n          // multiplying the polynomials fully, we are just leaving them\n          // expressed as (P1)*(P2), we are not expanding the product.\n          push(partOfPolynomialFactoredSoFar);\n          push(AxPlusB);\n          multiply_noexpand();\n          partOfPolynomialFactoredSoFar = pop();\n          // ok now on stack we have the coefficients of the\n          // remaining part of the polynomial still to factor.\n          // Divide it by the newly-found factor so that\n          // the stack then contains the coefficients of the\n          // polynomial part still left to factor.\n          yydivpoly(factpoly_expo, polycoeff, A, B);\n          while (factpoly_expo && isZeroAtomOrTensor(stack[polycoeff + factpoly_expo])) {\n            factpoly_expo--;\n          }\n          push(zero);\n          for (i = o = 0, ref = factpoly_expo; (0 <= ref ? o <= ref : o >= ref); i = 0 <= ref ? ++o : --o) {\n            push(stack[polycoeff + i]);\n            push(variable); // the free variable\n            push_integer(i);\n            power();\n            multiply();\n            add();\n          }\n          remainingPoly = pop();\n        }\n      //console.log(\"real branch remainingPoly: \" + remainingPoly)\n      } else if (whichRootsAreWeFinding === \"complex\") {\n        if (foundComplexRoot === 0) {\n          break;\n        } else {\n          // build the 2-degree polynomial out of the\n          // real solution that was just found.\n          push(A); // A\n          push(variable); // x\n          subtract();\n          //console.log(\"first factor: \" + stack[tos-1].toString())\n          push(A); // A\n          conjugate();\n          push(variable); // x\n          subtract();\n          //console.log(\"second factor: \" + stack[tos-1].toString())\n          multiply();\n          //if (factpoly_expo > 0 && isnegativeterm(stack[polycoeff+factpoly_expo]))\n          //  negate()\n          //  negate_noexpand()\n          secondDegreePloly = pop();\n          if (DEBUG) {\n            console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" success\\nFACTOR=\" + secondDegreePloly);\n          }\n          // factor out negative sign (not req'd because A > 1)\n          //if 0\n          /*\n          if (isnegativeterm(A))\n            push(secondDegreePloly)\n            negate()\n            secondDegreePloly = pop()\n            push(partOfPolynomialFactoredSoFar)\n            negate_noexpand()\n            partOfPolynomialFactoredSoFar = pop()\n          */\n          //endif\n\n          // partOfPolynomialFactoredSoFar is the part of the polynomial that was factored so far,\n          // add the newly found factor to it. Note that we are not actually\n          // multiplying the polynomials fully, we are just leaving them\n          // expressed as (P1)*(P2), we are not expanding the product.\n          push(partOfPolynomialFactoredSoFar);\n          previousFactorisation = pop();\n          //console.log(\"previousFactorisation: \" + previousFactorisation)\n          push(partOfPolynomialFactoredSoFar);\n          push(secondDegreePloly);\n          multiply_noexpand();\n          partOfPolynomialFactoredSoFar = pop();\n          if (remainingPoly == null) {\n            push(zero);\n            for (i = i1 = 0, ref1 = factpoly_expo; (0 <= ref1 ? i1 <= ref1 : i1 >= ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n              push(stack[polycoeff + i]);\n              push(variable); // the free variable\n              push_integer(i);\n              power();\n              multiply();\n              add();\n            }\n            remainingPoly = pop();\n          }\n          //console.log(\"original polynomial (dividend): \" + remainingPoly)\n          dividend = remainingPoly;\n          //push(dividend)\n          //degree()\n          //startingDegree = pop()\n          push(dividend);\n          //console.log(\"dividing \" + stack[tos-1].toString() + \" by \" + secondDegreePloly)\n          push(secondDegreePloly); // divisor\n          push(variable); // X\n          divpoly();\n          remainingPoly = pop();\n          push(remainingPoly);\n          push(secondDegreePloly); // divisor\n          multiply();\n          checkingTheDivision = pop();\n          if (!equal(checkingTheDivision, dividend)) {\n            //push(dividend)\n            //gcd_sum()\n            //console.log(\"gcd top of stack: \" + stack[tos-1].toString())\n            if (DEBUG) {\n              console.log(\"we found a polynomial based on complex root and its conj but it doesn't divide the poly, quitting\");\n            }\n            if (DEBUG) {\n              console.log(\"so just returning previousFactorisation times dividend: \" + previousFactorisation + \" * \" + dividend);\n            }\n            push(previousFactorisation);\n            push(dividend);\n            prev_expanding = expanding;\n            expanding = 0;\n            yycondense();\n            expanding = prev_expanding;\n            multiply_noexpand();\n            partOfPolynomialFactoredSoFar = pop();\n            stack[h] = partOfPolynomialFactoredSoFar;\n            moveTos(h + 1);\n            restore();\n            return;\n          }\n//console.log(\"result: (still to be factored) \" + remainingPoly)\n\n          //push(remainingPoly)\n//degree()\n//remainingDegree = pop()\n/*\nif compare_numbers(startingDegree, remainingDegree)\n * ok even if we found a complex root that\n * together with the conjugate generates a poly in Z,\n * that doesn't mean that the division would end up in Z.\n * Example: 1+x^2+x^4+x^6 has +i and -i as one of its roots\n * so a factor is 1+x^2 ( = (x+i)*(x-i))\n * BUT \n */\n          for (i = j1 = 0, ref2 = factpoly_expo; (0 <= ref2 ? j1 <= ref2 : j1 >= ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n            pop();\n          }\n          coeff(variable, remainingPoly);\n          factpoly_expo -= 2;\n        }\n      }\n    }\n    //console.log(\"factpoly_expo: \" + factpoly_expo)\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" building the remaining unfactored part of the polynomial\");\n    }\n    push(zero);\n    for (i = l1 = 0, ref3 = factpoly_expo; (0 <= ref3 ? l1 <= ref3 : l1 >= ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[polycoeff + i]);\n      push(variable); // the free variable\n      push_integer(i);\n      power();\n      multiply();\n      add();\n    }\n    polynomial = pop();\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" remaining unfactored part of the polynomial: \" + polynomial.toString());\n    }\n    push(polynomial);\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    polynomial = pop();\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" new poly with extracted common factor: \" + polynomial.toString());\n    }\n    //debugger\n\n    // factor out negative sign\n    if (factpoly_expo > 0 && isnegativeterm(stack[polycoeff + factpoly_expo])) {\n      push(polynomial);\n      //prev_expanding = expanding\n      //expanding = 1\n      negate();\n      //expanding = prev_expanding\n      polynomial = pop();\n      push(partOfPolynomialFactoredSoFar);\n      negate_noexpand();\n      partOfPolynomialFactoredSoFar = pop();\n    }\n    push(partOfPolynomialFactoredSoFar);\n    push(polynomial);\n    multiply_noexpand();\n    partOfPolynomialFactoredSoFar = pop();\n    if (DEBUG) {\n      console.log(\"yyfactorpoly: \" + firstParam + \" \" + secondParam + \" result: \" + partOfPolynomialFactoredSoFar);\n    }\n    stack[h] = partOfPolynomialFactoredSoFar;\n    moveTos(h + 1);\n    return restore();\n  };\n\n  rationalize_coefficients = function(h) {\n    var i, i1, o, ratio, ratioInverse, ref, ref1, ref2, ref3;\n    // LCM of all polynomial coefficients\n    ratio = one;\n    for (i = o = ref = h, ref1 = tos; (ref <= ref1 ? o < ref1 : o > ref1); i = ref <= ref1 ? ++o : --o) {\n      push(stack[i]);\n      denominator();\n      push(ratio);\n      lcm();\n      ratio = pop();\n    }\n// multiply each coefficient by RESULT\n    for (i = i1 = ref2 = h, ref3 = tos; (ref2 <= ref3 ? i1 < ref3 : i1 > ref3); i = ref2 <= ref3 ? ++i1 : --i1) {\n      push(ratio);\n      push(stack[i]);\n      multiply();\n      stack[i] = pop();\n    }\n    // reciprocate RESULT\n    push(ratio);\n    reciprocate();\n    ratioInverse = pop();\n    if (DEBUG) {\n      console.log(\"rationalize_coefficients result: \" + ratioInverse.toString());\n    }\n    return ratioInverse;\n  };\n\n  get_factor_from_real_root = function(variable, factpoly_expo, polycoeff) {\n    var a0, an, evalPolyResult, h, i, i1, j, j1, l1, m1, na0, nan, o, polynomial, ref, ref1, ref2, ref3, ref4, rootsTries_i, rootsTries_j, testDenominator, testNumerator, testValue;\n    if (DEBUG) {\n      console.log(\"get_factor_from_real_root\");\n    }\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n    if (DEBUG) {\n      push(zero);\n      for (i = o = 0, ref = factpoly_expo; (0 <= ref ? o <= ref : o >= ref); i = 0 <= ref ? ++o : --o) {\n        push(stack[polycoeff + i]);\n        push(variable);\n        push_integer(i);\n        power();\n        multiply();\n        add();\n      }\n      polynomial = pop();\n      console.log(\"POLY=\" + polynomial);\n    }\n    h = tos;\n    an = tos;\n    push(stack[polycoeff + factpoly_expo]);\n    divisors_onstack();\n    nan = tos - an;\n    a0 = tos;\n    push(stack[polycoeff + 0]);\n    divisors_onstack();\n    na0 = tos - a0;\n    if (DEBUG) {\n      console.log(\"divisors of base term\");\n      for (i = i1 = 0, ref1 = na0; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n        console.log(\", \" + stack[a0 + i]);\n      }\n      console.log(\"divisors of leading term\");\n      for (i = j1 = 0, ref2 = nan; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n        console.log(\", \" + stack[an + i]);\n      }\n    }\n// try roots\n    for (rootsTries_i = l1 = 0, ref3 = nan; (0 <= ref3 ? l1 < ref3 : l1 > ref3); rootsTries_i = 0 <= ref3 ? ++l1 : --l1) {\n      for (rootsTries_j = m1 = 0, ref4 = na0; (0 <= ref4 ? m1 < ref4 : m1 > ref4); rootsTries_j = 0 <= ref4 ? ++m1 : --m1) {\n        //if DEBUG then console.log \"nan: \" + nan + \" na0: \" + na0 + \" i: \" + rootsTries_i + \" j: \" + rootsTries_j\n        testNumerator = stack[an + rootsTries_i];\n        testDenominator = stack[a0 + rootsTries_j];\n        push(testDenominator);\n        push(testNumerator);\n        divide();\n        negate();\n        testValue = pop();\n        evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n        if (DEBUG) {\n          console.log(\"try A=\" + testNumerator);\n          console.log(\", B=\" + testDenominator);\n          console.log(\", root \" + variable);\n          console.log(\"=-B/A=\" + testValue);\n          console.log(\", POLY(\" + testValue);\n          console.log(\")=\" + evalPolyResult);\n        }\n        if (isZeroAtomOrTensor(evalPolyResult)) {\n          moveTos(h);\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n          return [1, testNumerator, testDenominator];\n        }\n        push(testDenominator);\n        negate();\n        testDenominator = pop();\n        push(testValue);\n        negate();\n        testValue = pop();\n        evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n        if (DEBUG) {\n          console.log(\"try A=\" + testNumerator);\n          console.log(\", B=\" + testDenominator);\n          console.log(\", root \" + variable);\n          console.log(\"=-B/A=\" + testValue);\n          console.log(\", POLY(\" + testValue);\n          console.log(\")=\" + evalPolyResult);\n        }\n        if (isZeroAtomOrTensor(evalPolyResult)) {\n          moveTos(h);\n          if (DEBUG) {\n            console.log(\"get_factor_from_real_root returning 1\");\n          }\n          return [1, testNumerator, testDenominator];\n        }\n      }\n    }\n    moveTos(h);\n    if (DEBUG) {\n      console.log(\"get_factor_from_real_root returning\");\n    }\n    return [0, null, null];\n  };\n\n  get_factor_from_complex_root = function(remainingPoly, factpoly_expo, polycoeff) {\n    var a0, an, evalPolyResult, h, i, i1, j, na0, nan, o, rootsTries_i, rootsTries_j, testValue;\n    i = 0;\n    j = 0;\n    h = 0;\n    a0 = 0;\n    an = 0;\n    na0 = 0;\n    nan = 0;\n    if (factpoly_expo <= 2) {\n      if (DEBUG) {\n        console.log(\"no more factoring via complex roots to be found in polynomial of degree <= 2\");\n      }\n      return [0, null];\n    }\n    if (DEBUG) {\n      console.log(\"complex root finding for POLY=\" + remainingPoly);\n    }\n    h = tos;\n    an = tos;\n    // trying -1^(2/3) which generates a polynomial in Z\n    // generates x^2 + 2x + 1\n    push_integer(-1);\n    push_rational(2, 3);\n    power();\n    rect();\n    testValue = pop();\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + testValue);\n    }\n    push(testValue);\n    evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + evalPolyResult);\n    }\n    if (isZeroAtomOrTensor(evalPolyResult)) {\n      moveTos(h);\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n      return [1, testValue];\n    }\n    // trying 1^(2/3) which generates a polynomial in Z\n    // http://www.wolframalpha.com/input/?i=(1)%5E(2%2F3)\n    // generates x^2 - 2x + 1\n    push_integer(1);\n    push_rational(2, 3);\n    power();\n    rect();\n    testValue = pop();\n    if (DEBUG) {\n      console.log(\"complex root finding: trying with \" + testValue);\n    }\n    push(testValue);\n    evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n    if (DEBUG) {\n      console.log(\"complex root finding result: \" + evalPolyResult);\n    }\n    if (isZeroAtomOrTensor(evalPolyResult)) {\n      moveTos(h);\n      if (DEBUG) {\n        console.log(\"get_factor_from_complex_root returning 1\");\n      }\n      return [1, testValue];\n    }\n// trying some simple complex numbers. All of these\n// generate polynomials in Z\n    for (rootsTries_i = o = -10; o <= 10; rootsTries_i = ++o) {\n      for (rootsTries_j = i1 = 1; i1 <= 5; rootsTries_j = ++i1) {\n        push_integer(rootsTries_i);\n        push_integer(rootsTries_j);\n        push(imaginaryunit);\n        multiply();\n        add();\n        rect();\n        testValue = pop();\n        if (DEBUG) {\n          console.log(\"complex root finding: trying simple complex combination \" + testValue);\n        }\n        push(testValue);\n        evalPolyResult = Evalpoly(factpoly_expo, polycoeff, testValue);\n        //console.log(\"complex root finding result: \" + evalPolyResult)\n        if (isZeroAtomOrTensor(evalPolyResult)) {\n          moveTos(h);\n          if (DEBUG) {\n            console.log(\"found complex root: \" + evalPolyResult);\n          }\n          return [1, testValue];\n        }\n      }\n    }\n    moveTos(h);\n    if (DEBUG) {\n      console.log(\"get_factor_from_complex_root returning 0\");\n    }\n    return [0, null];\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Divide a polynomial by Ax+B\n\n  //  Input:  on stack:  polycoeff  Dividend coefficients\n\n  //      factpoly_expo   as parameter\n\n  //      A    as parameter\n\n  //      B    as parameter\n\n  //  Output:   on stack: polycoeff  Contains quotient coefficients\n\n  //-----------------------------------------------------------------------------\n  yydivpoly = function(factpoly_expo, polycoeff, A, B) {\n    var Q, i, o, ref;\n    Q = zero;\n    for (i = o = ref = factpoly_expo; (ref <= 0 ? o < 0 : o > 0); i = ref <= 0 ? ++o : --o) {\n      push(stack[polycoeff + i]);\n      stack[polycoeff + i] = Q;\n      push(A);\n      divide();\n      Q = pop();\n      push(stack[polycoeff + i - 1]);\n      push(Q);\n      push(B);\n      multiply();\n      subtract();\n      stack[polycoeff + i - 1] = pop();\n    }\n    stack[polycoeff + 0] = Q;\n    if (DEBUG) {\n      return console.log(\"yydivpoly Q: \" + Q.toString());\n    }\n  };\n\n  Evalpoly = function(factpoly_expo, polycoeff, evaluateAt) {\n    var i, o, ref;\n    push(zero);\n    for (i = o = ref = factpoly_expo; (ref <= 0 ? o <= 0 : o >= 0); i = ref <= 0 ? ++o : --o) {\n      push(evaluateAt);\n      multiply();\n      push(stack[polycoeff + i]);\n      //if DEBUG\n      //  console.log(\"Evalpoly top of stack:\")\n      //  console.log stack[tos-i].toString()\n      add();\n    }\n    return pop();\n  };\n\n  // Push expression factors onto the stack. For example...\n\n  // Input\n\n  //       2\n  //     3x  + 2x + 1\n\n  // Output on stack\n\n  //     [  3  ]\n  //     [ x^2 ]\n  //     [  2  ]\n  //     [  x  ]\n  //     [  1  ]\n\n  // but not necessarily in that order. Returns the number of factors.\n\n  // Local U *p is OK here because no functional path to garbage collector.\n  factors = function(p) {\n    var h;\n    h = tos;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        push_term_factors(car(p));\n        p = cdr(p);\n      }\n    } else {\n      push_term_factors(p);\n    }\n    return tos - h;\n  };\n\n  // Local U *p is OK here because no functional path to garbage collector.\n  push_term_factors = function(p) {\n    var results;\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        push(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      return push(p);\n    }\n  };\n\n  Eval_filter = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      filter();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  filter = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    filter_main();\n    return restore();\n  };\n\n  filter_main = function() {\n    if (car(p1) === symbol(ADD)) {\n      return filter_sum();\n    } else if (istensor(p1)) {\n      return filter_tensor();\n    } else if (Find(p1, p2)) {\n      return push_integer(0);\n    } else {\n      return push(p1);\n    }\n  };\n\n  filter_sum = function() {\n    var results;\n    push_integer(0);\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      filter();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  filter_tensor = function() {\n    var i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    n = p1.tensor.nelem;\n    p3 = alloc_tensor(n);\n    p3.tensor.ndim = p1.tensor.ndim;\n    for (i = o = 0, ref = p1.tensor.ndim; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      filter();\n      p3.tensor.elem[i] = pop();\n    }\n    return push(p3);\n  };\n\n  Eval_float = function() {\n    evaluatingAsFloats++;\n    push(cadr(p1));\n    Eval();\n    yyfloat();\n    Eval();\n    return evaluatingAsFloats--;\n  };\n\n  checkFloatHasWorkedOutCompletely = function(nodeToCheck) {\n    var numberOfEs, numberOfMults, numberOfPIs, numberOfPowers, numberOfSums;\n    numberOfPowers = countOccurrencesOfSymbol(symbol(POWER), nodeToCheck);\n    numberOfPIs = countOccurrencesOfSymbol(symbol(PI), nodeToCheck);\n    numberOfEs = countOccurrencesOfSymbol(symbol(E), nodeToCheck);\n    numberOfMults = countOccurrencesOfSymbol(symbol(MULTIPLY), nodeToCheck);\n    numberOfSums = countOccurrencesOfSymbol(symbol(ADD), nodeToCheck);\n    if (DEBUG) {\n      console.log(\"     ... numberOfPowers: \" + numberOfPowers);\n      console.log(\"     ... numberOfPIs: \" + numberOfPIs);\n      console.log(\"     ... numberOfEs: \" + numberOfEs);\n      console.log(\"     ... numberOfMults: \" + numberOfMults);\n      console.log(\"     ... numberOfSums: \" + numberOfSums);\n    }\n    if (numberOfPowers > 1 || numberOfPIs > 0 || numberOfEs > 0 || numberOfMults > 1 || numberOfSums > 1) {\n      return stop(\"float: some unevalued parts in \" + nodeToCheck);\n    }\n  };\n\n  zzfloat = function() {\n    save();\n    evaluatingAsFloats++;\n    //p1 = pop()\n    //push(cadr(p1))\n    //push(p1)\n    Eval();\n    yyfloat();\n    Eval();\n    evaluatingAsFloats--;\n    return restore();\n  };\n\n  // zzfloat doesn't necessarily result in a double\n  // , for example if there are variables. But\n  // in many of the tests there should be indeed\n  // a float, this line comes handy to highlight\n  // when that doesn't happen for those tests.\n  //checkFloatHasWorkedOutCompletely(stack[tos-1])\n  yyfloat = function() {\n    var h, i, o, ref;\n    i = 0;\n    h = 0;\n    evaluatingAsFloats++;\n    save();\n    p1 = pop();\n    if (iscons(p1)) {\n      h = tos;\n      while (iscons(p1)) {\n        push(car(p1));\n        yyfloat();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else if (p1.k === TENSOR) {\n      push(p1);\n      copy_tensor();\n      p1 = pop();\n      for (i = o = 0, ref = p1.tensor.nelem; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n        push(p1.tensor.elem[i]);\n        yyfloat();\n        p1.tensor.elem[i] = pop();\n      }\n      push(p1);\n    } else if (p1.k === NUM) {\n      push(p1);\n      bignum_float();\n    } else if (p1 === symbol(PI)) {\n      push_double(Math.PI);\n    } else if (p1 === symbol(E)) {\n      push_double(Math.E);\n    } else {\n      push(p1);\n    }\n    restore();\n    return evaluatingAsFloats--;\n  };\n\n  Eval_floor = function() {\n    push(cadr(p1));\n    Eval();\n    return yfloor();\n  };\n\n  yfloor = function() {\n    save();\n    yyfloor();\n    return restore();\n  };\n\n  yyfloor = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (!isNumericAtom(p1)) {\n      push_symbol(FLOOR);\n      push(p1);\n      list(2);\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.floor(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mdiv(p1.q.a, p1.q.b);\n    p3.q.b = mint(1);\n    push(p3);\n    if (isnegativenumber(p1)) {\n      push_integer(-1);\n      return add();\n    }\n  };\n\n  // 'for' function\n  /*\n  x=0\n  y=2\n  for(do(x=sqrt(2+x),y=2*y/x),k,1,9)\n  float(y)\n\n  X: k\n  B: 1...9\n\n  1st parameter is the body\n  2nd parameter is the variable to loop with\n  3rd and 4th are the limits\n\n  */\n  //define A p3\n  //define B p4\n  //define I p5\n  //define X p6\n  Eval_for = function() {\n    var i, j, k, loopingVariable, o, ref, ref1;\n    i = 0;\n    j = 0;\n    k = 0;\n    loopingVariable = caddr(p1);\n    if (!issymbol(loopingVariable)) {\n      stop(\"for: 2nd arg should be the variable to loop over\");\n    }\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n    // remember contents of the index\n    // variable so we can put it back after the loop\n    p4 = get_binding(loopingVariable);\n    for (i = o = ref = j, ref1 = k; (ref <= ref1 ? o <= ref1 : o >= ref1); i = ref <= ref1 ? ++o : --o) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(loopingVariable, p5);\n      push(cadr(p1));\n      Eval();\n      pop();\n    }\n    // put back the index variable to original content\n    set_binding(loopingVariable, p4);\n    // return value\n    return push_symbol(NIL);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Author : philippe.billet@noos.fr\n\n  //  Gamma function gamma(x)\n\n  //-----------------------------------------------------------------------------\n  Eval_gamma = function() {\n    push(cadr(p1));\n    Eval();\n    return gamma();\n  };\n\n  gamma = function() {\n    save();\n    gammaf();\n    return restore();\n  };\n\n  gammaf = function() {\n    //  double d\n    p1 = pop();\n    if (isrational(p1) && MEQUAL(p1.q.a, 1) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push_rational(1, 2);\n      power();\n      return;\n    }\n    if (isrational(p1) && MEQUAL(p1.q.a, 3) && MEQUAL(p1.q.b, 2)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push_rational(1, 2);\n      power();\n      push_rational(1, 2);\n      multiply();\n      return;\n    }\n    \n    //  if (p1->k == DOUBLE) {\n    //    d = exp(lgamma(p1.d))\n    //    push_double(d)\n    //    return\n    //  }\n    if (isnegativeterm(p1)) {\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push_integer(-1);\n      multiply();\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      push(p1);\n      multiply();\n      sine();\n      push(p1);\n      multiply();\n      push(p1);\n      negate();\n      gamma();\n      multiply();\n      divide();\n      return;\n    }\n    if (car(p1) === symbol(ADD)) {\n      gamma_of_sum();\n      return;\n    }\n    push_symbol(GAMMA);\n    push(p1);\n    list(2);\n  };\n\n  gamma_of_sum = function() {\n    p3 = cdr(p1);\n    if (isrational(car(p3)) && MEQUAL(car(p3).q.a, 1) && MEQUAL(car(p3).q.b, 1)) {\n      push(cadr(p3));\n      push(cadr(p3));\n      gamma();\n      return multiply();\n    } else {\n      if (isrational(car(p3)) && MEQUAL(car(p3).q.a, -1) && MEQUAL(car(p3).q.b, 1)) {\n        push(cadr(p3));\n        gamma();\n        push(cadr(p3));\n        push_integer(-1);\n        add();\n        return divide();\n      } else {\n        push_symbol(GAMMA);\n        push(p1);\n        list(2);\n      }\n    }\n  };\n\n  // Greatest common denominator\n  // can also be run on polynomials, however\n  // it works only on the integers and it works\n  // by factoring the polynomials (not Euclidean algorithm)\n  Eval_gcd = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      gcd();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  gcd = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    gcd_main();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  gcd_main = function() {\n    var polyVar;\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n    if (DEBUG) {\n      console.log(\"gcd_main: p1: \" + p1 + \" p2: \" + p2);\n    }\n    if (equal(p1, p2)) {\n      push(p1);\n      return;\n    }\n    if (isrational(p1) && isrational(p2)) {\n      push(p1);\n      push(p2);\n      gcd_numbers();\n      return;\n    }\n    if ((polyVar = areunivarpolysfactoredorexpandedform(p1, p2))) {\n      gcd_polys(polyVar);\n      return;\n    }\n    if (car(p1) === symbol(ADD) && car(p2) === symbol(ADD)) {\n      gcd_sum_sum();\n      return;\n    }\n    if (car(p1) === symbol(ADD)) {\n      gcd_sum(p1);\n      p1 = pop();\n    }\n    if (car(p2) === symbol(ADD)) {\n      gcd_sum(p2);\n      p2 = pop();\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      gcd_sum_product();\n      return;\n    }\n    if (car(p2) === symbol(MULTIPLY)) {\n      gcd_product_sum();\n      return;\n    }\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n    return gcd_powers_with_same_base();\n  };\n\n  areunivarpolysfactoredorexpandedform = function(p1, p2) {\n    var polyVar;\n    if (DEBUG) {\n      console.log(\"areunivarpolysfactoredorexpandedform: p1: \" + p1 + \" p2: \" + p2);\n    }\n    if (polyVar = isunivarpolyfactoredorexpandedform(p1)) {\n      if (isunivarpolyfactoredorexpandedform(p2, polyVar)) {\n        return polyVar;\n      }\n    }\n    return false;\n  };\n\n  gcd_polys = function(polyVar) {\n    if (DEBUG) {\n      console.log(\"gcd_polys: p1: \" + p1 + \" polyVar: \" + polyVar);\n    }\n    // gcd of factors\n    push(p1);\n    push(polyVar);\n    factorpoly();\n    p1 = pop();\n    push(p2);\n    push(polyVar);\n    factorpoly();\n    p2 = pop();\n    if (DEBUG) {\n      console.log(\"GCD: factored polys:\");\n    }\n    if (DEBUG) {\n      console.log(\"  p1:\" + p1.toString());\n    }\n    if (DEBUG) {\n      console.log(\"  p2:\" + p2.toString());\n    }\n    // In case one of two polynomials can be factored,\n    // (and only in that case), then\n    // we'll need to run gcd_factors on the two polynomials.\n    // (In case neither of them can be factored there is no gcd).\n    // However, gcd_factors expects two _products_ , and\n    // in case _one_ of the polynomials can't be factored it will look\n    // like a sum instead of a product.\n    // So, we'll have to make that sum to look like a factor:\n    // let's just turn it into a product with 1.\n\n    // in case one of the two polys has been factored...\n    if (car(p1) === symbol(MULTIPLY) || car(p2) === symbol(MULTIPLY)) {\n      // then make sure that if one of them is a single\n      // factor, we take the sum and wrap it into a\n      // multiplication by 1\n      if (car(p1) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push(one);\n        list(3);\n        p1 = pop();\n      }\n      if (car(p2) !== symbol(MULTIPLY)) {\n        push_symbol(MULTIPLY);\n        push(p2);\n        push(one);\n        list(3);\n        p2 = pop();\n      }\n    }\n    if (car(p1) === symbol(MULTIPLY) && car(p2) === symbol(MULTIPLY)) {\n      gcd_product_product();\n      return;\n    }\n    gcd_powers_with_same_base();\n    return true;\n  };\n\n  gcd_product_product = function() {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n    while (iscons(p3)) {\n      p4 = cdr(p2);\n      while (iscons(p4)) {\n        push(car(p3));\n        push(car(p4));\n        gcd();\n        multiply();\n        p4 = cdr(p4);\n      }\n      results.push(p3 = cdr(p3));\n    }\n    return results;\n  };\n\n  gcd_powers_with_same_base = function() {\n    if (car(p1) === symbol(POWER)) {\n      p3 = caddr(p1); // exponent\n      p1 = cadr(p1); // base\n    } else {\n      p3 = one;\n    }\n    if (car(p2) === symbol(POWER)) {\n      p4 = caddr(p2); // exponent\n      p2 = cadr(p2); // base\n    } else {\n      p4 = one;\n    }\n    if (!equal(p1, p2)) {\n      push(one);\n      return;\n    }\n    // are both exponents numerical?\n    if (isNumericAtom(p3) && isNumericAtom(p4)) {\n      push(p1);\n      if (lessp(p3, p4)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n      power();\n      return;\n    }\n    // are the exponents multiples of eah other?\n    push(p3);\n    push(p4);\n    divide();\n    p5 = pop();\n    if (isNumericAtom(p5)) {\n      push(p1);\n      // choose the smallest exponent\n      if (car(p3) === symbol(MULTIPLY) && isNumericAtom(cadr(p3))) {\n        p5 = cadr(p3);\n      } else {\n        p5 = one;\n      }\n      if (car(p4) === symbol(MULTIPLY) && isNumericAtom(cadr(p4))) {\n        p6 = cadr(p4);\n      } else {\n        p6 = one;\n      }\n      if (lessp(p5, p6)) {\n        push(p3);\n      } else {\n        push(p4);\n      }\n      power();\n      return;\n    }\n    push(p3);\n    push(p4);\n    subtract();\n    p5 = pop();\n    if (!isNumericAtom(p5)) {\n      push(one);\n      return;\n    }\n    // can't be equal because of test near beginning\n    push(p1);\n    if (isnegativenumber(p5)) {\n      push(p3);\n    } else {\n      push(p4);\n    }\n    return power();\n  };\n\n  // in this case gcd is used as a composite function, i.e. gcd(gcd(gcd...\n  gcd_sum_sum = function() {\n    if (length(p1) !== length(p2)) {\n      push(one);\n      return;\n    }\n    p3 = cdr(p1);\n    push(car(p3));\n    p3 = cdr(p3);\n    while (iscons(p3)) {\n      push(car(p3));\n      gcd();\n      p3 = cdr(p3);\n    }\n    p3 = pop();\n    p4 = cdr(p2);\n    push(car(p4));\n    p4 = cdr(p4);\n    while (iscons(p4)) {\n      push(car(p4));\n      gcd();\n      p4 = cdr(p4);\n    }\n    p4 = pop();\n    push(p1);\n    push(p3);\n    divide();\n    p5 = pop();\n    push(p2);\n    push(p4);\n    divide();\n    p6 = pop();\n    if (equal(p5, p6)) {\n      push(p5);\n      push(p3);\n      push(p4);\n      gcd();\n      return multiply();\n    } else {\n      return push(one);\n    }\n  };\n\n  gcd_sum = function(p) {\n    var results;\n    p = cdr(p);\n    push(car(p));\n    p = cdr(p);\n    results = [];\n    while (iscons(p)) {\n      push(car(p));\n      gcd();\n      results.push(p = cdr(p));\n    }\n    return results;\n  };\n\n  gcd_sum_product = function() {\n    var results;\n    push(one);\n    p3 = cdr(p1);\n    results = [];\n    while (iscons(p3)) {\n      push(car(p3));\n      push(p2);\n      gcd();\n      multiply();\n      results.push(p3 = cdr(p3));\n    }\n    return results;\n  };\n\n  gcd_product_sum = function() {\n    var results;\n    push(one);\n    p4 = cdr(p2);\n    results = [];\n    while (iscons(p4)) {\n      push(p1);\n      push(car(p4));\n      gcd();\n      multiply();\n      results.push(p4 = cdr(p4));\n    }\n    return results;\n  };\n\n  // Guess which symbol to use for derivative, integral, etc.\n  guess = function() {\n    var p;\n    p = pop();\n    push(p);\n    if (Find(p, symbol(SYMBOL_X))) {\n      return push_symbol(SYMBOL_X);\n    } else if (Find(p, symbol(SYMBOL_Y))) {\n      return push_symbol(SYMBOL_Y);\n    } else if (Find(p, symbol(SYMBOL_Z))) {\n      return push_symbol(SYMBOL_Z);\n    } else if (Find(p, symbol(SYMBOL_T))) {\n      return push_symbol(SYMBOL_T);\n    } else if (Find(p, symbol(SYMBOL_S))) {\n      return push_symbol(SYMBOL_S);\n    } else {\n      return push_symbol(SYMBOL_X);\n    }\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Hermite polynomial\n\n  //  Input:    tos-2    x  (can be a symbol or expr)\n\n  //      tos-1    n\n\n  //  Output:    Result on stack\n\n  //-----------------------------------------------------------------------------\n  hermite = function() {\n    save();\n    yyhermite();\n    return restore();\n  };\n\n  // uses the recurrence relation H(x,n+1)=2*x*H(x,n)-2*n*H(x,n-1)\n\n  //define X p1\n  //define N p2\n  //define Y p3\n  //define Y1 p4\n  //define Y0 p5\n  yyhermite = function() {\n    var n;\n    n = 0;\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push_symbol(HERMITE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    if (issymbol(p1)) {\n      return yyhermite2(n);\n    } else {\n      p3 = p1;\n      p1 = symbol(SECRETX);\n      yyhermite2(n);\n      p1 = p3;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      return Eval();\n    }\n  };\n\n  yyhermite2 = function(n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p4 = pop();\n    results = [];\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p5 = p4;\n      p4 = pop();\n      push(p1);\n      push(p4);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(2);\n      results.push(multiply());\n    }\n    return results;\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Create a Hilbert matrix\n\n  //  Input:    Dimension on stack\n\n  //  Output:    Hilbert matrix on stack\n\n  //  Example:\n\n  //  > hilbert(5)\n  //  ((1,1/2,1/3,1/4),(1/2,1/3,1/4,1/5),(1/3,1/4,1/5,1/6),(1/4,1/5,1/6,1/7))\n\n  //-----------------------------------------------------------------------------\n\n  //define A p1\n  //define N p2\n\n  //define AELEM(i, j) A->u.tensor->elem[i * n + j]\n  hilbert = function() {\n    var i, i1, j, n, o, ref, ref1;\n    i = 0;\n    j = 0;\n    n = 0;\n    save();\n    p2 = pop();\n    push(p2);\n    n = pop_integer();\n    if (n < 2) {\n      push_symbol(HILBERT);\n      push(p2);\n      list(2);\n      restore();\n      return;\n    }\n    push_zero_matrix(n, n);\n    p1 = pop();\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        push_integer(i + j + 1);\n        inverse();\n        p1.tensor.elem[i * n + j] = pop();\n      }\n    }\n    push(p1);\n    return restore();\n  };\n\n  DEBUG_IMAG = false;\n\n  Eval_imag = function() {\n    push(cadr(p1));\n    Eval();\n    return imag();\n  };\n\n  imag = function() {\n    save();\n    rect();\n    p1 = pop();\n    if (DEBUG_IMAG) {\n      console.log(\"IMAGE of \" + p1);\n    }\n    push(p1);\n    push(p1);\n    conjugate();\n    if (DEBUG_IMAG) {\n      console.log(\" image: conjugate result: \" + stack[tos - 1]);\n    }\n    subtract();\n    push_integer(2);\n    divide();\n    if (DEBUG_IMAG) {\n      console.log(\" image: 1st divide result: \" + stack[tos - 1]);\n    }\n    push(imaginaryunit);\n    divide();\n    if (DEBUG_IMAG) {\n      console.log(\" image: 2nd divide result: \" + stack[tos - 1]);\n    }\n    return restore();\n  };\n\n  // n is the total number of things on the stack. The first thing on the stack\n  // is the object to be indexed, followed by the indices themselves.\n\n  // called by Eval_index\n  index_function = function(n) {\n    var i, i1, j1, k, l1, m, m1, ndim, nelem, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    save();\n    s = tos - n;\n    p1 = stack[s];\n    ndim = p1.tensor.ndim;\n    m = n - 1;\n    if (m > ndim) {\n      stop(\"too many indices for tensor\");\n    }\n    k = 0;\n    for (i = o = 0, ref = m; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 1]);\n      t = pop_integer();\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"index out of range\");\n      }\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n    if (ndim === m) {\n      moveTos(tos - n);\n      push(p1.tensor.elem[k]);\n      restore();\n      return;\n    }\n    for (i = i1 = ref1 = m, ref2 = ndim; (ref1 <= ref2 ? i1 < ref2 : i1 > ref2); i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    }\n    nelem = 1;\n    for (i = j1 = ref3 = m, ref4 = ndim; (ref3 <= ref4 ? j1 < ref4 : j1 > ref4); i = ref3 <= ref4 ? ++j1 : --j1) {\n      nelem *= p1.tensor.dim[i];\n    }\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim - m;\n    for (i = l1 = ref5 = m, ref6 = ndim; (ref5 <= ref6 ? l1 < ref6 : l1 > ref6); i = ref5 <= ref6 ? ++l1 : --l1) {\n      p2.tensor.dim[i - m] = p1.tensor.dim[i];\n    }\n    for (i = m1 = 0, ref7 = nelem; (0 <= ref7 ? m1 < ref7 : m1 > ref7); i = 0 <= ref7 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[k + i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    n    Number of args on stack\n\n  //      tos-n    Right-hand value\n\n  //      tos-n+1    Left-hand value\n\n  //      tos-n+2    First index\n\n  //      .\n  //      .\n  //      .\n\n  //      tos-1    Last index\n\n  //  Output:    Result on stack\n\n  //-----------------------------------------------------------------------------\n\n  //define LVALUE p1\n  //define RVALUE p2\n  //define TMP p3\n  set_component = function(n) {\n    var i, i1, j1, k, l1, m, m1, n1, ndim, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, s, t;\n    i = 0;\n    k = 0;\n    m = 0;\n    ndim = 0;\n    t = 0;\n    save();\n    if (n < 3) {\n      stop(\"error in indexed assign\");\n    }\n    s = tos - n;\n    p2 = stack[s];\n    p1 = stack[s + 1];\n    if (!istensor(p1)) { // p1 is LVALUE\n      stop(\"error in indexed assign: assigning to something that is not a tensor\");\n    }\n    ndim = p1.tensor.ndim;\n    m = n - 2;\n    if (m > ndim) {\n      stop(\"error in indexed assign\");\n    }\n    k = 0;\n    for (i = o = 0, ref = m; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      push(stack[s + i + 2]);\n      t = pop_integer();\n      if (t < 1 || t > p1.tensor.dim[i]) {\n        stop(\"error in indexed assign\\n\");\n      }\n      k = k * p1.tensor.dim[i] + t - 1;\n    }\n    for (i = i1 = ref1 = m, ref2 = ndim; (ref1 <= ref2 ? i1 < ref2 : i1 > ref2); i = ref1 <= ref2 ? ++i1 : --i1) {\n      k = k * p1.tensor.dim[i] + 0;\n    }\n    // copy\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n    for (i = j1 = 0, ref3 = p1.tensor.ndim; (0 <= ref3 ? j1 < ref3 : j1 > ref3); i = 0 <= ref3 ? ++j1 : --j1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = l1 = 0, ref4 = p1.tensor.nelem; (0 <= ref4 ? l1 < ref4 : l1 > ref4); i = 0 <= ref4 ? ++l1 : --l1) {\n      p3.tensor.elem[i] = p1.tensor.elem[i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p3);\n    p1 = p3;\n    if (ndim === m) {\n      if (istensor(p2)) { // p2 is RVALUE\n        stop(\"error in indexed assign\");\n      }\n      p1.tensor.elem[k] = p2;\n      check_tensor_dimensions(p1);\n      moveTos(tos - n);\n      push(p1);\n      restore();\n      return;\n    }\n    if (!istensor(p2)) { // p2 is RVALUE\n      stop(\"error in indexed assign\");\n    }\n    if (ndim - m !== p2.tensor.ndim) { // p2 is RVALUE\n      stop(\"error in indexed assign\");\n    }\n// p2 is RVALUE\n    for (i = m1 = 0, ref5 = p2.tensor.ndim; (0 <= ref5 ? m1 < ref5 : m1 > ref5); i = 0 <= ref5 ? ++m1 : --m1) {\n      if (p1.tensor.dim[m + i] !== p2.tensor.dim[i]) {\n        stop(\"error in indexed assign\");\n      }\n    }\n// p2 is RVALUE\n// copy rvalue\n    for (i = n1 = 0, ref6 = p2.tensor.nelem; (0 <= ref6 ? n1 < ref6 : n1 > ref6); i = 0 <= ref6 ? ++n1 : --n1) {\n      p1.tensor.elem[k + i] = p2.tensor.elem[i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p1);\n    return restore();\n  };\n\n  Eval_inner = function() {\n    var difference, i, i1, j1, l1, moretheArguments, o, operands, ref, ref1, ref2, ref3, refinedOperands, results, secondArgument, shift, theArguments;\n    \n    // if there are more than two arguments then\n    // reduce it to a more standard version\n    // of two arguments, which means we need to\n    // transform the arguments into a tree of\n    // inner products e.g.\n    // inner(a,b,c) becomes inner(a,inner(b,c))\n    // this is so we can get to a standard binary-tree\n    // version that is simpler to manipulate.\n    theArguments = [];\n    theArguments.push(car(cdr(p1)));\n    secondArgument = car(cdr(cdr(p1)));\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n    moretheArguments = cdr(cdr(p1));\n    while (moretheArguments !== symbol(NIL)) {\n      theArguments.push(car(moretheArguments));\n      moretheArguments = cdr(moretheArguments);\n    }\n    // make it so e.g. inner(a,b,c) becomes inner(a,inner(b,c))\n    if (theArguments.length > 2) {\n      push_symbol(INNER);\n      push(theArguments[theArguments.length - 2]);\n      push(theArguments[theArguments.length - 1]);\n      list(3);\n      for (i = o = 2, ref = theArguments.length; (2 <= ref ? o < ref : o > ref); i = 2 <= ref ? ++o : --o) {\n        push_symbol(INNER);\n        swap();\n        push(theArguments[theArguments.length - i - 1]);\n        swap();\n        list(3);\n      }\n      p1 = pop();\n      Eval_inner();\n      return;\n    }\n    // TODO we have to take a look at the whole\n    // sequence of operands and make simplifications\n    // on that...\n    operands = [];\n    get_innerprod_factors(p1, operands);\n    //console.log \"printing operands --------\"\n    //for i in [0...operands.length]\n    //  console.log \"operand \" + i + \" : \" + operands[i]\n    refinedOperands = [];\n// removing all identity matrices\n    for (i = i1 = 0, ref1 = operands.length; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      if (operands[i] === symbol(SYMBOL_IDENTITY_MATRIX)) {\n        continue;\n      } else {\n        refinedOperands.push(operands[i]);\n      }\n    }\n    operands = refinedOperands;\n    refinedOperands = [];\n    if (operands.length > 1) {\n      // removing all consecutive pairs of inverses\n      // so we can answer that inv(a)·a results in the\n      // identity matrix. We want to catch symbolic inverses\n      // not numeric inverses, those will just take care\n      // of themselves when multiplied\n      shift = 0;\n      for (i = j1 = 0, ref2 = operands.length; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n        //console.log \"comparing if \" + operands[i+shift] + \" and \" + operands[i+shift+1] + \" are inverses of each other\"\n        if ((i + shift + 1) <= (operands.length - 1)) {\n          if (!(isNumericAtomOrTensor(operands[i + shift]) || isNumericAtomOrTensor(operands[i + shift + 1]))) {\n            push(operands[i + shift]);\n            Eval();\n            inv();\n            push(operands[i + shift + 1]);\n            Eval();\n            subtract();\n            difference = pop();\n            //console.log \"result: \" + difference\n            if (isZeroAtomOrTensor(difference)) {\n              shift += 1;\n            } else {\n              refinedOperands.push(operands[i + shift]);\n            }\n          } else {\n            refinedOperands.push(operands[i + shift]);\n          }\n        } else {\n          break;\n        }\n        //console.log \"i: \" + i + \" shift: \" + shift + \" operands.length: \" + operands.length\n        if (i + shift === operands.length - 2) {\n          //console.log \"adding last operand 2 \"\n          refinedOperands.push(operands[operands.length - 1]);\n        }\n        if (i + shift >= operands.length - 1) {\n          break;\n        }\n      }\n      operands = refinedOperands;\n    }\n    //console.log \"refined operands --------\"\n    //for i in [0...refinedOperands.length]\n    //  console.log \"refined operand \" + i + \" : \" + refinedOperands[i]\n\n    //console.log \"stack[tos-1]: \" + stack[tos-1]\n\n    // now rebuild the arguments, just using the\n    // refined operands\n    push(symbol(INNER));\n    //console.log \"rebuilding the argument ----\"\n    if (operands.length > 0) {\n      for (i = l1 = 0, ref3 = operands.length; (0 <= ref3 ? l1 < ref3 : l1 > ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n        //console.log \"pushing \" + operands[i]\n        push(operands[i]);\n      }\n    } else {\n      pop();\n      push(symbol(SYMBOL_IDENTITY_MATRIX));\n      return;\n    }\n    //console.log \"list(operands.length): \" + (operands.length+1)\n    list(operands.length + 1);\n    p1 = pop();\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      inner();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  // inner definition\n  inner = function() {\n    var arg1, arg2, arg3, subtractionResult;\n    save();\n    p2 = pop();\n    p1 = pop();\n    // more in general, when a and b are scalars,\n    // inner(a*M1, b*M2) is equal to\n    // a*b*inner(M1,M2), but of course we can only\n    // \"bring out\" in a and b the scalars, because\n    // it's the only commutative part.\n    // that's going to be trickier to do in general\n    // but let's start with just the signs.\n    if (isnegativeterm(p2) && isnegativeterm(p1)) {\n      push(p2);\n      negate();\n      p2 = pop();\n      push(p1);\n      negate();\n      p1 = pop();\n    }\n    // since inner is associative,\n    // put it in a canonical form i.e.\n    // inner(inner(a,b),c) ->\n    // inner(a,inner(b,c))\n    // so that we can recognise when they\n    // are equal.\n    if (isinnerordot(p1)) {\n      arg1 = car(cdr(p1)); //a\n      arg2 = car(cdr(cdr(p1))); //b\n      arg3 = p2;\n      p1 = arg1;\n      push(arg2);\n      push(arg3);\n      inner();\n      p2 = pop();\n    }\n    // Check if one of the operands is the identity matrix\n    // we could maybe use Eval_testeq here but\n    // this seems to suffice?\n    if (p1 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p2);\n      restore();\n      return;\n    } else if (p2 === symbol(SYMBOL_IDENTITY_MATRIX)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if (istensor(p1) && istensor(p2)) {\n      inner_f();\n    } else {\n      if (!(isNumericAtomOrTensor(p1) || isNumericAtomOrTensor(p2))) {\n        push(p1);\n        push(p2);\n        inv();\n        subtract();\n        subtractionResult = pop();\n        if (isZeroAtomOrTensor(subtractionResult)) {\n          push_symbol(SYMBOL_IDENTITY_MATRIX);\n          restore();\n          return;\n        }\n      }\n      // if either operand is a sum then distribute\n      // (if we are in expanding mode)\n      if (expanding && isadd(p1)) {\n        p1 = cdr(p1);\n        push(zero);\n        while (iscons(p1)) {\n          push(car(p1));\n          push(p2);\n          inner();\n          add();\n          p1 = cdr(p1);\n        }\n        restore();\n        return;\n      }\n      if (expanding && isadd(p2)) {\n        p2 = cdr(p2);\n        push(zero);\n        while (iscons(p2)) {\n          push(p1);\n          push(car(p2));\n          inner();\n          add();\n          p2 = cdr(p2);\n        }\n        restore();\n        return;\n      }\n      push(p1);\n      push(p2);\n      // there are 8 remaining cases here, since each of the\n      // two arguments can only be a scalar/tensor/unknown\n      // and the tensor - tensor case was caught\n      // upper in the code\n      if (istensor(p1) && isNumericAtom(p2)) {\n        // one case covered by this branch:\n        //   tensor - scalar\n        tensor_times_scalar();\n      } else if (isNumericAtom(p1) && istensor(p2)) {\n        // one case covered by this branch:\n        //   scalar - tensor\n        scalar_times_tensor();\n      } else {\n        if (isNumericAtom(p1) || isNumericAtom(p2)) {\n          // three cases covered by this branch:\n          //   unknown - scalar\n          //   scalar - unknown\n          //   scalar  - scalar\n          // in these cases a normal multiplication\n          // will be OK\n          multiply();\n        } else {\n          // three cases covered by this branch:\n          //   unknown - unknown\n          //   unknown - tensor\n          //   tensor  - unknown\n          // in this case we can't use normal\n          // multiplication.\n          pop();\n          pop();\n          push_symbol(INNER);\n          push(p1);\n          push(p2);\n          list(3);\n          restore();\n          return;\n        }\n      }\n    }\n    return restore();\n  };\n\n  // inner product of tensors p1 and p2\n  inner_f = function() {\n    var a, ak, b, bk, c, i, i1, j, j1, k, l1, m1, n, n1, ndim, o, o1, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    n = p1.tensor.dim[p1.tensor.ndim - 1];\n    if (n !== p2.tensor.dim[0]) {\n      debugger;\n      stop(\"inner: tensor dimension check\");\n    }\n    ndim = p1.tensor.ndim + p2.tensor.ndim - 2;\n    if (ndim > MAXDIM) {\n      stop(\"inner: rank of result exceeds maximum\");\n    }\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    //---------------------------------------------------------------------\n\n    //  ak is the number of rows in tensor A\n\n    //  bk is the number of columns in tensor B\n\n    //  Example:\n\n    //  A[3][3][4] B[4][4][3]\n\n    //    3  3        ak = 3 * 3 = 9\n\n    //                  4  3    bk = 4 * 3 = 12\n\n    //---------------------------------------------------------------------\n    ak = 1;\n    for (i = o = 0, ref = p1.tensor.ndim - 1; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      ak *= p1.tensor.dim[i];\n    }\n    bk = 1;\n    for (i = i1 = 1, ref1 = p2.tensor.ndim; (1 <= ref1 ? i1 < ref1 : i1 > ref1); i = 1 <= ref1 ? ++i1 : --i1) {\n      bk *= p2.tensor.dim[i];\n    }\n    p3 = alloc_tensor(ak * bk);\n    c = p3.tensor.elem;\n// new method copied from ginac http://www.ginac.de/\n    for (i = j1 = 0, ref2 = ak; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      for (j = l1 = 0, ref3 = n; (0 <= ref3 ? l1 < ref3 : l1 > ref3); j = 0 <= ref3 ? ++l1 : --l1) {\n        if (isZeroAtomOrTensor(a[i * n + j])) {\n          continue;\n        }\n        for (k = m1 = 0, ref4 = bk; (0 <= ref4 ? m1 < ref4 : m1 > ref4); k = 0 <= ref4 ? ++m1 : --m1) {\n          push(a[i * n + j]);\n          push(b[j * bk + k]);\n          multiply();\n          push(c[i * bk + k]);\n          add();\n          c[i * bk + k] = pop();\n        }\n      }\n    }\n    //---------------------------------------------------------------------\n\n    //  Note on understanding \"k * bk + j\"\n\n    //  k * bk because each element of a column is bk locations apart\n\n    //  + j because the beginnings of all columns are in the first bk \n    //  locations\n\n    //  Example: n = 2, bk = 6\n\n    //  b111  <- 1st element of 1st column\n    //  b112  <- 1st element of 2nd column\n    //  b113  <- 1st element of 3rd column\n    //  b121  <- 1st element of 4th column\n    //  b122  <- 1st element of 5th column\n    //  b123  <- 1st element of 6th column\n\n    //  b211  <- 2nd element of 1st column\n    //  b212  <- 2nd element of 2nd column\n    //  b213  <- 2nd element of 3rd column\n    //  b221  <- 2nd element of 4th column\n    //  b222  <- 2nd element of 5th column\n    //  b223  <- 2nd element of 6th column\n\n    //---------------------------------------------------------------------\n    if (ndim === 0) {\n      return push(p3.tensor.elem[0]);\n    } else {\n      p3.tensor.ndim = ndim;\n      j = 0;\n      for (i = n1 = 0, ref5 = p1.tensor.ndim - 1; (0 <= ref5 ? n1 < ref5 : n1 > ref5); i = 0 <= ref5 ? ++n1 : --n1) {\n        p3.tensor.dim[i] = p1.tensor.dim[i];\n      }\n      j = p1.tensor.ndim - 1;\n      for (i = o1 = 0, ref6 = p2.tensor.ndim - 1; (0 <= ref6 ? o1 < ref6 : o1 > ref6); i = 0 <= ref6 ? ++o1 : --o1) {\n        p3.tensor.dim[j + i] = p2.tensor.dim[i + 1];\n      }\n      return push(p3);\n    }\n  };\n\n  // Algebrite.run('c·(b+a)ᵀ·inv((a+b)ᵀ)·d').toString();\n  // Algebrite.run('c*(b+a)ᵀ·inv((a+b)ᵀ)·d').toString();\n  // Algebrite.run('(c·(b+a)ᵀ)·(inv((a+b)ᵀ)·d)').toString();\n  get_innerprod_factors = function(tree, factors_accumulator) {\n    if (!iscons(tree)) {\n      add_factor_to_accumulator(tree, factors_accumulator);\n      return;\n    }\n    if (cdr(tree) === symbol(NIL)) {\n      tree = get_innerprod_factors(car(tree), factors_accumulator);\n      return;\n    }\n    if (isinnerordot(tree)) {\n      // console.log \"there is inner at top, recursing on the operands\"\n      get_innerprod_factors(car(cdr(tree)), factors_accumulator);\n      get_innerprod_factors(cdr(cdr(tree)), factors_accumulator);\n      return;\n    }\n    return add_factor_to_accumulator(tree, factors_accumulator);\n  };\n\n  add_factor_to_accumulator = function(tree, factors_accumulator) {\n    if (tree !== symbol(NIL)) {\n      // console.log \">> adding to factors_accumulator: \" + tree\n      return factors_accumulator.push(tree);\n    }\n  };\n\n  itab = [\n    // 1\n    \"f(a,a*x)\",\n    // 9 (need a caveat for 7 so we can put 9 after 7)\n    \"f(1/x,log(x))\",\n    // 7\n    \"f(x^a,x^(a+1)/(a+1))\",\n    // five specialisations of case 7 for speed.\n    // Covers often-occurring exponents: each of\n    // these case ends up in a dedicated entry, so we\n    // only have to do one sure-shot match.\n    \"f(x^(-2),-x^(-1))\",\n    \"f(x^(-1/2),2*x^(1/2))\",\n    \"f(x^(1/2),2/3*x^(3/2))\",\n    \"f(x,x^2/2)\",\n    \"f(x^2,x^3/3)\",\n    // 12\n    \"f(exp(a*x),1/a*exp(a*x))\",\n    \"f(exp(a*x+b),1/a*exp(a*x+b))\",\n    \"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\",\n    \"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\",\n    // 14\n    \"f(log(a*x),x*log(a*x)-x)\",\n    // 15\n    \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\",\n    // 16\n    \"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\",\n    // 17\n    \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\",\n    // 19\n    \"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\",\n    // 20\n    \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\",\n    // 27\n    \"f(1/(a+b*x),1/b*log(a+b*x))\",\n    // 28\n    \"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\",\n    // 29\n    \"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\",\n    // 30\n    \"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\",\n    // 31\n    \"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\",\n    // 33\n    \"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\",\n    // 34\n    \"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\",\n    // 35\n    \"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\",\n    // 37\n    \"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\",\n    // 38\n    \"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\",\n    // 39\n    \"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\",\n    // 40\n    \"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\",\n    // 41\n    \"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\",\n    // 42\n    \"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\",\n    // 60\n    \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\",\n    // 61\n    \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\",\n    // 62 is the same as 60\n    // 63\n    \"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\",\n    //64\n    \"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\",\n    //65\n    \"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\",\n    //66 is covered by 61\n    //70\n    \"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\",\n    //71\n    \"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\",\n    //74\n    \"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\",\n    //76\n    \"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\",\n    // float(defint(1/(2+3*X^4),X,0,pi)) gave wrong result.\n    // Also, the tests related to the indefinite integral\n    // fail since we rationalise expressions \"better\", so I'm thinking\n    // to take this out completely as it seemed to give the\n    // wrong results in the first place.\n    //77\n    //\"f(1/(a+b*x^4),1/2*1/a*(a/b/4)^(1/4)*(1/2*log((x^2+2*(a/b/4)^(1/4)*x+2*(a/b/4)^(1/2))/(x^2-2*(a/b/4)^(1/4)*x+2*(a/b/4)^(1/2)))+arctan(2*(a/b/4)^(1/4)*x/(2*(a/b/4)^(1/2)-x^2))),or(not(number(a*b)),a*b>0))\",\n    //78\n    //\"f(1/(a+b*x^4),1/2*(-a/b)^(1/4)/a*(1/2*log((x+(-a/b)^(1/4))/(x-(-a/b)^(1/4)))+arctan(x*(-a/b)^(-1/4))),or(not(number(a*b)),a*b<0))\",\n    //79\n    \"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\",\n    //80\n    \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\",\n    // float(defint(X^2/(2+3*X^4),X,0,pi)) gave wrong result.\n    // Also, the tests related to the indefinite integral\n    // fail since we rationalise expressions \"better\", so I'm thinking\n    // to take this out completely as it seemed to give the\n    // wrong results in the first place.\n    //81\n    //\"f(x^2/(a+b*x^4),1/4*1/b*(a/b/4)^(-1/4)*(1/2*log((x^2-2*(a/b/4)^(1/4)*x+2*sqrt(a/b/4))/(x^2+2*(a/b/4)^(1/4)*x+2*sqrt(a/b/4)))+arctan(2*(a/b/4)^(1/4)*x/(2*sqrt(a/b/4)-x^2))),or(not(number(a*b)),a*b>0))\",\n    //82\n    //\"f(x^2/(a+b*x^4),1/4*1/b*(-a/b)^(-1/4)*(log((x-(-a/b)^(1/4))/(x+(-a/b)^(1/4)))+2*arctan(x*(-a/b)^(-1/4))),or(not(number(a*b)),a*b<0))\",\n    //83\n    \"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\",\n    //124\n    \"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\",\n    //125\n    \"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\",\n    //126\n    \"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\",\n    //128\n    \"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\",\n    //129\n    \"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\",\n    //131\n    \"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\",\n    //132\n    \"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\",\n    //133\n    \"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\",\n    //135\n    \"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\",\n    //136\n    \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\",\n    //137\n    \"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\",\n    //156\n    \"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\",\n    //157\n    \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\",\n    //158\n    \"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\",\n    //159\n    \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\",\n    //160\n    \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\",\n    //161\n    \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\",\n    //162\n    \"f(x/sqrt(x^2+a),sqrt(x^2+a))\",\n    //163\n    \"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\",\n    //164 need an unexpanded version?\n    \"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\",\n    // match doesn't work for the following\n    \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\",\n    //165\n    \"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\",\n    //166\n    \"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\",\n    //167\n    \"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\",\n    //168\n    \"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\",\n    //169\n    \"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\",\n    //170\n    \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\",\n    //171\n    \"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\",\n    //172\n    \"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\",\n    //173\n    \"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\",\n    //174\n    \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\",\n    //175\n    \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\",\n    //176+\n    \"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\",\n    //176-\n    \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\",\n    //177+\n    \"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\",\n    //177-\n    \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\",\n    //196\n    \"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\",\n    //197\n    \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\",\n    //200+\n    \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\",\n    //201    (seems to be handled somewhere else)\n    //202\n    \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\",\n    //203\n    \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\",\n    //204\n    \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\",\n    //205\n    \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\",\n    //210\n    \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\",\n    //211\n    \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\",\n    //214\n    \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\",\n    //215\n    \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\",\n    //216\n    \"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\",\n    //217\n    \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\",\n    //218\n    \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\",\n    // 273\n    \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\",\n    // 274\n    \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\",\n    // 290\n    \"f(sin(a*x),-cos(a*x)/a)\",\n    // 291\n    \"f(cos(a*x),sin(a*x)/a)\",\n    // 292\n    \"f(tan(a*x),-log(cos(a*x))/a)\",\n    // 293\n    \"f(1/tan(a*x),log(sin(a*x))/a)\",\n    // 294\n    \"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\",\n    // 295\n    \"f(1/sin(a*x),log(tan(a*x/2))/a)\",\n    // 296\n    \"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\",\n    // 297\n    \"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\",\n    // 298\n    \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\",\n    // 302\n    \"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\",\n    // 303\n    \"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\",\n    // 304\n    \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\",\n    // 308\n    \"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\",\n    // 312\n    \"f(1/cos(a*x)^2,tan(a*x)/a)\",\n    // 318\n    \"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\",\n    // 320\n    \"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\",\n    // 326\n    \"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\",\n    // 327\n    \"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\",\n    // 328\n    \"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\",\n    // 329\n    \"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\",\n    // 330\n    \"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\",\n    // 331\n    \"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\",\n    // 333\n    \"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\",\n    // 335\n    \"f(sin(a+b*x),-cos(a+b*x)/b)\",\n    // 336\n    \"f(cos(a+b*x),sin(a+b*x)/b)\",\n    // 337+ (with the addition of b)\n    \"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\",\n    // 337- (with the addition of b)\n    \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\",\n    // 338 (with the addition of b)\n    \"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\",\n    // 339 (with the addition of b)\n    \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\",\n    // 340\n    \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\", // check that b^2-a^2 is not zero\n    // 341\n    \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\", // check that b^2-a^2 is not zero\n    // 389\n    \"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\",\n    // 390\n    \"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\",\n    // 393\n    \"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\",\n    // 394\n    \"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\",\n    // 441\n    \"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\",\n    // 442\n    \"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\",\n    // 443\n    \"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\",\n    // 485 (with addition of a)\n    // however commenting out since it's a duplicate of 14\n    // \"f(log(a*x),x*log(a*x)-x)\",\n    // 486 (with addition of a)\n    \"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\",\n    // 487 (with addition of a)\n    \"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\",\n    // 489\n    \"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\",\n    // 493 (with addition of a)\n    \"f(1/x*1/(a+log(x)),log(a+log(x)))\",\n    // 499\n    \"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\",\n    // 500\n    \"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\",\n    // 554\n    \"f(sinh(x),cosh(x))\",\n    // 555\n    \"f(cosh(x),sinh(x))\",\n    // 556\n    \"f(tanh(x),log(cosh(x)))\",\n    // 560\n    \"f(x*sinh(x),x*cosh(x)-sinh(x))\",\n    // 562\n    \"f(x*cosh(x),x*sinh(x)-cosh(x))\",\n    // 566\n    \"f(sinh(x)^2,sinh(2*x)/4-x/2)\",\n    // 569\n    \"f(tanh(x)^2,x-tanh(x))\",\n    // 572\n    \"f(cosh(x)^2,sinh(2*x)/4+x/2)\",\n    // ?\n    \"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\",\n    // ?\n    \"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\",\n    // ?\n    \"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\",\n    // ?\n    \"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\",\n    // these are needed for the surface integral in the manual\n    \"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\",\n    \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\",\n    \"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\",\n    \"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\",\n    \"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\",\n    \"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\",\n    \"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\",\n    \"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\",\n    \"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\",\n    0\n  ];\n\n  //define F p3\n  //define X p4\n  //define N p5\n  Eval_integral = function() {\n    var doNothing, i, i1, n, o, ref, ref1;\n    i = 0;\n    n = 0;\n    // evaluate 1st arg to get function F\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    // evaluate 2nd arg and then...\n\n    // example    result of 2nd arg  what to do\n\n    // integral(f)    nil      guess X, N = nil\n    // integral(f,2)  2      guess X, N = 2\n    // integral(f,x)  x      X = x, N = nil\n    // integral(f,x,2)  x      X = x, N = 2\n    // integral(f,x,y)  x      X = x, N = y\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n      push(symbol(NIL));\n    } else if (isNumericAtom(p2)) {\n      guess();\n      push(p2);\n    } else {\n      push(p2);\n      p1 = cdr(p1);\n      push(car(p1));\n      Eval();\n    }\n    p5 = pop();\n    p4 = pop();\n    p3 = pop();\n    while (1) {\n      // N might be a symbol instead of a number\n      if (isNumericAtom(p5)) {\n        push(p5);\n        n = pop_integer();\n        if (isNaN(n)) {\n          stop(\"nth integral: check n\");\n        }\n      } else {\n        n = 1;\n      }\n      push(p3);\n      if (n >= 0) {\n        for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n          push(p4);\n          integral();\n        }\n      } else {\n        n = -n;\n        for (i = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n          push(p4);\n          derivative();\n        }\n      }\n      p3 = pop();\n      // if N is nil then arglist is exhausted\n      if (p5 === symbol(NIL)) {\n        break;\n      }\n      // otherwise...\n\n      // N    arg1    what to do\n\n      // number  nil    break\n      // number  number    N = arg1, continue\n      // number  symbol    X = arg1, N = arg2, continue\n\n      // symbol  nil    X = N, N = nil, continue\n      // symbol  number    X = N, N = arg1, continue\n      // symbol  symbol    X = N, N = arg1, continue\n      if (isNumericAtom(p5)) {\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop();\n        if (p5 === symbol(NIL)) {\n          break; // arglist exhausted\n        }\n        if (isNumericAtom(p5)) {\n          doNothing = 1; // N = arg1\n        } else {\n          p4 = p5;\n          p1 = cdr(p1);\n          push(car(p1));\n          Eval();\n          p5 = pop(); // N = arg2\n        }\n      } else {\n        p4 = p5;\n        p1 = cdr(p1);\n        push(car(p1));\n        Eval();\n        p5 = pop(); // N = arg1\n      }\n    }\n    return push(p3); // final result\n  };\n\n  integral = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      integral_of_sum();\n    } else if (car(p1) === symbol(MULTIPLY)) {\n      integral_of_product();\n    } else {\n      integral_of_form();\n    }\n    p1 = pop();\n    if (Find(p1, symbol(INTEGRAL))) {\n      stop(\"integral: sorry, could not find a solution\");\n    }\n    push(p1);\n    simplify();\n    Eval();\n    return restore();\n  };\n\n  integral_of_sum = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    push(p2);\n    integral();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      push(p2);\n      integral();\n      add();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  integral_of_product = function() {\n    push(p1);\n    push(p2);\n    partition();\n    p1 = pop();\n    integral_of_form();\n    return multiply(); // multiply constant part\n  };\n\n  integral_of_form = function() {\n    var hc, tab;\n    hc = italu_hashcode(p1, p2).toFixed(6);\n    tab = hashed_itab[hc];\n    if (!tab) {\n      // debugger\n      // italu_hashcode(p1, p2)\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    push(p1); // free variable\n    push(p2); // input expression\n    transform(tab, false);\n    p3 = pop();\n    if (p3 === symbol(NIL)) {\n      push_symbol(INTEGRAL);\n      push(p1);\n      push(p2);\n      return list(3);\n    } else {\n      return push(p3);\n    }\n  };\n\n  // Implementation of hash codes based on ITALU (An Integral Table Look-Up)\n  // https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19680004891.pdf\n  // see Appendix A, page 153\n\n  // The first two values are from the ITALU paper.\n  // The others are just arbitrary constants.\n  hashcode_values = {\n    'x': 0.95532,\n    'constexp': 1.43762,\n    'constant': 1.14416593629414332,\n    'constbase': 1.20364122304218824,\n    'sin': 1.73305482518303221,\n    'arcsin': 1.6483368529465804,\n    'cos': 1.058672123686340116,\n    'arccos': 1.8405225918106694,\n    'tan': 1.12249437762925064,\n    'arctan': 1.1297397925394962,\n    'sinh': 1.8176164926060078,\n    'cosh': 1.9404934661708022,\n    'tanh': 1.6421307715103121,\n    'log': 1.47744370135492387,\n    'erf': 1.0825269225702916\n  };\n\n  italu_hashcode = function(u, x) {\n    var half;\n    if (issymbol(u)) {\n      if (equal(u, x)) {\n        return hashcode_values.x;\n      } else {\n        return hashcode_values.constant;\n      }\n    } else if (iscons(u)) {\n      switch (symnum(car(u))) {\n        case ADD:\n          return hash_addition(cdr(u), x);\n        case MULTIPLY:\n          return hash_multiplication(cdr(u), x);\n        case POWER:\n          return hash_power(cadr(u), caddr(u), x);\n        case EXP:\n          return hash_power(symbol(E), cadr(u), x);\n        case SQRT:\n          push_double(0.5);\n          half = pop();\n          return hash_power(cadr(u), half, x);\n        default:\n          return hash_function(u, x);\n      }\n    }\n    return hashcode_values.constant;\n  };\n\n  hash_function = function(u, x) {\n    var arg_hash, base, name;\n    if (!Find(cadr(u), x)) {\n      return hashcode_values.constant;\n    }\n    name = car(u);\n    arg_hash = italu_hashcode(cadr(u), x);\n    base = hashcode_values[name.printname];\n    if (!base) {\n      throw new Error('Unsupported function ' + name.printname);\n    }\n    return Math.pow(base, arg_hash);\n  };\n\n  hash_addition = function(terms, x) {\n    var k, sum, term, term_hash, term_set, v;\n    term_set = {};\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n      term_hash = 0;\n      if (Find(term, x)) {\n        term_hash = italu_hashcode(term, x);\n      } else {\n        // The original algorithm would skip this,\n        // but recording that it was present helps\n        // prevent collisions.\n        term_hash = hashcode_values.constant;\n      }\n      term_set[term_hash.toFixed(6)] = true;\n    }\n    sum = 0;\n    for (k in term_set) {\n      if (!hasProp.call(term_set, k)) continue;\n      v = term_set[k];\n      sum = sum + parseFloat(k, 10);\n    }\n    return sum;\n  };\n\n  hash_multiplication = function(terms, x) {\n    var product, term;\n    product = 1;\n    while (iscons(terms)) {\n      term = car(terms);\n      terms = cdr(terms);\n      if (Find(term, x)) {\n        product = product * italu_hashcode(term, x);\n      }\n    }\n    return product;\n  };\n\n  hash_power = function(base, power, x) {\n    var base_hash, exp_hash;\n    base_hash = hashcode_values.constant;\n    exp_hash = hashcode_values.constexp;\n    if (Find(base, x)) {\n      base_hash = italu_hashcode(base, x);\n    }\n    if (Find(power, x)) {\n      exp_hash = italu_hashcode(power, x);\n    } else {\n      // constant to constant = constant\n      if (base_hash === hashcode_values.constant) {\n        return hashcode_values.constant;\n      }\n      if (isminusone(power)) {\n        exp_hash = -1;\n      } else if (isoneovertwo(power)) {\n        exp_hash = 0.5;\n      } else if (isminusoneovertwo(power)) {\n        exp_hash = -0.5;\n      } else if (equalq(power, 2, 1)) {\n        exp_hash = 2;\n      } else if (equalq(power, -2, 1)) {\n        exp_hash = -2;\n      }\n    }\n    return Math.pow(base_hash, exp_hash);\n  };\n\n  make_hashed_itab = function() {\n    var f, h, key, len, o, s, tab, u;\n    tab = {};\n    for (o = 0, len = itab.length; o < len; o++) {\n      s = itab[o];\n      if (!s) {\n        break;\n      }\n      scan_meta(s);\n      f = pop();\n      u = cadr(f);\n      h = italu_hashcode(u, symbol(METAX));\n      key = h.toFixed(6);\n      if (!tab[key]) {\n        tab[key] = [];\n      }\n      tab[key].push(s);\n    }\n    console.log('hashed_itab = ' + JSON.stringify(tab, null, 2));\n    return tab;\n  };\n\n  $.make_hashed_itab = make_hashed_itab;\n\n  // pre-calculated hashed integral table.\n  // in case the integral table is changed, use this\n  //   Algebrite.make_hashed_itab()\n  // and copy the resulting JSON in here.\n  hashed_itab = {\n    \"1.144166\": [\"f(a,a*x)\"],\n    \"1.046770\": [\"f(1/x,log(x))\"],\n    \"0.936400\": [\"f(x^a,x^(a+1)/(a+1))\"],\n    \"1.095727\": [\"f(x^(-2),-x^(-1))\"],\n    \"1.023118\": [\"f(x^(-1/2),2*x^(1/2))\"],\n    \"0.977405\": [\"f(x^(1/2),2/3*x^(3/2))\"],\n    \"0.955320\": [\"f(x,x^2/2)\"],\n    \"0.912636\": [\"f(x^2,x^3/3)\"],\n    \"1.137302\": [\"f(exp(a*x),1/a*exp(a*x))\", \"f(a^x,a^x/log(a),or(not(number(a)),a>0))\"],\n    \"1.326774\": [\"f(exp(a*x+b),1/a*exp(a*x+b))\"],\n    \"1.080259\": [\"f(x*exp(a*x^2),exp(a*x^2)/(2*a))\"],\n    \"1.260228\": [\"f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))\"],\n    \"1.451902\": [\"f(log(a*x),x*log(a*x)-x)\"],\n    \"0.486192\": [\"f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))\", \"f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))\", \"f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))\", \"f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.697274\": [\"f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))\", \"f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))\", \"f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))\"],\n    \"0.476307\": [\"f(1/(a+b*x),1/b*log(a+b*x))\"],\n    \"0.226868\": [\"f(1/(a+b*x)^2,-1/(b*(a+b*x)))\"],\n    \"2.904531\": [\"f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)\"],\n    \"0.455026\": [\"f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)\"],\n    \"0.216732\": [\"f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))\"],\n    \"0.434695\": [\"f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))\"],\n    \"0.207048\": [\"f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))\"],\n    \"2.650781\": [\"f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))\"],\n    \"0.498584\": [\"f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))\"],\n    \"0.237479\": [\"f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))\"],\n    \"3.040375\": [\"f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))\"],\n    \"0.521902\": [\"f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))\"],\n    \"0.446014\": [\"f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))\"],\n    \"0.248586\": [\"f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))\"],\n    \"0.464469\": [\"f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))\"],\n    \"0.443716\": [\"f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))\"],\n    \"0.236382\": [\"f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))\"],\n    \"0.508931\": [\"f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))\"],\n    \"0.532733\": [\"f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))\"],\n    \"0.480638\": [\"f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))\"],\n    \"0.438648\": [\"f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))\"],\n    \"0.459164\": [\"f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))\", \"f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))\"],\n    \"0.450070\": [\"f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))\"],\n    \"1.448960\": [\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\"],\n    \"1.384221\": [\"f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)\"],\n    \"1.322374\": [\"f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)\"],\n    \"1.516728\": [\"f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.587665\": [\"f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"0.690150\": [\"f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)\"],\n    \"0.659314\": [\"f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)\"],\n    \"0.629856\": [\"f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)\"],\n    \"0.722428\": [\"f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))\"],\n    \"0.756216\": [\"f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))\"],\n    \"1.434156\": [\"f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))\", \"f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))\", \"f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))\"],\n    \"0.729886\": [\"f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))\", \"f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"1.501230\": [\"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))\", \"f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))\", \"f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))\"],\n    \"0.666120\": [\"f(x/sqrt(x^2+a),sqrt(x^2+a))\", \"f(x/sqrt(a-x^2),-sqrt(a-x^2))\"],\n    \"1.370077\": [\"f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))\", \"f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))\"],\n    \"1.730087\": [\"f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))\", \"f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))\"],\n    \"0.578006\": [\"f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))\"],\n    \"0.552180\": [\"f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))\"],\n    \"1.652787\": [\"f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))\"],\n    \"1.308862\": [\"f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))\", \"f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))\"],\n    \"1.342944\": [\"f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))\", \"f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))\", \"f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))\", \"f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))\"],\n    \"0.636358\": [\"f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))\", \"f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"0.652928\": [\"f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))\", \"f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))\", \"f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))\"],\n    \"0.764022\": [\"f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)\", \"f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))\"],\n    \"1.578940\": [\"f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))\", \"f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))\"],\n    \"1.620055\": [\"f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))\", \"f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))\"],\n    \"0.332117\": [\"f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))\", \"f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))\"],\n    \"1.571443\": [\"f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))\"],\n    \"1.690994\": [\"f(sin(a*x),-cos(a*x)/a)\"],\n    \"1.055979\": [\"f(cos(a*x),sin(a*x)/a)\"],\n    \"1.116714\": [\"f(tan(a*x),-log(cos(a*x))/a)\"],\n    \"0.895484\": [\"f(1/tan(a*x),log(sin(a*x))/a)\"],\n    \"0.946989\": [\"f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)\"],\n    \"0.591368\": [\"f(1/sin(a*x),log(tan(a*x/2))/a)\"],\n    \"2.859462\": [\"f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))\"],\n    \"2.128050\": [\"f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))\", \"f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"1.115091\": [\"f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))\"],\n    \"1.081452\": [\"f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))\", \"f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))\"],\n    \"0.349716\": [\"f(1/sin(a*x)^2,-1/(a*tan(a*x)))\"],\n    \"0.896788\": [\"f(1/cos(a*x)^2,tan(a*x)/a)\"],\n    \"1.785654\": [\"f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))\"],\n    \"3.188560\": [\"f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)\"],\n    \"1.516463\": [\"f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))\"],\n    \"2.707879\": [\"f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)\"],\n    \"0.369293\": [\"f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))\"],\n    \"0.560019\": [\"f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)\"],\n    \"0.530332\": [\"f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)\"],\n    \"0.331177\": [\"f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)\"],\n    \"0.313621\": [\"f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))\"],\n    \"3.172365\": [\"f(sin(a+b*x),-cos(a+b*x)/b)\"],\n    \"1.127162\": [\"f(cos(a+b*x),sin(a+b*x)/b)\"],\n    \"0.352714\": [\"f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)\", \"f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)\", \"f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)\"],\n    \"0.454515\": [\"f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)\", \"f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)\", \"f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)\"],\n    \"1.615441\": [\"f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)\"],\n    \"1.543263\": [\"f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)\"],\n    \"1.008798\": [\"f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)\"],\n    \"0.963724\": [\"f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)\"],\n    \"1.611938\": [\"f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)\"],\n    \"1.791033\": [\"f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)\"],\n    \"1.123599\": [\"f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)\"],\n    \"1.387031\": [\"f(x*log(a*x),x^2*log(a*x)/2-x^2/4)\"],\n    \"1.325058\": [\"f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)\"],\n    \"2.108018\": [\"f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)\"],\n    \"0.403214\": [\"f(1/x*1/(a+log(x)),log(a+log(x)))\"],\n    \"2.269268\": [\"f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)\"],\n    \"2.486498\": [\"f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)\"],\n    \"1.769733\": [\"f(sinh(x),cosh(x))\"],\n    \"1.883858\": [\"f(cosh(x),sinh(x))\"],\n    \"1.606140\": [\"f(tanh(x),log(cosh(x)))\"],\n    \"1.690661\": [\"f(x*sinh(x),x*cosh(x)-sinh(x))\"],\n    \"1.799688\": [\"f(x*cosh(x),x*sinh(x)-cosh(x))\"],\n    \"3.131954\": [\"f(sinh(x)^2,sinh(2*x)/4-x/2)\"],\n    \"2.579685\": [\"f(tanh(x)^2,x-tanh(x))\"],\n    \"3.548923\": [\"f(cosh(x)^2,sinh(2*x)/4+x/2)\"],\n    \"1.058866\": [\"f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)\"],\n    \"1.235270\": [\"f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)\"],\n    \"1.130783\": [\"f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)\"],\n    \"1.078698\": [\"f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))\"],\n    \"2.573650\": [\"f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)\", \"f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)\"],\n    \"2.640666\": [\"f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)\"],\n    \"1.086487\": [\"f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))\"],\n    \"1.267493\": [\"f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))\"],\n    \"1.037943\": [\"f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.210862\": [\"f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))\"],\n    \"1.064970\": [\"f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))\"],\n    \"1.242392\": [\"f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))\"]\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    Matrix on stack (must have two dimensions but\n  //        it can be non-numerical)\n\n  //  Output:    Inverse on stack\n\n  //  Example:\n\n  //  > inv(((1,2),(3,4))\n  //  ((-2,1),(3/2,-1/2))\n\n  //  > inv(((a,b),(c,d))\n  //  ((d / (a d - b c),-b / (a d - b c)),(-c / (a d - b c),a / (a d - b c)))\n\n  //  Note:\n\n  //  THIS IS DIFFERENT FROM INVERSE OF AN EXPRESSION (inv)\n  //   Uses Gaussian elimination for numerical matrices.\n\n  //-----------------------------------------------------------------------------\n  INV_check_arg = function() {\n    if (!istensor(p1)) {\n      return 0;\n    } else if (p1.tensor.ndim !== 2) {\n      return 0;\n    } else if (p1.tensor.dim[0] !== p1.tensor.dim[1]) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  inv = function() {\n    var accumulator, eachEntry, i, n, o, ref;\n    i = 0;\n    n = 0;\n    //U **a\n    save();\n    p1 = pop();\n    // an inv just goes away when\n    // applied to another inv\n    if (isinv(p1)) {\n      push(car(cdr(p1)));\n      restore();\n      return;\n    }\n    // inverse goes away in case\n    // of identity matrix\n    if (isidentitymatrix(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    // distribute the inverse of a dot\n    // if in expanding mode\n    // note that the distribution happens\n    // in reverse.\n    // The dot operator is not\n    // commutative, so, it matters.\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n      while (iscons(p1)) {\n        accumulator.push(car(p1));\n        p1 = cdr(p1);\n      }\n      for (eachEntry = o = ref = accumulator.length - 1; (ref <= 0 ? o <= 0 : o >= 0); eachEntry = ref <= 0 ? ++o : --o) {\n        push(accumulator[eachEntry]);\n        inv();\n        if (eachEntry !== accumulator.length - 1) {\n          inner();\n        }\n      }\n      restore();\n      return;\n    }\n    if (INV_check_arg() === 0) {\n      push_symbol(INV);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    if (isNumericAtomOrTensor(p1)) {\n      yyinvg();\n    } else {\n      push(p1);\n      adj();\n      push(p1);\n      det();\n      p2 = pop();\n      if (isZeroAtomOrTensor(p2)) {\n        stop(\"inverse of singular matrix\");\n      }\n      push(p2);\n      divide();\n    }\n    return restore();\n  };\n\n  invg = function() {\n    save();\n    p1 = pop();\n    if (INV_check_arg() === 0) {\n      push_symbol(INVG);\n      push(p1);\n      list(2);\n      restore();\n      return;\n    }\n    yyinvg();\n    return restore();\n  };\n\n  // inverse using gaussian elimination\n  yyinvg = function() {\n    var h, i, i1, j, j1, l1, n, o, ref, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    j = 0;\n    n = 0;\n    n = p1.tensor.dim[0];\n    h = tos;\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      for (j = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        if (i === j) {\n          push(one);\n        } else {\n          push(zero);\n        }\n      }\n    }\n    for (i = j1 = 0, ref2 = n * n; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      push(p1.tensor.elem[i]);\n    }\n    INV_decomp(n);\n    p1 = alloc_tensor(n * n);\n    p1.tensor.ndim = 2;\n    p1.tensor.dim[0] = n;\n    p1.tensor.dim[1] = n;\n    for (i = l1 = 0, ref3 = n * n; (0 <= ref3 ? l1 < ref3 : l1 > ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(tos - 2 * n * n);\n    return push(p1);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    n * n unit matrix on stack\n\n  //      n * n operand on stack\n\n  //  Output:    n * n inverse matrix on stack\n\n  //      n * n garbage on stack\n\n  //      p2 mangled\n\n  //-----------------------------------------------------------------------------\n\n  //define A(i, j) stack[a + n * (i) + (j)]\n  //define U(i, j) stack[u + n * (i) + (j)]\n  INV_decomp = function(n) {\n    var a, d, i, i1, j, j1, l1, o, ref, ref1, ref2, ref3, ref4, results, u;\n    a = 0;\n    d = 0;\n    i = 0;\n    j = 0;\n    u = 0;\n    a = tos - n * n;\n    u = a - n * n;\n    results = [];\n    for (d = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); d = 0 <= ref ? ++o : --o) {\n      // diagonal element zero?\n      if (equal(stack[a + n * d + d], zero)) {\n// find a new row\n        for (i = i1 = ref1 = d + 1, ref2 = n; (ref1 <= ref2 ? i1 < ref2 : i1 > ref2); i = ref1 <= ref2 ? ++i1 : --i1) {\n          if (!equal(stack[a + n * i + d], zero)) {\n            break;\n          }\n        }\n        if (i === n) {\n          stop(\"inverse of singular matrix\");\n        }\n// exchange rows\n        for (j = j1 = 0, ref3 = n; (0 <= ref3 ? j1 < ref3 : j1 > ref3); j = 0 <= ref3 ? ++j1 : --j1) {\n          p2 = stack[a + n * d + j];\n          stack[a + n * d + j] = stack[a + n * i + j];\n          stack[a + n * i + j] = p2;\n          p2 = stack[u + n * d + j];\n          stack[u + n * d + j] = stack[u + n * i + j];\n          stack[u + n * i + j] = p2;\n        }\n      }\n      // multiply the pivot row by 1 / pivot\n      p2 = stack[a + n * d + d];\n      for (j = l1 = 0, ref4 = n; (0 <= ref4 ? l1 < ref4 : l1 > ref4); j = 0 <= ref4 ? ++l1 : --l1) {\n        if (j > d) {\n          push(stack[a + n * d + j]);\n          push(p2);\n          divide();\n          stack[a + n * d + j] = pop();\n        }\n        push(stack[u + n * d + j]);\n        push(p2);\n        divide();\n        stack[u + n * d + j] = pop();\n      }\n      results.push((function() {\n        var m1, ref5, results1;\n// clear out the column above and below the pivot\n        results1 = [];\n        for (i = m1 = 0, ref5 = n; (0 <= ref5 ? m1 < ref5 : m1 > ref5); i = 0 <= ref5 ? ++m1 : --m1) {\n          if (i === d) {\n            continue;\n          }\n          // multiplier\n          p2 = stack[a + n * i + d];\n          results1.push((function() {\n            var n1, ref6, results2;\n// add pivot row to i-th row\n            results2 = [];\n            for (j = n1 = 0, ref6 = n; (0 <= ref6 ? n1 < ref6 : n1 > ref6); j = 0 <= ref6 ? ++n1 : --n1) {\n              if (j > d) {\n                push(stack[a + n * i + j]);\n                push(stack[a + n * d + j]);\n                push(p2);\n                multiply();\n                subtract();\n                stack[a + n * i + j] = pop();\n              }\n              push(stack[u + n * i + j]);\n              push(stack[u + n * d + j]);\n              push(p2);\n              multiply();\n              subtract();\n              results2.push(stack[u + n * i + j] = pop());\n            }\n            return results2;\n          })());\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  DEBUG_IS = false;\n\n  // jsBoolToToInt = (p) ->\n  //   if p then 1 else 0\n\n  // p is a U\n  // this routine is a simple check on whether we have\n  // a basic zero in our hands. It doesn't perform any\n  // calculations or simplifications.\n  isZeroAtom = function(p) {\n    switch (p.k) {\n      case NUM:\n        return MZERO(p.q.a);\n      case DOUBLE:\n        return p.d === 0.0;\n      default:\n        return false;\n    }\n  };\n\n  // p is a U\n  // this routine is a simple check on whether we have\n  // a basic zero in our hands. It doesn't perform any\n  // calculations or simplifications.\n  isZeroTensor = function(p) {\n    var i, o, ref;\n    if (p.k !== TENSOR) {\n      return 0;\n    }\n    for (i = o = 0, ref = p.tensor.nelem; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      if (!isZeroAtomOrTensor(p.tensor.elem[i])) {\n        return 0;\n      }\n    }\n    return 1;\n  };\n\n  // p is a U\n  // this routine is a simple check on whether we have\n  // a basic zero in our hands. It doesn't perform any\n  // calculations or simplifications.\n  isZeroAtomOrTensor = function(p) {\n    return isZeroAtom(p) || isZeroTensor(p);\n  };\n\n  // This is a key routine to try to determine whether\n  // the argument looks like zero/false, or non-zero/true,\n  // or undetermined.\n  // This is useful in two instances:\n  //  * to determine if a predicate is true/false\n  //  * to determine if particular quantity is zero\n  // Note that if one wants to check if we have a simple\n  // zero atom or tensor in our hands, then the isZeroAtomOrTensor\n  // routine is sufficient.\n  isZeroLikeOrNonZeroLikeOrUndetermined = function(valueOrPredicate) {\n    var evalledArgument;\n    // push the argument\n    push(valueOrPredicate);\n    // just like Eval but turns assignments into\n    // equality checks\n    Eval_predicate();\n    evalledArgument = pop();\n    // OK first check if we already have\n    // a simple zero (or simple zero tensor)\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    }\n    // also check if we have a simple numeric value, or a tensor\n    // full of simple numeric values (i.e. straight doubles or fractions).\n    // In such cases, since we\n    // just excluded they are zero, then we take it as\n    // a \"true\"\n    if (isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    }\n    // if we are here we are in the case of value that\n    // is not a zero and not a simple numeric value.\n    // e.g. stuff like\n    // 'sqrt(2)', or 'sin(45)' or '1+i', or 'a'\n    // so in such cases let's try to do a float()\n    // so we might get down to a simple numeric value\n    // in some of those cases\n    push(evalledArgument);\n    zzfloat();\n    evalledArgument = pop();\n    // anything that could be calculated down to a simple\n    // numeric value is now indeed either a \n    // double OR a double with an imaginary component\n    // e.g. 2.0 or 2.4 + i*5.6\n    // (Everything else are things that don't have a numeric\n    // value e.g. 'a+b')\n\n    // So, let's take care of the case where we have\n    // a simple numeric value with NO imaginary component,\n    // things like sqrt(2) or sin(PI)\n    // by doing the simple numeric\n    // values checks again\n    if (isZeroAtomOrTensor(evalledArgument)) {\n      return 0;\n    }\n    if (isNumericAtomOrTensor(evalledArgument)) {\n      return 1;\n    }\n    // here we still have cases of simple numeric values\n    // WITH an imaginary component e.g. '1+i',\n    // or things that don't have a numeric value e.g. 'a'\n\n    // so now let's take care of the imaginary numbers:\n    // since we JUST have to spot \"zeros\" we can just\n    // calculate the absolute value and re-do all the checks\n    // we just did\n    if (Find(evalledArgument, imaginaryunit)) {\n      push(evalledArgument);\n      absValFloat();\n      Eval_predicate();\n      evalledArgument = pop();\n      // re-do the simple-number checks...\n      if (isZeroAtomOrTensor(evalledArgument)) {\n        return 0;\n      }\n      if (isNumericAtomOrTensor(evalledArgument)) {\n        return 1;\n      }\n    }\n    // here we have stuff that is not reconducible to any\n    // numeric value (or tensor with numeric values) e.g.\n    // 'a+b', so it just means that we just don't know the\n    // truth value, so we have\n    // to leave the whole thing unevalled\n    return null;\n  };\n\n  // p is a U\n  isnegativenumber = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === -1) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d < 0.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  // p is a U\n  ispositivenumber = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MSIGN(p.q.a) === 1) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d > 0.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  // p is a U\n  isplustwo = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 2) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === 2.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  // p is a U\n  isplusone = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, 1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === 1.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isminusone = function(p) {\n    switch (p.k) {\n      case NUM:\n        if (MEQUAL(p.q.a, -1) && MEQUAL(p.q.b, 1)) {\n          return 1;\n        }\n        break;\n      case DOUBLE:\n        if (p.d === -1.0) {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  isone = function(p) {\n    return isplusone(p) || isminusone(p);\n  };\n\n  isinteger = function(p) {\n    if (p.k === NUM && MEQUAL(p.q.b, 1)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isintegerorintegerfloat = function(p) {\n    if (p.k === DOUBLE) {\n      if (p.d === Math.round(p.d)) {\n        return 1;\n      }\n      return 0;\n    }\n    return isinteger(p);\n  };\n\n  isnonnegativeinteger = function(p) {\n    if (isrational(p) && MEQUAL(p.q.b, 1) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isposint = function(p) {\n    if (isinteger(p) && MSIGN(p.q.a) === 1) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  // --------------------------------------\n  isunivarpolyfactoredorexpandedform = function(p, x) {\n    if (DEBUG) {\n      console.log(\"isunivarpolyfactoredorexpandedform: p: \" + p + \" x: \" + x);\n    }\n    if (x == null) {\n      push(p);\n      guess();\n      x = pop();\n      pop();\n    }\n    if (ispolyfactoredorexpandedform(p, x) && (Find(p, symbol(SYMBOL_X)) + Find(p, symbol(SYMBOL_Y)) + Find(p, symbol(SYMBOL_Z)) === 1)) {\n      return x;\n    } else {\n      return 0;\n    }\n  };\n\n  // --------------------------------------\n  // sometimes we want to check if we have a poly in our\n  // hands, however it's in factored form and we don't\n  // want to expand it.\n  ispolyfactoredorexpandedform = function(p, x) {\n    return ispolyfactoredorexpandedform_factor(p, x);\n  };\n\n  ispolyfactoredorexpandedform_factor = function(p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        if (DEBUG) {\n          console.log(\"ispolyfactoredorexpandedform_factor testing \" + car(p));\n        }\n        if (!ispolyfactoredorexpandedform_power(car(p), x)) {\n          if (DEBUG) {\n            console.log(\"... tested negative:\" + car(p));\n          }\n          return 0;\n        }\n        p = cdr(p);\n      }\n      return 1;\n    } else {\n      return ispolyfactoredorexpandedform_power(p, x);\n    }\n  };\n\n  ispolyfactoredorexpandedform_power = function(p, x) {\n    if (car(p) === symbol(POWER)) {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power (isposint(caddr(p)) \" + (isposint(caddr(p)), DEBUG ? console.log(\"ispolyfactoredorexpandedform_power ispolyexpandedform_expr(cadr(p), x)) \" + ispolyexpandedform_expr(cadr(p), x)) : void 0));\n      }\n      return isposint(caddr(p)) && ispolyexpandedform_expr(cadr(p), x);\n    } else {\n      if (DEBUG) {\n        console.log(\"ispolyfactoredorexpandedform_power not a power, testing if this is exp form: \" + p);\n      }\n      return ispolyexpandedform_expr(p, x);\n    }\n  };\n\n  // --------------------------------------\n  ispolyexpandedform = function(p, x) {\n    if (Find(p, x)) {\n      return ispolyexpandedform_expr(p, x);\n    } else {\n      return 0;\n    }\n  };\n\n  ispolyexpandedform_expr = function(p, x) {\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        if (!ispolyexpandedform_term(car(p), x)) {\n          return 0;\n        }\n        p = cdr(p);\n      }\n      return 1;\n    } else {\n      return ispolyexpandedform_term(p, x);\n    }\n  };\n\n  ispolyexpandedform_term = function(p, x) {\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      while (iscons(p)) {\n        if (!ispolyexpandedform_factor(car(p), x)) {\n          return 0;\n        }\n        p = cdr(p);\n      }\n      return 1;\n    } else {\n      return ispolyexpandedform_factor(p, x);\n    }\n  };\n\n  ispolyexpandedform_factor = function(p, x) {\n    if (equal(p, x)) {\n      return 1;\n    }\n    if (car(p) === symbol(POWER) && equal(cadr(p), x)) {\n      if (isposint(caddr(p))) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n    if (Find(p, x)) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  // --------------------------------------\n  isnegativeterm = function(p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    } else if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  hasNegativeRationalExponent = function(p) {\n    if (car(p) === symbol(POWER) && isrational(car(cdr(cdr(p)))) && isnegativenumber(car(cdr(p)))) {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has imaginary component\");\n      }\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"hasNegativeRationalExponent: \" + p.toString() + \" has NO imaginary component\");\n      }\n      return 0;\n    }\n  };\n\n  isimaginarynumberdouble = function(p) {\n    if ((car(p) === symbol(MULTIPLY) && length(p) === 3 && isdouble(cadr(p)) && hasNegativeRationalExponent(caddr(p))) || equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isimaginarynumber = function(p) {\n    if ((car(p) === symbol(MULTIPLY) && length(p) === 3 && isNumericAtom(cadr(p)) && equal(caddr(p), imaginaryunit)) || equal(p, imaginaryunit) || hasNegativeRationalExponent(caddr(p))) {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" is imaginary number\");\n      }\n      return 1;\n    } else {\n      if (DEBUG_IS) {\n        console.log(\"isimaginarynumber: \" + p.toString() + \" isn't an imaginary number\");\n      }\n      return 0;\n    }\n  };\n\n  iscomplexnumberdouble = function(p) {\n    if ((car(p) === symbol(ADD) && length(p) === 3 && isdouble(cadr(p)) && isimaginarynumberdouble(caddr(p))) || isimaginarynumberdouble(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  iscomplexnumber = function(p) {\n    if (DEBUG_IS) {\n      debugger;\n    }\n    if ((car(p) === symbol(ADD) && length(p) === 3 && isNumericAtom(cadr(p)) && isimaginarynumber(caddr(p))) || isimaginarynumber(p)) {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n      return 1;\n    } else {\n      if (DEBUG) {\n        console.log(\"iscomplexnumber: \" + p.toString() + \" is imaginary number\");\n      }\n      return 0;\n    }\n  };\n\n  iseveninteger = function(p) {\n    if (isinteger(p) && p.q.a.isEven()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  isnegative = function(p) {\n    if (car(p) === symbol(ADD) && isnegativeterm(cadr(p))) {\n      return 1;\n    } else if (isnegativeterm(p)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  // returns 1 if there's a symbol somewhere.\n  // not used anywhere.\n  // NOTE: PI and POWER are symbols,\n  // so for example 2^3 would be symbolic\n  // while -1^(1/2) i.e. 'i' is not, so this can\n  // be tricky to use.\n  issymbolic = function(p) {\n    if (issymbol(p)) {\n      return 1;\n    } else {\n      while (iscons(p)) {\n        if (issymbolic(car(p))) {\n          return 1;\n        }\n        p = cdr(p);\n      }\n      return 0;\n    }\n  };\n\n  // i.e. 2, 2^3, etc.\n  isintegerfactor = function(p) {\n    return isinteger(p) || car(p) === symbol(POWER) && isinteger(cadr(p)) && isinteger(caddr(p));\n  };\n\n  isNumberOneOverSomething = function(p) {\n    return isfraction(p) && MEQUAL(p.q.a.abs(), 1);\n  };\n\n  isoneover = function(p) {\n    return car(p) === symbol(POWER) && isminusone(caddr(p));\n  };\n\n  isfraction = function(p) {\n    return p.k === NUM && !MEQUAL(p.q.b, 1);\n  };\n\n  // p is a U, n an int\n  equaln = function(p, n) {\n    switch (p.k) {\n      case NUM:\n        return MEQUAL(p.q.a, n) && MEQUAL(p.q.b, 1);\n      case DOUBLE:\n        return p.d === n;\n      default:\n        return false;\n    }\n  };\n\n  // p is a U, a and b ints\n  equalq = function(p, a, b) {\n    switch (p.k) {\n      case NUM:\n        return MEQUAL(p.q.a, a) && MEQUAL(p.q.b, b);\n      case DOUBLE:\n        return p.d === a / b;\n      default:\n        return false;\n    }\n  };\n\n  // 1/2 ?\n  isoneovertwo = function(p) {\n    return equalq(p, 1, 2);\n  };\n\n  // -1/2 ?\n  isminusoneovertwo = function(p) {\n    return equalq(p, -1, 2);\n  };\n\n  // 1/sqrt(2) ?\n  isoneoversqrttwo = function(p) {\n    return car(p) === symbol(POWER) && equaln(cadr(p), 2) && equalq(caddr(p), -1, 2);\n  };\n\n  // -1/sqrt(2) ?\n  isminusoneoversqrttwo = function(p) {\n    return car(p) === symbol(MULTIPLY) && equaln(cadr(p), -1) && isoneoversqrttwo(caddr(p)) && length(p) === 3;\n  };\n\n  // sqrt(3)/2 ?\n  issqrtthreeovertwo = function(p) {\n    return car(p) === symbol(MULTIPLY) && isoneovertwo(cadr(p)) && issqrtthree(caddr(p)) && length(p) === 3;\n  };\n\n  // -sqrt(3)/2 ?\n  isminussqrtthreeovertwo = function(p) {\n    return car(p) === symbol(MULTIPLY) && isminusoneovertwo(cadr(p)) && issqrtthree(caddr(p)) && length(p) === 3;\n  };\n\n  // p == sqrt(3) ?\n  issqrtthree = function(p) {\n    return car(p) === symbol(POWER) && equaln(cadr(p), 3) && isoneovertwo(caddr(p));\n  };\n\n  isfloating = function(p) {\n    if (p.k === DOUBLE || p === symbol(FLOATF)) {\n      return 1;\n    }\n    while (iscons(p)) {\n      if (isfloating(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  isimaginaryunit = function(p) {\n    if (equal(p, imaginaryunit)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  // n/2 * i * pi ?\n\n  // return value:\n\n  //  0  no\n\n  //  1  1\n\n  //  2  -1\n\n  //  3  i\n\n  //  4  -i\n  isquarterturn = function(p) {\n    var minussign, n;\n    n = 0;\n    minussign = 0;\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n    if (equal(cadr(p), imaginaryunit)) {\n      if (caddr(p) !== symbol(PI)) {\n        return 0;\n      }\n      if (length(p) !== 3) {\n        return 0;\n      }\n      return 2;\n    }\n    if (!isNumericAtom(cadr(p))) {\n      return 0;\n    }\n    if (!equal(caddr(p), imaginaryunit)) {\n      return 0;\n    }\n    if (cadddr(p) !== symbol(PI)) {\n      return 0;\n    }\n    if (length(p) !== 4) {\n      return 0;\n    }\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    if (isNaN(n)) {\n      return 0;\n    }\n    if (n < 1) {\n      minussign = 1;\n      n = -n;\n    }\n    switch (n % 4) {\n      case 0:\n        n = 1;\n        break;\n      case 1:\n        if (minussign) {\n          n = 4;\n        } else {\n          n = 3;\n        }\n        break;\n      case 2:\n        n = 2;\n        break;\n      case 3:\n        if (minussign) {\n          n = 3;\n        } else {\n          n = 4;\n        }\n    }\n    return n;\n  };\n\n  // special multiple of pi?\n\n  // returns for the following multiples of pi...\n\n  //  -4/2  -3/2  -2/2  -1/2  1/2  2/2  3/2  4/2\n\n  //  4  1  2  3  1  2  3  4\n  isnpi = function(p) {\n    var doNothing, n;\n    n = 0;\n    if (p === symbol(PI)) {\n      return 2;\n    }\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && caddr(p) === symbol(PI) && length(p) === 3) {\n      doNothing = 0;\n    } else {\n      return 0;\n    }\n    push(cadr(p));\n    push_integer(2);\n    multiply();\n    n = pop_integer();\n    if (isNaN(n)) {\n      return 0;\n    }\n    if (n < 0) {\n      n = 4 - (-n) % 4;\n    } else {\n      n = 1 + (n - 1) % 4;\n    }\n    return n;\n  };\n\n  $.isZeroAtomOrTensor = isZeroAtomOrTensor;\n\n  $.isnegativenumber = isnegativenumber;\n\n  $.isplusone = isplusone;\n\n  $.isminusone = isminusone;\n\n  $.isinteger = isinteger;\n\n  $.isnonnegativeinteger = isnonnegativeinteger;\n\n  $.isposint = isposint;\n\n  $.isnegativeterm = isnegativeterm;\n\n  $.isimaginarynumber = isimaginarynumber;\n\n  $.iscomplexnumber = iscomplexnumber;\n\n  $.iseveninteger = iseveninteger;\n\n  $.isnegative = isnegative;\n\n  $.issymbolic = issymbolic;\n\n  $.isintegerfactor = isintegerfactor;\n\n  $.isoneover = isoneover;\n\n  $.isfraction = isfraction;\n\n  $.isoneoversqrttwo = isoneoversqrttwo;\n\n  $.isminusoneoversqrttwo = isminusoneoversqrttwo;\n\n  $.isfloating = isfloating;\n\n  $.isimaginaryunit = isimaginaryunit;\n\n  $.isquarterturn = isquarterturn;\n\n  $.isnpi = isnpi;\n\n  Eval_isprime = function() {\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (isnonnegativeinteger(p1) && mprime(p1.q.a)) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_laguerre = function() {\n    // 1st arg\n    push(cadr(p1));\n    Eval();\n    // 2nd arg\n    push(caddr(p1));\n    Eval();\n    // 3rd arg\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n    return laguerre();\n  };\n\n  //define X p1\n  //define N p2\n  //define K p3\n  //define Y p4\n  //define Y0 p5\n  //define Y1 p6\n  laguerre = function() {\n    var n;\n    n = 0;\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    if (n < 0 || isNaN(n)) {\n      push_symbol(LAGUERRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      restore();\n      return;\n    }\n    if (issymbol(p1)) {\n      laguerre2(n);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n      laguerre2(n);\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      Eval();\n    }\n    return restore();\n  };\n\n  laguerre2 = function(n) {\n    var i, o, ref, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop();\n    results = [];\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      subtract();\n      push(p3);\n      add();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p3);\n      add();\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      results.push(divide());\n    }\n    return results;\n  };\n\n  // Find the least common multiple of two expressions.\n  Eval_lcm = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      lcm();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  lcm = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    save();\n    yylcm();\n    restore();\n    return expanding = prev_expanding;\n  };\n\n  yylcm = function() {\n    expanding = 1;\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    gcd();\n    push(p1);\n    divide();\n    push(p2);\n    divide();\n    return inverse();\n  };\n\n  Eval_leading = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p1);\n    }\n    return leading();\n  };\n\n  //define P p1\n  //define X p2\n  //define N p3\n  leading = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p1); // N = degree of P\n    push(p2);\n    degree();\n    p3 = pop();\n    push(p1); // divide through by X ^ N\n    push(p2);\n    push(p3);\n    power();\n    divide();\n    push(p2); // remove terms that depend on X\n    filter();\n    return restore();\n  };\n\n  Eval_legendre = function() {\n    // 1st arg\n    push(cadr(p1));\n    Eval();\n    // 2nd arg\n    push(caddr(p1));\n    Eval();\n    // 3rd arg (optional)\n    push(cadddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(0);\n    } else {\n      push(p2);\n    }\n    return legendre();\n  };\n\n  //define X p1\n  //define N p2\n  //define M p3\n  //define Y p4\n  //define Y0 p5\n  //define Y1 p6\n  legendre = function() {\n    save();\n    __legendre();\n    return restore();\n  };\n\n  __legendre = function() {\n    var m, n;\n    m = 0;\n    n = 0;\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    n = pop_integer();\n    push(p3);\n    m = pop_integer();\n    if (n < 0 || isNaN(n) || m < 0 || isNaN(m)) {\n      push_symbol(LEGENDRE);\n      push(p1);\n      push(p2);\n      push(p3);\n      list(4);\n      return;\n    }\n    if (issymbol(p1)) {\n      __legendre2(n, m);\n    } else {\n      p4 = p1;\n      p1 = symbol(SECRETX);\n      __legendre2(n, m);\n      p1 = p4;\n      push(symbol(SECRETX));\n      push(p1);\n      subst();\n      Eval();\n    }\n    return __legendre3(m);\n  };\n\n  __legendre2 = function(n, m) {\n    var i, i1, o, ref, ref1, results;\n    i = 0;\n    push_integer(1);\n    push_integer(0);\n    p6 = pop();\n//  i=1  p5 = 0 \n//    p6 = 1 \n//    ((2*i+1)*x*p6 - i*p5) / i = x\n\n//  i=2  p5 = 1\n//    p6 = x\n//    ((2*i+1)*x*p6 - i*p5) / i = -1/2 + 3/2*x^2\n\n//  i=3  p5 = x\n//    p6 = -1/2 + 3/2*x^2\n//    ((2*i+1)*x*p6 - i*p5) / i = -3/2*x + 5/2*x^3\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      p5 = p6;\n      p6 = pop();\n      push_integer(2 * i + 1);\n      push(p1);\n      multiply();\n      push(p6);\n      multiply();\n      push_integer(i);\n      push(p5);\n      multiply();\n      subtract();\n      push_integer(i + 1);\n      divide();\n    }\n    results = [];\n    for (i = i1 = 0, ref1 = m; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      push(p1);\n      results.push(derivative());\n    }\n    return results;\n  };\n\n  // moveTos tos * (-1)^m * (1-x^2)^(m/2)\n  __legendre3 = function(m) {\n    if (m === 0) {\n      return;\n    }\n    if (car(p1) === symbol(COS)) {\n      push(cadr(p1));\n      sine();\n      square();\n    } else if (car(p1) === symbol(SIN)) {\n      push(cadr(p1));\n      cosine();\n      square();\n    } else {\n      push_integer(1);\n      push(p1);\n      square();\n      subtract();\n    }\n    push_integer(m);\n    push_rational(1, 2);\n    multiply();\n    power();\n    multiply();\n    if (m % 2) {\n      return negate();\n    }\n  };\n\n  // Create a list from n things on the stack.\n\n  // n is an integer\n  list = function(n) {\n    var listIterator, o, ref, results;\n    listIterator = 0;\n    push(symbol(NIL));\n    results = [];\n    for (listIterator = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); listIterator = 0 <= ref ? ++o : --o) {\n      results.push(cons());\n    }\n    return results;\n  };\n\n  // Natural logarithm.\n\n  // Note that we use the mathematics / Javascript / Mathematica\n  // convention that \"log\" is indeed the natural logarithm.\n\n  // In engineering, biology, astronomy, \"log\" can stand instead\n  // for the \"common\" logarithm i.e. base 10. Also note that Google\n  // calculations use log for the common logarithm.\n  Eval_log = function() {\n    push(cadr(p1));\n    Eval();\n    return logarithm();\n  };\n\n  logarithm = function() {\n    save();\n    yylog();\n    return restore();\n  };\n\n  yylog = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (p1 === symbol(E)) {\n      push_integer(1);\n      return;\n    }\n    if (equaln(p1, 1)) {\n      push_integer(0);\n      return;\n    }\n    if (isnegativenumber(p1)) {\n      push(p1);\n      negate();\n      logarithm();\n      push(imaginaryunit);\n      if (evaluatingAsFloats) {\n        push_double(Math.PI);\n      } else {\n        push_symbol(PI);\n      }\n      multiply();\n      add();\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.log(p1.d);\n      push_double(d);\n      return;\n    }\n    // rational number and not an integer?\n    if (isfraction(p1)) {\n      push(p1);\n      numerator();\n      logarithm();\n      push(p1);\n      denominator();\n      logarithm();\n      subtract();\n      return;\n    }\n    // log(a ^ b) --> b log(a)\n    if (car(p1) === symbol(POWER)) {\n      push(caddr(p1));\n      push(cadr(p1));\n      logarithm();\n      multiply();\n      return;\n    }\n    // log(a * b) --> log(a) + log(b)\n    if (car(p1) === symbol(MULTIPLY)) {\n      push_integer(0);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        logarithm();\n        add();\n        p1 = cdr(p1);\n      }\n      return;\n    }\n    push_symbol(LOG);\n    push(p1);\n    return list(2);\n  };\n\n  // now this might be a little confusing, so a\n  // clarification is in order.\n  // First off, at the scripting level most things\n  // as they are handled get evalled.\n  // That means that they are recursively \"calculated\"\n  // as much as possible, i.e. variables are recursively\n  // looked up for their values, operators are applied,\n  // functions are ivoked, etc.\n  // I.e. while scripting, most things are\n  // evalled all the times.\n  // e.g. if I type\n  //   x = 1+1\n  // then x is actually assigned 2, not 1+1\n  // Something that helps a little is \"quote\", e.g.\n  // If I assign\n  //   x = quote(1+1)\n  // then x actually contains 1+1, not 2.\n  // But then x is evaluated as soon as I type\n  //   x // gives \"2\" as x is evaluated\n\n  // Evaluation is great, but sometimes one wants\n  // to look at the actual structure of an expression\n  // or a content of a variable, without those\n  // being evaluated first.\n\n  // for example I might type\n  //   x = a + b\n  //   a = 1\n  //   b = 2\n  // and from this point on printing the actual\n  // structure of x is impossible, because from\n  // now on any evaluation of x will give \"3\"\n  // You might say \"but you have x defined up there,\n  // what's the point of printing it out?\", to which\n  // the answer is that one might do further\n  // substitutions or transformations of special kind\n  // to x. One might want to look at the structure\n  // and it might be complex or impossible.\n\n  // So this function does that.\n  // If it's passed a variable, then it\n  // DOES NOT eval the variable, RATHER\n  // it prints the content of the variable without\n  // evaluating it.\n  // In the other cases it works like \"quote\" e.g.\n  // it just gives the argument as is, again without\n  // evaluating it.\n\n  // In the following examples, for brevity, I just\n  // use\n  //   x = quote(1+2)\n  // instead of this:\n  //   x = a + b\n  //   a = 1\n  //   b = 2\n  // to put a structure in x that is easy to see whether\n  // it's avaulated or not.\n\n  // So lookup allows this:\n  //   x = quote(1+2)\n  //   print(lookup(x)) # gives 1+2\n\n  // Note that there would be potentially a way\n  // to achieve a similar result, you could do:\n  //   x = quote(quote(1+2))\n  //   print(x)\n  // but you can't always control x to contain\n  // two quotes like that...\n  // note how two \"quotes\" are needed because\n  // if you just put one, then\n  // x would indeed contain 1+2 instead of 3,\n  // but then print would evaluate that to 3:\n  //   x = quote(1+2) # now x contains 1+2, not 3\n  //   print(x) # but x evaluated here to 3\n\n  // Other workarounds would not work:\n  //   x = quote(1+2)\n  //   print(quote(x))\n  // would not work because quote(x) literally means 'x'\n  // so 'x' is printed instead of its content.\n\n  // Note also that lookup allows you to copy\n  // the structure of a variable to another:\n  //   x = a + b\n  //   a = 1\n  //   b = 2\n  // now:\n  //   y = x # y contains the number 3 and prints to 3\n  //   y = lookup(x) # y contains \"a+b\" and prints to 3\n  //   y = quote(x) # y contains \"x\" and prints to 3\n  // note that in the first and second case y is\n  // independent from x, i.e. changing x doesn't change y\n  // while in the last case it is.\n\n  // Another similar simple example is when doing something\n  // like this:\n  //    x = y\n  //    y = z\n  //    x\n  //       => gives z\n  //    lookup(x)\n  //       => gives y\n  //          i.e. lookup allows you to see the immediate\n  //          content of x, rather than the evaluation which\n  //          would end up in x -> y -> z\n  // Note that if you invert the order of the assignments i.e.\n  //    y = z\n  //    x = y\n  // Then at this point x immediately contains z, since the\n  // assignment x = y is not quoted, hence y is evaluated to z\n  // when assigned to x.\n  //    lookup(x)\n  //       => gives z\n  Eval_lookup = function() {\n    p1 = cadr(p1);\n    if (!iscons(p1) && cadr(p1).k === SYM) {\n      p1 = get_binding(p1);\n    }\n    return push(p1); // Bignum addition and subtraction\n  };\n\n  \n  //static unsigned int *addf(unsigned int *, unsigned int *)\n  //static unsigned int *subf(unsigned int *, unsigned int *)\n  //static int ucmp(unsigned int *, unsigned int *)\n  madd = function(a, b) {\n    return a.add(b);\n  };\n\n  msub = function(a, b) {\n    return a.subtract(b);\n  };\n\n  addf = function(a, b) {\n    return a.add(b);\n  };\n\n  subf = function(a, b) {\n    return a.subtract(b);\n  };\n\n  // unsigned compare\n  ucmp = function(a, b) {\n    return a.compareAbs(b);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Bignum GCD\n\n  //  Uses the binary GCD algorithm.\n\n  //  See \"The Art of Computer Programming\" p. 338.\n\n  //  mgcd always returns a positive value\n\n  //  mgcd(0, 0) = 0\n\n  //  mgcd(u, 0) = |u|\n\n  //  mgcd(0, v) = |v|\n\n  //-----------------------------------------------------------------------------\n  mgcd = function(u, v) {\n    return bigInt.gcd(u, v);\n  };\n\n  //if SELFTEST\n\n  // s is a string\n  new_string = function(s) {\n    var theNewString;\n    theNewString = new U();\n    theNewString.k = STR;\n    theNewString.str = s;\n    return theNewString;\n  };\n\n  out_of_memory = function() {\n    return stop(\"out of memory\");\n  };\n\n  // both ints\n  push_zero_matrix = function(i, j) {\n    push(alloc_tensor(i * j));\n    stack[tos - 1].tensor.ndim = 2;\n    stack[tos - 1].tensor.dim[0] = i;\n    return stack[tos - 1].tensor.dim[1] = j;\n  };\n\n  push_identity_matrix = function(n) {\n    var i, o, ref;\n    push_zero_matrix(n, n);\n    for (i = o = 0, ref = n; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      stack[tos - 1].tensor.elem[i * n + i] = one;\n    }\n    return check_tensor_dimensions(stack[tos - 1]);\n  };\n\n  push_cars = function(p) {\n    var results;\n    results = [];\n    while (iscons(p)) {\n      push(car(p));\n      results.push(p = cdr(p));\n    }\n    return results;\n  };\n\n  // see cmp_expr definition, this\n  // function alone just does simple structure comparison\n  // or compares numbers (either rationals or integers or doubles)\n  // but can't be used alone to test\n  // more complex mathematical equalities...\n  equal = function(p1, p2) {\n    if (cmp_expr(p1, p2) === 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  lessp = function(p1, p2) {\n    if (cmp_expr(p1, p2) < 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  sign = function(n) {\n    if (n < 0) {\n      return -1;\n    } else if (n > 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  // compares whether two expressions\n  // have the same structure.\n  // For example this method alone\n  // would compare \"1+1\" and \"2\"\n  // as different.\n  // It just so happens though that one oftens\n  // evaluates the two sides before passing them\n  // to this function, so chances are that the two\n  // sides have the same normal form.\n  // Even a simple evaluation might not cut it\n  // though... a simplification of both sides\n  // would then help. And even that might not\n  // cut it in some cases...\n  cmp_expr = function(p1, p2) {\n    var n;\n    n = 0;\n    if (p1 === p2) {\n      return 0;\n    }\n    if (p1 === symbol(NIL)) {\n      return -1;\n    }\n    if (p2 === symbol(NIL)) {\n      return 1;\n    }\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      return sign(compare_numbers(p1, p2));\n    }\n    if (isNumericAtom(p1)) {\n      return -1;\n    }\n    if (isNumericAtom(p2)) {\n      return 1;\n    }\n    if (isstr(p1) && isstr(p2)) {\n      return sign(strcmp(p1.str, p2.str));\n    }\n    if (isstr(p1)) {\n      return -1;\n    }\n    if (isstr(p2)) {\n      return 1;\n    }\n    if (issymbol(p1) && issymbol(p2)) {\n      return sign(strcmp(get_printname(p1), get_printname(p2)));\n    }\n    if (issymbol(p1)) {\n      return -1;\n    }\n    if (issymbol(p2)) {\n      return 1;\n    }\n    if (istensor(p1) && istensor(p2)) {\n      return compare_tensors(p1, p2);\n    }\n    if (istensor(p1)) {\n      return -1;\n    }\n    if (istensor(p2)) {\n      return 1;\n    }\n    // recursion here\n    while (iscons(p1) && iscons(p2)) {\n      n = cmp_expr(car(p1), car(p2));\n      if (n !== 0) {\n        return n;\n      }\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n    if (iscons(p2)) {\n      return -1;\n    }\n    if (iscons(p1)) {\n      return 1;\n    }\n    return 0;\n  };\n\n  length = function(p) {\n    var n;\n    n = 0;\n    while (iscons(p)) {\n      p = cdr(p);\n      n++;\n    }\n    return n;\n  };\n\n  unique = function(p) {\n    save();\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n    unique_f(p);\n    if (p2 !== symbol(NIL)) {\n      p1 = symbol(NIL);\n    }\n    p = p1;\n    restore();\n    return p;\n  };\n\n  unique_f = function(p) {\n    if (isstr(p)) {\n      if (p1 === symbol(NIL)) {\n        p1 = p;\n      } else if (p !== p1) {\n        p2 = p;\n      }\n      return;\n    }\n    while (iscons(p)) {\n      unique_f(car(p));\n      if (p2 !== symbol(NIL)) {\n        return;\n      }\n      p = cdr(p);\n    }\n  };\n\n  ssqrt = function() {\n    push_rational(1, 2);\n    return power();\n  };\n\n  yyexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    Eval();\n    return expanding = prev_expanding;\n  };\n\n  exponential = function() {\n    push_symbol(E);\n    swap();\n    return power();\n  };\n\n  square = function() {\n    push_integer(2);\n    return power();\n  };\n\n  //__cmp = (p1, p2) ->\n  //  return cmp_expr(p1, p2)\n\n  // n an integer\n  sort_stack = function(n) {\n    var h, subsetOfStack;\n    //qsort(stack + tos - n, n, sizeof (U *), __cmp)\n    h = tos - n;\n    subsetOfStack = stack.slice(h, h + n);\n    subsetOfStack.sort(cmp_expr);\n    return stack = stack.slice(0, h).concat(subsetOfStack).concat(stack.slice(h + n));\n  };\n\n  $.equal = equal;\n\n  $.length = length;\n\n  // Bignum multiplication and division\n  mmul = function(a, b) {\n    return a.multiply(b);\n  };\n\n  mdiv = function(a, b) {\n    return a.divide(b);\n  };\n\n  // a = a + b\n  /*\n  static void\n  addf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # can be signed or unsigned \n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] + b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n\n  // a = a - b\n\n  static void\n  subf(unsigned int *a, unsigned int *b, int len)\n  {\n    int i\n    long long t = 0; # must be signed\n    for (i = 0; i < len; i++) {\n      t += (long long) a[i] - b[i]\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n  }\n\n  // a = b * c\n\n  // 0xffffffff + 0xffffffff * 0xffffffff == 0xffffffff00000000\n\n  static void\n  mulf(unsigned int *a, unsigned int *b, int len, unsigned int c)\n  {\n    int i\n    unsigned long long t = 0; # must be unsigned\n    for (i = 0; i < len; i++) {\n      t += (unsigned long long) b[i] * c\n      a[i] = (unsigned int) t\n      t >>= 32\n    }\n    a[i] = (unsigned int) t\n  }\n  */\n  mmod = function(a, b) {\n    return a.mod(b);\n  };\n\n  // return both quotient and remainder of a/b\n  // we'd have this method as divmod(number)\n  // but obviously doesn't change the passed parameters\n  mdivrem = function(a, b) {\n    var toReturn;\n    toReturn = a.divmod(b);\n    return [toReturn.quotient, toReturn.remainder];\n  };\n\n  //if SELFTEST\n\n  // small integer tests\n  Eval_mod = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return mod();\n  };\n\n  mod = function() {\n    var n;\n    n = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (isZeroAtomOrTensor(p2)) {\n      stop(\"mod function: divide by zero\");\n    }\n    if (!isNumericAtom(p1) || !isNumericAtom(p2)) {\n      push_symbol(MOD);\n      push(p1);\n      push(p2);\n      list(3);\n      restore();\n      return;\n    }\n    if (isdouble(p1)) {\n      push(p1);\n      n = pop_integer();\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n      push_integer(n);\n      p1 = pop();\n    }\n    if (isdouble(p2)) {\n      push(p2);\n      n = pop_integer();\n      if (isNaN(n)) {\n        stop(\"mod function: cannot convert float value to integer\");\n      }\n      push_integer(n);\n      p2 = pop();\n    }\n    if (!isinteger(p1) || !isinteger(p2)) {\n      stop(\"mod function: integer arguments expected\");\n    }\n    p3 = new U();\n    p3.k = NUM;\n    p3.q.a = mmod(p1.q.a, p2.q.a);\n    p3.q.b = mint(1);\n    push(p3);\n    return restore();\n  };\n\n  // Bignum power\n\n  // a is a bigint, n is a small normal int\n  mpow = function(a, n) {\n    return a.pow(n);\n  };\n\n  //if SELFTEST\n\n  // Bignum prime test (returns 1 if prime, 0 if not)\n\n  // Uses Algorithm P (probabilistic primality test) from p. 395 of\n  // \"The Art of Computer Programming, Volume 2\" by Donald E. Knuth.\n  mprime = function(n) {\n    return n.isProbablePrime();\n  };\n\n  //if SELFTEST\n\n  //-----------------------------------------------------------------------------\n\n  //  Bignum root\n\n  //  Returns null pointer if not perfect root.\n\n  //  The sign of the radicand is ignored.\n\n  //-----------------------------------------------------------------------------\n  mroot = function(n, index) {\n    var i, j, k, o, ref, x, y;\n    // this doesn't quite work\n    //return n.pow(1/index +  0.0000000000000001)\n\n    // sign of radicand ignored\n    n = n.abs();\n    i = 0;\n    j = 0;\n    k = 0;\n    if (index === 0) {\n      stop(\"root index is zero\");\n    }\n    // count number of bits\n    k = 0;\n    while (n.shiftRight(k) > 0) {\n      k++;\n    }\n    if (k === 0) {\n      return mint(0);\n    }\n    // initial guess\n    k = Math.floor((k - 1) / index);\n    j = Math.floor(k / 32 + 1);\n    x = bigInt(j);\n    for (i = o = 0, ref = j; (0 <= ref ? o < ref : o > ref); i = 0 <= ref ? ++o : --o) {\n      // zero-out the ith bit\n      x = x.and(bigInt(1).shiftLeft(i).not());\n    }\n    while (k >= 0) {\n      // set the kth bit\n      x = x.or(bigInt(1).shiftLeft(k));\n      y = mpow(x, index);\n      switch (mcmp(y, n)) {\n        case 0:\n          return x;\n        case 1:\n          //mp_clr_bit(x, k)\n          // clear the kth bit\n          x = x.and(bigInt(1).shiftLeft(k).not());\n      }\n      k--;\n    }\n    return 0;\n  };\n\n  //if SELFTEST\n\n  // Symbolic multiplication\n\n  // multiplication is commutative, so it can't be used\n  // e.g. on two matrices.\n  // But it can be used, say, on a scalar and a matrix.,\n  // so the output of a multiplication is not\n  // always a scalar.\n\n  //extern void append(void)\n  //static void parse_p1(void)\n  //static void parse_p2(void)\n  //static void __normalize_radical_factors(int)\n  DEBUG_MULTIPLY = false;\n\n  Eval_multiply = function() {\n    var results;\n    push(cadr(p1));\n    Eval();\n    p1 = cddr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      multiply();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  // this one doesn't eval the factors,\n  // so you pass i*(-1)^(1/2), it wouldnt't\n  // give -1, because i is not evalled\n  multiply = function() {\n    if (esc_flag) {\n      stop(\"escape key stop\");\n    }\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply_numbers();\n    } else {\n      save();\n      yymultiply();\n      return restore();\n    }\n  };\n\n  yymultiply = function() {\n    var h, i, n, o, ref, ref1;\n    h = 0;\n    i = 0;\n    n = 0;\n    // pop operands\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    // is either operand zero?\n    if (isZeroAtom(p1) || isZeroAtom(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n      return;\n    }\n    // is either operand a sum?\n\n    //console.log(\"yymultiply: expanding: \" + expanding)\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        multiply();\n        add();\n        p1 = cdr(p1);\n      }\n      return;\n    }\n    if (expanding && isadd(p2)) {\n      p2 = cdr(p2);\n      if (evaluatingAsFloats) {\n        push_double(0.0);\n      } else {\n        push(zero);\n      }\n      while (iscons(p2)) {\n        push(p1);\n        push(car(p2));\n        multiply();\n        add();\n        p2 = cdr(p2);\n      }\n      return;\n    }\n    if (!istensor(p1) && istensor(p2)) {\n      push(p1);\n      push(p2);\n      scalar_times_tensor();\n      return;\n    }\n    // tensor times scalar?\n    if (istensor(p1) && !istensor(p2)) {\n      push(p1);\n      push(p2);\n      tensor_times_scalar();\n      return;\n    }\n    // adjust operands\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n    } else {\n      push(p1);\n      list(1);\n      p1 = pop();\n    }\n    if (car(p2) === symbol(MULTIPLY)) {\n      p2 = cdr(p2);\n    } else {\n      push(p2);\n      list(1);\n      p2 = pop();\n    }\n    // handle numerical coefficients\n    if (isNumericAtom(car(p1)) && isNumericAtom(car(p2))) {\n      push(car(p1));\n      push(car(p2));\n      multiply_numbers();\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    } else if (isNumericAtom(car(p1))) {\n      push(car(p1));\n      p1 = cdr(p1);\n    } else if (isNumericAtom(car(p2))) {\n      push(car(p2));\n      p2 = cdr(p2);\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n    }\n    parse_p1();\n    parse_p2();\n    while (iscons(p1) && iscons(p2)) {\n      //    if (car(p1)->gamma && car(p2)->gamma) {\n      //      combine_gammas(h)\n      //      p1 = cdr(p1)\n      //      p2 = cdr(p2)\n      //      parse_p1()\n      //      parse_p2()\n      //      continue\n      //    }\n      if (caar(p1) === symbol(OPERATOR) && caar(p2) === symbol(OPERATOR)) {\n        push_symbol(OPERATOR);\n        push(cdar(p1));\n        push(cdar(p2));\n        append();\n        cons();\n        p1 = cdr(p1);\n        p2 = cdr(p2);\n        parse_p1();\n        parse_p2();\n        continue;\n      }\n      switch (cmp_expr(p3, p4)) {\n        case -1:\n          push(car(p1));\n          p1 = cdr(p1);\n          parse_p1();\n          break;\n        case 1:\n          push(car(p2));\n          p2 = cdr(p2);\n          parse_p2();\n          break;\n        case 0:\n          combine_factors(h);\n          p1 = cdr(p1);\n          p2 = cdr(p2);\n          parse_p1();\n          parse_p2();\n          break;\n        default:\n          stop(\"internal error 2\");\n      }\n    }\n    // push remaining factors, if any\n    while (iscons(p1)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    }\n    while (iscons(p2)) {\n      push(car(p2));\n      p2 = cdr(p2);\n    }\n    // normalize radical factors\n\n    // example: 2*2(-1/2) -> 2^(1/2)\n\n    // must be done after merge because merge may produce radical\n\n    // example: 2^(1/2-a)*2^a -> 2^(1/2)\n    __normalize_radical_factors(h);\n    // this hack should not be necessary, unless power returns a multiply\n\n    //for (i = h; i < tos; i++) {\n    //  if (car(stack[i]) == symbol(MULTIPLY)) {\n    //    multiply_all(tos - h)\n    //    return\n    //  }\n    //}\n    if (expanding) {\n      for (i = o = ref = h, ref1 = tos; (ref <= ref1 ? o < ref1 : o > ref1); i = ref <= ref1 ? ++o : --o) {\n        if (isadd(stack[i])) {\n          multiply_all(tos - h);\n          return;\n        }\n      }\n    }\n    // n is the number of result factors on the stack\n    n = tos - h;\n    if (n === 1) {\n      return;\n    }\n    // discard integer 1\n    if (isrational(stack[h]) && equaln(stack[h], 1)) {\n      if (n === 2) {\n        p7 = pop();\n        pop();\n        push(p7);\n      } else {\n        stack[h] = symbol(MULTIPLY);\n        list(n);\n      }\n      return;\n    }\n    list(n);\n    p7 = pop();\n    push_symbol(MULTIPLY);\n    push(p7);\n    return cons();\n  };\n\n  // Decompose a factor into base and power.\n\n  // input:  car(p1)    factor\n\n  // output:  p3    factor's base\n\n  //    p5    factor's power (possibly 1)\n  parse_p1 = function() {\n    p3 = car(p1);\n    p5 = evaluatingAsFloats ? one_as_double : one;\n    if (car(p3) === symbol(POWER)) {\n      p5 = caddr(p3);\n      return p3 = cadr(p3);\n    }\n  };\n\n  // Decompose a factor into base and power.\n\n  // input:  car(p2)    factor\n\n  // output:  p4    factor's base\n\n  //    p6    factor's power (possibly 1)\n  parse_p2 = function() {\n    p4 = car(p2);\n    p6 = evaluatingAsFloats ? one_as_double : one;\n    if (car(p4) === symbol(POWER)) {\n      p6 = caddr(p4);\n      return p4 = cadr(p4);\n    }\n  };\n\n  // h an integer\n  combine_factors = function(h) {\n    push(p4);\n    push(p5);\n    push(p6);\n    add();\n    power();\n    p7 = pop();\n    if (isNumericAtom(p7)) {\n      push(stack[h]);\n      push(p7);\n      multiply_numbers();\n      return stack[h] = pop();\n    } else if (car(p7) === symbol(MULTIPLY)) {\n      // power can return number * factor (i.e. -1 * i)\n      if (isNumericAtom(cadr(p7)) && cdddr(p7) === symbol(NIL)) {\n        push(stack[h]);\n        push(cadr(p7));\n        multiply_numbers();\n        stack[h] = pop();\n        return push(caddr(p7));\n      } else {\n        return push(p7);\n      }\n    } else {\n      return push(p7);\n    }\n  };\n\n  gp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, -6, -7, -8, -3, -4, -5, 13, 14, 15, -16, 9, 10, 11, -12], [0, 0, 6, -1, -11, 10, -2, -15, 14, 12, -5, 4, -9, 16, -8, 7, -13], [0, 0, 7, 11, -1, -9, 15, -2, -13, 5, 12, -3, -10, 8, 16, -6, -14], [0, 0, 8, -10, 9, -1, -14, 13, -2, -4, 3, 12, -11, -7, 6, 16, -15], [0, 0, 3, 2, 15, -14, 1, 11, -10, 16, -8, 7, 13, 12, -5, 4, 9], [0, 0, 4, -15, 2, 13, -11, 1, 9, 8, 16, -6, 14, 5, 12, -3, 10], [0, 0, 5, 14, -13, 2, 10, -9, 1, -7, 6, 16, 15, -4, 3, 12, 11], [0, 0, 13, 12, -5, 4, 16, -8, 7, -1, -11, 10, -3, -2, -15, 14, -6], [0, 0, 14, 5, 12, -3, 8, 16, -6, 11, -1, -9, -4, 15, -2, -13, -7], [0, 0, 15, -4, 3, 12, -7, 6, 16, -10, 9, -1, -5, -14, 13, -2, -8], [0, 0, 16, -9, -10, -11, -13, -14, -15, -3, -4, -5, 1, -6, -7, -8, 2], [0, 0, 9, -16, 8, -7, -12, 5, -4, -2, -15, 14, 6, -1, -11, 10, 3], [0, 0, 10, -8, -16, 6, -5, -12, 3, 15, -2, -13, 7, 11, -1, -9, 4], [0, 0, 11, 7, -6, -16, 4, -3, -12, -14, 13, -2, 8, -10, 9, -1, 5], [0, 0, 12, 13, 14, 15, 9, 10, 11, -6, -7, -8, -2, -3, -4, -5, -1]];\n\n  //if 0\n\n  // h an int\n  combine_gammas = function(h) {\n    var n;\n    n = gp[Math.floor(p1.gamma)][Math.floor(p2.gamma)];\n    if (n < 0) {\n      n = -n;\n      push(stack[h]);\n      negate();\n      stack[h] = pop();\n    }\n    if (n > 1) {\n      return push(_gamma[n]);\n    }\n  };\n\n  // this is useful for example when you are just adding/removing\n  // factors from an already factored quantity.\n  // e.g. if you factored x^2 + 3x + 2 into (x+1)(x+2)\n  // and you want to divide by (x+1) , i.e. you multiply by (x-1)^-1,\n  // then there is no need to expand.\n  multiply_noexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply();\n    return expanding = prev_expanding;\n  };\n\n  // multiply n factors on stack\n\n  // n an integer\n  multiply_all = function(n) {\n    var h, i, o, ref;\n    i = 0;\n    if (n === 1) {\n      return;\n    }\n    if (n === 0) {\n      push(evaluatingAsFloats ? one_as_double : one);\n      return;\n    }\n    h = tos - n;\n    push(stack[h]);\n    for (i = o = 1, ref = n; (1 <= ref ? o < ref : o > ref); i = 1 <= ref ? ++o : --o) {\n      push(stack[h + i]);\n      multiply();\n    }\n    stack[h] = pop();\n    return moveTos(h + 1);\n  };\n\n  // n an integer\n  multiply_all_noexpand = function(n) {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    multiply_all(n);\n    return expanding = prev_expanding;\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Symbolic division, or numeric division if doubles are found.\n\n  //  Input:    Dividend and divisor on stack\n\n  //  Output:    Quotient on stack\n\n  //-----------------------------------------------------------------------------\n  divide = function() {\n    if (isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return divide_numbers();\n    } else {\n      inverse();\n      return multiply();\n    }\n  };\n\n  // this is different from inverse of a matrix (inv)!\n  inverse = function() {\n    if (isNumericAtom(stack[tos - 1])) {\n      return invert_number();\n    } else {\n      push_integer(-1);\n      return power();\n    }\n  };\n\n  reciprocate = function() {\n    return inverse();\n  };\n\n  negate = function() {\n    if (isNumericAtom(stack[tos - 1])) {\n      return negate_number();\n    } else {\n      if (evaluatingAsFloats) {\n        push_double(-1.0);\n      } else {\n        push_integer(-1);\n      }\n      return multiply();\n    }\n  };\n\n  negate_expand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 1;\n    negate();\n    return expanding = prev_expanding;\n  };\n\n  negate_noexpand = function() {\n    var prev_expanding;\n    prev_expanding = expanding;\n    expanding = 0;\n    negate();\n    return expanding = prev_expanding;\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Normalize radical factors\n\n  //  Input:    stack[h]  Coefficient factor, possibly 1\n\n  //      stack[h + 1]  Second factor\n\n  //      stack[tos - 1]  Last factor\n\n  //  Output:    Reduced coefficent and normalized radicals (maybe)\n\n  //  Example:  2*2^(-1/2) -> 2^(1/2)\n\n  //  (power number number) is guaranteed to have the following properties:\n\n  //  1. Base is an integer\n\n  //  2. Absolute value of exponent < 1\n\n  //  These properties are assured by the power function.\n\n  //-----------------------------------------------------------------------------\n\n  //define A p1\n  //define B p2\n\n  //define BASE p3\n  //define EXPO p4\n\n  //define TMP p5\n\n  // h is an int\n  __normalize_radical_factors = function(h) {\n    var i, i1, j1, o, ref, ref1, ref2, ref3, ref4, ref5;\n    i = 0;\n    // if coeff is 1 or floating then don't bother\n    if (isplusone(stack[h]) || isminusone(stack[h]) || isdouble(stack[h])) {\n      return;\n    }\n// if no radicals then don't bother\n    for (i = o = ref = h + 1, ref1 = tos; (ref <= ref1 ? o < ref1 : o > ref1); i = ref <= ref1 ? ++o : --o) {\n      if (__is_radical_number(stack[i])) {\n        break;\n      }\n    }\n    if (i === tos) {\n      return;\n    }\n    // ok, try to simplify\n    save();\n    // numerator\n    push(stack[h]);\n    mp_numerator();\n    if (DEBUG_MULTIPLY) {\n      console.log(\"__normalize_radical_factors numerator: \" + stack[tos - 1]);\n    }\n    p1 = pop();\n    for (i = i1 = ref2 = h + 1, ref3 = tos; (ref2 <= ref3 ? i1 < ref3 : i1 > ref3); i = ref2 <= ref3 ? ++i1 : --i1) {\n      if (isplusone(p1) || isminusone(p1)) { // p1 is A\n        break;\n      }\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n      if (!isnegativenumber(p4)) { //p4 is EXPO\n        continue;\n      }\n      // numerator divisible by p3 (base)?\n      push(p1);\n      push(p3);\n      divide();\n      p5 = pop();\n      if (!isinteger(p5)) { //p5 is TMP\n        continue;\n      }\n      // reduce numerator\n      p1 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(evaluatingAsFloats ? one_as_double : one);\n      push(p4);\n      add();\n      list(3);\n      stack[i] = pop();\n    }\n    // denominator\n    push(stack[h]);\n    mp_denominator();\n    if (DEBUG_MULTIPLY) {\n      console.log(\"__normalize_radical_factors denominator: \" + stack[tos - 1]);\n    }\n    p2 = pop();\n    for (i = j1 = ref4 = h + 1, ref5 = tos; (ref4 <= ref5 ? j1 < ref5 : j1 > ref5); i = ref4 <= ref5 ? ++j1 : --j1) {\n      if (isplusone(p2)) { // p2 is B\n        break;\n      }\n      if (!__is_radical_number(stack[i])) {\n        continue;\n      }\n      p3 = cadr(stack[i]);\n      p4 = caddr(stack[i]);\n      if (isnegativenumber(p4)) { //p4 is EXPO\n        continue;\n      }\n      // denominator divisible by p3? #p3 is BASE\n      push(p2);\n      push(p3);\n      divide();\n      p5 = pop();\n      if (!isinteger(p5)) { //p5 is TMP\n        continue;\n      }\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical p5: \" + p5.toString());\n      }\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical top stack: \" + stack[tos - 1]);\n      }\n      // reduce denominator\n      p2 = p5;\n      push_symbol(POWER);\n      push(p3);\n      push(p4);\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical p3: \" + p3.toString());\n      }\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical p4: \" + p4.toString());\n      }\n      push(one);\n      subtract();\n      if (dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication) {\n        if (isinteger(p3) && !isinteger(stack[tos - 1]) && isnegativenumber(stack[tos - 1])) {\n          // bail out,\n          // we want to avoid going ahead with the subtraction of\n          // the exponents, because that would turn a perfectly good\n          // integer exponent in the denominator into a fractional one\n          // i.e. a radical.\n          // Note that this only prevents new radicals ending up\n          // in the denominator, it doesn't fix existing ones.\n          pop();\n          pop();\n          pop();\n          push(p1);\n          push(p3);\n          divide();\n          p1 = pop();\n          break;\n        }\n      }\n      if (DEBUG_MULTIPLY) {\n        console.log(\"__new radical exponent: \" + stack[tos - 1]);\n      }\n      list(3);\n      stack[i] = pop();\n    }\n    // reconstitute the coefficient\n    push(p1);\n    push(p2);\n    divide();\n    stack[h] = pop();\n    return restore();\n  };\n\n  // don't include i\n  // p is a U\n  // TODO should this be in is.coffee ?\n  __is_radical_number = function(p) {\n    // don't use i\n    return car(p) === symbol(POWER) && isNumericAtom(cadr(p)) && isfraction(caddr(p)) && !isminusone(cadr(p));\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  > a*hilbert(2)\n  //  ((a,1/2*a),(1/2*a,1/3*a))\n\n  //  Note that \"a\" is presumed to be a scalar. Is this correct?\n\n  //  Yes, because \"*\" has no meaning if \"a\" is a tensor.\n  //  To multiply tensors, \"dot\" or \"outer\" should be used.\n\n  //  > dot(a,hilbert(2))\n  //  dot(a,((1,1/2),(1/2,1/3)))\n\n  //  In this case \"a\" could be a scalar or tensor so the result is not\n  //  expanded.\n\n  //-----------------------------------------------------------------------------\n\n  // find the roots of a polynomial numerically\n  NROOTS_YMAX = 101;\n\n  NROOTS_DELTA = 1.0e-6;\n\n  NROOTS_EPSILON = 1.0e-9;\n\n  NROOTS_ABS = function(z) {\n    return Math.sqrt(z.r * z.r + z.i * z.i);\n  };\n\n  // random between -2 and 2\n  theRandom = 0.0;\n\n  NROOTS_RANDOM = function() {\n    //theRandom += 0.2\n    //return theRandom\n    return 4.0 * Math.random() - 2.0;\n  };\n\n  numericRootOfPolynomial = (function() {\n    class numericRootOfPolynomial {};\n\n    numericRootOfPolynomial.prototype.r = 0.0;\n\n    numericRootOfPolynomial.prototype.i = 0.0;\n\n    return numericRootOfPolynomial;\n\n  }).call(this);\n\n  nroots_a = new numericRootOfPolynomial();\n\n  nroots_b = new numericRootOfPolynomial();\n\n  nroots_x = new numericRootOfPolynomial();\n\n  nroots_y = new numericRootOfPolynomial();\n\n  nroots_fa = new numericRootOfPolynomial();\n\n  nroots_fb = new numericRootOfPolynomial();\n\n  nroots_dx = new numericRootOfPolynomial();\n\n  nroots_df = new numericRootOfPolynomial();\n\n  nroots_c = [];\n\n  for (initNRoots = o = 0, ref = NROOTS_YMAX; (0 <= ref ? o < ref : o > ref); initNRoots = 0 <= ref ? ++o : --o) {\n    nroots_c[initNRoots] = new numericRootOfPolynomial();\n  }\n\n  Eval_nroots = function() {\n    var h, i, i1, j1, k, l1, n, ref1, ref2, ref3;\n    h = 0;\n    i = 0;\n    k = 0;\n    n = 0;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    p2 = pop();\n    p1 = pop();\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"nroots: polynomial?\");\n    }\n    // mark the stack\n    h = tos;\n    // get the coefficients\n    n = coeff(p2, p1);\n    if (n > NROOTS_YMAX) {\n      stop(\"nroots: degree?\");\n    }\n// convert the coefficients to real and imaginary doubles\n    for (i = i1 = 0, ref1 = n; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      push(stack[h + i]);\n      real();\n      yyfloat();\n      Eval();\n      p1 = pop();\n      push(stack[h + i]);\n      imag();\n      yyfloat();\n      Eval();\n      p2 = pop();\n      if (!isdouble(p1) || !isdouble(p2)) {\n        stop(\"nroots: coefficients?\");\n      }\n      nroots_c[i].r = p1.d;\n      nroots_c[i].i = p2.d;\n    }\n    // pop the coefficients\n    moveTos(h);\n    // n is the number of coefficients, n = deg(p) + 1\n    monic(n);\n    for (k = j1 = ref2 = n; j1 > 1; k = j1 += -1) {\n      findroot(k);\n      if (Math.abs(nroots_a.r) < NROOTS_DELTA) {\n        nroots_a.r = 0.0;\n      }\n      if (Math.abs(nroots_a.i) < NROOTS_DELTA) {\n        nroots_a.i = 0.0;\n      }\n      push_double(nroots_a.r);\n      push_double(nroots_a.i);\n      push(imaginaryunit);\n      multiply();\n      add();\n      NROOTS_divpoly(k);\n    }\n    // now make n equal to the number of roots\n    n = tos - h;\n    if (n > 1) {\n      sort_stack(n);\n      p1 = alloc_tensor(n);\n      p1.tensor.ndim = 1;\n      p1.tensor.dim[0] = n;\n      for (i = l1 = 0, ref3 = n; (0 <= ref3 ? l1 < ref3 : l1 > ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n        p1.tensor.elem[i] = stack[h + i];\n      }\n      moveTos(h);\n      return push(p1);\n    }\n  };\n\n  // divide the polynomial by its leading coefficient\n  monic = function(n) {\n    var i1, k, ref1, t;\n    k = 0;\n    t = 0.0;\n    nroots_y.r = nroots_c[n - 1].r;\n    nroots_y.i = nroots_c[n - 1].i;\n    t = nroots_y.r * nroots_y.r + nroots_y.i * nroots_y.i;\n    for (k = i1 = 0, ref1 = n - 1; (0 <= ref1 ? i1 < ref1 : i1 > ref1); k = 0 <= ref1 ? ++i1 : --i1) {\n      nroots_c[k].r = (nroots_c[k].r * nroots_y.r + nroots_c[k].i * nroots_y.i) / t;\n      nroots_c[k].i = (nroots_c[k].i * nroots_y.r - nroots_c[k].r * nroots_y.i) / t;\n    }\n    nroots_c[n - 1].r = 1.0;\n    return nroots_c[n - 1].i = 0.0;\n  };\n\n  // uses the secant method\n  findroot = function(n) {\n    var i1, j, j1, k, nrabs, t;\n    j = 0;\n    k = 0;\n    t = 0.0;\n    if (NROOTS_ABS(nroots_c[0]) < NROOTS_DELTA) {\n      nroots_a.r = 0.0;\n      nroots_a.i = 0.0;\n      return;\n    }\n    for (j = i1 = 0; i1 < 100; j = ++i1) {\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n      compute_fa(n);\n      nroots_b.r = nroots_a.r;\n      nroots_b.i = nroots_a.i;\n      nroots_fb.r = nroots_fa.r;\n      nroots_fb.i = nroots_fa.i;\n      nroots_a.r = NROOTS_RANDOM();\n      nroots_a.i = NROOTS_RANDOM();\n      for (k = j1 = 0; j1 < 1000; k = ++j1) {\n        compute_fa(n);\n        nrabs = NROOTS_ABS(nroots_fa);\n        if (DEBUG) {\n          console.log(\"nrabs: \" + nrabs);\n        }\n        if (nrabs < NROOTS_EPSILON) {\n          return;\n        }\n        if (NROOTS_ABS(nroots_fa) < NROOTS_ABS(nroots_fb)) {\n          nroots_x.r = nroots_a.r;\n          nroots_x.i = nroots_a.i;\n          nroots_a.r = nroots_b.r;\n          nroots_a.i = nroots_b.i;\n          nroots_b.r = nroots_x.r;\n          nroots_b.i = nroots_x.i;\n          nroots_x.r = nroots_fa.r;\n          nroots_x.i = nroots_fa.i;\n          nroots_fa.r = nroots_fb.r;\n          nroots_fa.i = nroots_fb.i;\n          nroots_fb.r = nroots_x.r;\n          nroots_fb.i = nroots_x.i;\n        }\n        // dx = nroots_b - nroots_a\n        nroots_dx.r = nroots_b.r - nroots_a.r;\n        nroots_dx.i = nroots_b.i - nroots_a.i;\n        // df = fb - fa\n        nroots_df.r = nroots_fb.r - nroots_fa.r;\n        nroots_df.i = nroots_fb.i - nroots_fa.i;\n        // y = dx / df\n        t = nroots_df.r * nroots_df.r + nroots_df.i * nroots_df.i;\n        if (t === 0.0) {\n          break;\n        }\n        nroots_y.r = (nroots_dx.r * nroots_df.r + nroots_dx.i * nroots_df.i) / t;\n        nroots_y.i = (nroots_dx.i * nroots_df.r - nroots_dx.r * nroots_df.i) / t;\n        // a = b - y * fb\n        nroots_a.r = nroots_b.r - (nroots_y.r * nroots_fb.r - nroots_y.i * nroots_fb.i);\n        nroots_a.i = nroots_b.i - (nroots_y.r * nroots_fb.i + nroots_y.i * nroots_fb.r);\n      }\n    }\n    return stop(\"nroots: convergence error\");\n  };\n\n  compute_fa = function(n) {\n    var i1, k, ref1, results, t;\n    k = 0;\n    t = 0.0;\n    // x = a\n    nroots_x.r = nroots_a.r;\n    nroots_x.i = nroots_a.i;\n    // fa = c0 + c1 * x\n    nroots_fa.r = nroots_c[0].r + nroots_c[1].r * nroots_x.r - nroots_c[1].i * nroots_x.i;\n    nroots_fa.i = nroots_c[0].i + nroots_c[1].r * nroots_x.i + nroots_c[1].i * nroots_x.r;\n    results = [];\n    for (k = i1 = 2, ref1 = n; (2 <= ref1 ? i1 < ref1 : i1 > ref1); k = 2 <= ref1 ? ++i1 : --i1) {\n      // x = a * x\n      t = nroots_a.r * nroots_x.r - nroots_a.i * nroots_x.i;\n      nroots_x.i = nroots_a.r * nroots_x.i + nroots_a.i * nroots_x.r;\n      nroots_x.r = t;\n      // fa += c[k] * x\n      nroots_fa.r += nroots_c[k].r * nroots_x.r - nroots_c[k].i * nroots_x.i;\n      results.push(nroots_fa.i += nroots_c[k].r * nroots_x.i + nroots_c[k].i * nroots_x.r);\n    }\n    return results;\n  };\n\n  // divide the polynomial by x - a\n  NROOTS_divpoly = function(n) {\n    var i1, j1, k, ref1, ref2, results;\n    k = 0;\n    for (k = i1 = ref1 = n - 1; (ref1 <= 0 ? i1 < 0 : i1 > 0); k = ref1 <= 0 ? ++i1 : --i1) {\n      nroots_c[k - 1].r += nroots_c[k].r * nroots_a.r - nroots_c[k].i * nroots_a.i;\n      nroots_c[k - 1].i += nroots_c[k].i * nroots_a.r + nroots_c[k].r * nroots_a.i;\n    }\n    if (NROOTS_ABS(nroots_c[0]) > NROOTS_DELTA) {\n      stop(\"nroots: residual error\");\n    }\n    results = [];\n    for (k = j1 = 0, ref2 = n - 1; (0 <= ref2 ? j1 < ref2 : j1 > ref2); k = 0 <= ref2 ? ++j1 : --j1) {\n      nroots_c[k].r = nroots_c[k + 1].r;\n      results.push(nroots_c[k].i = nroots_c[k + 1].i);\n    }\n    return results;\n  };\n\n  Eval_numerator = function() {\n    push(cadr(p1));\n    Eval();\n    return numerator();\n  };\n\n  numerator = function() {\n    var h, theArgument;\n    h = 0;\n    theArgument = pop();\n    if (car(theArgument) === symbol(ADD)) {\n      push(theArgument);\n      //console.trace \"rationalising \"\n      rationalize();\n      theArgument = pop();\n    }\n    //console.log \"rationalised: \" + theArgument\n    if (car(theArgument) === symbol(MULTIPLY) && !isplusone(car(cdr(theArgument)))) {\n      h = tos;\n      theArgument = cdr(theArgument);\n      //console.log \"theArgument inside multiply: \" + theArgument\n      //console.log \"first term: \" + car(theArgument)\n      while (iscons(theArgument)) {\n        push(car(theArgument));\n        numerator();\n        theArgument = cdr(theArgument);\n      }\n      return multiply_all(tos - h);\n    } else if (isrational(theArgument)) {\n      push(theArgument);\n      return mp_numerator();\n    } else if (car(theArgument) === symbol(POWER) && isnegativeterm(caddr(theArgument))) {\n      return push(one);\n    } else {\n      return push(theArgument);\n    }\n  };\n\n  // Outer product of tensors\n  Eval_outer = function() {\n    var results;\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p1 = cdr(p1);\n    results = [];\n    while (iscons(p1)) {\n      push(car(p1));\n      Eval();\n      outer();\n      results.push(p1 = cdr(p1));\n    }\n    return results;\n  };\n\n  outer = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (istensor(p1) && istensor(p2)) {\n      yyouter();\n    } else {\n      push(p1);\n      push(p2);\n      if (istensor(p1)) {\n        tensor_times_scalar();\n      } else if (istensor(p2)) {\n        scalar_times_tensor();\n      } else {\n        multiply();\n      }\n    }\n    return restore();\n  };\n\n  yyouter = function() {\n    var i, i1, j, j1, k, l1, m1, ndim, nelem, ref1, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    k = 0;\n    ndim = 0;\n    nelem = 0;\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n    if (ndim > MAXDIM) {\n      stop(\"outer: rank of result exceeds maximum\");\n    }\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = i1 = 0, ref1 = p1.tensor.ndim; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    j = i;\n    for (i = j1 = 0, ref2 = p2.tensor.ndim; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      p3.tensor.dim[j + i] = p2.tensor.dim[i];\n    }\n    k = 0;\n    for (i = l1 = 0, ref3 = p1.tensor.nelem; (0 <= ref3 ? l1 < ref3 : l1 > ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n      for (j = m1 = 0, ref4 = p2.tensor.nelem; (0 <= ref4 ? m1 < ref4 : m1 > ref4); j = 0 <= ref4 ? ++m1 : --m1) {\n        push(p1.tensor.elem[i]);\n        push(p2.tensor.elem[j]);\n        multiply();\n        p3.tensor.elem[k++] = pop();\n      }\n    }\n    return push(p3);\n  };\n\n  partition = function() {\n    save();\n    p2 = pop();\n    p1 = pop();\n    push_integer(1);\n    p3 = pop();\n    p4 = p3;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      if (Find(car(p1), p2)) {\n        push(p4);\n        push(car(p1));\n        multiply();\n        p4 = pop();\n      } else {\n        push(p3);\n        push(car(p1));\n        multiply();\n        p3 = pop();\n      }\n      p1 = cdr(p1);\n    }\n    push(p3);\n    push(p4);\n    return restore();\n  };\n\n  /*\n    Add a pattern i.e. a substitution rule.\n    Substitution rule needs a template as first argument\n    and what to transform it to as second argument.\n    Optional third argument is a boolean test which\n    adds conditions to when the rule is applied.\n  */\n  // same as Eval_pattern but only leaves\n  // NIL on stack at return, hence gives no\n  // printout\n  Eval_silentpattern = function() {\n    Eval_pattern();\n    pop();\n    return push_symbol(NIL);\n  };\n\n  Eval_pattern = function() {\n    var firstArgument, patternPosition, secondArgument, stringKey, thirdArgument;\n    if (!iscons(cdr(p1))) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n    firstArgument = car(cdr(p1));\n    secondArgument = car(cdr(cdr(p1)));\n    if (secondArgument === symbol(NIL)) {\n      stop(\"pattern needs at least a template and a transformed version\");\n    }\n    if (!iscons(cdr(cdr(p1)))) {\n      thirdArgument = symbol(NIL);\n    } else {\n      thirdArgument = car(cdr(cdr(cdr(p1))));\n    }\n    if (equal(firstArgument, secondArgument)) {\n      stop(\"recursive pattern\");\n    }\n    // console.log \"Eval_pattern of \" + cdr(p1)\n    // this is likely to create garbage collection\n    // problems in the C version as it's an\n    // untracked reference\n    stringKey = \"template: \" + print_list(firstArgument);\n    stringKey += \" tests: \" + print_list(thirdArgument);\n    if (DEBUG) {\n      console.log(\"pattern stringkey: \" + stringKey);\n    }\n    patternPosition = userSimplificationsInStringForm.indexOf(stringKey);\n    // if pattern is not there yet, add it, otherwise replace it\n    if (patternPosition === -1) {\n      //console.log \"adding pattern because it doesn't exist: \" + cdr(p1)\n      userSimplificationsInStringForm.push(stringKey);\n      userSimplificationsInListForm.push(cdr(p1));\n    } else {\n      if (DEBUG) {\n        console.log(\"pattern already exists, replacing. \" + cdr(p1));\n      }\n      userSimplificationsInStringForm[patternPosition] = stringKey;\n      userSimplificationsInListForm[patternPosition] = cdr(p1);\n    }\n    // return the pattern node itself so we can\n    // give some printout feedback\n    push_symbol(PATTERN);\n    push(cdr(p1));\n    return list(2);\n  };\n\n  do_clearPatterns = function() {\n    userSimplificationsInListForm = [];\n    return userSimplificationsInStringForm = [];\n  };\n\n  Eval_clearpatterns = function() {\n    // this is likely to create garbage collection\n    // problems in the C version as it's an\n    // untracked reference\n    do_clearPatterns();\n    \n    // return nothing\n    return push_symbol(NIL);\n  };\n\n  Eval_patternsinfo = function() {\n    var patternsinfoToBePrinted;\n    patternsinfoToBePrinted = patternsinfo();\n    if (patternsinfoToBePrinted !== \"\") {\n      return push(new_string(patternsinfoToBePrinted));\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  patternsinfo = function() {\n    var i, i1, len, patternsinfoToBePrinted;\n    patternsinfoToBePrinted = \"\";\n    for (i1 = 0, len = userSimplificationsInListForm.length; i1 < len; i1++) {\n      i = userSimplificationsInListForm[i1];\n      patternsinfoToBePrinted += userSimplificationsInListForm + \"\\n\";\n    }\n    return patternsinfoToBePrinted;\n  };\n\n  Eval_polar = function() {\n    push(cadr(p1));\n    Eval();\n    return polar();\n  };\n\n  polar = function() {\n    // there are points where we turn polar\n    // representations into rect, we set a \"stack flag\"\n    // here to avoid that, so we don't undo the\n    // work that we are trying to do.\n    evaluatingPolar++;\n    save();\n    p1 = pop();\n    push(p1);\n    abs();\n    push(imaginaryunit);\n    push(p1);\n    arg();\n    multiply();\n    exponential();\n    multiply();\n    evaluatingPolar--;\n    return restore();\n  };\n\n  // Factor using the Pollard rho method\n  n_factor_number = 0;\n\n  factor_number = function() {\n    var h;\n    h = 0;\n    save();\n    p1 = pop();\n    // 0 or 1?\n    if (equaln(p1, 0) || equaln(p1, 1) || equaln(p1, -1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    n_factor_number = p1.q.a;\n    h = tos;\n    factor_a();\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      cons();\n    }\n    return restore();\n  };\n\n  // factor using table look-up, then switch to rho method if necessary\n\n  // From TAOCP Vol. 2 by Knuth, p. 380 (Algorithm A)\n  factor_a = function() {\n    var i1, k;\n    k = 0;\n    if (n_factor_number.isNegative()) {\n      n_factor_number = setSignTo(n_factor_number, 1);\n      push_integer(-1);\n    }\n    for (k = i1 = 0; i1 < 10000; k = ++i1) {\n      try_kth_prime(k);\n      // if n_factor_number is 1 then we're done\n      if (n_factor_number.compare(1) === 0) {\n        return;\n      }\n    }\n    return factor_b();\n  };\n\n  try_kth_prime = function(k) {\n    var count, d, q, r;\n    count = 0;\n    d = mint(primetab[k]);\n    count = 0;\n    while (1) {\n      // if n_factor_number is 1 then we're done\n      if (n_factor_number.compare(1) === 0) {\n        if (count) {\n          push_factor(d, count);\n        }\n        return;\n      }\n      [q, r] = mdivrem(n_factor_number, d);\n      // continue looping while remainder is zero\n      if (r.isZero()) {\n        count++;\n        n_factor_number = q;\n      } else {\n        break;\n      }\n    }\n    if (count) {\n      push_factor(d, count);\n    }\n    // q = n_factor_number/d, hence if q < d then\n    // n_factor_number < d^2 so n_factor_number is prime\n    if (mcmp(q, d) === -1) {\n      push_factor(n_factor_number, 1);\n      return n_factor_number = mint(1);\n    }\n  };\n\n  // From TAOCP Vol. 2 by Knuth, p. 385 (Algorithm B)\n  factor_b = function() {\n    var bigint_one, g, k, l, t, x, xprime;\n    k = 0;\n    l = 0;\n    bigint_one = mint(1);\n    x = mint(5);\n    xprime = mint(2);\n    k = 1;\n    l = 1;\n    while (1) {\n      if (mprime(n_factor_number)) {\n        push_factor(n_factor_number, 1);\n        return 0;\n      }\n      while (1) {\n        if (esc_flag) {\n          stop(\"esc\");\n        }\n        // g = gcd(x' - x, n_factor_number)\n        t = msub(xprime, x);\n        t = setSignTo(t, 1);\n        g = mgcd(t, n_factor_number);\n        if (MEQUAL(g, 1)) {\n          if (--k === 0) {\n            xprime = x;\n            l *= 2;\n            k = l;\n          }\n          // x = (x ^ 2 + 1) mod n_factor_number\n          t = mmul(x, x);\n          x = madd(t, bigint_one);\n          t = mmod(x, n_factor_number);\n          x = t;\n          continue;\n        }\n        push_factor(g, 1);\n        if (mcmp(g, n_factor_number) === 0) {\n          return -1;\n        }\n        // n_factor_number = n_factor_number / g\n        t = mdiv(n_factor_number, g);\n        n_factor_number = t;\n        // x = x mod n_factor_number\n        t = mmod(x, n_factor_number);\n        x = t;\n        // xprime = xprime mod n_factor_number\n        t = mmod(xprime, n_factor_number);\n        xprime = t;\n        break;\n      }\n    }\n  };\n\n  push_factor = function(d, count) {\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = d;\n    p1.q.b = mint(1);\n    push(p1);\n    if (count > 1) {\n      push_symbol(POWER);\n      swap();\n      p1 = new U();\n      p1.k = NUM;\n      p1.q.a = mint(count);\n      p1.q.b = mint(1);\n      push(p1);\n      return list(3);\n    }\n  };\n\n  DEBUG_POWER = false;\n\n  Eval_power = function() {\n    if (DEBUG_POWER) {\n      debugger;\n    }\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    return power();\n  };\n\n  power = function() {\n    save();\n    yypower();\n    return restore();\n  };\n\n  yypower = function() {\n    var b_isEven_and_c_isItsInverse, hopefullySimplified, inputBase, inputExp, isThisOne, is_a_moreThanZero, n;\n    if (DEBUG_POWER) {\n      debugger;\n    }\n    n = 0;\n    p2 = pop(); // exponent\n    p1 = pop(); // base\n    inputExp = p2;\n    inputBase = p1;\n    //debugger\n    if (DEBUG_POWER) {\n      console.log(\"POWER: \" + p1 + \" ^ \" + p2);\n    }\n    // first, some very basic simplifications right away\n\n    //  1 ^ a    ->  1\n    //  a ^ 0    ->  1\n    if (equal(p1, one) || isZeroAtomOrTensor(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    //  a ^ 1    ->  a\n    if (equal(p2, one)) {\n      push(p1);\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    //   -1 ^ -1    ->  -1\n    if (isminusone(p1) && isminusone(p2)) {\n      if (evaluatingAsFloats) {\n        push_double(1.0);\n      } else {\n        push(one);\n      }\n      negate();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    //   -1 ^ 1/2  ->  i\n    if (isminusone(p1) && (isoneovertwo(p2))) {\n      push(imaginaryunit);\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    //   -1 ^ -1/2  ->  -i\n    if (isminusone(p1) && isminusoneovertwo(p2)) {\n      push(imaginaryunit);\n      negate();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    //   -1 ^ rational\n    if (isminusone(p1) && !isdouble(p1) && isrational(p2) && !isinteger(p2) && ispositivenumber(p2) && !evaluatingAsFloats) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: -1 ^ rational\");\n      }\n      if (DEBUG_POWER) {\n        console.log(\" trick: p2.q.a , p2.q.b \" + p2.q.a + \" , \" + p2.q.b);\n      }\n      if (p2.q.a < p2.q.b) {\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n      } else {\n        push_symbol(MULTIPLY);\n        push(p1);\n        push_symbol(POWER);\n        push(p1);\n        push_rational(p2.q.a.mod(p2.q.b), p2.q.b);\n        list(3);\n        list(3);\n        if (DEBUG_POWER) {\n          console.log(\" trick applied : \" + stack[tos - 1]);\n        }\n      }\n      // evaluates clock form into\n      // rectangular form. This seems to give\n      // slightly better form to some test results.\n      rect();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // both base and exponent are rational numbers?\n    if (isrational(p1) && isrational(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: isrational(p1) && isrational(p2)\");\n      }\n      push(p1);\n      push(p2);\n      qpow();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // both base and exponent are either rational or double?\n    if (isNumericAtom(p1) && isNumericAtom(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: both base and exponent are either rational or double \");\n      }\n      if (DEBUG_POWER) {\n        console.log(\"POWER - isNumericAtom(p1) && isNumericAtom(p2)\");\n      }\n      push(p1);\n      push(p2);\n      dpow();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    if (istensor(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: istensor(p1) \");\n      }\n      power_tensor();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // if we only assume variables to be real, then |a|^2 = a^2\n    // (if x is complex this doesn't hold e.g. i, which makes 1 and -1\n    if (car(p1) === symbol(ABS) && iseveninteger(p2) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: even power of absolute of real value \");\n      }\n      push(cadr(p1));\n      push(p2);\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // e^log(...)\n    if (p1 === symbol(E) && car(p2) === symbol(LOG)) {\n      push(cadr(p2));\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // e^some_float\n    if (p1 === symbol(E) && isdouble(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: p1 == symbol(E) && isdouble(p2) \");\n      }\n      push_double(Math.exp(p2.d));\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // complex number in exponential form, get it to rectangular\n    // but only if we are not in the process of calculating a polar form,\n    // otherwise we'd just undo the work we want to do\n    if (p1 === symbol(E) && Find(p2, imaginaryunit) !== 0 && Find(p2, symbol(PI)) !== 0 && !evaluatingPolar) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      if (DEBUG_POWER) {\n        console.log(\"   power: turning complex exponential to rect: \" + stack[tos - 1]);\n      }\n      rect();\n      hopefullySimplified = pop();\n      if (Find(hopefullySimplified, symbol(PI)) === 0) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: turned complex exponential to rect: \" + hopefullySimplified);\n        }\n        push(hopefullySimplified);\n        return;\n      }\n    }\n    //  (a * b) ^ c  ->  (a ^ c) * (b ^ c)\n    // note that we can't in general do this, for example\n    // sqrt(x*y) != x^(1/2) y^(1/2) (counterexample\" x = -1 and y = -1)\n    // BUT we can carve-out here some cases where this\n    // transformation is correct\n    if (car(p1) === symbol(MULTIPLY) && isinteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: (a * b) ^ c  ->  (a ^ c) * (b ^ c) \");\n      }\n      p1 = cdr(p1);\n      push(car(p1));\n      push(p2);\n      power();\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        power();\n        multiply();\n        p1 = cdr(p1);\n      }\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // (a ^ b) ^ c  ->  a ^ (b * c)\n    // note that we can't in general do this, for example\n    // sqrt(x^y) !=  x^(1/2 y) (counterexample x = -1)\n    // BUT we can carve-out here some cases where this\n    // transformation is correct\n\n    // simple numeric check to see if a is a number > 0\n    is_a_moreThanZero = false;\n    if (isNumericAtom(cadr(p1))) {\n      is_a_moreThanZero = sign(compare_numbers(cadr(p1), zero));\n    }\n    if (car(p1) === symbol(POWER) && (isinteger(p2) || is_a_moreThanZero)) { // when a is >= 0\n      push(cadr(p1));\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    b_isEven_and_c_isItsInverse = false;\n    if (iseveninteger(caddr(p1))) {\n      push(caddr(p1));\n      push(p2);\n      multiply();\n      isThisOne = pop();\n      if (isone(isThisOne)) {\n        b_isEven_and_c_isItsInverse = true;\n      }\n    }\n    if (car(p1) === symbol(POWER) && b_isEven_and_c_isItsInverse) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: car(p1) == symbol(POWER) && b_isEven_and_c_isItsInverse \");\n      }\n      push(cadr(p1));\n      abs();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    //  when expanding,\n    //  (a + b) ^ n  ->  (a + b) * (a + b) ...\n    if (expanding && isadd(p1) && isNumericAtom(p2)) {\n      push(p2);\n      n = pop_integer();\n      if (n > 1 && !isNaN(n)) {\n        if (DEBUG_POWER) {\n          console.log(\"   power: expanding && isadd(p1) && isNumericAtom(p2) \");\n        }\n        power_sum(n);\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n        return;\n      }\n    }\n    //  sin(x) ^ 2n -> (1 - cos(x) ^ 2) ^ n\n    if (trigmode === 1 && car(p1) === symbol(SIN) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2) \");\n      }\n      push_integer(1);\n      push(cadr(p1));\n      cosine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    //  cos(x) ^ 2n -> (1 - sin(x) ^ 2) ^ n\n    if (trigmode === 2 && car(p1) === symbol(COS) && iseveninteger(p2)) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2) \");\n      }\n      push_integer(1);\n      push(cadr(p1));\n      sine();\n      push_integer(2);\n      power();\n      subtract();\n      push(p2);\n      push_rational(1, 2);\n      multiply();\n      power();\n      if (DEBUG_POWER) {\n        console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n      }\n      return;\n    }\n    // complex number? (just number, not expression)\n    if (iscomplexnumber(p1)) {\n      if (DEBUG_POWER) {\n        console.log(\" power - handling the case (a + ib) ^ n\");\n      }\n      // integer power?\n\n      // n will be negative here, positive n already handled\n      if (isinteger(p2)) {\n        //               /        \\  n\n        //         -n   |  a - ib  |\n        // (a + ib)   = | -------- |\n        //              |   2   2  |\n        //               \\ a + b  /\n        push(p1);\n        conjugate();\n        p3 = pop();\n        push(p3);\n        // gets the denominator\n        push(p3);\n        push(p1);\n        multiply();\n        divide();\n        if (!isone(p2)) {\n          push(p2);\n          negate();\n          power();\n        }\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n        return;\n      }\n      // noninteger or floating power?\n      if (isNumericAtom(p2)) {\n        push(p1);\n        abs();\n        push(p2);\n        power();\n        push_integer(-1);\n        push(p1);\n        arg();\n        push(p2);\n        multiply();\n        if (evaluatingAsFloats || (iscomplexnumberdouble(p1) && isdouble(p2))) {\n          // remember that the \"double\" type is\n          // toxic, i.e. it propagates, so we do\n          // need to evaluate PI to its actual double\n          // value\n          push_double(Math.PI);\n        } else {\n          //console.log(\"power pushing PI when p1 is: \" + p1 + \" and p2 is:\" + p2)\n          push(symbol(PI));\n        }\n        divide();\n        power();\n        multiply();\n        // if we calculate the power making use of arctan:\n        //  * it prevents nested radicals from being simplified\n        //  * results become really hard to manipulate afterwards\n        //  * we can't go back to other forms.\n        // so leave the power as it is.\n        if (avoidCalculatingPowersIntoArctans) {\n          if (Find(stack[tos - 1], symbol(ARCTAN))) {\n            pop();\n            push_symbol(POWER);\n            push(p1);\n            push(p2);\n            list(3);\n          }\n        }\n        if (DEBUG_POWER) {\n          console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n        }\n        return;\n      }\n    }\n    \n    //push(p1)\n    //abs()\n    //push(p2)\n    //power()\n    //push(symbol(E))\n    //push(p1)\n    //arg()\n    //push(p2)\n    //multiply()\n    //push(imaginaryunit)\n    //multiply()\n    //power()\n    //multiply()\n\n    if (simplify_polar()) {\n      if (DEBUG_POWER) {\n        console.log(\"   power: using simplify_polar\");\n      }\n      return;\n    }\n    if (DEBUG_POWER) {\n      console.log(\"   power: nothing can be done \");\n    }\n    push_symbol(POWER);\n    push(p1);\n    push(p2);\n    list(3);\n    if (DEBUG_POWER) {\n      return console.log(\"   power of \" + inputBase + \" ^ \" + inputExp + \": \" + stack[tos - 1]);\n    }\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Compute the power of a sum\n\n  //  Input:    p1  sum\n\n  //      n  exponent\n\n  //  Output:    Result on stack\n\n  //  Note:\n\n  //  Uses the multinomial series (see Math World)\n\n  //                          n              n!          n1   n2       nk\n  //  (a1 + a2 + ... + ak)  = sum (--------------- a1   a2   ... ak  )\n  //                               n1! n2! ... nk!\n\n  //  The sum is over all n1 ... nk such that n1 + n2 + ... + nk = n.\n\n  //-----------------------------------------------------------------------------\n\n  // first index is the term number 0..k-1, second index is the exponent 0..n\n\n  //define A(i, j) frame[(i) * (n + 1) + (j)]\n  power_sum = function(n) {\n    var a, i, i1, j, j1, k, l1, ref1, ref2, ref3;\n    a = [];\n    i = 0;\n    j = 0;\n    k = 0;\n    // number of terms in the sum\n    k = length(p1) - 1;\n    // local frame\n    push_frame(k * (n + 1));\n    // array of powers\n    p1 = cdr(p1);\n    for (i = i1 = 0, ref1 = k; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n      for (j = j1 = 0, ref2 = n; (0 <= ref2 ? j1 <= ref2 : j1 >= ref2); j = 0 <= ref2 ? ++j1 : --j1) {\n        push(car(p1));\n        push_integer(j);\n        power();\n        stack[frame + i * (n + 1) + j] = pop();\n      }\n      p1 = cdr(p1);\n    }\n    push_integer(n);\n    factorial();\n    p1 = pop();\n    for (i = l1 = 0, ref3 = k; (0 <= ref3 ? l1 < ref3 : l1 > ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n      a[i] = 0;\n    }\n    push(zero);\n    multinomial_sum(k, n, a, 0, n);\n    return pop_frame(k * (n + 1));\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Compute multinomial sum\n\n  //  Input:    k  number of factors\n\n  //      n  overall exponent\n\n  //      a  partition array\n\n  //      i  partition array index\n\n  //      m  partition remainder\n\n  //      p1  n!\n\n  //      A  factor array\n\n  //  Output:    Result on stack\n\n  //  Note:\n\n  //  Uses recursive descent to fill the partition array.\n\n  //-----------------------------------------------------------------------------\n\n  //int k, int n, int *a, int i, int m\n  multinomial_sum = function(k, n, a, i, m) {\n    var i1, j, j1, l1, ref1, ref2, ref3;\n    j = 0;\n    if (i < k - 1) {\n      for (j = i1 = 0, ref1 = m; (0 <= ref1 ? i1 <= ref1 : i1 >= ref1); j = 0 <= ref1 ? ++i1 : --i1) {\n        a[i] = j;\n        multinomial_sum(k, n, a, i + 1, m - j);\n      }\n      return;\n    }\n    a[i] = m;\n    // coefficient\n    push(p1);\n    for (j = j1 = 0, ref2 = k; (0 <= ref2 ? j1 < ref2 : j1 > ref2); j = 0 <= ref2 ? ++j1 : --j1) {\n      push_integer(a[j]);\n      factorial();\n      divide();\n    }\n// factors\n    for (j = l1 = 0, ref3 = k; (0 <= ref3 ? l1 < ref3 : l1 > ref3); j = 0 <= ref3 ? ++l1 : --l1) {\n      push(stack[frame + j * (n + 1) + a[j]]);\n      multiply();\n    }\n    return add();\n  };\n\n  // exp(n/2 i pi) ?\n\n  // p2 is the exponent expression\n\n  // clobbers p3\n  simplify_polar = function() {\n    var doNothing, n;\n    n = 0;\n    n = isquarterturn(p2);\n    switch (n) {\n      case 0:\n        doNothing = 1;\n        break;\n      case 1:\n        push_integer(1);\n        return 1;\n      case 2:\n        push_integer(-1);\n        return 1;\n      case 3:\n        push(imaginaryunit);\n        return 1;\n      case 4:\n        push(imaginaryunit);\n        negate();\n        return 1;\n    }\n    if (car(p2) === symbol(ADD)) {\n      p3 = cdr(p2);\n      while (iscons(p3)) {\n        n = isquarterturn(car(p3));\n        if (n) {\n          break;\n        }\n        p3 = cdr(p3);\n      }\n      switch (n) {\n        case 0:\n          return 0;\n        case 1:\n          push_integer(1);\n          break;\n        case 2:\n          push_integer(-1);\n          break;\n        case 3:\n          push(imaginaryunit);\n          break;\n        case 4:\n          push(imaginaryunit);\n          negate();\n      }\n      push(p2);\n      push(car(p3));\n      subtract();\n      exponential();\n      multiply();\n      return 1;\n    }\n    return 0;\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Look up the nth prime\n\n  //  Input:    n on stack (0 < n < 10001)\n\n  //  Output:    nth prime on stack\n\n  //-----------------------------------------------------------------------------\n  Eval_prime = function() {\n    push(cadr(p1));\n    Eval();\n    return prime();\n  };\n\n  prime = function() {\n    var n;\n    n = 0;\n    n = pop_integer();\n    if (n < 1 || n > MAXPRIMETAB) {\n      stop(\"prime: Argument out of range.\");\n    }\n    n = primetab[n - 1];\n    return push_integer(n);\n  };\n\n  power_str = \"^\";\n\n  codeGen = false;\n\n  // this is only invoked when user invokes\n  // \"print\" explicitly\n  Eval_print = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), printMode);\n    return push(symbol(NIL));\n  };\n\n  // this is only invoked when user invokes\n  // \"print2dascii\" explicitly\n  Eval_print2dascii = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_2DASCII);\n    return push(symbol(NIL));\n  };\n\n  // this is only invoked when user invokes\n  // \"printcomputer\" explicitly\n  Eval_printcomputer = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_COMPUTER);\n    return push(symbol(NIL));\n  };\n\n  // this is only invoked when user invokes\n  // \"printlatex\" explicitly\n  Eval_printlatex = function() {\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_LATEX);\n    return push(symbol(NIL));\n  };\n\n  // this is only invoked when user invokes\n  // \"printhuman\" explicitly\n  Eval_printhuman = function() {\n    var original_test_flag;\n    // test flag needs to be suspended\n    // because otherwise \"printcomputer\" mode\n    // will happen.\n    original_test_flag = test_flag;\n    test_flag = 0;\n    stringsEmittedByUserPrintouts += _print(cdr(p1), PRINTMODE_HUMAN);\n    test_flag = original_test_flag;\n    return push(symbol(NIL));\n  };\n\n  // this is only invoked when user invokes\n  // \"printlist\" explicitly\n  Eval_printlist = function() {\n    var beenPrinted;\n    beenPrinted = _print(cdr(p1), PRINTMODE_LIST);\n    stringsEmittedByUserPrintouts += beenPrinted;\n    return push(symbol(NIL));\n  };\n\n  _print = function(p, passedPrintMode) {\n    var accumulator, origPrintMode;\n    accumulator = \"\";\n    while (iscons(p)) {\n      push(car(p));\n      Eval();\n      p2 = pop();\n      origPrintMode = printMode;\n      if (passedPrintMode === PRINTMODE_COMPUTER) {\n        printMode = PRINTMODE_COMPUTER;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_FULL_PRINT);\n      } else if (passedPrintMode === PRINTMODE_HUMAN) {\n        printMode = PRINTMODE_HUMAN;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_PLAIN_PRINT);\n      } else if (passedPrintMode === PRINTMODE_2DASCII) {\n        printMode = PRINTMODE_2DASCII;\n        accumulator = print2dascii(p2);\n        rememberPrint(accumulator, LAST_2DASCII_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LATEX) {\n        printMode = PRINTMODE_LATEX;\n        accumulator = printline(p2);\n        rememberPrint(accumulator, LAST_LATEX_PRINT);\n      } else if (passedPrintMode === PRINTMODE_LIST) {\n        printMode = PRINTMODE_LIST;\n        accumulator = print_list(p2);\n        rememberPrint(accumulator, LAST_LIST_PRINT);\n      }\n      printMode = origPrintMode;\n      p = cdr(p);\n    }\n    if (DEBUG) {\n      console.log(\"emttedString from display: \" + stringsEmittedByUserPrintouts);\n    }\n    return accumulator;\n  };\n\n  rememberPrint = function(theString, theTypeOfPrint) {\n    var parsedString;\n    scan('\"' + theString + '\"');\n    parsedString = pop();\n    return set_binding(symbol(theTypeOfPrint), parsedString);\n  };\n\n  print_str = function(s) {\n    if (DEBUG) {\n      console.log(\"emttedString from print_str: \" + stringsEmittedByUserPrintouts);\n    }\n    return s;\n  };\n\n  print_char = function(c) {\n    return c;\n  };\n\n  collectLatexStringFromReturnValue = function(p) {\n    var origPrintMode, originalCodeGen, returnedString;\n    origPrintMode = printMode;\n    printMode = PRINTMODE_LATEX;\n    originalCodeGen = codeGen;\n    codeGen = false;\n    returnedString = print_expr(p);\n    // some variables might contain underscores, escape those\n    returnedString = returnedString.replace(/_/g, \"\\\\_\");\n    printMode = origPrintMode;\n    codeGen = originalCodeGen;\n    if (DEBUG) {\n      console.log(\"emttedString from collectLatexStringFromReturnValue: \" + stringsEmittedByUserPrintouts);\n    }\n    return returnedString;\n  };\n\n  printline = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(p);\n    return accumulator;\n  };\n\n  print_base_of_denom = function(p1) {\n    var accumulator;\n    accumulator = \"\";\n    if (isfraction(p1) || car(p1) === symbol(ADD) || car(p1) === symbol(MULTIPLY) || car(p1) === symbol(POWER) || lessp(p1, zero)) { // p1 is BASE\n      accumulator += print_char('(');\n      accumulator += print_expr(p1);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p1); // p1 is BASE\n    }\n    return accumulator;\n  };\n\n  print_expo_of_denom = function(p2) {\n    var accumulator;\n    accumulator = \"\";\n    if (isfraction(p2) || car(p2) === symbol(ADD) || car(p2) === symbol(MULTIPLY) || car(p2) === symbol(POWER)) { // p2 is EXPO\n      accumulator += print_char('(');\n      accumulator += print_expr(p2);\n      accumulator += print_char(')');\n    } else {\n      accumulator += print_expr(p2); // p2 is EXPO\n    }\n    return accumulator;\n  };\n\n  // prints stuff after the divide symbol \"/\"\n\n  // d is the number of denominators\n\n  //define BASE p1\n  //define EXPO p2\n  print_denom = function(p, d) {\n    var accumulator;\n    accumulator = \"\";\n    save();\n    p1 = cadr(p);\n    p2 = caddr(p);\n    if (isminusone(p2)) { // p2 is EXPO\n      accumulator += print_base_of_denom(p1);\n      restore();\n      return accumulator;\n    }\n    if (d === 1) { // p2 is EXPO\n      accumulator += print_char('(');\n    }\n    // prepare the exponent\n    // (needs to be negated)\n    // before printing it out\n    push(p2);\n    negate();\n    p2 = pop();\n    accumulator += print_power(p1, p2);\n    if (d === 1) {\n      accumulator += print_char(')');\n    }\n    restore();\n    return accumulator;\n  };\n\n  //define A p3\n  //define B p4\n  print_a_over_b = function(p) {\n    var accumulator, d, doNothing, n;\n    accumulator = \"\";\n    flag = 0;\n    n = 0;\n    d = 0;\n    save();\n    // count numerators and denominators\n    n = 0;\n    d = 0;\n    p1 = cdr(p);\n    p2 = car(p1);\n    if (isrational(p2)) {\n      push(p2);\n      mp_numerator();\n      absval();\n      p3 = pop();\n      push(p2);\n      mp_denominator();\n      p4 = pop();\n      if (!isplusone(p3)) { // p3 is A\n        n++;\n      }\n      if (!isplusone(p4)) { // p4 is B\n        d++;\n      }\n      p1 = cdr(p1);\n    } else {\n      p3 = one;\n      p4 = one; // p4 is B\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (is_denominator(p2)) {\n        d++;\n      } else {\n        n++;\n      }\n      p1 = cdr(p1);\n    }\n    //debugger\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('\\\\frac{');\n    }\n    if (n === 0) {\n      accumulator += print_char('1');\n    } else {\n      flag = 0;\n      p1 = cdr(p);\n      if (isrational(car(p1))) {\n        p1 = cdr(p1);\n      }\n      if (!isplusone(p3)) { // p3 is A\n        accumulator += print_factor(p3);\n        flag = 1;\n      }\n      while (iscons(p1)) {\n        p2 = car(p1);\n        if (is_denominator(p2)) {\n          doNothing = 1;\n        } else {\n          if (flag) {\n            accumulator += print_multiply_sign();\n          }\n          accumulator += print_factor(p2);\n          flag = 1;\n        }\n        p1 = cdr(p1);\n      }\n    }\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}{');\n    } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n      accumulator += print_str(\" / \");\n    } else {\n      accumulator += print_str(\"/\");\n    }\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char('(');\n    }\n    flag = 0;\n    p1 = cdr(p);\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n    if (!isplusone(p4)) { // p4 is B\n      accumulator += print_factor(p4);\n      flag = 1;\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (is_denominator(p2)) {\n        if (flag) {\n          accumulator += print_multiply_sign();\n        }\n        accumulator += print_denom(p2, d);\n        flag = 1;\n      }\n      p1 = cdr(p1);\n    }\n    if (d > 1 && printMode !== PRINTMODE_LATEX) {\n      accumulator += print_char(')');\n    }\n    if (printMode === PRINTMODE_LATEX) {\n      accumulator += print_str('}');\n    }\n    restore();\n    return accumulator;\n  };\n\n  print_expr = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (isadd(p)) {\n      p = cdr(p);\n      if (sign_of_term(car(p)) === '-') {\n        accumulator += print_str(\"-\");\n      }\n      accumulator += print_term(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        if (sign_of_term(car(p)) === '+') {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" + \");\n          } else {\n            accumulator += print_str(\"+\");\n          }\n        } else {\n          if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\" - \");\n          } else {\n            accumulator += print_str(\"-\");\n          }\n        }\n        accumulator += print_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (sign_of_term(p) === '-') {\n        accumulator += print_str(\"-\");\n      }\n      accumulator += print_term(p);\n    }\n    return accumulator;\n  };\n\n  sign_of_term = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (car(p) === symbol(MULTIPLY) && isNumericAtom(cadr(p)) && lessp(cadr(p), zero)) {\n      accumulator += '-';\n    } else if (isNumericAtom(p) && lessp(p, zero)) {\n      accumulator += '-';\n    } else {\n      accumulator += '+';\n    }\n    return accumulator;\n  };\n\n  print_term = function(p) {\n    var accumulator, denom, numberOneOverSomething, origAccumulator, previousFactorWasANumber;\n    accumulator = \"\";\n    if (car(p) === symbol(MULTIPLY) && any_denominators(p)) {\n      accumulator += print_a_over_b(p);\n      return accumulator;\n    }\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      // coeff -1?\n      if (isminusone(car(p))) {\n        //      print_char('-')\n        p = cdr(p);\n      }\n      previousFactorWasANumber = false;\n      // print the first factor ------------\n      if (isNumericAtom(car(p))) {\n        previousFactorWasANumber = true;\n      }\n      // this numberOneOverSomething thing is so that\n      // we show things of the form\n      //   numericFractionOfForm1/something * somethingElse\n      // as\n      //   somethingElse / something\n      // so for example 1/2 * sqrt(2) is rendered as\n      //   sqrt(2)/2\n      // rather than the first form, which looks confusing.\n      // NOTE that you might want to avoid this\n      // when printing polynomials, as it could be nicer\n      // to show the numeric coefficients well separated from\n      // the variable, but we'll see when we'll\n      // come to it if it's an issue.\n      numberOneOverSomething = false;\n      if (printMode === PRINTMODE_LATEX && iscons(cdr(p)) && isNumberOneOverSomething(car(p))) {\n        numberOneOverSomething = true;\n        denom = car(p).q.b.toString();\n      }\n      if (numberOneOverSomething) {\n        origAccumulator = accumulator;\n        accumulator = \"\";\n      } else {\n        accumulator += print_factor(car(p));\n      }\n      p = cdr(p);\n      // print all the other factors -------\n      while (iscons(p)) {\n        // check if we end up having a case where two numbers\n        // are next to each other. In those cases, latex needs\n        // to insert a \\cdot otherwise they end up\n        // right next to each other and read like one big number\n        if (printMode === PRINTMODE_LATEX) {\n          if (previousFactorWasANumber) {\n            // if what comes next is a power and the base\n            // is a number, then we are in the case\n            // of consecutive numbers.\n            // Note that sqrt() i.e when exponent is 1/2\n            // doesn't count because the radical gives\n            // a nice graphical separation already.\n            if (caar(p) === symbol(POWER)) {\n              if (isNumericAtom(car(cdr(car(p))))) {\n                if (!isfraction(car(cdr(cdr(car(p)))))) {\n                  accumulator += \" \\\\cdot \";\n                }\n              }\n            }\n          }\n        }\n        accumulator += print_multiply_sign();\n        accumulator += print_factor(car(p), false, true);\n        previousFactorWasANumber = false;\n        if (isNumericAtom(car(p))) {\n          previousFactorWasANumber = true;\n        }\n        p = cdr(p);\n      }\n      if (numberOneOverSomething) {\n        accumulator = origAccumulator + \"\\\\frac{\" + accumulator + \"}{\" + denom + \"}\";\n      }\n    } else {\n      accumulator += print_factor(p);\n    }\n    return accumulator;\n  };\n\n  print_subexpr = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_char('(');\n    accumulator += print_expr(p);\n    accumulator += print_char(')');\n    return accumulator;\n  };\n\n  print_factorial_function = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cadr(p);\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(p);\n    } else {\n      accumulator += print_expr(p);\n    }\n    accumulator += print_char('!');\n    return accumulator;\n  };\n\n  print_ABS_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\left |\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\right |\");\n    return accumulator;\n  };\n\n  print_BINOMIAL_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\binom{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"}{\");\n    accumulator += print_expr(caddr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_DOT_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\" \\\\cdot \");\n    accumulator += print_expr(caddr(p));\n    return accumulator;\n  };\n\n  print_DOT_codegen = function(p) {\n    var accumulator;\n    accumulator = \"dot(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \", \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SIN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.sin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_COS_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.cos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_TAN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.tan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCSIN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.asin(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCCOS_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.acos(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_ARCTAN_codegen = function(p) {\n    var accumulator;\n    accumulator = \"Math.atan(\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \")\";\n    return accumulator;\n  };\n\n  print_SQRT_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"\\\\sqrt{\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(\"} \");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n    accumulator += print_expr(cadr(p));\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^T\");\n    return accumulator;\n  };\n\n  print_TRANSPOSE_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"transpose(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_UNIT_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"identity(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_INV_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"{\");\n    if (iscons(cadr(p))) {\n      accumulator += print_str('(');\n    }\n    accumulator += print_expr(cadr(p));\n    if (iscons(cadr(p))) {\n      accumulator += print_str(')');\n    }\n    accumulator += print_str(\"}\");\n    accumulator += print_str(\"^{-1}\");\n    return accumulator;\n  };\n\n  print_INV_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_str(\"inv(\");\n    accumulator += print_expr(cadr(p));\n    accumulator += print_str(')');\n    return accumulator;\n  };\n\n  print_DEFINT_latex = function(p) {\n    var accumulator, functionBody, i, i1, numberOfIntegrals, originalIntegral, ref1, theIntegral, theVariable;\n    accumulator = \"\";\n    functionBody = car(cdr(p));\n    p = cdr(p);\n    originalIntegral = p;\n    numberOfIntegrals = 0;\n    while (iscons(cdr(cdr(p)))) {\n      numberOfIntegrals++;\n      theIntegral = cdr(cdr(p));\n      accumulator += print_str(\"\\\\int^{\");\n      accumulator += print_expr(car(cdr(theIntegral)));\n      accumulator += print_str(\"}_{\");\n      accumulator += print_expr(car(theIntegral));\n      accumulator += print_str(\"} \\\\! \");\n      p = cdr(theIntegral);\n    }\n    accumulator += print_expr(functionBody);\n    accumulator += print_str(\" \\\\,\");\n    p = originalIntegral;\n    for (i = i1 = 1, ref1 = numberOfIntegrals; (1 <= ref1 ? i1 <= ref1 : i1 >= ref1); i = 1 <= ref1 ? ++i1 : --i1) {\n      theVariable = cdr(p);\n      accumulator += print_str(\" \\\\mathrm{d} \");\n      accumulator += print_expr(car(theVariable));\n      if (i < numberOfIntegrals) {\n        accumulator += print_str(\" \\\\, \");\n      }\n      p = cdr(cdr(theVariable));\n    }\n    return accumulator;\n  };\n\n  print_tensor = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_tensor_inner(p, 0, 0)[1];\n    return accumulator;\n  };\n\n  // j scans the dimensions\n  // k is an increment for all the printed elements\n  //   since they are all together in sequence in one array\n  print_tensor_inner = function(p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, retString;\n    accumulator = \"\";\n    accumulator += print_str(\"[\");\n    // only the last dimension prints the actual elements\n    // e.g. in a matrix, the first dimension contains\n    // vectors, not elements, and the second dimension\n    // actually contains the elements\n\n    // if not the last dimension, we are just printing wrappers\n    // and recursing down i.e. we print the next dimension\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n        [k, retString] = print_tensor_inner(p, j + 1, k);\n        accumulator += retString;\n        // add separator between elements dimensions\n        // \"above\" the inner-most dimension\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n      }\n    } else {\n// if we reached the last dimension, we print the actual\n// elements\n      for (i = j1 = 0, ref2 = p.tensor.dim[j]; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]);\n        // add separator between elements in the\n        // inner-most dimension\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\",\");\n        }\n        k++;\n      }\n    }\n    accumulator += print_str(\"]\");\n    return [k, accumulator];\n  };\n\n  print_tensor_latex = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (p.tensor.ndim <= 2) {\n      accumulator += print_tensor_inner_latex(true, p, 0, 0)[1];\n    }\n    return accumulator;\n  };\n\n  // firstLevel is needed because printing a matrix\n  // is not exactly an elegant recursive procedure:\n  // the vector on the first level prints the latex\n  // \"wrap\", while the vectors that make up the\n  // rows don't. so it's a bit asymmetric and this\n  // flag helps.\n  // j scans the dimensions\n  // k is an increment for all the printed elements\n  //   since they are all together in sequence in one array\n  print_tensor_inner_latex = function(firstLevel, p, j, k) {\n    var accumulator, i, i1, j1, ref1, ref2, retString;\n    accumulator = \"\";\n    // open the outer latex wrap\n    if (firstLevel) {\n      accumulator += \"\\\\begin{bmatrix} \";\n    }\n    // only the last dimension prints the actual elements\n    // e.g. in a matrix, the first dimension contains\n    // vectors, not elements, and the second dimension\n    // actually contains the elements\n\n    // if not the last dimension, we are just printing wrappers\n    // and recursing down i.e. we print the next dimension\n    if (j < p.tensor.ndim - 1) {\n      for (i = i1 = 0, ref1 = p.tensor.dim[j]; (0 <= ref1 ? i1 < ref1 : i1 > ref1); i = 0 <= ref1 ? ++i1 : --i1) {\n        [k, retString] = print_tensor_inner_latex(0, p, j + 1, k);\n        accumulator += retString;\n        if (i !== p.tensor.dim[j] - 1) {\n          // add separator between rows\n          accumulator += print_str(\" \\\\\\\\ \");\n        }\n      }\n    } else {\n// if we reached the last dimension, we print the actual\n// elements\n      for (i = j1 = 0, ref2 = p.tensor.dim[j]; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n        accumulator += print_expr(p.tensor.elem[k]);\n        // separator between elements in each row\n        if (i !== p.tensor.dim[j] - 1) {\n          accumulator += print_str(\" & \");\n        }\n        k++;\n      }\n    }\n    // close the outer latex wrap\n    if (firstLevel) {\n      accumulator += \" \\\\end{bmatrix}\";\n    }\n    return [k, accumulator];\n  };\n\n  print_SUM_latex = function(p) {\n    var accumulator;\n    accumulator = \"\\\\sum_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_SUM_codegen = function(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderSum = 0; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderSum += \" + print_expr(body) + \";\" + \" } \" + \" return holderSum;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_TEST_latex = function(p) {\n    var accumulator;\n    accumulator = \"\\\\left\\\\{ \\\\begin{array}{ll}\";\n    p = cdr(p);\n    while (iscons(p)) {\n      // odd number of parameters means that the\n      // last argument becomes the default case\n      // i.e. the one without a test.\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"{\";\n        accumulator += print_expr(car(p));\n        accumulator += \"} & otherwise \";\n        accumulator += \" \\\\\\\\\\\\\\\\\";\n        break;\n      }\n      accumulator += \"{\";\n      accumulator += print_expr(cadr(p));\n      accumulator += \"} & if & \";\n      accumulator += print_expr(car(p));\n      accumulator += \" \\\\\\\\\\\\\\\\\";\n      // test unsuccessful, continue to the\n      // next pair of test,value\n      p = cddr(p);\n    }\n    accumulator = accumulator.substring(0, accumulator.length - 4);\n    return accumulator += \"\\\\end{array} \\\\right.\";\n  };\n\n  print_TEST_codegen = function(p) {\n    var accumulator, howManyIfs;\n    accumulator = \"(function(){\";\n    p = cdr(p);\n    howManyIfs = 0;\n    while (iscons(p)) {\n      // odd number of parameters means that the\n      // last argument becomes the default case\n      // i.e. the one without a test.\n      if (cdr(p) === symbol(NIL)) {\n        accumulator += \"else {\";\n        accumulator += \"return (\" + print_expr(car(p)) + \");\";\n        accumulator += \"}\";\n        break;\n      }\n      if (howManyIfs) {\n        accumulator += \" else \";\n      }\n      accumulator += \"if (\" + print_expr(car(p)) + \"){\";\n      accumulator += \"return (\" + print_expr(cadr(p)) + \");\";\n      accumulator += \"}\";\n      // test unsuccessful, continue to the\n      // next pair of test,value\n      howManyIfs++;\n      p = cddr(p);\n    }\n    accumulator += \"})()\";\n    return accumulator;\n  };\n\n  print_TESTLT_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" < \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTLE_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\leq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGT_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" > \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTGE_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" \\\\geq \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_TESTEQ_latex = function(p) {\n    var accumulator;\n    accumulator = \"{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    accumulator += \" = \";\n    accumulator += \"{\";\n    accumulator += print_expr(caddr(p));\n    return accumulator += \"}\";\n  };\n\n  print_FOR_codegen = function(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   \" + print_expr(body) + \" } \" + \"})()\";\n    return accumulator;\n  };\n\n  print_DO_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n    while (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n    }\n    return accumulator;\n  };\n\n  print_SETQ_codegen = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \" = \";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"; \";\n    return accumulator;\n  };\n\n  print_PRODUCT_latex = function(p) {\n    var accumulator;\n    accumulator = \"\\\\prod_{\";\n    accumulator += print_expr(caddr(p));\n    accumulator += \"=\";\n    accumulator += print_expr(cadddr(p));\n    accumulator += \"}^{\";\n    accumulator += print_expr(caddddr(p));\n    accumulator += \"}{\";\n    accumulator += print_expr(cadr(p));\n    accumulator += \"}\";\n    return accumulator;\n  };\n\n  print_PRODUCT_codegen = function(p) {\n    var accumulator, body, lowerlimit, upperlimit, variable;\n    body = cadr(p);\n    variable = caddr(p);\n    lowerlimit = cadddr(p);\n    upperlimit = caddddr(p);\n    accumulator = \"(function(){\" + \" var \" + variable + \"; \" + \" var holderProduct = 1; \" + \" var lowerlimit = \" + print_expr(lowerlimit) + \"; \" + \" var upperlimit = \" + print_expr(upperlimit) + \"; \" + \" for (\" + variable + \" = lowerlimit; \" + variable + \" < upperlimit; \" + variable + \"++) { \" + \"   holderProduct *= \" + print_expr(body) + \";\" + \" } \" + \" return holderProduct;\" + \"})()\";\n    return accumulator;\n  };\n\n  print_base = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (isadd(cadr(p)) || caadr(p) === symbol(MULTIPLY) || caadr(p) === symbol(POWER) || isnegativenumber(cadr(p))) {\n      accumulator += print_str('(');\n      accumulator += print_expr(cadr(p));\n      accumulator += print_str(')');\n    } else if (isNumericAtom(cadr(p)) && (lessp(cadr(p), zero) || isfraction(cadr(p)))) {\n      accumulator += print_str('(');\n      accumulator += print_factor(cadr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += print_factor(cadr(p));\n    }\n    return accumulator;\n  };\n\n  print_exponent = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    if (iscons(caddr(p)) || isfraction(caddr(p)) || (isNumericAtom(caddr(p)) && lessp(caddr(p), zero))) {\n      accumulator += print_str('(');\n      accumulator += print_expr(caddr(p));\n      accumulator += print_str(')');\n    } else {\n      accumulator += print_factor(caddr(p));\n    }\n    return accumulator;\n  };\n\n  print_power = function(base, exponent) {\n    var accumulator, denomExponent, newExponent, numExponent;\n    accumulator = \"\";\n    //debugger\n    if (DEBUG) {\n      console.log(\"power base: \" + base + \" \" + \" exponent: \" + exponent);\n    }\n    // quick check is this is actually a square root.\n    if (isoneovertwo(exponent)) {\n      if (equaln(base, 2)) {\n        if (codeGen) {\n          accumulator += print_str(\"Math.SQRT2\");\n          return accumulator;\n        }\n      } else {\n        if (printMode === PRINTMODE_LATEX) {\n          accumulator += print_str(\"\\\\sqrt{\");\n          accumulator += print_expr(base);\n          accumulator += print_str(\"}\");\n          return accumulator;\n        } else if (codeGen) {\n          accumulator += print_str(\"Math.sqrt(\");\n          accumulator += print_expr(base);\n          accumulator += print_str(')');\n          return accumulator;\n        }\n      }\n    }\n    if ((equaln(get_binding(symbol(PRINT_LEAVE_E_ALONE)), 1)) && base === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.exp(\");\n        accumulator += print_expo_of_denom(exponent);\n        accumulator += print_str(')');\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"e^{\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(\"}\");\n      } else {\n        accumulator += print_str(\"exp(\");\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      }\n      return accumulator;\n    }\n    if (codeGen) {\n      accumulator += print_str(\"Math.pow(\");\n      accumulator += print_base_of_denom(base);\n      accumulator += print_str(\", \");\n      accumulator += print_expo_of_denom(exponent);\n      accumulator += print_str(')');\n      return accumulator;\n    }\n    if ((equaln(get_binding(symbol(PRINT_LEAVE_X_ALONE)), 0)) || base.printname !== \"x\") {\n      // if the exponent is negative then\n      // we invert the base BUT we don't do\n      // that if the base is \"e\", because for\n      // example when trigonometric functions are\n      // expressed in terms of exponential functions\n      // that would be really confusing, one wants to\n      // keep \"e\" as the base and the negative exponent\n      if (base !== symbol(E)) {\n        if (isminusone(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += print_expr(base);\n            accumulator += print_str(')');\n          } else {\n            accumulator += print_expr(base);\n          }\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n          return accumulator;\n        }\n        if (isnegativeterm(exponent)) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"\\\\frac{1}{\");\n          } else if (printMode === PRINTMODE_HUMAN && !test_flag) {\n            accumulator += print_str(\"1 / \");\n          } else {\n            accumulator += print_str(\"1/\");\n          }\n          push(exponent);\n          push_integer(-1);\n          multiply();\n          newExponent = pop();\n          if (iscons(base) && printMode !== PRINTMODE_LATEX) {\n            accumulator += print_str('(');\n            accumulator += print_power(base, newExponent);\n            accumulator += print_str(')');\n          } else {\n            accumulator += print_power(base, newExponent);\n          }\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\"}\");\n          }\n          return accumulator;\n        }\n      }\n      if (isfraction(exponent) && printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\sqrt\");\n        push(exponent);\n        denominator();\n        denomExponent = pop();\n        if (!isplustwo(denomExponent)) {\n          accumulator += print_str(\"[\");\n          accumulator += print_expr(denomExponent);\n          accumulator += print_str(\"]\");\n        }\n        accumulator += print_str(\"{\");\n        push(exponent);\n        numerator();\n        numExponent = pop();\n        exponent = numExponent;\n        accumulator += print_power(base, exponent);\n        accumulator += print_str(\"}\");\n        return accumulator;\n      }\n    }\n    if (printMode === PRINTMODE_LATEX && isplusone(exponent)) {\n      // if we are in latex mode we turn many\n      // radicals into a radix sign with a power\n      // underneath, and the power is often one\n      // (e.g. square root turns into a radical\n      // with a power one underneath) so handle\n      // this case simply here, just print the base\n      accumulator += print_expr(base);\n    } else {\n      // print the base,\n      // determining if it needs to be\n      // wrapped in parentheses or not\n      if (isadd(base) || isnegativenumber(base)) {\n        accumulator += print_str('(');\n        accumulator += print_expr(base);\n        accumulator += print_str(')');\n      } else if (car(base) === symbol(MULTIPLY) || car(base) === symbol(POWER)) {\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str('(');\n        }\n        accumulator += print_factor(base, true);\n        if (printMode !== PRINTMODE_LATEX) {\n          accumulator += print_str(')');\n        }\n      } else if (isNumericAtom(base) && (lessp(base, zero) || isfraction(base))) {\n        accumulator += print_str('(');\n        accumulator += print_factor(base);\n        accumulator += print_str(')');\n      } else {\n        accumulator += print_factor(base);\n      }\n      // print the power symbol\n      //debugger\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        //print_str(\" ^ \")\n        accumulator += print_str(power_str);\n      } else {\n        accumulator += print_str(\"^\");\n      }\n      // print the exponent\n      if (printMode === PRINTMODE_LATEX) {\n        // in latex mode, one can omit the curly braces\n        // wrapping the exponent if the exponent is only\n        // one character long\n        if (print_expr(exponent).length > 1) {\n          accumulator += print_str(\"{\");\n          accumulator += print_expr(exponent);\n          accumulator += print_str(\"}\");\n        } else {\n          accumulator += print_expr(exponent);\n        }\n      } else if (iscons(exponent) || isfraction(exponent) || (isNumericAtom(exponent) && lessp(exponent, zero))) {\n        accumulator += print_str('(');\n        accumulator += print_expr(exponent);\n        accumulator += print_str(')');\n      } else {\n        accumulator += print_factor(exponent);\n      }\n    }\n    return accumulator;\n  };\n\n  print_index_function = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    p = cdr(p);\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      accumulator += print_subexpr(car(p));\n    } else {\n      accumulator += print_expr(car(p));\n    }\n    accumulator += print_str('[');\n    p = cdr(p);\n    if (iscons(p)) {\n      accumulator += print_expr(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        accumulator += print_str(',');\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n      }\n    }\n    accumulator += print_str(']');\n    return accumulator;\n  };\n\n  print_factor = function(p, omitParens, pastFirstFactor) {\n    var accumulator, base, exponent, fbody, parameters, returned;\n    // debugger\n    accumulator = \"\";\n    if (isNumericAtom(p)) {\n      // in an evaluated term, all the numeric parts\n      // are at the beginning of the term.\n      // When printing the EXPRESSION,\n      // we peek into the first factor of the term and we\n      // look at whether it's a number less then zero.\n      // if it is, we print the \"-\" as the \"leading\" part of the\n      // print of the EXPRESSION, and then we proceed printint the factors\n      // of the term. This means that when we come here, we must\n      // skip printing the minus if the number is negative,\n      // because it's already been printed.\n      if (pastFirstFactor && lessp(p, zero)) {\n        accumulator += '(';\n      }\n      accumulator += print_number(p, pastFirstFactor);\n      if (pastFirstFactor && lessp(p, zero)) {\n        accumulator += ')';\n      }\n      return accumulator;\n    }\n    if (isstr(p)) {\n      accumulator += print_str(\"\\\"\");\n      accumulator += print_str(p.str);\n      accumulator += print_str(\"\\\"\");\n      return accumulator;\n    }\n    if (istensor(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_tensor_latex(p);\n      } else {\n        accumulator += print_tensor(p);\n      }\n      return accumulator;\n    }\n    if (car(p) === symbol(MULTIPLY)) {\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\left (\");\n          } else {\n            accumulator += print_str('(');\n          }\n        }\n      }\n      accumulator += print_expr(p);\n      if (!omitParens) {\n        if (sign_of_term(p) === '-' || printMode !== PRINTMODE_LATEX) {\n          if (printMode === PRINTMODE_LATEX) {\n            accumulator += print_str(\" \\\\right ) \");\n          } else {\n            accumulator += print_str(')');\n          }\n        }\n      }\n      return accumulator;\n    } else if (isadd(p)) {\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n      accumulator += print_expr(p);\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n      return accumulator;\n    }\n    if (car(p) === symbol(POWER)) {\n      base = cadr(p);\n      exponent = caddr(p);\n      accumulator += print_power(base, exponent);\n      return accumulator;\n    }\n    //  if (car(p) == _list) {\n    //    print_str(\"{\")\n    //    p = cdr(p)\n    //    if (iscons(p)) {\n    //      print_expr(car(p))\n    //      p = cdr(p)\n    //    }\n    //    while (iscons(p)) {\n    //      print_str(\",\")\n    //      print_expr(car(p))\n    //      p = cdr(p)\n    //    }\n    //    print_str(\"}\")\n    //    return\n    //  }\n    if (car(p) === symbol(FUNCTION)) {\n      fbody = cadr(p);\n      if (!codeGen) {\n        parameters = caddr(p);\n        accumulator += print_str(\"function \");\n        if (DEBUG) {\n          console.log(\"emittedString from print_factor \" + stringsEmittedByUserPrintouts);\n        }\n        returned = print_list(parameters);\n        accumulator += returned;\n        accumulator += print_str(\" -> \");\n      }\n      accumulator += print_expr(fbody);\n      return accumulator;\n    }\n    if (car(p) === symbol(PATTERN)) {\n      accumulator += print_expr(caadr(p));\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\" \\\\rightarrow \");\n      } else {\n        if (printMode === PRINTMODE_HUMAN && !test_flag) {\n          accumulator += print_str(\" -> \");\n        } else {\n          accumulator += print_str(\"->\");\n        }\n      }\n      accumulator += print_expr(car(cdr(cadr(p))));\n      return accumulator;\n    }\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      accumulator += print_index_function(p);\n      return accumulator;\n    }\n    if (car(p) === symbol(FACTORIAL)) {\n      accumulator += print_factorial_function(p);\n      return accumulator;\n    } else if (car(p) === symbol(ABS) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_ABS_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(SQRT) && printMode === PRINTMODE_LATEX) {\n      //debugger\n      accumulator += print_SQRT_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(TRANSPOSE)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TRANSPOSE_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_TRANSPOSE_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(UNIT)) {\n      if (codeGen) {\n        accumulator += print_UNIT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(INV)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_INV_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_INV_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(BINOMIAL) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_BINOMIAL_latex(p);\n      return accumulator;\n    } else if (car(p) === symbol(DEFINT) && printMode === PRINTMODE_LATEX) {\n      accumulator += print_DEFINT_latex(p);\n      return accumulator;\n    } else if (isinnerordot(p)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_DOT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_DOT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SIN)) {\n      if (codeGen) {\n        accumulator += print_SIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(COS)) {\n      if (codeGen) {\n        accumulator += print_COS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TAN)) {\n      if (codeGen) {\n        accumulator += print_TAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCSIN)) {\n      if (codeGen) {\n        accumulator += print_ARCSIN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCCOS)) {\n      if (codeGen) {\n        accumulator += print_ARCCOS_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ARCTAN)) {\n      if (codeGen) {\n        accumulator += print_ARCTAN_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SUM)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_SUM_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_SUM_codegen(p);\n        return accumulator;\n      }\n    //else if car(p) == symbol(QUOTE)\n    //  if printMode == PRINTMODE_LATEX\n    //    print_expr(cadr(p))\n    //    return accumulator\n    } else if (car(p) === symbol(PRODUCT)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_PRODUCT_latex(p);\n        return accumulator;\n      } else if (codeGen) {\n        accumulator += print_PRODUCT_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FOR)) {\n      if (codeGen) {\n        accumulator += print_FOR_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(DO)) {\n      if (codeGen) {\n        accumulator += print_DO_codegen(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TEST)) {\n      if (codeGen) {\n        accumulator += print_TEST_codegen(p);\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TEST_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") < (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTLE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") <= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTLE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGT)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") > (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGT_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTGE)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") >= (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTGE_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(TESTEQ)) {\n      if (codeGen) {\n        accumulator += \"((\" + print_expr(cadr(p)) + \") === (\" + print_expr(caddr(p)) + \"))\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_TESTEQ_latex(p);\n        return accumulator;\n      }\n    } else if (car(p) === symbol(FLOOR)) {\n      if (codeGen) {\n        accumulator += \"Math.floor(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lfloor {\" + print_expr(cadr(p)) + \"} \\\\rfloor \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(CEILING)) {\n      if (codeGen) {\n        accumulator += \"Math.ceiling(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += \" \\\\lceil {\" + print_expr(cadr(p)) + \"} \\\\rceil \";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(ROUND)) {\n      if (codeGen) {\n        accumulator += \"Math.round(\" + print_expr(cadr(p)) + \")\";\n        return accumulator;\n      }\n    } else if (car(p) === symbol(SETQ)) {\n      if (codeGen) {\n        accumulator += print_SETQ_codegen(p);\n        return accumulator;\n      } else {\n        accumulator += print_expr(cadr(p));\n        accumulator += print_str(\"=\");\n        accumulator += print_expr(caddr(p));\n        return accumulator;\n      }\n    }\n    if (iscons(p)) {\n      //if (car(p) == symbol(FORMAL) && cadr(p)->k == SYM) {\n      //  print_str(((struct symbol *) cadr(p))->name)\n      //  return\n      //}\n      accumulator += print_factor(car(p));\n      p = cdr(p);\n      if (!omitParens) {\n        accumulator += print_str('(');\n      }\n      if (iscons(p)) {\n        accumulator += print_expr(car(p));\n        p = cdr(p);\n        while (iscons(p)) {\n          accumulator += print_str(\",\");\n          accumulator += print_expr(car(p));\n          p = cdr(p);\n        }\n      }\n      if (!omitParens) {\n        accumulator += print_str(')');\n      }\n      return accumulator;\n    }\n    if (p === symbol(DERIVATIVE)) {\n      accumulator += print_char('d');\n    } else if (p === symbol(E)) {\n      if (codeGen) {\n        accumulator += print_str(\"Math.E\");\n      } else {\n        accumulator += print_str(\"e\");\n      }\n    } else if (p === symbol(PI)) {\n      if (printMode === PRINTMODE_LATEX) {\n        accumulator += print_str(\"\\\\pi\");\n      } else {\n        accumulator += print_str(\"pi\");\n      }\n    } else {\n      accumulator += print_str(get_printname(p));\n    }\n    return accumulator;\n  };\n\n  print_list = function(p) {\n    var accumulator;\n    accumulator = \"\";\n    switch (p.k) {\n      case CONS:\n        accumulator += '(';\n        accumulator += print_list(car(p));\n        if (p === cdr(p) && p !== symbol(NIL)) {\n          console.log(\"oh no recursive!\");\n          debugger;\n        }\n        p = cdr(p);\n        while (iscons(p)) {\n          accumulator += \" \";\n          accumulator += print_list(car(p));\n          p = cdr(p);\n          if (p === cdr(p) && p !== symbol(NIL)) {\n            console.log(\"oh no recursive!\");\n            debugger;\n          }\n        }\n        if (p !== symbol(NIL)) {\n          accumulator += \" . \";\n          accumulator += print_list(p);\n        }\n        accumulator += ')';\n        break;\n      case STR:\n        //print_str(\"\\\"\")\n        accumulator += p.str;\n        break;\n      //print_str(\"\\\"\")\n      case NUM:\n      case DOUBLE:\n        accumulator += print_number(p, true);\n        break;\n      case SYM:\n        accumulator += get_printname(p);\n        break;\n      default:\n        accumulator += \"<tensor>\";\n    }\n    return accumulator;\n  };\n\n  print_multiply_sign = function() {\n    var accumulator;\n    accumulator = \"\";\n    if (printMode === PRINTMODE_LATEX) {\n      if (printMode === PRINTMODE_HUMAN && !test_flag) {\n        accumulator += print_str(\" \");\n      } else {\n        return accumulator;\n      }\n    }\n    if (printMode === PRINTMODE_HUMAN && !test_flag && !codeGen) {\n      accumulator += print_str(\" \");\n    } else {\n      accumulator += print_str(\"*\");\n    }\n    return accumulator;\n  };\n\n  is_denominator = function(p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && isnegativeterm(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  // don't consider the leading fraction\n  // we want 2/3*a*b*c instead of 2*a*b*c/3\n  any_denominators = function(p) {\n    var q;\n    p = cdr(p);\n    //  if (isfraction(car(p)))\n    //    return 1\n    while (iscons(p)) {\n      q = car(p);\n      if (is_denominator(q)) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  /*\n\n  Prints in \"2d\", e.g. instead of 1/(x+1)^2 :\n\n        1\n   ----------\n           2\n    (1 + x)\n\n   Note that although this looks more natural, a) it's not parsable and\n   b) it can be occasionally be ambiguous, such as:\n\n     1\n   ----\n     2\n   x\n\n  is 1/x^2 but it also looks a little like x^(1/2)\n\n  */\n  //-----------------------------------------------------------------------------\n\n  //  Examples:\n\n  //     012345678\n  //  -2 .........\n  //  -1 .........\n  //   0 ..hello..  x=2, y=0, h=1, w=5\n  //   1 .........\n  //   2 .........\n\n  //     012345678\n  //  -2 .........\n  //  -1 ..355....\n  //   0 ..---....  x=2, y=-1, h=3, w=3\n  //   1 ..113....\n  //   2 .........\n\n  //-----------------------------------------------------------------------------\n  YMAX = 10000;\n\n  glyph = (function() {\n    class glyph {};\n\n    glyph.prototype.c = 0;\n\n    glyph.prototype.x = 0;\n\n    glyph.prototype.y = 0;\n\n    return glyph;\n\n  }).call(this);\n\n  // will contain glyphs\n  chartab = [];\n\n  for (charTabIndex = i1 = 0, ref1 = YMAX; (0 <= ref1 ? i1 < ref1 : i1 > ref1); charTabIndex = 0 <= ref1 ? ++i1 : --i1) {\n    chartab[charTabIndex] = new glyph();\n  }\n\n  yindex = 0;\n\n  level = 0;\n\n  emit_x = 0;\n\n  expr_level = 0;\n\n  display_flag = 0;\n\n  // this is not really the translated version,\n  // the original is in window.cpp and is\n  // rather more complex\n  printchar_nowrap = function(character) {\n    var accumulator;\n    accumulator = \"\";\n    accumulator += character;\n    return accumulator;\n  };\n\n  printchar = function(character) {\n    return printchar_nowrap(character);\n  };\n\n  print2dascii = function(p) {\n    var beenPrinted, h, w, y;\n    h = 0;\n    w = 0;\n    y = 0;\n    save();\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_top_expr(p);\n    // if too wide then print flat\n    [h, w, y] = get_size(0, yindex);\n    if (w > 100) {\n      printline(p);\n      restore();\n      return;\n    }\n    beenPrinted = print_glyphs();\n    restore();\n    return beenPrinted;\n  };\n\n  emit_top_expr = function(p) {\n    if (car(p) === symbol(SETQ)) {\n      emit_expr(cadr(p));\n      __emit_str(\" = \");\n      emit_expr(caddr(p));\n      return;\n    }\n    if (istensor(p)) {\n      return emit_tensor(p);\n    } else {\n      return emit_expr(p);\n    }\n  };\n\n  will_be_displayed_as_fraction = function(p) {\n    if (level > 0) {\n      return 0;\n    }\n    if (isfraction(p)) {\n      return 1;\n    }\n    if (car(p) !== symbol(MULTIPLY)) {\n      return 0;\n    }\n    if (isfraction(cadr(p))) {\n      return 1;\n    }\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  emit_expr = function(p) {\n    //  if (level > 0) {\n    //    printexpr(p)\n    //    return\n    //  }\n    expr_level++;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      if (__is_negative(car(p))) {\n        __emit_char('-');\n        if (will_be_displayed_as_fraction(car(p))) {\n          __emit_char(' ');\n        }\n      }\n      emit_term(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n          __emit_char('-');\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n          __emit_char('+');\n          __emit_char(' ');\n        }\n        emit_term(car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (__is_negative(p)) {\n        __emit_char('-');\n        if (will_be_displayed_as_fraction(p)) {\n          __emit_char(' ');\n        }\n      }\n      emit_term(p);\n    }\n    return expr_level--;\n  };\n\n  emit_unsigned_expr = function(p) {\n    var results;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      //    if (__is_negative(car(p)))\n      //      __emit_char('-')\n      emit_term(car(p));\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        if (__is_negative(car(p))) {\n          __emit_char(' ');\n          __emit_char('-');\n          __emit_char(' ');\n        } else {\n          __emit_char(' ');\n          __emit_char('+');\n          __emit_char(' ');\n        }\n        emit_term(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      //    if (__is_negative(p))\n      //      __emit_char('-')\n      return emit_term(p);\n    }\n  };\n\n  __is_negative = function(p) {\n    if (isnegativenumber(p)) {\n      return 1;\n    }\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      return 1;\n    }\n    return 0;\n  };\n\n  emit_term = function(p) {\n    var n;\n    if (car(p) === symbol(MULTIPLY)) {\n      n = count_denominators(p);\n      if (n && level === 0) {\n        return emit_fraction(p, n);\n      } else {\n        return emit_multiply(p, n);\n      }\n    } else {\n      return emit_factor(p);\n    }\n  };\n\n  isdenominator = function(p) {\n    if (car(p) === symbol(POWER) && cadr(p) !== symbol(E) && __is_negative(caddr(p))) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  count_denominators = function(p) {\n    var count, q;\n    count = 0;\n    p = cdr(p);\n    //  if (isfraction(car(p))) {\n    //    count++\n    //    p = cdr(p)\n    //  }\n    while (iscons(p)) {\n      q = car(p);\n      if (isdenominator(q)) {\n        count++;\n      }\n      p = cdr(p);\n    }\n    return count;\n  };\n\n  // n is the number of denominators, not counting a fraction like 1/2\n  emit_multiply = function(p, n) {\n    var results;\n    if (n === 0) {\n      p = cdr(p);\n      if (isplusone(car(p)) || isminusone(car(p))) {\n        p = cdr(p);\n      }\n      emit_factor(car(p));\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        __emit_char(' ');\n        emit_factor(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      emit_numerators(p);\n      __emit_char('/');\n      // need grouping if more than one denominator\n      if (n > 1 || isfraction(cadr(p))) {\n        __emit_char('(');\n        emit_denominators(p);\n        return __emit_char(')');\n      } else {\n        return emit_denominators(p);\n      }\n    }\n  };\n\n  //define A p3\n  //define B p4\n\n  // sign of term has already been emitted\n  emit_fraction = function(p, d) {\n    var count, doNothing, k1, k2, n, x;\n    count = 0;\n    k1 = 0;\n    k2 = 0;\n    n = 0;\n    x = 0;\n    save();\n    p3 = one;\n    p4 = one;\n    if (isrational(cadr(p))) {\n      push(cadr(p));\n      mp_numerator();\n      absval();\n      p3 = pop();\n      push(cadr(p));\n      mp_denominator();\n      p4 = pop(); // p4 is B\n    }\n    if (isdouble(cadr(p))) {\n      push(cadr(p));\n      absval();\n      p3 = pop(); // p3 is A\n    }\n    \n    // count numerators\n    if (isplusone(p3)) { // p3 is A\n      n = 0;\n    } else {\n      n = 1;\n    }\n    p1 = cdr(p);\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        n++;\n      }\n      p1 = cdr(p1);\n    }\n    // emit numerators\n    x = emit_x;\n    k1 = yindex;\n    count = 0;\n    if (!isplusone(p3)) { // p3 is A\n      emit_number(p3, 0);\n      count++;\n    }\n    // skip over \"multiply\"\n    p1 = cdr(p);\n    // skip over numerical coefficient, already handled\n    if (isNumericAtom(car(p1))) {\n      p1 = cdr(p1);\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (isdenominator(p2)) {\n        doNothing = 1;\n      } else {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n        if (n === 1) {\n          emit_expr(p2);\n        } else {\n          emit_factor(p2);\n        }\n        count++;\n      }\n      p1 = cdr(p1);\n    }\n    if (count === 0) {\n      __emit_char('1');\n    }\n    // emit denominators\n    k2 = yindex;\n    count = 0;\n    if (!isplusone(p4)) { // p4 is B\n      emit_number(p4, 0);\n      count++;\n      d++;\n    }\n    p1 = cdr(p);\n    if (isrational(car(p1))) {\n      p1 = cdr(p1);\n    }\n    while (iscons(p1)) {\n      p2 = car(p1);\n      if (isdenominator(p2)) {\n        if (count > 0) {\n          __emit_char(' ');\n        }\n        emit_denominator(p2, d);\n        count++;\n      }\n      p1 = cdr(p1);\n    }\n    fixup_fraction(x, k1, k2);\n    return restore();\n  };\n\n  // p points to a multiply\n  emit_numerators = function(p) {\n    var doNothing, n;\n    save();\n    n = 0;\n    p1 = one;\n    p = cdr(p);\n    if (isrational(car(p))) {\n      push(car(p));\n      mp_numerator();\n      absval();\n      p1 = pop();\n      p = cdr(p);\n    } else if (isdouble(car(p))) {\n      push(car(p));\n      absval();\n      p1 = pop();\n      p = cdr(p);\n    }\n    n = 0;\n    if (!isplusone(p1)) {\n      emit_number(p1, 0);\n      n++;\n    }\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        doNothing = 1;\n      } else {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n        emit_factor(car(p));\n        n++;\n      }\n      p = cdr(p);\n    }\n    if (n === 0) {\n      __emit_char('1');\n    }\n    return restore();\n  };\n\n  // p points to a multiply\n  emit_denominators = function(p) {\n    var n;\n    save();\n    n = 0;\n    p = cdr(p);\n    if (isfraction(car(p))) {\n      push(car(p));\n      mp_denominator();\n      p1 = pop();\n      emit_number(p1, 0);\n      n++;\n      p = cdr(p);\n    }\n    while (iscons(p)) {\n      if (isdenominator(car(p))) {\n        if (n > 0) {\n          __emit_char(' ');\n        }\n        emit_denominator(car(p), 0);\n        n++;\n      }\n      p = cdr(p);\n    }\n    return restore();\n  };\n\n  emit_factor = function(p) {\n    if (istensor(p)) {\n      if (level === 0) {\n        //emit_tensor(p)\n        emit_flat_tensor(p);\n      } else {\n        emit_flat_tensor(p);\n      }\n      return;\n    }\n    if (isdouble(p)) {\n      emit_number(p, 0);\n      return;\n    }\n    if (car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY)) {\n      emit_subexpr(p);\n      return;\n    }\n    if (car(p) === symbol(POWER)) {\n      emit_power(p);\n      return;\n    }\n    if (iscons(p)) {\n      //if (car(p) == symbol(FORMAL) && cadr(p).k == SYM)\n      //  emit_symbol(cadr(p))\n      //else\n      emit_function(p);\n      return;\n    }\n    if (isNumericAtom(p)) {\n      if (level === 0) {\n        emit_numerical_fraction(p);\n      } else {\n        emit_number(p, 0);\n      }\n      return;\n    }\n    if (issymbol(p)) {\n      emit_symbol(p);\n      return;\n    }\n    if (isstr(p)) {\n      emit_string(p);\n    }\n  };\n\n  emit_numerical_fraction = function(p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n    save();\n    push(p);\n    mp_numerator();\n    absval();\n    p3 = pop();\n    push(p);\n    mp_denominator();\n    p4 = pop();\n    if (isplusone(p4)) { // p4 is B\n      emit_number(p3, 0);\n      restore();\n      return;\n    }\n    x = emit_x;\n    k1 = yindex;\n    emit_number(p3, 0);\n    k2 = yindex;\n    emit_number(p4, 0); // p4 is B\n    fixup_fraction(x, k1, k2);\n    return restore();\n  };\n\n  // if it's a factor then it doesn't need parens around it, i.e. 1/sin(theta)^2\n  isfactor = function(p) {\n    if (iscons(p) && car(p) !== symbol(ADD) && car(p) !== symbol(MULTIPLY) && car(p) !== symbol(POWER)) {\n      return 1;\n    }\n    if (issymbol(p)) {\n      return 1;\n    }\n    if (isfraction(p)) {\n      return 0;\n    }\n    if (isnegativenumber(p)) {\n      return 0;\n    }\n    if (isNumericAtom(p)) {\n      return 1;\n    }\n    return 0;\n  };\n\n  emit_power = function(p) {\n    var k1, k2, x;\n    k1 = 0;\n    k2 = 0;\n    x = 0;\n    if (cadr(p) === symbol(E)) {\n      __emit_str(\"exp(\");\n      emit_expr(caddr(p));\n      __emit_char(')');\n      return;\n    }\n    if (level > 0) {\n      if (isminusone(caddr(p))) {\n        __emit_char('1');\n        __emit_char('/');\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n      } else {\n        if (isfactor(cadr(p))) {\n          emit_factor(cadr(p));\n        } else {\n          emit_subexpr(cadr(p));\n        }\n        __emit_char('^');\n        if (isfactor(caddr(p))) {\n          emit_factor(caddr(p));\n        } else {\n          emit_subexpr(caddr(p));\n        }\n      }\n      return;\n    }\n    // special case: 1 over something\n    if (__is_negative(caddr(p))) {\n      x = emit_x;\n      k1 = yindex;\n      __emit_char('1');\n      k2 = yindex;\n      //level++\n      emit_denominator(p, 1);\n      //level--\n      fixup_fraction(x, k1, k2);\n      return;\n    }\n    k1 = yindex;\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n    k2 = yindex;\n    level++;\n    emit_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  };\n\n  // if n == 1 then emit as expr (no parens)\n\n  // p is a power\n  emit_denominator = function(p, n) {\n    var k1, k2;\n    k1 = 0;\n    k2 = 0;\n    // special case: 1 over something\n    if (isminusone(caddr(p))) {\n      if (n === 1) {\n        emit_expr(cadr(p));\n      } else {\n        emit_factor(cadr(p));\n      }\n      return;\n    }\n    k1 = yindex;\n    // emit base\n    if (isfactor(cadr(p))) {\n      emit_factor(cadr(p));\n    } else {\n      emit_subexpr(cadr(p));\n    }\n    k2 = yindex;\n    // emit exponent, don't emit minus sign\n    level++;\n    emit_unsigned_expr(caddr(p));\n    level--;\n    return fixup_power(k1, k2);\n  };\n\n  emit_function = function(p) {\n    if (car(p) === symbol(INDEX) && issymbol(cadr(p))) {\n      emit_index_function(p);\n      return;\n    }\n    if (car(p) === symbol(FACTORIAL)) {\n      emit_factorial_function(p);\n      return;\n    }\n    if (car(p) === symbol(DERIVATIVE)) {\n      __emit_char('d');\n    } else {\n      emit_symbol(car(p));\n    }\n    __emit_char('(');\n    p = cdr(p);\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        __emit_char(',');\n        //__emit_char(' ')\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n    return __emit_char(')');\n  };\n\n  emit_index_function = function(p) {\n    p = cdr(p);\n    if (caar(p) === symbol(ADD) || caar(p) === symbol(MULTIPLY) || caar(p) === symbol(POWER) || caar(p) === symbol(FACTORIAL)) {\n      emit_subexpr(car(p));\n    } else {\n      emit_expr(car(p));\n    }\n    __emit_char('[');\n    p = cdr(p);\n    if (iscons(p)) {\n      emit_expr(car(p));\n      p = cdr(p);\n      while (iscons(p)) {\n        __emit_char(',');\n        emit_expr(car(p));\n        p = cdr(p);\n      }\n    }\n    return __emit_char(']');\n  };\n\n  emit_factorial_function = function(p) {\n    p = cadr(p);\n    if (isfraction(p) || car(p) === symbol(ADD) || car(p) === symbol(MULTIPLY) || car(p) === symbol(POWER) || car(p) === symbol(FACTORIAL)) {\n      emit_subexpr(p);\n    } else {\n      emit_expr(p);\n    }\n    return __emit_char('!');\n  };\n\n  emit_subexpr = function(p) {\n    __emit_char('(');\n    emit_expr(p);\n    return __emit_char(')');\n  };\n\n  emit_symbol = function(p) {\n    var i, j1, pPrintName, ref2, results;\n    i = 0;\n    if (p === symbol(E)) {\n      __emit_str(\"exp(1)\");\n      return;\n    }\n    pPrintName = get_printname(p);\n    results = [];\n    for (i = j1 = 0, ref2 = pPrintName.length; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(pPrintName[i]));\n    }\n    return results;\n  };\n\n  emit_string = function(p) {\n    var i, j1, pString, ref2;\n    i = 0;\n    pString = p.str;\n    __emit_char('\"');\n    for (i = j1 = 0, ref2 = pString.length; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      __emit_char(pString[i]);\n    }\n    return __emit_char('\"');\n  };\n\n  fixup_fraction = function(x, k1, k2) {\n    var dx, dy, h1, h2, i, j1, ref2, results, w, w1, w2, y, y1, y2;\n    dx = 0;\n    dy = 0;\n    i = 0;\n    w = 0;\n    y = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n    [h1, w1, y1] = get_size(k1, k2);\n    [h2, w2, y2] = get_size(k2, yindex);\n    if (w2 > w1) {\n      dx = (w2 - w1) / 2; // shift numerator right\n    } else {\n      dx = 0;\n    }\n    dx++;\n    // this is how much is below the baseline\n    y = y1 + h1 - 1;\n    dy = -y - 1;\n    move(k1, k2, dx, dy);\n    if (w2 > w1) {\n      dx = -w1;\n    } else {\n      dx = -w1 + (w1 - w2) / 2;\n    }\n    dx++;\n    dy = -y2 + 1;\n    move(k2, yindex, dx, dy);\n    if (w2 > w1) {\n      w = w2;\n    } else {\n      w = w1;\n    }\n    w += 2;\n    emit_x = x;\n    results = [];\n    for (i = j1 = 0, ref2 = w; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char('-'));\n    }\n    return results;\n  };\n\n  fixup_power = function(k1, k2) {\n    var dy, h1, h2, w1, w2, y1, y2;\n    dy = 0;\n    h1 = 0;\n    w1 = 0;\n    y1 = 0;\n    h2 = 0;\n    w2 = 0;\n    y2 = 0;\n    [h1, w1, y1] = get_size(k1, k2);\n    [h2, w2, y2] = get_size(k2, yindex);\n    // move superscript to baseline\n    dy = -y2 - h2 + 1;\n    // now move above base\n    dy += y1 - 1;\n    return move(k2, yindex, 0, dy);\n  };\n\n  move = function(j, k, dx, dy) {\n    var i, j1, ref2, ref3, results;\n    i = 0;\n    results = [];\n    for (i = j1 = ref2 = j, ref3 = k; (ref2 <= ref3 ? j1 < ref3 : j1 > ref3); i = ref2 <= ref3 ? ++j1 : --j1) {\n      chartab[i].x += dx;\n      results.push(chartab[i].y += dy);\n    }\n    return results;\n  };\n\n  // finds the bounding rectangle and vertical position\n  get_size = function(j, k) {\n    var h, i, j1, max_x, max_y, min_x, min_y, ref2, ref3, w, y;\n    i = 0;\n    min_x = chartab[j].x;\n    max_x = chartab[j].x;\n    min_y = chartab[j].y;\n    max_y = chartab[j].y;\n    for (i = j1 = ref2 = j + 1, ref3 = k; (ref2 <= ref3 ? j1 < ref3 : j1 > ref3); i = ref2 <= ref3 ? ++j1 : --j1) {\n      if (chartab[i].x < min_x) {\n        min_x = chartab[i].x;\n      }\n      if (chartab[i].x > max_x) {\n        max_x = chartab[i].x;\n      }\n      if (chartab[i].y < min_y) {\n        min_y = chartab[i].y;\n      }\n      if (chartab[i].y > max_y) {\n        max_y = chartab[i].y;\n      }\n    }\n    h = max_y - min_y + 1;\n    w = max_x - min_x + 1;\n    y = min_y;\n    return [h, w, y];\n  };\n\n  displaychar = function(c) {\n    return __emit_char(c);\n  };\n\n  __emit_char = function(c) {\n    if (yindex === YMAX) {\n      return;\n    }\n    if (chartab[yindex] == null) {\n      debugger;\n    }\n    chartab[yindex].c = c;\n    chartab[yindex].x = emit_x;\n    chartab[yindex].y = 0;\n    yindex++;\n    return emit_x++;\n  };\n\n  __emit_str = function(s) {\n    var i, j1, ref2, results;\n    i = 0;\n    results = [];\n    for (i = j1 = 0, ref2 = s.length; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      results.push(__emit_char(s[i]));\n    }\n    return results;\n  };\n\n  emit_number = function(p, emit_sign) {\n    var i, j1, l1, m1, ref2, ref3, ref4, results, results1, tmpString;\n    tmpString = \"\";\n    i = 0;\n    switch (p.k) {\n      case NUM:\n        tmpString = p.q.a.toString();\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n        for (i = j1 = 0, ref2 = tmpString.length; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n          __emit_char(tmpString[i]);\n        }\n        tmpString = p.q.b.toString();\n        if (tmpString === \"1\") {\n          break;\n        }\n        __emit_char('/');\n        results = [];\n        for (i = l1 = 0, ref3 = tmpString.length; (0 <= ref3 ? l1 < ref3 : l1 > ref3); i = 0 <= ref3 ? ++l1 : --l1) {\n          results.push(__emit_char(tmpString[i]));\n        }\n        return results;\n        break;\n      case DOUBLE:\n        tmpString = doubleToReasonableString(p.d);\n        if (tmpString[0] === '-' && emit_sign === 0) {\n          tmpString = tmpString.substring(1);\n        }\n        results1 = [];\n        for (i = m1 = 0, ref4 = tmpString.length; (0 <= ref4 ? m1 < ref4 : m1 > ref4); i = 0 <= ref4 ? ++m1 : --m1) {\n          results1.push(__emit_char(tmpString[i]));\n        }\n        return results1;\n    }\n  };\n\n  // a and b are glyphs\n  cmpGlyphs = function(a, b) {\n    if (a.y < b.y) {\n      return -1;\n    }\n    if (a.y > b.y) {\n      return 1;\n    }\n    if (a.x < b.x) {\n      return -1;\n    }\n    if (a.x > b.x) {\n      return 1;\n    }\n    return 0;\n  };\n\n  print_glyphs = function() {\n    var accumulator, i, j1, ref2, subsetOfStack, x, y;\n    i = 0;\n    accumulator = \"\";\n    \n    // now sort the glyphs by their vertical positions,\n    // since we are going to build a string where obviously the\n    // \"upper\" line has to printed out first, followed by\n    // a new line, followed by the other lines.\n    //qsort(chartab, yindex, sizeof (struct glyph), __cmp)\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n    for (i = j1 = 0, ref2 = yindex; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        accumulator += printchar('\\n');\n        x = 0;\n        y++;\n      }\n      while (chartab[i].x > x) {\n        accumulator += printchar_nowrap(' ');\n        x++;\n      }\n      accumulator += printchar_nowrap(chartab[i].c);\n      x++;\n    }\n    return accumulator;\n  };\n\n  buffer = \"\";\n\n  getdisplaystr = function() {\n    yindex = 0;\n    level = 0;\n    emit_x = 0;\n    emit_expr(pop());\n    fill_buf();\n    return buffer;\n  };\n\n  fill_buf = function() {\n    var i, j1, ref2, sIndex, subsetOfStack, tmpBuffer, x, y;\n    tmpBuffer = buffer;\n    sIndex = 0;\n    i = 0;\n    //qsort(chartab, yindex, sizeof (struct glyph), __cmp)\n    subsetOfStack = chartab.slice(0, yindex);\n    subsetOfStack.sort(cmpGlyphs);\n    chartab = [].concat(subsetOfStack).concat(chartab.slice(yindex));\n    x = 0;\n    y = chartab[0].y;\n    for (i = j1 = 0, ref2 = yindex; (0 <= ref2 ? j1 < ref2 : j1 > ref2); i = 0 <= ref2 ? ++j1 : --j1) {\n      while (chartab[i].y > y) {\n        tmpBuffer[sIndex++] = '\\n';\n        x = 0;\n        y++;\n      }\n      while (chartab[i].x > x) {\n        tmpBuffer[sIndex++] = ' ';\n        x++;\n      }\n      tmpBuffer[sIndex++] = chartab[i].c;\n      x++;\n    }\n    return tmpBuffer[sIndex++] = '\\n';\n  };\n\n  N = 100;\n\n  oneElement = (function() {\n    class oneElement {};\n\n    oneElement.prototype.x = 0;\n\n    oneElement.prototype.y = 0;\n\n    oneElement.prototype.h = 0;\n\n    oneElement.prototype.w = 0;\n\n    oneElement.prototype.index = 0;\n\n    oneElement.prototype.count = 0;\n\n    return oneElement;\n\n  }).call(this);\n\n  elem = [];\n\n  for (elelmIndex = j1 = 0; j1 < 10000; elelmIndex = ++j1) {\n    elem[elelmIndex] = new oneElement();\n  }\n\n  SPACE_BETWEEN_COLUMNS = 3;\n\n  SPACE_BETWEEN_ROWS = 1;\n\n  emit_tensor = function(p) {\n    var col, dx, dy, eh, ew, h, i, l1, m1, n, n1, ncol, nrow, o1, ref2, ref3, ref4, ref5, row, w, x, y;\n    i = 0;\n    n = 0;\n    nrow = 0;\n    ncol = 0;\n    x = 0;\n    y = 0;\n    h = 0;\n    w = 0;\n    dx = 0;\n    dy = 0;\n    eh = 0;\n    ew = 0;\n    row = 0;\n    col = 0;\n    if (p.tensor.ndim > 2) {\n      emit_flat_tensor(p);\n      return;\n    }\n    nrow = p.tensor.dim[0];\n    if (p.tensor.ndim === 2) {\n      ncol = p.tensor.dim[1];\n    } else {\n      ncol = 1;\n    }\n    n = nrow * ncol;\n    if (n > N) {\n      emit_flat_tensor(p);\n      return;\n    }\n    // horizontal coordinate of the matrix\n\n    //if 0\n    //emit_x += 2; # make space for left paren\n    //endif\n    x = emit_x;\n// emit each element\n    for (i = l1 = 0, ref2 = n; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      elem[i].index = yindex;\n      elem[i].x = emit_x;\n      emit_expr(p.tensor.elem[i]);\n      elem[i].count = yindex - elem[i].index;\n      [elem[i].h, elem[i].w, elem[i].y] = get_size(elem[i].index, yindex);\n    }\n    // find element height and width\n    eh = 0;\n    ew = 0;\n    for (i = m1 = 0, ref3 = n; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      if (elem[i].h > eh) {\n        eh = elem[i].h;\n      }\n      if (elem[i].w > ew) {\n        ew = elem[i].w;\n      }\n    }\n    // this is the overall height of the matrix\n    h = nrow * eh + (nrow - 1) * SPACE_BETWEEN_ROWS;\n    // this is the overall width of the matrix\n    w = ncol * ew + (ncol - 1) * SPACE_BETWEEN_COLUMNS;\n    // this is the vertical coordinate of the matrix\n    y = -(h / 2);\n// move elements around\n    for (row = n1 = 0, ref4 = nrow; (0 <= ref4 ? n1 < ref4 : n1 > ref4); row = 0 <= ref4 ? ++n1 : --n1) {\n      for (col = o1 = 0, ref5 = ncol; (0 <= ref5 ? o1 < ref5 : o1 > ref5); col = 0 <= ref5 ? ++o1 : --o1) {\n        i = row * ncol + col;\n        // first move to upper left corner of matrix\n        dx = x - elem[i].x;\n        dy = y - elem[i].y;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy);\n        // now move to official position\n        dx = 0;\n        if (col > 0) {\n          dx = col * (ew + SPACE_BETWEEN_COLUMNS);\n        }\n        dy = 0;\n        if (row > 0) {\n          dy = row * (eh + SPACE_BETWEEN_ROWS);\n        }\n        // small correction for horizontal centering\n        dx += (ew - elem[i].w) / 2;\n        // small correction for vertical centering\n        dy += (eh - elem[i].h) / 2;\n        move(elem[i].index, elem[i].index + elem[i].count, dx, dy);\n      }\n    }\n    return emit_x = x + w;\n  };\n\n  emit_flat_tensor = function(p) {\n    return emit_tensor_inner(p, 0, 0);\n  };\n\n  emit_tensor_inner = function(p, j, k) {\n    var i, l1, ref2;\n    i = 0;\n    __emit_char('(');\n    for (i = l1 = 0, ref2 = p.tensor.dim[j]; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      if (j + 1 === p.tensor.ndim) {\n        emit_expr(p.tensor.elem[k]);\n        k = k + 1;\n      } else {\n        k = emit_tensor_inner(p, j + 1, k);\n      }\n      if (i + 1 < p.tensor.dim[j]) {\n        __emit_char(',');\n      }\n    }\n    __emit_char(')');\n    return k;\n  };\n\n  // 'product' function\n\n  //define A p3\n  //define B p4\n  //define I p5\n  //define X p6\n\n  // leaves the product at the top of the stack\n  Eval_product = function() {\n    var body, i, indexVariable, j, k, l1, oldIndexVariableValue, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0;\n    // 1st arg\n    body = cadr(p1);\n    // 2nd arg (index)\n    indexVariable = caddr(p1);\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    }\n    // 3rd arg (lower limit)\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n    // 4th arg (upper limit)\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n    // remember contents of the index\n    // variable so we can put it back after the loop\n    oldIndexVariableValue = get_binding(indexVariable);\n    push_integer(1);\n    for (i = l1 = ref2 = j, ref3 = k; (ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3); i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n      if (DEBUG) {\n        console.log(\"product - factor 1: \" + stack[tos - 1].toString());\n        console.log(\"product - factor 2: \" + stack[tos - 2].toString());\n      }\n      multiply();\n      if (DEBUG) {\n        console.log(\"product - result: \" + stack[tos - 1].toString());\n      }\n    }\n    // put back the index variable to original content\n    return set_binding(indexVariable, oldIndexVariableValue);\n  };\n\n  //  Add rational numbers\n\n  //  Input:    tos-2    addend\n\n  //      tos-1    addend\n\n  //  Output:    sum on stack\n  qadd = function() {\n    var gcdBetweenNumeratorAndDenominator, qadd_ab, qadd_ba, qadd_denominator, qadd_frac1, qadd_frac2, qadd_numerator, resultSum;\n    // a, qadd_ab, b, qadd_ba, c are all bigNum\n    // we are adding the fractions qadd_frac1 + qadd_frac2 i.e.\n    // qadd_frac1.q.a/qadd_frac1.q.b + qadd_frac2.q.a/qadd_frac2.q.b\n    qadd_frac2 = pop();\n    qadd_frac1 = pop();\n    qadd_ab = mmul(qadd_frac1.q.a, qadd_frac2.q.b);\n    qadd_ba = mmul(qadd_frac1.q.b, qadd_frac2.q.a);\n    qadd_numerator = madd(qadd_ab, qadd_ba);\n    //mfree(qadd_ab)\n    //mfree(qadd_ba)\n\n    // zero?\n    if (MZERO(qadd_numerator)) {\n      //console.log \"qadd IS ZERO\"\n      //mfree(qadd_numerator)\n      push(zero);\n      return;\n    }\n    qadd_denominator = mmul(qadd_frac1.q.b, qadd_frac2.q.b);\n    gcdBetweenNumeratorAndDenominator = mgcd(qadd_numerator, qadd_denominator);\n    //console.log \"gcd(\"+qadd_numerator+\",\"+qadd_denominator+\"): \" + gcdBetweenNumeratorAndDenominator\n    gcdBetweenNumeratorAndDenominator = makeSignSameAs(gcdBetweenNumeratorAndDenominator, qadd_denominator);\n    //console.log \"qadd qadd_denominator: \" + qadd_denominator\n    //console.log \"qadd gcdBetweenNumeratorAndDenominator: \" + gcdBetweenNumeratorAndDenominator\n    resultSum = new U();\n    resultSum.k = NUM;\n    resultSum.q.a = mdiv(qadd_numerator, gcdBetweenNumeratorAndDenominator);\n    resultSum.q.b = mdiv(qadd_denominator, gcdBetweenNumeratorAndDenominator);\n    //console.log \"qadd resultSum.q.a: \" + resultSum.q.a\n    //console.log \"qadd resultSum.q.b: \" + resultSum.q.b\n\n    //mfree(qadd_numerator)\n    //mfree(qadd_denominator)\n    //mfree(gcdBetweenNumeratorAndDenominator)\n    return push(resultSum);\n  };\n\n  //console.log \"qadd result: \" + resultSum\n\n  //  Divide rational numbers\n\n  //  Input:    tos-2    dividend\n\n  //      tos-1    divisor\n\n  //  Output:    quotient on stack\n  qdiv = function() {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop();\n    // zero?\n    if (MZERO(p2.q.a)) {\n      stop(\"divide by zero\");\n    }\n    if (MZERO(p1.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n    aa = mmul(p1.q.a, p2.q.b);\n    bb = mmul(p1.q.b, p2.q.a);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c);\n    push(p1);\n    return restore();\n  };\n\n  //  Multiply rational numbers\n\n  //  Input:    tos-2    multiplicand\n\n  //      tos-1    multiplier\n\n  //  Output:    product on stack\n  qmul = function() {\n    var aa, bb, c;\n    save();\n    p2 = pop();\n    p1 = pop();\n    // zero?\n    if (MZERO(p1.q.a) || MZERO(p2.q.a)) {\n      push(zero);\n      restore();\n      return;\n    }\n    aa = mmul(p1.q.a, p2.q.a);\n    bb = mmul(p1.q.b, p2.q.b);\n    c = mgcd(aa, bb);\n    c = makeSignSameAs(c, bb);\n    p1 = new U();\n    p1.k = NUM;\n    p1.q.a = mdiv(aa, c);\n    p1.q.b = mdiv(bb, c);\n    //mfree(aa)\n    //mfree(bb)\n    push(p1);\n    return restore();\n  };\n\n  // Rational power function\n  qpow = function() {\n    save();\n    qpowf();\n    return restore();\n  };\n\n  //define BASE p1\n  //define EXPO p2\n  qpowf = function() {\n    var a, b, expo, t, x, y;\n    expo = 0;\n    //unsigned int a, b, *t, *x, *y\n    p2 = pop();\n    p1 = pop();\n    if (isplusone(p1) || isZeroAtomOrTensor(p2)) { // p1 is BASE  # p2 is EXPO\n      push_integer(1);\n      return;\n    }\n    // if (-1)^(1/2) -> leave it as is\n    if (isminusone(p1) && isoneovertwo(p2)) { // p1 is BASE  # p2 is EXPO\n      push(imaginaryunit);\n      return;\n    }\n    // if base is zero then return 0\n    if (isZeroAtomOrTensor(p1)) { // p1 is BASE\n      if (isnegativenumber(p2)) { // p2 is EXPO\n        stop(\"divide by zero\");\n      }\n      push(zero);\n      return;\n    }\n    // if exponent is 1 then return base\n    if (isplusone(p2)) { // p2 is EXPO\n      push(p1);\n      return;\n    }\n    // if exponent is integer then power\n    if (isinteger(p2)) { // p2 is EXPO\n      push(p2);\n      expo = pop_integer();\n      if (isNaN(expo)) {\n        // expo greater than 32 bits\n        push_symbol(POWER);\n        push(p1);\n        push(p2);\n        list(3);\n        return;\n      }\n      x = mpow(p1.q.a, Math.abs(expo));\n      y = mpow(p1.q.b, Math.abs(expo));\n      if (expo < 0) {\n        t = x;\n        x = y;\n        y = t;\n        x = makeSignSameAs(x, y);\n        y = makePositive(y);\n      }\n      p3 = new U();\n      p3.k = NUM;\n      p3.q.a = x;\n      p3.q.b = y;\n      push(p3);\n      return;\n    }\n    // from here on out the exponent is NOT an integer\n\n    // if base is -1 then normalize polar angle\n    if (isminusone(p1)) { // p1 is BASE\n      push(p2);\n      normalize_angle();\n      return;\n    }\n    // if base is negative then (-N)^M -> N^M * (-1)^M\n    if (isnegativenumber(p1)) { // p1 is BASE\n      push(p1);\n      negate();\n      push(p2);\n      qpow();\n      push_integer(-1);\n      push(p2);\n      qpow();\n      multiply();\n      return;\n    }\n    if (!isinteger(p1)) { // p1 is BASE\n      push(p1);\n      mp_numerator();\n      push(p2);\n      qpow();\n      push(p1);\n      mp_denominator();\n      push(p2);\n      negate();\n      qpow();\n      multiply();\n      return;\n    }\n    // At this point p1 (BASE) is a positive integer.\n\n    // If p1 (BASE) is small then factor it.\n    if (is_small_integer(p1)) { // p1 is BASE\n      push(p1);\n      push(p2);\n      quickfactor();\n      return;\n    }\n    if (!isSmall(p2.q.a) || !isSmall(p2.q.b)) { // p2 is EXPO\n      push_symbol(POWER);\n      push(p1); // p1 is BASE\n      push(p2);\n      list(3);\n      return;\n    }\n    a = p2.q.a;\n    b = p2.q.b;\n    x = mroot(p1.q.a, b);\n    if (x === 0) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    y = mpow(x, a);\n    //mfree(x)\n    p3 = new U();\n    p3.k = NUM;\n    if (p2.q.a.isNegative()) { // p2 is EXPO\n      p3.q.a = bigInt(1);\n      p3.q.b = y;\n    } else {\n      p3.q.a = y;\n      p3.q.b = bigInt(1);\n    }\n    return push(p3);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Normalize the angle of unit imaginary, i.e. (-1) ^ N\n\n  //  Input:    N on stack (must be rational, not float)\n\n  //  Output:    Result on stack\n\n  //  Note:\n\n  //  n = q * d + r\n\n  //  Example:\n  //            n  d  q  r\n\n  //  (-1)^(8/3)  ->   (-1)^(2/3)  8  3  2  2\n  //  (-1)^(7/3)  ->   (-1)^(1/3)  7  3  2  1\n  //  (-1)^(5/3)  ->  -(-1)^(2/3)  5  3  1  2\n  //  (-1)^(4/3)  ->  -(-1)^(1/3)  4  3  1  1\n  //  (-1)^(2/3)  ->   (-1)^(2/3)  2  3  0  2\n  //  (-1)^(1/3)  ->   (-1)^(1/3)  1  3  0  1\n\n  //  (-1)^(-1/3)  ->  -(-1)^(2/3)  -1  3  -1  2\n  //  (-1)^(-2/3)  ->  -(-1)^(1/3)  -2  3  -1  1\n  //  (-1)^(-4/3)  ->   (-1)^(2/3)  -4  3  -2  2\n  //  (-1)^(-5/3)  ->   (-1)^(1/3)  -5  3  -2  1\n  //  (-1)^(-7/3)  ->  -(-1)^(2/3)  -7  3  -3  2\n  //  (-1)^(-8/3)  ->  -(-1)^(1/3)  -8  3  -3  1\n\n  //-----------------------------------------------------------------------------\n\n  //define A p1\n  //define Q p2\n  //define R p3\n  normalize_angle = function() {\n    save();\n    p1 = pop();\n    if (isinteger(p1)) { // p1 is A\n      if (p1.q.a.isOdd()) { // p1 is A\n        push_integer(-1); // odd exponent\n      } else {\n        push_integer(1); // even exponent\n      }\n      restore();\n      return;\n    }\n    // floor\n    push(p1);\n    bignum_truncate();\n    p2 = pop();\n    if (isnegativenumber(p1)) { // p1 is A\n      push(p2); // p2 is Q\n      push_integer(-1);\n      add();\n      p2 = pop(); // p2 is Q\n    }\n    \n    // remainder (always positive)\n    push(p1);\n    push(p2);\n    subtract();\n    p3 = pop();\n    push_symbol(POWER);\n    push_integer(-1);\n    push(p3); // p3 is R\n    list(3);\n    // negate if quotient is odd\n    if (p2.q.a.isOdd()) { // p2 is Q\n      negate();\n    }\n    return restore();\n  };\n\n  is_small_integer = function(p) {\n    return isSmall(p.q.a);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Factor small numerical powers\n\n  //  Input:    tos-2    Base (positive integer < 2^31 - 1)\n\n  //      tos-1    Exponent\n\n  //  Output:    Expr on stack\n\n  //-----------------------------------------------------------------------------\n\n  //define BASE p1\n  //define EXPO p2\n  quickfactor = function() {\n    var h, i, l1, n, ref2, stackIndex;\n    i = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    push(p1);\n    factor_small_number();\n    n = tos - h;\n    stackIndex = h;\n    for (i = l1 = 0, ref2 = n; l1 < ref2; i = l1 += 2) {\n      push(stack[stackIndex + i]);\n      push(stack[stackIndex + i + 1]);\n      push(p2);\n      multiply();\n      quickpower();\n    }\n    // stack has n results from factor_number_raw()\n\n    // on top of that are all the expressions from quickpower()\n\n    // multiply the quickpower() results\n    multiply_all(tos - h - n);\n    p1 = pop();\n    moveTos(h);\n    push(p1);\n    return restore();\n  };\n\n  // p1 (BASE) is a prime number so power is simpler\n  quickpower = function() {\n    var expo;\n    expo = 0;\n    save();\n    p2 = pop();\n    p1 = pop();\n    push(p2);\n    bignum_truncate();\n    p3 = pop();\n    push(p2);\n    push(p3);\n    subtract();\n    p4 = pop();\n    if (!isZeroAtomOrTensor(p4)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p4);\n      list(3);\n    }\n    push(p3);\n    expo = pop_integer();\n    if (isNaN(expo)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p3);\n      list(3);\n      restore();\n      return;\n    }\n    if (expo === 0) {\n      restore();\n      return;\n    }\n    push(p1);\n    bignum_power_number(expo);\n    return restore();\n  };\n\n  //if SELFTEST\n\n  // Divide polynomials\n  Eval_quotient = function() {\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    push(cadddr(p1));\n    Eval();\n    p1 = pop();\n    if (p1 === symbol(NIL)) {\n      p1 = symbol(SYMBOL_X);\n    }\n    push(p1);\n    return divpoly();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Divide polynomials\n\n  //  Input:    tos-3    Dividend\n\n  //      tos-2    Divisor\n\n  //      tos-1    x\n\n  //  Output:    tos-1    Quotient\n\n  //-----------------------------------------------------------------------------\n\n  //define DIVIDEND p1\n  //define DIVISOR p2\n  //define X p3\n  //define Q p4\n  //define QUOTIENT p5\n  divpoly = function() {\n    var dividend, divisor, h, i, l1, m, n, ref2, x;\n    h = 0;\n    i = 0;\n    m = 0;\n    n = 0;\n    x = 0;\n    //U **dividend, **divisor\n    save();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    h = tos;\n    dividend = tos;\n    m = coeff(p3, p1) - 1;\n    divisor = tos;\n    n = coeff(p3, p2) - 1;\n    x = m - n;\n    push_integer(0);\n    p5 = pop();\n    while (x >= 0) {\n      push(stack[dividend + m]);\n      push(stack[divisor + n]);\n      divide();\n      p4 = pop();\n      for (i = l1 = 0, ref2 = n; (0 <= ref2 ? l1 <= ref2 : l1 >= ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        push(stack[dividend + x + i]);\n        push(stack[divisor + i]);\n        push(p4);\n        multiply();\n        subtract();\n        stack[dividend + x + i] = pop();\n      }\n      push(p5);\n      push(p4);\n      push(p3);\n      push_integer(x);\n      power();\n      multiply();\n      add();\n      p5 = pop();\n      m--;\n      x--;\n    }\n    moveTos(h);\n    push(p5);\n    return restore();\n  };\n\n  DEBUG_RATIONALIZE = false;\n\n  Eval_rationalize = function() {\n    push(cadr(p1));\n    Eval();\n    return rationalize();\n  };\n\n  rationalize = function() {\n    var x;\n    x = expanding;\n    yyrationalize();\n    return expanding = x;\n  };\n\n  yyrationalize = function() {\n    var commonDenominator, eachTerm, theArgument;\n    theArgument = pop();\n    if (istensor(theArgument)) {\n      __rationalize_tensor(theArgument);\n      return;\n    }\n    expanding = 0;\n    if (car(theArgument) !== symbol(ADD)) {\n      push(theArgument);\n      return;\n    }\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: this is the input expr: \" + theArgument);\n    }\n    // get new denominator\n    push(one);\n    multiply_denominators(theArgument);\n    commonDenominator = pop();\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: this is the new denominator: \" + commonDenominator);\n    }\n    // multiply each term by new denominator\n    push(zero);\n    eachTerm = cdr(theArgument);\n    while (iscons(eachTerm)) {\n      if (DEBUG_RATIONALIZE) {\n        console.log(\"term: \" + car(eachTerm));\n      }\n      push(commonDenominator);\n      push(car(eachTerm));\n      multiply();\n      add();\n      eachTerm = cdr(eachTerm);\n    }\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: original terms times new denominator: \" + stack[tos - 1]);\n    }\n    // collect common factors\n    Condense();\n    if (DEBUG_RATIONALIZE) {\n      console.log(\"rationalize: after factoring: \" + stack[tos - 1]);\n    }\n    // divide by common denominator\n    push(commonDenominator);\n    divide();\n    if (DEBUG_RATIONALIZE) {\n      return console.log(\"rationalize: after dividing by new denom. (and we're done): \" + stack[tos - 1]);\n    }\n  };\n\n  multiply_denominators = function(p) {\n    var results;\n    if (car(p) === symbol(ADD)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        multiply_denominators_term(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      return multiply_denominators_term(p);\n    }\n  };\n\n  multiply_denominators_term = function(p) {\n    var results;\n    if (car(p) === symbol(MULTIPLY)) {\n      p = cdr(p);\n      results = [];\n      while (iscons(p)) {\n        multiply_denominators_factor(car(p));\n        results.push(p = cdr(p));\n      }\n      return results;\n    } else {\n      return multiply_denominators_factor(p);\n    }\n  };\n\n  multiply_denominators_factor = function(p) {\n    if (car(p) !== symbol(POWER)) {\n      return;\n    }\n    push(p);\n    p = caddr(p);\n    // like x^(-2) ?\n    if (isnegativenumber(p)) {\n      inverse();\n      __lcm();\n      return;\n    }\n    // like x^(-a) ?\n    if (car(p) === symbol(MULTIPLY) && isnegativenumber(cadr(p))) {\n      inverse();\n      __lcm();\n      return;\n    }\n    // no match\n    return pop();\n  };\n\n  __rationalize_tensor = function(theTensor) {\n    var i, l1, n, ref2;\n    i = 0;\n    push(theTensor);\n    Eval();\n    theTensor = pop();\n    if (!istensor(theTensor)) { // might be zero\n      push(theTensor);\n      return;\n    }\n    n = theTensor.tensor.nelem;\n    for (i = l1 = 0, ref2 = n; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      push(theTensor.tensor.elem[i]);\n      rationalize();\n      theTensor.tensor.elem[i] = pop();\n    }\n    check_tensor_dimensions(theTensor);\n    return push(theTensor);\n  };\n\n  __lcm = function() {\n    save();\n    p1 = pop();\n    p2 = pop();\n    push(p1);\n    push(p2);\n    multiply();\n    push(p1);\n    push(p2);\n    gcd();\n    divide();\n    return restore();\n  };\n\n  Eval_real = function() {\n    push(cadr(p1));\n    Eval();\n    return real();\n  };\n\n  real = function() {\n    save();\n    rect();\n    p1 = pop();\n    push(p1);\n    push(p1);\n    conjugate();\n    add();\n    push_integer(2);\n    divide();\n    return restore();\n  };\n\n  DEBUG_RECT = false;\n\n  Eval_rect = function() {\n    push(cadr(p1));\n    Eval();\n    return rect();\n  };\n\n  rect = function() {\n    var input;\n    save();\n    p1 = pop();\n    input = p1;\n    if (DEBUG_RECT) {\n      console.log(\"RECT of \" + input);\n    }\n    if (DEBUG_RECT) {\n      console.log(\"any clock forms in : \" + input + \" ? \" + findPossibleClockForm(input));\n    }\n    // if we assume real variables, then the\n    // rect of any symbol is the symbol itself\n    // (note that 'i' is not a symbol, it's made of (-1)^(1/2))\n    // otherwise we have to leave unevalled\n    if (issymbol(p1)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n      if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n        push(p1);\n      } else {\n        push_symbol(YYRECT);\n        push(p1);\n        list(2);\n      }\n    } else if (!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))) && !findPossibleExponentialForm(p1) && !findPossibleClockForm(p1) && !(Find(p1, symbol(SIN)) && Find(p1, symbol(COS)) && Find(p1, imaginaryunit))) { // no polar form?\n      if (DEBUG_RECT) {\n        console.log(\" rect: simple symbol: \" + input);\n      }\n      push(p1);\n    // ib\n    } else if (car(p1) === symbol(MULTIPLY) && isimaginaryunit(cadr(p1)) && !isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))) {\n      push(p1);\n    // sum\n    } else if (car(p1) === symbol(ADD)) {\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is a sum \");\n      }\n      push_integer(0);\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        rect();\n        add();\n        p1 = cdr(p1);\n      }\n    } else {\n      // try to get to the rectangular form by doing\n      // abs(p1) * (cos (theta) + i * sin(theta))\n      // where theta is arg(p1)\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" is NOT a sum \");\n      }\n      push(p1);\n      abs();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" abs: \" + stack[tos - 1].toString());\n      }\n      push(p1);\n      arg();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" arg of \" + p1 + \" : \" + stack[tos - 1].toString());\n      }\n      p1 = pop();\n      push(p1);\n      cosine();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cosine: \" + stack[tos - 1].toString());\n      }\n      push(imaginaryunit);\n      push(p1);\n      sine();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" sine: \" + stack[tos - 1].toString());\n      }\n      multiply();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" i * sine: \" + stack[tos - 1].toString());\n      }\n      add();\n      if (DEBUG_RECT) {\n        console.log(\" rect - \" + input + \" cos + i * sine: \" + stack[tos - 1].toString());\n      }\n      multiply();\n    }\n    restore();\n    if (DEBUG_RECT) {\n      return console.log(\"rect of \" + input + \" : \" + stack[tos - 1]);\n    }\n  };\n\n  //define POLY p1\n  //define X p2\n  //define A p3\n  //define B p4\n  //define C p5\n  //define Y p6\n  show_power_debug = false;\n\n  performing_roots = false;\n\n  Eval_roots = function() {\n    // this transforms simple \"equation\" forms into\n    // something that can be processed. E.g., say, y = 3x - 2\n    // A == B -> A - B\n    // A = B -> A - B\n    p2 = cadr(p1);\n    if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n      push(cadr(p2));\n      Eval();\n      push(caddr(p2));\n      Eval();\n      subtract();\n    } else {\n      push(p2);\n      Eval();\n      p2 = pop();\n      if (car(p2) === symbol(SETQ) || car(p2) === symbol(TESTEQ)) {\n        push(cadr(p2));\n        Eval();\n        push(caddr(p2));\n        Eval();\n        subtract();\n      } else {\n        push(p2);\n      }\n    }\n    // 2nd arg, x\n    push(caddr(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    p2 = pop();\n    p1 = pop();\n    if (!ispolyexpandedform(p1, p2)) {\n      stop(\"roots: 1st argument is not a polynomial in the variable \" + p2);\n    }\n    push(p1);\n    push(p2);\n    return roots();\n  };\n\n  hasImaginaryCoeff = function(k) {\n    var h, i, imaginaryCoefficients, l1, ref2;\n    //polycoeff = tos\n    imaginaryCoefficients = false;\n    h = tos;\n    for (i = l1 = ref2 = k; l1 > 0; i = l1 += -1) {\n      //console.log \"hasImaginaryCoeff - coeff.:\" + stack[tos-i].toString()\n      if (iscomplexnumber(stack[tos - i])) {\n        imaginaryCoefficients = true;\n        break;\n      }\n    }\n    return imaginaryCoefficients;\n  };\n\n  isSimpleRoot = function(k) {\n    var h, i, isSimpleRootPolynomial, l1, ref2;\n    //polycoeff = tos\n\n    //tos-n    Coefficient of x^0\n    //tos-1    Coefficient of x^(n-1)\n    if (k > 2) {\n      isSimpleRootPolynomial = true;\n      h = tos;\n      if (isZeroAtomOrTensor(stack[tos - k])) {\n        isSimpleRootPolynomial = false;\n      }\n      for (i = l1 = ref2 = k - 1; l1 > 1; i = l1 += -1) {\n        if (!isZeroAtomOrTensor(stack[tos - i])) {\n          isSimpleRootPolynomial = false;\n          break;\n        }\n      }\n    } else {\n      isSimpleRootPolynomial = false;\n    }\n    return isSimpleRootPolynomial;\n  };\n\n  normalisedCoeff = function(variable, polynomial) {\n    var divideBy, i, k, l1, m1, miniStack, ref2, ref3;\n    k = coeff(variable, polynomial);\n    //console.log(\"->\" + tos)\n    divideBy = stack[tos - 1];\n    miniStack = [];\n    for (i = l1 = 1, ref2 = k; (1 <= ref2 ? l1 <= ref2 : l1 >= ref2); i = 1 <= ref2 ? ++l1 : --l1) {\n      miniStack.push(pop());\n    }\n//console.log(tos)\n    for (i = m1 = ref3 = k - 1; (ref3 <= 0 ? m1 <= 0 : m1 >= 0); i = ref3 <= 0 ? ++m1 : --m1) {\n      push(miniStack[i]);\n      push(divideBy);\n      divide();\n    }\n    //console.log(tos)\n    return k;\n  };\n\n  // takes the polynomial and the\n  // variable on the stack\n  roots = function() {\n    var h, i, k, l1, lastCoeff, leadingCoeff, n, ref2;\n    h = 0;\n    i = 0;\n    n = 0;\n    if (DEBUG) {\n      console.log(\"roots: \" + stack[tos - 1].toString() + \" \" + stack[tos - 2].toString());\n    }\n    save();\n    // the simplification of nested radicals uses\n    // \"roots\", which in turn uses simplification\n    // of nested radicals. Usually there is no problem,\n    // one level of recursion does the job. Beyond that,\n    // we probably got stuck in a strange case of infinite\n    // recursion, so bail out and return NIL.\n    if (recursionLevelNestedRadicalsRemoval > 1) {\n      pop();\n      pop();\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n    performing_roots = true;\n    h = tos - 2;\n    if (DEBUG) {\n      console.log(\"roots checking if \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n    }\n    p2 = pop();\n    p1 = pop();\n    push(p1);\n    push(p2);\n    k = normalisedCoeff(p2, p1);\n    if (isSimpleRoot(k)) {\n      if (DEBUG) {\n        console.log(\"yes, \" + stack[tos - 1].toString() + \" is a case of simple roots\");\n      }\n      lastCoeff = stack[tos - k];\n      leadingCoeff = stack[tos - 1];\n      moveTos(tos - k);\n      pop();\n      pop();\n      getSimpleRoots(k, leadingCoeff, lastCoeff);\n    } else {\n      moveTos(tos - k);\n      roots2();\n    }\n    n = tos - h;\n    if (n === 0) {\n      stop(\"roots: the polynomial is not factorable, try nroots\");\n    }\n    if (n === 1) {\n      performing_roots = false;\n      restore();\n      return;\n    }\n    sort_stack(n);\n    p1 = alloc_tensor(n);\n    p1.tensor.ndim = 1;\n    p1.tensor.dim[0] = n;\n    for (i = l1 = 0, ref2 = n; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p1.tensor.elem[i] = stack[h + i];\n    }\n    moveTos(h);\n    push(p1);\n    restore();\n    return performing_roots = false;\n  };\n\n  // ok to generate these roots take a look at their form\n  // in the case of even and odd exponents here:\n  // http://www.wolframalpha.com/input/?i=roots+x%5E14+%2B+1\n  // http://www.wolframalpha.com/input/?i=roots+ax%5E14+%2B+b\n  // http://www.wolframalpha.com/input/?i=roots+x%5E15+%2B+1\n  // http://www.wolframalpha.com/input/?i=roots+a*x%5E15+%2B+b\n  getSimpleRoots = function(n, leadingCoeff, lastCoeff) {\n    var aSol, commonPart, l1, m1, ref2, ref3, rootsOfOne;\n    if (DEBUG) {\n      console.log(\"getSimpleRoots\");\n    }\n    save();\n    //tos-n    Coefficient of x^0\n    //tos-1    Coefficient of x^(n-1)\n    n = n - 1;\n    push(lastCoeff);\n    push_rational(1, n);\n    power();\n    push(leadingCoeff);\n    push_rational(1, n);\n    power();\n    divide();\n    commonPart = pop();\n    if (n % 2 === 0) {\n      for (rootsOfOne = l1 = 1, ref2 = n; l1 <= ref2; rootsOfOne = l1 += 2) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n        aSol = pop();\n        push(aSol);\n        push(aSol);\n        negate();\n      }\n    } else {\n      for (rootsOfOne = m1 = 1, ref3 = n; (1 <= ref3 ? m1 <= ref3 : m1 >= ref3); rootsOfOne = 1 <= ref3 ? ++m1 : --m1) {\n        push(commonPart);\n        push_integer(-1);\n        push_rational(rootsOfOne, n);\n        power();\n        multiply();\n        if (rootsOfOne % 2 === 0) {\n          negate();\n        }\n      }\n    }\n    return restore();\n  };\n\n  roots2 = function() {\n    var k;\n    save();\n    if (DEBUG) {\n      console.log(\"roots2: \" + stack[tos - 1].toString() + \" \" + stack[tos - 2].toString());\n    }\n    p2 = pop(); // the polynomial variable\n    p1 = pop(); // the polynomial\n    push(p1);\n    push(p2);\n    k = normalisedCoeff(p2, p1);\n    if (!hasImaginaryCoeff(k)) {\n      moveTos(tos - k);\n      factorpoly();\n      p1 = pop();\n    } else {\n      moveTos(tos - k);\n      pop();\n      pop();\n    }\n    if (car(p1) === symbol(MULTIPLY)) {\n      p1 = cdr(p1);\n      // scan through all the factors\n      // and find the roots of each of them\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        roots3();\n        p1 = cdr(p1);\n      }\n    } else {\n      push(p1);\n      push(p2);\n      roots3();\n    }\n    return restore();\n  };\n\n  roots3 = function() {\n    var n;\n    save();\n    p2 = pop();\n    p1 = pop();\n    if (car(p1) === symbol(POWER) && ispolyexpandedform(cadr(p1), p2) && isposint(caddr(p1))) {\n      n = normalisedCoeff(p2, cadr(p1));\n      mini_solve(n);\n    } else if (ispolyexpandedform(p1, p2)) {\n      n = normalisedCoeff(p2, p1);\n      mini_solve(n);\n    }\n    return restore();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Input:    stack[tos - 2]    polynomial\n\n  //      stack[tos - 1]    dependent symbol\n\n  //  Output:    stack      roots on stack\n\n  //            (input args are popped first)\n\n  //-----------------------------------------------------------------------------\n\n  // note that for many quadratic, cubic and quartic polynomials we don't\n  // actually end up using the quadratic/cubic/quartic formulas in here,\n  // since there is a chance we factored the polynomial and in so\n  // doing we found some solutions and lowered the degree.\n  mini_solve = function(n) {\n    var C_CHECKED_AS_NOT_ZERO, Q_CHECKED_AS_NOT_ZERO, R_18_a_b_c_d, R_27_a2_d, R_2_b3, R_3_a, R_3_a_C, R_3_a_c, R_4_DELTA03, R_6_a, R_6_a_C, R_C, R_C_over_3a, R_C_simplified_toCheckIfZero, R_DELTA0, R_DELTA0_simplified_toCheckIfZero, R_DELTA0_toBeCheckedIfZero, R_DELTA1, R_Q, R_Q_simplified_toCheckIfZero, R_S, R_S_simplified_toCheckIfZero, R_a2, R_a2_d, R_a2_d2, R_a3, R_a_b_c, R_a_b_c_d, R_a_c, R_b2, R_b2_c2, R_b3, R_b3_d, R_c2, R_c3, R_d2, R_determinant, R_determinant_simplified_toCheckIfZero, R_e2, R_e3, R_m, R_m27_a2_d2, R_m4_a_c3, R_m4_b3_d, R_m9_a_b_c, R_m_b_over_3a, R_minus_4S2_minus_2p, R_minus_b_over_4a, R_p, R_principalCubicRoot, R_q, R_q_over_S, R_r, S_CHECKED_AS_NOT_ZERO, ThreePPlus2M, TwoQOversqrtPPlus2M, biquadraticSolutions, choiceOfRadicalInQSoSIsNotZero, coeff2, coeff3, coeff4, depressedSolutions, eachSolution, flipSignOFQSoCIsNotZero, flipSignOFRadicalSoQIsNotZero, i_sqrt3, l1, len, len1, len2, m1, n1, one_minus_i_sqrt3, one_plus_i_sqrt3, ref2, ref3, ref4, resolventCubicSolutions, root_solution, sqrtPPlus2M, toBeCheckedIFZero;\n    //console.log \"mini_solve >>>>>>>>>>>>>>>>>>>>>>>> tos:\" + tos\n    save();\n    // AX + B, X = -B/A\n    if (n === 2) {\n      //console.log \"mini_solve >>>>>>>>> 1st degree\"\n      p3 = pop();\n      p4 = pop();\n      push(p4);\n      push(p3);\n      divide();\n      negate();\n      restore();\n      return;\n    }\n    // AX^2 + BX + C, X = (-B +/- (B^2 - 4AC)^(1/2)) / (2A)\n    if (n === 3) {\n      //console.log \"mini_solve >>>>>>>>> 2nd degree\"\n      p3 = pop(); // A\n      p4 = pop(); // B\n      p5 = pop(); // C\n      \n      // B^2\n      push(p4);\n      push_integer(2);\n      power();\n      // 4AC\n      push_integer(4);\n      push(p3);\n      multiply();\n      push(p5);\n      multiply();\n      // B^2 - 4AC\n      subtract();\n      //(B^2 - 4AC)^(1/2)\n      push_rational(1, 2);\n      power();\n      //p6 is (B^2 - 4AC)^(1/2)\n      p6 = pop();\n      push(p6);\n      push(p4);\n      subtract(); // -B + (B^2 - 4AC)^(1/2)\n      \n      // 1/2A\n      push(p3);\n      push_integer(2);\n      multiply();\n      divide();\n      //simplify()\n      //rationalize()\n      // tos - 1 now is 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n      push(p6);\n      push(p4);\n      add();\n      // tos - 1 now is  B + (B^2 - 4AC)^(1/2)\n      // tos - 2: 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n      negate();\n      // tos - 1 now is  -B -(B^2 - 4AC)^(1/2)\n      // tos - 2: 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n\n      // 1/2A again\n      push(p3);\n      divide();\n      push_rational(1, 2);\n      multiply();\n      //simplify()\n      //rationalize()\n      // tos - 1: 2nd root: (-B - (B^2 - 4AC)^(1/2)) / (2A)\n      // tos - 2: 1st root: (-B + (B^2 - 4AC)^(1/2)) / (2A)\n      restore();\n      return;\n    }\n    //if (n == 4)\n    if (n === 4 || n === 5) {\n      p3 = pop(); // A\n      p4 = pop(); // B\n      p5 = pop(); // C\n      p6 = pop(); // D\n      \n      // C - only related calculations\n      push(p5);\n      push(p5);\n      multiply();\n      R_c2 = pop();\n      push(R_c2);\n      push(p5);\n      multiply();\n      R_c3 = pop();\n      // B - only related calculations\n      push(p4);\n      push(p4);\n      multiply();\n      R_b2 = pop();\n      push(R_b2);\n      push(p4);\n      multiply();\n      R_b3 = pop();\n      push(R_b3);\n      push(p6);\n      multiply();\n      R_b3_d = pop();\n      push(R_b3_d);\n      push_integer(-4);\n      multiply();\n      R_m4_b3_d = pop();\n      push(R_b3);\n      push_integer(2);\n      multiply();\n      R_2_b3 = pop();\n      // A - only related calculations\n      push(p3);\n      push(p3);\n      multiply();\n      R_a2 = pop();\n      push(R_a2);\n      push(p3);\n      multiply();\n      R_a3 = pop();\n      push_integer(3);\n      push(p3);\n      multiply();\n      R_3_a = pop();\n      push(R_a2);\n      push(p6);\n      multiply();\n      R_a2_d = pop();\n      push(R_a2_d);\n      push(p6);\n      multiply();\n      R_a2_d2 = pop();\n      push(R_a2_d);\n      push_integer(27);\n      multiply();\n      R_27_a2_d = pop();\n      push(R_a2_d2);\n      push_integer(-27);\n      multiply();\n      R_m27_a2_d2 = pop();\n      push(R_3_a);\n      push_integer(2);\n      multiply();\n      R_6_a = pop();\n      // mixed calculations\n      push(p3);\n      push(p5);\n      multiply();\n      R_a_c = pop();\n      push(R_a_c);\n      push(p4);\n      multiply();\n      R_a_b_c = pop();\n      push(R_a_b_c);\n      push(p6);\n      multiply();\n      R_a_b_c_d = pop();\n      push(R_a_c);\n      push_integer(3);\n      multiply();\n      R_3_a_c = pop();\n      push_integer(-4);\n      push(p3);\n      push(R_c3);\n      multiply();\n      multiply();\n      R_m4_a_c3 = pop();\n      push(R_a_b_c);\n      push_integer(9);\n      multiply();\n      negate();\n      R_m9_a_b_c = pop();\n      push(R_a_b_c_d);\n      push_integer(18);\n      multiply();\n      R_18_a_b_c_d = pop();\n      push(R_b2);\n      push(R_3_a_c);\n      subtract();\n      R_DELTA0 = pop();\n      push(R_b2);\n      push(R_c2);\n      multiply();\n      R_b2_c2 = pop();\n      push(p4);\n      negate();\n      push(R_3_a);\n      divide();\n      R_m_b_over_3a = pop();\n      if (n === 4) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using cubic formula <<<<<<<<<<<<<<< \");\n        }\n        //console.log \">>>> A:\" + p3.toString()\n        //console.log \">>>> B:\" + p4.toString()\n        //console.log \">>>> C:\" + p5.toString()\n        //console.log \">>>> D:\" + p6.toString()\n        if (DEBUG) {\n          console.log(\"cubic: D0: \" + R_DELTA0.toString());\n        }\n        push(R_DELTA0);\n        push_integer(3);\n        power();\n        push_integer(4);\n        multiply();\n        R_4_DELTA03 = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_toBeCheckedIfZero = pop();\n        if (DEBUG) {\n          console.log(\"cubic: D0 as float: \" + R_DELTA0_toBeCheckedIfZero.toString());\n        }\n        //if isZeroAtomOrTensor(R_DELTA0_toBeCheckedIfZero)\n        //  console.log \" *********************************** D0 IS ZERO\"\n\n        // DETERMINANT\n        push(R_18_a_b_c_d);\n        push(R_m4_b3_d);\n        push(R_b2_c2);\n        push(R_m4_a_c3);\n        push(R_m27_a2_d2);\n        add();\n        add();\n        add();\n        add();\n        simplify();\n        absValFloat();\n        R_determinant = pop();\n        if (DEBUG) {\n          console.log(\"cubic: DETERMINANT: \" + R_determinant.toString());\n        }\n        // R_DELTA1\n        push(R_2_b3);\n        push(R_m9_a_b_c);\n        push(R_27_a2_d);\n        add();\n        add();\n        R_DELTA1 = pop();\n        if (DEBUG) {\n          console.log(\"cubic: D1: \" + R_DELTA1.toString());\n        }\n        // R_Q\n        push(R_DELTA1);\n        push_integer(2);\n        power();\n        push(R_4_DELTA03);\n        subtract();\n        push_rational(1, 2);\n        power();\n        simplify();\n        R_Q = pop();\n        if (isZeroAtomOrTensor(R_determinant)) {\n          if (isZeroAtomOrTensor(R_DELTA0_toBeCheckedIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is zero\");\n            }\n            push(R_m_b_over_3a); // just same solution three times\n            restore();\n            return;\n          } else {\n            if (DEBUG) {\n              console.log(\" cubic: DETERMINANT IS ZERO and delta0 is not zero\");\n            }\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            push(p4);\n            push(p5);\n            multiply();\n            subtract();\n            push(R_DELTA0);\n            push_integer(2);\n            multiply();\n            divide(); // first solution\n            root_solution = pop();\n            push(root_solution); // pushing two of them on the stack\n            push(root_solution);\n            // second solution here\n            // 4abc\n            push(R_a_b_c);\n            push_integer(4);\n            multiply();\n            // -9a*a*d\n            push(p3);\n            push(p3);\n            push(p6);\n            push_integer(9);\n            multiply();\n            multiply();\n            multiply();\n            negate();\n            // -9*b^3\n            push(R_b3);\n            negate();\n            // sum the three terms\n            add();\n            add();\n            // denominator is a*delta0\n            push(p3);\n            push(R_DELTA0);\n            multiply();\n            // build the fraction\n            divide();\n            restore();\n            return;\n          }\n        }\n        C_CHECKED_AS_NOT_ZERO = false;\n        flipSignOFQSoCIsNotZero = false;\n        while (!C_CHECKED_AS_NOT_ZERO) {\n          // R_C\n          push(R_Q);\n          if (flipSignOFQSoCIsNotZero) {\n            negate();\n          }\n          push(R_DELTA1);\n          add();\n          push_rational(1, 2);\n          multiply();\n          push_rational(1, 3);\n          power();\n          simplify();\n          R_C = pop();\n          if (DEBUG) {\n            console.log(\"cubic: C: \" + R_C.toString());\n          }\n          push(R_C);\n          simplify();\n          absValFloat();\n          R_C_simplified_toCheckIfZero = pop();\n          if (DEBUG) {\n            console.log(\"cubic: C as absval and float: \" + R_C_simplified_toCheckIfZero.toString());\n          }\n          if (isZeroAtomOrTensor(R_C_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" cubic: C IS ZERO flipping the sign\");\n            }\n            flipSignOFQSoCIsNotZero = true;\n          } else {\n            C_CHECKED_AS_NOT_ZERO = true;\n          }\n        }\n        push(R_C);\n        push(R_3_a);\n        multiply();\n        R_3_a_C = pop();\n        push(R_3_a_C);\n        push_integer(2);\n        multiply();\n        R_6_a_C = pop();\n        // imaginary parts calculations\n        push(imaginaryunit);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        multiply();\n        i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        add();\n        one_plus_i_sqrt3 = pop();\n        push_integer(1);\n        push(i_sqrt3);\n        subtract();\n        one_minus_i_sqrt3 = pop();\n        push(R_C);\n        push(R_3_a);\n        divide();\n        R_C_over_3a = pop();\n        // first solution\n        push(R_m_b_over_3a); // first term\n        push(R_C_over_3a);\n        negate(); // second term\n        push(R_DELTA0);\n        push(R_3_a_C);\n        divide();\n        negate(); // third term\n        // now add the three terms together\n        add();\n        add();\n        simplify();\n        // second solution\n        push(R_m_b_over_3a); // first term\n        push(R_C_over_3a);\n        push(one_plus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide(); // second term\n        push(one_minus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide(); // third term\n        // now add the three terms together\n        add();\n        add();\n        simplify();\n        // third solution\n        push(R_m_b_over_3a); // first term\n        push(R_C_over_3a);\n        push(one_minus_i_sqrt3);\n        multiply();\n        push_integer(2);\n        divide(); // second term\n        push(one_plus_i_sqrt3);\n        push(R_DELTA0);\n        multiply();\n        push(R_6_a_C);\n        divide(); // third term\n        // now add the three terms together\n        add();\n        add();\n        simplify();\n        restore();\n        return;\n      }\n      // See http://www.sscc.edu/home/jdavidso/Math/Catalog/Polynomials/Fourth/Fourth.html\n      // for a description of general shapes and properties of fourth degree polynomials\n      if (n === 5) {\n        if (DEBUG) {\n          console.log(\">>>>>>>>>>>>>>>> actually using quartic formula <<<<<<<<<<<<<<< \");\n        }\n        p7 = pop(); // E\n        if (isZeroAtomOrTensor(p4) && isZeroAtomOrTensor(p6) && !isZeroAtomOrTensor(p5) && !isZeroAtomOrTensor(p7)) {\n          if (DEBUG) {\n            console.log(\"biquadratic case\");\n          }\n          push(p3);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(p5);\n          push(symbol(SECRETX));\n          multiply();\n          push(p7);\n          add();\n          add();\n          push(symbol(SECRETX));\n          roots();\n          biquadraticSolutions = pop();\n          ref2 = biquadraticSolutions.tensor.elem;\n          for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n            eachSolution = ref2[l1];\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            simplify();\n            push(eachSolution);\n            push_rational(1, 2);\n            power();\n            negate();\n            simplify();\n          }\n          restore();\n          return;\n        }\n        // D - only related calculations\n        push(p6);\n        push(p6);\n        multiply();\n        R_d2 = pop();\n        // E - only related calculations\n        push(p7);\n        push(p7);\n        multiply();\n        R_e2 = pop();\n        push(R_e2);\n        push(p7);\n        multiply();\n        R_e3 = pop();\n        // DETERMINANT\n        push_integer(256);\n        push(R_a3);\n        push(R_e3);\n        multiply();\n        multiply(); // first term 256 a^3 e^3\n        push_integer(-192);\n        push(R_a2_d);\n        push(R_e2);\n        push(p4);\n        multiply();\n        multiply();\n        multiply(); // second term -192 a^3 b d e^2\n        push_integer(-128);\n        push(R_a2);\n        push(R_c2);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply(); // third term -128 a^2 c^2 e^2\n        push_integer(144);\n        push(R_a2_d2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // fourth term 144 a^2 c d^2 e\n        push(R_m27_a2_d2);\n        push(R_d2);\n        multiply(); // fifth term -27 a^2 d^4\n        push_integer(144);\n        push(R_a_b_c);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply(); // sixth term 144 a b^2 c e^2\n        push_integer(-6);\n        push(p3);\n        push(R_b2);\n        push(R_d2);\n        push(p7);\n        multiply();\n        multiply();\n        multiply();\n        multiply(); // seventh term -6 a b^2 d^2 e\n        push_integer(-80);\n        push(R_a_b_c_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // eigth term -80 a b c^2 d e\n        push_integer(18);\n        push(R_a_b_c_d);\n        push(R_d2);\n        multiply();\n        multiply(); // ninth term 18 a b c d^3\n        push_integer(16);\n        push(R_a_c);\n        push(R_c3);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // tenth term 16 a c^4 e\n        push_integer(-4);\n        push(R_a_c);\n        push(R_c2);\n        push(R_d2);\n        multiply();\n        multiply();\n        multiply(); // eleventh term -4 a c^3 d^2\n        push_integer(-27);\n        push(R_b3);\n        push(p4);\n        push(R_e2);\n        multiply();\n        multiply();\n        multiply(); // twelveth term -27 b^4 e^2\n        push_integer(18);\n        push(R_b3_d);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // thirteenth term 18 b^3 c d e\n        push(R_m4_b3_d);\n        push(R_d2);\n        multiply(); // fourteenth term -4 b^3 d^3\n        push_integer(-4);\n        push(R_b2_c2);\n        push(p5);\n        push(p7);\n        multiply();\n        multiply();\n        multiply(); // fifteenth term -4 b^2 c^3 e\n        push(R_b2_c2);\n        push(R_d2);\n        multiply(); // sixteenth term b^2 c^2 d^2\n        \n        // add together the sixteen terms by doing\n        // fifteen adds\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        add();\n        R_determinant = pop();\n        if (DEBUG) {\n          console.log(\"R_determinant: \" + R_determinant.toString());\n        }\n        // DELTA0\n        push(R_c2); // term one of DELTA0\n        push_integer(-3);\n        push(p4);\n        push(p6);\n        multiply();\n        multiply(); // term two of DELTA0\n        push_integer(12);\n        push(p3);\n        push(p7);\n        multiply();\n        multiply(); // term three of DELTA0\n        \n        // add the three terms together\n        add();\n        add();\n        R_DELTA0 = pop();\n        if (DEBUG) {\n          console.log(\"R_DELTA0: \" + R_DELTA0.toString());\n        }\n        // DELTA1\n        push_integer(2);\n        push(R_c3);\n        multiply();\n        push_integer(-9);\n        push(p4);\n        push(p5);\n        push(p6);\n        multiply();\n        multiply();\n        multiply();\n        push_integer(27);\n        push(R_b2);\n        push(p7);\n        multiply();\n        multiply();\n        push_integer(27);\n        push(p3);\n        push(R_d2);\n        multiply();\n        multiply();\n        push_integer(-72);\n        push(R_a_c);\n        push(p7);\n        multiply();\n        multiply();\n        // add the five terms together\n        add();\n        add();\n        add();\n        add();\n        R_DELTA1 = pop();\n        if (DEBUG) {\n          console.log(\"R_DELTA1: \" + R_DELTA1.toString());\n        }\n        // p\n        push_integer(8);\n        push(R_a_c);\n        multiply();\n        push_integer(-3);\n        push(R_b2);\n        multiply();\n        add();\n        push_integer(8);\n        push(R_a2);\n        multiply();\n        divide();\n        R_p = pop();\n        if (DEBUG) {\n          console.log(\"p: \" + R_p.toString());\n        }\n        // q\n        push(R_b3);\n        push_integer(-4);\n        push(R_a_b_c);\n        multiply();\n        push_integer(8);\n        push(R_a2_d);\n        multiply();\n        add();\n        add();\n        push_integer(8);\n        push(R_a3);\n        multiply();\n        divide();\n        R_q = pop();\n        if (DEBUG) {\n          console.log(\"q: \" + R_q.toString());\n        }\n        if (DEBUG) {\n          console.log(\"tos 1 \" + tos);\n        }\n        if (!isZeroAtomOrTensor(p4)) {\n          if (DEBUG) {\n            console.log(\"tos 2 \" + tos);\n          }\n          push_integer(8);\n          push(p5);\n          push(p3);\n          multiply();\n          multiply();\n          push_integer(-3);\n          push(p4);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          divide();\n          R_p = pop();\n          if (DEBUG) {\n            console.log(\"p for depressed quartic: \" + R_p.toString());\n          }\n          push(p4);\n          push_integer(3);\n          power();\n          push_integer(-4);\n          push(p3);\n          push(p4);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          push_integer(8);\n          push(p6);\n          push(p3);\n          push_integer(2);\n          power();\n          multiply();\n          multiply();\n          add();\n          add();\n          push_integer(8);\n          push(p3);\n          push_integer(3);\n          power();\n          multiply();\n          divide();\n          R_q = pop();\n          if (DEBUG) {\n            console.log(\"q for depressed quartic: \" + R_q.toString());\n          }\n          // convert to depressed quartic\n          push(p4);\n          push_integer(4);\n          power();\n          push_integer(-3);\n          multiply();\n          push_integer(256);\n          push(R_a3);\n          push(p7);\n          multiply();\n          multiply();\n          push_integer(-64);\n          push(R_a2_d);\n          push(p4);\n          multiply();\n          multiply();\n          push_integer(16);\n          push(R_b2);\n          push(p3);\n          push(p5);\n          multiply();\n          multiply();\n          multiply();\n          add();\n          add();\n          add();\n          push_integer(256);\n          push(p3);\n          push_integer(4);\n          power();\n          multiply();\n          divide();\n          R_r = pop();\n          if (DEBUG) {\n            console.log(\"r for depressed quartic: \" + R_r.toString());\n          }\n          if (DEBUG) {\n            console.log(\"tos 4 \" + tos);\n          }\n          push(symbol(SECRETX));\n          push_integer(4);\n          power();\n          if (DEBUG) {\n            console.log(\"4 * x^4: \" + stack[tos - 1].toString());\n          }\n          push(R_p);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          if (DEBUG) {\n            console.log(\"R_p * x^2: \" + stack[tos - 1].toString());\n          }\n          push(R_q);\n          push(symbol(SECRETX));\n          multiply();\n          if (DEBUG) {\n            console.log(\"R_q * x: \" + stack[tos - 1].toString());\n          }\n          push(R_r);\n          if (DEBUG) {\n            console.log(\"R_r: \" + stack[tos - 1].toString());\n          }\n          add();\n          add();\n          add();\n          simplify();\n          if (DEBUG) {\n            console.log(\"solving depressed quartic: \" + stack[tos - 1].toString());\n          }\n          push(symbol(SECRETX));\n          roots();\n          depressedSolutions = pop();\n          if (DEBUG) {\n            console.log(\"depressedSolutions: \" + depressedSolutions);\n          }\n          ref3 = depressedSolutions.tensor.elem;\n          for (m1 = 0, len1 = ref3.length; m1 < len1; m1++) {\n            eachSolution = ref3[m1];\n            push(eachSolution);\n            push(p4);\n            push_integer(4);\n            push(p3);\n            multiply();\n            divide();\n            subtract();\n            simplify();\n            if (DEBUG) {\n              console.log(\"solution from depressed: \" + stack[tos - 1].toString());\n            }\n          }\n          restore();\n          return;\n        } else {\n          R_p = p5;\n          R_q = p6;\n          R_r = p7;\n          /*\n           * Descartes' solution\n           * https://en.wikipedia.org/wiki/Quartic_function#Descartes.27_solution\n           * finding the \"u\" in the depressed equation\n\n          push_integer(2)\n          push(R_p)\n          multiply()\n          coeff2 = pop()\n\n          push_integer(-4)\n          push(R_p)\n          push_integer(2)\n          power()\n          multiply()\n          push(R_r)\n          multiply()\n          coeff3 = pop()\n\n          push(R_q)\n          push_integer(2)\n          power()\n          negate()\n          coeff4 = pop()\n\n           * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(3)\n          power()\n\n          push(coeff2)\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n          multiply()\n\n          push(coeff3)\n          push(symbol(SECRETX))\n          multiply()\n\n          push(coeff4)\n\n          add()\n          add()\n          add()\n\n          console.log(\"Descarte's resolventCubic: \" +  stack[tos-1].toString())\n          push(symbol(SECRETX))\n\n          roots()\n\n          resolventCubicSolutions = pop()\n          console.log(\"Descarte's resolventCubic solutions: \" +  resolventCubicSolutions)\n          console.log(\"tos: \" +  tos)\n\n          R_u = null\n          #R_u = resolventCubicSolutions.tensor.elem[1]\n          for eachSolution in resolventCubicSolutions.tensor.elem\n            console.log(\"examining solution: \" +  eachSolution)\n            push(eachSolution)\n            push_integer(2)\n            multiply()\n            push(R_p)\n            add()\n\n            absValFloat()\n            toBeCheckedIFZero = pop()\n            console.log(\"abs value is: \" +  eachSolution)\n            if !isZeroAtomOrTensor(toBeCheckedIFZero)\n              R_u = eachSolution\n              break\n\n          console.log(\"chosen solution: \" +  R_u)\n\n          push(R_u)\n          negate()\n          R_s = pop()\n\n          push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          add()\n          add()\n          push_integer(2)\n          divide()\n          R_t = pop()\n\n          push(R_p)\n          push(R_u)\n          push_integer(2)\n          power()\n          push(R_q)\n          push(R_u)\n          divide()\n          subtract()\n          add()\n          push_integer(2)\n          divide()\n          R_v = pop()\n\n           * factoring the quartic into two quadratics:\n\n           * now build the polynomial\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n\n          push(R_s)\n          push(symbol(SECRETX))\n          multiply()\n\n          push(R_t)\n\n          add()\n          add()\n\n          console.log(\"factored quartic 1: \" + stack[tos-1].toString())\n\n          push(symbol(SECRETX))\n          push_integer(2)\n          power()\n\n          push(R_u)\n          push(symbol(SECRETX))\n          multiply()\n\n          push(R_v)\n\n          add()\n          add()\n\n          console.log(\"factored quartic 2: \" + stack[tos-1].toString())\n          pop()\n\n          restore()\n          return\n           */\n          // Ferrari's solution\n          // https://en.wikipedia.org/wiki/Quartic_function#Ferrari.27s_solution\n          // finding the \"m\" in the depressed equation\n          push_rational(5, 2);\n          push(R_p);\n          multiply();\n          coeff2 = pop();\n          push_integer(2);\n          push(R_p);\n          push_integer(2);\n          power();\n          multiply();\n          push(R_r);\n          subtract();\n          coeff3 = pop();\n          push(R_p);\n          push_integer(3);\n          power();\n          push_integer(2);\n          divide();\n          push_rational(-1, 2);\n          push(R_p);\n          push(R_r);\n          multiply();\n          multiply();\n          push_rational(-1, 8);\n          push(R_q);\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n          coeff4 = pop();\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          push(coeff2);\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push(coeff3);\n          push(symbol(SECRETX));\n          multiply();\n          push(coeff4);\n          add();\n          add();\n          add();\n          if (DEBUG) {\n            console.log(\"resolventCubic: \" + stack[tos - 1].toString());\n          }\n          push(symbol(SECRETX));\n          roots();\n          resolventCubicSolutions = pop();\n          if (DEBUG) {\n            console.log(\"resolventCubicSolutions: \" + resolventCubicSolutions);\n          }\n          R_m = null;\n          ref4 = resolventCubicSolutions.tensor.elem;\n          //R_m = resolventCubicSolutions.tensor.elem[1]\n          for (n1 = 0, len2 = ref4.length; n1 < len2; n1++) {\n            eachSolution = ref4[n1];\n            if (DEBUG) {\n              console.log(\"examining solution: \" + eachSolution);\n            }\n            push(eachSolution);\n            push_integer(2);\n            multiply();\n            push(R_p);\n            add();\n            absValFloat();\n            toBeCheckedIFZero = pop();\n            if (DEBUG) {\n              console.log(\"abs value is: \" + eachSolution);\n            }\n            if (!isZeroAtomOrTensor(toBeCheckedIFZero)) {\n              R_m = eachSolution;\n              break;\n            }\n          }\n          if (DEBUG) {\n            console.log(\"chosen solution: \" + R_m);\n          }\n          push(R_m);\n          push_integer(2);\n          multiply();\n          push(R_p);\n          add();\n          push_rational(1, 2);\n          power();\n          simplify();\n          sqrtPPlus2M = pop();\n          push(R_q);\n          push_integer(2);\n          multiply();\n          push(sqrtPPlus2M);\n          divide();\n          simplify();\n          TwoQOversqrtPPlus2M = pop();\n          push(R_p);\n          push_integer(3);\n          multiply();\n          push(R_m);\n          push_integer(2);\n          multiply();\n          add();\n          ThreePPlus2M = pop();\n          // solution1\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide();\n          // solution2\n          push(sqrtPPlus2M);\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          add();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide();\n          // solution3\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          add();\n          push_integer(2);\n          divide();\n          // solution4\n          push(sqrtPPlus2M);\n          negate();\n          push(ThreePPlus2M);\n          push(TwoQOversqrtPPlus2M);\n          subtract();\n          negate();\n          push_rational(1, 2);\n          power();\n          simplify();\n          subtract();\n          push_integer(2);\n          divide();\n          restore();\n          return;\n        }\n        // Q ---------------------------\n        push(R_determinant);\n        simplify();\n        absValFloat();\n        R_determinant_simplified_toCheckIfZero = pop();\n        push(R_DELTA0);\n        simplify();\n        absValFloat();\n        R_DELTA0_simplified_toCheckIfZero = pop();\n        S_CHECKED_AS_NOT_ZERO = false;\n        choiceOfRadicalInQSoSIsNotZero = 0;\n        while (!S_CHECKED_AS_NOT_ZERO) {\n          Q_CHECKED_AS_NOT_ZERO = false;\n          flipSignOFRadicalSoQIsNotZero = false;\n          while (!Q_CHECKED_AS_NOT_ZERO) {\n            // D1 under the outer radical\n            push(R_DELTA1);\n            // D1^2 under the inner radical\n            push(R_DELTA1);\n            push_integer(2);\n            power();\n            // 4*D0^3 under the inner radical\n            push_integer(-4);\n            push(R_DELTA0);\n            push_integer(3);\n            power();\n            multiply();\n            // addition under the inner radical\n            add();\n            // the second radical\n            push_rational(1, 2);\n            power();\n            if (flipSignOFRadicalSoQIsNotZero) {\n              negate();\n            }\n            // the addition under the outer radical\n            add();\n            // content of outer radical divided by two\n            push_integer(2);\n            divide();\n            if (DEBUG) {\n              console.log(\"content of cubic root: \" + stack[tos - 1].toString());\n            }\n            // outer radical calculation: cubic root\n            // now we actually have to find all the roots\n            // because we have to pick the one that makes S != 0\n            push_rational(1, 3);\n            power();\n            simplify();\n            R_principalCubicRoot = pop();\n            if (DEBUG) {\n              console.log(\"principal cubic root: \" + R_principalCubicRoot.toString());\n            }\n            if (DEBUG) {\n              console.log(\"tos : \" + tos);\n            }\n            if (choiceOfRadicalInQSoSIsNotZero === 0) {\n              if (DEBUG) {\n                console.log(\"chosing principal cubic root\");\n              }\n              push(R_principalCubicRoot);\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond principal\");\n              }\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(-1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            } else if (choiceOfRadicalInQSoSIsNotZero === 1) {\n              if (DEBUG) {\n                console.log(\"chosing cubic root beyond beyond principal\");\n              }\n              push(R_principalCubicRoot);\n              push_rational(-1, 2);\n              multiply();\n              push_integer(3);\n              push_rational(1, 2);\n              power();\n              push(imaginaryunit);\n              multiply();\n              push_rational(1, 2);\n              multiply();\n              push(R_principalCubicRoot);\n              multiply();\n              add();\n            }\n            simplify();\n            R_Q = pop();\n            if (DEBUG) {\n              console.log(\"Q \" + R_Q.toString());\n            }\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n            push(R_Q);\n            simplify();\n            absValFloat();\n            R_Q_simplified_toCheckIfZero = pop();\n            if (DEBUG) {\n              console.log(\"Q simplified and abs\" + R_Q_simplified_toCheckIfZero.toString());\n            }\n            if (isZeroAtomOrTensor(R_Q_simplified_toCheckIfZero) && (!isZeroAtomOrTensor(R_determinant_simplified_toCheckIfZero) && isZeroAtomOrTensor(R_DELTA0_simplified_toCheckIfZero))) {\n              if (DEBUG) {\n                console.log(\" *********************************** Q IS ZERO and it matters, flipping the sign\");\n              }\n              flipSignOFRadicalSoQIsNotZero = true;\n            } else {\n              Q_CHECKED_AS_NOT_ZERO = true;\n            }\n            if (DEBUG) {\n              console.log(\"tos: \" + tos);\n            }\n          }\n          // S\n          push_rational(-2, 3);\n          push(R_p);\n          multiply();\n          push(R_Q);\n          push(R_DELTA0);\n          push(R_Q);\n          divide();\n          add();\n          //rationalize()\n          //console.log(\"rationalised: \" + stack[tos-1].toString())\n          //simplify()\n          push(R_3_a);\n          divide();\n          add();\n          push_rational(1, 2);\n          power();\n          push_integer(2);\n          divide();\n          show_power_debug = true;\n          simplify();\n          R_S = pop();\n          if (DEBUG) {\n            console.log(\"S \" + R_S.toString());\n          }\n          // now check if S is zero\n          push(R_S);\n          simplify();\n          absValFloat();\n          R_S_simplified_toCheckIfZero = pop();\n          if (DEBUG) {\n            console.log(\"S \" + R_S_simplified_toCheckIfZero.toString());\n          }\n          if (isZeroAtomOrTensor(R_S_simplified_toCheckIfZero)) {\n            if (DEBUG) {\n              console.log(\" *********************************** S IS ZERO chosing another cubic root\");\n            }\n            choiceOfRadicalInQSoSIsNotZero++;\n          } else {\n            S_CHECKED_AS_NOT_ZERO = true;\n          }\n          if (DEBUG) {\n            console.log(\"tos: \" + tos);\n          }\n        }\n        // ----------------------------\n        if (DEBUG) {\n          console.log(\"tos: \" + tos);\n        }\n        push(p4);\n        negate();\n        push(p3);\n        push_integer(4);\n        multiply();\n        divide();\n        R_minus_b_over_4a = pop();\n        push_integer(-4);\n        push(R_S);\n        push_integer(2);\n        power();\n        multiply();\n        push_integer(2);\n        push(R_p);\n        multiply();\n        subtract();\n        R_minus_4S2_minus_2p = pop();\n        push(R_q);\n        push(R_S);\n        divide();\n        R_q_over_S = pop();\n        if (DEBUG) {\n          console.log(\"tos before putting together the 4 solutions: \" + tos);\n        }\n        // first solution\n        push(R_minus_b_over_4a); // first term\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify();\n        // second solution\n        push(R_minus_b_over_4a); // first term\n        push(R_S);\n        subtract();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        add();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify();\n        // third solution\n        push(R_minus_b_over_4a); // first term\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        add();\n        simplify();\n        // fourth solution\n        push(R_minus_b_over_4a); // first term\n        push(R_S);\n        add();\n        push(R_minus_4S2_minus_2p);\n        push(R_q_over_S);\n        subtract();\n        push_rational(1, 2);\n        power();\n        push_integer(2);\n        divide();\n        subtract();\n        simplify();\n        restore();\n        return;\n      }\n    }\n    moveTos(tos - n);\n    return restore();\n  };\n\n  Eval_round = function() {\n    push(cadr(p1));\n    Eval();\n    return yround();\n  };\n\n  yround = function() {\n    save();\n    yyround();\n    return restore();\n  };\n\n  yyround = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (!isNumericAtom(p1)) {\n      push_symbol(ROUND);\n      push(p1);\n      list(2);\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.round(p1.d);\n      push_double(d);\n      return;\n    }\n    if (isinteger(p1)) {\n      push(p1);\n      return;\n    }\n    push(p1);\n    yyfloat();\n    p1 = pop();\n    return push_integer(Math.round(p1.d));\n  };\n\n  // This scanner uses the recursive descent method.\n\n  // The char pointers token_str and scan_str are pointers to the input string as\n  // in the following example.\n\n  //  | g | a | m | m | a |   | a | l | p | h | a |\n  //    ^                   ^\n  //    token_str           scan_str\n\n  // The char pointer token_buf points to a malloc buffer.\n\n  //  | g | a | m | m | a | \\0 |\n  //    ^\n  //    token_buf\n\n  // In the sequence of method invocations for scanning,\n  // first we do the calls for scanning the operands\n  // of the operators of least precedence.\n  // So, since precedence in maths goes something like\n  // (form high to low) exponents, mult/div, plus/minus\n  // so we scan first for terms, then factors, then powers.\n  // That's the general idea, but of course we also have to deal\n  // with things like parens, non-commutative\n  // dot (or inner) product, assignments and tests,\n  // function calls etc.\n  // Note that a^1/2 is, correctly, a/2, not, incorrectly, sqrt(a),\n  // see comment in related test in power.coffee for more about this.\n\n  //  Notes:\n\n  //  Formerly add() and multiply() were used to construct expressions but\n  //  this preevaluation caused problems.\n\n  //  For example, suppose A has the floating point value inf.\n\n  //  Before, the expression A/A resulted in 1 because the scanner would\n  //  divide the symbols.\n\n  //  After removing add() and multiply(), A/A results in nan which is the\n  //  correct result.\n\n  //  The functions negate() and inverse() are used but they do not cause\n  //  problems with preevaluation of symbols.\n  T_INTEGER = 1001;\n\n  T_DOUBLE = 1002;\n\n  T_SYMBOL = 1003;\n\n  T_FUNCTION = 1004;\n\n  T_NEWLINE = 1006;\n\n  T_STRING = 1007;\n\n  T_GTEQ = 1008;\n\n  T_LTEQ = 1009;\n\n  T_EQ = 1010;\n\n  T_NEQ = 1011;\n\n  T_QUOTASSIGN = 1012;\n\n  token = \"\";\n\n  newline_flag = 0;\n\n  meta_mode = 0;\n\n  input_str = 0;\n\n  scan_str = 0;\n\n  token_str = 0;\n\n  token_buf = 0;\n\n  lastFoundSymbol = null;\n\n  symbolsRightOfAssignment = null;\n\n  symbolsLeftOfAssignment = null;\n\n  isSymbolLeftOfAssignment = null;\n\n  scanningParameters = null;\n\n  functionInvokationsScanningStack = null;\n\n  skipRootVariableToBeSolved = false;\n\n  assignmentFound = null;\n\n  // Returns number of chars scanned and expr on stack.\n\n  // Returns zero when nothing left to scan.\n\n  // takes a string\n  scanned = \"\";\n\n  scan = function(s) {\n    if (DEBUG) {\n      console.log(\"#### scanning \" + s);\n    }\n    //if s==\"y=x\"\n    //  debugger\n    //if s==\"y\"\n    //  debugger\n    //if s==\"i=sqrt(-1)\"\n    //  debugger\n    lastFoundSymbol = null;\n    symbolsRightOfAssignment = [];\n    symbolsLeftOfAssignment = [];\n    isSymbolLeftOfAssignment = true;\n    scanningParameters = [];\n    functionInvokationsScanningStack = [\"\"];\n    assignmentFound = false;\n    scanned = s;\n    meta_mode = 0;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n    scan_stmt();\n    expanding--;\n    if (!assignmentFound) {\n      symbolsInExpressionsWithoutAssignments = symbolsInExpressionsWithoutAssignments.concat(symbolsLeftOfAssignment);\n    }\n    return token_str - input_str;\n  };\n\n  // takes a string\n  scan_meta = function(s) {\n    scanned = s;\n    meta_mode = 1;\n    expanding++;\n    input_str = 0;\n    scan_str = 0;\n    get_next_token();\n    if (token === \"\") {\n      push(symbol(NIL));\n      expanding--;\n      return 0;\n    }\n    scan_stmt();\n    expanding--;\n    return token_str - input_str;\n  };\n\n  scan_stmt = function() {\n    var assignmentIsOfQuotedType, existingDependencies, i, indexOfSymbolLeftOfAssignment, l1, len, len1, m1, symbolLeftOfAssignment;\n    scan_relation();\n    assignmentIsOfQuotedType = false;\n    if (token === T_QUOTASSIGN) {\n      assignmentIsOfQuotedType = true;\n    }\n    if (token === T_QUOTASSIGN || token === '=') {\n      symbolLeftOfAssignment = lastFoundSymbol;\n      if (DEBUG) {\n        console.log(\"assignment!\");\n      }\n      assignmentFound = true;\n      isSymbolLeftOfAssignment = false;\n      get_next_token();\n      push_symbol(SETQ);\n      swap();\n      // if it's a := then add a quote\n      if (assignmentIsOfQuotedType) {\n        push_symbol(QUOTE);\n      }\n      scan_relation();\n      // if it's a := then you have to list\n      // together the quote and its argument\n      if (assignmentIsOfQuotedType) {\n        list(2);\n      }\n      list(3);\n      isSymbolLeftOfAssignment = true;\n      if (codeGen) {\n        // in case of re-assignment, the symbol on the\n        // left will also be in the set of the symbols\n        // on the right. In that case just remove it from\n        // the symbols on the right.\n        indexOfSymbolLeftOfAssignment = symbolsRightOfAssignment.indexOf(symbolLeftOfAssignment);\n        if (indexOfSymbolLeftOfAssignment !== -1) {\n          symbolsRightOfAssignment.splice(indexOfSymbolLeftOfAssignment, 1);\n          symbolsHavingReassignments.push(symbolLeftOfAssignment);\n        }\n        \n        // print out the immediate dependencies\n        if (DEBUG) {\n          console.log(\"locally, \" + symbolLeftOfAssignment + \" depends on: \");\n          for (l1 = 0, len = symbolsRightOfAssignment.length; l1 < len; l1++) {\n            i = symbolsRightOfAssignment[l1];\n            console.log(\"  \" + i);\n          }\n        }\n        // ok add the local dependencies to the existing\n        // dependencies of this left-value symbol\n\n        // create the exiting dependencies list if it doesn't exist\n        if (symbolsDependencies[symbolLeftOfAssignment] == null) {\n          symbolsDependencies[symbolLeftOfAssignment] = [];\n        }\n        existingDependencies = symbolsDependencies[symbolLeftOfAssignment];\n// copy over the new dependencies to the existing\n// dependencies avoiding repetitions\n        for (m1 = 0, len1 = symbolsRightOfAssignment.length; m1 < len1; m1++) {\n          i = symbolsRightOfAssignment[m1];\n          if (existingDependencies.indexOf(i) === -1) {\n            existingDependencies.push(i);\n          }\n        }\n        return symbolsRightOfAssignment = [];\n      }\n    }\n  };\n\n  scan_relation = function() {\n    scan_expression();\n    switch (token) {\n      case T_EQ:\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case T_NEQ:\n        push_symbol(NOT);\n        swap();\n        push_symbol(TESTEQ);\n        swap();\n        get_next_token();\n        scan_expression();\n        list(3);\n        return list(2);\n      case T_LTEQ:\n        push_symbol(TESTLE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case T_GTEQ:\n        push_symbol(TESTGE);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case '<':\n        push_symbol(TESTLT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n      case '>':\n        push_symbol(TESTGT);\n        swap();\n        get_next_token();\n        scan_expression();\n        return list(3);\n    }\n  };\n\n  scan_expression = function() {\n    var h;\n    h = tos;\n    switch (token) {\n      case '+':\n        get_next_token();\n        scan_term();\n        break;\n      case '-':\n        get_next_token();\n        scan_term();\n        negate();\n        break;\n      default:\n        scan_term();\n    }\n    while (newline_flag === 0 && (token === '+' || token === '-')) {\n      if (token === '+') {\n        get_next_token();\n        scan_term();\n      } else {\n        get_next_token();\n        scan_term();\n        negate();\n      }\n    }\n    if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(ADD);\n      swap();\n      return cons();\n    }\n  };\n\n  is_factor = function() {\n    if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n      return 1;\n    }\n    switch (token) {\n      case '*':\n      case '/':\n        return 1;\n      case '(':\n      case T_SYMBOL:\n      case T_FUNCTION:\n      case T_INTEGER:\n      case T_DOUBLE:\n      case T_STRING:\n        if (newline_flag) { // implicit mul can't cross line\n          scan_str = token_str; // better error display\n          return 0;\n        } else {\n          return 1;\n        }\n    }\n    return 0;\n  };\n\n  simplify_1_in_products = function(tos, h) {\n    if (tos > h && isrational(stack[tos - 1]) && equaln(stack[tos - 1], 1)) {\n      return pop();\n    }\n  };\n\n  // calculate away consecutive constants\n  multiply_consecutive_constants = function(tos, h) {\n    if (tos > h + 1 && isNumericAtom(stack[tos - 2]) && isNumericAtom(stack[tos - 1])) {\n      return multiply();\n    }\n  };\n\n  scan_term = function() {\n    var h;\n    h = tos;\n    scan_factor();\n    if (parse_time_simplifications) {\n      simplify_1_in_products(tos, h);\n    }\n    while (is_factor()) {\n      if (token === '*') {\n        get_next_token();\n        scan_factor();\n      } else if (token === '/') {\n        // in case of 1/... then\n        // we scanned the 1, we get rid\n        // of it because otherwise it becomes\n        // an extra factor that wasn't there and\n        // things like\n        // 1/(2*a) become 1*(1/(2*a))\n        simplify_1_in_products(tos, h);\n        get_next_token();\n        scan_factor();\n        inverse();\n      } else if ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === dotprod_unicode) {\n        get_next_token();\n        push_symbol(INNER);\n        swap();\n        scan_factor();\n        list(3);\n      } else {\n        scan_factor();\n      }\n      if (parse_time_simplifications) {\n        multiply_consecutive_constants(tos, h);\n        simplify_1_in_products(tos, h);\n      }\n    }\n    if (h === tos) {\n      return push_integer(1);\n    } else if (tos - h > 1) {\n      list(tos - h);\n      push_symbol(MULTIPLY);\n      swap();\n      return cons();\n    }\n  };\n\n  scan_power = function() {\n    if (token === '^') {\n      get_next_token();\n      push_symbol(POWER);\n      swap();\n      scan_factor();\n      return list(3);\n    }\n  };\n\n  scan_index = function(h) {\n    //console.log \"[ as index\"\n    get_next_token();\n    push_symbol(INDEX);\n    swap();\n    scan_expression();\n    while (token === ',') {\n      get_next_token();\n      scan_expression();\n    }\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n    get_next_token();\n    return list(tos - h);\n  };\n\n  scan_factor = function() {\n    var firstFactorIsNumber, h;\n    h = tos;\n    //console.log \"scan_factor token: \" + token\n    firstFactorIsNumber = false;\n    if (token === '(') {\n      scan_subexpr();\n    } else if (token === T_SYMBOL) {\n      scan_symbol();\n    } else if (token === T_FUNCTION) {\n      scan_function_call_with_function_name();\n    } else if (token === '[') {\n      //console.log \"[ as tensor\"\n      //debugger\n      scan_tensor();\n    } else if (token === T_INTEGER) {\n      firstFactorIsNumber = true;\n      bignum_scan_integer(token_buf);\n      get_next_token();\n    } else if (token === T_DOUBLE) {\n      firstFactorIsNumber = true;\n      bignum_scan_float(token_buf);\n      get_next_token();\n    } else if (token === T_STRING) {\n      scan_string();\n    } else {\n      scan_error(\"syntax error\");\n    }\n    // after the main initial part of the factor that\n    // we just scanned above,\n    // we can get an arbitrary about of appendages\n    // of the form ...[...](...)...\n    // If the main part is not a number, then these are all, respectively,\n    //  - index references (as opposed to tensor definition) and\n    //  - function calls without an explicit function name\n    //    (instead of subexpressions or parameters of function\n    //    definitions or function calls with an explicit function\n    //    name), respectively\n    while (token === '[' || token === '(' && newline_flag === 0 && !firstFactorIsNumber) {\n      if (token === '[') {\n        scan_index(h);\n      } else if (token === '(') {\n        //console.log \"( as function call without function name \"\n        scan_function_call_without_function_name();\n      }\n    }\n    while (token === '!') {\n      get_next_token();\n      push_symbol(FACTORIAL);\n      swap();\n      list(2);\n    }\n    while ((typeof token.charCodeAt === \"function\" ? token.charCodeAt(0) : void 0) === transpose_unicode) {\n      get_next_token();\n      push_symbol(TRANSPOSE);\n      swap();\n      list(2);\n    }\n    return scan_power();\n  };\n\n  addSymbolRightOfAssignment = function(theSymbol) {\n    var i, l1, prefixVar, ref2;\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(theSymbol) === -1 && symbolsRightOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols right of assignment\");\n      }\n      prefixVar = \"\";\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; (1 <= ref2 ? l1 < ref2 : l1 > ref2); i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n      theSymbol = prefixVar + theSymbol;\n      return symbolsRightOfAssignment.push(theSymbol);\n    }\n  };\n\n  addSymbolLeftOfAssignment = function(theSymbol) {\n    var i, l1, prefixVar, ref2;\n    if (predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(theSymbol) === -1 && symbolsLeftOfAssignment.indexOf(\"'\" + theSymbol) === -1 && !skipRootVariableToBeSolved) {\n      if (DEBUG) {\n        console.log(\"... adding symbol: \" + theSymbol + \" to the set of the symbols left of assignment\");\n      }\n      prefixVar = \"\";\n      for (i = l1 = 1, ref2 = functionInvokationsScanningStack.length; (1 <= ref2 ? l1 < ref2 : l1 > ref2); i = 1 <= ref2 ? ++l1 : --l1) {\n        if (functionInvokationsScanningStack[i] !== \"\") {\n          prefixVar += functionInvokationsScanningStack[i] + \"_\" + i + \"_\";\n        }\n      }\n      theSymbol = prefixVar + theSymbol;\n      return symbolsLeftOfAssignment.push(theSymbol);\n    }\n  };\n\n  scan_symbol = function() {\n    if (token !== T_SYMBOL) {\n      scan_error(\"symbol expected\");\n    }\n    if (meta_mode && token_buf.length === 1) {\n      switch (token_buf[0]) {\n        case 'a':\n          push(symbol(METAA));\n          break;\n        case 'b':\n          push(symbol(METAB));\n          break;\n        case 'x':\n          push(symbol(METAX));\n          break;\n        default:\n          push(usr_symbol(token_buf));\n      }\n    } else {\n      push(usr_symbol(token_buf));\n    }\n    //console.log \"found symbol: \" + token_buf\n    if (scanningParameters.length === 0) {\n      if (DEBUG) {\n        console.log(\"out of scanning parameters, processing \" + token_buf);\n      }\n      lastFoundSymbol = token_buf;\n      if (isSymbolLeftOfAssignment) {\n        addSymbolLeftOfAssignment(token_buf);\n      }\n    } else {\n      if (DEBUG) {\n        console.log(\"still scanning parameters, skipping \" + token_buf);\n      }\n      if (isSymbolLeftOfAssignment) {\n        addSymbolRightOfAssignment(\"'\" + token_buf);\n      }\n    }\n    if (DEBUG) {\n      console.log(\"found symbol: \" + token_buf + \" left of assignment: \" + isSymbolLeftOfAssignment);\n    }\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n    return get_next_token();\n  };\n\n  scan_string = function() {\n    push(new_string(token_buf));\n    return get_next_token();\n  };\n\n  scan_function_call_with_function_name = function() {\n    var functionName, i, l1, n, p, ref2;\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_with_function_name start\");\n    }\n    n = 1; // the parameter number as we scan parameters\n    p = new U();\n    p = usr_symbol(token_buf);\n    push(p);\n    functionName = token_buf;\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.push(token_buf);\n    }\n    lastFoundSymbol = token_buf;\n    if (!isSymbolLeftOfAssignment) {\n      addSymbolRightOfAssignment(token_buf);\n    }\n    get_next_token(); // open parens\n    get_next_token(); // 1st parameter\n    scanningParameters.push(true);\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n      while (token === ',') {\n        get_next_token();\n        // roots' disappearing variable, if there, is the second one\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        // sums' disappearing variable, is alsways the second one\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"sum\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        // product's disappearing variable, is alsways the second one\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"product\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        // for's disappearing variable, is alsways the second one\n        if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"for\") !== -1) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        // defint's disappearing variables can be in positions 2,5,8...\n        if (functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"defint\") !== -1 && (n === 2 || (n > 2 && ((n - 2) % 3 === 0)))) {\n          symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n            return !(new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + token_buf)).test(x);\n          });\n          skipRootVariableToBeSolved = true;\n        }\n        scan_stmt();\n        skipRootVariableToBeSolved = false;\n        n++;\n      }\n      // todo refactor this, there are two copies\n      // this catches the case where the \"roots\" variable is not specified\n      if (n === 2 && functionInvokationsScanningStack[functionInvokationsScanningStack.length - 1].indexOf(\"roots\") !== -1) {\n        symbolsRightOfAssignment = symbolsRightOfAssignment.filter(function(x) {\n          return !(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\" + \"x\")).test(x);\n        });\n      }\n    }\n    scanningParameters.pop();\n    for (i = l1 = 0, ref2 = symbolsRightOfAssignment.length; (0 <= ref2 ? l1 <= ref2 : l1 >= ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      if (symbolsRightOfAssignment[i] != null) {\n        if (functionName === \"roots\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"roots_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"defint\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"defint_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"sum\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"sum_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"product\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"product_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n        if (functionName === \"for\") {\n          symbolsRightOfAssignment[i] = symbolsRightOfAssignment[i].replace(new RegExp(\"for_\" + (functionInvokationsScanningStack.length - 1) + \"_\"), \"\");\n        }\n      }\n    }\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n    get_next_token();\n    list(n);\n    if (functionName === \"roots\" || functionName === \"defint\" || functionName === \"sum\" || functionName === \"product\" || functionName === \"for\") {\n      functionInvokationsScanningStack.pop();\n    }\n    if (functionName === symbol(PATTERN).printname) {\n      patternHasBeenFound = true;\n    }\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_with_function_name end\");\n    }\n  };\n\n  scan_function_call_without_function_name = function() {\n    var n;\n    if (DEBUG) {\n      console.log(\"-- scan_function_call_without_function_name start\");\n    }\n    // the function will have to be looked up\n    // at runtime (i.e. we need to evaulate something to find it\n    // e.g. it might be inside a tensor, so we'd need to evaluate\n    // a tensor element access in that case)\n    push_symbol(EVAL);\n    swap();\n    list(2);\n    n = 1; // the parameter number as we scan parameters\n    get_next_token(); // left paren\n    scanningParameters.push(true);\n    if (token !== ')') {\n      scan_stmt();\n      n++;\n      while (token === ',') {\n        get_next_token();\n        scan_stmt();\n        n++;\n      }\n    }\n    scanningParameters.pop();\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n    get_next_token();\n    list(n);\n    if (DEBUG) {\n      return console.log(\"-- scan_function_call_without_function_name end: \" + stack[tos - 1]);\n    }\n  };\n\n  // scan subexpression\n  scan_subexpr = function() {\n    var n;\n    n = 0;\n    if (token !== '(') {\n      scan_error(\"( expected\");\n    }\n    get_next_token();\n    scan_stmt();\n    if (token !== ')') {\n      scan_error(\") expected\");\n    }\n    return get_next_token();\n  };\n\n  scan_tensor = function() {\n    var n;\n    n = 0;\n    if (token !== '[') {\n      scan_error(\"[ expected\");\n    }\n    get_next_token();\n    //console.log \"scanning the next statement\"\n    scan_stmt();\n    n = 1;\n    while (token === ',') {\n      get_next_token();\n      scan_stmt();\n      n++;\n    }\n    //console.log \"building tensor with elements number: \" + n\n    build_tensor(n);\n    if (token !== ']') {\n      scan_error(\"] expected\");\n    }\n    return get_next_token();\n  };\n\n  scan_error = function(errmsg) {\n    errorMessage = \"\";\n    // try not to put question mark on orphan line\n    while (input_str !== scan_str) {\n      if ((scanned[input_str] === '\\n' || scanned[input_str] === '\\r') && input_str + 1 === scan_str) {\n        break;\n      }\n      errorMessage += scanned[input_str++];\n    }\n    errorMessage += \" ? \";\n    while (scanned[input_str] && (scanned[input_str] !== '\\n' && scanned[input_str] !== '\\r')) {\n      errorMessage += scanned[input_str++];\n    }\n    errorMessage += '\\n';\n    return stop(errmsg);\n  };\n\n  // There are n expressions on the stack, possibly tensors.\n\n  // This function assembles the stack expressions into a single tensor.\n\n  // For example, at the top level of the expression ((a,b),(c,d)), the vectors\n  // (a,b) and (c,d) would be on the stack.\n\n  // takes an integer\n  build_tensor = function(n) {\n    var i, l1, ref2;\n    // int i, j, k, ndim, nelem\n    i = 0;\n    save();\n    p2 = alloc_tensor(n);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = n;\n    for (i = l1 = 0, ref2 = n; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.elem[i] = stack[tos - n + i];\n    }\n    check_tensor_dimensions(p2);\n    moveTos(tos - n);\n    push(p2);\n    return restore();\n  };\n\n  get_next_token = function() {\n    newline_flag = 0;\n    while (1) {\n      get_token();\n      if (token !== T_NEWLINE) {\n        break;\n      }\n      newline_flag = 1;\n    }\n    if (DEBUG) {\n      return console.log(\"get_next_token token: \" + token);\n    }\n  };\n\n  //if token == ')'\n  //  debugger\n  get_token = function() {\n    // skip spaces\n    while (isspace(scanned[scan_str])) {\n      if (scanned[scan_str] === '\\n' || scanned[scan_str] === '\\r') {\n        token = T_NEWLINE;\n        scan_str++;\n        return;\n      }\n      scan_str++;\n    }\n    token_str = scan_str;\n    // end of string?\n    if (scan_str === scanned.length) {\n      token = \"\";\n      return;\n    }\n    // number?\n    if (isdigit(scanned[scan_str]) || scanned[scan_str] === '.') {\n      while (isdigit(scanned[scan_str])) {\n        scan_str++;\n      }\n      if (scanned[scan_str] === '.') {\n        scan_str++;\n        while (isdigit(scanned[scan_str])) {\n          scan_str++;\n        }\n        if (scanned[scan_str] === 'e' && (scanned[scan_str + 1] === '+' || scanned[scan_str + 1] === '-' || isdigit(scanned[scan_str + 1]))) {\n          scan_str += 2;\n          while (isdigit(scanned[scan_str])) {\n            scan_str++;\n          }\n        }\n        token = T_DOUBLE;\n      } else {\n        token = T_INTEGER;\n      }\n      update_token_buf(token_str, scan_str);\n      return;\n    }\n    // symbol?\n    if (isalpha(scanned[scan_str])) {\n      while (isalnumorunderscore(scanned[scan_str])) {\n        scan_str++;\n      }\n      if (scanned[scan_str] === '(') {\n        token = T_FUNCTION;\n      } else {\n        token = T_SYMBOL;\n      }\n      update_token_buf(token_str, scan_str);\n      return;\n    }\n    // string ?\n    if (scanned[scan_str] === '\"') {\n      scan_str++;\n      while (scanned[scan_str] !== '\"') {\n        //if (scan_str == scanned.length || scanned[scan_str] == '\\n' || scanned[scan_str] == '\\r')\n        if (scan_str === scanned.length - 1) {\n          scan_str++;\n          scan_error(\"runaway string\");\n          scan_str--;\n        }\n        scan_str++;\n      }\n      scan_str++;\n      token = T_STRING;\n      update_token_buf(token_str + 1, scan_str - 1);\n      return;\n    }\n    // comment?\n    if (scanned[scan_str] === '#' || scanned[scan_str] === '-' && scanned[scan_str + 1] === '-') {\n      while (scanned[scan_str] && scanned[scan_str] !== '\\n' && scanned[scan_str] !== '\\r') {\n        scan_str++;\n      }\n      if (scanned[scan_str]) {\n        scan_str++;\n      }\n      token = T_NEWLINE;\n      return;\n    }\n    // quote-assignment\n    if (scanned[scan_str] === ':' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_QUOTASSIGN;\n      return;\n    }\n    // relational operator?\n    if (scanned[scan_str] === '=' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_EQ;\n      return;\n    }\n    // != operator. It's a little odd because\n    // \"!\" is not a \"not\", which would make things consistent.\n    // (it's used for factorial).\n    // An alternative would be to use \"<>\" but it's not used\n    // a lot in other languages...\n    if (scanned[scan_str] === '!' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_NEQ;\n      return;\n    }\n    if (scanned[scan_str] === '<' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_LTEQ;\n      return;\n    }\n    if (scanned[scan_str] === '>' && scanned[scan_str + 1] === '=') {\n      scan_str += 2;\n      token = T_GTEQ;\n      return;\n    }\n    // single char token\n    return token = scanned[scan_str++];\n  };\n\n  // both strings\n  update_token_buf = function(a, b) {\n    return token_buf = scanned.substring(a, b);\n  };\n\n  $.scan = scan;\n\n  //-----------------------------------------------------------------------------\n\n  //  Author : philippe.billet@noos.fr\n\n  //  sgn sign function\n\n  //-----------------------------------------------------------------------------\n  Eval_sgn = function() {\n    push(cadr(p1));\n    Eval();\n    return sgn();\n  };\n\n  sgn = function() {\n    save();\n    yysgn();\n    return restore();\n  };\n\n  //define X p1\n  yysgn = function() {\n    p1 = pop();\n    if (isdouble(p1)) {\n      if (p1.d > 0) {\n        push_integer(1);\n        return;\n      } else {\n        if (p1.d === 0) {\n          push_integer(1);\n          return;\n        } else {\n          push_integer(-1);\n          return;\n        }\n      }\n    }\n    if (isrational(p1)) {\n      if (MSIGN(mmul(p1.q.a, p1.q.b)) === -1) {\n        push_integer(-1);\n        return;\n      } else {\n        if (MZERO(mmul(p1.q.a, p1.q.b))) {\n          push_integer(0);\n          return;\n        } else {\n          push_integer(1);\n          return;\n        }\n      }\n    }\n    if (iscomplexnumber(p1)) {\n      push_integer(-1);\n      push(p1);\n      absval();\n      power();\n      push(p1);\n      multiply();\n      return;\n    }\n    if (isnegativeterm(p1)) {\n      push_symbol(SGN);\n      push(p1);\n      negate();\n      list(2);\n      push_integer(-1);\n      multiply();\n      return;\n    }\n    /*\n    push_integer(2)\n    push(p1)\n    heaviside()\n    multiply()\n    push_integer(-1)\n    add()\n    */\n    push_symbol(SGN);\n    push(p1);\n    return list(2);\n  };\n\n  // shape of tensor\n  Eval_shape = function() {\n    push(cadr(p1));\n    Eval();\n    return shape();\n  };\n\n  shape = function() {\n    var ai, an, i, l1, m1, ndim, ref2, ref3, t;\n    i = 0;\n    ndim = 0;\n    t = 0;\n    ai = [];\n    an = [];\n    for (i = l1 = 0, ref2 = MAXDIM; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    }\n    //U **a, **b\n    save();\n    p1 = pop();\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        stop(\"transpose: tensor expected, 1st arg is not a tensor\");\n      }\n      push(zero);\n      restore();\n      return;\n    }\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(ndim);\n    p2.tensor.ndim = 1;\n    p2.tensor.dim[0] = ndim;\n    for (i = m1 = 0, ref3 = ndim; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      push_integer(p1.tensor.dim[i]);\n      p2.tensor.elem[i] = pop();\n    }\n    push(p2);\n    return restore();\n  };\n\n  /*\n   Simplify factorials\n\n  The following script\n\n    F(n,k) = k binomial(n,k)\n    (F(n,k) + F(n,k-1)) / F(n+1,k)\n\n  generates\n\n         k! n!             n! (1 - k + n)!              k! n!\n   -------------------- + -------------------- - ----------------------\n   (-1 + k)! (1 + n)!     (1 + n)! (-k + n)!     k (-1 + k)! (1 + n)!\n\n  Simplify each term to get\n\n      k       1 - k + n       1\n   ------- + ----------- - -------\n    1 + n       1 + n       1 + n\n\n  Then simplify the sum to get\n\n      n\n   -------\n    1 + n\n\n  */\n  // simplify factorials term-by-term\n  Eval_simfac = function() {\n    push(cadr(p1));\n    Eval();\n    return simfac();\n  };\n\n  //if 1\n  simfac = function() {\n    var h;\n    h = 0;\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      h = tos;\n      p1 = cdr(p1);\n      while (p1 !== symbol(NIL)) {\n        push(car(p1));\n        simfac_term();\n        p1 = cdr(p1);\n      }\n      add_all(tos - h);\n    } else {\n      push(p1);\n      simfac_term();\n    }\n    return restore();\n  };\n\n  //else\n  /*\n  void\n  simfac(void)\n  {\n    int h\n    save()\n    p1 = pop()\n    if (car(p1) == symbol(ADD)) {\n      h = tos\n      p1 = cdr(p1)\n      while (p1 != symbol(NIL)) {\n        push(car(p1))\n        simfac_term()\n        p1 = cdr(p1)\n      }\n      addk(tos - h)\n      p1 = pop()\n      if (find(p1, symbol(FACTORIAL))) {\n        push(p1)\n        if (car(p1) == symbol(ADD)) {\n          Condense()\n          simfac_term()\n        }\n      }\n    } else {\n      push(p1)\n      simfac_term()\n    }\n    restore()\n  }\n\n  #endif\n   */\n  simfac_term = function() {\n    var doNothing, h;\n    h = 0;\n    save();\n    p1 = pop();\n    // if not a product of factors then done\n    if (car(p1) !== symbol(MULTIPLY)) {\n      push(p1);\n      restore();\n      return;\n    }\n    // push all factors\n    h = tos;\n    p1 = cdr(p1);\n    while (p1 !== symbol(NIL)) {\n      push(car(p1));\n      p1 = cdr(p1);\n    }\n    // keep trying until no more to do\n    while (yysimfac(h)) {\n      doNothing = 1;\n    }\n    multiply_all_noexpand(tos - h);\n    return restore();\n  };\n\n  // try all pairs of factors\n  yysimfac = function(h) {\n    var i, j, l1, m1, ref2, ref3, ref4, ref5;\n    i = 0;\n    j = 0;\n    for (i = l1 = ref2 = h, ref3 = tos; (ref2 <= ref3 ? l1 < ref3 : l1 > ref3); i = ref2 <= ref3 ? ++l1 : --l1) {\n      p1 = stack[i];\n      for (j = m1 = ref4 = h, ref5 = tos; (ref4 <= ref5 ? m1 < ref5 : m1 > ref5); j = ref4 <= ref5 ? ++m1 : --m1) {\n        if (i === j) {\n          continue;\n        }\n        p2 = stack[j];\n        //  n! / n    ->  (n - 1)!\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && equal(cadr(p1), cadr(p2))) {\n          push(cadr(p1));\n          push(one);\n          subtract();\n          factorial();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        }\n        //  n / n!    ->  1 / (n - 1)!\n        if (car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL) && equal(p1, cadadr(p2))) {\n          push(p1);\n          push_integer(-1);\n          add();\n          factorial();\n          reciprocate();\n          stack[i] = pop();\n          stack[j] = one;\n          return 1;\n        }\n        //  (n + 1) n!  ->  (n + 1)!\n        if (car(p2) === symbol(FACTORIAL)) {\n          push(p1);\n          push(cadr(p2));\n          subtract();\n          p3 = pop();\n          if (isplusone(p3)) {\n            push(p1);\n            factorial();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        }\n        //  1 / ((n + 1) n!)  ->  1 / (n + 1)!\n        if (car(p1) === symbol(POWER) && isminusone(caddr(p1)) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n          if (isplusone(p3)) {\n            push(cadr(p1));\n            factorial();\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n        }\n        //  (n + 1)! / n!  ->  n + 1\n\n        //  n! / (n + 1)!  ->  1 / (n + 1)\n        if (car(p1) === symbol(FACTORIAL) && car(p2) === symbol(POWER) && isminusone(caddr(p2)) && caadr(p2) === symbol(FACTORIAL)) {\n          push(cadr(p1));\n          push(cadr(cadr(p2)));\n          subtract();\n          p3 = pop();\n          if (isplusone(p3)) {\n            stack[i] = cadr(p1);\n            stack[j] = one;\n            return 1;\n          }\n          if (isminusone(p3)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            stack[j] = one;\n            return 1;\n          }\n          if (equaln(p3, 2)) {\n            stack[i] = cadr(p1);\n            push(cadr(p1));\n            push_integer(-1);\n            add();\n            stack[j] = pop();\n            return 1;\n          }\n          if (equaln(p3, -2)) {\n            push(cadr(cadr(p2)));\n            reciprocate();\n            stack[i] = pop();\n            push(cadr(cadr(p2)));\n            push_integer(-1);\n            add();\n            reciprocate();\n            stack[j] = pop();\n            return 1;\n          }\n        }\n      }\n    }\n    return 0;\n  };\n\n  DEBUG_SIMPLIFY = false;\n\n  Eval_simplify = function() {\n    push(cadr(p1));\n    runUserDefinedSimplifications();\n    Eval();\n    return simplify();\n  };\n\n  runUserDefinedSimplifications = function() {\n    var atLeastOneSuccessInRouldOfRulesApplications, eachConsecutiveRuleApplication, eachSimplification, l1, len, len1, m1, numberOfRulesApplications, originalexpanding, success;\n    // -----------------------\n    // unfortunately for the time being user\n    // specified simplifications are only\n    // run in things which don't contain\n    // integrals.\n    // Doesn't work yet, could be because of\n    // some clobbering as \"transform\" is called\n    // recursively?\n    if (userSimplificationsInListForm.length !== 0 && !Find(cadr(p1), symbol(INTEGRAL))) {\n      originalexpanding = expanding;\n      expanding = false;\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"runUserDefinedSimplifications passed: \" + stack[tos - 1].toString());\n      }\n      Eval();\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"runUserDefinedSimplifications after eval no expanding: \" + stack[tos - 1].toString());\n      }\n      expanding = originalexpanding;\n      p1 = stack[tos - 1];\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"patterns to be checked: \");\n      }\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        eachSimplification = userSimplificationsInListForm[l1];\n        if (DEBUG_SIMPLIFY) {\n          console.log(\"...\" + eachSimplification);\n        }\n      }\n      atLeastOneSuccessInRouldOfRulesApplications = true;\n      numberOfRulesApplications = 0;\n      while (atLeastOneSuccessInRouldOfRulesApplications && numberOfRulesApplications < MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        atLeastOneSuccessInRouldOfRulesApplications = false;\n        numberOfRulesApplications++;\n        for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n          eachSimplification = userSimplificationsInListForm[m1];\n          success = true;\n          eachConsecutiveRuleApplication = 0;\n          while (success && eachConsecutiveRuleApplication < MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            eachConsecutiveRuleApplication++;\n            if (DEBUG_SIMPLIFY) {\n              console.log(\"simplify - tos: \" + tos + \" checking pattern: \" + eachSimplification + \" on: \" + p1);\n            }\n            push_symbol(NIL);\n            success = transform(eachSimplification, true);\n            if (success) {\n              atLeastOneSuccessInRouldOfRulesApplications = true;\n            }\n            p1 = stack[tos - 1];\n            if (DEBUG_SIMPLIFY) {\n              console.log(\"p1 at this stage of simplification: \" + p1);\n            }\n          }\n          if (eachConsecutiveRuleApplication === MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE) {\n            stop(\"maximum application of single transformation rule exceeded: \" + eachSimplification);\n          }\n        }\n      }\n      if (numberOfRulesApplications === MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES) {\n        stop(\"maximum application of all transformation rules exceeded \");\n      }\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"METAX = \" + get_binding(symbol(METAX)));\n      }\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"METAA = \" + get_binding(symbol(METAA)));\n      }\n      if (DEBUG_SIMPLIFY) {\n        return console.log(\"METAB = \" + get_binding(symbol(METAB)));\n      }\n    }\n  };\n\n  // ------------------------\n  simplifyForCodeGeneration = function() {\n    save();\n    runUserDefinedSimplifications();\n    codeGen = true;\n    // in \"codeGen\" mode we completely\n    // eval and simplify the function bodies\n    // because we really want to resolve all\n    // the variables indirections and apply\n    // all the simplifications we can.\n    simplify_main();\n    codeGen = false;\n    return restore();\n  };\n\n  simplify = function() {\n    save();\n    simplify_main();\n    return restore();\n  };\n\n  simplify_main = function() {\n    var args, fbody;\n    p1 = pop();\n    // when we do code generation, we proceed to\n    // fully evaluate and simplify the body of\n    // a function, so we resolve all variables\n    // indirections and we simplify everything\n    // we can given the current assignments.\n    if (codeGen && car(p1) === symbol(FUNCTION)) {\n      fbody = cadr(p1);\n      push(fbody);\n      // let's simplify the body so we give it a\n      // compact form\n      eval();\n      simplify();\n      p3 = pop();\n      // replace the evaled body\n      args = caddr(p1);\n      push_symbol(FUNCTION);\n      push(p3);\n      push(args);\n      list(3);\n      p1 = pop();\n    }\n    if (istensor(p1)) {\n      simplify_tensor();\n      return;\n    }\n    if (Find(p1, symbol(FACTORIAL))) {\n      push(p1);\n      simfac();\n      p2 = pop();\n      push(p1);\n      rationalize();\n      simfac();\n      p3 = pop();\n      if (count(p2) < count(p3)) {\n        p1 = p2;\n      } else {\n        p1 = p3;\n      }\n    }\n    f10();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f10: \" + p1.toString());\n    }\n    f1();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f1: \" + p1.toString());\n    }\n    f2();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f2: \" + p1.toString());\n    }\n    f3();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f3: \" + p1.toString());\n    }\n    f4();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f4: \" + p1.toString());\n    }\n    f5();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f5: \" + p1.toString());\n    }\n    f9();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"f9: \" + p1.toString());\n    }\n    simplify_polarRect();\n    if (do_simplify_nested_radicals) {\n      // if there is some de-nesting then\n      // re-run a simplification because\n      // the shape of the expression might\n      // have changed significantly.\n      // e.g. simplify(14^(1/2) - (16 - 4*7^(1/2))^(1/2))\n      // needs some more semplification after the de-nesting.\n      if (simplify_nested_radicals()) {\n        if (DEBUG_SIMPLIFY) {\n          console.log(\"de-nesting successful into: \" + p1.toString());\n        }\n        push(p1);\n        simplify();\n        return;\n      }\n    }\n    simplify_rectToClock();\n    simplify_rational_expressions();\n    return push(p1);\n  };\n\n  simplify_tensor = function() {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1.tensor.elem[i]);\n      simplify();\n      p2.tensor.elem[i] = pop();\n    }\n    check_tensor_dimensions(p2);\n    if (isZeroAtomOrTensor(p2)) {\n      p2 = zero; // null tensor becomes scalar zero\n    }\n    return push(p2);\n  };\n\n  // try rationalizing\n  f1 = function() {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n    push(p1);\n    rationalize();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  // try condensing\n  f2 = function() {\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n    push(p1);\n    Condense();\n    p2 = pop();\n    if (count(p2) <= count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  // this simplifies forms like (A-B) / (B-A)\n  f3 = function() {\n    push(p1);\n    rationalize();\n    negate();\n    rationalize();\n    negate();\n    rationalize();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  f10 = function() {\n    var a, b, carp1, miao, originalexpanding;\n    carp1 = car(p1);\n    miao = cdr(p1);\n    if (carp1 === symbol(MULTIPLY) || isinnerordot(p1)) {\n      // both operands a transpose?\n      if ((car(car(cdr(p1))) === symbol(TRANSPOSE)) && (car(car(cdr(cdr(p1)))) === symbol(TRANSPOSE))) {\n        if (DEBUG_SIMPLIFY) {\n          console.log(\"maybe collecting a transpose \" + p1);\n        }\n        a = cadr(car(cdr(p1)));\n        b = cadr(car(cdr(cdr(p1))));\n        if (carp1 === symbol(MULTIPLY)) {\n          push(a);\n          push(b);\n          multiply();\n        } else if (isinnerordot(p1)) {\n          push(b);\n          push(a);\n          inner();\n        }\n        push_integer(1);\n        push_integer(2);\n        originalexpanding = expanding;\n        expanding = false;\n        transpose();\n        expanding = originalexpanding;\n        p2 = pop();\n        if (count(p2) < count(p1)) {\n          p1 = p2;\n        }\n        if (DEBUG_SIMPLIFY) {\n          return console.log(\"collecting a transpose \" + p2);\n        }\n      }\n    }\n  };\n\n  // try expanding denominators\n  f4 = function() {\n    if (isZeroAtomOrTensor(p1)) {\n      return;\n    }\n    push(p1);\n    rationalize();\n    inverse();\n    rationalize();\n    inverse();\n    rationalize();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  // simplifies trig forms\n  simplify_trig = function() {\n    save();\n    p1 = pop();\n    f5();\n    push(p1);\n    return restore();\n  };\n\n  f5 = function() {\n    if (Find(p1, symbol(SIN)) === 0 && Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n    p2 = p1;\n    trigmode = 1;\n    push(p2);\n    Eval();\n    p3 = pop();\n    trigmode = 2;\n    push(p2);\n    Eval();\n    p4 = pop();\n    trigmode = 0;\n    if (count(p4) < count(p3) || nterms(p4) < nterms(p3)) {\n      p3 = p4;\n    }\n    if (count(p3) < count(p1) || nterms(p3) < nterms(p1)) {\n      return p1 = p3;\n    }\n  };\n\n  // if it's a sum then try to simplify each term\n  f9 = function() {\n    var oldp1, oldp2;\n    if (car(p1) !== symbol(ADD)) {\n      return;\n    }\n    push_integer(0);\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      push(car(p2));\n      simplify();\n      add();\n      oldp1 = p1;\n      oldp2 = p2;\n      p1 = pop();\n      simplify_rational_expressions();\n      push(p1);\n      p1 = oldp1;\n      p2 = oldp2;\n      p2 = cdr(p2);\n    }\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_rational_expressions = function() {\n    var denom, num, polyVar, sasa, theGCD;\n    push(p1);\n    denominator();\n    denom = pop();\n    if (isone(denom)) {\n      return;\n    }\n    push(p1);\n    numerator();\n    num = pop();\n    if (isone(num)) {\n      return;\n    }\n    if (!(polyVar = areunivarpolysfactoredorexpandedform(num, denom))) {\n      return;\n    }\n    push(num);\n    push(denom);\n    gcd();\n    push(polyVar);\n    factor();\n    theGCD = pop();\n    // if there are no common factors then\n    // bail\n    if (isone(theGCD)) {\n      return;\n    }\n    push(num);\n    push(polyVar);\n    factor();\n    push(theGCD);\n    //divide()\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    push(denom);\n    push(polyVar);\n    factor();\n    push(theGCD);\n    //divide()\n    inverse();\n    multiply_noexpand();\n    simplify();\n    sasa = stack[tos - 1].toString();\n    divide();\n    //simplify()\n    Condense();\n    sasa = stack[tos - 1].toString();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  // things like 6*(cos(2/9*pi)+i*sin(2/9*pi))\n  // where we have sin and cos, those might start to\n  // look better in clock form i.e.  6*(-1)^(2/9) \n  simplify_rectToClock = function() {\n    //debugger\n    if (Find(p1, symbol(SIN)) === 0 && Find(p1, symbol(COS)) === 0) {\n      return;\n    }\n    push(p1);\n    Eval();\n    clockform();\n    p2 = pop();\n    if (DEBUG_SIMPLIFY) {\n      console.log(\"before simplification clockform: \" + p1 + \" after: \" + p2);\n    }\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  simplify_polarRect = function() {\n    push(p1);\n    polarRectAMinusOneBase();\n    Eval();\n    p2 = pop();\n    if (count(p2) < count(p1)) {\n      return p1 = p2;\n    }\n  };\n\n  polarRectAMinusOneBase = function() {\n    var h;\n    save();\n    p1 = pop();\n    if (isimaginaryunit(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    if (equal(car(p1), symbol(POWER)) && isminusone(cadr(p1))) {\n      // base we just said is minus 1\n      push(one);\n      negate();\n      // exponent\n      push(caddr(p1));\n      polarRectAMinusOneBase();\n      power();\n      // try to simplify it using polar and rect\n      polar();\n      rect();\n    } else if (iscons(p1)) {\n      h = tos;\n      while (iscons(p1)) {\n        //console.log(\"recursing on: \" + car(p1).toString())\n        push(car(p1));\n        polarRectAMinusOneBase();\n        //console.log(\"...transformed into: \" + stack[tos-1].toString())\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n    } else {\n      push(p1);\n    }\n    restore();\n  };\n\n  nterms = function(p) {\n    if (car(p) !== symbol(ADD)) {\n      return 1;\n    } else {\n      return length(p) - 1;\n    }\n  };\n\n  simplify_nested_radicals = function() {\n    var prev_expanding, simplificationWithCondense, simplificationWithoutCondense, somethingSimplified;\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n      return false;\n    }\n    push(p1);\n    somethingSimplified = take_care_of_nested_radicals();\n    // in this paragraph we check whether we can collect\n    // common factors without complicating the expression\n    // in particular we want to avoid \n    // collecting radicals like in this case where\n    // we collect sqrt(2):\n    //   2-2^(1/2) into 2^(1/2)*(-1+2^(1/2))\n    // but we do like to collect other non-radicals e.g.\n    //   17/2+3/2*5^(1/2) into 1/2*(17+3*5^(1/2))\n    // so what we do is we count the powers and we check\n    // which version has the least number of them.\n    simplificationWithoutCondense = stack[tos - 1];\n    prev_expanding = expanding;\n    expanding = 0;\n    yycondense();\n    expanding = prev_expanding;\n    simplificationWithCondense = pop();\n    //console.log(\"occurrences of powers in \" + simplificationWithoutCondense + \" :\" + countOccurrencesOfSymbol(symbol(POWER),simplificationWithoutCondense))\n    //console.log(\"occurrences of powers in \" + simplificationWithCondense + \" :\" + countOccurrencesOfSymbol(symbol(POWER),simplificationWithCondense))\n    if (countOccurrencesOfSymbol(symbol(POWER), simplificationWithoutCondense) < countOccurrencesOfSymbol(symbol(POWER), simplificationWithCondense)) {\n      push(simplificationWithoutCondense);\n    } else {\n      push(simplificationWithCondense);\n    }\n    // we got out result, wrap up\n    p1 = pop();\n    return somethingSimplified;\n  };\n\n  take_care_of_nested_radicals = function() {\n    var A, B, C, SOLUTION, anyRadicalSimplificationWorked, base, checkSize, commonBases, commonInnerExponent, countingTerms, eachSolution, exponent, firstTerm, h, i, innerbase, innerexponent, l1, len, len1, len2, len3, lowercase_a, lowercase_b, m1, n1, numberOfTerms, o1, possibleNewExpression, possibleNewExpressionValue, possibleRationalSolutions, possibleSolutions, potentialPower, realOfpossibleRationalSolutions, ref2, secondTerm, secondTermFactor, termsThatAreNotPowers, whichRationalSolution;\n    if (recursionLevelNestedRadicalsRemoval > 0) {\n      if (DEBUG_SIMPLIFY) {\n        console.log(\"denesting bailing out because of too much recursion\");\n      }\n      return false;\n    }\n    save();\n    p1 = pop();\n    //console.log(\"take_care_of_nested_radicals p1: \" + p1.toString())\n    if (equal(car(p1), symbol(POWER))) {\n      //console.log(\"ok it's a power \")\n      base = cadr(p1);\n      exponent = caddr(p1);\n      if (!isminusone(exponent) && equal(car(base), symbol(ADD)) && isfraction(exponent) && (equalq(exponent, 1, 3) || equalq(exponent, 1, 2))) {\n        //console.log(\"ok there is a radix with a term inside\")\n        firstTerm = cadr(base);\n        push(firstTerm);\n        take_care_of_nested_radicals();\n        pop();\n        secondTerm = caddr(base);\n        push(secondTerm);\n        take_care_of_nested_radicals();\n        pop();\n        //console.log(\"possible double radical term1: \" + firstTerm)\n        //console.log(\"possible double radical term2: \" + secondTerm)\n        numberOfTerms = 0;\n        countingTerms = base;\n        while (cdr(countingTerms) !== symbol(NIL)) {\n          numberOfTerms++;\n          countingTerms = cdr(countingTerms);\n        }\n        //console.log(\"number of terms: \" + numberOfTerms)\n        if (numberOfTerms > 2) {\n          //console.log(\"too many terms under outer radix \")\n          push(p1);\n          restore();\n          return false;\n        }\n        // list here all the factors\n        commonInnerExponent = null;\n        commonBases = [];\n        termsThatAreNotPowers = [];\n        if (car(secondTerm) === symbol(MULTIPLY)) {\n          // product of factors\n          secondTermFactor = cdr(secondTerm);\n          if (iscons(secondTermFactor)) {\n            while (iscons(secondTermFactor)) {\n              //console.log(\"second term factor BIS: \" + car(secondTermFactor).toString())\n              potentialPower = car(secondTermFactor);\n              if (car(potentialPower) === symbol(POWER)) {\n                innerbase = cadr(potentialPower);\n                innerexponent = caddr(potentialPower);\n                if (equalq(innerexponent, 1, 2)) {\n                  if (commonInnerExponent == null) {\n                    commonInnerExponent = innerexponent;\n                    commonBases.push(innerbase);\n                  } else {\n                    if (equal(innerexponent, commonInnerExponent)) {\n                      //console.log(\"common base: \" + innerbase.toString())\n                      commonBases.push(innerbase);\n                    } else {\n\n                    }\n                  }\n                }\n              } else {\n                //console.log(\"no common bases here \")\n                //console.log(\"this one is a power base: \" + innerbase + \" , exponent: \" + innerexponent)\n                termsThatAreNotPowers.push(potentialPower);\n              }\n              secondTermFactor = cdr(secondTermFactor);\n            }\n          }\n        } else if (car(secondTerm) === symbol(POWER)) {\n          innerbase = cadr(secondTerm);\n          innerexponent = caddr(secondTerm);\n          if ((commonInnerExponent == null) && equalq(innerexponent, 1, 2)) {\n            //console.log(\"tackling double radical 2: \" + p1.toString())\n            commonInnerExponent = innerexponent;\n            commonBases.push(innerbase);\n          }\n        }\n        if (commonBases.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n        A = firstTerm;\n        //console.log(\"A: \" + A.toString())\n        push_integer(1);\n        for (l1 = 0, len = commonBases.length; l1 < len; l1++) {\n          i = commonBases[l1];\n          push(i);\n          multiply();\n        }\n        //console.log(\"basis with common exponent: \" + i.toString())\n        C = pop();\n        //console.log(\"C: \" + C.toString())\n        push_integer(1);\n        for (m1 = 0, len1 = termsThatAreNotPowers.length; m1 < len1; m1++) {\n          i = termsThatAreNotPowers[m1];\n          push(i);\n          multiply();\n        }\n        //console.log(\"terms that are not powers: \" + i.toString())\n        B = pop();\n        //console.log(\"B: \" + B.toString())\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          negate();\n          push(C);\n          multiply();\n          push(B);\n          divide(); // 4th coeff\n          //console.log(\"constant coeff \" + stack[tos-1].toString())\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          push_integer(3);\n          push(C);\n          multiply(); // 3rd coeff\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(-3);\n          push(A);\n          multiply();\n          push(B);\n          divide(); // 2nd coeff\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          push_integer(1); // 1st coeff\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n          push(symbol(SECRETX));\n          push_integer(3);\n          power();\n          multiply();\n          add();\n          add();\n          add();\n        } else if (equalq(exponent, 1, 2)) {\n          push(C); // 3th coeff\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          //console.log(\"constant coeff \" + stack[tos-1].toString())\n          push_integer(-2);\n          push(A);\n          multiply();\n          push(B);\n          divide(); // 2nd coeff\n          checkSize = pop();\n          push(checkSize);\n          real();\n          yyfloat();\n          if (Math.abs(pop().d) > Math.pow(2, 32)) {\n            pop();\n            push(p1);\n            restore();\n            return false;\n          }\n          push(checkSize);\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n          push(symbol(SECRETX));\n          multiply();\n          push_integer(1); // 1st coeff\n          //console.log(\"next coeff \" + stack[tos-1].toString())\n          push(symbol(SECRETX));\n          push_integer(2);\n          power();\n          multiply();\n          add();\n          add();\n        }\n        //console.log(\"whole polynomial: \" + stack[tos-1].toString())\n        push(symbol(SECRETX));\n        recursionLevelNestedRadicalsRemoval++;\n        //console.log(\"invoking roots at recursion level: \" + recursionLevelNestedRadicalsRemoval)\n        roots();\n        recursionLevelNestedRadicalsRemoval--;\n        if (equal(stack[tos - 1], symbol(NIL))) {\n          if (DEBUG_SIMPLIFY) {\n            console.log(\"roots bailed out because of too much recursion\");\n          }\n          pop();\n          push(p1);\n          restore();\n          return false;\n        }\n        //console.log(\"all solutions: \" + stack[tos-1].toString())\n\n        // exclude the solutions with radicals\n        possibleSolutions = [];\n        ref2 = stack[tos - 1].tensor.elem;\n        for (n1 = 0, len2 = ref2.length; n1 < len2; n1++) {\n          eachSolution = ref2[n1];\n          if (!Find(eachSolution, symbol(POWER))) {\n            possibleSolutions.push(eachSolution);\n          }\n        }\n        pop(); // popping the tensor with the solutions\n        \n        //console.log(\"possible solutions: \" + possibleSolutions.toString())\n        if (possibleSolutions.length === 0) {\n          push(p1);\n          restore();\n          return false;\n        }\n        possibleRationalSolutions = [];\n        realOfpossibleRationalSolutions = [];\n//console.log(\"checking the one with maximum real part \")\n        for (o1 = 0, len3 = possibleSolutions.length; o1 < len3; o1++) {\n          i = possibleSolutions[o1];\n          push(i);\n          real();\n          yyfloat();\n          possibleRationalSolutions.push(i);\n          realOfpossibleRationalSolutions.push(pop().d);\n        }\n        whichRationalSolution = realOfpossibleRationalSolutions.indexOf(Math.max.apply(Math, realOfpossibleRationalSolutions));\n        SOLUTION = possibleRationalSolutions[whichRationalSolution];\n        //console.log(\"picked solution: \" + SOLUTION)\n        /*\n        #possibleNewExpressions = []\n        #realOfPossibleNewExpressions = []\n         * pick the solution which cubic root has no radicals\n        lowercase_b = null\n        for SOLUTION in possibleSolutions\n          console.log(\"testing solution: \" + SOLUTION.toString())\n\n          debugger\n          if equalq(exponent,1,3)\n            push(A)\n            push(SOLUTION)\n            push_integer(3)\n            power()\n            push_integer(3)\n            push(C)\n            multiply()\n            push(SOLUTION)\n            multiply()\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,3)\n            power()\n          else if equalq(exponent,1,2)\n            push(A)\n            push(SOLUTION)\n            push_integer(2)\n            power()\n            push(C)\n            add()\n            divide()\n            console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n            push_rational(1,2)\n            power()\n          console.log(\"b is: \" + stack[tos-1].toString())\n\n          lowercase_b = pop()\n\n          if !Find(lowercase_b, symbol(POWER))\n            break\n         */\n        if (equalq(exponent, 1, 3)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(3);\n          power();\n          push_integer(3);\n          push(C);\n          multiply();\n          push(SOLUTION);\n          multiply();\n          add();\n          divide();\n          //console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n          push_rational(1, 3);\n          power();\n        } else if (equalq(exponent, 1, 2)) {\n          push(A);\n          push(SOLUTION);\n          push_integer(2);\n          power();\n          push(C);\n          add();\n          divide();\n          //console.log(\"argument of cubic root: \" + stack[tos-1].toString())\n          push_rational(1, 2);\n          power();\n        }\n        //console.log(\"b is: \" + stack[tos-1].toString())\n        lowercase_b = pop();\n        if (lowercase_b == null) {\n          push(p1);\n          restore();\n          return false;\n        }\n        push(lowercase_b);\n        push(SOLUTION);\n        multiply();\n        if (equalq(exponent, 1, 3)) {\n          //console.log(\"a is: \" + stack[tos-1].toString())\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n        } else if (equalq(exponent, 1, 2)) {\n          //console.log(\"a could be: \" + stack[tos-1].toString())\n          lowercase_a = pop();\n          push(lowercase_b);\n          push(C);\n          push_rational(1, 2);\n          power();\n          multiply();\n          push(lowercase_a);\n          add();\n          simplify();\n          possibleNewExpression = pop();\n          //console.log(\"verifying if  \" + possibleNewExpression + \" is positive\")\n          push(possibleNewExpression);\n          real();\n          yyfloat();\n          possibleNewExpressionValue = pop();\n          if (!isnegativenumber(possibleNewExpressionValue)) {\n            //console.log(\"... it is positive\")\n            push(possibleNewExpression);\n          } else {\n            //console.log(\"... it is NOT positive\")\n            push(lowercase_b);\n            negate();\n            lowercase_b = pop();\n            push(lowercase_a);\n            negate();\n            lowercase_a = pop();\n            push(lowercase_b);\n            push(C);\n            push_rational(1, 2);\n            power();\n            multiply();\n            push(lowercase_a);\n            add();\n            simplify();\n          }\n        }\n        // possibleNewExpression is now at top of stack\n\n        //console.log(\"potential new expression: \" + stack[tos-1].toString())\n        p1 = pop();\n        //newExpression = pop()\n        //debugger\n        //push(newExpression)\n        //real()\n        //yyfloat()\n        //possibleNewExpressions.push(newExpression)\n        //realOfPossibleNewExpressions.push(pop().d)\n\n        //whichExpression = realOfPossibleNewExpressions.indexOf(Math.max.apply(Math, realOfPossibleNewExpressions))\n        //p1 = possibleNewExpressions[whichExpression]\n        //console.log(\"final new expression: \" + p1.toString())\n        push(p1);\n        restore();\n        return true;\n      } else {\n        push(p1);\n        restore();\n        return false;\n      }\n    } else if (iscons(p1)) {\n      h = tos;\n      anyRadicalSimplificationWorked = false;\n      while (iscons(p1)) {\n        //console.log(\"recursing on: \" + car(p1).toString())\n        push(car(p1));\n        anyRadicalSimplificationWorked = anyRadicalSimplificationWorked || take_care_of_nested_radicals();\n        //console.log(\"...transformed into: \" + stack[tos-1].toString())\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      restore();\n      return anyRadicalSimplificationWorked;\n    } else {\n      push(p1);\n      restore();\n      return false;\n    }\n    throw new Error(\"control flow should never reach here\");\n  };\n\n  // Sine function of numerical and symbolic arguments\n  Eval_sin = function() {\n    //console.log \"sin ---- \"\n    push(cadr(p1));\n    Eval();\n    return sine();\n  };\n\n  //console.log \"sin end ---- \"\n  sine = function() {\n    //console.log \"sine ---- \"\n    save();\n    p1 = pop();\n    if (car(p1) === symbol(ADD)) {\n      // sin of a sum can be further decomposed into\n      //sin(alpha+beta) = sin(alpha)*cos(beta)+sin(beta)*cos(alpha)\n      sine_of_angle_sum();\n    } else {\n      sine_of_angle();\n    }\n    return restore();\n  };\n\n  //console.log \"sine end ---- \"\n\n  // Use angle sum formula for special angles.\n\n  //define A p3\n  //define B p4\n\n  // decompose sum sin(alpha+beta) into\n  // sin(alpha)*cos(beta)+sin(beta)*cos(alpha)\n  sine_of_angle_sum = function() {\n    //console.log \"sin of angle sum ---- \"\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      p4 = car(p2);\n      if (isnpi(p4)) { // p4 is B\n        push(p1);\n        push(p4);\n        subtract();\n        p3 = pop();\n        push(p3);\n        sine();\n        push(p4);\n        cosine();\n        multiply();\n        push(p3);\n        cosine();\n        push(p4);\n        sine();\n        multiply();\n        add();\n        return;\n      }\n      //console.log \"sin of angle sum end ---- \"\n      p2 = cdr(p2);\n    }\n    return sine_of_angle();\n  };\n\n  //console.log \"sin of angle sum end ---- \"\n  sine_of_angle = function() {\n    var d, n;\n    if (car(p1) === symbol(ARCSIN)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.sin(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    // sine function is antisymmetric, sin(-x) = -sin(x)\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      sine();\n      negate();\n      return;\n    }\n    // sin(arctan(x)) = x / sqrt(1 + x^2)\n\n    // see p. 173 of the CRC Handbook of Mathematical Sciences\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      push_integer(1);\n      push(cadr(p1));\n      push_integer(2);\n      power();\n      add();\n      push_rational(-1, 2);\n      power();\n      multiply();\n      return;\n    }\n    // multiply by 180/pi to go from radians to degrees.\n    // we go from radians to degrees because it's much\n    // easier to calculate symbolic results of most (not all) \"classic\"\n    // angles (e.g. 30,45,60...) if we calculate the degrees\n    // and the we do a switch on that.\n    // Alternatively, we could look at the fraction of pi\n    // (e.g. 60 degrees is 1/3 pi) but that's more\n    // convoluted as we'd need to look at both numerator and\n    // denominator.\n    push(p1);\n    push_integer(180);\n    multiply();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    divide();\n    n = pop_integer();\n    // most \"good\" (i.e. compact) trigonometric results\n    // happen for a round number of degrees. There are some exceptions\n    // though, e.g. 22.5 degrees, which we don't capture here.\n    if (n < 0 || isNaN(n)) {\n      push(symbol(SIN));\n      push(p1);\n      list(2);\n      return;\n    }\n    // values of some famous angles. Many more here:\n    // https://en.wikipedia.org/wiki/Trigonometric_constants_expressed_in_real_radicals\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n      case 30:\n      case 150:\n        return push_rational(1, 2);\n      case 210:\n      case 330:\n        return push_rational(-1, 2);\n      case 45:\n      case 135:\n        push_rational(1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 225:\n      case 315:\n        push_rational(-1, 2);\n        push_integer(2);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 60:\n      case 120:\n        push_rational(1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 240:\n      case 300:\n        push_rational(-1, 2);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 90:\n        return push_integer(1);\n      case 270:\n        return push_integer(-1);\n      default:\n        push(symbol(SIN));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  //            exp(x) - exp(-x)\n  //  sinh(x) = ----------------\n  //                   2\n  Eval_sinh = function() {\n    push(cadr(p1));\n    Eval();\n    return ysinh();\n  };\n\n  ysinh = function() {\n    save();\n    yysinh();\n    return restore();\n  };\n\n  yysinh = function() {\n    var d;\n    d = 0.0;\n    p1 = pop();\n    if (car(p1) === symbol(ARCSINH)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.sinh(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n    push_symbol(SINH);\n    push(p1);\n    return list(2);\n  };\n\n  subst = function() {\n    var expr, i, l1, m1, newExpr, newTensor, oldExpr, ref2, ref3;\n    save();\n    newExpr = pop();\n    oldExpr = pop();\n    if (oldExpr === symbol(NIL) || newExpr === symbol(NIL)) {\n      restore();\n      return;\n    }\n    expr = pop();\n    if (istensor(expr)) {\n      newTensor = alloc_tensor(expr.tensor.nelem);\n      newTensor.tensor.ndim = expr.tensor.ndim;\n      for (i = l1 = 0, ref2 = expr.tensor.ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        newTensor.tensor.dim[i] = expr.tensor.dim[i];\n      }\n      for (i = m1 = 0, ref3 = expr.tensor.nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n        push(expr.tensor.elem[i]);\n        push(oldExpr);\n        push(newExpr);\n        subst();\n        newTensor.tensor.elem[i] = pop();\n        check_tensor_dimensions(newTensor);\n      }\n      push(newTensor);\n    } else if (equal(expr, oldExpr)) {\n      push(newExpr);\n    } else if (iscons(expr)) {\n      push(car(expr));\n      push(oldExpr);\n      push(newExpr);\n      subst();\n      push(cdr(expr));\n      push(oldExpr);\n      push(newExpr);\n      subst();\n      cons();\n    } else {\n      push(expr);\n    }\n    return restore();\n  };\n\n  // 'sum' function\n\n  //define A p3\n  //define B p4\n  //define I p5\n  //define X p6\n\n  // leaves the sum at the top of the stack\n  Eval_sum = function() {\n    var body, i, indexVariable, j, k, l1, ref2, ref3;\n    i = 0;\n    j = 0;\n    k = 0;\n    // 1st arg\n    body = cadr(p1);\n    // 2nd arg (index)\n    indexVariable = caddr(p1);\n    if (!issymbol(indexVariable)) {\n      stop(\"sum: 2nd arg?\");\n    }\n    // 3rd arg (lower limit)\n    push(cadddr(p1));\n    Eval();\n    j = pop_integer();\n    if (isNaN(j)) {\n      push(p1);\n      return;\n    }\n    // 4th arg (upper limit)\n    push(caddddr(p1));\n    Eval();\n    k = pop_integer();\n    if (isNaN(k)) {\n      push(p1);\n      return;\n    }\n    // remember contents of the index\n    // variable so we can put it back after the loop\n    p4 = get_binding(indexVariable);\n    push_integer(0);\n    for (i = l1 = ref2 = j, ref3 = k; (ref2 <= ref3 ? l1 <= ref3 : l1 >= ref3); i = ref2 <= ref3 ? ++l1 : --l1) {\n      push_integer(i);\n      p5 = pop();\n      set_binding(indexVariable, p5);\n      push(body);\n      Eval();\n      add();\n    }\n    // put back the index variable to original content\n    return set_binding(indexVariable, p4);\n  };\n\n  // Tangent function of numerical and symbolic arguments\n  Eval_tan = function() {\n    push(cadr(p1));\n    Eval();\n    return tangent();\n  };\n\n  tangent = function() {\n    save();\n    yytangent();\n    return restore();\n  };\n\n  yytangent = function() {\n    var d, n;\n    n = 0;\n    d = 0.0;\n    p1 = pop();\n    if (car(p1) === symbol(ARCTAN)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.tan(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    // tan function is antisymmetric, tan(-x) = -tan(x)\n    if (isnegative(p1)) {\n      push(p1);\n      negate();\n      tangent();\n      negate();\n      return;\n    }\n    // multiply by 180/pi to go from radians to degrees.\n    // we go from radians to degrees because it's much\n    // easier to calculate symbolic results of most (not all) \"classic\"\n    // angles (e.g. 30,45,60...) if we calculate the degrees\n    // and the we do a switch on that.\n    // Alternatively, we could look at the fraction of pi\n    // (e.g. 60 degrees is 1/3 pi) but that's more\n    // convoluted as we'd need to look at both numerator and\n    // denominator.\n    push(p1);\n    push_integer(180);\n    multiply();\n    if (evaluatingAsFloats) {\n      push_double(Math.PI);\n    } else {\n      push_symbol(PI);\n    }\n    divide();\n    n = pop_integer();\n    // most \"good\" (i.e. compact) trigonometric results\n    // happen for a round number of degrees. There are some exceptions\n    // though, e.g. 22.5 degrees, which we don't capture here.\n    if (n < 0 || isNaN(n)) {\n      push(symbol(TAN));\n      push(p1);\n      list(2);\n      return;\n    }\n    switch (n % 360) {\n      case 0:\n      case 180:\n        return push_integer(0);\n      case 30:\n      case 210:\n        push_rational(1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 150:\n      case 330:\n        push_rational(-1, 3);\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return multiply();\n      case 45:\n      case 225:\n        return push_integer(1);\n      case 135:\n      case 315:\n        return push_integer(-1);\n      case 60:\n      case 240:\n        push_integer(3);\n        push_rational(1, 2);\n        return power();\n      case 120:\n      case 300:\n        push_integer(3);\n        push_rational(1, 2);\n        power();\n        return negate();\n      default:\n        push(symbol(TAN));\n        push(p1);\n        return list(2);\n    }\n  };\n\n  //             exp(2 x) - 1\n  //  tanh(x) = --------------\n  //             exp(2 x) + 1\n  Eval_tanh = function() {\n    var d;\n    d = 0.0;\n    push(cadr(p1));\n    Eval();\n    p1 = pop();\n    if (car(p1) === symbol(ARCTANH)) {\n      push(cadr(p1));\n      return;\n    }\n    if (isdouble(p1)) {\n      d = Math.tanh(p1.d);\n      if (Math.abs(d) < 1e-10) {\n        d = 0.0;\n      }\n      push_double(d);\n      return;\n    }\n    if (isZeroAtomOrTensor(p1)) {\n      push(zero);\n      return;\n    }\n    push_symbol(TANH);\n    push(p1);\n    return list(2);\n  };\n\n  Eval_taylor = function() {\n    // 1st arg\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    // 2nd arg\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      guess();\n    } else {\n      push(p2);\n    }\n    // 3rd arg\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(24); // default number of terms\n    } else {\n      push(p2);\n    }\n    // 4th arg\n    p1 = cdr(p1);\n    push(car(p1));\n    Eval();\n    p2 = pop();\n    if (p2 === symbol(NIL)) {\n      push_integer(0); // default expansion point\n    } else {\n      push(p2);\n    }\n    return taylor();\n  };\n\n  //define F p1\n  //define X p2\n  //define N p3\n  //define A p4\n  //define C p5\n  taylor = function() {\n    var i, k, l1, ref2;\n    i = 0;\n    k = 0;\n    save();\n    p4 = pop();\n    p3 = pop();\n    p2 = pop();\n    p1 = pop();\n    push(p3);\n    k = pop_integer();\n    if (isNaN(k)) {\n      push_symbol(TAYLOR);\n      push(p1);\n      push(p2);\n      push(p3);\n      push(p4);\n      list(5);\n      restore();\n      return;\n    }\n    push(p1);\n    push(p2);\n    push(p4);\n    subst();\n    Eval();\n    push_integer(1);\n    p5 = pop();\n    for (i = l1 = 1, ref2 = k; (1 <= ref2 ? l1 <= ref2 : l1 >= ref2); i = 1 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(p2);\n      derivative();\n      p1 = pop();\n      if (isZeroAtomOrTensor(p1)) {\n        break;\n      }\n      push(p5);\n      push(p2);\n      push(p4);\n      subtract();\n      multiply();\n      p5 = pop();\n      push(p1);\n      push(p2);\n      push(p4);\n      subst();\n      Eval();\n      push(p5);\n      multiply();\n      push_integer(i);\n      factorial();\n      divide();\n      add();\n    }\n    return restore();\n  };\n\n  //(docs are generated from top-level comments, keep an eye on the formatting!)\n  /* tensor =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  General description\n  -------------------\n  Tensors are a strange in-between of matrices and \"computer\"\n  rectangular data structures.\n\n  Tensors, unlike matrices, and like rectangular data structures,\n  can have an arbitrary number of dimensions (rank), although a tensor with\n  rank zero is just a scalar.\n\n  Tensors, like matrices and unlike many computer rectangular data structures,\n  must be \"contiguous\" i.e. have no empty spaces within its size, and \"uniform\",\n  i.e. each element must have the same shape and hence the same rank.\n\n  Also tensors have necessarily to make a distinction between row vectors,\n  column vectors (which have a rank of 2) and uni-dimensional vectors (rank 1).\n  They look very similar but they are fundamentally different.\n\n  Tensors are 1-indexed, as per general math notation, and like Fortran,\n  Lua, Mathematica, SASL, MATLAB, Julia, Erlang and APL.\n\n  Tensors with elements that are also tensors get promoted to a higher rank\n  , this is so we can represent and get the rank of a matrix correctly.\n  Example:\n  Start with a tensor of rank 1 with 2 elements (i.e. shape: 2)\n  if you put in both its elements another 2 tensors\n  of rank 1 with 2 elements (i.e. shape: 2)\n  then the result is a tensor of rank 2 with shape 2,2\n  i.e. the dimension of a tensor at all times must be\n  the number of nested tensors in it.\n  Also, all tensors must be \"uniform\" i.e. they must be accessed\n  uniformly, which means that all existing elements of a tensor\n  must be contiguous and have the same shape.\n  Implication of it all is that you can't put arbitrary\n  tensors inside tensors (like you would do to represent block matrices)\n  Rather, all tensors inside tensors must have same shape (and hence, rank)\n\n  Limitations\n  -----------\n  n.a.\n\n  Implementation info\n  -------------------\n  Tensors are implemented...\n\n  */\n  // Called from the \"eval\" module to evaluate tensor elements.\n  // p1 points to the tensor operand.\n  Eval_tensor = function() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    //U **a, **b\n\n    //---------------------------------------------------------------------\n\n    //  create a new tensor for the result\n\n    //---------------------------------------------------------------------\n    check_tensor_dimensions(p1);\n    nelem = p1.tensor.nelem;\n    ndim = p1.tensor.ndim;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n    for (i = l1 = 0, ref2 = ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    //---------------------------------------------------------------------\n\n    //  b = Eval(a)\n\n    //---------------------------------------------------------------------\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    check_tensor_dimensions(p2);\n    for (i = m1 = 0, ref3 = nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      //console.log \"push/pop: pushing element a of \" + i\n      push(a[i]);\n      Eval();\n      //console.log \"push/pop: popping into element b of \" + i\n      b[i] = pop();\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    //---------------------------------------------------------------------\n\n    //  push the result\n\n    //---------------------------------------------------------------------\n    push(p2);\n    return promote_tensor();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Add tensors\n\n  //  Input:    Operands on stack\n\n  //  Output:    Result on stack\n\n  //-----------------------------------------------------------------------------\n  tensor_plus_tensor = function() {\n    var a, b, c, i, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    //U **a, **b, **c\n    save();\n    p2 = pop();\n    p1 = pop();\n    // are the dimension lists equal?\n    ndim = p1.tensor.ndim;\n    if (ndim !== p2.tensor.ndim) {\n      push(symbol(NIL));\n      restore();\n      return;\n    }\n    for (i = l1 = 0, ref2 = ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] !== p2.tensor.dim[i]) {\n        push(symbol(NIL));\n        restore();\n        return;\n      }\n    }\n    // create a new tensor for the result\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = m1 = 0, ref3 = ndim; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    // c = a + b\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n    for (i = n1 = 0, ref4 = nelem; (0 <= ref4 ? n1 < ref4 : n1 > ref4); i = 0 <= ref4 ? ++n1 : --n1) {\n      push(a[i]);\n      push(b[i]);\n      add();\n      c[i] = pop();\n    }\n    // push the result\n    push(p3);\n    return restore();\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  careful not to reorder factors\n\n  //-----------------------------------------------------------------------------\n  tensor_times_scalar = function() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    //U **a, **b\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = l1 = 0, ref2 = ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      multiply();\n      b[i] = pop();\n    }\n    push(p3);\n    return restore();\n  };\n\n  scalar_times_tensor = function() {\n    var a, b, i, l1, m1, ndim, nelem, ref2, ref3;\n    i = 0;\n    ndim = 0;\n    nelem = 0;\n    //U **a, **b\n    save();\n    p2 = pop();\n    p1 = pop();\n    ndim = p2.tensor.ndim;\n    nelem = p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = l1 = 0, ref2 = ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p2.tensor.dim[i];\n    }\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n      push(a[i]);\n      multiply();\n      b[i] = pop();\n    }\n    push(p3);\n    return restore();\n  };\n\n  check_tensor_dimensions = function(p) {\n    if (p.tensor.nelem !== p.tensor.elem.length) {\n      console.log(\"something wrong in tensor dimensions\");\n      debugger;\n    }\n  };\n\n  is_square_matrix = function(p) {\n    if (istensor(p) && p.tensor.ndim === 2 && p.tensor.dim[0] === p.tensor.dim[1]) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  gradient of tensor\n\n  //-----------------------------------------------------------------------------\n  d_tensor_tensor = function() {\n    var a, b, c, i, j, l1, m1, n1, ndim, nelem, ref2, ref3, ref4;\n    i = 0;\n    j = 0;\n    ndim = 0;\n    nelem = 0;\n    //U **a, **b, **c\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    if (ndim + 1 >= MAXDIM) {\n      push_symbol(DERIVATIVE);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    p3 = alloc_tensor(nelem * p2.tensor.nelem);\n    p3.tensor.ndim = ndim + 1;\n    for (i = l1 = 0, ref2 = ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    p3.tensor.dim[ndim] = p2.tensor.dim[0];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n    c = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      for (j = n1 = 0, ref4 = p2.tensor.nelem; (0 <= ref4 ? n1 < ref4 : n1 > ref4); j = 0 <= ref4 ? ++n1 : --n1) {\n        push(a[i]);\n        push(b[j]);\n        derivative();\n        c[i * p2.tensor.nelem + j] = pop();\n      }\n    }\n    return push(p3);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  gradient of scalar\n\n  //-----------------------------------------------------------------------------\n  d_scalar_tensor = function() {\n    var a, b, i, l1, ref2;\n    //U **a, **b\n    p3 = alloc_tensor(p2.tensor.nelem);\n    p3.tensor.ndim = 1;\n    p3.tensor.dim[0] = p2.tensor.dim[0];\n    a = p2.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = l1 = 0, ref2 = p2.tensor.nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1);\n      push(a[i]);\n      derivative();\n      b[i] = pop();\n    }\n    return push(p3);\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Derivative of tensor\n\n  //-----------------------------------------------------------------------------\n  d_tensor_scalar = function() {\n    var a, b, i, l1, m1, ref2, ref3;\n    i = 0;\n    //U **a, **b\n    p3 = alloc_tensor(p1.tensor.nelem);\n    p3.tensor.ndim = p1.tensor.ndim;\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    a = p1.tensor.elem;\n    b = p3.tensor.elem;\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      push(a[i]);\n      push(p2);\n      derivative();\n      b[i] = pop();\n    }\n    return push(p3);\n  };\n\n  compare_tensors = function(p1, p2) {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    if (p1.tensor.ndim < p2.tensor.ndim) {\n      return -1;\n    }\n    if (p1.tensor.ndim > p2.tensor.ndim) {\n      return 1;\n    }\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p1.tensor.dim[i] < p2.tensor.dim[i]) {\n        return -1;\n      }\n      if (p1.tensor.dim[i] > p2.tensor.dim[i]) {\n        return 1;\n      }\n    }\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      if (equal(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        continue;\n      }\n      if (lessp(p1.tensor.elem[i], p2.tensor.elem[i])) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    return 0;\n  };\n\n  //-----------------------------------------------------------------------------\n\n  //  Raise a tensor to a power\n\n  //  Input:    p1  tensor\n\n  //      p2  exponent\n\n  //  Output:    Result on stack\n\n  //-----------------------------------------------------------------------------\n  power_tensor = function() {\n    var i, k, l1, m1, n, ref2, ref3, results;\n    i = 0;\n    k = 0;\n    n = 0;\n    // first and last dims must be equal\n    k = p1.tensor.ndim - 1;\n    if (p1.tensor.dim[0] !== p1.tensor.dim[k]) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    push(p2);\n    n = pop_integer();\n    if (isNaN(n)) {\n      push_symbol(POWER);\n      push(p1);\n      push(p2);\n      list(3);\n      return;\n    }\n    if (n === 0) {\n      if (p1.tensor.ndim !== 2) {\n        stop(\"power(tensor,0) with tensor rank not equal to 2\");\n      }\n      n = p1.tensor.dim[0];\n      p1 = alloc_tensor(n * n);\n      p1.tensor.ndim = 2;\n      p1.tensor.dim[0] = n;\n      p1.tensor.dim[1] = n;\n      for (i = l1 = 0, ref2 = n; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        p1.tensor.elem[n * i + i] = one;\n      }\n      check_tensor_dimensions(p1);\n      push(p1);\n      return;\n    }\n    if (n < 0) {\n      n = -n;\n      push(p1);\n      inv();\n      p1 = pop();\n    }\n    push(p1);\n    results = [];\n    for (i = m1 = 1, ref3 = n; (1 <= ref3 ? m1 < ref3 : m1 > ref3); i = 1 <= ref3 ? ++m1 : --m1) {\n      push(p1);\n      inner();\n      if (isZeroAtomOrTensor(stack[tos - 1])) {\n        break;\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  copy_tensor = function() {\n    var i, l1, m1, ref2, ref3;\n    i = 0;\n    save();\n    p1 = pop();\n    p2 = alloc_tensor(p1.tensor.nelem);\n    p2.tensor.ndim = p1.tensor.ndim;\n    for (i = l1 = 0, ref2 = p1.tensor.ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (i = m1 = 0, ref3 = p1.tensor.nelem; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      p2.tensor.elem[i] = p1.tensor.elem[i];\n    }\n    check_tensor_dimensions(p1);\n    check_tensor_dimensions(p2);\n    push(p2);\n    return restore();\n  };\n\n  // Tensors with elements that are also tensors get promoted to a higher rank.\n  promote_tensor = function() {\n    var i, j, k, l1, m1, n1, ndim, nelem, o1, q1, ref2, ref3, ref4, ref5, ref6;\n    i = 0;\n    j = 0;\n    k = 0;\n    nelem = 0;\n    ndim = 0;\n    save();\n    p1 = pop();\n    if (!istensor(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    p2 = p1.tensor.elem[0];\n    for (i = l1 = 1, ref2 = p1.tensor.nelem; (1 <= ref2 ? l1 < ref2 : l1 > ref2); i = 1 <= ref2 ? ++l1 : --l1) {\n      if (!compatible(p2, p1.tensor.elem[i])) {\n        stop(\"Cannot promote tensor due to inconsistent tensor components.\");\n      }\n    }\n    if (!istensor(p2)) {\n      push(p1);\n      restore();\n      return;\n    }\n    ndim = p1.tensor.ndim + p2.tensor.ndim;\n    if (ndim > MAXDIM) {\n      stop(\"tensor rank > \" + MAXDIM);\n    }\n    nelem = p1.tensor.nelem * p2.tensor.nelem;\n    p3 = alloc_tensor(nelem);\n    p3.tensor.ndim = ndim;\n    for (i = m1 = 0, ref3 = p1.tensor.ndim; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      p3.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    for (j = n1 = 0, ref4 = p2.tensor.ndim; (0 <= ref4 ? n1 < ref4 : n1 > ref4); j = 0 <= ref4 ? ++n1 : --n1) {\n      p3.tensor.dim[i + j] = p2.tensor.dim[j];\n    }\n    k = 0;\n    for (i = o1 = 0, ref5 = p1.tensor.nelem; (0 <= ref5 ? o1 < ref5 : o1 > ref5); i = 0 <= ref5 ? ++o1 : --o1) {\n      p2 = p1.tensor.elem[i];\n      for (j = q1 = 0, ref6 = p2.tensor.nelem; (0 <= ref6 ? q1 < ref6 : q1 > ref6); j = 0 <= ref6 ? ++q1 : --q1) {\n        p3.tensor.elem[k++] = p2.tensor.elem[j];\n      }\n    }\n    check_tensor_dimensions(p2);\n    check_tensor_dimensions(p3);\n    push(p3);\n    return restore();\n  };\n\n  compatible = function(p, q) {\n    var i, l1, ref2;\n    if (!istensor(p) && !istensor(q)) {\n      return 1;\n    }\n    if (!istensor(p) || !istensor(q)) {\n      return 0;\n    }\n    if (p.tensor.ndim !== q.tensor.ndim) {\n      return 0;\n    }\n    for (i = l1 = 0, ref2 = p.tensor.ndim; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      if (p.tensor.dim[i] !== q.tensor.dim[i]) {\n        return 0;\n      }\n    }\n    return 1;\n  };\n\n  // If the number of args is odd then the last arg is the default result.\n  // Works like a switch statement. Could also be used for piecewise\n  // functions? TODO should probably be called \"switch\"?\n  Eval_test = function() {\n    var checkResult, orig;\n    orig = p1;\n    p1 = cdr(p1);\n    while (iscons(p1)) {\n      // odd number of parameters means that the\n      // last argument becomes the default case\n      // i.e. the one without a test.\n      if (cdr(p1) === symbol(NIL)) {\n        push(car(p1));\n        Eval();\n        return;\n      }\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(p1));\n      if (checkResult == null) {\n        // we couldn't determine the result\n        // of a test. This means we can't conclude\n        // anything about the result of the\n        // overall test, so we must bail\n        // with the unevalled test\n        push(orig);\n        return;\n      } else if (checkResult) {\n        // test succesful, we found out output\n        push(cadr(p1));\n        Eval();\n        return;\n      } else {\n        // test unsuccessful, continue to the\n        // next pair of test,value\n        p1 = cddr(p1);\n      }\n    }\n    // no test matched and there was no\n    // catch-all case, so we return zero.\n    return push_integer(0);\n  };\n\n  // we test A==B by first subtracting and checking if we symbolically\n  // get zero. If not, we evaluate to float and check if we get a zero.\n  // If we get another NUMBER then we know they are different.\n  // If we get something else, then we don't know and we return the\n  // unaveluated test, which is the same as saying \"maybe\".\n  Eval_testeq = function() {\n    var checkResult, orig, subtractionResult;\n    // first try without simplifyng both sides\n    orig = p1;\n    push(cadr(p1));\n    Eval();\n    push(caddr(p1));\n    Eval();\n    subtract();\n    subtractionResult = pop();\n    // OK so we are doing something tricky here\n    // we are using isZeroLikeOrNonZeroLikeOrUndetermined to check if the result\n    // is zero or not zero or unknown.\n    // isZeroLikeOrNonZeroLikeOrUndetermined has some routines\n    // to determine the zero-ness/non-zero-ness or\n    // undeterminate-ness of things so we use\n    // that here and down below.\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if ((checkResult != null) && !checkResult) {\n      push_integer(1);\n      return;\n    }\n    // we didn't get a simple numeric result but\n    // let's try again after doing\n    // a simplification on both sides\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    subtractionResult = pop();\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(subtractionResult);\n    if (checkResult) {\n      push_integer(0);\n      return;\n    } else if ((checkResult != null) && !checkResult) {\n      push_integer(1);\n      return;\n    }\n    // if we didn't get to a number then we\n    // don't know whether the quantities are\n    // different so do nothing\n    return push(orig);\n  };\n\n  // Relational operators expect a numeric result for operand difference.\n  Eval_testge = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison >= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testgt = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison > 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testle = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison <= 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  Eval_testlt = function() {\n    var comparison, orig;\n    orig = p1;\n    comparison = cmp_args();\n    if (comparison == null) {\n      push(orig);\n      return;\n    }\n    if (comparison < 0) {\n      return push_integer(1);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  // not definition\n  Eval_not = function() {\n    var checkResult, wholeAndExpression;\n    wholeAndExpression = p1;\n    checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1));\n    if (checkResult == null) {\n      // inconclusive test on predicate\n      return push(wholeAndExpression);\n    } else if (checkResult) {\n      // true -> false\n      return push_integer(0);\n    } else {\n      // false -> true\n      return push_integer(1);\n    }\n  };\n\n  /* and =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  a,b,...\n\n  General description\n  -------------------\n  Logical-and of predicate expressions.\n\n  */\n  // and definition\n  Eval_and = function() {\n    var andPredicates, checkResult, somePredicateUnknown, wholeAndExpression;\n    wholeAndExpression = p1;\n    andPredicates = cdr(wholeAndExpression);\n    somePredicateUnknown = false;\n    while (iscons(andPredicates)) {\n      // eval each predicate\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(andPredicates));\n      if (checkResult == null) {\n        // here we have stuff that is not reconducible to any\n        // numeric value (or tensor with numeric values) e.g.\n        // 'a+b', so it just means that we just don't know the\n        // truth value of this particular predicate.\n        // We'll track the fact that we found an unknown\n        // predicate and we continue with the other predicates.\n        // (note that in case some subsequent predicate will be false,\n        // it won't matter that we found some unknowns and\n        // the whole test will be immediately zero).\n        somePredicateUnknown = true;\n        andPredicates = cdr(andPredicates);\n      } else if (checkResult) {\n        // found a true, move on to the next predicate\n        andPredicates = cdr(andPredicates);\n      } else if (!checkResult) {\n        // found a false, enough to falsify everything and return\n        push_integer(0);\n        return;\n      }\n    }\n    // We checked all the predicates and none of them\n    // was false. So they were all either true or unknown.\n    // Now, if even just one was unknown, we'll have to call this\n    // test as inconclusive and return the whole test expression.\n    // If all the predicates were known, then we can conclude\n    // that the test returns true.\n    if (somePredicateUnknown) {\n      return push(wholeAndExpression);\n    } else {\n      return push_integer(1);\n    }\n  };\n\n  // or definition\n  Eval_or = function() {\n    var checkResult, orPredicates, somePredicateUnknown, wholeOrExpression;\n    wholeOrExpression = p1;\n    orPredicates = cdr(wholeOrExpression);\n    somePredicateUnknown = false;\n    while (iscons(orPredicates)) {\n      // eval each predicate\n      checkResult = isZeroLikeOrNonZeroLikeOrUndetermined(car(orPredicates));\n      if (checkResult == null) {\n        // here we have stuff that is not reconducible to any\n        // numeric value (or tensor with numeric values) e.g.\n        // 'a+b', so it just means that we just don't know the\n        // truth value of this particular predicate.\n        // We'll track the fact that we found an unknown\n        // predicate and we continue with the other predicates.\n        // (note that in case some subsequent predicate will be false,\n        // it won't matter that we found some unknowns and\n        // the whole test will be immediately zero).\n        somePredicateUnknown = true;\n        orPredicates = cdr(orPredicates);\n      } else if (checkResult) {\n        // found a true, enough to return true\n        push_integer(1);\n        return;\n      } else if (!checkResult) {\n        // found a false, move on to the next predicate\n        orPredicates = cdr(orPredicates);\n      }\n    }\n    // We checked all the predicates and none of them\n    // was true. So they were all either false or unknown.\n    // Now, if even just one was unknown, we'll have to call this\n    // test as inconclusive and return the whole test expression.\n    // If all the predicates were known, then we can conclude\n    // that the test returns false.\n    if (somePredicateUnknown) {\n      return push(wholeOrExpression);\n    } else {\n      return push_integer(0);\n    }\n  };\n\n  // use subtract for cases like A < A + 1\n\n  // TODO you could be smarter here and\n  // simplify both sides only in the case\n  // of \"relational operator: cannot determine...\"\n  // a bit like we do in Eval_testeq\n  cmp_args = function() {\n    var t;\n    t = 0;\n    push(cadr(p1));\n    Eval();\n    simplify();\n    push(caddr(p1));\n    Eval();\n    simplify();\n    subtract();\n    p1 = pop();\n    // try floating point if necessary\n    if (p1.k !== NUM && p1.k !== DOUBLE) {\n      push(p1);\n      yyfloat();\n      Eval();\n      p1 = pop();\n    }\n    //console.log \"comparison: \" + p1.toString()\n    if (isZeroAtomOrTensor(p1)) {\n      //console.log \"comparison isZero \"\n      return 0;\n    }\n    switch (p1.k) {\n      case NUM:\n        if (MSIGN(p1.q.a) === -1) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n        break;\n      case DOUBLE:\n        //console.log \"comparison p1.d: \" + p1.d\n        if (p1.d < 0.0) {\n          t = -1;\n        } else {\n          t = 1;\n        }\n        break;\n      default:\n        //console.log \"comparison is null\"\n        t = null;\n    }\n    return t;\n  };\n\n  /*\n  Transform an expression using a pattern. The\n  pattern can come from the integrals table or\n  the user-defined patterns.\n\n  The expression and free variable are on the stack.\n\n  The argument s is a null terminated list of transform rules.\n\n  For example, see the itab (integrals table)\n\n  Internally, the following symbols are used:\n\n    F  input expression\n\n    X  free variable, i.e. F of X\n\n    A  template expression\n\n    B  result expression\n\n    C  list of conditional expressions\n\n  Puts the final expression on top of stack\n  (whether it's transformed or not) and returns\n  true is successful, false if not.\n\n  */\n  // p1 and p2 are tmps\n\n  //define F p3\n  //define X p4\n  //define A p5\n  //define B p6\n  //define C p7\n  transform = function(s, generalTransform) {\n    var bookmarkTosToPrintDecomps, eachTransformEntry, i, l1, len, len1, m1, n1, numberOfDecomps, ref2, restTerm, secondTerm, success, theTransform, transform_h, transformationSuccessful, transformedTerms;\n    transform_h = 0;\n    save();\n    p1 = null;\n    p4 = pop(); // X i.e. free variable\n    p3 = pop(); // F i.e. input expression\n    if (DEBUG) {\n      console.log(\"         !!!!!!!!!   transform on: \" + p3);\n    }\n    saveMetaBindings();\n    set_binding(symbol(METAX), p4);\n    // put constants in F(X) on the stack\n    transform_h = tos;\n    push_integer(1);\n    push(p3);\n    push(p4);\n    polyform();\n    push(p4);\n    bookmarkTosToPrintDecomps = tos - 2;\n    decomp(generalTransform);\n    numberOfDecomps = tos - bookmarkTosToPrintDecomps;\n    if (DEBUG) {\n      console.log(\"  \" + numberOfDecomps + \" decomposed elements ====== \");\n      for (i = l1 = 0, ref2 = numberOfDecomps; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        console.log(\"  decomposition element \" + i + \": \" + stack[tos - 1 - i]);\n      }\n    }\n    transformationSuccessful = false;\n    if (generalTransform) {\n      if (!isNumericAtom(p3)) {\n        theTransform = s;\n        if (DEBUG) {\n          console.log(\"applying transform: \" + theTransform);\n        }\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + theTransform);\n        }\n        push(theTransform);\n        // replacements of meta variables. Note that we don't\n        // use scan_meta because the pattern is not a string\n        // that we have to parse, it's a tree already.\n        // replace a_ with METAA in the passed transformation\n        push(symbol(SYMBOL_A_UNDERSCORE));\n        push(symbol(METAA));\n        subst();\n        // replace b_ with METAB in the passed transformation\n        push(symbol(SYMBOL_B_UNDERSCORE));\n        push(symbol(METAB));\n        subst();\n        // replace x_ with METAX in the passed transformation\n        push(symbol(SYMBOL_X_UNDERSCORE));\n        push(symbol(METAX));\n        subst();\n        p1 = pop();\n        p5 = car(p1);\n        if (DEBUG) {\n          console.log(\"template expression: \" + p5);\n        }\n        p6 = cadr(p1);\n        p7 = cddr(p1);\n        /*\n        p5 = p1.tensor.elem[0]\n        p6 = p1.tensor.elem[1]\n        for i in [2..(p1.tensor.elem.length-1)]\n          push p1.tensor.elem[i]\n        list(p1.tensor.elem.length - 2)\n        p7 = pop()\n        */\n        if (f_equals_a(transform_h, generalTransform)) {\n          // successful transformation,\n          // transformed result is in p6\n          transformationSuccessful = true;\n        } else {\n          // the match failed but perhaps we can match\n          // something lower down in the tree, so\n          // let's recurse the tree\n          if (DEBUG) {\n            console.log(\"p3 at this point: \" + p3);\n          }\n          transformedTerms = [];\n          if (DEBUG) {\n            console.log(\"car(p3): \" + car(p3));\n          }\n          restTerm = p3;\n          if (iscons(restTerm)) {\n            transformedTerms.push(car(p3));\n            restTerm = cdr(p3);\n          }\n          while (iscons(restTerm)) {\n            secondTerm = car(restTerm);\n            restTerm = cdr(restTerm);\n            if (DEBUG) {\n              console.log(\"tos before recursive transform: \" + tos);\n            }\n            push(secondTerm);\n            push_symbol(NIL);\n            if (DEBUG) {\n              console.log(\"testing: \" + secondTerm);\n            }\n            //if (secondTerm+\"\") == \"eig(A x,transpose(A x))()\"\n            //  debugger\n            if (DEBUG) {\n              console.log(\"about to try to simplify other term: \" + secondTerm);\n            }\n            success = transform(s, generalTransform);\n            transformationSuccessful = transformationSuccessful || success;\n            transformedTerms.push(pop());\n            if (DEBUG) {\n              console.log(\"tried to simplify other term: \" + secondTerm + \" ...successful?: \" + success + \" ...transformed: \" + transformedTerms[transformedTerms.length - 1]);\n            }\n          }\n          // recreate the tree we were passed,\n          // but with all the terms being transformed\n          if (transformedTerms.length !== 0) {\n            for (m1 = 0, len = transformedTerms.length; m1 < len; m1++) {\n              i = transformedTerms[m1];\n              push(i);\n            }\n            list(transformedTerms.length);\n            p6 = pop(); // \"integrals\" mode\n          }\n        }\n      }\n    } else {\n      for (n1 = 0, len1 = s.length; n1 < len1; n1++) {\n        eachTransformEntry = s[n1];\n        if (DEBUG) {\n          console.log(\"scanning table entry \" + eachTransformEntry);\n          if ((eachTransformEntry + \"\").indexOf(\"f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))\") !== -1) {\n            debugger;\n          }\n        }\n        if (eachTransformEntry) {\n          scan_meta(eachTransformEntry);\n          p1 = pop();\n          p5 = cadr(p1);\n          p6 = caddr(p1);\n          p7 = cdddr(p1);\n          /*\n          p5 = p1.tensor.elem[0]\n          p6 = p1.tensor.elem[1]\n          for i in [2..(p1.tensor.elem.length-1)]\n            push p1.tensor.elem[i]\n          list(p1.tensor.elem.length - 2)\n          p7 = pop()\n          */\n          if (f_equals_a(transform_h, generalTransform)) {\n            // there is a successful transformation,\n            // transformed result is in p6\n            transformationSuccessful = true;\n            break;\n          }\n        }\n      }\n    }\n    moveTos(transform_h);\n    if (transformationSuccessful) {\n      //console.log \"transformation successful\"\n      // a transformation was successful\n      push(p6);\n      Eval();\n      p1 = pop();\n      //console.log \"...into: \" + p1\n      transformationSuccessful = true;\n    } else {\n      // transformations failed\n      if (generalTransform) {\n        // result = original expression\n        p1 = p3;\n      } else {\n        p1 = symbol(NIL);\n      }\n    }\n    restoreMetaBindings();\n    push(p1);\n    restore();\n    return transformationSuccessful;\n  };\n\n  saveMetaBindings = function() {\n    push(get_binding(symbol(METAA)));\n    push(get_binding(symbol(METAB)));\n    return push(get_binding(symbol(METAX)));\n  };\n\n  restoreMetaBindings = function() {\n    set_binding(symbol(METAX), pop());\n    set_binding(symbol(METAB), pop());\n    return set_binding(symbol(METAA), pop());\n  };\n\n  // search for a METAA and METAB such that F = A\n  f_equals_a = function(h, generalTransform) {\n    var fea_i, fea_j, l1, m1, originalexpanding, ref2, ref3, ref4, ref5;\n    fea_i = 0;\n    fea_j = 0;\n    for (fea_i = l1 = ref2 = h, ref3 = tos; (ref2 <= ref3 ? l1 < ref3 : l1 > ref3); fea_i = ref2 <= ref3 ? ++l1 : --l1) {\n      set_binding(symbol(METAA), stack[fea_i]);\n      if (DEBUG) {\n        console.log(\"  binding METAA to \" + get_binding(symbol(METAA)));\n      }\n      for (fea_j = m1 = ref4 = h, ref5 = tos; (ref4 <= ref5 ? m1 < ref5 : m1 > ref5); fea_j = ref4 <= ref5 ? ++m1 : --m1) {\n        set_binding(symbol(METAB), stack[fea_j]);\n        if (DEBUG) {\n          console.log(\"  binding METAB to \" + get_binding(symbol(METAB)));\n        }\n        // now test all the conditions (it's an and between them)\n        p1 = p7;\n        while (iscons(p1)) {\n          push(car(p1));\n          Eval();\n          p2 = pop();\n          if (isZeroAtomOrTensor(p2)) {\n            break;\n          }\n          p1 = cdr(p1);\n        }\n        if (iscons(p1)) {\n          // conditions are not met,\n          // skip to the next binding of metas\n          continue;\n        }\n        push(p3);\n        if (DEBUG) {\n          console.log(\"about to evaluate template expression: \" + p5 + \" binding METAA to \" + get_binding(symbol(METAA)) + \" and binding METAB to \" + get_binding(symbol(METAB)) + \" and binding METAX to \" + get_binding(symbol(METAX)));\n        }\n        push(p5);\n        if (generalTransform) {\n          originalexpanding = expanding;\n          expanding = false;\n        }\n        Eval();\n        if (generalTransform) {\n          expanding = originalexpanding;\n        }\n        if (DEBUG) {\n          console.log(\"  comparing \" + stack[tos - 1] + \" to: \" + stack[tos - 2]);\n        }\n        subtract();\n        p1 = pop();\n        if (isZeroAtomOrTensor(p1)) {\n          if (DEBUG) {\n            console.log(\"binding METAA to \" + get_binding(symbol(METAA)));\n            console.log(\"binding METAB to \" + get_binding(symbol(METAB)));\n            console.log(\"binding METAX to \" + get_binding(symbol(METAX)));\n            console.log(\"comparing \" + p3 + \" to: \" + p5);\n          }\n          return 1; // yes\n        }\n      }\n    }\n    return 0; // no\n  };\n\n  // Transpose tensor indices\n  Eval_transpose = function() {\n    push(cadr(p1));\n    Eval();\n    // add default params if they\n    // have not been passed\n    if (cddr(p1) === symbol(NIL)) {\n      push_integer(1);\n      push_integer(2);\n    } else {\n      push(caddr(p1));\n      Eval();\n      push(cadddr(p1));\n      Eval();\n    }\n    return transpose();\n  };\n\n  transpose = function() {\n    var a, accumulator, ai, an, b, eachEntry, i, innerTranspSwitch1, innerTranspSwitch2, j, k, l, l1, m, m1, n1, ndim, nelem, o1, q1, r1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, s1, t;\n    i = 0;\n    j = 0;\n    k = 0;\n    l = 0;\n    m = 0;\n    ndim = 0;\n    nelem = 0;\n    t = 0;\n    ai = [];\n    an = [];\n    for (i = l1 = 0, ref2 = MAXDIM; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      ai[i] = 0;\n      an[i] = 0;\n    }\n    //U **a, **b\n    save();\n    // by default p3 is 2 and p2 is 1\n    p3 = pop(); // index to be transposed\n    p2 = pop(); // other index to be transposed\n    p1 = pop(); // what needs to be transposed\n    \n    // a transposition just goes away when\n    // applied to a scalar\n    if (isNumericAtom(p1)) {\n      push(p1);\n      restore();\n      return;\n    }\n    // transposition goes away for identity matrix\n    if ((isplusone(p2) && isplustwo(p3)) || (isplusone(p3) && isplustwo(p2))) {\n      if (isidentitymatrix(p1)) {\n        push(p1);\n        restore();\n        return;\n      }\n    }\n    // a transposition just goes away when\n    // applied to another transposition with\n    // the same columns to be switched\n    if (istranspose(p1)) {\n      innerTranspSwitch1 = car(cdr(cdr(p1)));\n      innerTranspSwitch2 = car(cdr(cdr(cdr(p1))));\n      if ((equal(innerTranspSwitch1, p3) && equal(innerTranspSwitch2, p2)) || (equal(innerTranspSwitch2, p3) && equal(innerTranspSwitch1, p2)) || ((equal(innerTranspSwitch1, symbol(NIL)) && equal(innerTranspSwitch2, symbol(NIL))) && ((isplusone(p3) && isplustwo(p2)) || (isplusone(p2) && isplustwo(p3))))) {\n        push(car(cdr(p1)));\n        restore();\n        return;\n      }\n    }\n    // if operand is a sum then distribute\n    // (if we are in expanding mode)\n    if (expanding && isadd(p1)) {\n      p1 = cdr(p1);\n      push(zero);\n      while (iscons(p1)) {\n        push(car(p1));\n        // add the dimensions to switch but only if\n        // they are not the default ones.\n        push(p2);\n        push(p3);\n        transpose();\n        add();\n        p1 = cdr(p1);\n      }\n      restore();\n      return;\n    }\n    // if operand is a multiplication then distribute\n    // (if we are in expanding mode)\n    if (expanding && ismultiply(p1)) {\n      p1 = cdr(p1);\n      push(one);\n      while (iscons(p1)) {\n        push(car(p1));\n        // add the dimensions to switch but only if\n        // they are not the default ones.\n        push(p2);\n        push(p3);\n        transpose();\n        multiply();\n        p1 = cdr(p1);\n      }\n      restore();\n      return;\n    }\n    // distribute the transpose of a dot\n    // if in expanding mode\n    // note that the distribution happens\n    // in reverse as per tranpose rules.\n    // The dot operator is not\n    // commutative, so, it matters.\n    if (expanding && isinnerordot(p1)) {\n      p1 = cdr(p1);\n      accumulator = [];\n      while (iscons(p1)) {\n        accumulator.push([car(p1), p2, p3]);\n        p1 = cdr(p1);\n      }\n      for (eachEntry = m1 = ref3 = accumulator.length - 1; (ref3 <= 0 ? m1 <= 0 : m1 >= 0); eachEntry = ref3 <= 0 ? ++m1 : --m1) {\n        push(accumulator[eachEntry][0]);\n        push(accumulator[eachEntry][1]);\n        push(accumulator[eachEntry][2]);\n        transpose();\n        if (eachEntry !== accumulator.length - 1) {\n          inner();\n        }\n      }\n      restore();\n      return;\n    }\n    if (!istensor(p1)) {\n      if (!isZeroAtomOrTensor(p1)) {\n        //stop(\"transpose: tensor expected, 1st arg is not a tensor\")\n        push_symbol(TRANSPOSE);\n        push(p1);\n        if ((!isplusone(p2) || !isplustwo(p3)) && (!isplusone(p3) || !isplustwo(p2))) {\n          push(p2);\n          push(p3);\n          list(4);\n        } else {\n          list(2);\n        }\n        restore();\n        return;\n      }\n      push(zero);\n      restore();\n      return;\n    }\n    ndim = p1.tensor.ndim;\n    nelem = p1.tensor.nelem;\n    // is it a vector?\n    // so here it's something curious - note how vectors are\n    // not really special two-dimensional matrices, but rather\n    // 1-dimension objects (like tensors can be). So since\n    // they have one dimension, transposition has no effect.\n    // (as opposed as if they were special two-dimensional\n    // matrices)\n    // see also Ran Pan, Tensor Transpose and Its Properties. CoRR abs/1411.1503 (2014)\n    if (ndim === 1) {\n      push(p1);\n      restore();\n      return;\n    }\n    push(p2);\n    l = pop_integer();\n    push(p3);\n    m = pop_integer();\n    if (l < 1 || l > ndim || m < 1 || m > ndim) {\n      stop(\"transpose: index out of range\");\n    }\n    l--;\n    m--;\n    p2 = alloc_tensor(nelem);\n    p2.tensor.ndim = ndim;\n    for (i = n1 = 0, ref4 = ndim; (0 <= ref4 ? n1 < ref4 : n1 > ref4); i = 0 <= ref4 ? ++n1 : --n1) {\n      p2.tensor.dim[i] = p1.tensor.dim[i];\n    }\n    p2.tensor.dim[l] = p1.tensor.dim[m];\n    p2.tensor.dim[m] = p1.tensor.dim[l];\n    a = p1.tensor.elem;\n    b = p2.tensor.elem;\n// init tensor index\n    for (i = o1 = 0, ref5 = ndim; (0 <= ref5 ? o1 < ref5 : o1 > ref5); i = 0 <= ref5 ? ++o1 : --o1) {\n      ai[i] = 0;\n      an[i] = p1.tensor.dim[i];\n    }\n// copy components from a to b\n    for (i = q1 = 0, ref6 = nelem; (0 <= ref6 ? q1 < ref6 : q1 > ref6); i = 0 <= ref6 ? ++q1 : --q1) {\n      // swap indices l and m\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      k = 0;\n      for (j = r1 = 0, ref7 = ndim; (0 <= ref7 ? r1 < ref7 : r1 > ref7); j = 0 <= ref7 ? ++r1 : --r1) {\n        k = (k * an[j]) + ai[j];\n      }\n      // swap indices back\n      t = ai[l];\n      ai[l] = ai[m];\n      ai[m] = t;\n      t = an[l];\n      an[l] = an[m];\n      an[m] = t;\n      b[k] = a[i];\n// increment tensor index\n\n      // Suppose the tensor dimensions are 2 and 3.\n// Then the tensor index ai increments as follows:\n// 00 -> 01\n// 01 -> 02\n// 02 -> 10\n// 10 -> 11\n// 11 -> 12\n// 12 -> 00\n      for (j = s1 = ref8 = ndim - 1; (ref8 <= 0 ? s1 <= 0 : s1 >= 0); j = ref8 <= 0 ? ++s1 : --s1) {\n        if (++ai[j] < an[j]) {\n          break;\n        }\n        ai[j] = 0;\n      }\n    }\n    push(p2);\n    return restore();\n  };\n\n  // Evaluate a user defined function\n\n  //define F p3 # F is the function body\n  //define A p4 # A is the formal argument list\n  //define B p5 # B is the calling argument list\n  //define S p6 # S is the argument substitution list\n\n  // we got here because there was a function invocation and\n  // it's not been parsed (and consequently tagged) as any\n  // system function.\n  // So we are dealing with another function.\n  // The function could be actually defined, or not yet,\n  // so we'll deal with both cases.\n  /* d =====================================================================\n\n  Tags\n  ----\n  scripting, JS, internal, treenode, general concept\n\n  Parameters\n  ----------\n  f,x\n\n  General description\n  -------------------\n  Returns the partial derivative of f with respect to x. x can be a vector e.g. [x,y].\n\n  */\n  Eval_user_function = function() {\n    var bodyAndFormalArguments, h;\n    // Use \"derivative\" instead of \"d\" if there is no user function \"d\"\n    if (DEBUG) {\n      console.log(\"Eval_user_function evaluating: \" + car(p1));\n    }\n    if (car(p1) === symbol(SYMBOL_D) && get_binding(symbol(SYMBOL_D)) === symbol(SYMBOL_D)) {\n      Eval_derivative();\n      return;\n    }\n    // normally car(p1) is a symbol with the function name\n    // but it could be something that has to be\n    // evaluated to get to the function definition instead\n    // (e.g. the function is an element of an array)\n    // so we do an eval to sort it all out. \n    push(car(p1));\n    Eval();\n    // we expect to find either the body and\n    // formula arguments, OR, if the function\n    // has not been defined yet, then the\n    // function will just contain its own name, as\n    // all undefined variables do.\n    bodyAndFormalArguments = pop();\n    if (isNumericAtom(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found multiplication instead. Use '*' symbol explicitly for multiplication.\");\n    } else if (istensor(bodyAndFormalArguments)) {\n      stop(\"expected function invocation, found tensor product instead. Use 'dot/inner' explicitly.\");\n    } else if (isstr(bodyAndFormalArguments)) {\n      stop(\"expected function, found string instead.\");\n    }\n    p3 = car(cdr(bodyAndFormalArguments)); // p3 is function body F\n    // p4 is the formal argument list\n    // that is also contained here in the FUNCTION node \n    p4 = car(cdr(cdr(bodyAndFormalArguments)));\n    p5 = cdr(p1);\n    // next check is whether evaluation did nothing, so the function is undefined\n    if ((car(bodyAndFormalArguments) !== symbol(FUNCTION)) || (bodyAndFormalArguments === car(p1))) { // p3 is F\n      // leave everything as it was and return\n      h = tos;\n      push(bodyAndFormalArguments);\n      p1 = p5;\n      while (iscons(p1)) {\n        push(car(p1));\n        Eval();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      return;\n    }\n    // Create the argument substitution list p6(S)\n    p1 = p4;\n    p2 = p5;\n    h = tos;\n    while (iscons(p1) && iscons(p2)) {\n      push(car(p1));\n      push(car(p2));\n      // why explicitly Eval the parameters when\n      // the body of the function is\n      // evalled anyways? Commenting it out. All tests pass...\n      //Eval()\n      p1 = cdr(p1);\n      p2 = cdr(p2);\n    }\n    list(tos - h);\n    p6 = pop();\n    push(p3);\n    if (iscons(p6)) { // p6 is S\n      push(p6);\n      rewrite_args();\n    }\n    //console.log \"rewritten body: \" + stack[tos-1]\n    return Eval();\n  };\n\n  // Rewrite by expanding symbols that contain args\n  rewrite_args = function() {\n    var h, n;\n    n = 0;\n    save();\n    // subst. list which is a list\n    // where each consecutive pair\n    // is what needs to be substituted and with what\n    p2 = pop();\n    p1 = pop();\n    if (istensor(p1)) {\n      n = rewrite_args_tensor();\n      restore();\n      return n;\n    }\n    if (iscons(p1)) {\n      h = tos;\n      if (car(p1) === car(p2)) {\n        // rewrite a function in\n        // the body with the one\n        // passed from the paramaters\n        push_symbol(EVAL);\n        push(car(cdr(p2)));\n        list(2);\n      } else {\n        // if there is no match\n        // then no substitution necessary\n        push(car(p1));\n      }\n      // continue recursively to\n      // rewrite the rest of the body\n      p1 = cdr(p1);\n      while (iscons(p1)) {\n        push(car(p1));\n        push(p2);\n        n += rewrite_args();\n        p1 = cdr(p1);\n      }\n      list(tos - h);\n      restore();\n      return n;\n    }\n    if (!issymbol(p1)) {\n      push(p1);\n      restore();\n      return 0;\n    }\n    // Here we are in a symbol case\n    // so we need to substitute\n\n    // Check if there is a direct match\n    // of symbols right away\n    p3 = p2;\n    while (iscons(p3)) {\n      if (p1 === car(p3)) {\n        push(cadr(p3));\n        restore();\n        return 1;\n      }\n      p3 = cddr(p3);\n    }\n    // Get the symbol's content, if _that_\n    // matches then do the substitution\n    p3 = get_binding(p1);\n    push(p3);\n    if (p1 !== p3) {\n      push(p2);\n      n = rewrite_args();\n      if (n === 0) {\n        pop();\n        push(p1); // restore if not rewritten with arg\n      }\n    }\n    restore();\n    return n;\n  };\n\n  rewrite_args_tensor = function() {\n    var i, l1, n, ref2;\n    n = 0;\n    i = 0;\n    push(p1);\n    copy_tensor();\n    p1 = pop();\n    for (i = l1 = 0, ref2 = p1.tensor.nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      push(p1.tensor.elem[i]);\n      push(p2);\n      n += rewrite_args();\n      p1.tensor.elem[i] = pop();\n    }\n    check_tensor_dimensions(p1);\n    push(p1);\n    return n;\n  };\n\n  Eval_zero = function() {\n    var i, k, l1, m, m1, n, ref2, ref3;\n    i = 0;\n    k = [];\n    m = 0;\n    n = 0;\n    for (i = l1 = 0, ref2 = MAXDIM; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      k[i] = 0;\n    }\n    m = 1;\n    n = 0;\n    p2 = cdr(p1);\n    while (iscons(p2)) {\n      push(car(p2));\n      Eval();\n      i = pop_integer();\n      if (i < 1 || isNaN(i)) {\n        // if the input is nonsensical\n        // just return 0\n        push(zero);\n        return;\n      }\n      m *= i;\n      k[n++] = i;\n      p2 = cdr(p2);\n    }\n    if (n === 0) {\n      push(zero);\n      return;\n    }\n    p1 = alloc_tensor(m);\n    p1.tensor.ndim = n;\n    for (i = m1 = 0, ref3 = n; (0 <= ref3 ? m1 < ref3 : m1 > ref3); i = 0 <= ref3 ? ++m1 : --m1) {\n      p1.tensor.dim[i] = k[i];\n    }\n    return push(p1);\n  };\n\n  allocatedId = 0;\n\n  alloc_tensor = function(nelem) {\n    var i, l1, p, ref2;\n    i = 0;\n    p = new U();\n    p.k = TENSOR;\n    p.tensor = new tensor();\n    p.tensor.nelem = nelem;\n    for (i = l1 = 0, ref2 = nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      p.tensor.elem[i] = zero;\n    }\n    p.tensor.allocatedId = allocatedId;\n    //if allocatedId == 9\n    //  debugger\n    allocatedId++;\n    check_tensor_dimensions(p);\n    return p;\n  };\n\n  /*\n  // garbage collector\n\n  void\n  gc(void)\n  {\n    int i, j\n    U *p\n\n    // tag everything\n\n    for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++)\n        p[j].tag = 1\n    }\n\n    // untag what's used\n\n    untag(p0)\n    untag(p1)\n    untag(p2)\n    untag(p3)\n    untag(p4)\n    untag(p5)\n    untag(p6)\n    untag(p7)\n    untag(p8)\n    untag(p9)\n\n    untag(one)\n    untag(zero)\n    untag(imaginaryunit)\n\n    for (i = 0; i < NSYM; i++) {\n      untag(binding[i])\n      untag(arglist[i])\n    }\n\n    for (i = 0; i < tos; i++)\n      untag(stack[i])\n\n    for (i = (int) (frame - stack); i < TOS; i++)\n      untag(stack[i])\n\n    // collect everything that's still tagged\n\n    free_count = 0\n\n    for (i = 0; i < mcount; i++) {\n      p = mem[i]\n      for (j = 0; j < N; j++) {\n        if (p[j].tag == 0)\n          continue\n        // still tagged so it's unused, put on free list\n        switch (p[j].k) {\n        case TENSOR:\n          free(p[j].u.tensor)\n          break\n        case STR:\n          free(p[j].u.str)\n          break\n        case NUM:\n          mfree(p[j].u.q.a)\n          mfree(p[j].u.q.b)\n          break\n        }\n        p[j].k = CONS; // so no double free occurs above\n        p[j].u.cons.cdr = free_list\n        free_list = p + j\n        free_count++\n      }\n    }\n  }\n\n  void\n  untag(U *p)\n  {\n    int i\n\n    if (iscons(p)) {\n      do {\n        if (p->tag == 0)\n          return\n        p->tag = 0\n        untag(p->u.cons.car)\n        p = p->u.cons.cdr\n      } while (iscons(p))\n      untag(p)\n      return\n    }\n\n    if (p->tag) {\n      p->tag = 0\n       if (istensor(p)) {\n        for (i = 0; i < p->u.tensor->nelem; i++)\n          untag(p->u.tensor->elem[i])\n      }\n    }\n  }\n\n  // get memory for 100,000 atoms\n\n  void\n  alloc_mem(void)\n  {\n    int i\n    U *p\n    if (mcount == M)\n      return\n    p = (U *) malloc(N * sizeof (struct U))\n    if (p == NULL)\n      return\n    mem[mcount++] = p\n    for (i = 0; i < N; i++) {\n      p[i].k = CONS; // so no free in gc\n      p[i].u.cons.cdr = p + i + 1\n    }\n    p[N - 1].u.cons.cdr = free_list\n    free_list = p\n    free_count += N\n  }\n\n  void\n  print_mem_info(void)\n  {\n    char buf[100]\n\n    sprintf(buf, \"%d blocks (%d bytes/block)\\n\", N * mcount, (int) sizeof (U))\n    printstr(buf)\n\n    sprintf(buf, \"%d free\\n\", free_count)\n    printstr(buf)\n\n    sprintf(buf, \"%d used\\n\", N * mcount - free_count)\n    printstr(buf)\n  }\n  */\n  // returns 1 if expr p contains expr q, otherweise returns 0\n  Find = function(p, q) {\n    var i, l1, ref2;\n    i = 0;\n    if (equal(p, q)) {\n      return 1;\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        if (Find(p.tensor.elem[i], q)) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    while (iscons(p)) {\n      if (Find(car(p), q)) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  // find stuff like (-1)^(something (but disregard\n  // imaginary units which are in the form (-1)^(1/2))\n  findPossibleClockForm = function(p) {\n    var i, l1, ref2;\n    i = 0;\n    if (isimaginaryunit(p)) {\n      return 0;\n    }\n    if (car(p) === symbol(POWER) && !isinteger(caddr(p1))) {\n      if (Find(cadr(p), imaginaryunit)) {\n        //console.log \"found i^fraction \" + p\n        return 1;\n      }\n    }\n    if (car(p) === symbol(POWER) && equaln(cadr(p), -1) && !isinteger(caddr(p1))) {\n      //console.log \"found -1^fraction in \" + p\n      return 1;\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        if (findPossibleClockForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    while (iscons(p)) {\n      if (findPossibleClockForm(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  // find stuff like (e)^(i something)\n  findPossibleExponentialForm = function(p) {\n    var i, l1, ref2;\n    i = 0;\n    if (car(p) === symbol(POWER) && cadr(p) === symbol(E)) {\n      return Find(caddr(p), imaginaryunit);\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        if (findPossibleExponentialForm(p.tensor.elem[i])) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    while (iscons(p)) {\n      if (findPossibleExponentialForm(car(p))) {\n        return 1;\n      }\n      p = cdr(p);\n    }\n    return 0;\n  };\n\n  $.Find = Find;\n\n  init = function() {\n    var i, l1, ref2;\n    //debugger\n    //console.log \"DOING AN INIT ========================================================================\"\n    i = 0;\n    flag = 0;\n    reset_after_error();\n    chainOfUserSymbolsNotFunctionsBeingEvaluated = [];\n    if (flag) { // already initted\n      return;\n    }\n    flag = 1;\n// total clearout of symbol table\n    for (i = l1 = 0, ref2 = NSYM; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      isSymbolReclaimable[i] = false;\n    }\n    return defn();\n  };\n\n  defn_str = [\n    \"version=\\\"\" + version + \"\\\"\",\n    \"e=exp(1)\",\n    \"i=sqrt(-1)\",\n    \"autoexpand=1\",\n    \"assumeRealVariables=1\",\n    \"trange=[-pi,pi]\",\n    \"xrange=[-10,10]\",\n    \"yrange=[-10,10]\",\n    \"last=0\",\n    \"trace=0\",\n    \"forceFixedPrintout=1\",\n    \"maxFixedPrintoutDigits=6\",\n    \"printLeaveEAlone=1\",\n    \"printLeaveXAlone=0\",\n    // cross definition\n    \"cross(u,v)=[u[2]*v[3]-u[3]*v[2],u[3]*v[1]-u[1]*v[3],u[1]*v[2]-u[2]*v[1]]\",\n    // curl definition\n    \"curl(v)=[d(v[3],y)-d(v[2],z),d(v[1],z)-d(v[3],x),d(v[2],x)-d(v[1],y)]\",\n    // div definition\n    \"div(v)=d(v[1],x)+d(v[2],y)+d(v[3],z)\",\n    // Note that we use the mathematics / Javascript / Mathematica\n    // convention that \"log\" is indeed the natural logarithm.\n\n    // In engineering, biology, astronomy, \"log\" can stand instead\n    // for the \"common\" logarithm i.e. base 10. Also note that Google\n    // calculations use log for the common logarithm.\n    \"ln(x)=log(x)\"\n  ];\n\n  defn = function() {\n    var definitionOfInterest, defn_i, l1, originalCodeGen, ref2;\n    p0 = symbol(NIL);\n    p1 = symbol(NIL);\n    p2 = symbol(NIL);\n    p3 = symbol(NIL);\n    p4 = symbol(NIL);\n    p5 = symbol(NIL);\n    p6 = symbol(NIL);\n    p7 = symbol(NIL);\n    p8 = symbol(NIL);\n    p9 = symbol(NIL);\n    std_symbol(\"abs\", ABS);\n    std_symbol(\"add\", ADD);\n    std_symbol(\"adj\", ADJ);\n    std_symbol(\"and\", AND);\n    std_symbol(\"approxratio\", APPROXRATIO);\n    std_symbol(\"arccos\", ARCCOS);\n    std_symbol(\"arccosh\", ARCCOSH);\n    std_symbol(\"arcsin\", ARCSIN);\n    std_symbol(\"arcsinh\", ARCSINH);\n    std_symbol(\"arctan\", ARCTAN);\n    std_symbol(\"arctanh\", ARCTANH);\n    std_symbol(\"arg\", ARG);\n    std_symbol(\"atomize\", ATOMIZE);\n    std_symbol(\"besselj\", BESSELJ);\n    std_symbol(\"bessely\", BESSELY);\n    std_symbol(\"binding\", BINDING);\n    std_symbol(\"binomial\", BINOMIAL);\n    std_symbol(\"ceiling\", CEILING);\n    std_symbol(\"check\", CHECK);\n    std_symbol(\"choose\", CHOOSE);\n    std_symbol(\"circexp\", CIRCEXP);\n    std_symbol(\"clear\", CLEAR);\n    std_symbol(\"clearall\", CLEARALL);\n    std_symbol(\"clearpatterns\", CLEARPATTERNS);\n    std_symbol(\"clock\", CLOCK);\n    std_symbol(\"coeff\", COEFF);\n    std_symbol(\"cofactor\", COFACTOR);\n    std_symbol(\"condense\", CONDENSE);\n    std_symbol(\"conj\", CONJ);\n    std_symbol(\"contract\", CONTRACT);\n    std_symbol(\"cos\", COS);\n    std_symbol(\"cosh\", COSH);\n    std_symbol(\"decomp\", DECOMP);\n    std_symbol(\"defint\", DEFINT);\n    std_symbol(\"deg\", DEGREE);\n    std_symbol(\"denominator\", DENOMINATOR);\n    std_symbol(\"det\", DET);\n    std_symbol(\"derivative\", DERIVATIVE);\n    std_symbol(\"dim\", DIM);\n    std_symbol(\"dirac\", DIRAC);\n    std_symbol(\"divisors\", DIVISORS);\n    std_symbol(\"do\", DO);\n    std_symbol(\"dot\", DOT);\n    std_symbol(\"draw\", DRAW);\n    std_symbol(\"dsolve\", DSOLVE);\n    std_symbol(\"erf\", ERF);\n    std_symbol(\"erfc\", ERFC);\n    std_symbol(\"eigen\", EIGEN);\n    std_symbol(\"eigenval\", EIGENVAL);\n    std_symbol(\"eigenvec\", EIGENVEC);\n    std_symbol(\"eval\", EVAL);\n    std_symbol(\"exp\", EXP);\n    std_symbol(\"expand\", EXPAND);\n    std_symbol(\"expcos\", EXPCOS);\n    std_symbol(\"expsin\", EXPSIN);\n    std_symbol(\"factor\", FACTOR);\n    std_symbol(\"factorial\", FACTORIAL);\n    std_symbol(\"factorpoly\", FACTORPOLY);\n    std_symbol(\"filter\", FILTER);\n    std_symbol(\"float\", FLOATF);\n    std_symbol(\"floor\", FLOOR);\n    std_symbol(\"for\", FOR);\n    std_symbol(\"function\", FUNCTION);\n    std_symbol(\"Gamma\", GAMMA);\n    std_symbol(\"gcd\", GCD);\n    std_symbol(\"hermite\", HERMITE);\n    std_symbol(\"hilbert\", HILBERT);\n    std_symbol(\"imag\", IMAG);\n    std_symbol(\"component\", INDEX);\n    std_symbol(\"inner\", INNER);\n    std_symbol(\"integral\", INTEGRAL);\n    std_symbol(\"inv\", INV);\n    std_symbol(\"invg\", INVG);\n    std_symbol(\"isinteger\", ISINTEGER);\n    std_symbol(\"isprime\", ISPRIME);\n    std_symbol(\"laguerre\", LAGUERRE);\n    //  std_symbol(\"laplace\", LAPLACE)\n    std_symbol(\"lcm\", LCM);\n    std_symbol(\"leading\", LEADING);\n    std_symbol(\"legendre\", LEGENDRE);\n    std_symbol(\"log\", LOG);\n    std_symbol(\"lookup\", LOOKUP);\n    std_symbol(\"mod\", MOD);\n    std_symbol(\"multiply\", MULTIPLY);\n    std_symbol(\"not\", NOT);\n    std_symbol(\"nroots\", NROOTS);\n    std_symbol(\"number\", NUMBER);\n    std_symbol(\"numerator\", NUMERATOR);\n    std_symbol(\"operator\", OPERATOR);\n    std_symbol(\"or\", OR);\n    std_symbol(\"outer\", OUTER);\n    std_symbol(\"pattern\", PATTERN);\n    std_symbol(\"patternsinfo\", PATTERNSINFO);\n    std_symbol(\"polar\", POLAR);\n    std_symbol(\"power\", POWER);\n    std_symbol(\"prime\", PRIME);\n    std_symbol(\"print\", PRINT);\n    std_symbol(\"print2dascii\", PRINT2DASCII);\n    std_symbol(\"printcomputer\", PRINTFULL);\n    std_symbol(\"printlatex\", PRINTLATEX);\n    std_symbol(\"printlist\", PRINTLIST);\n    std_symbol(\"printhuman\", PRINTPLAIN);\n    std_symbol(\"printLeaveEAlone\", PRINT_LEAVE_E_ALONE);\n    std_symbol(\"printLeaveXAlone\", PRINT_LEAVE_X_ALONE);\n    std_symbol(\"product\", PRODUCT);\n    std_symbol(\"quote\", QUOTE);\n    std_symbol(\"quotient\", QUOTIENT);\n    std_symbol(\"rank\", RANK);\n    std_symbol(\"rationalize\", RATIONALIZE);\n    std_symbol(\"real\", REAL);\n    std_symbol(\"rect\", YYRECT);\n    std_symbol(\"roots\", ROOTS);\n    std_symbol(\"round\", ROUND);\n    std_symbol(\"equals\", SETQ);\n    std_symbol(\"sgn\", SGN);\n    std_symbol(\"silentpattern\", SILENTPATTERN);\n    std_symbol(\"simplify\", SIMPLIFY);\n    std_symbol(\"sin\", SIN);\n    std_symbol(\"sinh\", SINH);\n    std_symbol(\"shape\", SHAPE);\n    std_symbol(\"sqrt\", SQRT);\n    std_symbol(\"stop\", STOP);\n    std_symbol(\"subst\", SUBST);\n    std_symbol(\"sum\", SUM);\n    std_symbol(\"symbolsinfo\", SYMBOLSINFO);\n    std_symbol(\"tan\", TAN);\n    std_symbol(\"tanh\", TANH);\n    std_symbol(\"taylor\", TAYLOR);\n    std_symbol(\"test\", TEST);\n    std_symbol(\"testeq\", TESTEQ);\n    std_symbol(\"testge\", TESTGE);\n    std_symbol(\"testgt\", TESTGT);\n    std_symbol(\"testle\", TESTLE);\n    std_symbol(\"testlt\", TESTLT);\n    std_symbol(\"transpose\", TRANSPOSE);\n    std_symbol(\"unit\", UNIT);\n    std_symbol(\"zero\", ZERO);\n    std_symbol(\"nil\", NIL);\n    std_symbol(\"autoexpand\", AUTOEXPAND);\n    std_symbol(\"bake\", BAKE);\n    std_symbol(\"assumeRealVariables\", ASSUME_REAL_VARIABLES);\n    std_symbol(\"last\", LAST);\n    std_symbol(\"lastprint\", LAST_PRINT);\n    std_symbol(\"last2dasciiprint\", LAST_2DASCII_PRINT);\n    std_symbol(\"lastfullprint\", LAST_FULL_PRINT);\n    std_symbol(\"lastlatexprint\", LAST_LATEX_PRINT);\n    std_symbol(\"lastlistprint\", LAST_LIST_PRINT);\n    std_symbol(\"lastplainprint\", LAST_PLAIN_PRINT);\n    std_symbol(\"trace\", TRACE);\n    std_symbol(\"forceFixedPrintout\", FORCE_FIXED_PRINTOUT);\n    std_symbol(\"maxFixedPrintoutDigits\", MAX_FIXED_PRINTOUT_DIGITS);\n    std_symbol(\"~\", YYE); // tilde so sort puts it after other symbols\n    std_symbol(\"$DRAWX\", DRAWX); // special purpose internal symbols\n    std_symbol(\"$METAA\", METAA);\n    std_symbol(\"$METAB\", METAB);\n    std_symbol(\"$METAX\", METAX);\n    std_symbol(\"$SECRETX\", SECRETX);\n    std_symbol(\"version\", VERSION);\n    std_symbol(\"pi\", PI);\n    std_symbol(\"a\", SYMBOL_A);\n    std_symbol(\"b\", SYMBOL_B);\n    std_symbol(\"c\", SYMBOL_C);\n    std_symbol(\"d\", SYMBOL_D);\n    std_symbol(\"i\", SYMBOL_I);\n    std_symbol(\"j\", SYMBOL_J);\n    std_symbol(\"n\", SYMBOL_N);\n    std_symbol(\"r\", SYMBOL_R);\n    std_symbol(\"s\", SYMBOL_S);\n    std_symbol(\"t\", SYMBOL_T);\n    std_symbol(\"x\", SYMBOL_X);\n    std_symbol(\"y\", SYMBOL_Y);\n    std_symbol(\"z\", SYMBOL_Z);\n    std_symbol(\"I\", SYMBOL_IDENTITY_MATRIX);\n    std_symbol(\"a_\", SYMBOL_A_UNDERSCORE);\n    std_symbol(\"b_\", SYMBOL_B_UNDERSCORE);\n    std_symbol(\"x_\", SYMBOL_X_UNDERSCORE);\n    std_symbol(\"$C1\", C1);\n    std_symbol(\"$C2\", C2);\n    std_symbol(\"$C3\", C3);\n    std_symbol(\"$C4\", C4);\n    std_symbol(\"$C5\", C5);\n    std_symbol(\"$C6\", C6);\n    defineSomeHandyConstants();\n    // don't add all these functions to the\n    // symbolsDependencies, clone the original\n    originalCodeGen = codeGen;\n    codeGen = false;\n    for (defn_i = l1 = 0, ref2 = defn_str.length; (0 <= ref2 ? l1 < ref2 : l1 > ref2); defn_i = 0 <= ref2 ? ++l1 : --l1) {\n      definitionOfInterest = defn_str[defn_i];\n      scan(definitionOfInterest);\n      if (DEBUG) {\n        console.log(\"... evaling \" + definitionOfInterest);\n        console.log(\"top of stack:\");\n        console.log(print_list(stack[tos - 1]));\n      }\n      Eval();\n      pop();\n    }\n    // restore the symbol dependencies as they were before.\n    return codeGen = originalCodeGen;\n  };\n\n  defineSomeHandyConstants = function() {\n    zero = new_integer(0);\n    one = new_integer(1);\n    push_double(1.0);\n    one_as_double = pop();\n    // i is the square root of -1 i.e. -1 ^ 1/2\n    push_symbol(POWER);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    push_integer(-1);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    push_rational(1, 2);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    list(3);\n    if (DEBUG) {\n      console.log(print_list(stack[tos - 1]));\n    }\n    return imaginaryunit = pop(); // must be untagged in gc\n  };\n\n  // Bignum compare\n\n  //  returns\n\n  //  -1    a < b\n\n  //  0    a = b\n\n  //  1    a > b\n  mcmp = function(a, b) {\n    return a.compare(b);\n  };\n\n  // a is a bigint, n is a normal int\n  mcmpint = function(a, n) {\n    var b, t;\n    b = bigInt(n);\n    t = mcmp(a, b);\n    return t;\n  };\n\n  strcmp = function(str1, str2) {\n    if (str1 === str2) {\n      return 0;\n    } else if (str1 > str2) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  doubleToReasonableString = function(d) {\n    var maxFixedPrintoutDigits, stringRepresentation;\n    // when generating code, print out\n    // the standard JS Number printout\n    if (codeGen) {\n      return \"\" + d;\n    }\n    if (isZeroAtomOrTensor(get_binding(symbol(FORCE_FIXED_PRINTOUT)))) {\n      stringRepresentation = \"\" + d;\n      // manipulate the string so that it can be parsed by\n      // Algebrite (something like 1.23e-123 wouldn't cut it because\n      // that would be parsed as 1.23*e - 123)\n      if (printMode === PRINTMODE_LATEX) {\n        // 1.0\\mathrm{e}{-10} looks much better than the plain 1.0e-10\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"\\\\mathrm{e}{$1}\");\n        } else {\n          // if there is no dot in the mantissa, add it so we see it's\n          // a double and not a perfect number\n          // e.g. 1e-10 becomes 1.0\\mathrm{e}{-10}\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0\\\\mathrm{e}{$2}\");\n        }\n      } else {\n        if (/\\d*\\.\\d*e.*/gm.test(stringRepresentation)) {\n          stringRepresentation = stringRepresentation.replace(/e(.*)/gm, \"*10^($1)\");\n        } else {\n          // if there is no dot in the mantissa, add it so we see it's\n          // a double and not a perfect number\n          // e.g. 1e-10 becomes 1.0e-10\n          stringRepresentation = stringRepresentation.replace(/(\\d+)e(.*)/gm, \"$1.0*10^($2)\");\n        }\n      }\n    } else {\n      push(get_binding(symbol(MAX_FIXED_PRINTOUT_DIGITS)));\n      maxFixedPrintoutDigits = pop_integer();\n      //console.log \"maxFixedPrintoutDigits: \" + maxFixedPrintoutDigits\n      //console.log \"type: \" + typeof(maxFixedPrintoutDigits)\n      //console.log \"toFixed: \" + d.toFixed(maxFixedPrintoutDigits)\n      stringRepresentation = \"\" + d.toFixed(maxFixedPrintoutDigits);\n      // remove any trailing zeroes after the dot\n      // see https://stackoverflow.com/questions/26299160/using-regex-how-do-i-remove-the-trailing-zeros-from-a-decimal-number\n      stringRepresentation = stringRepresentation.replace(/(\\.\\d*?[1-9])0+$/gm, \"$1\");\n      // in case there are only zeroes after the dot, removes the dot too\n      stringRepresentation = stringRepresentation.replace(/\\.0+$/gm, \"\");\n      // we actually want to give a hint to user that\n      // it's a double, so add a trailing \".0\" if there\n      // is no decimal point\n      if (stringRepresentation.indexOf(\".\") === -1) {\n        stringRepresentation += \".0\";\n      }\n      if (parseFloat(stringRepresentation) !== d) {\n        stringRepresentation = d.toFixed(maxFixedPrintoutDigits) + \"...\";\n      }\n    }\n    return stringRepresentation;\n  };\n\n  // does nothing\n  clear_term = function() {};\n\n  // s is a string here anyways\n  isspace = function(s) {\n    if (s == null) {\n      return false;\n    }\n    return s === ' ' || s === '\\t' || s === '\\n' || s === '\\v' || s === '\\f' || s === '\\r';\n  };\n\n  isdigit = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return /^\\d+$/.test(str);\n  };\n\n  isalpha = function(str) {\n    if (str == null) {\n      return false;\n    }\n    //Check for non-alphabetic characters and space\n    return str.search(/[^A-Za-z]/) === -1;\n  };\n\n  isalphaOrUnderscore = function(str) {\n    if (str == null) {\n      return false;\n    }\n    //Check for non-alphabetic characters and space\n    return str.search(/[^A-Za-z_]/) === -1;\n  };\n\n  isunderscore = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return str.search(/_/) === -1;\n  };\n\n  isalnumorunderscore = function(str) {\n    if (str == null) {\n      return false;\n    }\n    return isalphaOrUnderscore(str) || isdigit(str);\n  };\n\n  count = function(p) {\n    var n;\n    if (iscons(p)) {\n      n = 0;\n      while (iscons(p)) {\n        n += count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n    return n;\n  };\n\n  // this probably works out to be\n  // more general than just counting symbols, it can\n  // probably count instances of anything you pass as\n  // first argument but didn't try it.\n  countOccurrencesOfSymbol = function(needle, p) {\n    var n;\n    n = 0;\n    if (iscons(p)) {\n      while (iscons(p)) {\n        n += countOccurrencesOfSymbol(needle, car(p));\n        p = cdr(p);\n      }\n    } else {\n      if (equal(needle, p)) {\n        n = 1;\n      }\n    }\n    return n;\n  };\n\n  // returns the total number of elements\n  // in an expression\n  countsize = function(p) {\n    var i, l1, n, ref2;\n    n = 0;\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        n += p.tensor.elem[i];\n      }\n    } else if (iscons(p)) {\n      while (iscons(p)) {\n        n += count(car(p)) + 1;\n        p = cdr(p);\n      }\n    } else {\n      n = 1;\n    }\n    return n;\n  };\n\n  //jmp_buf stop_return, draw_stop_return\n\n  // s is a string here\n  stop = function(s) {\n    var message;\n    //if (draw_flag == 2)\n    //  longjmp(draw_stop_return, 1)\n    //else\n    errorMessage += \"Stop: \";\n    errorMessage += s;\n    //debugger\n    message = errorMessage;\n    errorMessage = '';\n    moveTos(0);\n    throw new Error(message);\n  };\n\n  \n  //longjmp(stop_return, 1)\n\n  // Figuring out dependencies is key to automatically\n  // generating a method signature when generating JS code\n  // from algebrite scripts.\n  // This is important because the user can keep using normal Algebrite\n  // scripting without special notations.\n  // Basically the process consists of figuring out\n  // the \"ground variables\" that are needed to compute each variable.\n  // Now there are two ways of doing this:\n  //   * at parse time\n  //   * after running the scripts\n  // Doing it at parse time means that we can't track simplifications\n  // canceling-out some variables for example. But on the other side\n  // it's very quick and the user can somehow see what the signature is\n  // going to look like (assuming tha code is rather simple), or anyways\n  // is going to easily make sense of the generated signature.\n  // Doing it after execution on the other hand would allow us to see\n  // if some variable cancel-out. But if variables cancel out then\n  // they might do so according to some run-time behaviour that the user\n  // might struggle to keep track of.\n  // So the effort for the user to make sense of the signature in the first case\n  // is similar to the effort of keeping tab of types in a typed language.\n  // While in the second case the effort is similar to running the\n  // code and simplifications in her head.\n\n  // If we just want to compute the dependencies, we don't need to do\n  // anything costly, we don't \"run\" the code and we don't simplify\n  // the code. Just finding the plain dependencies\n  // TODO change the name of this function, as it doesn't just find the\n  // dependencies. It also runs it and generates the JS code.\n  findDependenciesInScript = function(stringToBeParsed, dontGenerateCode) {\n    var allReturnedLatexStrings, allReturnedPlainStrings, bodyForReadableSummaryOfGeneratedCode, cyclesDescriptions, deQuotedDep, dependencyInfo, eachDependency, error, generatedBody, generatedCode, i, indexOfEachReplacement, indexOfPartRemainingToBeParsed, inited, key, l1, len, len1, len2, len3, len4, len5, len6, len7, m1, n, n1, newUserSymbol, o1, origPrintMode, originalUserSymbol, parameters, q1, r1, readableSummaryOfGeneratedCode, recursedDependencies, ref2, replacementsFrom, replacementsTo, s1, scriptEvaluation, stringToBeRun, t1, testableString, timeStartFromAlgebra, toBePrinted, u1, userVariablesMentioned, value, variablesWithCycles;\n    if (DEBUG) {\n      console.log(\"stringToBeParsed: \" + stringToBeParsed);\n    }\n    timeStartFromAlgebra = new Date().getTime();\n    inited = true;\n    codeGen = true;\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    symbolsInExpressionsWithoutAssignments = [];\n    patternHasBeenFound = false;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    n = 0;\n    // we are going to store the dependencies _of the block as a whole_\n    // so all affected variables in the whole block are lumped\n    // together, and same for the variable that affect those, we\n    // lump them all together.\n    dependencyInfo = {\n      affectsVariables: [],\n      affectedBy: []\n    };\n    stringToBeRun = stringToBeParsed;\n    // parse the input. This collects the\n    // dependency information\n    while (1) {\n      try {\n        errorMessage = \"\";\n        check_stack();\n        if (DEBUG) {\n          console.log(\"findDependenciesInScript: scanning\");\n        }\n        n = scan(stringToBeParsed.substring(indexOfPartRemainingToBeParsed));\n        if (DEBUG) {\n          console.log(\"scanned\");\n        }\n        pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n        errorMessage = error + \"\";\n        //debugger\n        reset_after_error();\n        break;\n      }\n      if (n === 0) {\n        break;\n      }\n      indexOfPartRemainingToBeParsed += n;\n    }\n    testableString = \"\";\n    // print out all local dependencies as collected by this\n    // parsing pass\n    if (DEBUG) {\n      console.log(\"all local dependencies ----------------\");\n    }\n    testableString += \"All local dependencies: \";\n    for (key in symbolsDependencies) {\n      value = symbolsDependencies[key];\n      if (DEBUG) {\n        console.log(\"variable \" + key + \" depends on: \");\n      }\n      dependencyInfo.affectsVariables.push(key);\n      testableString += \" variable \" + key + \" depends on: \";\n      for (l1 = 0, len = value.length; l1 < len; l1++) {\n        i = value[l1];\n        if (DEBUG) {\n          console.log(\"    \" + i);\n        }\n        if (i[0] !== \"'\") {\n          dependencyInfo.affectedBy.push(i);\n        }\n        testableString += i + \", \";\n      }\n      testableString += \"; \";\n    }\n    testableString += \". \";\n    // print out the symbols with re-assignments:\n    if (DEBUG) {\n      console.log(\"Symbols with reassignments ----------------\");\n    }\n    testableString += \"Symbols with reassignments: \";\n    for (m1 = 0, len1 = symbolsHavingReassignments.length; m1 < len1; m1++) {\n      key = symbolsHavingReassignments[m1];\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n    testableString += \". \";\n    // print out the symbols that appear in expressions without assignments\n    if (DEBUG) {\n      console.log(\"Symbols in expressions without assignments ----------------\");\n    }\n    testableString += \"Symbols in expressions without assignments: \";\n    for (n1 = 0, len2 = symbolsInExpressionsWithoutAssignments.length; n1 < len2; n1++) {\n      key = symbolsInExpressionsWithoutAssignments[n1];\n      if (dependencyInfo.affectedBy.indexOf(key) === -1) {\n        dependencyInfo.affectedBy.push(key);\n        testableString += key + \", \";\n      }\n    }\n    testableString += \". \";\n    // ALL Algebrite code is affected by any pattern changing\n    dependencyInfo.affectedBy.push(\"PATTERN_DEPENDENCY\");\n    if (patternHasBeenFound) {\n      dependencyInfo.affectsVariables.push(\"PATTERN_DEPENDENCY\");\n      testableString += \" - PATTERN_DEPENDENCY inserted - \";\n    }\n    // print out all global dependencies as collected by this\n    // parsing pass\n    if (DEBUG) {\n      console.log(\"All dependencies recursively ----------------\");\n    }\n    testableString += \"All dependencies recursively: \";\n    scriptEvaluation = [\"\", \"\"];\n    generatedCode = \"\";\n    readableSummaryOfGeneratedCode = \"\";\n    if (errorMessage === \"\" && !dontGenerateCode) {\n      try {\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n        scriptEvaluation = run(stringToBeParsed, true);\n        allReturnedPlainStrings = \"\";\n        allReturnedLatexStrings = \"\";\n      } catch (error1) {\n        error = error1;\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n        errorMessage = error + \"\";\n        //debugger\n        init();\n      }\n      if (errorMessage === \"\") {\n        for (key in symbolsDependencies) {\n          codeGen = true;\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          }\n          codeGen = false;\n          if (DEBUG) {\n            console.log(\"  variable \" + key + \" depends on: \");\n          }\n          testableString += \" variable \" + key + \" depends on: \";\n          recursedDependencies = [];\n          variablesWithCycles = [];\n          cyclesDescriptions = [];\n          recursiveDependencies(key, recursedDependencies, [], variablesWithCycles, [], cyclesDescriptions);\n          for (o1 = 0, len3 = variablesWithCycles.length; o1 < len3; o1++) {\n            i = variablesWithCycles[o1];\n            if (DEBUG) {\n              console.log(\"    --> cycle through \" + i);\n            }\n          }\n          for (q1 = 0, len4 = recursedDependencies.length; q1 < len4; q1++) {\n            i = recursedDependencies[q1];\n            if (DEBUG) {\n              console.log(\"    \" + i);\n            }\n            testableString += i + \", \";\n          }\n          testableString += \"; \";\n          for (r1 = 0, len5 = cyclesDescriptions.length; r1 < len5; r1++) {\n            i = cyclesDescriptions[r1];\n            testableString += \" \" + i + \", \";\n          }\n          if (DEBUG) {\n            console.log(\"  code generation:\" + key + \" is: \" + get_binding(usr_symbol(key)).toString());\n          }\n          // we really want to make an extra effort\n          // to generate simplified code, so\n          // run a \"simplify\" on the content of each\n          // variable that we are generating code for.\n          // Note that the variable\n          // will still point to un-simplified structures,\n          // we only simplify the generated code.\n          push(get_binding(usr_symbol(key)));\n          // Since we go and simplify all variables we meet,\n          // we have to replace each variable passed as a parameter\n          // with something entirely new, so that there is no chance\n          // that it might evoke previous values in the external scope\n          // as in this case:\n          //  a = 2\n          //  f(a) = a+1+b\n          // we don't want 'a' in the body of f to be simplified to 2\n          // There are two cases: 1) the variable actually was already in\n          // the symbol table, in which case there is going to be this new\n          // one prepended with AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE, and\n          // we'll have to remove up this variable later.\n          // OR 2) the variable wasn't already in the symbol table, in which\n          // case we directly create this one, which means that we'll have\n          // to rename it later to the correct name without the prepended\n          // part.\n          replacementsFrom = [];\n          replacementsTo = [];\n          for (s1 = 0, len6 = recursedDependencies.length; s1 < len6; s1++) {\n            eachDependency = recursedDependencies[s1];\n            if (eachDependency[0] === \"'\") {\n              deQuotedDep = eachDependency.substring(1);\n              originalUserSymbol = usr_symbol(deQuotedDep);\n              newUserSymbol = usr_symbol(\"AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE\" + deQuotedDep);\n              replacementsFrom.push(originalUserSymbol);\n              replacementsTo.push(newUserSymbol);\n              push(originalUserSymbol);\n              push(newUserSymbol);\n              subst();\n              if (DEBUG) {\n                console.log(\"after substitution: \" + stack[tos - 1]);\n              }\n            }\n          }\n          try {\n            simplifyForCodeGeneration();\n          } catch (error1) {\n            error = error1;\n            if (PRINTOUTRESULT) {\n              console.log(error);\n            }\n            errorMessage = error + \"\";\n            //debugger\n            init();\n          }\n          for (indexOfEachReplacement = t1 = 0, ref2 = replacementsFrom.length; (0 <= ref2 ? t1 < ref2 : t1 > ref2); indexOfEachReplacement = 0 <= ref2 ? ++t1 : --t1) {\n            //console.log \"replacing back \" + replacementsTo[indexOfEachReplacement] + \" into: \" + replacementsFrom[indexOfEachReplacement]\n            push(replacementsTo[indexOfEachReplacement]);\n            push(replacementsFrom[indexOfEachReplacement]);\n            subst();\n          }\n          clearRenamedVariablesToAvoidBindingToExternalScope();\n          if (errorMessage === \"\") {\n            toBePrinted = pop();\n            // we have to get all the variables used on the right side\n            // here. I.e. to print the arguments it's better to look at the\n            // actual method body after simplification.\n            userVariablesMentioned = [];\n            collectUserSymbols(toBePrinted, userVariablesMentioned);\n            allReturnedPlainStrings = \"\";\n            allReturnedLatexStrings = \"\";\n            codeGen = true;\n            generatedBody = toBePrinted.toString();\n            codeGen = false;\n            origPrintMode = printMode;\n            printMode = PRINTMODE_LATEX;\n            bodyForReadableSummaryOfGeneratedCode = toBePrinted.toString();\n            printMode = origPrintMode;\n            if (variablesWithCycles.indexOf(key) !== -1) {\n              generatedCode += \"// \" + key + \" is part of a cyclic dependency, no code generated.\";\n              readableSummaryOfGeneratedCode += \"#\" + key + \" is part of a cyclic dependency, no code generated.\";\n            } else {\n              /*\n               * using this paragraph instead of the following one\n               * creates methods signatures that\n               * are slightly less efficient\n               * i.e. variables compare even if they are\n               * simplified away.\n               * In theory these signatures are more stable, but\n               * in practice signatures vary quite a bit anyways\n               * depending on previous assignments for example,\n               * so it's unclear whether going for stability\n               * is sensible at all..\n              if recursedDependencies.length != 0\n                parameters = \"(\"\n                for i in recursedDependencies\n                  if i.indexOf(\"'\") != 0\n                    parameters += i + \", \"\n                  else\n                    if recursedDependencies.indexOf(i.substring(1)) == -1\n                      parameters += i.substring(1) + \", \"\n               */\n              // remove all native functions from the\n              // parameters as well.\n              userVariablesMentioned = userVariablesMentioned.filter(function(x) {\n                return predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(x + \"\") === -1;\n              });\n              // remove the variable that are not in the dependency list\n              // i.e. only allow the variables that are in the dependency list\n              userVariablesMentioned = userVariablesMentioned.filter(function(x) {\n                return recursedDependencies.indexOf(x + \"\") !== -1 || recursedDependencies.indexOf(\"\\'\" + x + \"\") !== -1;\n              });\n              if (userVariablesMentioned.length !== 0) {\n                parameters = \"(\";\n                for (u1 = 0, len7 = userVariablesMentioned.length; u1 < len7; u1++) {\n                  i = userVariablesMentioned[u1];\n                  if (i.printname !== key) {\n                    parameters += i.printname + \", \";\n                  }\n                }\n                // eliminate the last \", \" for printout clarity\n                parameters = parameters.replace(/, $/gm, \"\");\n                parameters += \")\";\n                generatedCode += key + \" = function \" + parameters + \" { return ( \" + generatedBody + \" ); }\";\n                readableSummaryOfGeneratedCode += key + parameters + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              } else {\n                generatedCode += key + \" = \" + generatedBody + \";\";\n                readableSummaryOfGeneratedCode += key + \" = \" + bodyForReadableSummaryOfGeneratedCode;\n              }\n            }\n            generatedCode += \"\\n\";\n            readableSummaryOfGeneratedCode += \"\\n\";\n            if (DEBUG) {\n              console.log(\"    \" + generatedCode);\n            }\n          }\n        }\n      }\n    }\n    // eliminate the last new line\n    generatedCode = generatedCode.replace(/\\n$/gm, \"\");\n    readableSummaryOfGeneratedCode = readableSummaryOfGeneratedCode.replace(/\\n$/gm, \"\");\n    // cleanup\n    symbolsDependencies = {};\n    symbolsHavingReassignments = [];\n    patternHasBeenFound = false;\n    symbolsInExpressionsWithoutAssignments = [];\n    if (DEBUG) {\n      console.log(\"testable string: \" + testableString);\n    }\n    if (TIMING_DEBUGS) {\n      console.log(\"findDependenciesInScript time for: \" + stringToBeRun + \" : \" + ((new Date().getTime()) - timeStartFromAlgebra) + \"ms\");\n    }\n    return [testableString, scriptEvaluation[0], generatedCode, readableSummaryOfGeneratedCode, scriptEvaluation[1], errorMessage, dependencyInfo];\n  };\n\n  recursiveDependencies = function(variableToBeChecked, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions) {\n    var cyclesDescription, i, k, l1, len, len1, m1, ref2;\n    variablesAlreadyFleshedOut.push(variableToBeChecked);\n    // recursive dependencies can only be descended if the variable is not bound to a parameter\n    if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]] != null) {\n      if (symbolsDependencies[chainBeingChecked[chainBeingChecked.length - 1]].indexOf(\"'\" + variableToBeChecked) !== -1) {\n        if (DEBUG) {\n          console.log(\"can't keep following the chain of \" + variableToBeChecked + \" because it's actually a variable bound to a parameter\");\n        }\n        if (arrayWhereDependenciesWillBeAdded.indexOf(\"'\" + variableToBeChecked) === -1 && arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n          arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n        }\n        return arrayWhereDependenciesWillBeAdded;\n      }\n    }\n    chainBeingChecked.push(variableToBeChecked);\n    if (symbolsDependencies[variableToBeChecked] == null) {\n      // end case: the passed variable has no dependencies\n      // so there is nothing else to do\n      if (arrayWhereDependenciesWillBeAdded.indexOf(variableToBeChecked) === -1) {\n        arrayWhereDependenciesWillBeAdded.push(variableToBeChecked);\n      }\n      return arrayWhereDependenciesWillBeAdded;\n    } else {\n      ref2 = symbolsDependencies[variableToBeChecked];\n      // recursion case: we have to dig deeper\n      for (l1 = 0, len = ref2.length; l1 < len; l1++) {\n        i = ref2[l1];\n        // check that there is no recursion in dependencies\n        // we do that by keeping a list of variables that\n        // have already been \"fleshed-out\". If we encounter\n        // any of those \"fleshed-out\" variables while\n        // fleshing out, then there is a cycle \n        if (chainBeingChecked.indexOf(i) !== -1) {\n          if (DEBUG) {\n            console.log(\"  found cycle:\");\n          }\n          cyclesDescription = \"\";\n          for (m1 = 0, len1 = chainBeingChecked.length; m1 < len1; m1++) {\n            k = chainBeingChecked[m1];\n            if (variablesWithCycles.indexOf(k) === -1) {\n              variablesWithCycles.push(k);\n            }\n            if (DEBUG) {\n              console.log(k + \" --> \");\n            }\n            cyclesDescription += k + \" --> \";\n          }\n          if (DEBUG) {\n            console.log(\" ... then \" + i + \" again\");\n          }\n          cyclesDescription += \" ... then \" + i + \" again\";\n          cyclesDescriptions.push(cyclesDescription);\n          //if DEBUG then console.log \"    --> cycle through \" + i\n          // we want to flesh-out i but it's already been\n          // fleshed-out, just add it to the variables\n          // with cycles and move on\n          // todo refactor this, there are two copies of these two lines\n          if (variablesWithCycles.indexOf(i) === -1) {\n            variablesWithCycles.push(i);\n          }\n        } else {\n          // flesh-out i recursively\n          recursiveDependencies(i, arrayWhereDependenciesWillBeAdded, variablesAlreadyFleshedOut, variablesWithCycles, chainBeingChecked, cyclesDescriptions);\n          chainBeingChecked.pop();\n        }\n      }\n      //variablesAlreadyFleshedOut.pop()\n      return arrayWhereDependenciesWillBeAdded;\n    }\n  };\n\n  // parses and runs one statement/expression at a time\n  inited = false;\n\n  latexErrorSign = \"\\\\rlap{\\\\large\\\\color{red}\\\\bigtriangleup}{\\\\ \\\\ \\\\tiny\\\\color{red}!}\";\n\n  turnErrorMessageToLatex = function(theErrorMessage) {\n    theErrorMessage = theErrorMessage.replace(/\\n/g, \"\");\n    theErrorMessage = theErrorMessage.replace(/_/g, \"} \\\\_ \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(transpose_unicode), 'g'), \"}{}^{T}\\\\text{\");\n    theErrorMessage = theErrorMessage.replace(new RegExp(String.fromCharCode(dotprod_unicode), 'g'), \"}\\\\cdot \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"Stop:\", \"}  \\\\quad \\\\text{Stop:\");\n    theErrorMessage = theErrorMessage.replace(\"->\", \"}  \\\\rightarrow \\\\text{\");\n    theErrorMessage = theErrorMessage.replace(\"?\", \"}\\\\enspace \" + latexErrorSign + \" \\\\enspace  \\\\text{\");\n    theErrorMessage = \"$$\\\\text{\" + theErrorMessage.replace(/\\n/g, \"\") + \"}$$\";\n    //console.log \"theErrorMessage: \" + theErrorMessage\n    return theErrorMessage;\n  };\n\n  // there are around a dozen different unicodes that\n  // represent some sort of middle dot, let's catch the most\n  // common and turn them into what we can process\n  normaliseDots = function(stringToNormalise) {\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8901), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(8226), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(12539), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(55296), 'g'), String.fromCharCode(dotprod_unicode));\n    stringToNormalise = stringToNormalise.replace(new RegExp(String.fromCharCode(65381), 'g'), String.fromCharCode(dotprod_unicode));\n    return stringToNormalise;\n  };\n\n  TIMING_DEBUGS = false;\n\n  run = function(stringToBeRun, generateLatex = false) {\n    var allReturnedLatexStrings, allReturnedPlainStrings, collectedLatexResult, collectedPlainResult, error, errorWhileExecution, i, indexOfPartRemainingToBeParsed, n, stringToBeReturned, theErrorMessage, timeStart, timingDebugWrite;\n    timeStart = new Date().getTime();\n    //stringToBeRun = stringToBeRun + \"\\n\"\n    stringToBeRun = normaliseDots(stringToBeRun);\n    //console.log \"run running: \" + stringToBeRun\n    if (stringToBeRun === \"selftest\") {\n      selftest();\n      return;\n    }\n    if (!inited) {\n      inited = true;\n      init();\n    }\n    i = 0;\n    n = 0;\n    indexOfPartRemainingToBeParsed = 0;\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    while (1) {\n      try {\n        // while we can keep scanning commands out of the\n        // passed input AND we can execute them...\n        errorMessage = \"\";\n        check_stack();\n        n = scan(stringToBeRun.substring(indexOfPartRemainingToBeParsed));\n        p1 = pop();\n        check_stack();\n      } catch (error1) {\n        error = error1;\n        if (PRINTOUTRESULT) {\n          console.log(error);\n        }\n        //debugger\n        allReturnedPlainStrings += error.message;\n        if (generateLatex) {\n          //debugger\n          theErrorMessage = turnErrorMessageToLatex(error.message);\n          allReturnedLatexStrings += theErrorMessage;\n        }\n        reset_after_error();\n        break;\n      }\n      if (n === 0) {\n        break;\n      }\n      // if debug mode then print the source text\n\n      //if (equaln(get_binding(symbol(TRACE)), 1)) {\n      //  for (i = 0 i < n i++)\n      //    if (s[i] != '\\r')\n      //      printchar(s[i])\n      //  if (s[n - 1] != '\\n') # n is not zero, see above\n      //    printchar('\\n')\n      //}\n      indexOfPartRemainingToBeParsed += n;\n      push(p1);\n      //debugger\n      errorWhileExecution = false;\n      try {\n        stringsEmittedByUserPrintouts = \"\";\n        top_level_eval();\n        //console.log \"emitted string after top_level_eval(): >\" + stringsEmittedByUserPrintouts + \"<\"\n        //console.log \"allReturnedPlainStrings string after top_level_eval(): >\" + allReturnedPlainStrings + \"<\"\n        p2 = pop();\n        check_stack();\n        if (isstr(p2)) {\n          if (DEBUG) {\n            console.log(p2.str);\n          }\n          if (DEBUG) {\n            console.log(\"\\n\");\n          }\n        }\n        // if the return value is nil there isn't much point\n        // in adding \"nil\" to the printout\n        if (p2 === symbol(NIL)) {\n          //collectedPlainResult = stringsEmittedByUserPrintouts\n          collectedPlainResult = stringsEmittedByUserPrintouts;\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + stringsEmittedByUserPrintouts + \"$$\";\n          }\n        } else {\n          //console.log \"emitted string before collectPlainStringFromReturnValue: >\" + stringsEmittedByUserPrintouts + \"<\"\n          //console.log \"allReturnedPlainStrings string before collectPlainStringFromReturnValue: >\" + allReturnedPlainStrings + \"<\"\n          collectedPlainResult = print_expr(p2);\n          collectedPlainResult += \"\\n\";\n          //console.log \"collectedPlainResult: >\" + collectedPlainResult + \"<\"\n          if (generateLatex) {\n            collectedLatexResult = \"$$\" + collectLatexStringFromReturnValue(p2) + \"$$\";\n            if (DEBUG) {\n              console.log(\"collectedLatexResult: \" + collectedLatexResult);\n            }\n          }\n        }\n        allReturnedPlainStrings += collectedPlainResult;\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n        }\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"printline\");\n          }\n          if (DEBUG) {\n            console.log(collectedPlainResult);\n          }\n        }\n        //alert collectedPlainResult\n        if (PRINTOUTRESULT) {\n          if (DEBUG) {\n            console.log(\"display:\");\n          }\n          print2dascii(p2);\n        }\n        if (generateLatex) {\n          allReturnedLatexStrings += \"\\n\";\n        }\n      } catch (error1) {\n        error = error1;\n        errorWhileExecution = true;\n        collectedPlainResult = error.message;\n        if (generateLatex) {\n          collectedLatexResult = turnErrorMessageToLatex(error.message);\n        }\n        if (PRINTOUTRESULT) {\n          console.log(collectedPlainResult);\n        }\n        allReturnedPlainStrings += collectedPlainResult;\n        if (collectedPlainResult !== \"\") {\n          allReturnedPlainStrings += \"\\n\";\n        }\n        if (generateLatex) {\n          allReturnedLatexStrings += collectedLatexResult;\n          allReturnedLatexStrings += \"\\n\";\n        }\n        init();\n      }\n    }\n    if (allReturnedPlainStrings[allReturnedPlainStrings.length - 1] === \"\\n\") {\n      allReturnedPlainStrings = allReturnedPlainStrings.substring(0, allReturnedPlainStrings.length - 1);\n    }\n    if (generateLatex) {\n      if (allReturnedLatexStrings[allReturnedLatexStrings.length - 1] === \"\\n\") {\n        allReturnedLatexStrings = allReturnedLatexStrings.substring(0, allReturnedLatexStrings.length - 1);\n      }\n    }\n    if (generateLatex) {\n      if (DEBUG) {\n        console.log(\"allReturnedLatexStrings: \" + allReturnedLatexStrings);\n      }\n      stringToBeReturned = [allReturnedPlainStrings, allReturnedLatexStrings];\n    } else {\n      stringToBeReturned = allReturnedPlainStrings;\n    }\n    if (TIMING_DEBUGS) {\n      timingDebugWrite = \"run time on: \" + stringToBeRun + \" : \" + (new Date().getTime() - timeStart) + \"ms\";\n      console.log(timingDebugWrite);\n    }\n    allReturnedPlainStrings = \"\";\n    allReturnedLatexStrings = \"\";\n    return stringToBeReturned;\n  };\n\n  check_stack = function() {\n    if (tos !== 0) {\n      debugger;\n      stop(\"stack error\");\n    }\n    if (frame !== TOS) {\n      debugger;\n      stop(\"frame error\");\n    }\n    if (chainOfUserSymbolsNotFunctionsBeingEvaluated.length !== 0) {\n      debugger;\n      stop(\"symbols evaluation still ongoing?\");\n    }\n    if (evaluatingAsFloats !== 0) {\n      debugger;\n      stop(\"numeric evaluation still ongoing?\");\n    }\n    if (evaluatingPolar !== 0) {\n      debugger;\n      return stop(\"evaluation of polar still ongoing?\");\n    }\n  };\n\n  // cannot reference symbols yet\n\n  // returns nil on stack if no result to print\n  top_level_eval = function() {\n    var evalledArgument, originalArgument, shouldAutoexpand;\n    if (DEBUG) {\n      console.log(\"#### top level eval\");\n    }\n    trigmode = 0;\n    shouldAutoexpand = symbol(AUTOEXPAND);\n    if (isZeroAtomOrTensor(get_binding(shouldAutoexpand))) {\n      expanding = 0;\n    } else {\n      expanding = 1;\n    }\n    originalArgument = top();\n    Eval();\n    evalledArgument = top();\n    // \"draw\", \"for\" and \"setq\" return \"nil\", there is no result to print\n    if (evalledArgument === symbol(NIL)) {\n      return;\n    }\n    // update \"last\" to contain the last result\n    set_binding(symbol(LAST), evalledArgument);\n    if (!isZeroAtomOrTensor(get_binding(symbol(BAKE)))) {\n      bake();\n      evalledArgument = top();\n    }\n    // If user asked explicitly asked to evaluate \"i\" or \"j\" and\n    // they represent the imaginary unit (-1)^(1/2), then \n    // show (-1)^(1/2).\n    if ((originalArgument === symbol(SYMBOL_I) || originalArgument === symbol(SYMBOL_J)) && isimaginaryunit(evalledArgument)) {\n\n    // In all other cases, replace all instances of (-1)^(1/2) in the result\n    // with the symbol \"i\" or \"j\" depending on which one\n    // represents the imaginary unit\n    } else if (isimaginaryunit(get_binding(symbol(SYMBOL_J)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_J);\n      return subst();\n    } else if (isimaginaryunit(get_binding(symbol(SYMBOL_I)))) {\n      push(imaginaryunit);\n      push_symbol(SYMBOL_I);\n      return subst();\n    }\n  };\n\n  check_esc_flag = function() {\n    if (esc_flag) {\n      return stop(\"esc key\");\n    }\n  };\n\n  // this is called when the whole notebook is re-run\n  // so we get the chance of clearing the whole state from\n  // scratch.\n  // In practice, the state we need to clear that persists\n  // across blocks are only the patterns, so\n  // just eject those.\n  clearAlgebraEnvironment = function() {\n    //console.log \"CLEARING clearAlgebraEnvironment =============================================================\"\n    return do_clearall();\n  };\n\n  computeDependenciesFromAlgebra = function(codeFromAlgebraBlock) {\n    var i, keepState, l1, len, len1, m1, originalcodeFromAlgebraBlock, userSimplificationsInProgramForm;\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra!!!\");\n    }\n    // return findDependenciesInScript(codeFromAlgebraBlock, true)[6]\n\n    // TODO this part below is duplicated from computeResultsAndJavaScriptFromAlgebra\n    //      ...should refactor.\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true;\n    //console.log \"codeFromAlgebraBlock: \" + codeFromAlgebraBlock\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1];\n        //console.log \"silentpattern(\" + car(i) + \",\"+cdr(i)+\")\"\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    }\n    if (DEBUG) {\n      console.log(\"computeDependenciesFromAlgebra: patterns in the list --------------- \");\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n      console.log(\"...end of list --------------- \");\n    }\n    called_from_Algebra_block = false;\n    return findDependenciesInScript(codeFromAlgebraBlock, true)[6];\n  };\n\n  computeResultsAndJavaScriptFromAlgebra = function(codeFromAlgebraBlock) {\n    var code, dependencyInfo, i, keepState, l1, latexResult, len, len1, m1, originalcodeFromAlgebraBlock, readableSummaryOfCode, result, stringToBeRun, testableStringIsIgnoredHere, timeStartFromAlgebra, userSimplificationsInProgramForm;\n    originalcodeFromAlgebraBlock = codeFromAlgebraBlock;\n    keepState = true;\n    called_from_Algebra_block = true;\n    timeStartFromAlgebra = new Date().getTime();\n    if (TIMING_DEBUGS) {\n      console.log(\" --------- computeResultsAndJavaScriptFromAlgebra input: \" + codeFromAlgebraBlock + \" at: \" + (new Date()));\n    }\n    // we start \"clean\" each time:\n    // clear all the symbols and then re-define\n    // the \"starting\" symbols.\n\n    //console.log \"codeFromAlgebraBlock: \" + codeFromAlgebraBlock\n    codeFromAlgebraBlock = normaliseDots(codeFromAlgebraBlock);\n    stringToBeRun = codeFromAlgebraBlock;\n    if (DEBUG) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra: patterns in the list --------------- \");\n      for (l1 = 0, len = userSimplificationsInListForm.length; l1 < len; l1++) {\n        i = userSimplificationsInListForm[l1];\n        console.log(car(i) + \",\" + cdr(i) + \")\");\n      }\n      console.log(\"...end of list --------------- \");\n    }\n    if (!keepState) {\n      userSimplificationsInListForm = [];\n      userSimplificationsInProgramForm = \"\";\n      for (m1 = 0, len1 = userSimplificationsInListForm.length; m1 < len1; m1++) {\n        i = userSimplificationsInListForm[m1];\n        //console.log \"silentpattern(\" + car(i) + \",\"+cdr(i)+\")\"\n        userSimplificationsInProgramForm += \"silentpattern(\" + car(i) + \",\" + car(cdr(i)) + \",\" + car(cdr(cdr(i))) + \")\\n\";\n      }\n      do_clearall();\n      codeFromAlgebraBlock = userSimplificationsInProgramForm + codeFromAlgebraBlock;\n      if (DEBUG) {\n        console.log(\"codeFromAlgebraBlock including patterns: \" + codeFromAlgebraBlock);\n      }\n    }\n    //debugger\n    [testableStringIsIgnoredHere, result, code, readableSummaryOfCode, latexResult, errorMessage, dependencyInfo] = findDependenciesInScript(codeFromAlgebraBlock);\n    called_from_Algebra_block = false;\n    if (readableSummaryOfCode !== \"\" || errorMessage !== \"\") {\n      result += \"\\n\" + readableSummaryOfCode;\n      if (errorMessage !== \"\") {\n        result += \"\\n\" + errorMessage;\n      }\n      result = result.replace(/\\n/g, \"\\n\\n\");\n      latexResult += \"\\n\" + \"$$\" + readableSummaryOfCode + \"$$\";\n      if (errorMessage !== \"\") {\n        latexResult += turnErrorMessageToLatex(errorMessage);\n      }\n      latexResult = latexResult.replace(/\\n/g, \"\\n\\n\");\n    }\n    // remove empty results altogether from latex output, which happens\n    // for example for assignments to variables or\n    // functions definitions\n    latexResult = latexResult.replace(/\\n*/, \"\");\n    latexResult = latexResult.replace(/\\$\\$\\$\\$\\n*/g, \"\");\n    code = code.replace(/Math\\./g, \"\");\n    code = code.replace(/\\n/g, \"\\n\\n\");\n    //console.log \"code: \" + code\n    //console.log \"result: \" + result\n    //console.log \"latexResult: \" + latexResult\n    if (TIMING_DEBUGS) {\n      console.log(\"computeResultsAndJavaScriptFromAlgebra time (total time from notebook and back) for: \" + stringToBeRun + \" : \" + ((new Date().getTime()) - timeStartFromAlgebra) + \"ms\");\n    }\n    return {\n      //code: \"// no code generated yet\\n//try again later\"\n      //code: \"console.log('some passed code is run'); window.something = 1;\"\n      code: code,\n      // TODO temporarily pass latex in place of standard result too\n      result: latexResult,\n      latexResult: latexResult,\n      dependencyInfo: dependencyInfo\n    };\n  };\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).run = run;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).findDependenciesInScript = findDependenciesInScript;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeDependenciesFromAlgebra = computeDependenciesFromAlgebra;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).computeResultsAndJavaScriptFromAlgebra = computeResultsAndJavaScriptFromAlgebra;\n\n  (typeof exports !== \"undefined\" && exports !== null ? exports : this).clearAlgebraEnvironment = clearAlgebraEnvironment;\n\n  //   _______\n  //  |  | <- stack\n  //  |  |\n  //  |_______|\n  //  |  | <- stack + tos\n  //  |  |\n  //  |  |\n  //  |_______|\n  //  |  | <- frame\n  //  |_______|\n  //      <- stack + TOS\n\n  //  The stack grows from low memory towards high memory. This is so that\n  //  multiple expressions can be pushed on the stack and then accessed as an\n  //  array.\n\n  //  The frame area holds local variables and grows from high memory towards\n  //  low memory. The frame area makes local variables visible to the garbage\n  //  collector.\n  tos = 0;\n\n  // p is a U\n  nil_symbols = 0;\n\n  push = function(p) {\n    if (p == null) {\n      debugger;\n    }\n    if (p.isZero != null) {\n      debugger;\n    }\n    //console.log \"pushing \"\n    //console.log print_list(p)\n    if (p === symbol(NIL)) {\n      nil_symbols++;\n      if (DEBUG) {\n        console.log(\"pushing symbol(NIL) #\" + nil_symbols);\n      }\n    }\n    //if nil_symbols == 111\n    //  debugger\n    if (tos >= frame) {\n      stop(\"stack overflow\");\n    }\n    return stack[tos++] = p;\n  };\n\n  // returns a U\n  moveTos = function(stackPos) {\n    if (tos <= stackPos) {\n      // we are moving the stack pointer\n      // \"up\" the stack (as if we were doing a push)\n      tos = stackPos;\n      return;\n    }\n    // we are moving the stack pointer\n    // \"down\" the stack i.e. as if we were\n    // doing a pop, we can zero-\n    // out all the elements that we pass\n    // so we can reclaim the memory\n    while (tos > stackPos) {\n      stack[tos] = null;\n      tos--;\n    }\n  };\n\n  top = function() {\n    return stack[tos - 1];\n  };\n\n  pop = function() {\n    var elementToBeReturned;\n    //popsNum++\n    //console.log \"pop #\" + popsNum\n    if (tos === 0) {\n      debugger;\n      stop(\"stack underflow\");\n    }\n    if (stack[tos - 1] == null) {\n      debugger;\n    }\n    elementToBeReturned = stack[--tos];\n    \n    // give a chance to the garbage\n    // collection to reclaim space\n    // This is JS-specific, it would\n    // actually make the C garbage\n    // collector useless.\n    stack[tos] = null;\n    return elementToBeReturned;\n  };\n\n  // n is an integer\n  push_frame = function(n) {\n    var i, l1, ref2, results;\n    i = 0;\n    frame -= n;\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n    results = [];\n    for (i = l1 = 0, ref2 = n; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      results.push(stack[frame + i] = symbol(NIL));\n    }\n    return results;\n  };\n\n  // n is an integer\n  pop_frame = function(n) {\n    frame += n;\n    if (frame > TOS) {\n      return stop(\"frame underflow\");\n    }\n  };\n\n  save = function() {\n    frame -= 10;\n    if (frame < tos) {\n      debugger;\n      stop(\"frame overflow, circular reference?\");\n    }\n    stack[frame + 0] = p0;\n    stack[frame + 1] = p1;\n    stack[frame + 2] = p2;\n    stack[frame + 3] = p3;\n    stack[frame + 4] = p4;\n    stack[frame + 5] = p5;\n    stack[frame + 6] = p6;\n    stack[frame + 7] = p7;\n    stack[frame + 8] = p8;\n    return stack[frame + 9] = p9;\n  };\n\n  restore = function() {\n    if (frame > TOS - 10) {\n      stop(\"frame underflow\");\n    }\n    p0 = stack[frame + 0];\n    p1 = stack[frame + 1];\n    p2 = stack[frame + 2];\n    p3 = stack[frame + 3];\n    p4 = stack[frame + 4];\n    p5 = stack[frame + 5];\n    p6 = stack[frame + 6];\n    p7 = stack[frame + 7];\n    p8 = stack[frame + 8];\n    p9 = stack[frame + 9];\n    return frame += 10;\n  };\n\n  // Local U * is OK here because there is no functional path to the garbage collector.\n  swap = function() {\n    var p, q;\n    //U *p, *q\n    // p and q are both Us\n    p = pop();\n    q = pop();\n    push(p);\n    return push(q);\n  };\n\n  // Local U * is OK here because there is no functional path to the garbage collector.\n  dupl = function() {\n    var p;\n    //U *p\n    p = pop();\n    push(p);\n    return push(p);\n  };\n\n  $.dupl = dupl;\n\n  $.swap = swap;\n\n  $.restore = restore;\n\n  $.save = save;\n\n  $.push = push;\n\n  $.pop = pop;\n\n  // The symbol table is a simple array of struct U.\n\n  // put symbol at index n\n  Eval_symbolsinfo = function() {\n    var symbolsinfoToBePrinted;\n    symbolsinfoToBePrinted = symbolsinfo();\n    if (symbolsinfoToBePrinted !== \"\") {\n      return push(new_string(symbolsinfoToBePrinted));\n    } else {\n      return push_symbol(NIL);\n    }\n  };\n\n  symbolsinfo = function() {\n    var bindingi, i, l1, ref2, ref3, symbolsinfoToBePrinted, symtabi;\n    symbolsinfoToBePrinted = \"\";\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; (ref2 <= ref3 ? l1 < ref3 : l1 > ref3); i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n      symtabi = symtab[i] + \"\";\n      bindingi = (binding[i] + \"\").substring(0, 4);\n      symbolsinfoToBePrinted += \"symbol: \" + symtabi + \" size: \" + countsize(binding[i]) + \" value: \" + bindingi + \"...\\n\";\n    }\n    return symbolsinfoToBePrinted;\n  };\n\n  // s is a string, n is an int\n  // TODO: elsewhere when we create a symbol we\n  // rather prefer to create a new entry. Here we just\n  // reuse the existing one. If that can never be a problem\n  // then explain why, otherwise do create a new entry.\n  std_symbol = function(s, n, latexPrint) {\n    var p;\n    p = symtab[n];\n    if (p == null) {\n      debugger;\n    }\n    p.printname = s;\n    if (latexPrint != null) {\n      return p.latexPrint = latexPrint;\n    } else {\n      return p.latexPrint = s;\n    }\n  };\n\n  // symbol lookup, or symbol creation if symbol doesn't exist yet\n  // this happens often from the scanner. When the scanner sees something\n  // like myVar = 2, it create a tree (SETQ (\"myVar\" symbol as created/looked up here (2)))\n  // user-defined functions also have a usr symbol.\n\n  // Note that some symbols like, say, \"abs\",\n  // are picked up by the scanner directly as keywords,\n  // so they are not looked up via this.\n  // So in fact you could redefine abs to be abs(x) = x\n  // but still abs would be picked up by the scanner as a particular\n  // node type and calls to abs() will be always to the \"native\" abs\n\n  // Also note that some symbols such as \"zero\" are (strangely) not picked up by\n  // the scanner as special nodes, rather they are identified as keywords\n  // (e.g. not redefinable) at time of symbol lookup (in Eval_sym) and\n  // evalled, where eval has a case for ZERO.\n\n  // Also note that there are a number of symbols, such as a,b,c,x,y,z,...\n  // that are actually created by std_symbols.\n  // They are not special node types (like abs), they are normal symbols\n  // that are looked up, but the advantage is that since they are often\n  // used internally by algebrite, we create the symbol in advance and\n  // we can reference the symbol entry in a clean way\n  // (e.g. symbol(SYMBOL_X)) rather than\n  // by looking up a string.\n\n  // s is a string\n  usr_symbol = function(s) {\n    var i, l1, ref2;\n    //console.log \"usr_symbol of \" + s\n    //if s == \"aaa\"\n    //  debugger\n\n    // find either the existing symbol, or if we\n    // reach an empty symbol (printname == \"\") then\n    // re-use that location.\n    i = 0;\n    for (i = l1 = 0, ref2 = NSYM; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      if (s === symtab[i].printname) {\n        // found the symbol\n        return symtab[i];\n      }\n      if (symtab[i].printname === \"\") {\n        // found an entry in the symbol table\n        // with no printname, exit the loop\n        // and re-use this location\n        break;\n      }\n    }\n    if (i === NSYM) {\n      stop(\"symbol table overflow\");\n    }\n    symtab[i] = new U();\n    symtab[i].k = SYM;\n    symtab[i].printname = s;\n    // say that we just created the symbol\n    // then, binding[the new symbol entry]\n    // by default points to the symbol.\n    // So the value of an unassigned symbol will\n    // be just its name.\n    binding[i] = symtab[i];\n    isSymbolReclaimable[i] = false;\n    return symtab[i];\n  };\n\n  // get the symbol's printname\n\n  // p is a U\n  get_printname = function(p) {\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    return p.printname;\n  };\n\n  // p and q are both U\n  // there are two Us at play here. One belongs to the\n  // symtab array and is the variable name.\n  // The other one is the U with the content, and that\n  // one will go in the corresponding \"binding\" array entry.\n  set_binding = function(p, q) {\n    var indexFound;\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    //console.log \"setting binding of \" + p.toString() + \" to: \" + q.toString()\n    //if p.toString() == \"aaa\"\n    //  debugger\n    indexFound = symtab.indexOf(p);\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n    */\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n    if (DEBUG) {\n      console.log(\"lookup >> set_binding lookup \" + indexFound);\n    }\n    isSymbolReclaimable[indexFound] = false;\n    return binding[indexFound] = q;\n  };\n\n  // p is a U\n  get_binding = function(p) {\n    var indexFound;\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    //console.log \"getting binding of \" + p.toString()\n    //if p.toString() == \"aaa\"\n    //  debugger\n    indexFound = symtab.indexOf(p);\n    /*\n    if indexFound == -1\n      debugger\n      for i in [0...symtab.length]\n        if p.printname == symtab[i].printname\n          indexFound = i\n          console.log \"remedied an index not found!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n          break\n    */\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n    if (DEBUG) {\n      console.log(\"lookup >> get_binding lookup \" + indexFound);\n    }\n    //if indexFound == 139\n    //  debugger\n    //if indexFound == 137\n    //  debugger\n    return binding[indexFound];\n  };\n\n  // the concept of user symbol is a little fuzzy\n  // beucase mathematics is full of symbols that actually\n  // have a special meaning, e.g. e,i,I in some cases j...\n  is_usr_symbol = function(p) {\n    var theSymnum;\n    if (p.k !== SYM) {\n      return false;\n    }\n    theSymnum = symnum(p);\n    // see \"defs\" file for the naming of the symbols\n    if (theSymnum > PI && theSymnum !== SYMBOL_I && theSymnum !== SYMBOL_IDENTITY_MATRIX) {\n      return true;\n    }\n    return false;\n  };\n\n  // get symbol's number from ptr\n  // p is U\n  lookupsTotal = 0;\n\n  symnum = function(p) {\n    var indexFound;\n    lookupsTotal++;\n    if (p.k !== SYM) {\n      stop(\"symbol error\");\n    }\n    indexFound = symtab.indexOf(p);\n    if (symtab.indexOf(p, indexFound + 1) !== -1) {\n      console.log(\"ops, more than one element!\");\n      debugger;\n    }\n    if (DEBUG) {\n      console.log(\"lookup >> symnum lookup \" + indexFound + \" lookup # \" + lookupsTotal);\n    }\n    //if lookupsTotal == 21\n    //  debugger\n    //if indexFound == 79\n    //  debugger\n    return indexFound;\n  };\n\n  // push indexed symbol\n\n  // k is an int\n  push_symbol = function(k) {\n    return push(symtab[k]);\n  };\n\n  clear_symbols = function() {\n    var i, l1, ref2, ref3, results;\n// we can clear just what's assignable.\n// everything before NIL is not assignable,\n// so there is no need to clear it.\n    results = [];\n    for (i = l1 = ref2 = NIL + 1, ref3 = NSYM; (ref2 <= ref3 ? l1 < ref3 : l1 > ref3); i = ref2 <= ref3 ? ++l1 : --l1) {\n      // stop at the first empty\n      // entry that is not reclaimable\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n      symtab[i] = new U();\n      symtab[i].k = SYM;\n      binding[i] = symtab[i];\n      results.push(isSymbolReclaimable[i] = false);\n    }\n    return results;\n  };\n\n  //symtab[i].printname = \"\"\n  //binding[i] = symtab[i]\n\n  // collect all the variables in a tree\n  collectUserSymbols = function(p, accumulator = []) {\n    var i, l1, ref2;\n    if (is_usr_symbol(p)) {\n      if (accumulator.indexOf(p) === -1) {\n        accumulator.push(p);\n        return;\n      }\n    }\n    if (istensor(p)) {\n      for (i = l1 = 0, ref2 = p.tensor.nelem; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n        collectUserSymbols(p.tensor.elem[i], accumulator);\n      }\n      return;\n    }\n    while (iscons(p)) {\n      collectUserSymbols(car(p), accumulator);\n      p = cdr(p);\n    }\n  };\n\n  $.get_binding = get_binding;\n\n  $.set_binding = set_binding;\n\n  $.usr_symbol = usr_symbol;\n\n  $.symbolsinfo = symbolsinfo;\n\n  $.collectUserSymbols = collectUserSymbols;\n\n  if (!inited) {\n    inited = true;\n    init();\n  }\n\n  $.init = init;\n\n  parse_internal = function(argu) {\n    if (typeof argu === 'string') {\n      return scan(argu);\n    // now its in the stack\n    } else if (typeof argu === 'number') {\n      if (argu % 1 === 0) {\n        return push_integer(argu);\n      } else {\n        return push_double(argu);\n      }\n    } else if (argu instanceof U) {\n      // hey look its a U\n      return push(argu);\n    } else {\n      console.warn('unknown argument type', argu);\n      return push(symbol(NIL));\n    }\n  };\n\n  parse = function(argu) {\n    var data, error;\n    try {\n      parse_internal(argu);\n      data = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n    return data;\n  };\n\n  // exec handles the running ia JS of all the algebrite\n  // functions. The function name is passed in \"name\" and\n  // the corresponding function is pushed at the top of the stack\n  exec = function(name, ...argus) {\n    var argu, error, fn, l1, len, result;\n    fn = get_binding(usr_symbol(name));\n    check_stack();\n    push(fn);\n    for (l1 = 0, len = argus.length; l1 < len; l1++) {\n      argu = argus[l1];\n      parse_internal(argu);\n    }\n    list(1 + argus.length);\n    p1 = pop();\n    push(p1);\n    try {\n      top_level_eval();\n      result = pop();\n      check_stack();\n    } catch (error1) {\n      error = error1;\n      reset_after_error();\n      throw error;\n    }\n    return result;\n  };\n\n  $.exec = exec;\n\n  $.parse = parse;\n\n  (function() {\n    var builtin_fns, fn, l1, len, results;\n    builtin_fns = [\"abs\", \"add\", \"adj\", \"and\", \"approxratio\", \"arccos\", \"arccosh\", \"arcsin\", \"arcsinh\", \"arctan\", \"arctanh\", \"arg\", \"atomize\", \"besselj\", \"bessely\", \"binding\", \"binomial\", \"ceiling\", \"check\", \"choose\", \"circexp\", \"clear\", \"clearall\", \"clearpatterns\", \"clock\", \"coeff\", \"cofactor\", \"condense\", \"conj\", \"contract\", \"cos\", \"cosh\", \"decomp\", \"defint\", \"deg\", \"denominator\", \"det\", \"derivative\", \"dim\", \"dirac\", \"divisors\", \"do\", \"dot\", \"draw\", \"dsolve\", \"eigen\", \"eigenval\", \"eigenvec\", \"erf\", \"erfc\", \"eval\", \"exp\", \"expand\", \"expcos\", \"expsin\", \"factor\", \"factorial\", \"factorpoly\", \"filter\", \"float\", \"floor\", \"for\", \"Gamma\", \"gcd\", \"hermite\", \"hilbert\", \"imag\", \"component\", \"inner\", \"integral\", \"inv\", \"invg\", \"isinteger\", \"isprime\", \"laguerre\", \"lcm\", \"leading\", \"legendre\", \"log\", \"mod\", \"multiply\", \"not\", \"nroots\", \"number\", \"numerator\", \"operator\", \"or\", \"outer\", \"pattern\", \"patternsinfo\", \"polar\", \"power\", \"prime\", \"print\", \"print2dascii\", \"printcomputer\", \"printlatex\", \"printlist\", \"printhuman\", \"product\", \"quote\", \"quotient\", \"rank\", \"rationalize\", \"real\", \"rect\", \"roots\", \"round\", \"equals\", \"shape\", \"sgn\", \"silentpattern\", \"simplify\", \"sin\", \"sinh\", \"sqrt\", \"stop\", \"subst\", \"sum\", \"symbolsinfo\", \"tan\", \"tanh\", \"taylor\", \"test\", \"testeq\", \"testge\", \"testgt\", \"testle\", \"testlt\", \"transpose\", \"unit\", \"zero\"];\n    results = [];\n    for (l1 = 0, len = builtin_fns.length; l1 < len; l1++) {\n      fn = builtin_fns[l1];\n      results.push($[fn] = exec.bind(this, fn));\n    }\n    return results;\n  })();\n\n  freeze = function() {\n    var frozenContents, frozenHash, frozenPatterns, frozenSymbols, i, l1, ref2;\n    frozenSymbols = [];\n    frozenContents = [];\n    frozenPatterns = [];\n    frozenHash = \"\";\n    for (i = l1 = 0, ref2 = symtab.length; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      //if symtab[i].printname == \"\"\n      //  if isSymbolReclaimable[i] == false\n      //    break\n      //  else\n      //    continue\n      if (isSymbolReclaimable[i] === false) {\n        frozenSymbols.push(symtab[i]);\n        frozenContents.push(binding[i]);\n      }\n    }\n    // just clone them\n    frozenPatterns = userSimplificationsInListForm.slice(0);\n    return [frozenSymbols, frozenContents, frozenPatterns, zero, one, imaginaryunit, getStateHash()];\n  };\n\n  unfreeze = function(frozen) {\n    var frozenContents, frozenPatterns, frozenSymbols, i, l1, ref2;\n    [frozenSymbols, frozenContents, frozenPatterns, zero, one, imaginaryunit] = frozen;\n//clear_symbols()\n    for (i = l1 = 0, ref2 = frozenSymbols.length; (0 <= ref2 ? l1 < ref2 : l1 > ref2); i = 0 <= ref2 ? ++l1 : --l1) {\n      symtab[i] = frozenSymbols[i];\n      binding[i] = frozenContents[i];\n    }\n    return userSimplificationsInListForm = frozenPatterns.slice(0);\n  };\n\n  compareState = function(previousHash) {\n    var frozenHash;\n    frozenHash = getStateHash();\n    if (frozenHash === previousHash) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  getStateHash = function() {\n    var bindingi, frozenHash, i, l1, len, m1, ref2, ref3, symtabi;\n    frozenHash = \"\";\n    for (i = l1 = ref2 = NIL + 1, ref3 = symtab.length; (ref2 <= ref3 ? l1 < ref3 : l1 > ref3); i = ref2 <= ref3 ? ++l1 : --l1) {\n      if (symtab[i].printname === \"\") {\n        if (isSymbolReclaimable[i] === false) {\n          break;\n        } else {\n          continue;\n        }\n      }\n      symtabi = print_list(symtab[i]);\n      bindingi = print_list(binding[i]);\n      frozenHash += \" //\" + symtabi + \" : \" + bindingi;\n    }\n    for (m1 = 0, len = userSimplificationsInListForm.length; m1 < len; m1++) {\n      i = userSimplificationsInListForm[m1];\n      frozenHash += \" pattern: \" + i;\n    }\n    if (DEBUG) {\n      console.log(\"frozenHash: \" + frozenHash);\n    }\n    return frozenHash;\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}