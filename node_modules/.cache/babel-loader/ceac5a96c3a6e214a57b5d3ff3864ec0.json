{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Regression/MultipleLinear.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { lusolve, round, squeeze } from 'mathjs';\nconst InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar columns = [{\n  title: \"No.\",\n  dataIndex: \"no\",\n  key: \"no\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Y\",\n  dataIndex: \"y\",\n  key: \"y\"\n}];\nvar x, y, tableTag, fx, regressionMatrixX, regressionMatrixY, matrixA, matrixB, answer;\n\nclass MultipleLinear extends Component {\n  constructor() {\n    super();\n    x = [];\n    y = [];\n    tableTag = [];\n    this.state = {\n      nPoints: 0,\n      X: 0,\n      interpolatePoint: 0,\n      showInputForm: true,\n      showTableInput: false,\n      showOutputCard: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  createTableInput(n, X) {\n    for (var i = 1; i <= n; i++) {\n      x[i] = [];\n\n      for (var j = 1; j <= X; j++) {\n        x[i].push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"70%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\",\n            justifyContent: \"center\"\n          },\n          id: \"x\" + i + \"\" + j,\n          placeholder: \"x\" + i + \"\" + j\n        }, \"x\" + i + \"\" + j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 27\n        }, this));\n      }\n\n      y.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"100%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"y\" + i,\n        placeholder: \"y\" + i\n      }, \"y\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 20\n      }, this));\n      tableTag.push({\n        no: i,\n        x: x[i],\n        y: y[i - 1]\n      });\n    }\n\n    regressionMatrixX = new Array(X + 1);\n    regressionMatrixY = new Array(X + 1);\n\n    for (i = 1; i <= X + 1; i++) {\n      regressionMatrixX[i] = [];\n\n      for (j = 1; j <= X + 1; j++) {\n        regressionMatrixX[i][j] = [];\n      }\n    }\n\n    this.setState({\n      showInputForm: false,\n      showTableInput: true\n    });\n  }\n\n  initialValue(n, X) {\n    x = new Array(X + 1);\n    y = [];\n\n    for (var i = 1; i <= X; i++) {\n      x[i] = [];\n\n      for (var j = 1; j <= n; j++) {\n        x[i][j] = parseInt(document.getElementById(\"x\" + j + \"\" + i).value);\n      }\n    }\n\n    for (i = 1; i <= n; i++) {\n      y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n    }\n  }\n\n  multipleLinear(n, X) {\n    for (var i = 1; i <= X + 1; i++) {\n      for (var j = i; j <= X + 1; j++) {\n        if (i === 1) {\n          if (j === 1) {\n            regressionMatrixX[i][j] = n;\n            regressionMatrixY[j] = this.summation(y);\n          } else {\n            regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summation(x[j - 1]);\n            regressionMatrixY[j] = this.summationOfTwo(x[j - 1], y);\n          }\n        } else {\n          regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summationOfTwo(x[i - 1], x[j - 1]);\n        }\n      }\n    }\n\n    this.findX(X);\n  }\n\n  findX(X) {\n    matrixA = new Array(X + 1);\n    matrixB = new Array(X + 1);\n\n    for (var i = 0; i < X + 1; i++) {\n      matrixA[i] = [];\n\n      for (var j = 0; j < X + 1; j++) {\n        matrixA[i][j] = regressionMatrixX[i + 1][j + 1];\n      }\n\n      matrixB[i] = regressionMatrixY[i + 1];\n    }\n\n    answer = squeeze(round(lusolve(matrixA, matrixB)));\n    console.log(answer);\n  }\n\n  summation(A) {\n    var sum = 0;\n\n    for (var i = 1; i < A.length; i++) {\n      sum += A[i];\n    }\n\n    return sum;\n  }\n\n  summationOfTwo(A, B) {\n    var sum = 0;\n\n    for (var i = 1; i < A.length; i++) {\n      sum += A[i] * B[i];\n    }\n\n    return sum;\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#FFFF\",\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        children: \"Multiple Linear Regression\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            bordered: true,\n            style: {\n              background: \"gray\",\n              borderRadius: \"15px\",\n              color: \"#FFFFFFFF\"\n            },\n            onChange: this.handleChange,\n            children: [this.state.showInputForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Number of X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"X\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 57\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Number of points(n)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"nPoints\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 65\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"dimention_button\",\n                onClick: () => this.createTableInput(parseInt(this.state.nPoints), parseInt(this.state.X)),\n                style: {\n                  background: \"#4caf50\",\n                  color: \"white\",\n                  fontSize: \"20px\"\n                },\n                children: [\"Submit\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 47\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 33\n            }, this), this.state.showTableInput && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Table, {\n                columns: columns,\n                dataSource: tableTag,\n                pagination: false,\n                bordered: true,\n                bodyStyle: {\n                  fontWeight: \"bold\",\n                  fontSize: \"18px\",\n                  color: \"white\",\n                  overflowY: \"scroll\",\n                  minWidth: 120,\n                  maxHeight: 300\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"matrix_button\",\n                style: {\n                  background: \"blue\",\n                  color: \"white\",\n                  fontSize: \"20px\"\n                },\n                onClick: () => {\n                  this.initialValue(parseInt(this.state.nPoints), parseInt(this.state.X));\n                  this.multipleLinear(parseInt(this.state.nPoints), parseInt(this.state.X));\n                },\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(Card, {\n            title: \"Output\",\n            bordered: true,\n            style: {\n              border: \"2px solid black\",\n              background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\",\n              color: \"white\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: \"24px\",\n                fontWeight: \"bold\"\n              },\n              children: fx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MultipleLinear;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Regression/MultipleLinear.js"],"names":["React","Component","Card","Input","Button","Table","lusolve","round","squeeze","InputStyle","background","color","fontWeight","fontSize","columns","title","dataIndex","key","x","y","tableTag","fx","regressionMatrixX","regressionMatrixY","matrixA","matrixB","answer","MultipleLinear","constructor","state","nPoints","X","interpolatePoint","showInputForm","showTableInput","showOutputCard","handleChange","bind","createTableInput","n","i","j","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","justifyContent","no","Array","setState","initialValue","parseInt","document","getElementById","value","parseFloat","multipleLinear","summation","summationOfTwo","findX","console","log","A","sum","length","B","event","target","name","render","padding","borderRadius","overflowY","minWidth","maxHeight","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { lusolve, round, squeeze } from 'mathjs';\n\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag, fx, regressionMatrixX, regressionMatrixY, matrixA, matrixB, answer\n\nclass MultipleLinear extends Component {\n\n    constructor() {\n        super();\n        x = []\n        y = []\n\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            X: 0,\n            interpolatePoint: 0,\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n\n\n    }\n    createTableInput(n, X) {\n        for (var i = 1; i <= n; i++) {\n            x[i] = []\n            for (var j = 1; j <= X; j++) {\n                x[i].push(<Input style={{\n                    width: \"70%\",\n                    height: \"50%\",\n                    backgroundColor: \"black\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"white\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\",\n                    justifyContent: \"center\",\n                }}\n                    id={\"x\" + i + \"\" + j} key={\"x\" + i + \"\" + j} placeholder={\"x\" + i + \"\" + j} />);\n            }\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={\"y\" + i} />);\n            tableTag.push({\n                no: i,\n                x: x[i],\n                y: y[i - 1]\n            })\n\n        }\n        regressionMatrixX = new Array(X + 1)\n        regressionMatrixY = new Array(X + 1)\n        for (i = 1; i <= X + 1; i++) {\n            regressionMatrixX[i] = []\n            for (j = 1; j <= X + 1; j++) {\n                regressionMatrixX[i][j] = []\n            }\n        }\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true,\n        })\n    }\n    initialValue(n, X) {\n        x = new Array(X + 1)\n        y = []\n        for (var i = 1; i <= X; i++) {\n            x[i] = []\n            for (var j = 1; j <= n; j++) {\n                x[i][j] = parseInt(document.getElementById(\"x\" + j + \"\" + i).value);\n            }\n        }\n        for (i = 1; i <= n; i++) {\n            y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n        }\n    }\n    multipleLinear(n, X) {\n        for (var i = 1; i <= X + 1; i++) {\n            for (var j = i; j <= X + 1; j++) {\n                if (i === 1) {\n                    if (j === 1) {\n                        regressionMatrixX[i][j] = n\n                        regressionMatrixY[j] = this.summation(y)\n                    }\n                    else {\n                        regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summation(x[j - 1])\n                        regressionMatrixY[j] = this.summationOfTwo(x[j - 1], y)\n                    }\n\n\n                }\n                else {\n                    regressionMatrixX[i][j] = regressionMatrixX[j][i] = this.summationOfTwo(x[i - 1], x[j - 1])\n                }\n            }\n        }\n        this.findX(X)\n    }\n    findX(X) {\n        matrixA = new Array(X + 1)\n        matrixB = new Array(X + 1)\n        for (var i = 0; i < X + 1; i++) {\n            matrixA[i] = []\n            for (var j = 0; j < X + 1; j++) {\n                matrixA[i][j] = regressionMatrixX[i + 1][j + 1]\n            }\n            matrixB[i] = regressionMatrixY[i + 1]\n        }\n        answer = squeeze(round(lusolve(matrixA, matrixB)))\n        console.log(answer)\n    }\n    summation(A) {\n        var sum = 0\n        for (var i = 1; i < A.length; i++) {\n            sum += A[i]\n        }\n        return sum\n    }\n    summationOfTwo(A, B) {\n        var sum = 0\n        for (var i = 1; i < A.length; i++) {\n            sum += A[i] * B[i]\n        }\n        return sum\n    }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Multiple Linear Regression</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"gray\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2>Number of X</h2><Input size=\"large\" name=\"X\" style={InputStyle}></Input>\n                                    <h2>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" style={InputStyle}></Input>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => this.createTableInput(parseInt(this.state.nPoints), parseInt(this.state.X))}\n                                        style={{ background: \"#4caf50\", color: \"white\", fontSize: \"20px\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}></Table>\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"blue\", color: \"white\", fontSize: \"20px\" }}\n                                        onClick={() => {\n                                            this.initialValue(parseInt(this.state.nPoints), parseInt(this.state.X));\n                                            this.multipleLinear(parseInt(this.state.nPoints), parseInt(this.state.X))\n                                        }}\n                                    >\n                                        Submit\n                                </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ border: \"2px solid black\", background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\", color: \"white\" }}\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{fx}</p>\n\n                            </Card>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default MultipleLinear;"]},"metadata":{},"sourceType":"module"}