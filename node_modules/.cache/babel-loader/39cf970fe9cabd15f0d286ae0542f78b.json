{"ast":null,"code":"import _defineProperty from \"/Users/bovornpoljiturai/Numerical-method/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/bovornpoljiturai/Numerical-method/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/bovornpoljiturai/Numerical-method/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/bovornpoljiturai/Numerical-method/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/bovornpoljiturai/Numerical-method/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/bovornpoljiturai/Numerical-method/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Numerical-method/src/Calculate/Linear Algebra/Jacobi.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar A = [],\n    B = [],\n    matrixA = [],\n    matrixB = [],\n    x,\n    epsilon,\n    dataInTable = [],\n    count = 1,\n    matrixX = [];\nvar columns = [{\n  title: \"Iteration\",\n  dataIndex: \"iteration\",\n  key: \"iteration\"\n}];\n\nvar Jacobi = /*#__PURE__*/function (_Component) {\n  _inherits(Jacobi, _Component);\n\n  var _super = _createSuper(Jacobi);\n\n  function Jacobi() {\n    var _this;\n\n    _classCallCheck(this, Jacobi);\n\n    _this = _super.call(this);\n    _this.state = {\n      row: 0,\n      column: 0,\n      showDimentionForm: true,\n      showMatrixForm: false,\n      showOutputCard: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.jacobi = _this.jacobi.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Jacobi, [{\n    key: \"jacobi\",\n    value: function jacobi(n) {\n      this.initMatrix();\n      var temp;\n      var xold;\n      epsilon = new Array(n);\n\n      do {\n        temp = [];\n        xold = JSON.parse(JSON.stringify(x));\n\n        for (var i = 0; i < n; i++) {\n          var sum = 0;\n\n          for (var j = 0; j < n; j++) {\n            if (i !== j) {\n              //else i == j That is a divide number\n              sum = sum + A[i][j] * x[j];\n            }\n          }\n\n          temp[i] = (B[i] - sum) / A[i][i]; //update x[i]\n        }\n\n        x = JSON.parse(JSON.stringify(temp));\n      } while (this.error(x, xold)); //if true , continue next iteration\n\n\n      this.setState({\n        showOutputCard: true\n      });\n    }\n  }, {\n    key: \"error\",\n    value: function error(xnew, xold) {\n      for (var i = 0; i < xnew.length; i++) {\n        epsilon[i] = Math.abs((xnew[i] - xold[i]) / xnew[i]);\n      }\n\n      this.appendTable(x, epsilon);\n\n      for (i = 0; i < epsilon.length; i++) {\n        if (epsilon[i] > 0.000001) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createMatrix\",\n    value: function createMatrix(row, column) {\n      A = [];\n      B = [];\n      matrixA = [];\n      matrixB = [];\n      x = [];\n      dataInTable = [];\n\n      for (var i = 1; i <= row; i++) {\n        for (var j = 1; j <= column; j++) {\n          matrixA.push( /*#__PURE__*/_jsxDEV(Input, {\n            style: {\n              width: \"18%\",\n              height: \"50%\",\n              backgroundColor: \"#06d9a0\",\n              marginInlineEnd: \"5%\",\n              marginBlockEnd: \"5%\",\n              color: \"white\",\n              fontSize: \"18px\",\n              fontWeight: \"bold\"\n            },\n            id: \"a\" + i + \"\" + j,\n            placeholder: \"a\" + i + \"\" + j\n          }, \"a\" + i + \"\" + j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 30\n          }, this));\n        }\n\n        matrixA.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 26\n        }, this));\n        matrixB.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"b\" + i,\n          placeholder: \"b\" + i\n        }, \"b\" + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 26\n        }, this));\n        matrixX.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"black\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"x\" + i,\n          placeholder: \"x\" + i\n        }, \"x\" + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 26\n        }, this));\n      }\n\n      this.setState({\n        showDimentionForm: false,\n        showMatrixForm: true\n      });\n    }\n  }, {\n    key: \"initMatrix\",\n    value: function initMatrix() {\n      for (var i = 0; i < this.state.row; i++) {\n        A[i] = [];\n\n        for (var j = 0; j < this.state.column; j++) {\n          A[i][j] = parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value);\n        }\n\n        B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n        x.push(parseFloat(document.getElementById(\"x\" + (i + 1)).value));\n      }\n    }\n  }, {\n    key: \"initialSchema\",\n    value: function initialSchema(n) {\n      for (var i = 1; i <= n; i++) {\n        columns.push({\n          title: \"X\" + i,\n          dataIndex: \"x\" + i,\n          key: \"x\" + i\n        });\n      }\n\n      for (i = 1; i <= n; i++) {\n        columns.push({\n          title: \"Error\" + i,\n          dataIndex: \"error\" + i,\n          key: \"error\" + i\n        });\n      }\n    }\n  }, {\n    key: \"appendTable\",\n    value: function appendTable(x, error) {\n      var tag = '';\n      tag += '{\"iteration\": ' + count++ + ',';\n\n      for (var i = 0; i < x.length; i++) {\n        tag += '\"x' + (i + 1) + '\": ' + x[i].toFixed(8) + ', \"error' + (i + 1) + '\": ' + error[i].toFixed(8);\n\n        if (i !== x.length - 1) {\n          tag += ',';\n        }\n      }\n\n      tag += '}';\n      dataInTable.push(JSON.parse(tag));\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: \"#FFFF\",\n          padding: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: \"black\",\n            fontWeight: \"bold\"\n          },\n          children: \"Jacobi Iteration Method\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              bordered: true,\n              style: {\n                background: \"gray\",\n                borderRadius: \"15px\",\n                color: \"#FFFFFFFF\"\n              },\n              onChange: this.handleChange,\n              children: [this.state.showDimentionForm && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Row\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  size: \"large\",\n                  name: \"row\",\n                  style: InputStyle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Column\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  size: \"large\",\n                  name: \"column\",\n                  style: InputStyle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 52\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  id: \"dimention_button\",\n                  onClick: function onClick() {\n                    _this2.createMatrix(_this2.state.row, _this2.state.column);\n\n                    _this2.initialSchema(_this2.state.row);\n                  },\n                  style: {\n                    background: \"#4caf50\",\n                    color: \"white\",\n                    fontSize: \"20px\"\n                  },\n                  children: [\"Submit\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 47\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 33\n              }, this), this.state.showMatrixForm && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Matrix [A]\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 56\n                }, this), matrixA, /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: [\"Vector [B]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 51\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 37\n                }, this), matrixB, /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: [\"Initial X\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 50\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 37\n                }, this), matrixX, /*#__PURE__*/_jsxDEV(Button, {\n                  id: \"matrix_button\",\n                  style: {\n                    background: \"blue\",\n                    color: \"white\",\n                    fontSize: \"20px\"\n                  },\n                  onClick: function onClick() {\n                    return _this2.jacobi(parseInt(_this2.state.row));\n                  },\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Output\",\n              bordered: true,\n              style: {\n                width: \"100%\",\n                background: \"#2196f3\",\n                color: \"#FFFFFFFF\"\n              },\n              id: \"outputCard\",\n              children: /*#__PURE__*/_jsxDEV(Table, {\n                columns: columns,\n                bordered: true,\n                dataSource: dataInTable,\n                bodyStyle: {\n                  fontWeight: \"bold\",\n                  fontSize: \"18px\",\n                  color: \"black\",\n                  overflowX: \"scroll\",\n                  border: \"2px solid white\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Jacobi;\n}(Component);\n\nexport default Jacobi;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Numerical-method/src/Calculate/Linear Algebra/Jacobi.js"],"names":["React","Component","Card","Input","Button","Table","InputStyle","background","color","fontWeight","fontSize","A","B","matrixA","matrixB","x","epsilon","dataInTable","count","matrixX","columns","title","dataIndex","key","Jacobi","state","row","column","showDimentionForm","showMatrixForm","showOutputCard","handleChange","bind","jacobi","n","initMatrix","temp","xold","Array","JSON","parse","stringify","i","sum","j","error","setState","xnew","length","Math","abs","appendTable","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","parseFloat","document","getElementById","value","tag","toFixed","event","target","name","padding","borderRadius","createMatrix","initialSchema","parseInt","overflowX","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Card, Input, Button, Table} from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\", \n    fontWeight: \"bold\", \n    fontSize: \"24px\"\n\n};\n\n\nvar A = [], B = [], matrixA = [], matrixB = [], x , epsilon, dataInTable = [], count=1, matrixX = []\nvar columns = [\n    {\n      title: \"Iteration\",\n      dataIndex: \"iteration\",\n      key: \"iteration\"\n    }\n];\nclass Jacobi extends Component {\n    \n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            showDimentionForm : true,\n            showMatrixForm: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.jacobi = this.jacobi.bind(this);\n    \n    }\n\n  \n    jacobi(n) {\n        this.initMatrix();\n        var temp;\n        var xold;\n        epsilon = new Array(n);\n        do {\n            temp = [];\n            xold = JSON.parse(JSON.stringify(x));\n            for (var i=0 ; i<n ; i++) {\n                var sum = 0;\n                for (var j=0 ; j<n ; j++) {\n                    if (i !== j) { //else i == j That is a divide number\n                        sum = sum + A[i][j]*x[j];\n                    }\n                }\n                temp[i] = (B[i] - sum)/A[i][i]; //update x[i]\n                \n            }        \n            x = JSON.parse(JSON.stringify(temp));\n        } while(this.error(x, xold)); //if true , continue next iteration\n\n        this.setState({\n            showOutputCard: true\n        });\n\n      \n    }\n    error(xnew, xold) {\n        for (var i=0 ; i<xnew.length ; i++) {\n            epsilon[i] = Math.abs((xnew[i]-xold[i]) / xnew[i])\n        }\n        this.appendTable(x, epsilon);\n        for (i=0 ; i<epsilon.length ; i++) {\n            if (epsilon[i] > 0.000001) {\n                return true;\n            }    \n        }\n        return false;  \n    }   \n    createMatrix(row, column) {\n        A = []\n        B = []\n        matrixA = []\n        matrixB = []\n        x = []\n        dataInTable = []\n        for (var i=1 ; i<=row ; i++) {\n            for (var j=1 ; j<=column ; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\", \n                    backgroundColor:\"#06d9a0\", \n                    marginInlineEnd: \"5%\", \n                    marginBlockEnd: \"5%\",\n                    color: \"white\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }} \n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \n            }\n            matrixA.push(<br/>)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\n            matrixX.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"x\"+i} key={\"x\"+i} placeholder={\"x\"+i} />)  \n            \n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n        \n\n    }\n    initMatrix() {\n        for(var i=0 ; i<this.state.row ; i++) {\n            A[i] = []\n            for(var j=0 ; j<this.state.column ; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\n            x.push(parseFloat(document.getElementById(\"x\"+(i+1)).value));\n        }\n    }\n    initialSchema(n) {\n        for (var i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"X\"+i,\n                dataIndex: \"x\"+i,\n                key: \"x\"+i\n            },)\n        }\n        for (i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"Error\"+i,\n                dataIndex: \"error\"+i,\n                key: \"error\"+i\n            },)\n        }\n    }\n    appendTable(x, error) {\n        var tag = ''\n        tag += '{\"iteration\": ' + count++ + ',';\n        for (var i=0 ; i<x.length ; i++) {\n            tag += '\"x'+(i+1)+'\": '+x[i].toFixed(8)+', \"error'+(i+1)+'\": ' + error[i].toFixed(8);\n            if (i !== x.length-1) {\n                tag += ','\n            }\n        }\n        tag += '}';\n        dataInTable.push(JSON.parse(tag));  \n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        return(\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{color: \"black\", fontWeight: \"bold\"}}>Jacobi Iteration Method</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                        bordered={true}\n                        style={{ background: \"gray\", borderRadius:\"15px\", color: \"#FFFFFFFF\"}}\n                        onChange={this.handleChange}\n                        >\n                            \n                            {this.state.showDimentionForm && \n                                <div>\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" style={InputStyle}></Input>\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" style={InputStyle}></Input>\n                                    <Button id=\"dimention_button\" onClick= {\n                                        ()=>{this.createMatrix(this.state.row, this.state.column);\n                                            this.initialSchema(this.state.row)}\n                                        }  \n                                        style={{background: \"#4caf50\", color: \"white\", fontSize: \"20px\"}}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div> \n                            }\n                            \n                            {this.state.showMatrixForm && \n                                <div>\n                                    <h2>Matrix [A]</h2><br/>{matrixA}\n                                    <h2>Vector [B]<br/></h2>{matrixB}\n                                    <h2>Initial X<br/></h2>{matrixX}\n                                    <Button \n                                        id=\"matrix_button\"  \n                                        style={{background: \"blue\", color: \"white\", fontSize: \"20px\"}}\n                                        onClick={()=>this.jacobi(parseInt(this.state.row))}>\n                                        Submit\n                                    </Button>                          \n                                </div>\n                            }\n                            \n                        </Card>                        \n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard && \n                            <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{width: \"100%\", background: \"#2196f3\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                            >\n                                <Table columns={columns} bordered dataSource={dataInTable} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\", border:\"2px solid white\"}}></Table>\n                            </Card>\n                        }                          \n                    </div>\n\n                    \n\n \n\n                   \n                </div>\n\n                \n            </div>\n        );\n    }\n}\nexport default Jacobi;\n\n\n\n"]},"metadata":{},"sourceType":"module"}