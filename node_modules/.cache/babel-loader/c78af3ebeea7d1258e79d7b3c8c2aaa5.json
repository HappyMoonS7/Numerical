{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Desktop/Numerical-method(CSB)/src/Calculate/Root of Equation/Graphical.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport Graph from '../../components/Graph';\nimport { func } from '../../services/Services';\nconst InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar dataInTable;\nconst columns = [{\n  title: \"Iteration\",\n  dataIndex: \"iteration\",\n  key: \"iteration\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Y\",\n  key: \"y\",\n  dataIndex: \"y\"\n}];\n\nclass Graphical extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fx: \"\",\n      start: 0,\n      finish: 0,\n      showOutputCard: false,\n      showGraph: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.graphical = this.graphical.bind(this);\n  }\n\n  graphical() {\n    var data = [];\n    data['x'] = [];\n    data['y'] = [];\n    console.log(typeof this.state.start);\n\n    for (var i = parseInt(this.state.start); i <= parseInt(this.state.finish); i++) {\n      data['x'].push(i);\n      data['y'].push(func(this.state.fx, i));\n    }\n\n    this.createTable(data['x'], data['y']);\n    this.setState({\n      showOutputCard: true,\n      showGraph: true\n    });\n  }\n\n  createTable(x, y) {\n    dataInTable = [];\n\n    for (var i = 0; i <= parseInt(this.state.finish - this.state.start); i++) {\n      dataInTable.push({\n        iteration: i + 1,\n        x: x[i],\n        y: y[i]\n      });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    let _this$state = this.state,\n        fx = _this$state.fx,\n        start = _this$state.start,\n        finish = _this$state.finish;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#FFFF\",\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        children: \"Graphical\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              background: \"gray\",\n              color: \"#FFFFFFFF\",\n              borderRadius: \"10px\"\n            },\n            onChange: this.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"f(x)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              size: \"large\",\n              name: \"fx\",\n              style: InputStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              size: \"large\",\n              name: \"start\",\n              style: InputStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Finish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              size: \"large\",\n              name: \"finish\",\n              style: InputStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 44\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 105\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 111\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              id: \"submit_button\",\n              onClick: () => this.graphical(parseFloat(start), parseFloat(finish)),\n              style: {\n                background: \"#4caf50\",\n                color: \"white\"\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: this.state.showGraph && /*#__PURE__*/_jsxDEV(Graph, {\n            fx: fx,\n            title: \"Graphical Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(Card, {\n          title: \"Output\",\n          bordered: true,\n          style: {\n            width: \"100%\",\n            background: \"#2196f3\",\n            color: \"#FFFFFFFF\"\n          },\n          id: \"outputCard\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            columns: columns,\n            bordered: true,\n            dataSource: dataInTable,\n            bodyStyle: {\n              fontWeight: \"bold\",\n              fontSize: \"18px\",\n              color: \"black\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Graphical;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Numerical-method(CSB)/src/Calculate/Root of Equation/Graphical.js"],"names":["React","Component","Card","Input","Button","Table","Graph","func","InputStyle","background","color","fontWeight","fontSize","dataInTable","columns","title","dataIndex","key","Graphical","constructor","state","fx","start","finish","showOutputCard","showGraph","handleChange","bind","graphical","data","console","log","i","parseInt","push","createTable","setState","x","y","iteration","event","target","name","value","render","padding","borderRadius","parseFloat","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport Graph from '../../components/Graph';\nimport { func } from '../../services/Services';\n\n\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n\n};\nvar dataInTable;\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        key: \"y\",\n        dataIndex: \"y\"\n    }\n];\n\nclass Graphical extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            fx: \"\",\n            start: 0,\n            finish: 0,\n            showOutputCard: false,\n            showGraph: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.graphical = this.graphical.bind(this);\n    }\n\n    graphical() {\n        var data = []\n        data['x'] = []\n        data['y'] = []\n        console.log(typeof (this.state.start))\n        for (var i = parseInt(this.state.start); i <= parseInt(this.state.finish); i++) {\n            data['x'].push(i);\n            data['y'].push(func(this.state.fx, i));\n\n        }\n\n\n        this.createTable(data['x'], data['y']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true\n        })\n\n\n    }\n\n    createTable(x, y) {\n        dataInTable = []\n        for (var i = 0; i <= parseInt(this.state.finish - this.state.start); i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                y: y[i]\n            });\n        }\n\n    }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        let { fx, start, finish } = this.state;\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Graphical</h2>\n\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            style={{ background: \"gray\", color: \"#FFFFFFFF\", borderRadius:\"10px\" }}\n                            onChange={this.handleChange}\n                        >\n                            <h4>f(x)</h4><Input size=\"large\" name=\"fx\" style={InputStyle}></Input>\n                            <h4>Start</h4><Input size=\"large\" name=\"start\" style={InputStyle}></Input>\n                            <h4>Finish</h4><Input size=\"large\" name=\"finish\" style={InputStyle}></Input><br /><br />\n                            <Button id=\"submit_button\" onClick={\n                                () => this.graphical(parseFloat(start), parseFloat(finish))\n                            }\n                                style={{ background: \"#4caf50\", color: \"white\"}}>Submit</Button>\n\n                        </Card>                        \n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx}  title=\"Graphical Method\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#2196f3\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <Table columns={columns} bordered={true} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }                    \n                </div>\n            </div>\n        );\n    }\n}\nexport default Graphical;"]},"metadata":{},"sourceType":"module"}