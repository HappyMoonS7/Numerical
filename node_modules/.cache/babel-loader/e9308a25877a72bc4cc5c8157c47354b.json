{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Linear Algebra/Jacobi.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nconst InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar A = [],\n    B = [],\n    matrixA = [],\n    matrixB = [],\n    x,\n    epsilon,\n    dataInTable = [],\n    count = 1,\n    matrixX = [];\nvar columns = [{\n  title: \"Iteration\",\n  dataIndex: \"iteration\",\n  key: \"iteration\"\n}];\n\nclass Jacobi extends Component {\n  constructor() {\n    super();\n    this.state = {\n      row: 0,\n      column: 0,\n      showDimentionForm: true,\n      showMatrixForm: false,\n      showOutputCard: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.jacobi = this.jacobi.bind(this);\n  }\n\n  jacobi(n) {\n    this.initMatrix();\n    var temp;\n    var xold;\n    epsilon = new Array(n);\n\n    do {\n      temp = [];\n      xold = JSON.parse(JSON.stringify(x));\n\n      for (var i = 0; i < n; i++) {\n        var sum = 0;\n\n        for (var j = 0; j < n; j++) {\n          if (i !== j) {\n            //else i == j That is a divide number\n            sum = sum + A[i][j] * x[j];\n          }\n        }\n\n        temp[i] = (B[i] - sum) / A[i][i]; //update x[i]\n      }\n\n      x = JSON.parse(JSON.stringify(temp));\n    } while (this.error(x, xold)); //if true , continue next iteration\n\n\n    this.setState({\n      showOutputCard: true\n    });\n  }\n\n  error(xnew, xold) {\n    for (var i = 0; i < xnew.length; i++) {\n      epsilon[i] = Math.abs((xnew[i] - xold[i]) / xnew[i]);\n    }\n\n    this.appendTable(x, epsilon);\n\n    for (i = 0; i < epsilon.length; i++) {\n      if (epsilon[i] > 0.000001) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  createMatrix(row, column) {\n    A = [];\n    B = [];\n    matrixA = [];\n    matrixB = [];\n    x = [];\n    dataInTable = [];\n\n    for (var i = 1; i <= row; i++) {\n      for (var j = 1; j <= column; j++) {\n        matrixA.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"#06d9a0\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"a\" + i + \"\" + j,\n          placeholder: \"a\" + i + \"\" + j\n        }, \"a\" + i + \"\" + j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 30\n        }, this));\n      }\n\n      matrixA.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 26\n      }, this));\n      matrixB.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"18%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"b\" + i,\n        placeholder: \"b\" + i\n      }, \"b\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 26\n      }, this));\n      matrixX.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"18%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"x\" + i,\n        placeholder: \"x\" + i\n      }, \"x\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 26\n      }, this));\n    }\n\n    this.setState({\n      showDimentionForm: false,\n      showMatrixForm: true\n    });\n  }\n\n  initMatrix() {\n    for (var i = 0; i < this.state.row; i++) {\n      A[i] = [];\n\n      for (var j = 0; j < this.state.column; j++) {\n        A[i][j] = parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value);\n      }\n\n      B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n      x.push(parseFloat(document.getElementById(\"x\" + (i + 1)).value));\n    }\n  }\n\n  initialSchema(n) {\n    for (var i = 1; i <= n; i++) {\n      columns.push({\n        title: \"X\" + i,\n        dataIndex: \"x\" + i,\n        key: \"x\" + i\n      });\n    }\n\n    for (i = 1; i <= n; i++) {\n      columns.push({\n        title: \"Error\" + i,\n        dataIndex: \"error\" + i,\n        key: \"error\" + i\n      });\n    }\n  }\n\n  appendTable(x, error) {\n    var tag = '';\n    tag += '{\"iteration\": ' + count++ + ',';\n\n    for (var i = 0; i < x.length; i++) {\n      tag += '\"x' + (i + 1) + '\": ' + x[i].toFixed(8) + ', \"error' + (i + 1) + '\": ' + error[i].toFixed(8);\n\n      if (i !== x.length - 1) {\n        tag += ',';\n      }\n    }\n\n    tag += '}';\n    dataInTable.push(JSON.parse(tag));\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#FFFF\",\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        children: \"Jacobi Iteration Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            bordered: true,\n            style: {\n              background: \"gray\",\n              borderRadius: \"15px\",\n              color: \"#FFFFFFFF\"\n            },\n            onChange: this.handleChange,\n            children: [this.state.showDimentionForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Row\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"row\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Column\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"column\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 52\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"dimention_button\",\n                onClick: () => {\n                  this.createMatrix(this.state.row, this.state.column);\n                  this.initialSchema(this.state.row);\n                },\n                style: {\n                  background: \"#4caf50\",\n                  color: \"white\",\n                  fontSize: \"20px\"\n                },\n                children: [\"Submit\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 47\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 33\n            }, this), this.state.showMatrixForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Matrix [A]\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 56\n              }, this), matrixA, /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Vector [B]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 51\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 37\n              }, this), matrixB, /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Initial X\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 50\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 37\n              }, this), matrixX, /*#__PURE__*/_jsxDEV(Button, {\n                id: \"matrix_button\",\n                style: {\n                  background: \"blue\",\n                  color: \"white\",\n                  fontSize: \"20px\"\n                },\n                onClick: () => this.jacobi(parseInt(this.state.row)),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(Card, {\n            title: \"Output\",\n            bordered: true,\n            style: {\n              width: \"100%\",\n              background: \"#2196f3\",\n              color: \"#FFFFFFFF\"\n            },\n            id: \"outputCard\",\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              columns: columns,\n              bordered: true,\n              dataSource: dataInTable,\n              bodyStyle: {\n                fontWeight: \"bold\",\n                fontSize: \"18px\",\n                color: \"black\",\n                overflowX: \"scroll\",\n                border: \"2px solid white\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Jacobi;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Linear Algebra/Jacobi.js"],"names":["React","Component","Card","Input","Button","Table","InputStyle","background","color","fontWeight","fontSize","A","B","matrixA","matrixB","x","epsilon","dataInTable","count","matrixX","columns","title","dataIndex","key","Jacobi","constructor","state","row","column","showDimentionForm","showMatrixForm","showOutputCard","handleChange","bind","jacobi","n","initMatrix","temp","xold","Array","JSON","parse","stringify","i","sum","j","error","setState","xnew","length","Math","abs","appendTable","createMatrix","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","parseFloat","document","getElementById","value","initialSchema","tag","toFixed","event","target","name","render","padding","borderRadius","parseInt","overflowX","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Card, Input, Button, Table} from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\", \n    fontWeight: \"bold\", \n    fontSize: \"24px\"\n\n};\n\n\nvar A = [], B = [], matrixA = [], matrixB = [], x , epsilon, dataInTable = [], count=1, matrixX = []\nvar columns = [\n    {\n      title: \"Iteration\",\n      dataIndex: \"iteration\",\n      key: \"iteration\"\n    }\n];\nclass Jacobi extends Component {\n    \n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            showDimentionForm : true,\n            showMatrixForm: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.jacobi = this.jacobi.bind(this);\n    \n    }\n\n  \n    jacobi(n) {\n        this.initMatrix();\n        var temp;\n        var xold;\n        epsilon = new Array(n);\n        do {\n            temp = [];\n            xold = JSON.parse(JSON.stringify(x));\n            for (var i=0 ; i<n ; i++) {\n                var sum = 0;\n                for (var j=0 ; j<n ; j++) {\n                    if (i !== j) { //else i == j That is a divide number\n                        sum = sum + A[i][j]*x[j];\n                    }\n                }\n                temp[i] = (B[i] - sum)/A[i][i]; //update x[i]\n                \n            }        \n            x = JSON.parse(JSON.stringify(temp));\n        } while(this.error(x, xold)); //if true , continue next iteration\n\n        this.setState({\n            showOutputCard: true\n        });\n\n      \n    }\n    error(xnew, xold) {\n        for (var i=0 ; i<xnew.length ; i++) {\n            epsilon[i] = Math.abs((xnew[i]-xold[i]) / xnew[i])\n        }\n        this.appendTable(x, epsilon);\n        for (i=0 ; i<epsilon.length ; i++) {\n            if (epsilon[i] > 0.000001) {\n                return true;\n            }    \n        }\n        return false;  \n    }   \n    createMatrix(row, column) {\n        A = []\n        B = []\n        matrixA = []\n        matrixB = []\n        x = []\n        dataInTable = []\n        for (var i=1 ; i<=row ; i++) {\n            for (var j=1 ; j<=column ; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\", \n                    backgroundColor:\"#06d9a0\", \n                    marginInlineEnd: \"5%\", \n                    marginBlockEnd: \"5%\",\n                    color: \"white\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }} \n                id={\"a\"+i+\"\"+j} key={\"a\"+i+\"\"+j} placeholder={\"a\"+i+\"\"+j} />)  \n            }\n            matrixA.push(<br/>)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"b\"+i} key={\"b\"+i} placeholder={\"b\"+i} />)\n            matrixX.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\", \n                backgroundColor:\"black\", \n                marginInlineEnd: \"5%\", \n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }} \n            id={\"x\"+i} key={\"x\"+i} placeholder={\"x\"+i} />)  \n            \n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n        \n\n    }\n    initMatrix() {\n        for(var i=0 ; i<this.state.row ; i++) {\n            A[i] = []\n            for(var j=0 ; j<this.state.column ; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\"+(i+1)+\"\"+(j+1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\"+(i+1)).value));\n            x.push(parseFloat(document.getElementById(\"x\"+(i+1)).value));\n        }\n    }\n    initialSchema(n) {\n        for (var i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"X\"+i,\n                dataIndex: \"x\"+i,\n                key: \"x\"+i\n            },)\n        }\n        for (i=1 ; i<=n ; i++) {\n            columns.push({\n                title: \"Error\"+i,\n                dataIndex: \"error\"+i,\n                key: \"error\"+i\n            },)\n        }\n    }\n    appendTable(x, error) {\n        var tag = ''\n        tag += '{\"iteration\": ' + count++ + ',';\n        for (var i=0 ; i<x.length ; i++) {\n            tag += '\"x'+(i+1)+'\": '+x[i].toFixed(8)+', \"error'+(i+1)+'\": ' + error[i].toFixed(8);\n            if (i !== x.length-1) {\n                tag += ','\n            }\n        }\n        tag += '}';\n        dataInTable.push(JSON.parse(tag));  \n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        return(\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{color: \"black\", fontWeight: \"bold\"}}>Jacobi Iteration Method</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                        bordered={true}\n                        style={{ background: \"gray\", borderRadius:\"15px\", color: \"#FFFFFFFF\"}}\n                        onChange={this.handleChange}\n                        >\n                            \n                            {this.state.showDimentionForm && \n                                <div>\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" style={InputStyle}></Input>\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" style={InputStyle}></Input>\n                                    <Button id=\"dimention_button\" onClick= {\n                                        ()=>{this.createMatrix(this.state.row, this.state.column);\n                                            this.initialSchema(this.state.row)}\n                                        }  \n                                        style={{background: \"#4caf50\", color: \"white\", fontSize: \"20px\"}}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div> \n                            }\n                            \n                            {this.state.showMatrixForm && \n                                <div>\n                                    <h2>Matrix [A]</h2><br/>{matrixA}\n                                    <h2>Vector [B]<br/></h2>{matrixB}\n                                    <h2>Initial X<br/></h2>{matrixX}\n                                    <Button \n                                        id=\"matrix_button\"  \n                                        style={{background: \"blue\", color: \"white\", fontSize: \"20px\"}}\n                                        onClick={()=>this.jacobi(parseInt(this.state.row))}>\n                                        Submit\n                                    </Button>                          \n                                </div>\n                            }\n                            \n                        </Card>                        \n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard && \n                            <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{width: \"100%\", background: \"#2196f3\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                            >\n                                <Table columns={columns} bordered dataSource={dataInTable} bodyStyle={{fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\", border:\"2px solid white\"}}></Table>\n                            </Card>\n                        }                          \n                    </div>\n\n                    \n\n \n\n                   \n                </div>\n\n                \n            </div>\n        );\n    }\n}\nexport default Jacobi;\n\n\n\n"]},"metadata":{},"sourceType":"module"}