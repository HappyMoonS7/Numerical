{"ast":null,"code":"import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createSum } from '../../function/statistics/sum.js';\n/**\n * Attach a transform function to math.sum\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function mean\n * from one-based to zero based\n */\n\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSumTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var typed = _ref.typed,\n      config = _ref.config,\n      add = _ref.add,\n      numeric = _ref.numeric;\n  var sum = createSum({\n    typed,\n    config,\n    add,\n    numeric\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return sum.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/node_modules/mathjs/lib/esm/expression/transform/sum.transform.js"],"names":["isBigNumber","isCollection","isNumber","factory","errorTransform","createSum","name","dependencies","createSumTransform","_ref","typed","config","add","numeric","sum","any","args","length","dim","minus","apply","err","isTransformFunction"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAoCC,QAApC,QAAoD,mBAApD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2B,SAA3B,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAAA,MAEjFC,KAFiF,GAM/ED,IAN+E,CAEjFC,KAFiF;AAAA,MAGjFC,MAHiF,GAM/EF,IAN+E,CAGjFE,MAHiF;AAAA,MAIjFC,GAJiF,GAM/EH,IAN+E,CAIjFG,GAJiF;AAAA,MAKjFC,OALiF,GAM/EJ,IAN+E,CAKjFI,OALiF;AAOnF,MAAIC,GAAG,GAAGT,SAAS,CAAC;AAClBK,IAAAA,KADkB;AAElBC,IAAAA,MAFkB;AAGlBC,IAAAA,GAHkB;AAIlBC,IAAAA;AAJkB,GAAD,CAAnB;AAMA,SAAOH,KAAK,CAACJ,IAAD,EAAO;AACjB,cAAU,SAASS,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIA,IAAI,CAACC,MAAL,KAAgB,CAAhB,IAAqBhB,YAAY,CAACe,IAAI,CAAC,CAAD,CAAL,CAArC,EAAgD;AAC9C,YAAIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAd;;AAEA,YAAId,QAAQ,CAACgB,GAAD,CAAZ,EAAmB;AACjBF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,GAAG,CAAhB;AACD,SAFD,MAEO,IAAIlB,WAAW,CAACkB,GAAD,CAAf,EAAsB;AAC3BF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAV;AACD;AACF;;AAED,UAAI;AACF,eAAOL,GAAG,CAACM,KAAJ,CAAU,IAAV,EAAgBJ,IAAhB,CAAP;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,cAAMjB,cAAc,CAACiB,GAAD,CAApB;AACD;AACF;AAlBgB,GAAP,CAAZ;AAoBD,CAjCqD,EAiCnD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CAjCmD,CAA/C","sourcesContent":["import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createSum } from '../../function/statistics/sum.js';\n/**\n * Attach a transform function to math.sum\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function mean\n * from one-based to zero based\n */\n\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSumTransform = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  var sum = createSum({\n    typed,\n    config,\n    add,\n    numeric\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return sum.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}