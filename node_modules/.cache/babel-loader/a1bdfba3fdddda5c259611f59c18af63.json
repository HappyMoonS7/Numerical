{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Interpolation/Newton.js\";\nimport React, { Component } from 'react';\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nconst InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar columns = [{\n  title: \"No.\",\n  dataIndex: \"no\",\n  key: \"no\"\n}, {\n  title: \"X\",\n  dataIndex: \"x\",\n  key: \"x\"\n}, {\n  title: \"Y\",\n  dataIndex: \"y\",\n  key: \"y\"\n}];\nvar x, y, tableTag, interpolatePoint, tempTag, fx;\n\nclass Newton extends Component {\n  constructor() {\n    super();\n    x = [];\n    y = [];\n    interpolatePoint = [];\n    tempTag = [];\n    tableTag = [];\n    this.state = {\n      nPoints: 0,\n      X: 0,\n      interpolatePoint: 0,\n      showInputForm: true,\n      showTableInput: false,\n      showOutputCard: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newton_difference = this.newton_difference.bind(this);\n  }\n\n  createTableInput(n) {\n    for (var i = 1; i <= n; i++) {\n      x.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"100%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"x\" + i,\n        placeholder: \"x\" + i\n      }, \"x\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 20\n      }, this));\n      y.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"100%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"y\" + i,\n        placeholder: \"y\" + i\n      }, \"y\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 20\n      }, this));\n      tableTag.push({\n        no: i,\n        x: x[i - 1],\n        y: y[i - 1]\n      });\n    }\n\n    this.setState({\n      showInputForm: false,\n      showTableInput: true\n    });\n  }\n\n  createInterpolatePointInput() {\n    for (var i = 1; i <= this.state.interpolatePoint; i++) {\n      tempTag.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"14%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"p\" + i,\n        placeholder: \"p\" + i\n      }, \"p\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 26\n      }, this));\n    }\n  }\n\n  initialValue() {\n    x = [];\n    y = [];\n\n    for (var i = 1; i <= this.state.nPoints; i++) {\n      x[i] = parseFloat(document.getElementById(\"x\" + i).value);\n      y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n    }\n\n    for (i = 1; i <= this.state.interpolatePoint; i++) {\n      interpolatePoint[i] = parseInt(document.getElementById(\"p\" + i).value);\n    }\n  }\n\n  C(n) {\n    if (n === 1) {\n      return 0;\n    } else {\n      return (y[interpolatePoint[n]] - y[interpolatePoint[n - 1]]) / (x[interpolatePoint[n]] - x[interpolatePoint[n - 1]]) - this.C(n - 1);\n    }\n  }\n\n  findX(n, X) {\n    if (n < 1) {\n      return 1;\n    } else {\n      console.log(X + \" - \" + x[interpolatePoint[n]]);\n      return (X - x[interpolatePoint[n]]) * this.findX(n - 1, X);\n    }\n  }\n\n  newton_difference(n, X) {\n    this.initialValue();\n    fx = y[1];\n\n    if (n === 2) {\n      //if linear interpolate\n      fx += (y[interpolatePoint[2]] - y[interpolatePoint[1]]) / (x[interpolatePoint[2]] - x[interpolatePoint[1]]) * (X - x[interpolatePoint[1]]);\n    } else {\n      for (var i = 2; i <= n; i++) {\n        fx += this.C(i) / (x[interpolatePoint[i]] - x[interpolatePoint[1]]) * this.findX(i - 1, X);\n      }\n    }\n\n    this.setState({\n      showOutputCard: true\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        children: \"Newton's Divided Differences Interpolation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            bordered: true,\n            style: {\n              background: \"gray\",\n              borderRadius: \"15px\",\n              color: \"#FFFFFFFF\"\n            },\n            onChange: this.handleChange,\n            children: [this.state.showTableInput && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Table, {\n                columns: columns,\n                dataSource: tableTag,\n                pagination: false,\n                bordered: true,\n                bodyStyle: {\n                  fontWeight: \"bold\",\n                  fontSize: \"18px\",\n                  color: \"white\",\n                  overflowY: \"scroll\",\n                  minWidth: 120,\n                  maxHeight: 300\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"interpolatePoint \", parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\" : parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" : \"(Polynomial)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 43\n              }, this), tempTag, /*#__PURE__*/_jsxDEV(Button, {\n                id: \"matrix_button\",\n                style: {\n                  background: \"blue\",\n                  color: \"white\"\n                },\n                onClick: () => this.newton_difference(parseInt(this.state.interpolatePoint), parseFloat(this.state.X)),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this), this.state.showInputForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Number of points(n)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"nPoints\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 65\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"X\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 47\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"interpolatePoint\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"interpolatePoint\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 62\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"dimention_button\",\n                onClick: () => {\n                  this.createTableInput(parseInt(this.state.nPoints));\n                  this.createInterpolatePointInput();\n                },\n                style: {\n                  background: \"#4caf50\",\n                  color: \"white\"\n                },\n                children: [\"Submit\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 47\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(Card, {\n            title: \"Output\",\n            bordered: true,\n            style: {\n              border: \"2px solid black\",\n              background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\",\n              color: \"white\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: \"24px\",\n                fontWeight: \"bold\"\n              },\n              children: fx\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Newton;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Interpolation/Newton.js"],"names":["React","Component","Card","Input","Button","Table","InputStyle","background","color","fontWeight","fontSize","columns","title","dataIndex","key","x","y","tableTag","interpolatePoint","tempTag","fx","Newton","constructor","state","nPoints","X","showInputForm","showTableInput","showOutputCard","handleChange","bind","newton_difference","createTableInput","n","i","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","no","setState","createInterpolatePointInput","initialValue","parseFloat","document","getElementById","value","parseInt","C","findX","console","log","event","target","name","render","padding","borderRadius","overflowY","minWidth","maxHeight","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n\n};\nvar columns = [\n    {\n        title: \"No.\",\n        dataIndex: \"no\",\n        key: \"no\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    }\n];\nvar x, y, tableTag, interpolatePoint, tempTag, fx\n\nclass Newton extends Component {\n\n    constructor() {\n        super();\n        x = []\n        y = []\n        interpolatePoint = []\n        tempTag = []\n        tableTag = []\n        this.state = {\n            nPoints: 0,\n            X: 0,\n            interpolatePoint: 0,\n            showInputForm: true,\n            showTableInput: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.newton_difference = this.newton_difference.bind(this);\n\n    }\n    createTableInput(n) {\n        for (var i = 1; i <= n; i++) {\n            x.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={\"x\" + i} />);\n            y.push(<Input style={{\n                width: \"100%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"y\" + i} key={\"y\" + i} placeholder={\"y\" + i} />);\n            tableTag.push({\n                no: i,\n                x: x[i - 1],\n                y: y[i - 1]\n            });\n        }\n\n\n        this.setState({\n            showInputForm: false,\n            showTableInput: true,\n        })\n    }\n    createInterpolatePointInput() {\n        for (var i = 1; i <= this.state.interpolatePoint; i++) {\n            tempTag.push(<Input style={{\n                width: \"14%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"p\" + i} key={\"p\" + i} placeholder={\"p\" + i} />)\n        }\n    }\n    initialValue() {\n        x = []\n        y = []\n        for (var i = 1; i <= this.state.nPoints; i++) {\n            x[i] = parseFloat(document.getElementById(\"x\" + i).value);\n            y[i] = parseFloat(document.getElementById(\"y\" + i).value);\n        }\n        for (i = 1; i <= this.state.interpolatePoint; i++) {\n            interpolatePoint[i] = parseInt(document.getElementById(\"p\" + i).value);\n        }\n    }\n    C(n) {\n        if (n === 1) {\n            return 0\n        }\n        else {\n            return ((y[interpolatePoint[n]] - y[interpolatePoint[n - 1]]) / (x[interpolatePoint[n]] - x[interpolatePoint[n - 1]])) - this.C(n - 1)\n        }\n\n    }\n    findX(n, X) {\n        if (n < 1) {\n            return 1\n        }\n        else {\n            console.log(X + \" - \" + x[interpolatePoint[n]])\n            return (X - x[interpolatePoint[n]]) * this.findX(n - 1, X)\n        }\n    }\n    newton_difference(n, X) {\n        this.initialValue()\n        fx = y[1]\n        if (n === 2) { //if linear interpolate\n            fx += ((y[interpolatePoint[2]] - y[interpolatePoint[1]]) / (x[interpolatePoint[2]] - x[interpolatePoint[1]])) * (X - x[interpolatePoint[1]])\n        }\n        else {\n            for (var i = 2; i <= n; i++) {\n                fx += (this.C(i) / (x[interpolatePoint[i]] - x[interpolatePoint[1]])) * this.findX(i - 1, X)\n            }\n        }\n\n        this.setState({\n            showOutputCard: true\n        })\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        return (\n            <div style={{ padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Newton's Divided Differences Interpolation</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"gray\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            {this.state.showTableInput &&\n                                <div>\n                                    <Table columns={columns} dataSource={tableTag} pagination={false} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"white\", overflowY: \"scroll\", minWidth: 120, maxHeight: 300 }}></Table>\n                                    <br /><h2>interpolatePoint {parseInt(this.state.interpolatePoint) === 2 ? \"(Linear)\" :\n                                        parseInt(this.state.interpolatePoint) === 3 ? \"(Quadratic)\" :\n                                            \"(Polynomial)\"}</h2>{tempTag}\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"blue\", color: \"white\" }}\n                                        onClick={() => this.newton_difference(parseInt(this.state.interpolatePoint), parseFloat(this.state.X))}>\n                                        Submit\n                                </Button>\n                                </div>}\n\n                            {this.state.showInputForm &&\n                                <div>\n                                    <h2>Number of points(n)</h2><Input size=\"large\" name=\"nPoints\" style={InputStyle}></Input>\n                                    <h2>X</h2><Input size=\"large\" name=\"X\" style={InputStyle}></Input>\n                                    <h2>interpolatePoint</h2><Input size=\"large\" name=\"interpolatePoint\" style={InputStyle}></Input>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => {\n                                            this.createTableInput(parseInt(this.state.nPoints));\n                                            this.createInterpolatePointInput()\n                                        }\n                                    }\n                                        style={{ background: \"#4caf50\", color: \"white\" }}>\n                                        Submit<br></br>\n                                    </Button>\n                                </div>\n                            }\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ border: \"2px solid black\", background: \"rgb(61, 104, 61) none repeat scroll 0% 0%\", color: \"white\" }}\n                            >\n                                <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{fx}</p>\n\n                            </Card>\n                        }\n                    </div>\n\n                </div>\n\n\n            </div>\n        );\n    }\n}\nexport default Newton;\n\n\n\n"]},"metadata":{},"sourceType":"module"}