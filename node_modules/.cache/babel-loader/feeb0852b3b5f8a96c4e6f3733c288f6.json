{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Linear Algebra/Gradient.js\";\nimport { Button, Card, Input, Table } from 'antd';\nimport 'antd/dist/antd.css';\nimport { add, det, multiply, subtract, transpose } from 'mathjs';\nimport React, { Component } from 'react';\nimport '../../screen.css';\nconst InputStyle = {\n  background: \"#1890ff\",\n  color: \"white\",\n  fontWeight: \"bold\",\n  fontSize: \"24px\"\n};\nvar A = [],\n    B = [],\n    matrixA = [],\n    matrixB = [],\n    matrixX = [],\n    x,\n    epsilon,\n    dataInTable = [],\n    count = 1,\n    output;\nvar columns = [{\n  title: \"Iteration\",\n  dataIndex: \"iteration\",\n  key: \"iteration\"\n}, {\n  title: \"λ\",\n  dataIndex: \"lambda\",\n  key: \"lambda\"\n}, {\n  title: \"{X}\",\n  dataIndex: \"X\",\n  key: \"X\"\n}, {\n  title: \"Error\",\n  dataIndex: \"error\",\n  key: \"error\"\n}];\n\nclass Gradient extends Component {\n  constructor() {\n    super();\n    this.state = {\n      row: 0,\n      column: 0,\n      showDimentionForm: true,\n      showMatrixForm: false,\n      showOutputCard: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.conjugate_gradient = this.conjugate_gradient.bind(this);\n  }\n\n  positive_definite(dimention) {\n    var tempMatrix = [];\n\n    for (var i = 0; i < dimention; i++) {\n      tempMatrix[i] = [];\n\n      for (var j = 0; j < dimention; j++) {\n        tempMatrix[i][j] = A[i][j];\n      }\n    }\n\n    if (det(tempMatrix) <= 0) {\n      return false;\n    }\n\n    if (dimention !== this.state.row - 1) {\n      return this.positive_definite(++dimention);\n    }\n\n    return true;\n  }\n\n  conjugate_gradient() {\n    this.initMatrix();\n\n    if (!this.positive_definite(1)) {\n      output = \"This matrix doesn't positive definite\";\n      this.setState({\n        showOutputCard: true\n      });\n      return false;\n    } //find {R0}\n\n\n    var R = subtract(multiply(A, x), B);\n    console.log(R); //find D0\n\n    var D = multiply(R, -1);\n    console.log(D);\n\n    do {\n      //find λ\n      var λ = multiply(multiply(transpose(D), R), -1) / multiply(multiply(transpose(D), A), D);\n      console.log(λ);\n      /*------------------------------------------------------------------*/\n      //find new {X}\n\n      x = add(x, multiply(λ, D));\n      console.log(x); //find new {R}\n\n      R = subtract(multiply(A, x), B);\n      console.log(R); //find epsilon\n\n      epsilon = Math.sqrt(multiply(transpose(R), R)).toFixed(8);\n      this.appendTable(λ, JSON.stringify(x).split(',').join(\",\\n\"), epsilon);\n      console.log(epsilon);\n      var α = multiply(multiply(transpose(R), A), D) / multiply(transpose(D), multiply(A, D)).toFixed(8);\n      console.log(α);\n      D = add(multiply(R, -1), multiply(α, D));\n      console.log(D);\n    } while (epsilon > 0.000001);\n\n    output = x;\n    this.setState({\n      showOutputCard: true\n    });\n  }\n\n  createMatrix(row, column) {\n    A = [];\n    B = [];\n    matrixA = [];\n    matrixB = [];\n    matrixX = [];\n    x = [];\n    dataInTable = [];\n\n    for (var i = 1; i <= row; i++) {\n      for (var j = 1; j <= column; j++) {\n        matrixA.push( /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: \"18%\",\n            height: \"50%\",\n            backgroundColor: \"#06d9a0\",\n            marginInlineEnd: \"5%\",\n            marginBlockEnd: \"5%\",\n            color: \"white\",\n            fontSize: \"18px\",\n            fontWeight: \"bold\"\n          },\n          id: \"a\" + i + \"\" + j,\n          placeholder: \"a\" + i + \"\" + j\n        }, \"a\" + i + \"\" + j, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 30\n        }, this));\n      }\n\n      matrixA.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 26\n      }, this));\n      matrixB.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"18%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"b\" + i,\n        placeholder: \"b\" + i\n      }, \"b\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 26\n      }, this));\n      matrixX.push( /*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"18%\",\n          height: \"50%\",\n          backgroundColor: \"black\",\n          marginInlineEnd: \"5%\",\n          marginBlockEnd: \"5%\",\n          color: \"white\",\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        id: \"x\" + i,\n        placeholder: \"x\" + i\n      }, \"x\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 26\n      }, this));\n    }\n\n    this.setState({\n      showDimentionForm: false,\n      showMatrixForm: true\n    });\n  }\n\n  initMatrix() {\n    for (var i = 0; i < this.state.row; i++) {\n      A[i] = [];\n\n      for (var j = 0; j < this.state.column; j++) {\n        A[i][j] = parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value);\n      }\n\n      B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n      x.push(parseFloat(document.getElementById(\"x\" + (i + 1)).value));\n    }\n  }\n\n  appendTable(lambda, x, error) {\n    dataInTable.push({\n      iteration: count++,\n      lambda: lambda,\n      X: x,\n      error: error\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#FFFF\",\n        padding: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        children: \"Conjugate Gradient Iteration Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            bordered: true,\n            style: {\n              background: \"gray\",\n              borderRadius: \"15px\",\n              color: \"#FFFFFFFF\"\n            },\n            onChange: this.handleChange,\n            children: [this.state.showDimentionForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Row\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"row\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Column\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                size: \"large\",\n                name: \"column\",\n                style: InputStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 52\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                id: \"dimention_button\",\n                onClick: () => {\n                  this.createMatrix(this.state.row, this.state.column);\n                },\n                style: {\n                  background: \"#4caf50\",\n                  color: \"white\"\n                },\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this), this.state.showMatrixForm && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Matrix [A]\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 56\n              }, this), matrixA, /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Vector [B]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 51\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 37\n              }, this), matrixB, /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Initial X\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 50\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 37\n              }, this), matrixX, /*#__PURE__*/_jsxDEV(Button, {\n                id: \"matrix_button\",\n                style: {\n                  background: \"blue\",\n                  color: \"white\"\n                },\n                onClick: () => this.conjugate_gradient(parseInt(this.state.row)),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: this.state.showOutputCard && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              title: \"Output\",\n              bordered: true,\n              style: {\n                background: \"#3d683d\",\n                color: \"#FFFFFFFF\"\n              },\n              onChange: this.handleChange,\n              id: \"answerCard\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  fontSize: \"24px\",\n                  fontWeight: \"bold\"\n                },\n                children: JSON.stringify(output)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), this.state.showOutputCard && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          title: \"Output\",\n          bordered: true,\n          style: {\n            width: \"100%\",\n            background: \"#2196f3\",\n            color: \"#FFFFFFFF\"\n          },\n          id: \"outputCard\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            columns: columns,\n            dataSource: dataInTable,\n            bordered: true,\n            bodyStyle: {\n              fontWeight: \"bold\",\n              fontSize: \"18px\",\n              color: \"black\",\n              overflowX: \"scroll\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Gradient;","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/src/Calculate/Linear Algebra/Gradient.js"],"names":["Button","Card","Input","Table","add","det","multiply","subtract","transpose","React","Component","InputStyle","background","color","fontWeight","fontSize","A","B","matrixA","matrixB","matrixX","x","epsilon","dataInTable","count","output","columns","title","dataIndex","key","Gradient","constructor","state","row","column","showDimentionForm","showMatrixForm","showOutputCard","handleChange","bind","conjugate_gradient","positive_definite","dimention","tempMatrix","i","j","initMatrix","setState","R","console","log","D","λ","Math","sqrt","toFixed","appendTable","JSON","stringify","split","join","α","createMatrix","push","width","height","backgroundColor","marginInlineEnd","marginBlockEnd","parseFloat","document","getElementById","value","lambda","error","iteration","X","event","target","name","render","padding","borderRadius","parseInt","overflowX"],"mappings":"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","sourcesContent":["import { Button, Card, Input, Table } from 'antd';\nimport 'antd/dist/antd.css';\nimport { add, det, multiply, subtract, transpose } from 'mathjs';\nimport React, { Component } from 'react';\nimport '../../screen.css';\nconst InputStyle = {\n    background: \"#1890ff\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n\n};\n\nvar A = [], B = [], matrixA = [], matrixB = [], matrixX = [], x, epsilon, dataInTable = [], count = 1, output\nvar columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"λ\",\n        dataIndex: \"lambda\",\n        key: \"lambda\"\n    },\n    {\n        title: \"{X}\",\n        dataIndex: \"X\",\n        key: \"X\"\n    },\n    {\n        title: \"Error\",\n        dataIndex: \"error\",\n        key: \"error\"\n    }\n];\nclass Gradient extends Component {\n    constructor() {\n        super();\n        this.state = {\n            row: 0,\n            column: 0,\n            showDimentionForm: true,\n            showMatrixForm: false,\n            showOutputCard: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.conjugate_gradient = this.conjugate_gradient.bind(this);\n\n    }\n    positive_definite(dimention) {\n        var tempMatrix = []\n        for (var i = 0; i < dimention; i++) {\n            tempMatrix[i] = []\n            for (var j = 0; j < dimention; j++) {\n                tempMatrix[i][j] = A[i][j];\n            }\n        }\n        if (det(tempMatrix) <= 0) {\n            return false;\n        }\n        if (dimention !== this.state.row - 1) {\n            return this.positive_definite(++dimention);\n        }\n        return true;\n    }\n\n    conjugate_gradient() {\n        this.initMatrix();\n        if (!this.positive_definite(1)) {\n            output = \"This matrix doesn't positive definite\"\n            this.setState({\n                showOutputCard: true\n            });\n            return false;\n        }\n        //find {R0}\n        var R = subtract(multiply(A, x), B);\n        console.log(R)\n        //find D0\n        var D = multiply(R, -1);\n        console.log(D)\n        do {\n            //find λ\n            var λ = (multiply(multiply(transpose(D), R), -1)) /\n                (multiply(multiply(transpose(D), A), D))\n            console.log(λ)\n            /*------------------------------------------------------------------*/\n\n            //find new {X}\n            x = add(x, multiply(λ, D));\n            console.log(x)\n            //find new {R}\n            R = subtract(multiply(A, x), B);\n            console.log(R)\n            //find epsilon\n            epsilon = Math.sqrt(multiply(transpose(R), R)).toFixed(8);\n            this.appendTable(λ, JSON.stringify(x).split(',').join(\",\\n\"), epsilon);\n            console.log(epsilon)\n            var α = (multiply(multiply(transpose(R), A), D)) /\n                multiply(transpose(D), multiply(A, D)).toFixed(8);\n            console.log(α)\n            D = add(multiply(R, -1), multiply(α, D))\n            console.log(D)\n        } while (epsilon > 0.000001);\n        output = x\n \n        this.setState({  \n            showOutputCard: true\n        });\n\n\n    }\n    createMatrix(row, column) {\n        A = []\n        B = []\n        matrixA = []\n        matrixB = []\n        matrixX = []\n        x = []\n        dataInTable = []\n        for (var i = 1; i <= row; i++) {\n            for (var j = 1; j <= column; j++) {\n                matrixA.push(<Input style={{\n                    width: \"18%\",\n                    height: \"50%\",\n                    backgroundColor: \"#06d9a0\",\n                    marginInlineEnd: \"5%\",\n                    marginBlockEnd: \"5%\",\n                    color: \"white\",\n                    fontSize: \"18px\",\n                    fontWeight: \"bold\"\n                }}\n                    id={\"a\" + i + \"\" + j} key={\"a\" + i + \"\" + j} placeholder={\"a\" + i + \"\" + j} />)\n            }\n            matrixA.push(<br />)\n            matrixB.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"b\" + i} key={\"b\" + i} placeholder={\"b\" + i} />)\n            matrixX.push(<Input style={{\n                width: \"18%\",\n                height: \"50%\",\n                backgroundColor: \"black\",\n                marginInlineEnd: \"5%\",\n                marginBlockEnd: \"5%\",\n                color: \"white\",\n                fontSize: \"18px\",\n                fontWeight: \"bold\"\n            }}\n                id={\"x\" + i} key={\"x\" + i} placeholder={\"x\" + i} />)\n\n\n        }\n\n        this.setState({\n            showDimentionForm: false,\n            showMatrixForm: true,\n        })\n\n\n\n    }\n    initMatrix() {\n        for (var i = 0; i < this.state.row; i++) {\n            A[i] = []\n            for (var j = 0; j < this.state.column; j++) {\n                A[i][j] = (parseFloat(document.getElementById(\"a\" + (i + 1) + \"\" + (j + 1)).value));\n            }\n            B.push(parseFloat(document.getElementById(\"b\" + (i + 1)).value));\n            x.push(parseFloat(document.getElementById(\"x\" + (i + 1)).value));\n        }\n    }\n    appendTable(lambda, x, error) {\n        dataInTable.push({\n            iteration: count++,\n            lambda: lambda,\n            X: x,\n            error: error\n        });\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Conjugate Gradient Iteration Method</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"gray\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n\n                            {this.state.showDimentionForm &&\n                                <div>\n                                    <h2>Row</h2><Input size=\"large\" name=\"row\" style={InputStyle}></Input>\n                                    <h2>Column</h2><Input size=\"large\" name=\"column\" style={InputStyle}></Input>\n                                    <Button id=\"dimention_button\" onClick={\n                                        () => { this.createMatrix(this.state.row, this.state.column) }\n                                    }\n                                        style={{ background: \"#4caf50\", color: \"white\" }}>\n                                        Submit\n                                    </Button>\n                                </div>\n                            }\n\n                            {this.state.showMatrixForm &&\n                                <div>\n                                    <h2>Matrix [A]</h2><br />{matrixA}\n                                    <h2>Vector [B]<br /></h2>{matrixB}\n                                    <h2>Initial X<br /></h2>{matrixX}\n                                    <Button\n                                        id=\"matrix_button\"\n                                        style={{ background: \"blue\", color: \"white\" }}\n                                        onClick={() => this.conjugate_gradient(parseInt(this.state.row))}>\n                                        Submit\n                                    </Button>\n                                </div>\n\n                            }\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showOutputCard &&\n                            <div>\n                                <Card\n                                    title={\"Output\"}\n                                    bordered={true}\n                                    style={{ background: \"#3d683d\", color: \"#FFFFFFFF\" }}\n                                    onChange={this.handleChange} id=\"answerCard\">\n                                    <p style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>{JSON.stringify(output)}</p>\n                                </Card>\n\n                            </div>\n\n                        }\n                    </div>\n                </div>\n                {/* <div className=\"row\"> */}\n                    {this.state.showOutputCard &&\n                        <div>\n                            <Card\n                                title={\"Output\"}\n                                bordered={true}\n                                style={{ width: \"100%\", background: \"#2196f3\", color: \"#FFFFFFFF\" }}\n                                id=\"outputCard\"\n                            >\n                                <Table columns={columns} dataSource={dataInTable} bordered={true} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\", overflowX: \"scroll\" }}\n                                ></Table>\n                            </Card>\n\n                        </div>\n\n                    }\n                {/* </div> */}\n\n\n            </div>\n        );\n    }\n}\nexport default Gradient;\n\n\n\n"]},"metadata":{},"sourceType":"module"}