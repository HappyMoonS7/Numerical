{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createVariance } from '../../function/statistics/variance.js';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\n/**\n * Attach a transform function to math.var\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function var\n * from one-based to zero based\n */\n\nexport var createVarianceTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var typed = _ref.typed,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      apply = _ref.apply,\n      isNaN = _ref.isNaN;\n  var variance = createVariance({\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length >= 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return variance.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Fluke_Numer_web/node_modules/mathjs/lib/esm/expression/transform/variance.transform.js"],"names":["factory","isBigNumber","isCollection","isNumber","errorTransform","createVariance","name","dependencies","createVarianceTransform","_ref","typed","add","subtract","multiply","divide","apply","isNaN","variance","any","args","length","dim","minus","err","isTransformFunction"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,QAApC,QAAoD,mBAApD;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,UAAjB,EAA6B,UAA7B,EAAyC,QAAzC,EAAmD,OAAnD,EAA4D,OAA5D,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,uBAAuB,GAAG,eAAeR,OAAO,CAACM,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAAA,MAEtFC,KAFsF,GASpFD,IAToF,CAEtFC,KAFsF;AAAA,MAGtFC,GAHsF,GASpFF,IAToF,CAGtFE,GAHsF;AAAA,MAItFC,QAJsF,GASpFH,IAToF,CAItFG,QAJsF;AAAA,MAKtFC,QALsF,GASpFJ,IAToF,CAKtFI,QALsF;AAAA,MAMtFC,MANsF,GASpFL,IAToF,CAMtFK,MANsF;AAAA,MAOtFC,KAPsF,GASpFN,IAToF,CAOtFM,KAPsF;AAAA,MAQtFC,KARsF,GASpFP,IAToF,CAQtFO,KARsF;AAUxF,MAAIC,QAAQ,GAAGZ,cAAc,CAAC;AAC5BK,IAAAA,KAD4B;AAE5BC,IAAAA,GAF4B;AAG5BC,IAAAA,QAH4B;AAI5BC,IAAAA,QAJ4B;AAK5BC,IAAAA,MAL4B;AAM5BC,IAAAA,KAN4B;AAO5BC,IAAAA;AAP4B,GAAD,CAA7B;AASA,SAAON,KAAK,CAACJ,IAAD,EAAO;AACjB,cAAU,SAASY,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIA,IAAI,CAACC,MAAL,IAAe,CAAf,IAAoBlB,YAAY,CAACiB,IAAI,CAAC,CAAD,CAAL,CAApC,EAA+C;AAC7C,YAAIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAd;;AAEA,YAAIhB,QAAQ,CAACkB,GAAD,CAAZ,EAAmB;AACjBF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,GAAG,CAAhB;AACD,SAFD,MAEO,IAAIpB,WAAW,CAACoB,GAAD,CAAf,EAAsB;AAC3BF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAV;AACD;AACF;;AAED,UAAI;AACF,eAAOL,QAAQ,CAACF,KAAT,CAAe,IAAf,EAAqBI,IAArB,CAAP;AACD,OAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,cAAMnB,cAAc,CAACmB,GAAD,CAApB;AACD;AACF;AAlBgB,GAAP,CAAZ;AAoBD,CAvC0D,EAuCxD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CAvCwD,CAApD","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createVariance } from '../../function/statistics/variance.js';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\n/**\n * Attach a transform function to math.var\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function var\n * from one-based to zero based\n */\n\nexport var createVarianceTransform = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  } = _ref;\n  var variance = createVariance({\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  });\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length >= 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return variance.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}