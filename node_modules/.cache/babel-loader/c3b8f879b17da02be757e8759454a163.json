{"ast":null,"code":"import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createDiff } from '../../function/matrix/diff.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];\nexport var createDiffTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      subtract = _ref.subtract,\n      number = _ref.number,\n      bignumber = _ref.bignumber;\n  var diff = createDiff({\n    typed,\n    matrix,\n    subtract,\n    number,\n    bignumber\n  });\n  /**\n   * Attach a transform function to math.diff\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return diff.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/Users/bovornpoljiturai/Desktop/Numerical-method(CSB)/node_modules/mathjs/lib/esm/expression/transform/diff.transform.js"],"names":["isBigNumber","isCollection","isNumber","factory","errorTransform","createDiff","name","dependencies","createDiffTransform","_ref","typed","matrix","subtract","number","bignumber","diff","any","args","length","dim","minus","apply","err","isTransformFunction"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAoCC,QAApC,QAAoD,mBAApD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,QAAhC,EAA0C,WAA1C,CAAnB;AACA,OAAO,IAAIC,mBAAmB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAsBE,IAAD,IAAU;AAAA,MAElFC,KAFkF,GAOhFD,IAPgF,CAElFC,KAFkF;AAAA,MAGlFC,MAHkF,GAOhFF,IAPgF,CAGlFE,MAHkF;AAAA,MAIlFC,QAJkF,GAOhFH,IAPgF,CAIlFG,QAJkF;AAAA,MAKlFC,MALkF,GAOhFJ,IAPgF,CAKlFI,MALkF;AAAA,MAMlFC,SANkF,GAOhFL,IAPgF,CAMlFK,SANkF;AAQpF,MAAIC,IAAI,GAAGV,UAAU,CAAC;AACpBK,IAAAA,KADoB;AAEpBC,IAAAA,MAFoB;AAGpBC,IAAAA,QAHoB;AAIpBC,IAAAA,MAJoB;AAKpBC,IAAAA;AALoB,GAAD,CAArB;AAOA;AACF;AACA;AACA;AACA;AACA;;AAEE,SAAOJ,KAAK,CAACJ,IAAD,EAAO;AACjB,cAAU,SAASU,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIA,IAAI,CAACC,MAAL,KAAgB,CAAhB,IAAqBjB,YAAY,CAACgB,IAAI,CAAC,CAAD,CAAL,CAArC,EAAgD;AAC9C,YAAIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAd;;AAEA,YAAIf,QAAQ,CAACiB,GAAD,CAAZ,EAAmB;AACjBF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,GAAG,CAAhB;AACD,SAFD,MAEO,IAAInB,WAAW,CAACmB,GAAD,CAAf,EAAsB;AAC3BF,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAV;AACD;AACF;;AAED,UAAI;AACF,eAAOL,IAAI,CAACM,KAAL,CAAW,IAAX,EAAiBJ,IAAjB,CAAP;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,cAAMlB,cAAc,CAACkB,GAAD,CAApB;AACD;AACF;AAlBgB,GAAP,CAAZ;AAoBD,CA1CsD,EA0CpD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CA1CoD,CAAhD","sourcesContent":["import { isBigNumber, isCollection, isNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { createDiff } from '../../function/matrix/diff.js';\nvar name = 'diff';\nvar dependencies = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];\nexport var createDiffTransform = /* #__PURE__ */factory(name, dependencies, (_ref) => {\n  var {\n    typed,\n    matrix,\n    subtract,\n    number,\n    bignumber\n  } = _ref;\n  var diff = createDiff({\n    typed,\n    matrix,\n    subtract,\n    number,\n    bignumber\n  });\n  /**\n   * Attach a transform function to math.diff\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n\n  return typed(name, {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return diff.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}